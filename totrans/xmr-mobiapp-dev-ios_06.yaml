- en: Chapter 6. Events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Events are an essential aspect of any iOS application. In fact, without them,
    your phone will just sit there like a useless lump of plastic! Every time something
    happens, an event is raised. For the developer, events are everything.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Handling events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event reference
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control event reference
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Events are handled using one of the following types:'
  prefs: []
  type: TYPE_NORMAL
- en: Delegates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handlers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delegates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can think of a delegate event as an inline event. They can be anonymous
    or can use the event as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When the delegate is anonymous, the code will be as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When the delegate is using an event, the code will be as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the button doesn't have anything that requires either the sender or the event,
    the anonymous event can be used.
  prefs: []
  type: TYPE_NORMAL
- en: Xamarin.iOS delegates all Events to use `EventArgs e` when not using a handler.
  prefs: []
  type: TYPE_NORMAL
- en: Attaching an event to multiple controls
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For arguments sake, I will assume that a View Controller has four buttons. There
    is nothing wrong with assigning each button its own event handler, but it is a
    waste of memory if one event can handle multiple events. For sanity reasons though,
    this should be restricted so that the `TouchUpInside` events are handled together
    rather than everything on a view (or View Controller) that accepts the `TouchUpInside`
    event.
  prefs: []
  type: TYPE_NORMAL
- en: A simple solution is to have a single event for all of the buttons. However,
    the issue is how to recognize and act on the correct button in the event handler
    itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Possibly the simplest method is to set the `Tag` property with a number, as
    shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Synchronous versus asynchronous event handling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Events come in two flow methods: synchronous and asynchronous. The difference
    between them is as important as understanding their uses. To understand the differences,
    you need to think of two people taking a walk.'
  prefs: []
  type: TYPE_NORMAL
- en: Synchronous walk
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The two people walk together and come to a traffic light at a road; both stop,
    and when the traffic light turns green they set off together. At the end of the
    walk, they are still together and sit down for a beer in the sun.
  prefs: []
  type: TYPE_NORMAL
- en: Asynchronous walk
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The two people start off together to the pub but when they come to the traffic
    light, one of the two stops to wait for the signal while the other crosses. Once
    the signal allows a safe crossing, the one who stopped walks across and carries
    on. The one who just crossed has been stopped by the police for jaywalking. There
    is no guarantee that the pair will reach the pub at the same time; it depends
    on other factors slowing them down.
  prefs: []
  type: TYPE_NORMAL
- en: In a programming context
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Consider a simple messenger application, it consists of two parts: grabbing
    the messages and displaying them. The synchronous event would be for calling the
    address View Controller. Here, clicking on a button can be thought of as two people
    walking together and coming to a stop.'
  prefs: []
  type: TYPE_NORMAL
- en: The asynchronous part is the downloading of the messages; here, the slow part
    is grabbing the messages from the server. If this was to be performed by a synchronous
    event, the messages would be requested and the thread would be frozen while a
    return request from the server was obtained. While that happens the UI is created,
    but how can the UI be created with no data? In a nutshell, it can't and the app
    dies. As it is being performed in an asynchronous way, the creation of the UI
    doesn't happen until the server has sent everything. When that happens, the next
    stage can be performed.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the following code (this has been taken directly from
    the Xamarin ZXing component and is released through the creative commons license):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The important part of the code is the line `var result = await scanner.Scan();`
    until that has returned, the `HandleScanResult` method will not be called. The
    `TouchUpInside` events within the `async` handler are synchronous and once clicked
    on, they either terminate the handler or start another piece of code—they both
    act immediately.
  prefs: []
  type: TYPE_NORMAL
- en: Asynchronous calls are supported by Xamarin.iOS (and Xamarin.Android) due to
    the support for it within Mono 3.
  prefs: []
  type: TYPE_NORMAL
- en: Events and controls reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Not every type of widget has events attached to it by default (there is nothing
    to stop you from writing an event and adding it to a widget though), for example,
    `UIImageView` doesn't have anything attached.
  prefs: []
  type: TYPE_NORMAL
- en: 'The iOS makes a big play over its touch system, which is reflected in the number
    of events given over to touches. Unless the widget has no events attached to it,
    the following table applies to all the widgets:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `TouchCancel` | It is called when cancelling the current touches for a control
    (any control that handles the `TouchCancel` event). |'
  prefs: []
  type: TYPE_TB
- en: '| `TouchDown` | This is the touch-down event on a widget. |'
  prefs: []
  type: TYPE_TB
- en: '| `TouchDownRepeat` | This is a repeated touch-down event. For this event to
    be triggered the `UITouch` `tapCount` value must be >1. |'
  prefs: []
  type: TYPE_TB
- en: '| `TouchDragEnter` | It is called when a finger is dragged into the bounds
    of the control. |'
  prefs: []
  type: TYPE_TB
- en: '| `TouchDragExit` | It is called when a finger is dragged outside the bounds
    of the control. |'
  prefs: []
  type: TYPE_TB
- en: '| `TouchDragInside` | It is called when a finger is dragged inside the bounds
    of the control. |'
  prefs: []
  type: TYPE_TB
- en: '| `TouchDragOutside` | It is called when a finger is dragged just outside the
    bounds of the control. |'
  prefs: []
  type: TYPE_TB
- en: '| `TouchUpInside` | It is called when a finger is inside the bounds of the
    control. |'
  prefs: []
  type: TYPE_TB
- en: '| `TouchUpOutside` | It is called when the finger is outside the bounds of
    the control. |'
  prefs: []
  type: TYPE_TB
- en: Other significant control events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The events listed in the following table are found on many of the controls
    in iOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `ValueChanged` | It allows access to the changed value on a control when
    the value of the control has changed (for example, a `UITextField` having the
    text altered). |'
  prefs: []
  type: TYPE_TB
- en: '| `EditingDidBegin` | It is a touch starting an edit session within a `UITextField`
    class. |'
  prefs: []
  type: TYPE_TB
- en: '| `EditingChanged` | It is emitted when the value of a `UITextField` class
    has changed. |'
  prefs: []
  type: TYPE_TB
- en: '| `EditingDidEnd` | It is a touch ending an edit session of a `UITextField`
    class by leaving the bounds. |'
  prefs: []
  type: TYPE_TB
- en: '| `EditingDidEndOnExit` | It is a touch ending an edit session of a `UITextField`
    class. |'
  prefs: []
  type: TYPE_TB
- en: '| `AllTouchEvents` | It intercepts all touch events. |'
  prefs: []
  type: TYPE_TB
- en: '| `AllEditingEvents` | It intercepts all edit events. |'
  prefs: []
  type: TYPE_TB
- en: '| `AllEvents` | It intercepts all events (including system events). |'
  prefs: []
  type: TYPE_TB
- en: '`TouchesBegan`, `Moved`, `Ended`, and `Cancelled` as well as the gesture recognizer
    events are covered in the next chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: AVAudioPlayer and AVRecordClass
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Playing and recording audio and video is a key feature of the iOS experience.
    The following table lists the events you will need to hook onto for playing and
    recording to go smoothly:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `BeginInterruption` | It is raised when the audio player is interrupted (say
    by a phone call). |'
  prefs: []
  type: TYPE_TB
- en: '| `DecodeError` | It is raised when a file cannot be decoded. |'
  prefs: []
  type: TYPE_TB
- en: '| `EndInterruption` | It is raised when an interruption has finished. |'
  prefs: []
  type: TYPE_TB
- en: '| `FinishedPlaying` | It is raised when a file has finished playing. |'
  prefs: []
  type: TYPE_TB
- en: AVAudioSession
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The audio session is the physical act of playing a piece of audio or video.
    A number of events can interrupt a video or audio that is being played. The following
    table lists the events you need to know:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `BeginInterruption` | It is raised when an audio session is interrupted.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `CategoryChanged` | It is raised when an audio session category is changed.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `EndInterruption` | It is raised when an interruption to the audio session
    is completed. |'
  prefs: []
  type: TYPE_TB
- en: '| `InputAvailabilityChanged` | It is raised when the availability of an audio
    input changes on a device. |'
  prefs: []
  type: TYPE_TB
- en: '| `InputChannelsChanged` | It is raised when the number of input channels are
    changed. |'
  prefs: []
  type: TYPE_TB
- en: '| `OutputChannelsChanged` | It is raised when the number of output channels
    are changed. |'
  prefs: []
  type: TYPE_TB
- en: '| `SampleRateChanged` | It is raised when the sample rate is altered. |'
  prefs: []
  type: TYPE_TB
- en: ABAddressBook
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The address book within the iOS can be altered from both the address book facility
    and from outside of the facility.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `ExternalChange` | It is raised when something external to the address book
    (such as a user application that alters the address book) has changed something
    within the address book. |'
  prefs: []
  type: TYPE_TB
- en: ABNewPersonViewController
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As with all the views, a View Controller is there for the UI to be placed on.
    The address book `NewPersonViewController` is no different.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `NewPersonComplete` | It is called when the user clicks on the **Save** or
    **Cancel** button. If **Save** is clicked on, the new contact is saved to the
    address book database. |'
  prefs: []
  type: TYPE_TB
- en: ABPeoplePickerNavigationController
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `ABPeoplePickerNavigationController` acts in the same way as a normal navigation
    controller, but with a couple of extras added in, as shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Cancelled` | It is sent when the **Cancel** button is clicked on. |'
  prefs: []
  type: TYPE_TB
- en: '| `PerformAction` | It is raised when an object on the person picker is selected.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `SelectPerson` | It is raised when a person is selected. |'
  prefs: []
  type: TYPE_TB
- en: ABPersonViewController
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Person View Controller** displays the selected person with a single event
    attached.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `PerformDefaultAction` | It is sent when the user selects a property value
    for a person in the Person View Controller. |'
  prefs: []
  type: TYPE_TB
- en: ABUnknownPersonViewController
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Unknown Person View** **Controllers** display the information about a person
    prior to being accepted into the `ABAddressBook` class. Its events are listed
    on the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `PerformDefaultAction` | It is sent when the user selects a property value
    for a person in the Person View Controller. |'
  prefs: []
  type: TYPE_TB
- en: '| `PersonCreated` | It is called when the user clicks on the **Save** or **Cancel**
    button. If Save is clicked on, the new contact is saved to the address book database.
    |'
  prefs: []
  type: TYPE_TB
- en: AudioConverter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `AudioConverter` class is used for converting audio formats.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `InputData` | It is raised when data is being given as input through a port.
    |'
  prefs: []
  type: TYPE_TB
- en: AudioSession
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `AudioSession` class is similar to the `AVAudioSession` class but it is
    exclusively for audio.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `AudioRouteChanged` | It is raised when the route for the output changes
    (for example, speaker to headphones). |'
  prefs: []
  type: TYPE_TB
- en: '| `Interrupted` | It is raised when the audio session is interrupted. |'
  prefs: []
  type: TYPE_TB
- en: '| `Resumed` | It is raised when the interruption to the audio session has completed.
    |'
  prefs: []
  type: TYPE_TB
- en: InputAudioQueue
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The input queue is used when audio is being fed into the device.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `InputCompleted` | It is raised when the input has completed. |'
  prefs: []
  type: TYPE_TB
- en: OutputAudioQueue
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The ouput queue is for audio output.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `OutputCompleted` | It is raised when the audio output has completed. |'
  prefs: []
  type: TYPE_TB
- en: AUGraph and AudioUnit
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Both `AUGraph` and `AudioUnit` share this event, which has the same effect for
    both.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `RenderCallback` | It is the callback used for rendering during audio graphing.
    |'
  prefs: []
  type: TYPE_TB
- en: AudioConverter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The callback event is used to callback an object to/from an event.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `EncoderCallback` | It is the callback created for the converter encoder.
    |'
  prefs: []
  type: TYPE_TB
- en: CAAnimation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Animation has two key events; start and end.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `AnimationStarted` | It is called when the animation starts. |'
  prefs: []
  type: TYPE_TB
- en: '| `AnimationEnded` | It is called when the animation ends. |'
  prefs: []
  type: TYPE_TB
- en: CBCentralManager
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `CoreBluetoothCentralManager` is the class that handles the adding or removing
    of bluetooth devices. The handling events have been listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `ConnectedPeripheral` | It is raised when a connection is successfully made.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `DisconnectedPeripheral` | It is raised when a connection is successfully
    disconnected. |'
  prefs: []
  type: TYPE_TB
- en: '| `DiscoveredPeripheral` | It is raised when a connection is discovered. |'
  prefs: []
  type: TYPE_TB
- en: '| `FailedToConnectPeripheral` | It is raised when a connection to a peripheral
    fails. |'
  prefs: []
  type: TYPE_TB
- en: '| `RetrievedConnectedPeripheral` | It is raised after a connected peripheral
    information is retrieved. |'
  prefs: []
  type: TYPE_TB
- en: '| `RetrievedPeripherals` | It is raised after requesting a list of all stored
    peripherals. |'
  prefs: []
  type: TYPE_TB
- en: '| `UpdatedState` | It is called after the state of a connection changes. |'
  prefs: []
  type: TYPE_TB
- en: CBPeripheral
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Each bluetooth device has characteristics and descriptors attached to them.The
    events have been listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `DiscoverCharacteristic` | It discovers the characteristics of a service
    for the peripheral. |'
  prefs: []
  type: TYPE_TB
- en: '| `DiscoveredDescriptor` | It discovers the descriptors of a characteristic.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `DiscoveredIncludedService` | It discovers the specified included services
    for the peripheral. |'
  prefs: []
  type: TYPE_TB
- en: '| `DiscoveredService` | It is called after discovery of the specified service
    for the peripheral has completed the connection. |'
  prefs: []
  type: TYPE_TB
- en: '| `InvalidatedService` | It is raised when the peripheral services change.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `RssiUpdated` | It is raised when the value for the peripheral''s current
    **RSSI** while connected to the `CoreBluetooth` central manager. |'
  prefs: []
  type: TYPE_TB
- en: '| `UpdatedCharacteristicValues` | It is raised after the value for a characteristic
    has been updated. |'
  prefs: []
  type: TYPE_TB
- en: '| `UpdatedName` | It is raised when the peripheral name is changed. |'
  prefs: []
  type: TYPE_TB
- en: '| `UpdatedNotificationState` | It is raised when the peripheral notification
    state is changed. |'
  prefs: []
  type: TYPE_TB
- en: '| `UpdatedValue` | It is raised when the peripheral characteristic descriptor
    value is changed. |'
  prefs: []
  type: TYPE_TB
- en: '| `WroteCharacteristicValue` | It is raised after the value for a characteristic
    has been written. |'
  prefs: []
  type: TYPE_TB
- en: '| `WroteDescriptorValue` | It is raised after the value for a descriptor has
    been written. |'
  prefs: []
  type: TYPE_TB
- en: CBPeripheralManager
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `CBPeripheralManager` class manages the peripherals attached to the bluetooth
    manager.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `AdvertisingStarted` | It is raised when the peripheral advertising its presence
    has started. |'
  prefs: []
  type: TYPE_TB
- en: '| `CharacteristicSubscribed` | It is raised when a remote device subscribes
    to a characteristic''s value. |'
  prefs: []
  type: TYPE_TB
- en: '| `CharacteristicUnsubscribed` | It is raised when a remote device unsubscribes
    to a characteristic''s value. |'
  prefs: []
  type: TYPE_TB
- en: '| `ReadRequestReceived` | It is raised after a read request has been received.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `ReadyToUpdateSubscribers` | It is invoked when a local peripheral is ready
    to send a characteristic''s updated value. |'
  prefs: []
  type: TYPE_TB
- en: '| `ServiceAdded` | It is raised after a service has been added. |'
  prefs: []
  type: TYPE_TB
- en: '| `StateUpdated` | It is raised after a peripheral state has been updated.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `WriteRequestsReceived` | It is raised after a write request has been received.
    |'
  prefs: []
  type: TYPE_TB
- en: CFSocket
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `CoreFoundation` socket covers the connection to a remote socket (typically
    online).
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `AcceptEvent` | It is invoked when `CoreFoundation` is set to accept events
    from a socket. |'
  prefs: []
  type: TYPE_TB
- en: '| `ConnectEvent` | It is raised when a client connects to a remote socket it
    called. |'
  prefs: []
  type: TYPE_TB
- en: CFStream
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Similar to an **IOStream**, the **CFStream** deals with data to and from a socket.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `CanAcceptBytesEvent` | It is raised when the stream has information available
    for writing. |'
  prefs: []
  type: TYPE_TB
- en: '| `ClosedEvent` | It is raised when a close operation on the stream completes.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `ErrorEvent` | It is raised when an error occurs on the stream. |'
  prefs: []
  type: TYPE_TB
- en: '| `HasBytesAvailableEvent` | It is raised when the stream has information available
    for reading. |'
  prefs: []
  type: TYPE_TB
- en: '| `OpenCompletedEvent` | It is raised when an open operation on the stream
    completes. |'
  prefs: []
  type: TYPE_TB
- en: CLLocationManager
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `CoreLocation` `LocationManager` class is the control class for the location
    manager on the iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `AuthorizationChanged` | It is called when the user allows or prevents the
    use of `CoreLocation` functions. |'
  prefs: []
  type: TYPE_TB
- en: '| `DeferredUpdatesFinished` | It is raised when the deferred updates time is
    over. |'
  prefs: []
  type: TYPE_TB
- en: '| `DidStartMonitoringForRegion` | It informs the delegate that a new region
    is being monitored. |'
  prefs: []
  type: TYPE_TB
- en: '| `Failed` | It is raised when `CLLocationManager` fails to start. |'
  prefs: []
  type: TYPE_TB
- en: '| `LocationUpdatesPaused` | It pauses updating the location. |'
  prefs: []
  type: TYPE_TB
- en: '| `LocationUpdatesResumed` | It restarts paused location updates. |'
  prefs: []
  type: TYPE_TB
- en: '| `LocationsUpdated` | It updates the GPS position. |'
  prefs: []
  type: TYPE_TB
- en: '| `MonitoringFailed` | It is raised when `CLLocationManager` fails to monitor
    (no communication with the satellite is a usual cause). |'
  prefs: []
  type: TYPE_TB
- en: '| `RegionEntered` | It is called when entering a region. |'
  prefs: []
  type: TYPE_TB
- en: '| `RegionLeft` | It is called when a region has been left. |'
  prefs: []
  type: TYPE_TB
- en: '| `UpdatedHeading` | It is called when a heading is updated. |'
  prefs: []
  type: TYPE_TB
- en: '| `UpdatedLocation` | It is called when the location has been updated. |'
  prefs: []
  type: TYPE_TB
- en: MidiClient
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Possibly not that useful on an iPhone (though it is on an iPad), iOS has a rich
    **MIDI** layer.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `IOError` | It is raised when the MIDI client suffers an input/output error.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `ObjectAdded` | It is called when a MIDI device is added. |'
  prefs: []
  type: TYPE_TB
- en: '| `ObjectRemoved` | It is called when a MIDI device is removed. |'
  prefs: []
  type: TYPE_TB
- en: '| `PropertyChanged` | It is invoked when a MIDI property for a device is changed.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `SerialPortOwnerChanged` | It is invoked when the serial port owner has changed
    (effectively called when a device is switched). |'
  prefs: []
  type: TYPE_TB
- en: '| `SetupChanged` | It is raised when the client setup has changed. |'
  prefs: []
  type: TYPE_TB
- en: '| `ThruConnectionsChanged` | It is raised when the MIDI daisy chain connection
    alters. |'
  prefs: []
  type: TYPE_TB
- en: MidiEndpoint and MidiPort
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Both of these classes have the same named event and it does exactly the same
    in both!
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `MessageReceived` | It is raised when the MIDI subsystem receives a message
    from the device. |'
  prefs: []
  type: TYPE_TB
- en: Monotouch.Dialog
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`MonoTouch.Dialog` is an extremely powerful class that takes much of the trouble
    out of creating and using `UITableViews` in your app.'
  prefs: []
  type: TYPE_NORMAL
- en: BadgeElement, BaseBooleanImageElement, GlassButton, LoadMoreElement, MessageElement,
    and StringElement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These classes all have the `Tapped` event in. It acts when the option is tapped.
    Be aware that it sends an `NSAction` event rather than a typical object sender
    / `EventArgs e` combo, which means that you cannot use the same handler for multiple
    instances of a class.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Tapped` | It is emitted when the Element has been tapped. |'
  prefs: []
  type: TYPE_TB
- en: BoolElement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a simple on/off element.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `ValueChanged` | It is emitted when the Boolean has changed. |'
  prefs: []
  type: TYPE_TB
- en: DateTimeElement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When invoked, a standard **DateTime Picker View** is produced.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `DateSelected` | It is called when the date has been selected. |'
  prefs: []
  type: TYPE_TB
- en: DialogViewController
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `DialogViewController` is the View Controller the `MT.D` is placed in.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `OnSelection` | It is invoked when an object within a DVC is selected. |'
  prefs: []
  type: TYPE_TB
- en: '| `RefreshRequested` | It is called when a refresh of the `MT.D` is called.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `SearchTextChanged` | It is called when the search Text Field text has changed.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `ViewAppearing` | It is raised when `MT.D` view is being created. |'
  prefs: []
  type: TYPE_TB
- en: '| `ViewDisappearing` | It is raised when `MT.D` view is being disposed. |'
  prefs: []
  type: TYPE_TB
- en: EntryElement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An entry element allows for data entry into a `UITextField` held within a `MT.D`
    cell.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Changed` | It is called when the `EntryElement` content has been changed.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `ShouldReturn` | It asks if the Text Field should process the **Return**
    button. |'
  prefs: []
  type: TYPE_TB
- en: StyledStringElement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `StyledStringElement` class is the same as a `StringElement` class, except
    that you can add styles to it.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `AccessoryTapped` | It is emitted when the element is tapped. |'
  prefs: []
  type: TYPE_TB
- en: EKCalendarChooser
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `CalendarChooser` class of **EventKit** allows the user access to a calendar.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Cancelled` | It is called when the user cancels choosing. |'
  prefs: []
  type: TYPE_TB
- en: '| `Finished` | It is called when the user selects **Done**. |'
  prefs: []
  type: TYPE_TB
- en: '| `SelectionChanged` | It is called when the date selected is changed. |'
  prefs: []
  type: TYPE_TB
- en: EKEventEditViewController and EKEventViewController
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Both of these EventKit View Controllers have the same named event that has the
    same effect for both.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Completed` | It is emitted when the control has finished its action. |'
  prefs: []
  type: TYPE_TB
- en: EAAccessory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The external accessory class deals with any accessory not part of the phone
    or bluetooth.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Disconnected` | It is issued when an external accessory has been disconnected.
    |'
  prefs: []
  type: TYPE_TB
- en: The NS classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**NS** stands for **NextStep**. They are a bunch of classes that formed a part
    of the lineage when Apple bought NeXT after Steve Jobs returned from the wilderness.
    While there are not that many events attached to them, they are vital. Many of
    the NS classes are required by the bindings between Xamarin.iOS and the Objective
    C underlayer.'
  prefs: []
  type: TYPE_NORMAL
- en: NSCache
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NSCache is an internal cache system used for many different jobs.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `WillEvictObject` | It is called when an object is about to be removed from
    the cache. |'
  prefs: []
  type: TYPE_TB
- en: NSKeyedArchiver
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `KeyedArchiver` class encodes data with a key.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `EncodedObject` | It is called when an object has been encoded. |'
  prefs: []
  type: TYPE_TB
- en: '| `Finished` | It is raised when the encoding has finished. |'
  prefs: []
  type: TYPE_TB
- en: '| `Finishing` | It is raised when the encoding is about to finish. |'
  prefs: []
  type: TYPE_TB
- en: '| `ReplacingObject` | It informs the delegate that a given object is going
    to be replaced by another object. |'
  prefs: []
  type: TYPE_TB
- en: NSKeyedUnarchiver
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `KeyedUnarchiver` class performs the reverse of the `KeyedArchiver` class.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Finished` | It is raised when the decoding has finished. |'
  prefs: []
  type: TYPE_TB
- en: '| `Finishing` | It is raised when the decoding is about to finish. |'
  prefs: []
  type: TYPE_TB
- en: '| `ReplacingObject` | It informs the delegate that a given object is going
    to be replaced by another object. |'
  prefs: []
  type: TYPE_TB
- en: NSNetService
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the class used for network services.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `AddressResolved` | It is emitted when the address has been resolved. |'
  prefs: []
  type: TYPE_TB
- en: '| `PublishFeature` | It informs that a service feature was published successfully.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Published` | It informs that a service was published successfully. |'
  prefs: []
  type: TYPE_TB
- en: '| `ResolveFailed` | It is emitted when the address can''t be resolved. |'
  prefs: []
  type: TYPE_TB
- en: '| `Stopped` | It informs that a request to publish or resolve was stopped.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `UpdatedTxtRecordData` | It notifies that a `TXT` record for a service has
    been updated. |'
  prefs: []
  type: TYPE_TB
- en: '| `WillPublish` | It informs that the network is ready to publish a service.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `WillResolve` | It informs that the network is ready to resolve a service
    |'
  prefs: []
  type: TYPE_TB
- en: NSNetServiceBrowser
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `NetServiceBrowser` class is used for connection to the outside world.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `DomainRemoved` | It informs when a domain has disappeared or is no longer
    available. |'
  prefs: []
  type: TYPE_TB
- en: '| `FoundDomain` | It is raised when the sender has found a domain. |'
  prefs: []
  type: TYPE_TB
- en: '| `FoundService` | It is raised when the sender has found a service. |'
  prefs: []
  type: TYPE_TB
- en: '| `NotSearched` | It is raised when the search was not successful. |'
  prefs: []
  type: TYPE_TB
- en: '| `SearchStarted` | It is raised when a search has begun. |'
  prefs: []
  type: TYPE_TB
- en: '| `SearchStopped` | It is raised when a search has been stopped. |'
  prefs: []
  type: TYPE_TB
- en: '| `SearchRemoved` | It is raised when a search has been removed from the browser.
    |'
  prefs: []
  type: TYPE_TB
- en: NSStream
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is similar to a standard .NET Stream.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `OnEvent` | It is called when a given event occurs on a given stream. |'
  prefs: []
  type: TYPE_TB
- en: GLKView
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **GL KitView** is a view used for **OpenGL** graphics.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `DrawInRect` | It draws the view''s content within a given rectangle. |'
  prefs: []
  type: TYPE_TB
- en: GK classes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Games are an important part of any user experience. It's fine if you just want
    a phone to be a phone, but if you have the capabilities to play Angry Hedgehogs
    or a football manager game, then why not use them?
  prefs: []
  type: TYPE_NORMAL
- en: GKAchievementViewController, GKFriendRequestComposeViewController, and GKLeaderboardViewController
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These three classes have the same named event.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `DidFinish` | It is called when the view has been dismissed. |'
  prefs: []
  type: TYPE_TB
- en: GKGameCenterViewController
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This View Controller is the main game view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Finished` | It is called when the player has stopped interacting with the
    view controller. |'
  prefs: []
  type: TYPE_TB
- en: GKMatch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `GKMatch` class deals with connections from players.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `DataReceived` | It is raised when data is received from the player. |'
  prefs: []
  type: TYPE_TB
- en: '| `Failed` | It is called when the match cannot connect to other players. |'
  prefs: []
  type: TYPE_TB
- en: '| `StateChanged` | It is raised when the player connects or disconnects from
    a match. |'
  prefs: []
  type: TYPE_TB
- en: GKMatchmakerViewController
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `MatchMaker` View Controller deals with matches between devices.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `DidFailWithError` | It is raised when the View Controller suffers an unrecoverable
    error. |'
  prefs: []
  type: TYPE_TB
- en: '| `DidFindMatch` | It is raised when a peer-to-peer match is found. |'
  prefs: []
  type: TYPE_TB
- en: '| `DidFindPlayers` | It is called when a hosted match is found. |'
  prefs: []
  type: TYPE_TB
- en: '| `ReceivedAcceptFromHostedPlayer` | It is raised when a player accepts an
    invite to a hosted match. |'
  prefs: []
  type: TYPE_TB
- en: '| `WasCancelled` | It is raised when the user cancels the matchmaking request.
    |'
  prefs: []
  type: TYPE_TB
- en: GKSession
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `GKSession` class can be both local or external to the device.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `ConnectionFailed` | It is raised when an attempt to connect to another peer
    fails. |'
  prefs: []
  type: TYPE_TB
- en: '| `ConnectionRequest` | It is raised when attempting to connect to another
    peer. |'
  prefs: []
  type: TYPE_TB
- en: '| `Failed` | It is sent when a serious error occurred in the session. |'
  prefs: []
  type: TYPE_TB
- en: '| `PeerChanged` | It is received when a peer changes state. |'
  prefs: []
  type: TYPE_TB
- en: '| `ReceiveData` | It is raised when data is received from the peer. |'
  prefs: []
  type: TYPE_TB
- en: MKMapView
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `MapView` class of **MapKit** deals with the creation and display of maps
    and the addition of pointers onto the view (such as the user or places of interest).
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `CalloutAccessoryControlTapped` | It is raised when the user taps one of
    the annotation view accessories such as buttons. |'
  prefs: []
  type: TYPE_TB
- en: '| `ChangedDragState` | It is raised when the state of one of the annotation
    views has changed. |'
  prefs: []
  type: TYPE_TB
- en: '| `DidAddAnnotationViews` | It is called when one or more annotation views
    are added to a map. |'
  prefs: []
  type: TYPE_TB
- en: '| `DidAddOverlayViews` | It is called when one or more overlay views are added
    to a map. |'
  prefs: []
  type: TYPE_TB
- en: '| `DidChangeUserTrackingModel` | It is raised when the user tracking mode changes.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `DidDeselectAnnotationView` | It is called when an annotation view has been
    deselected. |'
  prefs: []
  type: TYPE_TB
- en: '| `DidFailToLocateUser` | It is raised when an attempt to find a user''s position
    fails. |'
  prefs: []
  type: TYPE_TB
- en: '| `DidSelectAnnotationView` | It is called when one of the annotations has
    been selected. |'
  prefs: []
  type: TYPE_TB
- en: '| `DidStopLocatingUser` | It is called when the locate user service has been
    stopped. |'
  prefs: []
  type: TYPE_TB
- en: '| `DidUpdateUserLocation` | It is raised when the location of the user has
    been updated. |'
  prefs: []
  type: TYPE_TB
- en: '| `LoadingMapFailed` | It is called when the map loading fails (typically caused
    by no GPS connection). |'
  prefs: []
  type: TYPE_TB
- en: '| `MapLoaded` | It is raised when the map has loaded. |'
  prefs: []
  type: TYPE_TB
- en: '| `RegionChanged` | It is raised when the region has changed. |'
  prefs: []
  type: TYPE_TB
- en: '| `RegionWillChange` | It is raised when the region is changing. |'
  prefs: []
  type: TYPE_TB
- en: '| `WillStartLoadingMap` | It is raised when the map is about to start loading.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `WillStartLocatingUser` | It is raised when the user is about to be located.
    |'
  prefs: []
  type: TYPE_TB
- en: MPMediaPickerController
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These events are attached to the `MediaPickerController` View Controller.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `DidCancel` | It is called when the user clicks on the **Cancel** button.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `ItemsPicked` | It is called when the user has selected a number of media
    items. |'
  prefs: []
  type: TYPE_TB
- en: MFMailComposeViewController and MFMessageComposeViewController
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `MFMailComposeViewController` and `MFMessageComposeViewController` both
    have this event. It is used for composing either an e-mail or a message.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Finished` | It is emitted when the composition has finished. |'
  prefs: []
  type: TYPE_TB
- en: PKAddPassesViewController
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **passkit** view controller is used for the storage of passwords.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Finished` | It is raised after the add-passes view controller has completed.
    |'
  prefs: []
  type: TYPE_TB
- en: QLPreviewController
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **QuickLook preview** controller allows for a quick look at a file.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `DidDismiss` | It is called after the preview controller is closed. |'
  prefs: []
  type: TYPE_TB
- en: '| `WillDismiss` | It is called prior to the preview controller being closed.
    |'
  prefs: []
  type: TYPE_TB
- en: SK classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **StoreKit** classes deal with the app store and online purchases from the
    app store.
  prefs: []
  type: TYPE_NORMAL
- en: SKProductsRequest
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This class deals with requesting a product from the app store.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `ReceivedResponse` | It is called when the App Store responds to the product
    request. |'
  prefs: []
  type: TYPE_TB
- en: '| `RequestFailed` | It is raised when the request to the App Store fails. |'
  prefs: []
  type: TYPE_TB
- en: '| `RequestFinished` | It is raised when the product request is closed. |'
  prefs: []
  type: TYPE_TB
- en: SKRequest
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This class is used for dealing with requests to the store.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `RequestFailed` | It is raised when the request to the App Store fails. |'
  prefs: []
  type: TYPE_TB
- en: '| `RequestFinished` | It is raised when the product request is closed. |'
  prefs: []
  type: TYPE_TB
- en: SKStoreProductViewController
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `StoreProductViewController` is the main View Controller used for the app
    store content.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Finished` | It is raised when the product request is closed. |'
  prefs: []
  type: TYPE_TB
- en: UIClasses
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These classes deal exclusively with user interface events, and without them
    very little can be done.
  prefs: []
  type: TYPE_NORMAL
- en: UIAccelerometer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The accelerometer detects the movement of the device.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Acceleration` | It is raised when a movement is detected. |'
  prefs: []
  type: TYPE_TB
- en: UIActionSheet and UIAlertView
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Both of these classes share these named events with the same effect in both.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Cancelled` | It is raised when the **Cancel** button is clicked on. |'
  prefs: []
  type: TYPE_TB
- en: '| `Clicked` | It is raised when a control is selected. |'
  prefs: []
  type: TYPE_TB
- en: '| `Dismissed` | It is raised when `ActionSheet` or `AlertView` is closed. |'
  prefs: []
  type: TYPE_TB
- en: '| `Presented` | It is raised when `ActionSheet` or `AlertView` is shown. |'
  prefs: []
  type: TYPE_TB
- en: '| `WillDismiss` | It is raised when `ActionSheet` or `AlertView` is about to
    be closed. |'
  prefs: []
  type: TYPE_TB
- en: '| `WillPresent` | It is raised when `ActionSheet` or `AlertView` is about to
    be shown. |'
  prefs: []
  type: TYPE_TB
- en: UIButtonBarItem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Button Bar Item** has to be connected to a `ButtonBar` to work.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Clicked` | It is called when the item is clicked. |'
  prefs: []
  type: TYPE_TB
- en: UIImagePickerController
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This class is used for picking images from the camera roll.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Cancelled` | It is raised when the picker has been cancelled. |'
  prefs: []
  type: TYPE_TB
- en: '| `DidShowViewController` | It is raised when the View Controller has been
    shown. |'
  prefs: []
  type: TYPE_TB
- en: '| `FinishedPickingImage` | It is raised when the user has finished picking
    image(s). |'
  prefs: []
  type: TYPE_TB
- en: '| `FinishedPickingMedia` | It is raised when the user has finished picking
    media. |'
  prefs: []
  type: TYPE_TB
- en: '| `WillShowViewController` | It is raised prior to the View Controller being
    displayed. |'
  prefs: []
  type: TYPE_TB
- en: UIPageViewController
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This class is used as a form of the "virtual" page counter.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `DidFinishAnimating` | It is raised after the page scroll transition has
    completed. |'
  prefs: []
  type: TYPE_TB
- en: '| `WillTransition` | It is raised before the page scroll transition has started.
    |'
  prefs: []
  type: TYPE_TB
- en: UIPopoverController
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This class is only available on the iPad.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `DidDismiss` | It is raised when the controller has been dismissed. |'
  prefs: []
  type: TYPE_TB
- en: UIPrintInteractionController
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Used for printing from the device.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `DidDismiss` | It is raised when the controller has been dismissed. |'
  prefs: []
  type: TYPE_TB
- en: '| `DidFinishJob` | It is raised when the printer has finished a job. |'
  prefs: []
  type: TYPE_TB
- en: '| `DidPresentPrinterOptions` | It is raised when the printer options have been
    displayed. |'
  prefs: []
  type: TYPE_TB
- en: '| `WillDismissPrinterOptions` | It is raised when the printer options have
    been closed. |'
  prefs: []
  type: TYPE_TB
- en: '| `WillPresentPrinterOptions` | It is raised when the printer options are about
    to be displayed. |'
  prefs: []
  type: TYPE_TB
- en: '| `WillStartJob` | It is raised when the print job is about to start. |'
  prefs: []
  type: TYPE_TB
- en: UIScrollView
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The scroll view allows more content on a page that would not fit on the page
    without it.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `DecelerationEnded` | It is called when the scroll deceleration has stopped.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `DecelerationStarted` | It is called when the scroll deceleration has started.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `DidZoom` | It is called once the zoom has occurred. |'
  prefs: []
  type: TYPE_TB
- en: '| `DraggingEnded` | It is called when a drag has stopped (finger removed from
    phone). |'
  prefs: []
  type: TYPE_TB
- en: '| `DraggingStarted` | It is called when a drag has started (finger dragging
    on phone). |'
  prefs: []
  type: TYPE_TB
- en: '| `ScrollAnimationEnded` | It is called after a scroll has completed. |'
  prefs: []
  type: TYPE_TB
- en: '| `Scrolled` | It is called when a scroll has completed. |'
  prefs: []
  type: TYPE_TB
- en: '| `ScrolledToTop` | It is raised when a scroll to the top of a view has been
    completed. |'
  prefs: []
  type: TYPE_TB
- en: '| `WillEndDragging` | It is raised when the user is about to end a drag. |'
  prefs: []
  type: TYPE_TB
- en: '| `ZoomingEnded` | It is raised when the zoom has completed. |'
  prefs: []
  type: TYPE_TB
- en: '| `ZoomingStarted` | It is raised when the zoom has started. |'
  prefs: []
  type: TYPE_TB
- en: UISearchBar
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a search method for finding information either within an app or on the
    device.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `BookmarkButtonClicked` | It is called when the Bookmark button is clicked
    on. |'
  prefs: []
  type: TYPE_TB
- en: '| `CancelButtonClicked` | It is called when the **Cancel** button is clicked
    on. |'
  prefs: []
  type: TYPE_TB
- en: '| `ListButtonClicked` | It is called when the **List** button is clicked on.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `OnEditingStarted` | It is called when the `UITextField` view bounds are
    entered. |'
  prefs: []
  type: TYPE_TB
- en: '| `OnEditingStopped` | It is called when the `UITextField` view bounds are
    left. |'
  prefs: []
  type: TYPE_TB
- en: '| `SearchButtonClicked` | It is called when the **Search** button is clicked
    on. |'
  prefs: []
  type: TYPE_TB
- en: '| `SelectedScopeButtonIndexChanged` | It is called when the scope button selection
    has changed. |'
  prefs: []
  type: TYPE_TB
- en: '| `TextChanged` | It is called when the `UITextField` text has been changed.
    |'
  prefs: []
  type: TYPE_TB
- en: UISplitViewController
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The split view allows for a view to be split into parts (for example, a menu
    on the left appears when a menu button is pressed on a button bar).
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `WillHideViewController` | It is raised prior to the View Controller being
    hidden. |'
  prefs: []
  type: TYPE_TB
- en: '| `WillPresentViewController` | It is raised prior to the View Controller being
    presented. |'
  prefs: []
  type: TYPE_TB
- en: '| `WillShowViewController` | It is raised prior to the View Controller being
    shown. |'
  prefs: []
  type: TYPE_TB
- en: UITabBar
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A simple method of navigation using tabs can be used in association with the
    `TabBarController` controller.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `DidBeginCustomizingItems` | It is raised after the customizing modal view
    is displayed. |'
  prefs: []
  type: TYPE_TB
- en: '| `DidEndCustomizingItems` | It is raised after the customizing modal view
    is dismissed. |'
  prefs: []
  type: TYPE_TB
- en: '| `ItemSelected` | It is called when a tab bar item is selected. |'
  prefs: []
  type: TYPE_TB
- en: '| `WillBeginCustomizingItems` | It is raised before the customizing modal view
    is dismissed. |'
  prefs: []
  type: TYPE_TB
- en: '| `WillEndCustomizingItems` | It is raised before the customizing modal view
    is dismissed. |'
  prefs: []
  type: TYPE_TB
- en: UITabBarController
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a convenient method of controlling the NIBs called when a tab bar item
    is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `FinishedCustomizingViewController` | It is raised when the tab bar customization
    sheet is dismissed. |'
  prefs: []
  type: TYPE_TB
- en: '| `OnCustomizingViewController` | It is raised when the customization has begun.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `OnEndCustomizingViewController` | It is raised when customization has ended.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `ViewControllerSelected` | It is called when the user selects an item on
    the tab bar. |'
  prefs: []
  type: TYPE_TB
- en: UITextField
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `UITextField` class is a simple, editable textbox.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Ended` | It is raised when editing of the **TextField** has ended. |'
  prefs: []
  type: TYPE_TB
- en: '| `Started` | It is raised as soon as the content of the **TextField** is edited.
    |'
  prefs: []
  type: TYPE_TB
- en: UITextView
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `UITextView` class displays text. It also inherits from the `ScrollView`
    view to enable more text than within the frame.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Changed` | It is raised when the text has changed. |'
  prefs: []
  type: TYPE_TB
- en: '| `DecelerationEnded` | It is called when the scroll deceleration has stopped.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `DecelerationStarted` | It is called when the scroll deceleration has started.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `DidZoom` | It is called once the zoom has occurred. |'
  prefs: []
  type: TYPE_TB
- en: '| `DraggingEnded` | It is called when a drag has stopped (finger removed from
    phone). |'
  prefs: []
  type: TYPE_TB
- en: '| `DraggingStarted` | It is called when a drag has started (finger dragging
    on phone). |'
  prefs: []
  type: TYPE_TB
- en: '| `Ended` | It is called after a scroll has been completed. |'
  prefs: []
  type: TYPE_TB
- en: '| `ScrollAnimationEnded` | It is called when a scroll has been completed. |'
  prefs: []
  type: TYPE_TB
- en: '| `Scrolled` | It is raised when the text view is scrolled. |'
  prefs: []
  type: TYPE_TB
- en: '| `ScrolledToTop` | It is raised when a scroll to the top of a view has been
    completed. |'
  prefs: []
  type: TYPE_TB
- en: '| `SelectionChanged` | It is raised when the selection of text within the text
    view has changed. |'
  prefs: []
  type: TYPE_TB
- en: '| `Started` | It is raised when a scroll has started. |'
  prefs: []
  type: TYPE_TB
- en: '| `WillEndDragging` | It is raised when a user is about to end a drag. |'
  prefs: []
  type: TYPE_TB
- en: '| `ZoomingEnded` | It is raised when a zoom has completed. |'
  prefs: []
  type: TYPE_TB
- en: '| `ZoomingStarted` | It is raised when a zoom has started. |'
  prefs: []
  type: TYPE_TB
- en: UIView
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `UIView` is a generic view that can be added to any View Controller.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `AnimationWillEnd` | It is raised when an animation is about to end. |'
  prefs: []
  type: TYPE_TB
- en: '| `AnimationWillStart` | It is raised when an animation is about to start.
    |'
  prefs: []
  type: TYPE_TB
- en: UIWebView
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A view for displaying HTML (either from a website or generated within an app).
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `LoadError` | It is raised when URL loading has failed. |'
  prefs: []
  type: TYPE_TB
- en: '| `LoadFinished` | It is raised when URL has finished loading. |'
  prefs: []
  type: TYPE_TB
- en: '| `LoadStarted` | It is raised when URL loading has begun. |'
  prefs: []
  type: TYPE_TB
- en: Ad classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Typically, advertisements within applications are a convenient method of generating
    income for the developer (it's known as a click-through).
  prefs: []
  type: TYPE_NORMAL
- en: AdBannerView
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `AdBannerView` View is the view containing ads.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `ActionFinished` | It is raised when the banner view finishes its execution
    of an action that covered the UI. |'
  prefs: []
  type: TYPE_TB
- en: '| `AdLoaded` | It is raised when an ad is loaded. |'
  prefs: []
  type: TYPE_TB
- en: '| `FailedToReceiveAd` | It is raised when an ad retrieval has failed (typically
    a network connection error). |'
  prefs: []
  type: TYPE_TB
- en: '| `WillLoad` | It is raised when an ad is about to load. |'
  prefs: []
  type: TYPE_TB
- en: AdInterstitialAd
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These are full-screen advertisements. They act in the same way as `AdBannerView`.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `ActionFinished` | It is raised when the banner view finishes its execution
    of an action that covered the UI. |'
  prefs: []
  type: TYPE_TB
- en: '| `AdLoaded` | It is raised when an ad is loaded. |'
  prefs: []
  type: TYPE_TB
- en: '| `AdUnloaded` | It is called after a full-screen ad disposes its content.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `FailedToReceiveAd` | It is raised when the ad retrieval has failed (typically
    a network connection error). |'
  prefs: []
  type: TYPE_TB
- en: '| `WillLoad` | It is raised when the ad is about to load. |'
  prefs: []
  type: TYPE_TB
- en: OpenTK
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**OpenTK** is an open graphics layer used commonly among mobile and desktop
    application developers.'
  prefs: []
  type: TYPE_NORMAL
- en: IGameWindow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is an interface class rather than a class and deals with the game window
    itself rather than the game.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Load` | It is raised before a window is displayed for the first time. |'
  prefs: []
  type: TYPE_TB
- en: '| `RenderedFrame` | It is raised when the time to render has arrived. |'
  prefs: []
  type: TYPE_TB
- en: '| `Unload` | It is raised when a window is destroyed. |'
  prefs: []
  type: TYPE_TB
- en: '| `UpdateFrame` | It is called when it''s time to update a frame. |'
  prefs: []
  type: TYPE_TB
- en: IPhoneOSGameView
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the `GameView` held by the **OpenTK** classes.
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of event | What it does and when |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Closed` | It is called when the game view has been closed but not disposed
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Disposed` | It is called when the game view has been disposed |'
  prefs: []
  type: TYPE_TB
- en: '| `Load` | It is raised before the run loop starts. |'
  prefs: []
  type: TYPE_TB
- en: '| `RenderedFrame` | It is raised as part of the run-loop processing for when
    a frame should be rendered. |'
  prefs: []
  type: TYPE_TB
- en: '| `Resize` | It is called when a view is resized. |'
  prefs: []
  type: TYPE_TB
- en: '| `TitleChanged` | It is called when a view title is changed. |'
  prefs: []
  type: TYPE_TB
- en: '| `Unload` | It is raised when a run-loop is terminated. |'
  prefs: []
  type: TYPE_TB
- en: '| `UpdateFrame` | This is raised when a frame is updated as part of the runloop.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `VisibleChanged` | It is called when the visibility of a view is changed.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `WindowStateChanged` | It is raised when a window state changes. |'
  prefs: []
  type: TYPE_TB
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is safe to say that events are what make your iPhone the device it is. It
    is very unlikely that you'll ever need most of these listed here, but if you're
    like me and hate having to search, this chapter should really help you in the
    future.
  prefs: []
  type: TYPE_NORMAL
