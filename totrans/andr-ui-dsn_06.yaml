- en: Chapter 6.  Turning Your Sketches into Wireframes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we concentrated on planning our screens at a very high
    level by creating things such as screen maps and flowcharts. In this chapter,
    we'll move on from high-level planning to start designing the screens that'll
    make up our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'During the screen designing process, you''ll usually complete the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**First draft wireframing**: This is where you begin to layout your screens
    by making quick sketches with paper and pencils. A wireframe is a low-fidelity,
    visual representation of your app''s layout; sometimes, it is referred to as a
    skeleton, outline, page schematic, or screen blueprint. To help you focus on each
    screen''s layout, functionality, and usability, wireframes are usually stripped
    of all look and feel elements, and at least initially, most content and text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Digital wireframe**: Once you''re happy with your pencil-and-paper wireframes,
    it''s time to refine these first drafts using digital software. This step is also
    where you check whether your emerging designs are suitable for the kind of content
    you want to display, by starting to add the content and text that each screen
    will eventually display.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Prototyping**: The next step is creating a prototype based on your digital
    wireframe using paper and pencil.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Usability testing**: This is where you test your paper prototypes on an actual
    user. This type of testing is crucial for highlighting any issues with your navigation
    and helping you get an idea of how easy your user interface is for users to understand.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In design, low-fidelity refers to a rough representation of concepts, design
    alternatives, and screen layouts. By creating low-fidelity prototypes and wireframes,
    you can test various ideas without having to invest too much time and effort in
    the design process. The high-fidelity design is where you fill in all the details
    missing from a design's low-fidelity predecessors. In this chapter, we'll create
    low-fidelity wireframes using paper and pencils, and then develop these initial
    ideas into more detailed, high-fidelity digital wireframes.
  prefs: []
  type: TYPE_NORMAL
- en: What is wireframing?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Think of a wireframe as a skeleton of a screen's layout that describes how major
    UI components should be arranged in the screen's hierarchy. The purpose of wireframing
    is to focus on things such as functionality, usability, behavior, and the positioning
    and priority of your content. Wireframing *isn't* about graphic design. In fact,
    at this stage, it's better to leave out all design-related elements. You may even
    want to make your wireframes look very rough and sketch-like on purpose to help
    you focus on what each screen *does* and not what it looks like.
  prefs: []
  type: TYPE_NORMAL
- en: Your wireframes typically won't include color, unless you're using color to
    distinguish certain elements of your UI; for example, you might want to grab a
    colored pencil and draw a box around related content groups, or to add elements
    that don't have a physical onscreen presence such as interaction and movement.
  prefs: []
  type: TYPE_NORMAL
- en: You can create wireframes using pencil and paper, by scribbling on a whiteboard
    or using a wide range of free and commercial software applications. However, for
    the first drafts, it makes sense to wireframe via quick sketches using a pencil
    and paper.
  prefs: []
  type: TYPE_NORMAL
- en: What are the benefits of wireframing?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Wireframing may sound straightforward, but these deceptively simple sketches
    are an important step in designing more effective application screens. Here are
    a few of the reasons why it''s well worth breaking out your pencil case, grabbing
    a notebook, and wireframing your app:'
  prefs: []
  type: TYPE_NORMAL
- en: Wireframing is ideal for rapidly testing different layouts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating sketches is quick and easy, which means wireframing is the perfect
    opportunity to explore lots of different potential layouts.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Wireframes encourage you to get creative and experiment with different positioning
    and sizing of UI elements as well as different navigation. They're also an easy
    ways of mapping out the relationship between your UI elements.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: By wireframing lots of different possibilities, you can discover the optimal
    layout for each screen that makes up your app.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: While *technically* there's nothing stopping you from getting experimental at
    every stage of the design process, the more time and effort you invest in your
    project, the less inclined you'll be to experiment with new ideas and alternate
    layouts.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: One thing you should be aware of while wireframing lots of different layouts
    is that wireframes are static representations of your screens. Wireframes *aren't*
    very good at displaying interactive details or moving elements. You'll need to
    use your imagination to get a better idea of how any interactive or moving elements
    work in your layouts, or spend some extra time prototyping and testing your layouts,
    which is something we'll cover later on in this chapter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: They help you identify problems early in the design process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As with everything in life, sometimes things work better in theory than they
    do in practice, so what seemed like a good idea on a screen map or in your head
    may break down as soon as you try and implement it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Whether your app goes through multiple extensive design changes or simply a
    few tweaks, design changes are an inevitable part of creating a mobile app, so
    isn't it better to discover potential problems as early as possible? Wireframing
    is one of the quickest and easiest ways of uncovering issues with your designs,
    and revising a wireframe is approximately 1 billion times easier than revising
    a high-fidelity mockup or, even worse, a user interface that's already under development.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Discovering issues at the wireframing stage also means you're more likely to
    make whatever changes are necessary to properly resolve the issue, even if it
    means drastically changing your design. When you uncover issues further down the
    line, you're naturally going to be tempted to look for workarounds and quick fixes
    that'll patch the issue without causing too much disruption to your design. This
    approach may make your life easier in the short term, but it probably isn't going
    to make for very happy end users in the long run.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: They encourage you to capture a complete design rather than winging it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you feel like you have a crystal-clear picture in your mind's eye of how
    your app should look? Maybe you've had this vision before you even started the
    planning process.. If this is the case, then great, but you still need to capture
    this vision on paper!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Mental pictures have a tendency to be a bit fuzzy around the edges, and sometimes,
    you don't even quite realize how fuzzy they are until you try to capture them
    on paper. Once you start trying to recreate what you see in your mind's eye, you
    may realize that there are still a few question marks hanging over certain parts
    of your design.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: And as you move through the design process, it's far easier to redraft and refine
    something that's physically there in front of you, rather than an image that's
    floating around in the ether.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: They give everyone a common design language.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At their core, wireframes are basically just labeled and annotated sketches,
    so they're something that everyone can understand. This is good news if your app
    is a team effort, as wireframes help to bridge the gap between *developing* an
    app and *designing* an app *without* resorting to any developer or designer lingo.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you're developing an app for a client, wireframes are also a great way of
    making sure your client has a clear picture of how their project is progressing.
    You can then get the client's input and, hopefully, their sign-off on your design
    before you move onto the next stage of your project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: People are naturally more reluctant to pick fault with a design that someone's
    clearly spent hours, perhaps even days, perfecting. Although it's nice to want
    to spare a team member's feelings, this isn't going to help you create the best
    possible app in the long run.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Make sure your wireframe *looks* like a quick sketch, and even the politest
    member of your team should feel comfortable pointing out its flaws.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: They encourage you to start thinking about navigation in more detail.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's impossible to overestimate the negative impact of poorly-designed navigation.
    If a user can't navigate through your app with ease, they're going to navigate
    straight *out* of your app.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We touched on navigation in the previous chapter, but up until now, navigation
    has been nothing more than a set of up, down, and side-to-side arrows on a screen
    map. Wireframing is the perfect opportunity to start thinking about *how* you're
    going to implement your app's navigation. How exactly are your users going to
    move from the home screen to the Settings screen? Via tabs, action bars? How about
    their device's **Back** button? Wireframing is an essential step in designing
    effective navigation. In fact, whenever you create a wireframe, the first thing
    you'll need to do is decide what navigational elements should appear on the screen,
    as you'll see later on in this chapter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Creating a Wireframe
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating a wireframe may seem fairly straightforward. Anyone can slap a bunch
    of sketches together, right? While wireframing is supposed to be quick and easy,
    if you're going to get the maximum value out of your wireframing sessions, then
    you'll want to put as much thought as possible into your wireframes.
  prefs: []
  type: TYPE_NORMAL
- en: For the early drafts, the most effective method of wireframing is to simply
    sketch out your screens using paper and pencils. Ideally, you should produce several
    versions of each screen, and paper sketches are the quickest way to test out a
    few ideas. Once you've finished sketching, simply place your sketches side by
    side and decide which is the most effective design, or you may even decide to
    combine elements from multiple sketches to create the perfect layout.
  prefs: []
  type: TYPE_NORMAL
- en: Even if you prefer the thought of digital wireframing and are itching to sit
    down in front of your computer and boot up your favorite image-editing program,
    you should still take the time to create rough sketches first, as this is the
    perfect way to get your ideas flowing, and quickly test out multiple designs before
    moving onto the more time-consuming process of digital wireframing.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first wireframe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: During your wireframing sessions, it's helpful to have your screen map handy,
    so you can keep referring to it. When approaching a new project, it usually makes
    sense to start with the first screen the user will see when they launch your app.
    In our recipe app, this just so happens to be the home screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Draw a rough outline of your screen, and then work out what navigational elements
    you need to include. For our recipe home screen, these are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The screens the user can reach the home screen *from*. Essentially, you need
    to consider how the user will navigate back to the previous screen. A lot of the
    time, this is handled automatically by the device's **Back** button, but you can
    also provide backward navigation via the left-point caver that appears in the
    action bar or a UI element, such as a **Return to previous screen** button. To
    keep things simple, let's assume that the backward navigation is handled automatically
    by the device's **Back** softkey.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The screens the user can navigate *to*. In our recipe example, this is the
    list of saved recipes, the list of categories, and the search screen. To present
    all these options in a compact way, I''m going to add them to a menu that''ll
    appear along the left-hand side of the screen:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Creating your first wireframe](img/B05061_6_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next, decide what content you need to display. Start by adding the most important
    content such as images, headings, subheadings, and other large blocks of content,
    and then work your way down the content hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: 'For my home screen, I want to display the app''s title and logo, plus a few
    tantalizing images of the meals that users can cook by following the recipes included
    in this app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating your first wireframe](img/B05061_6_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Feeling uninspired?**'
  prefs: []
  type: TYPE_NORMAL
- en: If you're struggling for inspiration, then taking a critical look at other apps
    is a great way to kickstart the creative process. The best places to draw inspiration
    from are high-rated apps on the Google Play store or Google's own suite of apps.
    The latter are particularly useful as they're usually good examples of the latest
    best practices and design principles, particularly Material Design.
  prefs: []
  type: TYPE_NORMAL
- en: Spend some time flicking through the different screens and ask yourself what
    you like about each screen's layout and whether there are any improvements you
    could make. It may help to create wireframes of any screen you particularly like,
    and then look for any similarities, elements, or just general design principles
    that you can use in your own wireframes.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring more wireframes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every time you create a wireframe, the process will differ slightly depending
    on factors such as the kind of app you're creating, the content you want to display,
    the screen's purpose, and your target audience. However, it is possible to identify
    certain *types* of screens that occur across multiple apps as these often share
    similar characteristics and UI elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Case in point: our home screen wireframe. Many apps have some form of home
    screen, and these screens often feature things such as headings, logos, and main
    menus–exactly like our recipe app home screen. In addition to the home screen,
    this app is a great example of a few other common *types* of screens. Since you''re
    likely to encounter these screens in your own projects at some point, let''s look
    at how you can approach creating wireframes for each of these screens.'
  prefs: []
  type: TYPE_NORMAL
- en: I'll start with what I'm going to call a *details* screen. This is a screen
    that appears when the user selects an item on a previous screen, and the app displays
    a new screen containing more information about the selected item. In our recipe
    app, the screen containing each recipe is a details screen; users scroll through
    a list of recipes, spots one they like the look of, and then tap the recipe. At
    this point, they're taken to a separate screen containing all the information
    they need to recreate this meal.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In our screen map, we have referred to this screen as the *detailed recipe view*.
  prefs: []
  type: TYPE_NORMAL
- en: Wireframing a details screen
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As the name suggests, details screens are all about displaying information,
    which is typically a mix of text and media, such as images, videos, or audio.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s follow the same process we used for wireframing our home screen and
    start by identifying all the navigational elements we need to add. Taking a look
    at the screen map, I can see that I need to add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The screens the user can reach the detailed recipe screen *from*. Since we glossed
    over backward navigation in our home screen wireframe, let's explore it in more
    detail here. According to the screen map, the user can reach the detailed recipe
    screen from the search results screen, the list of recipes for a given category,
    and the list of saved recipes. Although we could potentially rely on the user
    tapping their device's **Back** softkey to return to the previous screen, wireframing
    is all about exploring different options, so I'm going to try something different
    and add a **Back to previous screen** button to this particular wireframe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The screens the user can navigate *to*. In our simple screen map, the detailed
    recipe screen looks like it's the final screen in the app, but in reality, you
    rarely encounter this kind of *dead end* in a mobile application. When users add
    this recipe to their list of saved recipes, I think it'd be helpful if the app
    takes users to their online scrapbook, so they can view all their saved recipes.
    To create this effect, I'm going to add an **Add to scrapbook** button that, when
    pressed, performs this action *and* takes the user to their online scrapbook.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, it''s time for content. In no particular order, I want this screen to
    display the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The recipe's title
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How difficult the recipe is to make
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An estimate of how long it takes to cook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An estimate of how much the ingredients cost
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How many people the recipe feeds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An enticing, mouth-watering photo of the finished result
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The recipe itself
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Do you really need a details screen?**'
  prefs: []
  type: TYPE_NORMAL
- en: The golden rule of creating a details screen is that it *must* contain enough
    information to warrant its status as a separate screen. For example, imagine you've
    just downloaded an app where you can check what films are being shown at your
    local cinema.
  prefs: []
  type: TYPE_NORMAL
- en: The first screen is a timetable that displays all the films alongside their
    showing times. You can tap every film in the timetable and the app will load a
    new screen that's dedicated to the selected film. What new information might you
    expect to find on this screen? Maybe a synopsis or a list of the lead actresses
    and actors? How about a star rating or links to reviews, so you can decide whether
    this is a film that you *need* to see on the big screen with popcorn, or whether
    you should just wait for it to come out on Netflix instead?
  prefs: []
  type: TYPE_NORMAL
- en: Now, imagine you didn't see any of this additional information, and the details
    screen simply reiterated the information that you'd already seen on the main screen.
    Would you feel like this was a well-designed app that was giving you a great user
    experience? The answer is a resounding *nope*.
  prefs: []
  type: TYPE_NORMAL
- en: If you *do* decide to include a details screen, then make sure it contains some
    new information. If it doesn't, then it has no value, and therefore, it has no
    place in your app.
  prefs: []
  type: TYPE_NORMAL
- en: 'As always, add the most important content to your wireframe first. In this
    example, that''s the **Heading**, an image of the finished product, and the **Recipe**
    itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wireframing a details screen](img/B05061_6_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you work your way down the content hierarchy, you may encounter content
    that could work in numerous positions in your screen layout. If you do, then this
    is the ideal time to experiment with different layouts by creating multiple wireframes.
    You can then place these drawings side by side and decide which layout you prefer,
    or you can combine elements from multiple wireframes to create your perfect layout.
    Here''s a selection of the wireframes I created for the detailed recipe screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wireframing a details screen](img/B05061_6_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This wireframe contains several elements that could conceivably work in different
    locations–specifically, the text boxes that contain the estimated time, estimated
    cost, and the number of people this recipe feeds, plus the recipe's star rating.
    Wireframing gives you a quick and easy way of testing out these elements in several
    different positions.
  prefs: []
  type: TYPE_NORMAL
- en: '![Wireframing a details screen](img/B05061_6_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'While wireframing these elements in various positions, I''ve decided to keep
    the major content areas the same in all these wireframes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wireframing a details screen](img/B05061_6_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There's lots more content we could add to this screen; for example, it might
    be nice for users to be able to post comments, upload photos, or award each recipe
    a rating out of 10\. You might also want to include multiple photos of the finished
    results, so the user can scroll through these photos. To keep this chapter short,
    I'm not going to wireframe all these options, but if you're feeling creative,
    you might want to grab a piece of paper and a pencil, and create your own wireframes
    that include all this additional content.
  prefs: []
  type: TYPE_NORMAL
- en: Wireframing search screens
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many apps have some form of search functionality, and our recipe app is no exception,
    so let's take a look at wireframing the search screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'You know the drill by now! Look at the screen map and work out all the navigational
    elements you need to include:'
  prefs: []
  type: TYPE_NORMAL
- en: All the screens the user can reach the search screen *from*. According to the
    screen map, users can reach the search screen from the home screen only.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the screens the user can navigate *to*. The only screen the user can reach
    from the search screen is the search results screen.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the previous wireframes, we handled backward navigation by relying on the
    device's **Back** softkey and by creating a **Return to previous screen** button,
    so let's try something different this time around! I'm going to use a left-facing
    caret in the action bar.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you're creating Android apps in real life, you'll typically select one
    method of navigation and use it across your app, rather than the mixture we're
    using in this chapter. Although I'm experimenting with lots of different navigational
    options, just be aware that in a real-life project, you'd select one form of navigation
    and apply it across your entire app to avoid confusing and frustrating your users.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create our search functionality. I''m going to keep things simple and
    use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: An `EditText` where users can enter the keyword(s) they want to search for.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A button the user presses to submit their search term(s). I'm going to label
    this button with the standard search system icon to ensure that the user instantly
    knows what action this button performs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You might have noticed that in the previous wireframes, we were talking in general
    terms, such as heading boxes and images, and now, we're using the technical term
    *EditText.* This is because there are no strict rules when it comes to wireframing,
    so if you already have an idea of how you're going to create certain UI elements,
    and you want to add this information to your wireframes, then go ahead!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The only exception is when you're planning on sharing your wireframes with other
    people, particularly if these people aren't Android developers themselves! If
    you're creating wireframes as a collaborative effort with non-Android types, then
    you should stick to civilian terms such as text boxes and images.
  prefs: []
  type: TYPE_NORMAL
- en: '![Wireframing search screens](img/B05061_6_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'While there''s nothing wrong with this layout, there''s no denying that it''s
    pretty basic. It would be better if our users could search for recipes based on
    a few different criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: How easy a recipe is to make
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How much the ingredients cost to purchase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How many people the recipe feeds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are lots of ways of implementing this functionality, but the two that
    immediately spring to my mind are here:'
  prefs: []
  type: TYPE_NORMAL
- en: Give the user the ability to filter recipes based on different criteria by adding
    checkboxes to the existing search screen wireframe. Users can then enter any keyword
    they want to search for *and* select the relevant checkboxes; for example, they
    might search for recipes that contain the words `prawn madras` (yum, yum) and
    then select the checkboxes marked **Costs £2-£3** and **Takes 15-20 minutes to
    cook**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stick with our simple search screen, but add filters to the search *results*
    screen. The user searches for keywords as normal and is taken to the search results
    screen, which contains additional filters that allow the user to narrow down their
    search results.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Both of these are viable options, so I''ve quickly wireframed each approach.
    This is a great example of how you can use wireframes to quickly test out various
    layouts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wireframing search screens](img/B05061_6_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this wireframe, the user performs a search as usual, but the search results
    screen contains three new buttons (**Price**,**Time**, and **Feeds...**), which
    they can use to filter their search results based on different criteria.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following wireframe is a new version of the Search screen where users enter
    their search terms into the `EditText` as normal, but then uses various checkboxes
    to be more specific about the search results they want to see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wireframing search screens](img/B05061_6_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The search screen as a fragment
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Regardless of where you are in the design and development process, you should
    always be thinking about how to support as many different Android devices as possible.
  prefs: []
  type: TYPE_NORMAL
- en: When you're busy wireframing, it's easy to fall into the trap of designing with
    one device in mind. Although this does make wireframing easier, it won't make
    for a very effective UI in the long run.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Wireframing for landscape and portrait**'
  prefs: []
  type: TYPE_NORMAL
- en: Playing around with the sizing and positioning of your content during the wireframing
    phase not only helps you work out how you might better support multiple screen
    configurations, but it also helps you to design an app that functions equally
    well in both landscape and portrait modes.
  prefs: []
  type: TYPE_NORMAL
- en: Planning for multiple screens may mean creating several wireframes that target
    different screen configurations, or it could mean combining your content in different
    ways using fragments.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapter, we mentioned displaying our search screen as a standalone
    activity on smaller devices, but displaying it as a fragment alongside the home
    screen on devices with larger screens. Since we've already wireframed the first
    possibility, it only seems right to wireframe how the search screen might function
    as part of a multi-pane layout.
  prefs: []
  type: TYPE_NORMAL
- en: To speed up this process, I'm going to reuse the home screen wireframe that
    we created earlier as well as the original, basic search screen wireframe.
  prefs: []
  type: TYPE_NORMAL
- en: As always, let's start with navigation. Most of the navigational elements from
    our home screen wireframe are still valid apart from the **Search for recipes**
    item in the left-hand menu. Since the search box will appear alongside the home
    screen in this scenario, we can remove this link from the menu.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, the original search wireframe included an action bar with a left-facing
    caret that's no longer necessary; since the fragment appears as part of the home
    screen, there's nowhere for the user to navigate back *to* apart from exiting
    the app, and we don't want to help them do that!
  prefs: []
  type: TYPE_NORMAL
- en: With navigation sorted, let's look at the content. All the content from the
    original home screen and search wireframes is still relevant, and therefore, it
    has a place in our multi-pane layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the finished result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The search screen as a fragment](img/B05061_6_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Feeling overwhelmed?**'
  prefs: []
  type: TYPE_NORMAL
- en: Working out the best position for each element while also trying to design for
    multiple devices may leave you staring at a blank sheet of paper and wondering
    *where do I start?* If you're feeling overwhelmed, then it may help to think of
    wireframes as a series of drafts.
  prefs: []
  type: TYPE_NORMAL
- en: When creating you first draft, you should wireframe without stressing about
    trying to support multiple devices. Instead, concentrate on defining how your
    app looks in its *natural* state. How wide would you like that heading to be,
    if you didn't have to worry about running out of space on smaller handsets? Ideally,
    how far would that button be placed from the edge of the screen? And do you *really*
    want to display two images side by side? Are you sure you wouldn't prefer three?
    Or four? How about five?
  prefs: []
  type: TYPE_NORMAL
- en: Grab a pencil and wireframe without a care in the world. Then, after you've
    finished patting yourself on the back for an excellent first draft, you can start
    worrying about how this wireframe might translate across different devices.
  prefs: []
  type: TYPE_NORMAL
- en: Digital wireframes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you're satisfied with your paper wireframes, you should develop them further.
    This may mean creating a more detailed, thought-out sketch using your trusty pencil
    and paper, or it may mean developing these paper wireframes into *digital* wireframes.
  prefs: []
  type: TYPE_NORMAL
- en: If you do decide to digitize your wireframes, there's plenty of wireframing
    software out there, from professional image-editing programs such as Adobe Photoshop,
    Illustrator, and Fireworks, right through to tools created specifically for wireframing,
    such as Pidoco, Axure, InDesign, Sketch, Omnigraffle, and Balsamiq Mockups.
  prefs: []
  type: TYPE_NORMAL
- en: '![Digital wireframes](img/B05061_6_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The previous image is an example of our recipe app home screen, created with
    the Balsamiq digital wireframing tool.
  prefs: []
  type: TYPE_NORMAL
- en: If you're unsure about what tool to use, then a quick Google search will return
    lots of potential wireframing software, at which point you'll be faced with a
    whole new problem–too much choice!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''re struggling to decide between several potential wireframing tools,
    then ask yourself the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Does this tool have all the features I need? Before taking the plunge, you should
    make sure your chosen tool has all the features you need to quickly and easily
    create wireframes for your *specific* project. This is especially important if
    you're investing cold hard cash in professional wireframing software. If you download
    free wireframing software, and then realize that it isn't quite right for you,
    then at least you haven't wasted any of your hard-earned cash! To avoid being
    swayed by persuasive website copy, jot down all the features your ideal wireframing
    tool should include. You can then check whether each potential tool meets your
    list of criteria; and if it doesn't, then you can move onto the next one.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is it customizable? Being able to tweak the wireframing program to meet your
    exact needs is always positive, but this is particularly important if you're developing
    an unusual or niche UI.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can you store reusable elements? You'll typically use many UI elements across
    multiple screens such as action bars, menu, and buttons. To supercharge the wireframing
    process, keep an eye out for tools that allow you to easily store and reuse visual
    elements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What's the learning curve? Professional vector illustration tools may sound
    like just the thing your project needs, but complex tools may leave you scratching
    your head, particularly if you're not overly familiar with design. The whole purpose
    of wireframing is to save yourself time by quickly testing out multiple layouts.
    However, this whole exercise becomes pretty pointless if you end up spending hours
    with your head buried in the program's user manual rather than actually creating
    wireframes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are you already familiar with software that has wireframing potential? Even
    if this program isn't the most modern or feature rich, if you can use it to create
    effective wireframes in a reasonable amount of time, then it may make sense to
    use this old favorite, rather than investing time in getting to grips with some
    new software.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you're struggling with the sheer variety of wireframing tools out there,
    then you may want to focus on free wireframing software, rather than jumping headfirst
    into purchasing a professional image-editing tool. The huge benefit of free tools
    is that you can see firsthand whether they're right for you by downloading a few
    and giving them a quick trial *without* racking up a massive bill.
  prefs: []
  type: TYPE_NORMAL
- en: Adding content to your wireframes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Up until now, we've made a point of not adding content to our wireframes; but
    at some point, you'll need to test whether the way your screens are shaping up
    is suitable for the kind of content you want to display. Once you have a set of
    digital wireframes you're happy with, it's time to test whether your content fits
    into these wireframes, or you need to make some adjustments to said wireframes.
  prefs: []
  type: TYPE_NORMAL
- en: Content, mainly copy, doesn't really look appealing on *any* platform, but this
    is even more true on mobile devices. The smaller screen of a smartphone or tablet
    can make large blocks of undifferentiated text seem even larger.
  prefs: []
  type: TYPE_NORMAL
- en: If you're going to present your app's copy in an elegant way, then you need
    to put some thought into its design, and wireframes are the perfect place to start.
  prefs: []
  type: TYPE_NORMAL
- en: As you move into digital wireframing territory, you can start experimenting
    with design elements, such as different fonts, text sizes, bullets and numbered
    lists, as well as headings and subheadings. The end result? A UI that blends your
    sparkling, engaging copy with appealing presentation and design–basically, text
    that your users will actually *want* to read.
  prefs: []
  type: TYPE_NORMAL
- en: If you leave content and copy design issues until you have the final screen
    design in front of you, then chances are that you'll try and convince yourself
    that it isn't *really* that big a problem; or you'll look for the quickest and
    easiest workarounds even if they don't make for the best screen design.
  prefs: []
  type: TYPE_NORMAL
- en: When adding content to your wireframes, it's crucial to keep in mind what *real*
    content looks like. It's tempting to use text that just so happens to be the right
    size and length to fit neatly into your wireframe. Unfortunately, unless you're
    *very* lucky, this simply isn't the way real content works, so it's important
    to use realistic text in your wireframes.
  prefs: []
  type: TYPE_NORMAL
- en: Although you can use the classic `Lorem ipsum` Latin filler text or some dummy
    content, the best way to test that your layout is suitable for the kind of content
    you want to display is to use the same copy that'll eventually appear on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of our recipe app, this presents a bit of a problem as the text
    on each detailed recipe screen will be different. For example, each recipe title
    will be a different length, so how do we ensure all these titles will fit into
    the available space?
  prefs: []
  type: TYPE_NORMAL
- en: The answer is to look at the full range of titles that are ultimately going
    to have to fit into the heading box, and then work out the average length. You
    should also go out of your way to find awkward content, as this'll help you plan
    how your UI will support these edge cases. In this instance, this means finding
    the longest and shortest recipe titles, and then working out how to display them
    effectively.
  prefs: []
  type: TYPE_NORMAL
- en: When the detailed recipe screen has to display a short title, will the size
    of the heading box remain fixed or will it shrink? And if it does shrink, how
    can we prevent lots of empty whitespace appearing around the newly shrunken box?
    Will the box expand to accommodate recipes with unusually long-winded titles?
    Will the text wrap onto multiple lines?
  prefs: []
  type: TYPE_NORMAL
- en: You don't have to wireframe *every* possibility, but you should try to identify
    all the major problems varying copy and content could cause your layout. Only
    then will you be able to create a wireframe that's flexible enough to take unusual
    copy and content in its stride.
  prefs: []
  type: TYPE_NORMAL
- en: What is paper prototyping?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you've created a digital wireframe that you're relatively happy with, it's
    a good idea to put this design to the test via paper prototyping.
  prefs: []
  type: TYPE_NORMAL
- en: Paper prototyping is where you create rough drawings of the different screens
    that make up your app, representing each screen as a separate sheet of paper.
    You then test this paper prototype on a user (or ideally, *users*) and incorporate
    the user's feedback into your digital wireframes. This method of usability testing
    may seem simple, but it's actually a valuable way of reviewing and refining your
    design so it's the best it can possibly be.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating a paper prototype is an important step in the design process for two
    main reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: '**They''re great for identifying any usability problems that you might have
    overlooked**: Spotting the faults in your own design isn''t always easy. Paper
    prototyping gives you a way of testing your app on your target audience without
    you having to write any code. And as we''ve already discussed, the earlier you
    can identify flaws in your design, the easier it is to fix those flaws.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**They help you test your app''s navigation up-front**: Designing easy and
    frictionless navigation is an essential part of creating a successful app, but
    it''s difficult to properly evaluate navigation until you have actually experienced
    that navigation. Prototypes are a way of taking your planned navigation for a
    test drive and seeing first-hand how easy or difficult it is for users to navigate
    your app. If you skip the paper prototyping stage, the danger is that you won''t
    realize there''s a problem with your navigation until you''ve actually started
    to build your app. And since navigation should be consistent across your app,
    if you realize that you need to tweak the navigation on one screen, you may find
    that you need to change the navigation across *all* your screens; and this is
    not something you want to discover at the last minute! Paper prototyping increases
    your chances of getting navigation right the first time around.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usability testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Paper prototypes are perfect for usability testing. Ideally, you'll want to
    test your prototypes on a member of your target audience, but colleagues, friends,
    and family members make good stand-ins as long as they haven't been involved in
    the design process.
  prefs: []
  type: TYPE_NORMAL
- en: For the most effective usability testing, you'll want someone's genuine reaction
    to approaching your app *blind*, just as a regular user would after downloading
    your app from the Google Play store. If you enlist the help of someone who has
    insider knowledge of your project, then this isn't really replicating the typical
    user experience.
  prefs: []
  type: TYPE_NORMAL
- en: In usability testing, your test subject interacts with the paper prototype while
    you manipulate the prototype to reflect the user's actions. For example, if they
    tap a **Go to home screen** button, you should switch pages and present them with
    your home screen prototype. Okay, so this may sound a bit silly, but it's also
    one of the most effective ways of discovering potential usability issues before
    you invest any more time in designing and developing your app, so it's well worth
    feeling a bit silly for.
  prefs: []
  type: TYPE_NORMAL
- en: Ask the user for feedback as they're interacting with your paper prototype,
    and be sure to prompt them to explain why they're performing each action and what
    they expect to happen next. You should also encourage them to speak up about anything
    that confuses them, or if there's anything about your UI that they don't like.
    Do they understand how to navigate to the next screen? Do they immediately understand
    what task they need to perform on each new screen, or do they need to stop and
    think about it?
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, you'll get enough information to warrant making some revisions to your
    digital wireframes. If you do make any significant changes to your wireframes,
    then consider creating a new set of paper prototypes and testing them on the same
    user. Repeat this process until your test subjects are navigating your paper prototypes
    with ease and have no further feedback or suggestions.
  prefs: []
  type: TYPE_NORMAL
- en: At this stage, you should have a set of digital wireframes that you feel confident
    about. We'll be using these wireframes to create more detailed, digital prototypes
    in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Rapid prototyping
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If your app is a team effort, you may want to consider using paper prototyping
    as part of a rapid prototyping approach.
  prefs: []
  type: TYPE_NORMAL
- en: In rapid prototyping, each team member creates a paper prototype and tests it
    on a single user. The team then comes together to share their feedback and ideas,
    at which point each person creates a second prototype. Again, each prototype is
    tested on a single user before the team meets again to share their feedback. You
    can then update your digital wireframes based on the collective feedback. This
    is one of the quickest and easiest ways of collecting feedback from multiple users
    and incorporating all this valuable information into your design.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to developing Android apps, it's impossible to overestimate the
    value of planning.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we looked at how to translate the high-level plans that we
    made in the previous chapter into actual screen designs. We created quick paper
    wireframes, and then used them as the basis for detailed digital wireframes complete
    with content and copy. Finally, we created paper prototypes and looked at how
    usability testing can help you refine your screen designs, making them the best
    they can possibly be. In the next chapter, we'll look at how to create more complex
    and polished digital prototypes using Android Studio and the Android SDK.
  prefs: []
  type: TYPE_NORMAL
- en: If this chapter was your first taste of wireframing and prototyping, then you
    may still be feeling overwhelmed, but the important thing to remember is that
    as long as you're doing *some *form of wireframing and prototyping, then you're
    already doing much more planning than you were before.
  prefs: []
  type: TYPE_NORMAL
- en: The only word of warning is don't invest too much time and effort perfecting
    your screen designs early on in the design process. Your designs should start
    off very rough around the edges and gradually become more refined and detailed
    as you move through the different planning stages.
  prefs: []
  type: TYPE_NORMAL
- en: If you're still unsure, then take another look at the recipe wireframes included
    in this chapter and ask yourself "how could I improve these designs?" Then, wireframe
    the results! You may even want to create prototypes based on these wireframes.
    Alternatively, boot up one of your favourite Android apps and create wireframe
    and prototype versions of all the main screens. These are both valuable ways of
    refining your skills so that by the time you come to plan your own real-life Android
    projects, you'll be a wireframing and prototyping pro.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've got a rough design for our application, it's time to dive into
    some development work. In the next chapter, you'll use Android Studio to create
    a working digital prototype based on your wireframes and paper prototypes.
  prefs: []
  type: TYPE_NORMAL
