["```swift\n// Allocate and init\nNSMutableDictionary *dictionary = [[NSDictionary alloc] init];\n\n// Do something with dictionary\n// ...\n\n// Release\n[dictionary release];\n```", "```swift\n// Allocate and init\nNSMutableDictionary *dictionary = [NSDictionary dictionary];\n\n// Do something with dictionary\n// …\n```", "```swift\nNSMutableDictionary *dictionary = [[NSDictionary alloc] init];\nreturn [dictionary autorelease];\n```", "```swift\n// Code in non-ARC mode NSAutoreleasePool *myPool = [[NSAutoreleasePool alloc] init];\n// Taking advantage of a local autorelease pool.\n[myPool release];\n```", "```swift\n@autoreleasepool {\n    // Taking advantage of a local autorelease pool.\n}\n```", "```swift\n@autoreleasepool {\n     //-----\n\t // Here you create autoreleased objects.\n\t //-----\n}\n```", "```swift\n@autoreleasepool {\n    // . . .\n    @autoreleasepool {\n        // . . .\n    }\n    //. . .\n}\n```", "```swift\nNSArray *myUrls = <# Sample Array of URLs #>;\nfor (NSURL *url in myUrls) {\n    @autoreleasepool {\n\n/* Two objects are created inside this pool:\nNSString \"contents\", NSError \"error\"\nAt the end of the pool, they are released. */\n\n       NSError *error;\n       NSString *contents = [NSString\n        stringWithContentsOfURL:url encoding:NSUTF8StringEncoding error:&error];\n\n         /* Here you can process the NSString contents,\n    thus creating and autoreleasing more objects. */\n    }\n}\n```", "```swift\n– (id)findTheMatchingObject:(id)myObject {\n\n   id myMatch;\n   while (myMatch == nil) {\n  @autoreleasepool {\n\n  /*\n      This search creates a large number of temporary      \n      objects\n  */\n           myMatch = [self expensiveSearchForObject:myObject];\n\n           if (myMatch != nil) {\n\t/*\n      Keep myMatch in order to use it even after the block is\n      ended.\n    */\n      [myMatch retain];\n      break;\n            }\n        }\n    }\n     /*\n        Here - outside the block - you send it an autorelease message and return it to the method's invoker\n    */\n    return [myMatch autorelease];\n}\n```", "```swift\nid myPool = [NSAutoreleasePool new];\n[myObject somethingThatCreatesManyObjects];\n[myPool drain];\n```", "```swift\n// This exception will be autoreleased\n +[NSException exceptionWithName:...]\n\n// Or the alternative below\n +[NSException raise:...]\n```", "```swift\n    id myObj = [[[SampleClass alloc] init] autorelease];\n    ThisMightThrowAnException();\n\n    id myObj = [[SampleClass alloc] init];\n    @try {\n        ThisMightThrowAnException();\n    } @finally {\n        [myObj release];\n    }\n```", "```swift\n/*\n  -------------------------------------------------------\n  Non-ARC Environment with Memory Leaks\n*/\n@autoreleasepool \n{\n  // No autorelease call here\n   MyObject *obj = [[MyObject alloc] init];\n\n   /* Since MyObject is never released its\n     a leak even when the pool exits\n  */\n}\n\n  /*\n  -------------------------------------------------------\n  Non-ARC Environment with NO Memory Leaks\n*/\n@autoreleasepool \n{\n  // Memory is freed once the block ends\n  MyObject *obj = [[[MyObject alloc] init] autorelease]; \n}\n```", "```swift\n/*\n  -------------------------------------------------------\n  ARC Environment\n*/\n@autoreleasepool \n{\n\n    MyObject *obj = [[MyObject alloc] init]; \n  /* \n     No need to do anything once the obj variable\n     is out of scope. There are no strong pointers\n     so the memory will be free\n  */\n\n}\n\n/*\n  -------------------------------------------------------\n  ARC Environment\n*/\nMyObject *obj; // Strong pointer from elsewhere in scope\n\n@autoreleasepool \n{\n    obj = [[MyObject alloc] init]; \n    // Not freed still has a strong pointer \n}\n```"]