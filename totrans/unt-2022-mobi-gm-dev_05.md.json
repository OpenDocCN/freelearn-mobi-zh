["```kt\n    [Tooltip(\"Reference to the on screen controls menu\")]\n    public GameObject onScreenControls;\n    ```", "```kt\n    /// <summary>\n    /// Will turn our pause menu on or off\n    /// </summary>\n    /// <param name=\"isPaused\">is the game currently\n        paused</param>\n    public void SetPauseMenu(bool isPaused)\n    {\n        paused = isPaused;\n        /* If the game is paused, timeScale is 0,\n           otherwise 1 */\n        Time.timeScale = (paused) ? 0 : 1;\n        pauseMenu.SetActive(paused);\n        onScreenControls.SetActive(!paused);\n    }\n    ```", "```kt\n    void Start()\n    {\n        /* Must be reset in Start or else game will be\n            paused upon\n         * restart */\n        SetPauseMenu(false);\n    }\n    ```", "```kt\n    /// <summary>\n    /// A reference to this object's RectTransform\n    /// component\n    /// </summary>\n    RectTransform rt;\n    /// <summary>\n    /// The original position of the stick used to\n    /// calculate the offset of movement\n    /// </summary>\n    Vector2 originalAnchored;\n    // Start is called before the first frame update\n    void Start()\n    {\n        rt = GetComponent<RectTransform>();\n        originalAnchored = rt.anchoredPosition;\n    }\n    ```", "```kt\n    using UnityEngine.EventSystems; /* IDragHandler, IEndDragHandler */\n    ```", "```kt\n    public class MobileJoystick : MonoBehaviour, IDragHandler, IEndDragHandler\n    ```", "```kt\n       /// <summary>\n       /// Will allow the user to move the joystick\n       /// </summary>\n       /// <param name=\"eventData\">Information about the\n       /// movement, we are only\n       /// using the position</param>\n       public void OnDrag(PointerEventData eventData)\n       {\n           /* We use our parent's info since the joystick\n              moves */\n           var parent =\n               rt.parent.GetComponent<RectTransform>();\n           var parentSize = parent.rect.size;\n           var parentPoint =\n               eventData.position - parentSize;\n           /* Calculate the point relative to the\n              parent's local space */\n           Vector2 localPoint =\n               parent.InverseTransformPoint(parentPoint);\n           /* Calculates what the new anchor point should\n              be */\n           Vector2 newAnchorPos =\n               localPoint - originalAnchored;\n           /* Prevent the analog stick from moving too\n              far */\n           newAnchorPos = Vector2.ClampMagnitude(\n               newAnchorPos, parentSize.x/2);\n           rt.anchoredPosition = newAnchorPos;\n       }\n       /// <summary>\n       /// Will be called when the player lets go of the\n       /// stick\n       /// </summary>\n       /// <param name=\"eventData\">Information about the\n       /// movement, unused</param>\n       public void OnEndDrag(PointerEventData eventData)\n       {\n           /* Reset the stick to it's original position\n           */\n           rt.anchoredPosition = Vector3.zero;\n       }\n    ```", "```kt\n        /// <summary>\n        /// Gets the value of the joystick in a -1 to 1\n        /// manner in the same way that Input.GetAxis does\n        /// </summary>\n        public Vector2 axisValue;\n    ```", "```kt\n    // Update the axis value to the new position\n    axisValue = newAnchorPos / (parentSize.x / 2);\n    ```", "```kt\n    axisValue = Vector2.zero;\n    ```", "```kt\n        private MobileJoystick joystick;\n        // Start is called before the first frame update\n        public void Start()\n        {\n            // Get access to our Rigidbody component\n            rb = GetComponent<Rigidbody>();\n            minSwipeDistancePixels = minSwipeDistance *\n                Screen.dpi;\n            joystick = GameObject.FindObjectOfType\n                <MobileJoystick>();\n        }\n    ```", "```kt\n    /// <summary>\n    /// FixedUpdate is a prime place to put physics\n    /// calculations\n    /// happening over a period of time.\n    /// </summary>\n    void FixedUpdate()\n    {\n        /* If the game is paused, don't do anything */\n        if (PauseScreenBehaviour.paused)\n        {\n            return;\n        }\n        // Check if we're moving to the side\n        var horizontalSpeed = Input.GetAxis(\"Horizontal\")\n            * dodgeSpeed;\n        /* If the joystick is active and the player is\n           moving the joystick, override the value */\n        if (joystick && joystick.axisValue.x != 0)\n        {\n            horizontalSpeed = joystick.axisValue.x *\n                dodgeSpeed;\n        }\n        /* Check if we are running either in the Unity\n           editor or in a standalone build.*/\n        #if UNITY_STANDALONE || UNITY_WEBPLAYER ||\n            UNITY_EDITOR\n            /* If the mouse is held down (or the screen is\n               tapped on Mobile */\n            if (Input.GetMouseButton(0))\n            {\n                if(!joystick)\n                {\n                    var screenPos = Input.mousePosition;\n                    horizontalSpeed =\n                        CalculateMovement(screenPos);\n                }\n            }\n        /* Check if we are running on a mobile device */\n        #elif UNITY_IOS || UNITY_ANDROID\n            switch (horizMovement)\n            {\n                case MobileHorizMovement.Accelerometer:\n                    /* Move player based on accelerometer\n                       direction */\n                    horizontalSpeed = Input.acceleration.x\n                        * dodgeSpeed;\n                    break;\n                case MobileHorizMovement.ScreenTouch:\n                    /* Check if Input registered more than\n                       zero touches */\n                    if (!joystick && Input.touchCount > 0)\n                    {\n                        /* Store the first touch detected\n                        */\n                        var firstTouch = Input.touches[0];\n                        var screenPos =\n                            firstTouch.position;\n                        horizontalSpeed =\n                            CalculateMovement(screenPos);\n                    }\n                    break;\n            }\n        #endif\n        rb.AddForce(horizontalSpeed, 0, rollSpeed);\n    }\n    ```", "```kt\n    using UnityEngine;\n    public class UISafeAreaHandler : MonoBehaviour\n    {\n        RectTransform panel;\n        // Start is called before the first frame update\n        void Start()\n        {\n            panel = GetComponent<RectTransform>();\n        }\n        // Update is called once per frame\n        void Update()\n        {\n            Rect area = Screen.safeArea;\n            /* Pixel size in screen space of the whole\n               screen */\n            Vector2 screenSize = new Vector2(Screen.width,\n                Screen.height);\n            /* Set anchors to percentages of the screen\n               used. */\n            panel.anchorMin = area.position / screenSize;\n            panel.anchorMax = (area.position + area.size)\n                / screenSize;\n        }\n    }\n    ```"]