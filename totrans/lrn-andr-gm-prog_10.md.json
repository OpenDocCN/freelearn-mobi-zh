["```kt\n//The import statements are same as our previous chapter\n\npublic class MyGLRenderer implements GLSurfaceView.Renderer {\n Triangle triangle;\n\n    // Constructor\n    public MyGLRenderer(Context context) {\n        triangle = new Triangle();\n    }\n\n    //onSurfaceCreated and onSurfaceChanged methods remain same as previous chapter\n\n    @Override\n    public void onDrawFrame(GL10 gles) {\n        gles.glClear(GL10.GL_COLOR_BUFFER_BIT | \n        GL10.GL_DEPTH_BUFFER_BIT);\n\n gles.glLoadIdentity();\n        gles.glTranslatef(-1.5f, 0.0f, -6.0f);\n        triangle.draw(gles);\n    }\n}\n\n```", "```kt\n//Import statements remain the same\npublic class Triangle {\nprivate FloatBuffer vb;\n private FloatBuffer cb;\n    private ByteBuffer ib;\n\n    private float[] v = {  // Vertices of the triangle\n            0.0f,  1.0f, 0.0f, // 0\\. top vertices\n            -1.0f, -1.0f, 0.0f, // 1\\. left-bottom vertices\n            1.0f, -1.0f, 0.0f  // 2\\. right-bottom vertices\n    };\n    private byte[] ind = { 0, 1, 2 };\n private float[] colors = { \n            1.0f, 0.0f, 0.0f, 1.0f, //R\n            0.0f, 1.0f, 0.0f, 1.0f, //G\n            0.0f, 0.0f, 1.0f, 1.0f  //B\n    };\n\n    public Triangle() {\n        //start of code same as earlier\n ByteBuffer cbb = ByteBuffer.allocateDirect(colors.length * 4);\n cbb.order(ByteOrder.nativeOrder());\n        cb = cbb.asFloatBuffer();\n        cb.put(colors);\n        cb.position(0);\n\n        //index buffer code same as earlier\n    }\n\n    public void draw(GL10 gles) {\n        //code as before\n gles.glDisableClientState(GL10.GL_COLOR_ARRAY);\n    }\n}\n\n```", "```kt\n//Import statements as before\npublic class MyGLRenderer implements GLSurfaceView.Renderer {\n\n    Triangle triangle;\n private float angleTriangle = 0.0f;\n    private float speedTriangle = 0.5f;\n\n    public MyGLRenderer(Context context) {\n        triangle = new Triangle();\n    }\n\n// No changes in our onSurfaceCreated and onSurfaceChanged methods so ignore this part\n\n    @Override\n    public void onDrawFrame(GL10 gles) {\n        //Same as previous part\n angleTriangle += speedTriangle;\n    }\n}\n\n```", "```kt\n//Package name of our game\n\npublic class Pyramid {\n    private float[] vp = { // 5 vertices of the pyramid in (x,y,z)\n            -1.0f, -1.0f, -1.0f,  //left-bottom-back\n            1.0f, -1.0f, -1.0f,  //right-bottom-back\n            1.0f, -1.0f,  1.0f,  //right-bottom-front\n            -1.0f, -1.0f,  1.0f,  //left-bottom-front\n            0.0f,  1.0f,  0.0f   //top\n    };\n}\n\n```", "```kt\nprivate FloatBuffer vb;  // Buffer for vertex-array\nprivate FloatBuffer cb;   // Buffer for color-array\nprivate ByteBuffer ib;    // Buffer for index-array\n\nprivate float[] colors = {  // Colors of the 5 vertices in RGBA\n        0.0f, 0.0f, 1.0f, 1.0f,  // blue\n        0.0f, 1.0f, 0.0f, 1.0f,  // green\n        0.0f, 0.0f, 1.0f, 1.0f,  // blue\n        0.0f, 1.0f, 0.0f, 1.0f,  // green\n        1.0f, 0.0f, 0.0f, 1.0f   // red\n};\n\nprivate byte[] ind = { // Vertex indices\n        2, 4, 3,   // front face\n        1, 4, 2,   // right face\n        0, 4, 1,   // back face\n        4, 0, 3    // left face\n};\n\n```", "```kt\npublic Pyramid() {\n    ByteBuffer vbb = ByteBuffer.allocateDirect(vp.length * 4);\n    vbb.order(ByteOrder.nativeOrder());\n    vb = vbb.asFloatBuffer();\n    vb.put(vp);\n    vb.position(0);\n\n    ByteBuffer cbb = ByteBuffer.allocateDirect(colors.length * 4);\n    cbb.order(ByteOrder.nativeOrder());\n    cb = cbb.asFloatBuffer();\n    cb.put(colors);\n    cb.position(0);\n\n    ib = ByteBuffer.allocateDirect(ind.length);\n    ib.put(ind);\n    ib.position(0);\n}\n\n```", "```kt\n   public void draw(GL10 gles) {\n      gles.glFrontFace(GL10.GL_CCW);\n\n      gles.glEnableClientState(GL10.GL_VERTEX_ARRAY);\n      gles.glVertexPointer(3, GL10.GL_FLOAT, 0, vb);\n      gles.glEnableClientState(GL10.GL_COLOR_ARRAY);\n      gles.glColorPointer(4, GL10.GL_FLOAT, 0, cb);\n\n      gles.glDrawElements(GL10.GL_TRIANGLES, ind.length, \n      GL10.GL_UNSIGNED_BYTE,ib);\n\n      gl.glDisableClientState(GL10.GL_VERTEX_ARRAY);\n      gl.glDisableClientState(GL10.GL_COLOR_ARRAY);\n   }\n\n```", "```kt\n//Package name and our import statements\npublic class Pyramid {\n\n//Our 3 buffer variables\n\n    private float[] vp = {\n            -1.0f, -1.0f, -1.0f,  //left-bottom-back\n            1.0f, -1.0f, -1.0f,  //right-bottom-back\n            1.0f, -1.0f,  1.0f,  //right-bottom-front\n            -1.0f, -1.0f,  1.0f,  //left-bottom-front\n            0.0f,  1.0f,  0.0f   //top\n    };\n\n    private float[] colors = {\n            0.0f, 0.0f, 1.0f, 1.0f,  //blue\n            0.0f, 1.0f, 0.0f, 1.0f,  //green\n            0.0f, 0.0f, 1.0f, 1.0f,  //blue\n            0.0f, 1.0f, 0.0f, 1.0f,  //green\n            1.0f, 0.0f, 0.0f, 1.0f   //red\n    };\n\n    private byte[] ind = { // Vertex indices\n            2, 4, 3,   // front face (CCW)\n            1, 4, 2,   // right face\n            0, 4, 1,   // back face\n            4, 0, 3    // left face\n    };\n\n    public Pyramid() {\n        ByteBuffer vbb = ByteBuffer.allocateDirect(vp.length * 4);\n        vbb.order(ByteOrder.nativeOrder());\n        vb = vbb.asFloatBuffer();\n        vb.put(vp);\n        vb.position(0);\n\n        ByteBuffer cbb = ByteBuffer.allocateDirect(colors.length * 4);\n        cbb.order(ByteOrder.nativeOrder());\n        cb = cbb.asFloatBuffer();\n        cb.put(colors);\n        cb.position(0);\n\n        ib = ByteBuffer.allocateDirect(ind.length);\n        ib.put(ind);\n        ib.position(0);\n    }\n\n// Draw the shape\n    public void draw(GL10 gles) {\n        gles.glFrontFace(GL10.GL_CCW);\n\n        gles.glEnableClientState(GL10.GL_VERTEX_ARRAY);\n        gles.glVertexPointer(3, GL10.GL_FLOAT, 0, vb);\n        gles.glEnableClientState(GL10.GL_COLOR_ARRAY);\n        gles.glColorPointer(4, GL10.GL_FLOAT, 0, cb);\n\n        gles.glDrawElements(GL10.GL_TRIANGLES, ind.length, \n        GL10.GL_UNSIGNED_BYTE,ib);\n\n        gles.glDisableClientState(GL10.GL_VERTEX_ARRAY);\n        gles.glDisableClientState(GL10.GL_COLOR_ARRAY);\n    }\n}\n\n```", "```kt\n//Package name and import statements\n\npublic class MyGLRenderer implements GLSurfaceView.Renderer {\n\n    //our triangle object variables\n private Pyramid pyramid;\n\n private static float anglePyramid = 0;\n    private static float speedPyramid = 2.0f;\n\n    public MyGLRenderer(Context context) {\n        //our triangle object reference remains same\n pyramid = new Pyramid();\n    }\n\n    //Again there's no change in onSurfaceCreated and onSurfaceChanged methods so type them as is in previous chapter\n\n    @Override\n    public void onDrawFrame(GL10 gles) {\n        //Triangle code remains same gles.glLoadIdentity();\n        gles.glTranslatef(1.5f, 0.0f, -6.0f);\n        gles.glRotatef(anglePyramid, 0.1f, 1.0f, -0.1f);\n        pyramid.draw(gles);\n\n        //angleTriangle speed assign here\n anglePyramid += speedPyramid;\n    }\n}\n\n```"]