- en: Chapter 6. Web Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Consuming web services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consuming REST services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communicating with native APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using WCF services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Providing online information to the user is a crucial part of mobile development.
    In this chapter, we will discuss developing apps that communicate with web services
    to provide information. We will see how to consume and invoke web services based
    on SOAP. We will also discuss on how to use REST web services and how to parse
    the popular JSON data format from a web server. Last but not least, we will take
    a look at how to use the native iOS APIs for communication and also how to use
    WCF services.
  prefs: []
  type: TYPE_NORMAL
- en: All examples in this chapter use **XSP**, a lightweight web server that is shipped
    with the Mono Framework; so, there is no need to have a live web service up and
    running online or locally to make use of the provided code.
  prefs: []
  type: TYPE_NORMAL
- en: Consuming web services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to use a SOAP web service in a Xamarin.iOS
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new **Single View Application** project in Xamarin Studio and name
    it `WebServiceApp`. This chapter's code contains a web service project named `MTWebService`.
    This is the web service that will be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the `MTWebService` web service, we need a web server. Mono Framework
    provides us with the XSP lightweight web server for testing purposes. Open a terminal
    and type the following command to get to the web service''s directory, replacing
    `<code_directory>` with the path the downloaded code is in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the XSP web server by typing `xsp4` in the prompt. You will see an output
    that is similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The web server is now up and running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: We need to add a reference to the web service in our project. Right-click on
    the project in the **Solution** pad and navigate to **Add** | **Add Web Reference**.
    In the dialog box that will be shown, add `http://localhost:8080/MTTestWebService.asmx?wsdl`
    in the **Web Service Url** field and click on the **Jump to** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **.NET 2.0 Web Services** in the **Framework** combo box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Reference** field to `mtWebService`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With all the settings properly entered, the dialog box should look similar to
    the following screenshot. Click on the **OK** button to add the web reference:![How
    to do it...](img/8924OT_06_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a button and label to `WebServiceAppViewController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `ViewDidLoad` method of the controller, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following `using` directive to the `WebServiceAppViewController.cs`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the app on the simulator. Click on the **Fetch** button and
    the output should be displayed on the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Xamarin.iOS apps can consume web services just like a .NET desktop application.
    The XSP lightweight web server is installed when installing the Mono Framework
    by default, which is a requirement for the Xamarin installation. When running
    the `xsp4` command in the terminal without any parameters, it sets its base directory
    to the current directory by default and starts listening on the `8080` port. If
    the web server is started, the web service description can be viewed by entering
    `http://localhost:8080/MTTestWebService.asmx` in a browser.
  prefs: []
  type: TYPE_NORMAL
- en: Xamarin Studio reads the **WSDL** information from the provided URL and creates
    the necessary proxy that will allow us to use the web service in the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then set the **Framework** value to **.NET 2.0 Web Services** and provide
    a **Reference** name, which will reflect the namespace of the web reference. To
    make use of the web service within our code, we instantiate it and then just call
    the method we are interested in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apart from using a local hosted web service, there are also numerous sample
    web services on the Internet. A simple search will yield many results.
  prefs: []
  type: TYPE_NORMAL
- en: Invoking web service methods asynchronously
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The created proxy also contains methods based on Begin/End and the event to
    invoke the web service asynchronously. The following example shows us how to use
    the event-based methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note the `InvokeOnMainThread` call inside the event handler; it is being called
    on a separate thread. So, if we want to access the main thread in it, we need
    to wrap our calls with `InvokeOnMainThread`.
  prefs: []
  type: TYPE_NORMAL
- en: The XSP shutdown
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To shut down the XSP web server, just click on the *Return* key in the terminal
    where it was executed from.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Communicating with native APIs* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consuming REST services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will discuss how to properly use and consume REST services
    with Xamarin.iOS.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new **Single View Application** in Xamarin Studio and name it `ForecastApp`.
    In this recipe, we will use the **Open Meteo Foundation** REST API. The use of
    this API is subject to the terms of use stated in this page: [http://openmeteofoundation.org/terms-of-use](http://openmeteofoundation.org/terms-of-use).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a label and a button on `ForecastAppViewController`. Make sure that the
    label's **Lines** property is set to at least three lines.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code in the controller''s `ViewDidLoad` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the `System.Net.Http` and `System.Json` references to the project. Don't
    forget to include the corresponding `using` directives to the `ForecastAppViewcontroller.cs`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compile and run the app on the simulator. Click on the **Get Forecast** button
    to display the current temperature and wind speed on the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we created an app that uses a REST API to get the current forecast
    for a location. We are using the `async`/`await` pattern that allows us to connect
    and retrieve the data asynchronously. This helps us make sure that our app will
    not freeze while it is connected to retrieve the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'As it all happens when we click on the button, its `TouchUpInside` handler
    method needs to be marked `async`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We then use the `HttpClient` class, which is part of the `System.Net.Http`
    namespace that provides us with asynchronous methods to connect to endpoints,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We pass the endpoint to the `GetStringAsync` method, and we get back a JSON
    response string.
  prefs: []
  type: TYPE_NORMAL
- en: 'After retrieving the response, we need to parse it to extract the information
    we need from it. We do this by using the `System.Json` namespace. This namespace
    contains a set of simple classes that allow us to parse JSON strings, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The temperature is contained in the JSON response under the temp key that contains
    an array, albeit with a single item, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'After we read the information we need from the JSON response, we display it
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `System.Json` namespace is very helpful for parsing simple JSON strings.
    However, things could get very complicated if we have to parse large and more
    complex objects. There are a number of open source libraries we can download and
    use in our Xamarin.iOS projects. The most popular are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Xamarin port of NewtonSoft Json.NET from Andrew Young**: Even if this is
    outdated, it is fully functional for Xamarin projects. You can find the page at
    [https://github.com/ayoung/Newtonsoft.Json](https://github.com/ayoung/Newtonsoft.Json).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ServiceStack.Text**: You can find the page at [https://github.com/ServiceStack/ServiceStack.Text](https://github.com/ServiceStack/ServiceStack.Text).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Consuming web services* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communicating with native APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will discuss using native iOS APIs to connect and consume
    REST services.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will work on the `ForecastApp` we created in the previous
    recipe, *Consuming REST services*. Open the project in Xamarin Studio.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Comment out the code in the `ViewDidLoad` method and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following class to the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the app on the simulator. Click on the **Get Forecast** button
    to fetch and display the forecast data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `NSUrlConnection` class is the native iOS class that provides basic connectivity
    functionality. We initialize it by passing `NSUrlRequest` and a delegate object,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ConnectionDelegate` class that we created acts as the delegate object
    of our `NSUrlConnection`. Inside the class, we need to override the `ReceivedData`
    method to fill our internal buffer with the data received from the service, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly to reading data from the `Stream` object of `HttpWebResponse`, the
    `ReceivedData` method will be called as soon as new data becomes available. Inside
    `ReceivedData`, we make sure we append the data to our buffer. When all the data
    has been received and the response is finished, the `FinishedLoading` method will
    be called, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'After initializing the `NSUrlConnection` instance, we call its `Start` method
    to initiate the connection, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If something goes wrong with the connection, the `FailedWithError` method of
    `NSUrlConnectionDelegate` will be called. We can override it to get information
    on the error that occurred, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Synchronous NSUrlConnection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using the `NSUrlConnection` class with a delegate object means that the connection
    will take place asynchronously on the thread that it was started from. If we wanted
    to start a synchronous connection, we can use the `SendSynchronousRequest` static
    method, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Usability
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you might have already noticed, using `NSUrlConnection` is a bit more complicated
    than plain old Mono BCL classes. In general, using BCL classes is the best practice
    for most scenarios, as it helps us maintain a multi-platform code base, among
    other things.
  prefs: []
  type: TYPE_NORMAL
- en: There are some cases, however, where the native APIs are very useful and are
    the only available solution. For example, iOS supports certain connectivity features
    in the background, which are only possible with the native APIs.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Consuming REST services* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Updating data in the background* recipe in [Chapter 12](ch12.html "Chapter 12. Multitasking"),
    *Multitasking*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using WCF services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to consume WCF services with Xamarin.iOS.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The WCF service support is only available in business and enterprise licenses
    of Xamarin.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this project, we will need a running WCF service. A WCF service can be
    found in the code download of this chapter. To start the service, open a terminal
    and go to the project''s directory. Start the service by running the `start_wcfservice.sh`
    shell script, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: After the service is started, create a new **Single View Application** in Xamarin
    Studio and name it `WcfServiceApp`. A machine running on Windows will also be
    needed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the references to the `System.Runtime.Serialization` and `System.ServiceModel`
    namespaces of the project and their corresponding `using` directives in the `WcfServiceAppViewController.cs`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Xamarin.iOS does not provide full support for WCF services. To generate a proxy
    for the client, we will need to use the `slsvcutil` tool on a Windows machine.
    Run the following command in the command prompt under Windows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command will produce a C# source file named `service.cs`. Add this file
    to the Xamarin.iOS project. Replace the IP address in the following highlighted
    code with your own to make it work correctly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add a label and a button on the view of `WcfServiceAppViewController`. Add
    the following code in the `ViewDidLoad` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add the following method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the app on the simulator. Click on the button and watch the
    data returned from the service get populated in the label.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Xamarin.iOS relies on Mono Framework's support for WCF services, which is not
    complete. Although, the fact that WCF services can be used in iOS apps makes Xamarin.iOS
    more appealing to .NET developers.
  prefs: []
  type: TYPE_NORMAL
- en: However, there is no tool to create the client proxy on a Mac, and Xamarin Studio
    can not create a proper proxy either; so, we will need to have access to a Windows
    machine to do this with the Silverlight Service Model Proxy Generation Tool (`SLsvcUtil.exe`).
    The source file that this tool generates allows us to consume the WCF service
    in our project.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to use Silverlight Version 3.0 `slsvcutil` to create the client
    proxy.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from Mono Framework's support, there is another limitation, that is, the
    dynamic code generation is not allowed on iOS. This makes any code that relies
    on the `System.Reflection.Emit` namespace unusable. In fact, the `System.Reflection.Emit`
    namespace is not available at all in Xamarin.iOS.
  prefs: []
  type: TYPE_NORMAL
- en: After copying the produced file on Mac, we add it to the project, and we are
    ready to use the WCF service. The preceding highlighted code shows us how to instantiate
    the service object. Note that the default constructor of the service object cannot
    be used, as Xamarin.iOS does not support the `System.Configuration` namespace.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The actual communication occurs by calling the method''s asynchronous implementation
    after setting a handler to its corresponding completion event. Note that in this
    case, there is no alternative to using synchronous invocations or the `BeginInvoke`
    and `EndInvoke` pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The result returned from the service can be retrieved through the specified
    `EventArgs` derivative''s `Result` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When debugging a project that consumes WCF services, remember to set the address
    of the machine the service is running on, instead of localhost or 127.0.0.1\.
    This is because when we run the app on the device, the app will fail to connect
    to the service.
  prefs: []
  type: TYPE_NORMAL
- en: More information on Xamarin Studio's WCF support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is an option of adding a WCF web reference through Xamarin Studio in the
    **Add Web References** window shown in the *Consuming web services* recipe. However,
    it is not yet complete and the proxy it generates will not work.
  prefs: []
  type: TYPE_NORMAL
- en: WCF service creation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The object returned from the `WcfService` service and the actual service itself
    was created completely on a Mac as a Xamarin Studio project. As there is no WCF
    project template, the **Empty Project** template was used.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Consuming web services* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
