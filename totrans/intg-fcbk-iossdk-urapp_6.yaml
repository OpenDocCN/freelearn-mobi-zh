- en: Chapter 6. Facebook Graph API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we are going to dig into the Facebook Graph API.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to access the Facebook iOS SDK API reference, visit [https://developers.facebook.com/docs/reference/api/](https://developers.facebook.com/docs/reference/api/).
  prefs: []
  type: TYPE_NORMAL
- en: The new **API**s (**Application Programming Interface**) were developed by Facebook
    engineers to replace the old **REST** (**Representational State Transfer**) web
    services. Graph API is the main tool to fetch and store data within the Social
    Graph. It is based on low-level HTTP verbs (GET, POST, PUT, and so on). Facebook
    SDKs are also based on Graph API.
  prefs: []
  type: TYPE_NORMAL
- en: Available features through Graph API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Graph API, we have access to all the information on the Social Graph having
    the necessary permissions. It is important to understand that some of Facebook's
    APIs have usage limits to prevent abuse, for example, downloading a picture.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we read data from the core graph structure, we have the following features
    available:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pictures**: These are profile pictures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Selecting Results**: Using filters, it is possible to control which fields
    are included in the response.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pagination**: It is the ability to define a limit for the response data.
    This is really useful, for instance, when we try to download user timeline information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Search**: It gives the ability to search; however, the request needs to define
    a search query and an object type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Permissions and Login protocols**: These are necessary to use the Graph API
    in order to access sensitive data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Graph APIs provide the ability to publish and delete information from a user's
    timeline. We can also interact with events by providing **RSVP**s, creating albums,
    writing notes, and referencing links.
  prefs: []
  type: TYPE_NORMAL
- en: An important feature of the Graph API is the ability to receive real-time updates.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developers.facebook.com/docs/reference/api/realtime/](https://developers.facebook.com/docs/reference/api/realtime/)'
  prefs: []
  type: TYPE_NORMAL
- en: When the application subscribes for updates for a specific object, we will need
    to define a callback URL. The Facebook Platform will call that URL whenever there
    is a change in the subscripted object.
  prefs: []
  type: TYPE_NORMAL
- en: Graph API Explorer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The best way to learn how to use the Graph API is through the Graph Explorer
    Graph API Explorer is a debug tool that helps developers understand how to use
    the Graph API by simulating Graph API calls.
  prefs: []
  type: TYPE_NORMAL
- en: In order to access the Explorer tool, visit [https://developers.facebook.com/tools/explorer](https://developers.facebook.com/tools/explorer).
  prefs: []
  type: TYPE_NORMAL
- en: 'The first time we access Graph Explorer, the debugging tool will show our Facebook
    account **id** and **name**. The following screenshot shows the Graph API Explorer
    interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/WUktk3F6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Facebook dynamically provides the access token, and it will let us access private
    data. We can input our own query and see the results in the panel underneath the
    query input field. The bar to the left provides data filtering of responses; we
    can decide which fields need to be displayed in our query response.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Zn2sTSjv.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There is a long list of functionalities provided by the Explorer tool, and I
    strongly recommend taking a look at them since they will not be covered in this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Graph API with Facebook iOS SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to use Graph APIs in our social application, we are going to use a
    component called `FBRequestConnection`.
  prefs: []
  type: TYPE_NORMAL
- en: The previous class has convenient methods to perform Graph API calls and handles
    responses flawlessly, as it will create a single HTTP connection with the social
    platform. `FBRequestConnection` works only if the current `FBSession` is open
    and has a valid token.
  prefs: []
  type: TYPE_NORMAL
- en: 'The duties of `FBRequestConnection` are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the correct URI for your Graph API request and appending the correct
    URN to the base Graph Facebook URL ([http://graph.facebook.com/](http://graph.facebook.com/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetching the current active `FBSession`, extracting the security token associated,
    and attaching the security token to the Graph API request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling connection start/end/canceling and batch requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `FBRequestConnection`, we have several methods to perform the Graph API
    Request. All methods to perform such requests need `FBRequestHandler` as the input
    parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following Graph API methods are available for our convenience:'
  prefs: []
  type: TYPE_NORMAL
- en: '`+ (FBRequestConnection *)startForMeWithComplentionHandler` (`FBRequestHandler`)handler:
    It performs a request for user information (`/me`). It uses an active session
    fetched through `FBSession activeSession`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`+ (FBRequestConnection *)startForMyFriendWithComplentionHandler` (`FBRequestHandler`)handler:
    It performs a request for a user''s friends (`/me/friends`). An active session
    is needed for this.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`+ (FBRequestConnection *) startForPlacesSearchAtCoordinate:(CLLocationCoordinate2D)coordinate
    radiusInMeters:(NSInteger)radius resultsLimit:(NSInteger)limit searchText:(NSString*)searchText
    completionHandler` (`FBRequestHandler`)handler: It returns places that match the
    `searchText` string in a certain area defined by coordinates and a radius. We
    need to define a limit for the number of results we are getting back from this
    request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`+ (FBRequestConnection*)startForPostStatusUpdate:(NSString *)message completionHandler`
    (`FBRequestHandler`)handler: It performs a request to post a status update on
    the user''s timeline.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`+ (FBRequestConnection*)startForUploadPhoto:(UIImage *)photo completionHandler`
    (`FBRequestHandler`)handler: It performs a post request to upload a photo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Every time we try to perform a Graph API request, we use the Graph API Explorer
    tool to check the response.
  prefs: []
  type: TYPE_NORMAL
- en: In the next sections, we are going to use some of the `FBRequestConnection`
    methods to build and execute Graph API requests.
  prefs: []
  type: TYPE_NORMAL
- en: The next samples are not directly connected with the application we built so
    far; therefore, they can easily be re-used on a different project.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching user information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Chapter 4, *Displaying User Profile*, we used the `FBLoginView` delegate
    method to fetch and display user information. `FBLoginView` took care of fetching
    that information for us using the Graph API.
  prefs: []
  type: TYPE_NORMAL
- en: '`FBRequestConnection` allows us to fetch user profile information independently
    from `FBLoginView`, for example, a custom user interface and login flow.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The previous code shows the implementation of `startForMeWithComplentionHandler`.
    The request handler will check whether there were any errors. If no errors exist,
    the handler will display the user profile information using the result variable
    on the log interface. The object in the result variable is an `id&lt;FBGraphUser&gt;`
    object.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information on `FBGraphUser`, visit
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developers.facebook.com/docs/reference/ios/3.6/protocol/FBGraphUser/](https://developers.facebook.com/docs/reference/ios/3.6/protocol/FBGraphUser/).'
  prefs: []
  type: TYPE_NORMAL
- en: Fetching a user's friends
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Chapter 4, *Displaying User Profile*, we created a view controller to display
    a user's friends list. Now, let's consider the case where a table view is not
    the type of interaction we are looking for. We may need to customize our interface,
    and fetch the user's friend list information straight from the Facebook Platform.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The previous code shows one example of `startForMyFriendWithComplentionHandler`
    in action. The preceding code makes a request to the platform. In this case, the
    result we expect is `id&lt;FBGraphUser&gt;` containing the user's friends list.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching a user's photos
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Fetching a user''s photos requires permission to access this data. We first
    need to implement a user request for permission; if this goes through, we can
    fetch the user''s photos:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The previous snippet shows how to perform a request for the user to access photo
    information. If the permission is already present in `FBSession`, we can perform
    the Graph API request; otherwise, we have to wait until the user gives us the
    permission.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: To fetch a user's photos, we can use the `startWithGraphPath` method. This method
    allows us to customize our Graph API request passing the URN as an input parameter,
    for example, `/me/photos`. The resulted URI will be [graph.facebook.com/me/photos](http://graph.facebook.com/me/photos).
  prefs: []
  type: TYPE_NORMAL
- en: The result variable is a `FBGraphObject` type containing the list of pictures
    for the current user.
  prefs: []
  type: TYPE_NORMAL
- en: Posting status updates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To perform any post operations, we explicitly need the user's permission. Posting
    a status update through Graph API firstly requires us to ask for the correct permission
    and, once this is granted, to execute the request on the Facebook Platform.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the post update permission is granted, we can run the `postStatusUpdate`
    code. The following snippet shows the code to post a new status update on the
    user''s timeline:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The result of posting a new timeline update is the new post ID.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/KHFfOs8h.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Posting a new photo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Posting a new photo requires the `photo_upload` permission. The following code
    shows how to ask for the upload photo permission and perform the request on the
    Platform.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'When the photo upload permission is granted, we can perform the Graph API request
    using the `postPhoto` method. The following code is to upload a photo using the
    Graph API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code uses an image from an iOS project; however, we can fetch
    an image from any source, for example, a camera or a library. The result of the
    request is the picture ID on the Facebook Platform.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ciawwZd5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we focus on the most important part of the Facebook iOS SDK,
    the Graph APIs. We learned how to use those APIs to communicate with the platform.
    The Graph API methods give us the flexibility to build our own GUI if we don't
    like the one provided by native or web components.
  prefs: []
  type: TYPE_NORMAL
- en: The Graph API Explorer is the tool that we should always use before implementing
    any communication with the platform. It will help us understand the request and
    response format of our communication with the social network.
  prefs: []
  type: TYPE_NORMAL
- en: Using the native components, we are limited to a subset of features provided
    by the Graph API. Graph API is the most powerful and flexible tool we can use
    to interact with the Platform and for fetching users and their friends' information.
  prefs: []
  type: TYPE_NORMAL
