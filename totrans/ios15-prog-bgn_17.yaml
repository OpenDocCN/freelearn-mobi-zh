- en: '*Chapter 14*: Getting Data into Collection Views'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned about the Model-View-Controller (MVC) design
    pattern and about collection views. You've also revisited the **Explore** and
    **Restaurant List** screens, and you have seen how the collection views in both
    screens work. At this point, though, both screens just display cells that do not
    contain any data. As shown in the app tour in [*Chapter 9*](B17469_09_Final_VK_ePub.xhtml#_idTextAnchor133)*,
    Setting Up the User Interface*, the **Explore** screen should display a list of
    cuisines, and the **Restaurant List** screen should display a list of restaurants.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you're going to implement the model objects for the **Explore**
    screen to make it display a list of cuisines. You'll start by learning about model
    objects that you will use. Next, you'll learn about property lists, and see how
    they are used to store cuisine data, and you'll create a Swift structure that
    can store cuisine instances. After that, you'll create a data manager class that
    reads data from the property list and populates an array of structures. This array
    of structures will then be used as the data source for the collection view in
    the **Explore** screen.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you'll have learned how property lists are used
    to store data, how to create model objects, how to create a data manager class
    that can load data from a property list into an array of model objects, how to
    configure view controllers to provide model objects to collection view, and how
    to configure collection views to display data on screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding model objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding `.plist` files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a structure to represent a cuisine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a data manager class to read data from a `.plist` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying data in a collection view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will continue working on the `LetsEat` project that you modified in [*Chapter
    12*](B17469_12_Final_VK_ePub.xhtml#_idTextAnchor182)*, Modifying and Configuring
    Cells*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The resource files and completed Xcode project for this chapter are in the
    `Chapter14` folder of the code bundle for this book, which can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://bit.ly/3mWQ8sJ](https://bit.ly/3mWQ8sJ)'
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by looking at the different model objects that are required to hold
    the initial data, load the data into the app, and store the data within the app.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding model objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you learned in [*Chapter 13*](B17469_13_Final_VK_ePub.xhtml#_idTextAnchor194)*,
    Getting Started with MVC and Collection Views*, a common design pattern for iOS
    apps is Model-View-Controller, or MVC. To recap, MVC divides an app into three
    different parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Model**: This handles data storage, representation, and data processing tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View**: This is anything on the screen that the user can interact with.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Controller**: This manages the flow of information between model and view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s revisit the design of the **Explore** screen that you saw during the
    app tour, which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.1: iOS Simulator showing the Explore screen from the app tour'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.01_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.1: iOS Simulator showing the Explore screen from the app tour'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app, and the **Explore** screen will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.2: iOS Simulator showing the Explore screen from your app'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.02_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.2: iOS Simulator showing the Explore screen from your app'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, all of the cells are currently empty. Based on the MVC design
    pattern, you have completed the implementation of the views (collection view section
    header and collection view) and the controller (the `ExploreViewController` class).
    Now, you will add model objects that will provide the data to be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: First, you'll add a property list, `ExploreData.plist`, to your project, which
    contains the name and the image filename for each cuisine. The cuisine images
    themselves are already present in your `Assets.xcassets` folder. Next, you'll
    create a model object, `ExploreItem`, which will be a structure with two properties.
    One property will be used to store cuisine names, and the other will be used to
    store image filenames. After that, you will create a data manager class, `ExploreDataManager`,
    which will load the data from `ExploreData.plist`, put it into an array of `ExploreItem`
    instances and provide the array to the `ExploreViewController` instance. Finally,
    you will modify the `ExploreViewController` class so it can provide data for the
    collection view to display.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about property list files, let's add `ExploreData.plist` to your
    project now and see how it stores cuisine data.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding .plist files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apple developed property lists to store data structures or object states for
    later reconstitution and transmission. They are commonly used to store preferences
    for applications. Property list files use the `.plist` filename extension, and
    hence are often referred to as `.plist` files. You will be using a `.plist` file
    containing cuisine data, `ExploreData.plist`, in your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need to download the code bundle for this book to get the `ExploreData.plist`
    file. After that, you can use Xcode to view its contents. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have not yet done so, download the resource files and completed Xcode
    project for this from this link: [https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `Chapter14` folder and look inside the `resources` folder to find `ExploreData.plist`.
    This file stores cuisine names and image filenames.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `LetsEat` project, right-click on the `Explore` folder in the Project
    navigator, and choose **New Group**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the new group that you just added `Model`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag `ExploreData.plist` into this group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure **Copy items if needed** is ticked and click **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you click on `ExploreData.plist` in the Project navigator, you''ll see
    an array that contains dictionaries, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.3: Editor area showing contents of ExploreData.plist'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.03_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.3: Editor area showing contents of ExploreData.plist'
  prefs: []
  type: TYPE_NORMAL
- en: Each dictionary has two elements. The first element has a key, `name`, and a
    value describing a type of cuisine. The second element has a key, `image`, and
    a value containing the filename of a cuisine image. All of the cuisine images
    are stored in the `Assets.xcassets` file in your project.
  prefs: []
  type: TYPE_NORMAL
- en: To use the data contained in `ExploreData.plist`, you'll need to create a structure
    to hold it in the app so it can be accessed later by the `ExploreViewController`
    instance. You will create it in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a structure to represent a cuisine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a model object that can represent a cuisine in your app, you will
    add a new file to your project, `ExploreItem`, and declare an `ExploreItem` structure
    that has properties for a cuisine''s name and image. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `Model` folder and select **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Swift File**, then click **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the file `ExploreItem` and then click `import` statement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important Information
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `import` statement allows you to import other code libraries into your
    project, giving you the ability to use classes, properties, and methods from them.
    `Foundation` is one of Apple''s core frameworks, and you can learn more about
    it here: [https://developer.apple.com/documentation/foundation](https://developer.apple.com/documentation/foundation).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following code to the file to declare a structure named `ExploreItem`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code before the last curly brace to add two optional `String`
    properties to the `ExploreItem` structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Structures automatically get a default initializer. You can create an instance
    of `ExploreItem` by using the following statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'However, the name and image filename in `ExploreData.plist` are stored as dictionary
    elements, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`["name": "All", "image": "all.png"]`'
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: Dictionaries are covered in [*Chapter 5*](B17469_05_Final_VK_ePub.xhtml#_idTextAnchor066),
    *Collection Types*.
  prefs: []
  type: TYPE_NORMAL
- en: You'll create a custom initializer that takes a dictionary as a parameter and
    assigns the values obtained from the dictionary elements to the properties in
    an `ExploreItem` instance. You'll use an extension to add this custom initializer
    to the `ExploreItem` structure.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: Extensions are covered in [*Chapter 8*](B17469_08_Final_VK_ePub.xhtml#_idTextAnchor123),
    *Protocols, Extensions, and Error Handling*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type the following after the `ExploreItem` structure declaration to add an
    extension:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You'll use this extension to add the initializer method to the `ExploreItem`
    structure.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following between the curly braces of the extension to declare a custom
    initializer method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Ignore the error that appears, as you will fix it shortly. This initializer
    takes a dictionary as an argument. Note that both key and value are strings.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following between the curly braces of the initializer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This assigns the value of the dictionary item with the key `"name"` to the `name`
    property, and the value of the dictionary item with the key `"image"` to the `image`
    property.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The completed extension should look as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: At this point, you have a structure, `ExploreItem`, with two `String` properties,
    `name` and `image`. When you create an instance of this structure, you will pass
    in a dictionary containing elements with keys and values of type `String`. The
    value for the `name` key will be assigned to the `name` property, and the value
    of the `image` key will be assigned to the `image` property.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the next section, you'll implement a data manager class. This will read the
    array of dictionaries from the `ExploreData.plist` file and assign the values
    of the dictionary elements to `ExploreItem` instances.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a data manager class to read data from a .plist file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You have added a `.plist` file, `ExploreData.plist`, to your project containing
    the cuisine data, and you have created a structure, `ExploreItem`, that can store
    details of each cuisine. Now, you need to create a new class, `ExploreDataManager`,
    that can read the data in the `.plist` file and store it in an array of `ExploreItem`
    instances. You''ll refer to this class as a data manager class. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the **Model** folder and select **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Swift File**, then click **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the file `ExploreDataManager` and then click **Create** to display its
    contents in the Editor area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following code in the file to declare the `ExploreDataManager` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Type in the following code between the curly braces. This implements a method,
    `loadData()`, which will read the contents of the `ExploreData.plist` file and
    return an array of dictionaries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s break this method down:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `private` keyword means that the method may only be used within this class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `loadData()` method declaration has no arguments and returns an array of
    dictionaries, and each dictionary contains elements with keys and values of type
    `String`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This statement creates an instance of a property list decoder that will be used
    to decode the data in the `ExploreData.plist` file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When you build your app, the result is a folder with all of the app resources
    inside it, called the application bundle. `ExploreData.plist` is inside this bundle.
    This statement attempts to get the path to the `ExploreData.plist` file and assign
    it to a constant, `path`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This statement attempts to get the `ExploreData.plist` file stored at `path`
    and assign it to a constant, `exploreData`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you click `ExploreData.plist` in your project, note that the root level
    object is an array, and each item in the array is a dictionary, as shown:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 14.4: Editor area showing arrays and dictionaries in ExploreData.plist'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.04_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.4: Editor area showing arrays and dictionaries in ExploreData.plist'
  prefs: []
  type: TYPE_NORMAL
- en: 'This statement attempts to create an array from the contents of the `ExploreData.plist`
    file and assign it to a constant, `exploreItems`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'If the optional binding is successful, this statement returns `exploreItems`
    as an array of dictionaries, and each dictionary is of the `[String: String]`
    type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: If the optional binding is unsuccessful, an empty array of dictionaries is returned.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you have a data manager class, `ExploreDataManager`, containing
    a method that loads data from the `ExploreData.plist` file and assigns it to an
    array, `exploreItems`. In the next section, you will look at how to use the dictionaries
    inside this array to initialize `ExploreItem` instances, which will eventually
    be passed to the `ExploreViewController` instance managing the **Explore** screen.
  prefs: []
  type: TYPE_NORMAL
- en: Using the data manager to initialize ExploreItem instances
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At present, you have a data manager class, `ExploreDataManager`. This class
    contains a method, `loadData()`, which reads data from `ExploreData.plist` and
    returns an array of dictionaries. You''ll add a method that creates and initializes
    `ExploreItem` instances with the dictionaries in that array. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `ExploreDataManager` class definition, add the following code before
    the `loadData()` method to implement a `fetch()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method will call `loadData()`, which returns an array of dictionaries.
    The `for` loop is then used to print the contents of each dictionary in the array
    to the Debug area to ensure that the `ExploreData.plist` file has been read successfully.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the `ExploreViewController` file in the Project navigator. Add the following
    code to the `viewDidLoad()` method. This creates an `ExploreDataManager` instance
    and calls its `fetch()` method when the `ExploreViewController` instance loads
    its view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click on the `ExploreDataManager` file. Add a property declaration to store
    an array of `ExploreItem` instances just before the `fetch()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This adds a property, `exploreItems`, to the `ExploreDataManager` class and
    assigns an empty array to it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Inside the `fetch()` method, replace the `print()` statement with the following
    statement that initializes `ExploreItem` instances and appends them to the `exploreItems`
    array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The custom initializer in the `ExploreItem` class assigns the `name` and `image`
    strings in each dictionary read from `ExploreData.plist` to the `name` and `image`
    properties of an `ExploreData` instance.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Verify that the `ExploreDataManager` file''s contents looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: At this point, you have an `ExploreDataManager` class that reads data from `ExploreData.plist`
    and stores it in `exploreItems`, an array of `ExploreItem` instances. This array
    will be the data source for the collection view managed by the `ExploreViewController`
    instance. The cuisine information it contains will eventually be displayed in
    the **Explore** screen.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying data in a collection view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You've implemented a data manager class, `ExploreDataManager`, that reads cuisine
    data from the `ExploreData.plist` file and stores it in an array of `ExploreItem`
    instances. Now, you will modify the `ExploreViewController` class to use that
    array as the data source for the collection view in the **Explore** screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'At present, the collection view in the `ExploreCell`, for this purpose. You
    can then configure the view controller for the collection view, `ExploreViewController`,
    to get cuisine details from the `ExploreDataManager` instance and provide it to
    the collection view for display. To create `ExploreCell`, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `Explore` folder in the Project navigator and choose **New
    Group**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the new group `View`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `View` folder and select **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class**, then click
    **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure the class as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ExploreCell`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`UICollectionViewCell`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Unchecked`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Swift`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Next**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A new file, `ExploreCell`, will be added to your project. Inside it you will
    see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important Information
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`UIKit` provides the infrastructure required for iOS apps. You can read more
    about it here: [https://developer.apple.com/documentation/uikit](https://developer.apple.com/documentation/uikit).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You''ll now assign the `ExploreCell` class as the identity of the `exploreCell`
    collection view cell. Click the `Main` storyboard file in the Project navigator
    and click `exploreCell` inside the **Explore View Controller Scene** in the document
    outline. Click the Identity inspector button:![Figure 14.6: Identity inspector
    selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_14.06_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 14.6: Identity inspector selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Under the `ExploreCell`. This sets an `ExploreCell` instance as the manager
    for `exploreCell`. Press *Return* when done:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.7: Identity inspector showing Class settings for exploreCell'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.07_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.7: Identity inspector showing Class settings for exploreCell'
  prefs: []
  type: TYPE_NORMAL
- en: You've just declared and defined the `ExploreCell` class, and assigned it as
    the manager for the `exploreCell` collection view cell. Now, you'll create outlets
    in this class that will be connected to the image view and the label in the `exploreCell`
    collection view cell, so you can control what they display.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the outlets in exploreCell
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To manage what is being displayed by the collection view cells in the `exploreCell`
    collection view cell to outlets in the `ExploreCell` class. You"ll use the assistant
    editor for this. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the Navigator and Inspector buttons to hide the Navigator and Inspector
    areas. This will give you more room to work:![Figure 14.8: Toolbar showing Navigator
    and Inspector buttons'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_14.08_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 14.8: Toolbar showing Navigator and Inspector buttons'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the Adjust Editor Options button to display a menu:![Figure 14.9: Adjust
    Editor Options button'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_14.09_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 14.9: Adjust Editor Options button'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Choose **Assistant** from the menu to display the assistant editor:![Figure
    14.10: Adjust Editor Options menu with Assistant selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_14.10_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 14.10: Adjust Editor Options menu with Assistant selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To create the outlets for the `ExploreCell` class, the assistant editor path
    should be set to `Automatic | ExploreCell.swift`. If you don''t see `ExploreCell.swift`
    in the path, select the `exploreCell` collection view cell''s `ExploreCell.swift`
    from the assistant editor''s path drop-down menu:![Figure 14.11: Assistant editor
    bar showing ExploreCell.swift'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_14.11_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 14.11: Assistant editor bar showing ExploreCell.swift'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Ctrl + Drag* from the **Label** element in the collection view cell to the
    space between the curly braces as shown. This creates an outlet for it:![Figure
    14.12: Editor area showing ExploreCell.swift'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_14.12_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 14.12: Editor area showing ExploreCell.swift'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the pop-up dialog, enter `exploreNameLabel` in the **Name** field to set
    the outlet''s name:![Figure 14.13: Pop-up dialog box for exploreNameLabel outlet
    creation'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_14.13_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 14.13: Pop-up dialog box for exploreNameLabel outlet creation'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Ctrl + Drag* from the `exploreNameLabel` property. This creates an outlet
    for it:![Figure 14.14: Editor area showing ExploreCell.swift'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_14.14_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 14.14: Editor area showing ExploreCell.swift'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the pop-up dialog, enter `exploreImageView` in the **Name** field to set
    the outlet''s name:![Figure 14.15: Pop-up dialog box for exploreImageView outlet
    creation'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_14.15_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 14.15: Pop-up dialog box for exploreImageView outlet creation'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `exploreNameLabel` and `exploreImageView` outlets have been added to the
    `ExploreCell` class and connected to the `exploreCell` collection view cell''s
    image view and label elements, as shown:![Figure 14.16: Editor area showing exploreNameLabel
    and exploreImageView outlets'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_14.16_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 14.16: Editor area showing exploreNameLabel and exploreImageView outlets'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the **x** button to close the assistant editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.17: Assistant editor close button'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.17_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.17: Assistant editor close button'
  prefs: []
  type: TYPE_NORMAL
- en: The `exploreCell` collection view cell in the `Main` storyboard file has now
    been set up with a class, `ExploreCell`. The outlets for the collection view cell's
    image view and label have also been created and assigned. Now, you can set the
    `exploreNameLabel` and `exploreImageView` outlets in the `ExploreCell` instance
    to display a cuisine image and name in each cell when the app is run.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You can check whether the outlets are connected properly in the Connections
    inspector.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will add code to `ExploreDataManager` to provide the
    number of cells to be displayed by `collectionView`, and provide an `ExploreItem`
    instance whose properties will be used to determine what image and label the cell
    will display.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing additional data manager methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you learned in [*Chapter 13*](B17469_13_Final_VK_ePub.xhtml#_idTextAnchor194)*,
    Getting Started with MVC and Collection Views*, a collection view needs to know
    how many cells to display and what to put in each cell. You will add two methods
    to the `ExploreDataManager` class that will provide the number of `ExploreItem`
    instances in the `exploreItems` array and return an `ExploreItem` instance at
    a specified array index. Click the `ExploreDataManager` file in the Project navigator
    and add these two methods after the `loadData()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The first method, `numberOfExploreItems()`, will determine the number of cells
    to be displayed by the collection view.
  prefs: []
  type: TYPE_NORMAL
- en: The second method, `exploreItem(at:)`, will return an `ExploreItem` instance
    that corresponds to a cell's position in the collection view.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you'll update the collection view data source methods in
    the `ExploreViewController` class to provide the number of cells to be displayed
    in the collection view, and to provide the cuisine name and image for each cell.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the data source methods in ExploreViewController
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The data source methods in the `ExploreViewController` class are currently
    set to display 20 cells, each cell containing an empty image view and label. You''ll
    update them to get the number of cells to display, and the data to put in each
    cell, from the `ExploreDataManager` instance. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `ExploreViewController` file and find the `viewDidLoad()` method.
    It should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This means the `ExploreDataManager` instance is only accessible within the `viewDidLoad()`
    method. You need to make it available to the entire class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Move the `let manager = ExploreDataManager()` line to just after the `collectionView`
    property declaration to make the `ExploreDataManager` instance available to all
    methods within the `ExploreViewController` class, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update `collectionView(_:numberOfItemsInSection:)` as shown. This will make
    the collection view display a cell for each element in the `items` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update `collectionView(_:cellForItemAt:)` as shown to set the image view and
    label for each cell using data from the corresponding element in the `items` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'let exploreItem = manager.exploreItem(at:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: indexPath.row)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: cell.exploreNameLabel.text = exploreItem.name
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'cell.exploreImageView.image = UIImage(named:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: exploreItem.image!)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build and run the app. You''ll see the collection view in the **Explore** screen
    display images and text of different cuisines. Tapping a collection view cell
    will display the **Restaurant List** screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.18: iOS Simulator showing Explore and Restaurant List screens'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.18_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.18: iOS Simulator showing Explore and Restaurant List screens'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, the `ExploreData.plist` file. In [*Chapter 17*](B17469_17_Final_VK_ePub.xhtml#_idTextAnchor248),
    *Getting Started with JSON Files*, you will modify the `RestaurantListViewController`
    class to make the **Restaurant List** screen display a list of restaurants offering
    the selected cuisine. But before you can do that, you'll need to set a location
    in the **Locations** screen, which will provide a list of all available restaurants
    at that location. This will be covered in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you added a property list file, `ExploreData.plist`, to your
    project. You implemented the `ExploreItem` structure, the model objects for the
    `ExploreDataManager`, to read data from `ExploreData.plist`, put the data into
    an array of `ExploreItem` instances, and provide it to `ExploreViewController`.
    You created a class for the `exploreCell` collection view cell. Finally, you configured
    the data source methods in the `ExploreViewController` class to use data from
    the array of `ExploreItem` instances to populate the collection view, and the
    **Explore** screen now displays a list of cuisines. Great job!
  prefs: []
  type: TYPE_NORMAL
- en: You now know how to provide data to an app using `.plist` files, create model
    objects, create data manager classes that load `.plist` files into model objects,
    configure collection views to display data that has been loaded, and configure
    view controllers for collection views. This will be useful should you wish to
    create your own apps that use collection views.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will look at table views, which are similar in some
    ways to collection views, and configure the **Locations** screen to display a
    list of locations in a table view when you tap the **LOCATION** button in the
    **Explore** screen.
  prefs: []
  type: TYPE_NORMAL
