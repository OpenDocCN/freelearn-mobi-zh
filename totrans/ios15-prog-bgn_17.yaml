- en: '*Chapter 14*: Getting Data into Collection Views'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第14章*：将数据放入集合视图'
- en: In the previous chapter, you learned about the Model-View-Controller (MVC) design
    pattern and about collection views. You've also revisited the **Explore** and
    **Restaurant List** screens, and you have seen how the collection views in both
    screens work. At this point, though, both screens just display cells that do not
    contain any data. As shown in the app tour in [*Chapter 9*](B17469_09_Final_VK_ePub.xhtml#_idTextAnchor133)*,
    Setting Up the User Interface*, the **Explore** screen should display a list of
    cuisines, and the **Restaurant List** screen should display a list of restaurants.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了模型-视图-控制器（MVC）设计模式和集合视图。你还回顾了**探索**和**餐厅列表**屏幕，并看到了这两个屏幕中的集合视图是如何工作的。然而，到目前为止，这两个屏幕只是显示不包含任何数据的单元格。如[*第9章*](B17469_09_Final_VK_ePub.xhtml#_idTextAnchor133)“设置用户界面”中的应用程序导游所示，**探索**屏幕应显示一系列菜系，而**餐厅列表**屏幕应显示一系列餐厅。
- en: In this chapter, you're going to implement the model objects for the **Explore**
    screen to make it display a list of cuisines. You'll start by learning about model
    objects that you will use. Next, you'll learn about property lists, and see how
    they are used to store cuisine data, and you'll create a Swift structure that
    can store cuisine instances. After that, you'll create a data manager class that
    reads data from the property list and populates an array of structures. This array
    of structures will then be used as the data source for the collection view in
    the **Explore** screen.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将实现用于**探索**屏幕的模型对象，使其显示一系列菜系。你将从学习你将使用的模型对象开始。接下来，你将学习属性列表，并了解它们如何用于存储菜系数据，你还将创建一个Swift结构，可以存储菜系实例。之后，你将创建一个数据管理类，从属性列表中读取数据并填充结构数组。这个结构数组然后将作为**探索**屏幕中集合视图的数据源。
- en: By the end of this chapter, you'll have learned how property lists are used
    to store data, how to create model objects, how to create a data manager class
    that can load data from a property list into an array of model objects, how to
    configure view controllers to provide model objects to collection view, and how
    to configure collection views to display data on screen.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将学习如何使用属性列表存储数据，如何创建模型对象，如何创建一个可以从属性列表中加载数据到模型对象数组的数据库管理类，如何配置视图控制器以向集合视图提供模型对象，以及如何配置集合视图以在屏幕上显示数据。
- en: 'The following topics will be covered:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下内容将涵盖：
- en: Understanding model objects
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解模型对象
- en: Understanding `.plist` files
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解`.plist`文件
- en: Creating a structure to represent a cuisine
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个表示菜系的结构
- en: Implementing a data manager class to read data from a `.plist` file
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现一个数据管理类以从`.plist`文件中读取数据
- en: Displaying data in a collection view
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在集合视图中显示数据
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will continue working on the `LetsEat` project that you modified in [*Chapter
    12*](B17469_12_Final_VK_ePub.xhtml#_idTextAnchor182)*, Modifying and Configuring
    Cells*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你将继续在[*第12章*](B17469_12_Final_VK_ePub.xhtml#_idTextAnchor182)“修改和配置单元格”中修改的`LetsEat`项目上工作。
- en: 'The resource files and completed Xcode project for this chapter are in the
    `Chapter14` folder of the code bundle for this book, which can be downloaded here:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的资源文件和完成的Xcode项目位于本书代码包的`Chapter14`文件夹中，可以在此处下载：
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际效果：
- en: '[https://bit.ly/3mWQ8sJ](https://bit.ly/3mWQ8sJ)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bit.ly/3mWQ8sJ](https://bit.ly/3mWQ8sJ)'
- en: Let's start by looking at the different model objects that are required to hold
    the initial data, load the data into the app, and store the data within the app.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从查看所需的不同模型对象开始，这些模型对象用于存储初始数据，将数据加载到应用程序中，并在应用程序内存储数据。
- en: Understanding model objects
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解模型对象
- en: 'As you learned in [*Chapter 13*](B17469_13_Final_VK_ePub.xhtml#_idTextAnchor194)*,
    Getting Started with MVC and Collection Views*, a common design pattern for iOS
    apps is Model-View-Controller, or MVC. To recap, MVC divides an app into three
    different parts:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在[*第13章*](B17469_13_Final_VK_ePub.xhtml#_idTextAnchor194)“开始使用MVC和集合视图”中学到的，iOS应用程序的一个常见设计模式是模型-视图-控制器，或MVC。为了回顾，MVC将应用程序分为三个不同的部分：
- en: '**Model**: This handles data storage, representation, and data processing tasks.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型**：这处理数据存储、表示和数据处理任务。'
- en: '**View**: This is anything on the screen that the user can interact with.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**：这是用户可以与之交互的屏幕上的任何内容。'
- en: '**Controller**: This manages the flow of information between model and view.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器**：这管理着模型和视图之间信息流的流程。'
- en: 'Let''s revisit the design of the **Explore** screen that you saw during the
    app tour, which looks like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下在应用导览中看到的 **探索** 屏幕的设计，它看起来像这样：
- en: '![Figure 14.1: iOS Simulator showing the Explore screen from the app tour'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.1：iOS 模拟器显示应用导览中的探索屏幕'
- en: '](img/Figure_14.01_B17469.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_14.01_B17469.jpg)'
- en: 'Figure 14.1: iOS Simulator showing the Explore screen from the app tour'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.1：iOS 模拟器显示应用导览中的探索屏幕
- en: 'Build and run your app, and the **Explore** screen will look like this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行您的应用，**探索**屏幕将看起来像这样：
- en: '![Figure 14.2: iOS Simulator showing the Explore screen from your app'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.2：iOS 模拟器显示您的应用中的探索屏幕'
- en: '](img/Figure_14.02_B17469.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_14.02_B17469.jpg)'
- en: 'Figure 14.2: iOS Simulator showing the Explore screen from your app'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.2：iOS 模拟器显示您的应用中的探索屏幕
- en: As you can see, all of the cells are currently empty. Based on the MVC design
    pattern, you have completed the implementation of the views (collection view section
    header and collection view) and the controller (the `ExploreViewController` class).
    Now, you will add model objects that will provide the data to be displayed.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，所有的单元格目前都是空的。根据 MVC 设计模式，您已经完成了视图（集合视图部分标题和集合视图）和控制器（`ExploreViewController`
    类）的实现。现在，您将添加模型对象，这些对象将提供要显示的数据。
- en: First, you'll add a property list, `ExploreData.plist`, to your project, which
    contains the name and the image filename for each cuisine. The cuisine images
    themselves are already present in your `Assets.xcassets` folder. Next, you'll
    create a model object, `ExploreItem`, which will be a structure with two properties.
    One property will be used to store cuisine names, and the other will be used to
    store image filenames. After that, you will create a data manager class, `ExploreDataManager`,
    which will load the data from `ExploreData.plist`, put it into an array of `ExploreItem`
    instances and provide the array to the `ExploreViewController` instance. Finally,
    you will modify the `ExploreViewController` class so it can provide data for the
    collection view to display.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您将在项目中添加一个属性列表，`ExploreData.plist`，它包含每个菜谱的名称和图像文件名。菜谱图像本身已经存在于您的 `Assets.xcassets`
    文件夹中。接下来，您将创建一个模型对象，`ExploreItem`，它将是一个具有两个属性的构造型。一个属性将用于存储菜谱名称，另一个将用于存储图像文件名。之后，您将创建一个数据管理类，`ExploreDataManager`，它将从
    `ExploreData.plist` 加载数据，将其放入 `ExploreItem` 实例的数组中，并将数组提供给 `ExploreViewController`
    实例。最后，您将修改 `ExploreViewController` 类，使其能够为集合视图提供数据以显示。
- en: To learn more about property list files, let's add `ExploreData.plist` to your
    project now and see how it stores cuisine data.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于属性列表文件的信息，现在让我们将 `ExploreData.plist` 添加到您的项目中，看看它是如何存储菜谱数据的。
- en: Understanding .plist files
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 .plist 文件
- en: Apple developed property lists to store data structures or object states for
    later reconstitution and transmission. They are commonly used to store preferences
    for applications. Property list files use the `.plist` filename extension, and
    hence are often referred to as `.plist` files. You will be using a `.plist` file
    containing cuisine data, `ExploreData.plist`, in your project.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果开发了属性列表来存储数据结构或对象状态，以便稍后重新构成和传输。它们通常用于存储应用程序的首选项。属性列表文件使用 `.plist` 文件名扩展名，因此通常被称为
    `.plist` 文件。您将在项目中使用包含菜谱数据的 `.plist` 文件，`ExploreData.plist`。
- en: 'You will need to download the code bundle for this book to get the `ExploreData.plist`
    file. After that, you can use Xcode to view its contents. Follow these steps:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要下载此书的代码包以获取 `ExploreData.plist` 文件。之后，您可以使用 Xcode 来查看其内容。请按照以下步骤操作：
- en: 'If you have not yet done so, download the resource files and completed Xcode
    project for this from this link: [https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition).'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您还没有这样做，请从以下链接下载资源文件和此 Xcode 项目：[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)。
- en: Open the `Chapter14` folder and look inside the `resources` folder to find `ExploreData.plist`.
    This file stores cuisine names and image filenames.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Chapter14` 文件夹，然后查看 `resources` 文件夹以找到 `ExploreData.plist`。此文件存储菜谱名称和图像文件名。
- en: Open the `LetsEat` project, right-click on the `Explore` folder in the Project
    navigator, and choose **New Group**.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `LetsEat` 项目，在项目导航器中右键单击 `Explore` 文件夹，然后选择 **新建组**。
- en: Rename the new group that you just added `Model`.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您刚刚添加的新组重命名为 `Model`。
- en: Drag `ExploreData.plist` into this group.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `ExploreData.plist` 拖动到该组中。
- en: Make sure **Copy items if needed** is ticked and click **Finish**.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保已勾选 **如果需要则复制项目**，然后点击 **完成**。
- en: 'When you click on `ExploreData.plist` in the Project navigator, you''ll see
    an array that contains dictionaries, as shown:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在项目导航器中单击 `ExploreData.plist` 时，您将看到一个包含字典的数组，如下所示：
- en: '![Figure 14.3: Editor area showing contents of ExploreData.plist'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.3：编辑区域显示 ExploreData.plist 的内容'
- en: '](img/Figure_14.03_B17469.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_14.03_B17469.jpg)'
- en: 'Figure 14.3: Editor area showing contents of ExploreData.plist'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.3：编辑区域显示 ExploreData.plist 的内容
- en: Each dictionary has two elements. The first element has a key, `name`, and a
    value describing a type of cuisine. The second element has a key, `image`, and
    a value containing the filename of a cuisine image. All of the cuisine images
    are stored in the `Assets.xcassets` file in your project.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 每个字典都有两个元素。第一个元素有一个键 `name`，描述了一种菜系类型。第二个元素有一个键 `image`，包含一个菜系图像的文件名。所有菜系图像都存储在项目中的
    `Assets.xcassets` 文件中。
- en: To use the data contained in `ExploreData.plist`, you'll need to create a structure
    to hold it in the app so it can be accessed later by the `ExploreViewController`
    instance. You will create it in the next section.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 `ExploreData.plist` 中包含的数据，您需要在应用程序中创建一个结构来存储它，以便以后可以通过 `ExploreViewController`
    实例访问它。您将在下一节中创建它。
- en: Creating a structure to represent a cuisine
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个结构来表示一种菜系
- en: 'To create a model object that can represent a cuisine in your app, you will
    add a new file to your project, `ExploreItem`, and declare an `ExploreItem` structure
    that has properties for a cuisine''s name and image. Follow these steps:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个可以在您的应用程序中表示菜系的模型对象，您需要在项目中添加一个新文件 `ExploreItem`，并声明一个具有菜系名称和图像属性的 `ExploreItem`
    结构。按照以下步骤操作：
- en: Right-click on the `Model` folder and select **New File**.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 `Model` 文件夹，然后选择 **新建文件**。
- en: '**iOS** should already be selected. Choose **Swift File**, then click **Next**.'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS** 应已选中。选择 **Swift 文件**，然后点击 **下一步**。'
- en: Name the file `ExploreItem` and then click `import` statement.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件命名为 `ExploreItem`，然后点击 `import` 语句。
- en: Important Information
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要信息
- en: 'The `import` statement allows you to import other code libraries into your
    project, giving you the ability to use classes, properties, and methods from them.
    `Foundation` is one of Apple''s core frameworks, and you can learn more about
    it here: [https://developer.apple.com/documentation/foundation](https://developer.apple.com/documentation/foundation).'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`import` 语句允许您将其他代码库导入到项目中，从而让您能够使用它们中的类、属性和方法。`Foundation` 是 Apple 的核心框架之一，您可以在以下位置了解更多信息：[https://developer.apple.com/documentation/foundation](https://developer.apple.com/documentation/foundation)。'
- en: 'Add the following code to the file to declare a structure named `ExploreItem`:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到文件中，以声明一个名为 `ExploreItem` 的结构：
- en: '[PRE0]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the following code before the last curly brace to add two optional `String`
    properties to the `ExploreItem` structure:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在最后一个大括号之前添加以下代码，以向 `ExploreItem` 结构添加两个可选的 `String` 属性：
- en: '[PRE1]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Structures automatically get a default initializer. You can create an instance
    of `ExploreItem` by using the following statement:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 结构会自动获得默认初始化器。您可以通过以下语句创建 `ExploreItem` 的实例：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'However, the name and image filename in `ExploreData.plist` are stored as dictionary
    elements, as shown in the following example:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`ExploreData.plist` 中的名称和图像文件名存储为字典元素，如下例所示：
- en: '`["name": "All", "image": "all.png"]`'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`["name": "All", "image": "all.png"]`'
- en: Important Information
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: Dictionaries are covered in [*Chapter 5*](B17469_05_Final_VK_ePub.xhtml#_idTextAnchor066),
    *Collection Types*.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 字典在 [*第 5 章*](B17469_05_Final_VK_ePub.xhtml#_idTextAnchor066)，*集合类型* 中介绍。
- en: You'll create a custom initializer that takes a dictionary as a parameter and
    assigns the values obtained from the dictionary elements to the properties in
    an `ExploreItem` instance. You'll use an extension to add this custom initializer
    to the `ExploreItem` structure.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您将创建一个自定义初始化器，该初始化器接受一个字典作为参数，并将从字典元素中获取的值分配给 `ExploreItem` 实例中的属性。您将使用扩展来将此自定义初始化器添加到
    `ExploreItem` 结构中。
- en: Important Information
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: Extensions are covered in [*Chapter 8*](B17469_08_Final_VK_ePub.xhtml#_idTextAnchor123),
    *Protocols, Extensions, and Error Handling*.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展在 [*第 8 章*](B17469_08_Final_VK_ePub.xhtml#_idTextAnchor123)，*协议、扩展和错误处理* 中介绍。
- en: 'Follow these steps:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: 'Type the following after the `ExploreItem` structure declaration to add an
    extension:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ExploreItem` 结构声明之后输入以下内容以添加一个扩展：
- en: '[PRE3]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You'll use this extension to add the initializer method to the `ExploreItem`
    structure.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将使用这个扩展来向 `ExploreItem` 结构添加初始化器方法。
- en: 'Add the following between the curly braces of the extension to declare a custom
    initializer method:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在扩展的大括号之间添加以下内容以声明一个自定义初始化器方法：
- en: '[PRE4]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Ignore the error that appears, as you will fix it shortly. This initializer
    takes a dictionary as an argument. Note that both key and value are strings.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 忽略出现的错误，因为你将很快修复它。这个初始化器接受一个字典作为参数。注意键和值都是字符串。
- en: 'Add the following between the curly braces of the initializer:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在初始化器的大括号之间添加以下内容：
- en: '[PRE5]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This assigns the value of the dictionary item with the key `"name"` to the `name`
    property, and the value of the dictionary item with the key `"image"` to the `image`
    property.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将字典中键为 `"name"` 的项的值分配给 `name` 属性，将键为 `"image"` 的项的值分配给 `image` 属性。
- en: 'The completed extension should look as follows:'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完成的扩展应如下所示：
- en: '[PRE6]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: At this point, you have a structure, `ExploreItem`, with two `String` properties,
    `name` and `image`. When you create an instance of this structure, you will pass
    in a dictionary containing elements with keys and values of type `String`. The
    value for the `name` key will be assigned to the `name` property, and the value
    of the `image` key will be assigned to the `image` property.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 到目前为止，你有一个结构，`ExploreItem`，它有两个 `String` 属性，`name` 和 `image`。当你创建这个结构的实例时，你将传递一个包含键和值的字典，键和值都是
    `String` 类型。`name` 键的值将被分配给 `name` 属性，`image` 键的值将被分配给 `image` 属性。
- en: In the next section, you'll implement a data manager class. This will read the
    array of dictionaries from the `ExploreData.plist` file and assign the values
    of the dictionary elements to `ExploreItem` instances.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将实现一个数据管理类。这将读取 `ExploreData.plist` 文件中的字典数组并将字典元素的值分配给 `ExploreItem`
    实例。
- en: Implementing a data manager class to read data from a .plist file
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现一个数据管理类以从 .plist 文件读取数据
- en: 'You have added a `.plist` file, `ExploreData.plist`, to your project containing
    the cuisine data, and you have created a structure, `ExploreItem`, that can store
    details of each cuisine. Now, you need to create a new class, `ExploreDataManager`,
    that can read the data in the `.plist` file and store it in an array of `ExploreItem`
    instances. You''ll refer to this class as a data manager class. Follow these steps:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经向项目中添加了一个 `.plist` 文件，`ExploreData.plist`，其中包含餐饮数据，并且你已经创建了一个结构，`ExploreItem`，可以存储每个餐饮的详细信息。现在，你需要创建一个新的类，`ExploreDataManager`，它可以读取
    `.plist` 文件中的数据并将其存储在 `ExploreItem` 实例的数组中。你将把这个类称为数据管理类。按照以下步骤操作：
- en: Right-click on the **Model** folder and select **New File**.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 **Model** 文件夹并选择 **New File**。
- en: '**iOS** should already be selected. Choose **Swift File**, then click **Next**.'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS** 应该已经选中。选择 **Swift File**，然后点击 **Next**。'
- en: Name the file `ExploreDataManager` and then click **Create** to display its
    contents in the Editor area.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件命名为 `ExploreDataManager` 并点击 **Create** 以在编辑器区域显示其内容。
- en: 'Type the following code in the file to declare the `ExploreDataManager` class:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件中输入以下代码以声明 `ExploreDataManager` 类：
- en: '[PRE7]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Type in the following code between the curly braces. This implements a method,
    `loadData()`, which will read the contents of the `ExploreData.plist` file and
    return an array of dictionaries:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在大括号之间输入以下代码以实现一个方法，`loadData()`，它将读取 `ExploreData.plist` 文件的全部内容并返回一个字典数组：
- en: '[PRE8]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s break this method down:'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们分解这个方法：
- en: '[PRE9]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `private` keyword means that the method may only be used within this class.
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`private` 关键字表示该方法只能在这个类内部使用。'
- en: '[PRE10]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `loadData()` method declaration has no arguments and returns an array of
    dictionaries, and each dictionary contains elements with keys and values of type
    `String`.
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`loadData()` 方法声明没有参数，并返回一个字典数组，每个字典包含键和值都是 `String` 类型的元素。'
- en: '[PRE11]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This statement creates an instance of a property list decoder that will be used
    to decode the data in the `ExploreData.plist` file.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个语句创建了一个属性列表解码器实例，它将用于解码 `ExploreData.plist` 文件中的数据。
- en: '[PRE12]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: When you build your app, the result is a folder with all of the app resources
    inside it, called the application bundle. `ExploreData.plist` is inside this bundle.
    This statement attempts to get the path to the `ExploreData.plist` file and assign
    it to a constant, `path`.
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当你构建你的应用时，结果是一个包含所有应用资源的文件夹，称为应用程序包。`ExploreData.plist` 就在这个包内。这个语句试图获取 `ExploreData.plist`
    文件的路径并将其分配给一个常量，`path`。
- en: '[PRE13]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This statement attempts to get the `ExploreData.plist` file stored at `path`
    and assign it to a constant, `exploreData`.
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此语句尝试从 `path` 获取存储的 `ExploreData.plist` 文件并将其分配给一个常量，`exploreData`。
- en: '[PRE14]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If you click `ExploreData.plist` in your project, note that the root level
    object is an array, and each item in the array is a dictionary, as shown:'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您在项目中点击 `ExploreData.plist`，请注意，根级别的对象是一个数组，并且数组中的每个项目都是一个字典，如下所示：
- en: '![Figure 14.4: Editor area showing arrays and dictionaries in ExploreData.plist'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.4：显示 ExploreData.plist 中数组和字典的编辑区域](img/Figure_14.04_B17469.jpg)'
- en: '](img/Figure_14.04_B17469.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.4：显示 ExploreData.plist 中数组和字典的编辑区域](img/Figure_14.04_B17469.jpg)'
- en: 'Figure 14.4: Editor area showing arrays and dictionaries in ExploreData.plist'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.4：显示 ExploreData.plist 中数组和字典的编辑区域
- en: 'This statement attempts to create an array from the contents of the `ExploreData.plist`
    file and assign it to a constant, `exploreItems`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 此语句尝试从 `ExploreData.plist` 文件的内容创建一个数组并将其分配给一个常量，`exploreItems`：
- en: '[PRE15]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If the optional binding is successful, this statement returns `exploreItems`
    as an array of dictionaries, and each dictionary is of the `[String: String]`
    type:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '如果可选绑定成功，此语句将返回 `exploreItems` 作为字典数组，并且每个字典都是 `[String: String]` 类型：'
- en: '[PRE16]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If the optional binding is unsuccessful, an empty array of dictionaries is returned.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可选绑定失败，将返回一个空的字典数组。
- en: At this point, you have a data manager class, `ExploreDataManager`, containing
    a method that loads data from the `ExploreData.plist` file and assigns it to an
    array, `exploreItems`. In the next section, you will look at how to use the dictionaries
    inside this array to initialize `ExploreItem` instances, which will eventually
    be passed to the `ExploreViewController` instance managing the **Explore** screen.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您有一个数据管理器类，`ExploreDataManager`，它包含一个方法，可以从 `ExploreData.plist` 文件加载数据并将其分配给一个数组，`exploreItems`。在下一节中，您将了解如何使用该数组中的字典来初始化
    `ExploreItem` 实例，这些实例最终将被传递给管理 **Explore** 屏幕的 `ExploreViewController` 实例。
- en: Using the data manager to initialize ExploreItem instances
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用数据管理器初始化 ExploreItem 实例
- en: 'At present, you have a data manager class, `ExploreDataManager`. This class
    contains a method, `loadData()`, which reads data from `ExploreData.plist` and
    returns an array of dictionaries. You''ll add a method that creates and initializes
    `ExploreItem` instances with the dictionaries in that array. Follow these steps:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，您有一个数据管理器类，`ExploreDataManager`。此类包含一个方法，`loadData()`，它从 `ExploreData.plist`
    读取数据并返回一个字典数组。您将添加一个方法，使用该数组中的字典创建和初始化 `ExploreItem` 实例。按照以下步骤操作：
- en: 'In the `ExploreDataManager` class definition, add the following code before
    the `loadData()` method to implement a `fetch()` method:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ExploreDataManager` 类定义中，在 `loadData()` 方法之前添加以下代码以实现一个 `fetch()` 方法：
- en: '[PRE17]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This method will call `loadData()`, which returns an array of dictionaries.
    The `for` loop is then used to print the contents of each dictionary in the array
    to the Debug area to ensure that the `ExploreData.plist` file has been read successfully.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此方法将调用 `loadData()`，它返回一个字典数组。然后使用 `for` 循环将数组中每个字典的内容打印到调试区域，以确保已成功读取 `ExploreData.plist`
    文件。
- en: 'Click the `ExploreViewController` file in the Project navigator. Add the following
    code to the `viewDidLoad()` method. This creates an `ExploreDataManager` instance
    and calls its `fetch()` method when the `ExploreViewController` instance loads
    its view:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击 `ExploreViewController` 文件。将以下代码添加到 `viewDidLoad()` 方法中。这将在 `ExploreViewController`
    实例加载其视图时创建一个 `ExploreDataManager` 实例并调用其 `fetch()` 方法：
- en: '[PRE18]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Click on the `ExploreDataManager` file. Add a property declaration to store
    an array of `ExploreItem` instances just before the `fetch()` method:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `ExploreDataManager` 文件。在 `fetch()` 方法之前添加一个属性声明来存储 `ExploreItem` 实例数组：
- en: '[PRE19]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This adds a property, `exploreItems`, to the `ExploreDataManager` class and
    assigns an empty array to it.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这向 `ExploreDataManager` 类添加一个属性 `exploreItems` 并将其分配给一个空数组。
- en: 'Inside the `fetch()` method, replace the `print()` statement with the following
    statement that initializes `ExploreItem` instances and appends them to the `exploreItems`
    array:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `fetch()` 方法内部，将 `print()` 语句替换为以下语句，该语句初始化 `ExploreItem` 实例并将它们追加到 `exploreItems`
    数组中：
- en: '[PRE20]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The custom initializer in the `ExploreItem` class assigns the `name` and `image`
    strings in each dictionary read from `ExploreData.plist` to the `name` and `image`
    properties of an `ExploreData` instance.
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ExploreItem` 类中的自定义初始化器将 `ExploreData.plist` 中读取的每个字典中的 `name` 和 `image` 字符串分配给
    `ExploreData` 实例的 `name` 和 `image` 属性。'
- en: 'Verify that the `ExploreDataManager` file''s contents looks like this:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证 `ExploreDataManager` 文件的内容看起来如下：
- en: '[PRE21]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: At this point, you have an `ExploreDataManager` class that reads data from `ExploreData.plist`
    and stores it in `exploreItems`, an array of `ExploreItem` instances. This array
    will be the data source for the collection view managed by the `ExploreViewController`
    instance. The cuisine information it contains will eventually be displayed in
    the **Explore** screen.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经有一个`ExploreDataManager`类，它从`ExploreData.plist`文件中读取数据并将其存储在`exploreItems`数组中，这是一个`ExploreItem`实例的数组。这个数组将是`ExploreViewController`实例管理的集合视图的数据源。它包含的菜谱信息最终将在**探索**屏幕中显示。
- en: Displaying data in a collection view
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在集合视图中显示数据
- en: You've implemented a data manager class, `ExploreDataManager`, that reads cuisine
    data from the `ExploreData.plist` file and stores it in an array of `ExploreItem`
    instances. Now, you will modify the `ExploreViewController` class to use that
    array as the data source for the collection view in the **Explore** screen.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经实现了一个数据管理类`ExploreDataManager`，它从`ExploreData.plist`文件中读取菜谱数据并将其存储在`ExploreItem`实例的数组中。现在，您将修改`ExploreViewController`类，使其使用该数组作为**探索**屏幕中集合视图的数据源。
- en: 'At present, the collection view in the `ExploreCell`, for this purpose. You
    can then configure the view controller for the collection view, `ExploreViewController`,
    to get cuisine details from the `ExploreDataManager` instance and provide it to
    the collection view for display. To create `ExploreCell`, follow these steps:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，在`ExploreCell`中的集合视图用于此目的。然后，您可以配置集合视图的视图控制器`ExploreViewController`，从`ExploreDataManager`实例获取菜谱详情并将其提供给集合视图进行显示。要创建`ExploreCell`，请按照以下步骤操作：
- en: Right-click on the `Explore` folder in the Project navigator and choose **New
    Group**.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中右键点击`Explore`文件夹并选择**新建组**。
- en: Rename the new group `View`.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新组`View`重命名。
- en: Right-click on the `View` folder and select **New File**.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`View`文件夹并选择**新建文件**。
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class**, then click
    **Next**.'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS**应该已经选中。选择**Cocoa Touch 类**，然后点击**下一步**。'
- en: 'Configure the class as shown here:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下配置类：
- en: '`ExploreCell`'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ExploreCell`'
- en: '`UICollectionViewCell`'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`UICollectionViewCell`'
- en: '`Unchecked`'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`未选中`'
- en: '`Swift`'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Swift`'
- en: Click **Next**.
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击**下一步**。
- en: Click **Create**.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**。
- en: 'A new file, `ExploreCell`, will be added to your project. Inside it you will
    see the following:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将在您的项目中添加一个名为`ExploreCell`的新文件。在其中您将看到以下内容：
- en: '[PRE22]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Important Information
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要信息
- en: '`UIKit` provides the infrastructure required for iOS apps. You can read more
    about it here: [https://developer.apple.com/documentation/uikit](https://developer.apple.com/documentation/uikit).'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`UIKit`为iOS应用提供了所需的基础设施。您可以在这里了解更多信息：[https://developer.apple.com/documentation/uikit](https://developer.apple.com/documentation/uikit)。'
- en: 'You''ll now assign the `ExploreCell` class as the identity of the `exploreCell`
    collection view cell. Click the `Main` storyboard file in the Project navigator
    and click `exploreCell` inside the **Explore View Controller Scene** in the document
    outline. Click the Identity inspector button:![Figure 14.6: Identity inspector
    selected'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您将`ExploreCell`类分配为`exploreCell`集合视图单元格的标识。在项目导航器中点击`Main`故事板文件，然后在文档大纲中的**探索视图控制器场景**内点击`exploreCell`。点击标识检查器按钮：![Figure
    14.6：选择身份检查器]
- en: '](img/Figure_14.06_B17469.jpg)'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_14.06_B17469.jpg]'
- en: 'Figure 14.6: Identity inspector selected'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图14.6：选择身份检查器
- en: 'Under the `ExploreCell`. This sets an `ExploreCell` instance as the manager
    for `exploreCell`. Press *Return* when done:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ExploreCell`下。这设置了一个`ExploreCell`实例作为`exploreCell`的管理器。完成设置后按*回车*键：
- en: '![Figure 14.7: Identity inspector showing Class settings for exploreCell'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 14.7：显示 exploreCell 类设置的标识检查器]'
- en: '](img/Figure_14.07_B17469.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_14.07_B17469.jpg]'
- en: 'Figure 14.7: Identity inspector showing Class settings for exploreCell'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.7：显示 exploreCell 类设置的标识检查器
- en: You've just declared and defined the `ExploreCell` class, and assigned it as
    the manager for the `exploreCell` collection view cell. Now, you'll create outlets
    in this class that will be connected to the image view and the label in the `exploreCell`
    collection view cell, so you can control what they display.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 您刚刚声明并定义了`ExploreCell`类，并将其分配为`exploreCell`集合视图单元格的管理器。现在，您将在该类中创建输出，这些输出将连接到`exploreCell`集合视图单元格中的图像视图和标签，以便您可以控制它们显示的内容。
- en: Connecting the outlets in exploreCell
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接 exploreCell 中的输出
- en: 'To manage what is being displayed by the collection view cells in the `exploreCell`
    collection view cell to outlets in the `ExploreCell` class. You"ll use the assistant
    editor for this. Follow these steps:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 为了管理`exploreCell`集合视图中单元格显示的内容，将其连接到`ExploreCell`类中的输出。您将使用辅助编辑器来完成此操作。请按照以下步骤操作：
- en: 'Click the Navigator and Inspector buttons to hide the Navigator and Inspector
    areas. This will give you more room to work:![Figure 14.8: Toolbar showing Navigator
    and Inspector buttons'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击导航器和检查器按钮以隐藏导航器和检查器区域。这将为您提供更多的工作空间：![图 14.8：显示导航器和检查器按钮的工具栏
- en: '](img/Figure_14.08_B17469.jpg)'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 14.08_B17469.jpg](img/Figure_14.08_B17469.jpg)'
- en: 'Figure 14.8: Toolbar showing Navigator and Inspector buttons'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.8：显示导航器和检查器按钮的工具栏
- en: 'Click the Adjust Editor Options button to display a menu:![Figure 14.9: Adjust
    Editor Options button'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击调整编辑器选项按钮以显示菜单：![图 14.9：调整编辑器选项按钮
- en: '](img/Figure_14.09_B17469.jpg)'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 14.09_B17469.jpg](img/Figure_14.09_B17469.jpg)'
- en: 'Figure 14.9: Adjust Editor Options button'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.9：调整编辑器选项按钮
- en: 'Choose **Assistant** from the menu to display the assistant editor:![Figure
    14.10: Adjust Editor Options menu with Assistant selected'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从菜单中选择**辅助**以显示辅助编辑器：![图 14.10：调整编辑器选项菜单，已选择辅助
- en: '](img/Figure_14.10_B17469.jpg)'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 14.10_B17469.jpg](img/Figure_14.10_B17469.jpg)'
- en: 'Figure 14.10: Adjust Editor Options menu with Assistant selected'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.10：调整编辑器选项菜单，已选择辅助
- en: 'To create the outlets for the `ExploreCell` class, the assistant editor path
    should be set to `Automatic | ExploreCell.swift`. If you don''t see `ExploreCell.swift`
    in the path, select the `exploreCell` collection view cell''s `ExploreCell.swift`
    from the assistant editor''s path drop-down menu:![Figure 14.11: Assistant editor
    bar showing ExploreCell.swift'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要为 `ExploreCell` 类创建输出端口，辅助编辑器路径应设置为 `自动 | ExploreCell.swift`。如果您在路径中看不到 `ExploreCell.swift`，请从辅助编辑器的路径下拉菜单中选择
    `exploreCell` 集合视图单元格的 `ExploreCell.swift`：![图 14.11：显示 ExploreCell.swift 的辅助编辑器栏
- en: '](img/Figure_14.11_B17469.jpg)'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 14.11_B17469.jpg](img/Figure_14.11_B17469.jpg)'
- en: 'Figure 14.11: Assistant editor bar showing ExploreCell.swift'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.11：显示 ExploreCell.swift 的辅助编辑器栏
- en: '*Ctrl + Drag* from the **Label** element in the collection view cell to the
    space between the curly braces as shown. This creates an outlet for it:![Figure
    14.12: Editor area showing ExploreCell.swift'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*Ctrl + 拖动* 从集合视图单元格中的**标签**元素到括号之间的空间，如图所示。这将为它创建一个输出端口：![图 14.12：显示 ExploreCell.swift
    的编辑区域'
- en: '](img/Figure_14.12_B17469.jpg)'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 14.12_B17469.jpg](img/Figure_14.12_B17469.jpg)'
- en: 'Figure 14.12: Editor area showing ExploreCell.swift'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.12：显示 ExploreCell.swift 的编辑区域
- en: 'In the pop-up dialog, enter `exploreNameLabel` in the **Name** field to set
    the outlet''s name:![Figure 14.13: Pop-up dialog box for exploreNameLabel outlet
    creation'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出对话框中，在**名称**字段中输入 `exploreNameLabel` 以设置输出端口的名称：![图 14.13：创建 exploreNameLabel
    输出端口的弹出对话框
- en: '](img/Figure_14.13_B17469.jpg)'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 14.13_B17469.jpg](img/Figure_14.13_B17469.jpg)'
- en: 'Figure 14.13: Pop-up dialog box for exploreNameLabel outlet creation'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.13：创建 exploreNameLabel 输出端口时的弹出对话框
- en: '*Ctrl + Drag* from the `exploreNameLabel` property. This creates an outlet
    for it:![Figure 14.14: Editor area showing ExploreCell.swift'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*Ctrl + 拖动* 从 `exploreNameLabel` 属性。这将为它创建一个输出端口：![图 14.14：显示 ExploreCell.swift
    的编辑区域'
- en: '](img/Figure_14.14_B17469.jpg)'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 14.14_B17469.jpg](img/Figure_14.14_B17469.jpg)'
- en: 'Figure 14.14: Editor area showing ExploreCell.swift'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.14：显示 ExploreCell.swift 的编辑区域
- en: 'In the pop-up dialog, enter `exploreImageView` in the **Name** field to set
    the outlet''s name:![Figure 14.15: Pop-up dialog box for exploreImageView outlet
    creation'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出对话框中，在**名称**字段中输入 `exploreImageView` 以设置输出端口的名称：![图 14.15：创建 exploreImageView
    输出端口的弹出对话框
- en: '](img/Figure_14.15_B17469.jpg)'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 14.15_B17469.jpg](img/Figure_14.15_B17469.jpg)'
- en: 'Figure 14.15: Pop-up dialog box for exploreImageView outlet creation'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.15：创建 exploreImageView 输出端口的弹出对话框
- en: 'The `exploreNameLabel` and `exploreImageView` outlets have been added to the
    `ExploreCell` class and connected to the `exploreCell` collection view cell''s
    image view and label elements, as shown:![Figure 14.16: Editor area showing exploreNameLabel
    and exploreImageView outlets'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`exploreNameLabel` 和 `exploreImageView` 输出端口已添加到 `ExploreCell` 类，并连接到 `exploreCell`
    集合视图单元格的图像视图和标签元素，如图所示：![图 14.16：显示 exploreNameLabel 和 exploreImageView 输出端口的编辑区域'
- en: '](img/Figure_14.16_B17469.jpg)'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 14.16_B17469.jpg](img/Figure_14.16_B17469.jpg)'
- en: 'Figure 14.16: Editor area showing exploreNameLabel and exploreImageView outlets'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.16：显示 exploreNameLabel 和 exploreImageView 输出端口的编辑区域
- en: 'Click the **x** button to close the assistant editor:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**x**按钮关闭辅助编辑器：
- en: '![Figure 14.17: Assistant editor close button'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.17：辅助编辑器关闭按钮'
- en: '](img/Figure_14.17_B17469.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 14.17_B17469.jpg](img/Figure_14.17_B17469.jpg)'
- en: 'Figure 14.17: Assistant editor close button'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.17：辅助编辑器关闭按钮
- en: The `exploreCell` collection view cell in the `Main` storyboard file has now
    been set up with a class, `ExploreCell`. The outlets for the collection view cell's
    image view and label have also been created and assigned. Now, you can set the
    `exploreNameLabel` and `exploreImageView` outlets in the `ExploreCell` instance
    to display a cuisine image and name in each cell when the app is run.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Main` 故事板文件中，`exploreCell` 集合视图单元格已经设置了一个类，`ExploreCell`。集合视图单元格的图片视图和标签的出口也已创建并分配。现在，你可以设置
    `ExploreCell` 实例中的 `exploreNameLabel` 和 `exploreImageView` 出口，以便在应用运行时在每个单元格中显示菜名和图片。
- en: Tip
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: You can check whether the outlets are connected properly in the Connections
    inspector.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在连接检查器中检查是否正确连接了出口。
- en: In the next section, you will add code to `ExploreDataManager` to provide the
    number of cells to be displayed by `collectionView`, and provide an `ExploreItem`
    instance whose properties will be used to determine what image and label the cell
    will display.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将在 `ExploreDataManager` 中添加代码，以提供 `collectionView` 要显示的单元格数量，并提供一个 `ExploreItem`
    实例，其属性将用于确定单元格将显示的图片和标签。
- en: Implementing additional data manager methods
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现额外的数据管理器方法
- en: 'As you learned in [*Chapter 13*](B17469_13_Final_VK_ePub.xhtml#_idTextAnchor194)*,
    Getting Started with MVC and Collection Views*, a collection view needs to know
    how many cells to display and what to put in each cell. You will add two methods
    to the `ExploreDataManager` class that will provide the number of `ExploreItem`
    instances in the `exploreItems` array and return an `ExploreItem` instance at
    a specified array index. Click the `ExploreDataManager` file in the Project navigator
    and add these two methods after the `loadData()` method:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在 [*第 13 章*](B17469_13_Final_VK_ePub.xhtml#_idTextAnchor194) *“MVC 和集合视图入门”*
    中所学，集合视图需要知道要显示多少个单元格以及每个单元格中要放入什么内容。你将在 `ExploreDataManager` 类中添加两个方法，这两个方法将提供
    `exploreItems` 数组中 `ExploreItem` 实例的数量，并在指定的数组索引处返回一个 `ExploreItem` 实例。在项目导航器中点击
    `ExploreDataManager` 文件，并在 `loadData()` 方法之后添加这两个方法：
- en: '[PRE23]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The first method, `numberOfExploreItems()`, will determine the number of cells
    to be displayed by the collection view.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个方法 `numberOfExploreItems()` 将确定集合视图要显示的单元格数量。
- en: The second method, `exploreItem(at:)`, will return an `ExploreItem` instance
    that corresponds to a cell's position in the collection view.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个方法 `exploreItem(at:)` 将返回一个与集合视图中单元格位置相对应的 `ExploreItem` 实例。
- en: In the next section, you'll update the collection view data source methods in
    the `ExploreViewController` class to provide the number of cells to be displayed
    in the collection view, and to provide the cuisine name and image for each cell.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将更新 `ExploreViewController` 类中的集合视图数据源方法，以提供集合视图中要显示的单元格数量，并为每个单元格提供菜名和图片。
- en: Updating the data source methods in ExploreViewController
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新 ExploreViewController 中的数据源方法
- en: 'The data source methods in the `ExploreViewController` class are currently
    set to display 20 cells, each cell containing an empty image view and label. You''ll
    update them to get the number of cells to display, and the data to put in each
    cell, from the `ExploreDataManager` instance. Follow these steps:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`ExploreViewController` 类中的数据源方法目前设置为显示 20 个单元格，每个单元格包含一个空的图片视图和标签。你将更新它们以从
    `ExploreDataManager` 实例获取要显示的单元格数量以及每个单元格中要放入的数据。按照以下步骤操作：'
- en: 'Click the `ExploreViewController` file and find the `viewDidLoad()` method.
    It should look like this:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `ExploreViewController` 文件，找到 `viewDidLoad()` 方法。它应该看起来像这样：
- en: '[PRE24]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This means the `ExploreDataManager` instance is only accessible within the `viewDidLoad()`
    method. You need to make it available to the entire class.
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这意味着 `ExploreDataManager` 实例仅在 `viewDidLoad()` 方法中可用。你需要使其对整个类可用。
- en: 'Move the `let manager = ExploreDataManager()` line to just after the `collectionView`
    property declaration to make the `ExploreDataManager` instance available to all
    methods within the `ExploreViewController` class, as shown:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `let manager = ExploreDataManager()` 这一行移动到 `collectionView` 属性声明之后，以便在 `ExploreViewController`
    类的所有方法中都可以使用 `ExploreDataManager` 实例，如下所示：
- en: '[PRE25]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Update `collectionView(_:numberOfItemsInSection:)` as shown. This will make
    the collection view display a cell for each element in the `items` array:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下所示更新 `collectionView(_:numberOfItemsInSection:)`。这将使集合视图为 `items` 数组中的每个元素显示一个单元格：
- en: '[PRE26]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Update `collectionView(_:cellForItemAt:)` as shown to set the image view and
    label for each cell using data from the corresponding element in the `items` array:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下所示更新 `collectionView(_:cellForItemAt:)`，使用来自相应数组元素的 `items` 数组中的数据来设置每个单元格的图片视图和标签：
- en: '[PRE27]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'let exploreItem = manager.exploreItem(at:'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'let exploreItem = manager.exploreItem(at:'
- en: indexPath.row)
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: indexPath.row)
- en: '[PRE28]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: cell.exploreNameLabel.text = exploreItem.name
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cell.exploreNameLabel.text = exploreItem.name
- en: '[PRE29]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'cell.exploreImageView.image = UIImage(named:'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'cell.exploreImageView.image = UIImage(named:'
- en: exploreItem.image!)
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: exploreItem.image!)
- en: '[PRE30]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Build and run the app. You''ll see the collection view in the **Explore** screen
    display images and text of different cuisines. Tapping a collection view cell
    will display the **Restaurant List** screen:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行应用。你将在**探索**屏幕上看到不同菜系的图片和文本的集合视图。点击集合视图中的一个单元格将显示**餐厅列表**屏幕：
- en: '![Figure 14.18: iOS Simulator showing Explore and Restaurant List screens'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.18：iOS模拟器显示探索和餐厅列表屏幕'
- en: '](img/Figure_14.18_B17469.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_14.18_B17469.jpg)'
- en: 'Figure 14.18: iOS Simulator showing Explore and Restaurant List screens'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.18：iOS模拟器显示探索和餐厅列表屏幕
- en: At this point, the `ExploreData.plist` file. In [*Chapter 17*](B17469_17_Final_VK_ePub.xhtml#_idTextAnchor248),
    *Getting Started with JSON Files*, you will modify the `RestaurantListViewController`
    class to make the **Restaurant List** screen display a list of restaurants offering
    the selected cuisine. But before you can do that, you'll need to set a location
    in the **Locations** screen, which will provide a list of all available restaurants
    at that location. This will be covered in the next chapter.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，`ExploreData.plist`文件。在[*第17章*](B17469_17_Final_VK_ePub.xhtml#_idTextAnchor248)，“使用JSON文件入门”中，你将修改`RestaurantListViewController`类，使**餐厅列表**屏幕显示提供所选菜系的餐厅列表。但在你能够做到这一点之前，你需要在**位置**屏幕中设置一个位置，这将提供一个在该位置所有可用餐厅的列表。这将在下一章中介绍。
- en: Summary
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you added a property list file, `ExploreData.plist`, to your
    project. You implemented the `ExploreItem` structure, the model objects for the
    `ExploreDataManager`, to read data from `ExploreData.plist`, put the data into
    an array of `ExploreItem` instances, and provide it to `ExploreViewController`.
    You created a class for the `exploreCell` collection view cell. Finally, you configured
    the data source methods in the `ExploreViewController` class to use data from
    the array of `ExploreItem` instances to populate the collection view, and the
    **Explore** screen now displays a list of cuisines. Great job!
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你向项目中添加了一个属性列表文件，`ExploreData.plist`。你实现了`ExploreItem`结构，它是`ExploreDataManager`的模型对象，用于从`ExploreData.plist`读取数据，将数据放入`ExploreItem`实例的数组中，并将其提供给`ExploreViewController`。你为`exploreCell`集合视图单元格创建了一个类。最后，你在`ExploreViewController`类中配置了数据源方法，使用`ExploreItem`实例的数组中的数据来填充集合视图，现在**探索**屏幕显示了一个菜系列表。做得好！
- en: You now know how to provide data to an app using `.plist` files, create model
    objects, create data manager classes that load `.plist` files into model objects,
    configure collection views to display data that has been loaded, and configure
    view controllers for collection views. This will be useful should you wish to
    create your own apps that use collection views.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经知道如何使用`.plist`文件向应用提供数据，创建模型对象，创建将`.plist`文件加载到模型对象中的数据管理类，配置集合视图以显示已加载的数据，以及配置集合视图的视图控制器。如果你希望创建使用集合视图的自己的应用，这将非常有用。
- en: In the next chapter, you will look at table views, which are similar in some
    ways to collection views, and configure the **Locations** screen to display a
    list of locations in a table view when you tap the **LOCATION** button in the
    **Explore** screen.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将了解表格视图，它在某些方面与集合视图相似，并配置**位置**屏幕，在点击**探索**屏幕中的**位置**按钮时，在表格视图中显示位置列表。
