- en: Chapter 8. Enhancing Our App with Code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章. 使用代码增强我们的应用
- en: iAd Producer manages the HTML, CSS, and JavaScript that power our iAd, meaning
    we can make a visually impacting ad without any knowledge of these web technologies.
    We're able to extend the interactivity of our ads by adapting and adding to the
    JavaScript source code generated by iAd Producer. We'll go through some of the
    projects that you've been working on and enhance their interactivity with simple
    and effective tweaks to the JavaScript.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: iAd Producer管理着驱动我们的iAd的HTML、CSS和JavaScript，这意味着我们可以在不了解这些网络技术的情况下制作出视觉冲击力强的广告。我们可以通过修改和添加iAd
    Producer生成的JavaScript源代码来扩展我们广告的交互性。我们将回顾你一直在工作的项目，并通过简单的有效调整来增强它们的交互性。
- en: 'In this chapter, you''ll learn about the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解以下内容：
- en: What JavaScript is
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是JavaScript
- en: iAd Producer's code editor
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iAd Producer的代码编辑器
- en: Handling events
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理事件
- en: Accessing objects
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问对象
- en: Sending e-mails and SMS
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送电子邮件和短信
- en: Saving calendar events
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存日历事件
- en: While this chapter won't make you a JavaScript master, you'll have an understanding
    of what's happening and be able to apply these snippets and examples to your own
    amazing iAd projects.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本章不会让你成为JavaScript大师，但你将了解正在发生的事情，并能够将这些片段和示例应用到自己的精彩iAd项目中。
- en: JavaScript
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript
- en: JavaScript, often abbreviated to JS, is a lightweight language created to enhance
    the interactivity of the web by Brendan Eich of Netscape in 1995\. JavaScript
    uses **objects**, an item that can contain one or more **functions** and **properties**.
    A function is a list of actions that occurs when called by the user or code, and
    a property, or variable, is a value that is stored within an object.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript，通常简称为JS，是由Netscape的Brendan Eich于1995年创建的一种轻量级语言，用于通过增强网络交互性。JavaScript使用**对象**，一个可以包含一个或多个**函数**和**属性**的项目。函数是一系列在用户或代码调用时发生的操作，而属性或变量是存储在对象中的值。
- en: If you're already familiar with programming, you'll find that JavaScript was
    highly influenced by the C language. JavaScript is finding increased use in applications
    beyond the web browser and is a powerful and useful language to learn.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经熟悉编程，你会发现JavaScript受到了C语言的高度影响。JavaScript在浏览器以外的应用中越来越受欢迎，学习它是一种强大且有用的语言。
- en: Note
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Contrary to popular misconceptions, JavaScript doesn't bear a relationship to
    the Java language. It was initially named Mocha, then LiveScript, and finally
    changed to JavaScript—a trademark of Sun Microsystems.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与普遍的误解相反，JavaScript与Java语言没有关系。它最初被命名为Mocha，然后是LiveScript，最后改为JavaScript——Sun
    Microsystems的商标。
- en: Don't worry if you haven't used JavaScript before, we'll go through each exercise
    step-by-step and explain how the code is interacting with our ad and its components.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你之前没有使用过JavaScript，不要担心，我们将逐步讲解每个练习，并解释代码是如何与我们的广告及其组件交互的。
- en: The code editor
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码编辑器
- en: iAd Producer has a built-in code editor that we'll use to edit our JavaScript
    code. It is essentially a basic text editor with a few handy tools, such as coloring
    our code to make it more readable and basic error checking.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: iAd Producer内置了一个代码编辑器，我们将用它来编辑我们的JavaScript代码。它本质上是一个基本的文本编辑器，带有一些实用的工具，例如为我们的代码着色以提高可读性，以及基本的错误检查。
- en: 'Whenever you create a new page in your project, iAd Producer automatically
    generates a hidden JavaScript file that you can view by selecting **Code** | **Show
    Code Editor** from the menu bar in the iAd Producer. Each object also has its
    own JavaScript file that is used to call functions when an event occurs (such
    as a touch or swipe). To view an object''s code, open the editor with the object
    selected. You can see an example of the code editor in the following screenshot:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 每次你在项目中创建一个新页面时，iAd Producer都会自动生成一个隐藏的JavaScript文件，你可以通过从iAd Producer菜单栏中选择**代码**
    | **显示代码编辑器**来查看它。每个对象也有自己的JavaScript文件，用于在发生事件（如触摸或滑动）时调用函数。要查看对象的代码，请选择对象后打开编辑器。你可以在以下屏幕截图中看到一个代码编辑器的示例：
- en: '![The code editor](img/1321_08_01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![代码编辑器](img/1321_08_01.jpg)'
- en: Accessing page objects
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问页面对象
- en: Whenever we add an object to a page's canvas, we're able to access and edit
    certain properties of it using some JavaScript code. This allows you to edit properties
    that aren't available in the iAd Producer interface or change objects in your
    ad to respond to a user's input.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们向页面画布添加一个对象时，我们都能使用一些JavaScript代码访问和编辑它的某些属性。这允许你编辑在iAd Producer界面中不可用的属性，或者改变你的广告中的对象以响应用户的输入。
- en: Time for action — accessing an object
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——访问对象
- en: 'Let''s continue using the `Cloud 9 - iPad` ad that we created in the last chapter.
    We''ll add some tweaks to our **Test Flight** page''s scroll view object that
    wouldn''t be possible with the iAd Producer interface:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续使用上一章中创建的`Cloud 9 - iPad`广告。我们将对我们的**Test Flight**页面的滚动视图对象进行一些调整，这些调整在iAd
    Producer界面中是不可能的：
- en: Open the project `Cloud 9 - iPad` in iAd Producer. If you didn't complete this
    project, then open the file `8\. Store Finder.iadproj` in the folder `Cloud 9`
    and then `Exercises`. This file has the previous exercises completed for you.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在iAd Producer中打开项目`Cloud 9 - iPad`。如果您没有完成此项目，请在`Cloud 9`文件夹中打开`8. Store Finder.iadproj`文件，然后进入`Exercises`文件夹。此文件中已为您完成了之前的练习。
- en: Double-click on the first page, **Test Flight**, from the ad overview to open
    it on the canvas. Right-click on the hatched background outside of the canvas
    and expand the menu item **Page Events** | **View Did Load** | **Execute JavaScript**.
    This will automatically create the required function for this event and open the
    code editor for this page:![Time for action — accessing an object](img/1321_08_02.jpg)
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击广告概览中的第一页**Test Flight**，在画布上打开它。在画布外的网格背景上右键单击，展开菜单项**页面事件** | **视图加载完成**
    | **执行JavaScript**。这将自动创建此事件所需的功能，并打开此页面的代码编辑器：![执行动作 — 访问对象](img/1321_08_02.jpg)
- en: 'In the code editor window, iAd Producer has created a new function for this
    page that will be called and run when the view appears. The `//Code goes here`
    placeholder comment shows you where to put your custom code for this event. Delete
    the placeholder comment and add the following:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器窗口中，iAd Producer为该页面创建了一个新函数，当视图出现时将调用并运行。`//Code goes here`占位符注释显示了您放置自定义代码的位置。删除占位符注释并添加以下内容：
- en: '[PRE0]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In JavaScript, anything on a line following `//` is a comment and will be ignored
    when run. If you want to have a multiline comment, use `/* comment goes here */`.
    Comments are useful as they can be used to remind you (or inform other developers
    working on your code) why you've done things in a certain way. The code editor
    will turn comments green to distinguish them from the JavaScript.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在JavaScript中，任何在`//`之后的行都是注释，在运行时将被忽略。如果您想有多行注释，请使用`/* comment goes here */`。注释很有用，因为它们可以用来提醒您（或告知正在您代码上工作的其他开发者）为什么以某种方式做事。代码编辑器会将注释变为绿色，以区分JavaScript代码。
- en: The first line is a comment saying what we're doing, which is retrieving the
    scroll view object from the page and storing a reference of it in a variable,
    indicated with `var` and called `scrollView`. Each object on the page is assigned
    a unique outlet name. To find or modify the outlet value for an object, click
    and select it from the canvas and open the inspector pane. Expand the **Properties**
    section and you'll see a text box with the outlet name. You're able to change
    this to something more memorable, if you have multiple objects of the same type
    on the page:![Time for action — accessing an object](img/1321_08_03.jpg)
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一行是一个注释，说明我们在做什么，即从页面中检索滚动视图对象并将其引用存储在变量中，变量用`var`表示，命名为`scrollView`。页面上的每个对象都被分配了一个唯一的出口名称。要查找或修改对象的出口值，请从画布上点击并选择它，然后打开检查器面板。展开**属性**部分，您会看到一个带有出口名称的文本框。如果您在页面上有多个相同类型的对象，您可以将其更改为一个更容易记住的名称：![执行动作
    — 访问对象](img/1321_08_03.jpg)
- en: 'Now that we have our outlet easily accessible with the `scrollView` variable,
    we can manipulate it by adjusting its properties. Add the following lines to your
    function in the code editor:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经通过`scrollView`变量轻松访问了出口，我们可以通过调整其属性来操作它。在代码编辑器中添加以下行到您的函数中：
- en: '[PRE1]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To disable a property, we use the `false` value, and we use the `true` value
    to enable it.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要禁用属性，我们使用`false`值，而使用`true`值来启用它。
- en: 'This will disable the vertical scrolling of our scroll view so it only can
    be scrolled left and right by the user. As we''re preventing vertical scrolling,
    we should also prevent the vertical scroll bars from appearing:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将禁用我们的滚动视图的垂直滚动，使其只能由用户左右滚动。由于我们阻止了垂直滚动，我们还应该防止垂直滚动条出现：
- en: '[PRE2]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: By setting the `showsVerticalScrollIndicator` property of our scroll view object
    to `false`, we disabled the vertical scroll bar from appearing.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将我们的滚动视图对象的`showsVerticalScrollIndicator`属性设置为`false`，我们禁用了垂直滚动条的出现。
- en: Your complete code should look similar to the following image in the code editor:![Time
    for action — accessing an object](img/1321_08_04.jpg)
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的完整代码应该类似于代码编辑器中的以下图片：![执行动作 — 访问对象](img/1321_08_04.jpg)
- en: Save your project and test the ad in the iOS Simulator or on a device using
    iAd Tester. You'll notice that the scroll view can no longer be scrolled up and
    down, only left and right, and a vertical scroll bar does not appear.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存您的项目，并在iOS模拟器或使用iAd Tester的设备上测试广告。您会注意到滚动视图不能再上下滚动，只能左右滚动，并且不会出现垂直滚动条。
- en: What just happened?
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We used the `onViewControllerViewDidLoad` event function that is called once
    the page has completed loading and modified some properties of our scroll view
    object. iAd Producer doesn't allow certain properties to be accessed, so it can
    keep its user interface clean and understandable. By hiding advanced functionality
    from beginners, they make starting out with iAd creation less overwhelming. As
    you're now an iAd pro, we can take the plunge into JavaScript to create better
    ads.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了`onViewControllerViewDidLoad`事件函数，该函数在页面完成加载后调用，并修改了一些我们的滚动视图对象的一些属性。iAd
    Producer不允许访问某些属性，因此它可以保持其用户界面干净、易懂。通过从初学者那里隐藏高级功能，他们使开始创建iAd的过程不那么令人不知所措。既然你现在已经是iAd专家，我们可以深入JavaScript来创建更好的广告。
- en: Handling user events
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理用户事件
- en: Whenever an action on our ad is initiated by the user, or by the system, an
    event is called. We're able to add a JavaScript function to a variety of events
    in our ad, such as taps on buttons, device shakes, and orientation changes.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是由用户还是系统触发的我们的广告上的任何操作，都会调用一个事件。我们能够将JavaScript函数添加到广告中的各种事件中，例如按钮的点击、设备的摇晃和方向变化。
- en: 'Events are separated into three groups:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 事件分为三组：
- en: '**Global Events:** These occur for the entire ad'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全球事件:** 这些事件发生在整个广告中'
- en: '**Page Events:** These are related to a particular page'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**页面事件:** 这些与特定页面相关'
- en: '**Object Events:** These are specific to one object on a page'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对象事件:** 这些事件特定于页面上的一个对象'
- en: 'For example, the user shaking the device or the ad finishing the loading is
    a global event, a page loading or appearing is a page event, and a button being
    touched would be an object event. You can view the event hierarchy here:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，用户摇晃设备或广告完成加载是一个全局事件，页面加载或出现是一个页面事件，按钮被触摸则是一个对象事件。您可以在以下位置查看事件层次结构：
- en: '![Handling user events](img/1321_08_05.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![处理用户事件](img/1321_08_05.jpg)'
- en: Sending SMS and e-mails
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发送短信和电子邮件
- en: iAd Producer doesn't have an object or template available for sending e-mails
    or SMS, but the iAd JS framework that powers our iAd has a simple way of presenting
    the user with an e-mail dialog.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: iAd Producer没有提供用于发送电子邮件或短信的对象或模板，但为我们iAd提供动力的iAd JS框架有一个简单的方法向用户展示电子邮件对话框。
- en: You may remember we briefly touched upon this in [Chapter 6](ch06.html "Chapter 6. Ad
    Destinations and Actions"), *Ad Destinations and Actions*, when we added the ability
    to share our ad using SMS. This time, we'll take a deeper look at the code and
    what is happening at each step and send an e-mail instead.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能记得我们在[第6章](ch06.html "第6章。广告目的地和动作")“广告目的地和动作”中简要提到了这一点，当时我们添加了使用短信分享广告的功能。这次，我们将更深入地查看代码以及每个步骤中发生的事情，并改为发送电子邮件。
- en: Time for action — detecting a tap and sending an e-mail
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——检测点击并发送电子邮件
- en: Continuing to enhance our `Cloud 9` ad, we'll add a button to our **Book a flight**
    page that will pre-fill the e-mail component with our booking center's e-mail
    address.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 继续增强我们的“Cloud 9”广告，我们将在**预订航班**页面上添加一个按钮，该按钮将预先填充我们的预订中心的电子邮件地址。
- en: If it isn't already, open the `Cloud 9 - iPad` project in iAd Producer. Double-click
    on the **Book a flight** page to open it on the ad canvas. Using the page toggle
    above the canvas, change to the **Map Details** view.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果还没有，请在iAd Producer中打开“Cloud 9 - iPad”项目。双击**预订航班**页面以在广告画布上打开它。使用画布上方的页面切换器，切换到**地图详情**视图。
- en: From the object library, add a **Button** to the canvas. Open the inspector
    and change the outlet name to `emailButton`.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从对象库中，将一个**按钮**添加到画布上。打开检查器，将出口名称更改为`emailButton`。
- en: Note
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When naming outlets, you should start in lowercase and then use camel case;
    this means each subsequent word after the first should be capitalized. For example,
    *youShouldCapitalizeEveryFirstLetterOfEachWord*. Doing so makes it easier to read
    and understand what each outlet does.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当命名出口时，你应该以小写字母开始，然后使用驼峰式命名法；这意味着第一个单词之后的每个后续单词都应该大写。例如，*youShouldCapitalizeEveryFirstLetterOfEachWord*。这样做使得阅读和理解每个出口的功能更容易。
- en: Update the button text to read `Book a flight now!`.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将按钮文本更新为“现在预订航班！”
- en: With the button selected, expand the **inspector** pane and find the **Events**
    section. The **Touched Up Inside** event will already be selected, but without
    an action. We use the **Touched Up Inside** event to detect a person releasing
    their finger from a tap on the object. We use **Touched Up Inside** instead of
    **Touched Down Inside**, as the **Touch Down** event is called as soon as the
    user touches on the object. This can create a jarring experience for the user
    as accidental taps are more likely to occur on touchdown. Change the action for
    the event to **Execute JavaScript:**![Time for action — detecting a tap and sending
    an e-mail](img/1321_08_06.jpg)
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在按钮选中后，展开**检查器**面板并找到**事件**部分。**Touched Up Inside**事件已经选中，但没有动作。我们使用**Touched
    Up Inside**事件来检测用户从对象上的点击中释放手指。我们使用**Touched Up Inside**而不是**Touched Down Inside**，因为**Touch
    Down**事件在用户触摸对象时立即被调用。这可能会给用户带来令人不适的体验，因为意外点击在触摸下更可能发生。将事件的动作更改为**执行JavaScript**：![执行动作
    — 检测点击并发送电子邮件](img/1321_08_06.jpg)
- en: 'The code editor will appear; delete the `// Code here` placeholder comment
    and add the following:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码编辑器将出现；删除`// Code here`占位符注释并添加以下内容：
- en: '[PRE3]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This sets the **listener** property of our advert's `mailComposer` object to
    an empty function. Listener's are functions that are called once another action
    completes; for example, our listener is called when an e-mail is successfully
    sent or if it fails for any reason. For now, we're just using an empty function
    because we don't need to handle any sending errors or successes differently. Without
    an empty function, our ad would crash as it would try to find something that doesn't
    exist.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将我们的广告的`mailComposer`对象的**监听器**属性设置为空函数。监听器是当另一个动作完成时被调用的函数；例如，当电子邮件成功发送或由于任何原因失败时，我们的监听器会被调用。目前，我们只是使用一个空函数，因为我们不需要以不同的方式处理发送错误或成功。如果没有空函数，我们的广告会崩溃，因为它会尝试找到不存在的东西。
- en: 'Let''s set our recipient e-mail address, which is the e-mail account that will
    receive any bookings. Add the following code after our listener and update `your@emailaddress.com`
    with your own e-mail address so you''re able to test whether it works later:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们设置我们的收件人电子邮件地址，这是将接收任何预订的电子邮件账户。在我们的监听器之后添加以下代码，并将`your@emailaddress.com`更新为您的电子邮件地址，以便您稍后能够测试它是否工作：
- en: '[PRE4]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Notice the square brackets? They indicate whether anything within them is in
    an array. Think of it as a list of items wrapped within the square brackets. Each
    item of the array is separated by a comma, so if you wanted to include multiple
    recipients, you'd use `["recipientOne@email.com", "recipientTwo@email.com"]` and
    so on.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意到方括号吗？它们表示方括号内的内容是否为数组。把它想象成一个包含在方括号内的项目列表。数组中的每个项目都由逗号分隔，所以如果你想包括多个收件人，你会使用`["recipientOne@email.com",
    "recipientTwo@email.com"]`等等。
- en: Note
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Although we only passed one item to the recipients, we still had to use an array
    because that's what the `toRecipients` property expects.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尽管我们只传递了一个项目给收件人，但我们仍然必须使用数组，因为`toRecipients`属性期望的是数组。
- en: 'With our recipient list set, we can set the `subject` property for our e-mail,
    while continuing to build up the code in the editor by adding the following:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置收件人列表后，我们可以设置电子邮件的`subject`属性，同时在编辑器中继续构建代码，添加以下内容：
- en: '[PRE5]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This simply sets the `subject` property of our ad''s mail composer to a **string**
    —a block of text contained with quotes. We''ll pre-fill the body—the main content,
    of our e-mail:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这只是将我们的广告的邮件编写器的`subject`属性设置为**字符串**——一个包含引号的文本块。我们将预先填充正文——电子邮件的主要内容：
- en: '[PRE6]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Unlike our other properties, the body text isn't set using the `=` assignment
    but by adding values with two brackets. The items contained within these brackets
    are passed to the `setMessageBody` function of the mail composer. It accepts two
    arguments, items required by the function, in this case, a string for the body
    text, and a Boolean value indicating if the body text is an HTML string. A Boolean
    value is a simple yes or no switch, using `true` or `false` respectively. If we
    wanted to add HTML web content to our e-mail, we could use`<img src='http://awebsite.com/animage.png'
    />` as the string and `true` for the Boolean. This would show an image in our
    e-mail.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与我们的其他属性不同，正文文本不是使用`=`赋值来设置，而是通过添加两个括号内的值来设置。这些括号内的项目被传递到邮件编写器的`setMessageBody`函数。它接受两个参数，该函数所需的项目，在这种情况下，一个用于正文文本的字符串，以及一个表示正文文本是否为HTML字符串的布尔值。布尔值是一个简单的是或否开关，分别使用`true`或`false`。如果我们想在电子邮件中添加HTML网页内容，我们可以使用`<img
    src='http://awebsite.com/animage.png' />`作为字符串，并将布尔值设置为`true`。这将在我们的电子邮件中显示一个图片。
- en: Note
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To call or invoke a function, you use the function name followed by `()`. JavaScript
    functions can also be properties, which is why `window.ad.mailComposer.setMessageBody`
    needs to be set using values wrapped in `(` and `)`.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要调用或调用一个函数，你使用函数名后跟`()`。JavaScript函数也可以是属性，这就是为什么`window.ad.mailComposer.setMessageBody`需要使用括号`(`和`)`包裹的值来设置。
- en: 'With all the required info set for our `mailComposer` property, we can now
    present the user with the mail composer view. Add this final line of code to the
    editor:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们为`mailComposer`属性设置了所有必需的信息后，现在可以向用户展示邮件编辑器视图。将以下代码行添加到编辑器中：
- en: '[PRE7]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This simply calls the mail composer's `presentComposer` function, which tells
    the iOS device to show the e-mail window and pre-fills it to the values we set.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是调用了邮件编辑器的`presentComposer`函数，它告诉iOS设备显示电子邮件窗口，并将其预先填充为我们设置的值。
- en: Note
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Notice how the code is indented in from the left of the screen; each line of
    code within a function should be indented by four spaces to increase readability.
    You can use one press of the tab key on your keyboard as a shortcut for this.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 注意代码是如何从屏幕左侧缩进的；函数内的每一行代码都应该缩进四个空格以提高可读性。你可以通过按键盘上的制表符键一次来使用这个快捷键。
- en: What just happened?
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发生了什么？
- en: As all of this code occurs within the function for the `onTouchUpInside` event
    of our button, each line is executed step-by-step, with the last step calling
    a function that shows an e-mail composer with our properties pre-filled in it.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 由于所有这些代码都发生在我们按钮的`onTouchUpInside`事件函数中，所以每行代码都是逐步执行的，最后一步调用一个显示带有预填属性的电子邮件编辑器的函数。
- en: When creating our e-mail, we used arrays, strings, and Boolean values to customize
    the message composer with our own required content.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建我们的电子邮件时，我们使用了数组、字符串和布尔值来定制消息编辑器，以包含我们自己的所需内容。
- en: 'The iOS Simulator often won''t send e-mails. When you hit send, the message
    is silently discarded with a success message. To test that your e-mail will reach
    the recipient, you''ll need to test on a device with an e-mail account configured:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: iOS模拟器通常不会发送电子邮件。当你点击发送时，消息会被静默丢弃，并显示成功消息。为了测试你的电子邮件能否送达收件人，你需要在配置了电子邮件账户的设备上进行测试：
- en: '![What just happened?](img/1321_08_08.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![发生了什么？](img/1321_08_08.jpg)'
- en: Have a go hero
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下英雄
- en: 'It''s great that our users can now get in touch with us without having to leave
    our ad, so why not try the following:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在用户无需离开我们的广告就能联系我们，真是太好了，为什么不尝试以下方法：
- en: Send an image in our e-mail; you'll need to have a URL of an image hosted on
    the web.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的电子邮件中发送一张图片；你需要有一个托管在网上的图片的URL。
- en: Change the mail composer to send SMS. Check out the last exercise in [Chapter
    6](ch06.html "Chapter 6. Ad Destinations and Actions"), *Ad Destinations and Actions*,
    if you need some hints.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将邮件编辑器改为发送短信。如果你需要一些提示，可以查看[第6章](ch06.html "第6章。广告目的地和操作")的最后练习，*广告目的地和操作*。
- en: Make sure all your lines of code within the function are indented by four spaces/one
    tab in.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保函数内的所有代码行都缩进四个空格/一个制表符。
- en: As usual, our ad could do with some styling to update the stock objects we added.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如同往常，我们的广告需要一些样式来更新我们添加的库存对象。
- en: Time for action — adding something extra to our e-mail
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——给我们的电子邮件添加一些额外内容
- en: 'While our e-mail contact form is fit for purpose, we can still add some extra
    polish and neat functionality (just like we''ve been doing to the visual aspect
    of our ad). As the **book now** button is on the store details page, let''s make
    our e-mail body include the name of the selected store:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们的电子邮件联系表单已经符合用途，但我们仍然可以添加一些额外的润色和整洁的功能（就像我们一直在做广告的视觉方面一样）。由于**立即预订**按钮位于商店详情页上，让我们让电子邮件正文包含所选商店的名称：
- en: Open the `Cloud 9 - iPad` project in iAd Producer and open the **map details
    view** of the **Book a flight** page on the canvas.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在iAd Producer中打开`Cloud 9 - iPad`项目，并在画布上打开**预订航班**页面的**地图详情视图**。
- en: We need to get back to the code editor and find the code that we added in the
    last exercise. With the **book a flight** button selected, click on **Code** |
    **Show Code Editor** from the menu bar. This will open the code editor and you
    can scroll down to find the function `this.onViewTouchUpInside`. When a control
    only has one function or event added to it, this technique is simple. However,
    if our control has multiple events, our file can quickly become crowded. To open
    the code editor directly focused in a function, select the button object, then
    right-click and choose object events, then **Touched Up Inside**, and finally
    **Execute JavaScript**. You'll see that events that already have functions assigned
    have a solid dot next to their name, whereas empty events have an empty circle,
    as shown in the following screenshot:![Time for action — adding something extra
    to our e-mail](img/1321_08_09.jpg)
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要回到代码编辑器，找到我们在上一个练习中添加的代码。在 **预订航班** 按钮被选中时，从菜单栏点击 **代码** | **显示代码编辑器**。这将打开代码编辑器，您可以向下滚动以找到函数
    `this.onViewTouchUpInside`。当一个控件只有一个函数或事件添加到它上面时，这个技术很简单。然而，如果我们的控件有多个事件，我们的文件可能会很快变得拥挤。要直接在函数中打开代码编辑器并聚焦，请选择按钮对象，然后右键单击并选择对象事件，然后
    **触摸内部**，最后 **执行JavaScript**。您会看到已经分配了函数的事件旁边有一个实心点，而空事件旁边有一个空圆圈，如下截图所示：![执行动作
    — 向我们的电子邮件添加一些额外内容](img/1321_08_09.jpg)
- en: 'With the code editor opened and positioned at our event''s function, we can
    modify some of our code to add the store name to the e-mail message''s body. Add
    the following code straight after setting the e-mail subject:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在打开代码编辑器并将位置定位在事件函数上时，我们可以修改一些代码，将商店名称添加到电子邮件消息正文中。在设置电子邮件主题后直接添加以下代码：
- en: '[PRE8]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This creates a variable called `message` that contains the text `I'd like to
    book a flight at` combined with the text of the title of the map pin's annotation.
    The `+` is used to join the two strings and we access the text of the maps pin
    `title` property to construct our message. Now that we have our `message` variable
    containing the combined string, we need to pass this to the body of our e-mail.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这创建了一个名为 `message` 的变量，其中包含文本 `我想预订航班` 与地图引脚注释的文本相结合。我们使用 `+` 来连接两个字符串，并访问地图引脚的
    `title` 属性来构建我们的消息。现在我们有了包含组合字符串的 `message` 变量，我们需要将其传递到我们的电子邮件正文中。
- en: 'To set our new dynamic text in the body of our e-mail, we need to remove the
    string from the `.setMessageBody` and replace it with our `message` variable.
    You should update your message body function to match this line:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在我们的电子邮件正文中设置新的动态文本，我们需要从 `.setMessageBody` 中移除字符串，并用我们的 `message` 变量替换它。您应该更新您的消息正文函数以匹配以下行：
- en: '[PRE9]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: After we update this message body function, this code will set the message body
    to be the string that we created and stored in the `message` variable.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在更新此消息正文函数后，此代码将消息正文设置为我们在 `message` 变量中创建并存储的字符串。
- en: Note
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure you also remove the quotes, `"`", from within the `.setMessageBody`
    function. Variable names within quotes will cause the variable name, and not the
    variable value, to appear.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保您也从 `.setMessageBody` 函数中移除引号 `"`"。引号内的变量名将导致变量名出现，而不是变量值。
- en: Your final updated touchup event function should look like the following screenshot:![Time
    for action — adding something extra to our e-mail](img/1321_08_10.jpg)
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您最终更新的触摸事件函数应如下截图所示：![执行动作 — 向我们的电子邮件添加一些额外内容](img/1321_08_10.jpg)
- en: Now test the ad. Open a store details view page and tap the **Book a Flight!**
    button. You'll see that the main e-mail body text is dynamically set with the
    title of the store.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在测试广告。打开商店详情查看页面，点击 **预订航班！** 按钮。您会看到主要电子邮件正文文本是动态设置为商店的标题。
- en: Note
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When testing in the simulator, make sure you click on the **Simulate** button
    from the ad overview, not the store finder canvas. Opening directly from the canvas
    will cause the ad to crash as it won't load the correct pin data required for
    the annotation title.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在模拟器中测试时，请确保您从广告概览中点击 **模拟** 按钮，而不是商店查找画布。直接从画布打开会导致广告崩溃，因为它不会加载用于注释标题的正确引脚数据。
- en: What just happened?
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We've made our e-mail more dynamic by adding the current flight center the user
    is looking at to the message body; this should allow better management of e-mails
    received by users.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过将用户正在查看的当前航班中心添加到消息正文中，使我们的电子邮件更加动态；这应该允许更好地管理用户收到的电子邮件。
- en: By triggering with the `Touch Up Inside` event of our button, we combined a
    message string with the dynamic pin annotation property, meaning the body text
    of our e-mail updates with the name of the store the user is currently viewing.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 通过触发按钮的 `Touch Up Inside` 事件，我们将消息字符串与动态的pin注释属性结合在一起，这意味着我们的电子邮件正文文本会更新为用户当前查看的商店名称。
- en: Have a go hero
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下英雄
- en: 'If you''re feeling comfortable with the JavaScript code we''ve used so far,
    you could try extending it further by:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对到目前为止我们使用的JavaScript代码感到舒适，您可以尝试通过以下方式进一步扩展它：
- en: 'Adding the address to the message string. Hint: You can access the annotation''s
    address using `this.viewController.annotation.address`.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将地址添加到消息字符串中。提示：您可以使用 `this.viewController.annotation.address` 访问注释的地址。
- en: Leaving the recipient array empty and creating a `Share with friend` button
    so a specific store can be shared with a friend. To create an empty array, simply
    don't add any properties into `[]`.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 留空收件人数组并创建一个 `分享给朋友` 按钮，以便可以将特定商店与朋友分享。要创建一个空数组，只需不要在 `[]` 中添加任何属性即可。
- en: Including an additional e-mail address in the recipient array so the e-mail
    is distributed to two people at your company.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在收件人数组中包含一个额外的电子邮件地址，以便电子邮件分发到您公司中的两个人。
- en: Pop Quiz — variables
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 突击测验 — 变量
- en: 'Variables are a great way to store values in our JavaScript and can help keep
    our code readable and clear. See if you''re able to identify these different variable
    types and uses:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 变量是存储JavaScript中的值的好方法，可以帮助保持我们的代码可读和清晰。看看您是否能够识别这些不同的变量类型和用途：
- en: Which of these would be the correct way to declare a variable name `cyril` with
    the string `the squirrel has lost his nuts?`
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪种方式是声明变量名 `cyril` 并赋予字符串 `the squirrel has lost his nuts` 的正确方法？
- en: a. var cyril = "the squirrel has lost his nuts";
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: a. var cyril = "the squirrel has lost his nuts";
- en: b. variable cyril = "the squirrel has lost his nuts";
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: b. 变量 cyril = "the squirrel has lost his nuts";
- en: c. cyril = "the squirrel has lost his nuts";
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: c. cyril = "the squirrel has lost his nuts";
- en: d. "cyril" = the squirrel has lost his nuts;
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: d. "cyril" = the squirrel has lost his nuts;
- en: Which of following is the correct way of showing a Boolean value?
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪种方式是显示布尔值的正确方法？
- en: a. yes/no
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: a. 是/否
- en: b. true/false
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: b. 是/否
- en: c. on/off
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: c. 开/关
- en: d. yes/true
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: d. 是/真
- en: Adding a calendar entry
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加日历条目
- en: The iAd JavaScript library allows us to add events to the user's calendar; this
    can let us leave a reminder of certain time sensitive discounts or promotional
    events.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: iAd JavaScript库允许我们向用户的日历添加事件；这可以让我们留下某些时间敏感的折扣或促销活动的提醒。
- en: Time for action — using the calendar
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用日历的行动时间
- en: 'Using our `Cloud 9 - iPad` project, we''ll add an events page with a button
    that''ll add an event to the user''s iPad inbuilt calendar:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们的 `Cloud 9 - iPad` 项目，我们将添加一个事件页面，其中包含一个按钮，该按钮会将事件添加到用户的iPad内置日历中：
- en: Open the `Cloud 9 - iPad` project and add a blank page to your ad. Add a button
    that goes to this page to the main menu carousel. Go back to [Chapter 7](ch07.html
    "Chapter 7. Building for the Big Screen"), *Building for the Big Screen*, if you
    need a reminder on how to do this. Name the page `Events`. Use the image **events-button.png**
    for the button image and place it on one of the placeholder cloud cells, such
    as **Cell 4**, as shown in the following screenshot:![Time for action — using
    the calendar](img/1321_08_11.jpg)
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Cloud 9 - iPad` 项目，并在广告中添加一个空白页面。将一个按钮添加到主菜单轮播图中，该按钮指向此页面。如果您需要提醒如何操作，请回到[第7章](ch07.html
    "Chapter 7. Building for the Big Screen")，*为大屏幕构建*。将页面命名为 `Events`。使用按钮图像 **events-button.png**
    并将其放置在占位符云单元格之一，例如 **Cell 4**，如图所示：![使用日历的行动时间](img/1321_08_11.jpg)
- en: Open the new **Events** page on the ad canvas and add a button to the canvas
    from the object library. Change the text in the button to read `Add to calendar`.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在广告画布上打开新的 **Events** 页面，并从对象库中将一个按钮添加到画布中。将按钮中的文本更改为 `添加到日历`。
- en: 'With the button selected, add an `Execute JavaScript` event for when the object
    is `Touched Up Inside`. Delete the placeholder comment and add the following lines
    of code:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择按钮后，为当对象被 `Touched Up Inside` 时添加一个 `Execute JavaScript` 事件。删除占位符注释并添加以下代码行：
- en: '[PRE10]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Using the `Date.parse` function, we convert a human-readable date into a format
    that JavaScript can understand. JavaScript uses the number of milliseconds since
    January 1, 1970, 00:00:00 UTC to calculate its date and times.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `Date.parse` 函数，我们将可读日期转换为JavaScript可以理解的格式。JavaScript使用自1970年1月1日00:00:00
    UTC以来的毫秒数来计算其日期和时间。
- en: 'We need to convert the JavaScript time to a format that iAd and iOS can understand.
    We''ll do this using the `Date` function. Add these lines directly after the last
    two:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要将JavaScript时间转换为iAd和iOS可以理解的形式。我们将使用`Date`函数来完成这项工作。直接在最后两条语句之后添加以下代码：
- en: '[PRE11]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This creates a new `date` object from the millisecond time that JavaScript understands.
    A `date` object has a range of functions we can use to convert the date into a
    variety of formats.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将从JavaScript理解的毫秒时间创建一个新的`date`对象。`date`对象有一系列我们可以使用的函数，可以将日期转换为各种格式。
- en: Note
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Notice, we didn't include `var` this time before the `startTime` variable name.
    This is because you only need to declare `var` the first time you create the variable.
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，这次我们在`startTime`变量名之前没有包含`var`。这是因为你只需要在第一次创建变量时声明`var`。
- en: 'Using our `date` object that we just created, we can access an ISO date string
    of our date required by the iAd calendar. Continue adding the following code to
    our code:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们刚刚创建的`date`对象，我们可以访问iAd日历所需的日期的ISO日期字符串。继续将以下代码添加到我们的代码中：
- en: '[PRE12]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This accesses our `startDate` date object and calls its `toISOString` function;
    we then save this value in the variable `startDateISO`. An ISO date string is
    an internationalized standard, and used by our iAd to create the calendar dates.
    We could just cut out these steps and create the ISO date string directly. However,
    it's better to work with more manageable readable dates. For example, the ISO
    date for our start time is `2011-08-16T13:30:00.000Z`.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这访问我们的`startDate`日期对象并调用其`toISOString`函数；然后我们将此值保存在变量`startDateISO`中。ISO日期字符串是一个国际化标准，由我们的iAd用于创建日历日期。我们本可以直接跳过这些步骤并直接创建ISO日期字符串。然而，与更易于管理的可读日期一起工作会更好。例如，我们开始时间的ISO日期是`2011-08-16T13:30:00.000Z`。
- en: 'With our start date in the right format, we also need to create an end date
    and time for our event. We''ll do this in exactly the same way as our start time,
    but use a different time in the future. Add the following block of code:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的开始日期以正确格式的情况下，我们还需要为我们的活动创建一个结束日期和时间。我们将以与开始时间完全相同的方式执行此操作，但使用未来的不同时间。添加以下代码块：
- en: '[PRE13]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Exactly as we did for our start time, we now have an ISO date string for the
    end time of our event.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如我们对开始时间所做的那样，我们现在有了事件结束时间的ISO日期字符串。
- en: Note
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To update this for your own event, you'd adjust the start time and end time
    in the `Date.parse()` function. Use the preceding examples as a template for your
    time. To specify different time zones, you can add the offset after the `GMT`
    at the end. For example, `GMT+0430` would offset the time four and a half hours
    east of the Greenwich meridian and `GMT-400` would offset the time four hours
    west of GMT and give you USA Eastern Time.
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要更新您自己的事件，您需要在`Date.parse()`函数中调整开始时间和结束时间。使用前面的示例作为模板来设置时间。要指定不同的时区，您可以在`GMT`之后添加偏移量。例如，`GMT+0430`将使时间比格林尼治子午线东四小时半，而`GMT-400`将使时间比GMT西四小时，并给您美国东部时间。
- en: 'With our dates ready, we can now create the event object required by the iAd
    framework. Add this code to the end of your `touch Up Inside` event function:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的日期已经准备好了，现在我们可以创建iAd框架所需的事件对象。将以下代码添加到您的`touch Up Inside`事件函数的末尾：
- en: '[PRE14]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This object contains a list of properties and values required to create an event.
    We're able to take the `startDateISO` and `endDateISO` values and add them to
    the `start` and `end` properties of our object.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此对象包含创建事件所需的属性和值列表。我们可以将`startDateISO`和`endDateISO`值添加到我们的对象的`start`和`end`属性中。
- en: Before we're able to display the calendar window, we need to tell our ad where
    to position the calendar **popover**. A popover is an iPad-specific element that
    overlays on top of the other user interface objects, and typically appears next
    to the button that activated it. We need to get the position of our button and
    adjust it slightly to display the calendar popover in the right place. Assuming
    your button is near the center of the screen, return to the iAd Producer canvas
    and select the button object. Open the inspector pane and expand the **Layout**
    section:![Time for action — using the calendar](img/1321_08_12.jpg)
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们能够显示日历窗口之前，我们需要告诉广告在哪里定位日历**弹出视图**。弹出视图是一个仅在iPad上使用的元素，它覆盖在其他用户界面对象之上，通常出现在激活它的按钮旁边。我们需要获取按钮的位置并稍作调整，以便在正确的位置显示日历弹出视图。假设您的按钮位于屏幕中央，请返回到iAd
    Producer画布并选择按钮对象。打开检查器面板并展开**布局**部分：![使用日历的行动时间](img/1321_08_12.jpg)
- en: 'We can use these layout metrics to calculate the X and Y positions of our popover.
    The X position is how far left our popover should show from, and Y is how far
    from the top of the device screen it should be. To calculate the X position and
    cause our popover to appear to the right of our button, we take the **Left** value,
    in this case, above **394** and add it to the **Width**, in this case, **236**,
    giving a final X value of `630`. We want the popover to appear in the center right
    of the button, so our Y value is calculated by taking the **Top** value, in this
    example **360**, and adding half of the button **Height**, in this case **24**,
    giving a final Y value of `384`. With these values, we can create our position
    object and add the following to the function:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用这些布局指标来计算我们的弹出窗口的X和Y位置。X位置是指我们的弹出窗口应该从左侧显示多远，Y是指从设备屏幕顶部应该有多少距离。为了计算X位置并使我们的弹出窗口看起来在按钮的右侧，我们取**左**值，在这个例子中是**394**，然后加上**宽度**，在这个例子中是**236**，得到最终的X值为`630`。我们希望弹出窗口出现在按钮的右中心，所以我们的Y值是通过取**顶**值，在这个例子中是**360**，然后加上按钮**高度**的一半，在这个例子中是**24**，得到最终的Y值为`384`。有了这些值，我们可以创建我们的位置对象，并将以下内容添加到函数中：
- en: '[PRE15]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Because we're using integers—number values, instead of strings, we don't need
    to wrap our position values in quotes.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为我们使用的是整数——数值，而不是字符串，所以我们不需要用引号将我们的位置值括起来。
- en: Note
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As this is only necessary on iPad, we would leave the `calPosition` empty for
    an iPhone ad because it uses the entire screen when adding a calendar event. Remember,
    if you move your button, you'll also have to update these values.
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于这仅在iPad上必要，因此对于iPhone广告，我们会将`calPosition`留空，因为添加日历事件时它使用整个屏幕。记住，如果你移动你的按钮，你也必须更新这些值。
- en: 'We''ll quickly create an empty listener like we did for our e-mail composer.
    We don''t need any feedback to successful or failed calendar events, so we can
    just use the following:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将快速创建一个空监听器，就像我们为电子邮件编辑器所做的那样。我们不需要任何关于成功或失败日历事件的反馈，所以我们只需使用以下内容：
- en: '[PRE16]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This will prevent the calendar from not showing because it can't find the listener.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将防止日历不显示，因为它找不到监听器。
- en: 'With all our objects set up, we can finally tell the iAd framework to show
    the popover. Add this final line of code to the end of our function:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置好所有对象之后，我们最终可以告诉iAd框架显示弹出窗口。将以下代码行添加到函数的末尾：
- en: '[PRE17]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This tells our advert's calendar to present the event popover and passes it
    the event object that we created, the empty listener, and the position object
    for the location of the popover on the screen.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这告诉我们的广告日历显示事件弹出窗口，并传递我们创建的事件对象、空监听器和弹出窗口在屏幕上的位置对象。
- en: 'Save the project and then test your new button! Your final code should look
    like the following screenshot:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存项目，然后测试你的新按钮！你的最终代码应该看起来像以下截图：
- en: '![Time for action — using the calendar](img/1321_08_18.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间——使用日历](img/1321_08_18.jpg)'
- en: What just happened?
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发生了什么？
- en: 'Using the Date object in JavaScript, we converted human-readable dates into
    a format that our iAd and iOS device could translate into a machine-readable format.
    By creating two dates, for the start and end time of an event, we then set up
    an event object that we can pass to the device. This event object holds details
    of the event along with the start and end time we converted. Finally, as our ad
    was for the iPad, we had to set up an object defining the X and Y positions on
    the screen where the popover should appear. Our popover calendar will look a little
    like the following screenshot:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JavaScript中的Date对象，我们将可读的日期转换为我们的iAd和iOS设备可以转换成机器可读格式的格式。通过创建两个日期，用于事件的开始和结束时间，然后设置一个事件对象，我们可以将其传递给设备。这个事件对象包含了事件的详细信息以及我们转换的开始和结束时间。最后，由于我们的广告是为iPad设计的，我们必须设置一个对象，定义弹出窗口在屏幕上的X和Y位置。我们的弹出窗口日历将看起来像以下截图：
- en: '![What just happened?](img/1321_08_13.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![发生了什么？](img/1321_08_13.jpg)'
- en: The popover gives the user the chance to edit the event, make the event reoccurring,
    or add an alarm to remind them. Once the user taps, the event is added to the
    in-built calendar app on their device, ensuring we keep presence with the user
    after they've closed our ad.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 弹出窗口给用户提供了编辑事件、使事件重复或添加闹钟以提醒他们的机会。一旦用户点击，事件就会被添加到他们设备内置的日历应用中，确保我们在用户关闭我们的广告后仍然与他们保持联系。
- en: On the iPhone, we wouldn't need to set a coordinate for the popover and leave
    the position object empty because the iPhone automatically fills the entire screen
    with our calendar view.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在 iPhone 上，我们不需要设置弹出视图的坐标并留空位置对象，因为 iPhone 会自动用我们的日历视图填满整个屏幕。
- en: Have a go hero
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下英雄
- en: 'A button in the middle of a blank page isn''t very compelling and unlikely
    to inspire our user to add the event to their calendar. Make your page interesting
    with some images and information about the event, for example, why not try the
    following:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在空白页面的中间放置一个按钮并不很有吸引力，也不太可能激发用户将事件添加到他们的日历中。用一些关于事件的图片和信息让你的页面更有趣，例如，为什么不尝试以下方法：
- en: Add one or more pictures from past events
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个或多个过去事件的图片
- en: Use labels with details of the event
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用包含事件详细信息的标签
- en: Update the background of the page so it matches the rest of our advert
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新页面背景，使其与我们的广告其余部分相匹配
- en: Don't forget to include a back button so the user can return to the main menu!
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要忘记包括一个返回按钮，以便用户可以返回主菜单！
- en: Playing audio
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 播放音频
- en: iAd Producer has an audio object where the user can tap a play button to hear
    an audio file included in our ad. This works great for songs and sound bites,
    but we can also trigger audio clips from JavaScript. As we're using JavaScript
    to play our audio file, we can use any event in our ad to initiate the audio.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: iAd Producer 有一个音频对象，用户可以点击播放按钮来听我们广告中包含的音频文件。这对于歌曲和声音剪辑非常有效，但我们也可以从 JavaScript
    触发音频剪辑。由于我们使用 JavaScript 播放音频文件，因此我们可以使用广告中的任何事件来启动音频。
- en: Time for action — controlling an audio player
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 — 控制音频播放器
- en: 'Let''s combine an audio object from the object library with some JavaScript
    code to make our audio clip play every time the user shakes the device:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们结合对象库中的音频对象和一些 JavaScript 代码，以便每次用户摇动设备时播放音频剪辑：
- en: We'll use our example project `Dino Stores` that we built at the beginning of
    the book and make the dinosaurs roar each time they shake our **Shake to Change**
    gallery. Open the project in iAd Producer now. If you haven't completed the project,
    you can use the `6.Dino Stores - Store Finder` in the `Dino Stores` exercises
    folder.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用本书开头构建的示例项目 `Dino Stores`，并在每次摇动我们的 **Shake to Change** 展览时让恐龙咆哮。现在在 iAd
    Producer 中打开项目。如果您尚未完成项目，可以使用 `Dino Stores` 练习文件夹中的 `6.Dino Stores - Store Finder`。
- en: Open the **Shake to Change** page on the canvas. From the object library, add
    an audio object to the canvas and position it off screen so the user won't be
    able to see it.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在画布上打开 **Shake to Change** 页面。从对象库中添加一个音频对象到画布，并将其放置在屏幕之外，以便用户看不到它。
- en: With the object selected, expand the inspector pane and select **roar-noise.m4a**
    as the audio clip's file, as shown in the following screenshot:![Time for action
    — controlling an audio player](img/1321_08_16.jpg)
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择对象后，展开检查器面板并选择 **roar-noise.m4a** 作为音频剪辑的文件，如图所示：![行动时间 — 控制音频播放器](img/1321_08_16.jpg)
- en: Select the shake view object by clicking on the dinosaur image. Right-click
    on it and select **Object Events** | **Did Shake** | **Execute JavaScript**. This
    will open the code editor and add a placeholder function for this event.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击恐龙图像选择摇动视图对象。右键单击它并选择 **对象事件** | **Did Shake** | **执行 JavaScript**。这将打开代码编辑器并为该事件添加一个占位符函数。
- en: 'When the shake event occurs, we want our audio object to play, so add this
    JavaScript to the function:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当摇动事件发生时，我们希望我们的音频对象播放，因此将以下 JavaScript 添加到函数中：
- en: '[PRE18]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This simply gets the audio object from our page and calls its `play` function,
    which surprisingly will make our audio clip play! Make sure the outlet value in
    the object's inspector is set to `audio`. It should be this by default if it's
    the only audio object on the page.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这只是从我们的页面获取音频对象并调用其 `play` 函数，令人惊讶的是，这将使我们的音频剪辑播放！请确保对象检查器中的输出值设置为 `audio`。如果它是页面上唯一的音频对象，则默认情况下应该是这样的。
- en: Close the code editor and test the ad. Navigate to the **Shake to Change** page
    then shake the device. You'll hear the dinosaurs roar as the pages change.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭代码编辑器并测试广告。导航到 **Shake to Change** 页面然后摇动设备。当页面改变时，你会听到恐龙咆哮。
- en: What just happened?
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: By adding an audio object to our page, we can access it through JavaScript using
    its `outlet` property. We moved the audio object off the canvas, so it's included
    in the page but not visible to the user, and when the shake event of our shake
    view occurred, we called the `play` function of the audio object. You might notice
    a delay the first time the device is shaken as the audio loads, but subsequent
    shakes will cause the audio to play immediately as the device will cache it. To
    minimize the delay, keep the audio short and optimized, as obviously, smaller
    files will play quicker than larger ones.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在我们的页面上添加音频对象，我们可以通过其`outlet`属性使用JavaScript访问它。我们将音频对象从画布上移除，因此它包含在页面中但不可见给用户，当我们的摇动视图的摇动事件发生时，我们调用了音频对象的`play`函数。你可能会注意到第一次摇动设备时会有延迟，因为音频正在加载，但随后的摇动将使音频立即播放，因为设备会将其缓存。为了最小化延迟，请保持音频短小并优化，因为显然，较小的文件比较大的文件播放得更快。
- en: Tweeting with Twitter
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Twitter发推文
- en: When Apple released iOS 5 in the fall of 2011, they included support for tweeting
    text, links, and images direct from various parts of the operating system. This
    **Twitter** support has been extended to our iAds and is a great marketing tool
    due to its sharing reach.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 当苹果公司在2011年秋季发布iOS 5时，他们包括了从操作系统的各个部分直接推文文本、链接和图像的支持。这种**Twitter**支持已扩展到我们的iAds，并且由于其分享范围，它是一个伟大的营销工具。
- en: Twitter is a popular micro-blogging service where users can send small, timely
    updates, limited to 140 characters to people who follow, or subscribe, to them.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: Twitter是一个流行的微博服务，用户可以向关注或订阅他们的人发送简短、及时更新，这些更新限制在140个字符以内。
- en: Time for action — tweeting the tweet
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 — 发推文
- en: 'As not every device will necessarily be running iOS 5, we''ll create a check
    to ensure that the device supports Twitter, and then let the user tweet and share
    an update about our brand:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 由于并非每个设备都一定运行iOS 5，我们将创建一个检查以确保设备支持Twitter，然后让用户发推文并分享关于我们品牌的更新：
- en: Open the `Dino Stores` project we used in the last exercise. We'll add a button
    to the menu screen that'll open up the Twitter dialog. Open the menu page on the
    canvas and then drag the button from the object library.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们在上一个练习中使用的`Dino Stores`项目。我们将在菜单屏幕上添加一个按钮，该按钮将打开Twitter对话框。在画布上打开菜单页面，然后从对象库中拖动按钮。
- en: Position the menu near the bottom of the page and expand it to fill the width.
    Update the text with a call to action, such as `Tweet a dino fact!`. Your button
    may look a little like the following screenshot:![Time for action — tweeting the
    tweet](img/1321_08_19.jpg)
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将菜单放置在页面底部附近，并扩展以填充宽度。更新文本，例如使用行动号召，如`推一个恐龙事实！`。你的按钮可能看起来像以下截图：![行动时间 — 发推文](img/1321_08_19.jpg)
- en: Click and select the button, and select **Execute JavaScript** as the **Touched
    Up Inside** action to create the event and automatically open the code editor.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击并选择按钮，然后选择**执行JavaScript**作为**内部触摸**动作以创建事件并自动打开代码编辑器。
- en: 'Remove the placeholder comment `//Code here` and replace it with the following
    code:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除占位符注释`//Code here`，并用以下代码替换：
- en: '[PRE19]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This checks if the Twitter composer is available and then adds the text and
    URL that'll compose the tweet. Anything contained in between the curly braces
    after the `if(window.ad.twitterComposer)` will only run if the Twitter composer
    object exists. We can now add an `else` block of code that'll run if the Twitter
    composer is unavailable.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将检查Twitter作曲家是否可用，然后添加将要发推文的文本和URL。在`if(window.ad.twitterComposer)`之后的括号内的任何内容，只有在Twitter作曲家对象存在时才会运行。现在我们可以添加一个`else`代码块，如果Twitter作曲家不可用，它将运行。
- en: 'Immediately after the code we just added, insert the following:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们刚刚添加的代码之后立即插入以下内容：
- en: '[PRE20]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This will only run if the earlier check doesn't find the Twitter composer to
    be available; and will cause an alert to be presented to the user.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这只会在之前的检查没有找到Twitter作曲家可用时运行；并将向用户显示一个警告。
- en: We can test our ad out, either in the iOS Simulator or on a device. You'll need
    to make sure your iPhone or iPod is running iOS 5 and that you've configured your
    Twitter account. When using the simulator, you can change the version of iOS it
    is running from iAd Producer. From the menu bar, select **Export** | **Simulator
    iOS Version** | **iOS 5.x**. Save your project and click on the **Simulate** button.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以在iOS模拟器或设备上测试我们的广告。你需要确保你的iPhone或iPod运行iOS 5，并且你已经配置了你的Twitter账户。当使用模拟器时，你可以通过iAd
    Producer更改其运行的iOS版本。从菜单栏选择**导出** | **模拟器iOS版本** | **iOS 5.x**。保存你的项目并点击**模拟**按钮。
- en: Note
  id: totrans-207
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To log in to Twitter on your iOS device or in the simulator, open the **Settings**
    app and then select **Twitter**. You'll be prompted for your username and password
    and have the opportunity to create an account, if you haven't already.
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要在iOS设备或模拟器上登录Twitter，请打开**设置**应用，然后选择**Twitter**。您将被提示输入用户名和密码，如果您还没有，您还有机会创建账户。
- en: Clicking on the **Tweet** button will now open up the **Twitter composer** window
    that we configured:![Time for action — tweeting the tweet](img/1321_08_20.jpg)
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**推文**按钮现在将打开我们配置的**Twitter编辑器**窗口：![行动时间——推文推文](img/1321_08_20.jpg)
- en: If you see our error alert message appear, make sure you're running iOS 5 with
    your account configured correctly! You can upgrade your device using iTunes.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您看到我们的错误警报信息出现，请确保您正在使用iOS 5，并且您的账户配置正确！您可以使用iTunes升级您的设备。
- en: What just happened?
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: Using the Twitter composer, introduced in iOS 5, we tweeted a basic text tweet
    with a link attached to it. If we tried to access the Twitter composer when our
    user wasn't on a Twitter-enabled device, our ad would crash. So checking its availability
    is vital when targeting older versions of iOS.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 使用iOS 5中引入的Twitter编辑器，我们发布了一条带有链接的基本文本推文。如果我们尝试在用户不在Twitter支持设备上时访问Twitter编辑器，我们的广告可能会崩溃。因此，当针对较旧的iOS版本时，检查其可用性是至关重要的。
- en: Have a go hero
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下英雄
- en: 'If you feel confident with your Twitter code, consider improving it as follows:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对您的Twitter代码有信心，考虑如下改进：
- en: Change the simulator version to a version prior to iOS 5, so you can test the
    fallback message.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将模拟器版本更改为iOS 5之前的版本，以便您可以测试回退消息。
- en: For the more advanced user, consider hiding the button when the Twitter composer
    isn't available. We could do this using the page event **viewControllerViewDidAppear**,
    the `if` statement we used earlier, and setting the `hidden` property of the button
    outlet to `true`.
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于更高级的用户，考虑在Twitter编辑器不可用时隐藏按钮。我们可以使用页面事件**viewControllerViewDidAppear**，我们之前使用的`if`语句，并将按钮输出端的`hidden`属性设置为`true`。
- en: The debugger
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试器
- en: We're not all perfect, and sometimes we'll make mistakes when writing our JavaScript
    code; fortunately, iAd Producer has two built-in tools it uses to highlight and
    discover errors in your code.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我们并不都是完美的，有时我们在编写JavaScript代码时会犯错；幸运的是，iAd Producer有两个内置工具，用于突出显示和发现您代码中的错误。
- en: Error checking syntax
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误检查语法
- en: If you have an error with your code syntax—the rules that define the structure
    of your code, iAd Producer will prompt you when you try to save that JavaScript
    file. iAd Producer identifies the line where your error occurs and allows you
    to save the file anyway (not recommended) or edit it.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的代码语法有错误——定义您代码结构的规则，当您尝试保存该JavaScript文件时，iAd Producer会提示您。iAd Producer会识别出错误发生的行，并允许您保存文件（不推荐）或编辑它。
- en: '![Error checking syntax](img/1321_08_14.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![错误检查语法](img/1321_08_14.jpg)'
- en: 'General syntactical errors you should check for include:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该检查的一般语法错误包括：
- en: Forgetting to end a line with a semicolon.
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 忘记在行末加上分号。
- en: Not separating an object or array values with a comma.
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有使用逗号分隔对象或数组值。
- en: Including a comma on the last item in an array or an object. For example, `['item
    one', 'item two', last item',]` would be incorrect as there is an extra comma
    at the end.
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在数组或对象中的最后一个项目后包含一个逗号。例如，`['item one', 'item two', last item',]` 将是不正确的，因为末尾有一个多余的逗号。
- en: Using the incorrect case. JavaScript and its variables are case sensitive, so
    `thisVariable` and `ThisVARIABLE` are considered two separate values.
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用错误的案例。JavaScript及其变量是区分大小写的，所以`thisVariable`和`ThisVARIABLE`被认为是两个不同的值。
- en: Forgetting to close a bracket or brace.
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 忘记关闭括号或大括号。
- en: Using the debugger
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用调试器
- en: If your code is syntactically correct but has errors when it's running, the
    debugger window will appear and highlight the line of code where the error occurred.
    For example, if we try and access a variable that we haven't assigned a value
    to, we might find the debugger showing a warning of accessing an undefined function
    or value.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的代码在语法上是正确的，但在运行时出现错误，调试器窗口将出现并突出显示发生错误的代码行。例如，如果我们尝试访问一个尚未分配值的变量，我们可能会发现调试器显示访问未定义函数或值的警告。
- en: '![Using the debugger](img/1321_08_15.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![使用调试器](img/1321_08_15.jpg)'
- en: If you're familiar with development, you can set breakpoints to pause your ad
    at certain parts of your code. To set these, just double-click on the line number
    of the line you'd like to pause at. You can then use the **continue** button in
    iAd Producer to resume the execution of the JavaScript.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉开发，你可以在代码的特定部分设置断点以暂停广告。要设置这些断点，只需双击你想要暂停的行号。然后，你可以在iAd Producer中使用**继续**按钮来恢复JavaScript的执行。
- en: Coding conventions
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码规范
- en: 'When you''re writing JavaScript code, you should make sure it complies with
    some basic rules and best practices used by developers:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编写JavaScript代码时，你应该确保它符合开发者使用的某些基本规则和最佳实践：
- en: Name the start variables with lowercase by using camel case, which we looked
    at earlier in the chapter. Variable names should be verbose and relevant to the
    data they hold.
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用我们之前在本章中讨论的驼峰命名法，用小写字母命名起始变量。变量名应该是详尽的，并且与它们所持有的数据相关。
- en: Comment your code so it's understandable to you when you revisit the code, and
    clear for other developers that may look at it in the future.
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注释你的代码，以便你在重新访问代码时能理解，并对未来可能查看它的其他开发者来说清晰易懂。
- en: End each statement with a semicolon.
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个语句都以分号结束。
- en: 'Code within functions should be indented from the edge using the *Tab* key
    or four spaces. Notice how the second example is more readable and clear:'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用*Tab*键或四个空格将函数内的代码缩进。注意第二个示例如何更易于阅读和清晰：
- en: '![Coding conventions](img/1321_08_17.jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![编码规范](img/1321_08_17.jpg)'
- en: Have a go hero
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下英雄
- en: 'Having learnt some example code snippets, the style that your code should be,
    and how to identify and fix errors in your code, you could add some enhanced functionality
    to the other example projects we''ve created so far. You could:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 学习了一些示例代码片段、代码应有的风格以及如何识别和修复代码中的错误后，你可以为我们迄今为止创建的其他示例项目添加一些增强功能。你可以：
- en: Add an audio clip to your shake view in the `Coffee Beans` project
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`Coffee Beans`项目中为摇动视图添加音频片段
- en: Add multiple event buttons to the upcoming **Events** page in the `Cloud 9 -
    iPad` project, each creating calendar events with different times and details
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`Cloud 9 - iPad`项目中添加多个事件按钮到即将到来的**事件**页面，每个按钮创建具有不同时间和详细信息的日历事件
- en: This should show you how multiple event functions can exist within one page's
    JavaScript file
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这应该展示了如何在单个页面的JavaScript文件中存在多个事件函数
- en: Note
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You may want to consider renaming your button outlets when you have multiple
    buttons on screen. This will make navigating between the functions in your JavaScript
    file easier.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在屏幕上有多按钮时，可能需要考虑重命名你的按钮输出。这将使在JavaScript文件中的函数之间导航更容易。
- en: Read the Apple documentation to find out the other possibilities of JavaScript
    in your iAd, available at [http://developer.apple.com](http://developer.apple.com)
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读Apple文档以了解JavaScript在您的iAd中的其他可能性，可在[http://developer.apple.com](http://developer.apple.com)找到
- en: Create an entirely new ad for your own product or brand, using a variety of
    techniques that you've learnt so far
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用你迄今为止学到的各种技术，为你的产品或品牌创建一个全新的广告
- en: Summary
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'JavaScript is an incredibly powerful and versatile language, which, coupled
    with the iAd JS framework, can create some amazingly dynamic and rich ads. In
    this chapter, we''ve only brushed upon the potential of expanding our iAds with
    simple code snippets that have allowed us to:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是一种非常强大且灵活的语言，与iAd JS框架结合使用，可以创建一些令人惊叹的动态和丰富的广告。在本章中，我们只简要介绍了通过简单的代码片段扩展我们的iAds的潜力，这些代码片段允许我们：
- en: Edit values of objects that aren't exposed to us in the iAd Producer inspector
    pane
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑在iAd Producer检查器面板中未向我们暴露的对象的值
- en: Add events to the user's calendar and continue to remind them of us once they've
    left our ad
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将事件添加到用户的日历中，并在他们离开我们的广告后继续提醒他们
- en: Send e-mails with dynamic content to let users contact us
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用动态内容发送电子邮件，让用户联系我们
- en: Use the code editor and debugger to catch common errors
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用代码编辑器和调试器来捕获常见错误
- en: With our adverts looking great, having rich interactivity, and giving our users
    memorable experiences, let's take a look at the logistics of managing a successful
    iAd campaign.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的广告看起来很棒，具有丰富的交互性，并为我们的用户提供难忘的体验时，让我们来看看管理成功的iAd活动的后勤工作。
