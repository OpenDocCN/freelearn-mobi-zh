- en: Chapter 8. Enhancing Our App with Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: iAd Producer manages the HTML, CSS, and JavaScript that power our iAd, meaning
    we can make a visually impacting ad without any knowledge of these web technologies.
    We're able to extend the interactivity of our ads by adapting and adding to the
    JavaScript source code generated by iAd Producer. We'll go through some of the
    projects that you've been working on and enhance their interactivity with simple
    and effective tweaks to the JavaScript.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter, you''ll learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What JavaScript is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iAd Producer's code editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending e-mails and SMS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving calendar events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While this chapter won't make you a JavaScript master, you'll have an understanding
    of what's happening and be able to apply these snippets and examples to your own
    amazing iAd projects.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript, often abbreviated to JS, is a lightweight language created to enhance
    the interactivity of the web by Brendan Eich of Netscape in 1995\. JavaScript
    uses **objects**, an item that can contain one or more **functions** and **properties**.
    A function is a list of actions that occurs when called by the user or code, and
    a property, or variable, is a value that is stored within an object.
  prefs: []
  type: TYPE_NORMAL
- en: If you're already familiar with programming, you'll find that JavaScript was
    highly influenced by the C language. JavaScript is finding increased use in applications
    beyond the web browser and is a powerful and useful language to learn.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Contrary to popular misconceptions, JavaScript doesn't bear a relationship to
    the Java language. It was initially named Mocha, then LiveScript, and finally
    changed to JavaScript—a trademark of Sun Microsystems.
  prefs: []
  type: TYPE_NORMAL
- en: Don't worry if you haven't used JavaScript before, we'll go through each exercise
    step-by-step and explain how the code is interacting with our ad and its components.
  prefs: []
  type: TYPE_NORMAL
- en: The code editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: iAd Producer has a built-in code editor that we'll use to edit our JavaScript
    code. It is essentially a basic text editor with a few handy tools, such as coloring
    our code to make it more readable and basic error checking.
  prefs: []
  type: TYPE_NORMAL
- en: 'Whenever you create a new page in your project, iAd Producer automatically
    generates a hidden JavaScript file that you can view by selecting **Code** | **Show
    Code Editor** from the menu bar in the iAd Producer. Each object also has its
    own JavaScript file that is used to call functions when an event occurs (such
    as a touch or swipe). To view an object''s code, open the editor with the object
    selected. You can see an example of the code editor in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The code editor](img/1321_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Accessing page objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whenever we add an object to a page's canvas, we're able to access and edit
    certain properties of it using some JavaScript code. This allows you to edit properties
    that aren't available in the iAd Producer interface or change objects in your
    ad to respond to a user's input.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — accessing an object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s continue using the `Cloud 9 - iPad` ad that we created in the last chapter.
    We''ll add some tweaks to our **Test Flight** page''s scroll view object that
    wouldn''t be possible with the iAd Producer interface:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project `Cloud 9 - iPad` in iAd Producer. If you didn't complete this
    project, then open the file `8\. Store Finder.iadproj` in the folder `Cloud 9`
    and then `Exercises`. This file has the previous exercises completed for you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the first page, **Test Flight**, from the ad overview to open
    it on the canvas. Right-click on the hatched background outside of the canvas
    and expand the menu item **Page Events** | **View Did Load** | **Execute JavaScript**.
    This will automatically create the required function for this event and open the
    code editor for this page:![Time for action — accessing an object](img/1321_08_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the code editor window, iAd Producer has created a new function for this
    page that will be called and run when the view appears. The `//Code goes here`
    placeholder comment shows you where to put your custom code for this event. Delete
    the placeholder comment and add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: In JavaScript, anything on a line following `//` is a comment and will be ignored
    when run. If you want to have a multiline comment, use `/* comment goes here */`.
    Comments are useful as they can be used to remind you (or inform other developers
    working on your code) why you've done things in a certain way. The code editor
    will turn comments green to distinguish them from the JavaScript.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The first line is a comment saying what we're doing, which is retrieving the
    scroll view object from the page and storing a reference of it in a variable,
    indicated with `var` and called `scrollView`. Each object on the page is assigned
    a unique outlet name. To find or modify the outlet value for an object, click
    and select it from the canvas and open the inspector pane. Expand the **Properties**
    section and you'll see a text box with the outlet name. You're able to change
    this to something more memorable, if you have multiple objects of the same type
    on the page:![Time for action — accessing an object](img/1321_08_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we have our outlet easily accessible with the `scrollView` variable,
    we can manipulate it by adjusting its properties. Add the following lines to your
    function in the code editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: To disable a property, we use the `false` value, and we use the `true` value
    to enable it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This will disable the vertical scrolling of our scroll view so it only can
    be scrolled left and right by the user. As we''re preventing vertical scrolling,
    we should also prevent the vertical scroll bars from appearing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: By setting the `showsVerticalScrollIndicator` property of our scroll view object
    to `false`, we disabled the vertical scroll bar from appearing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your complete code should look similar to the following image in the code editor:![Time
    for action — accessing an object](img/1321_08_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your project and test the ad in the iOS Simulator or on a device using
    iAd Tester. You'll notice that the scroll view can no longer be scrolled up and
    down, only left and right, and a vertical scroll bar does not appear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We used the `onViewControllerViewDidLoad` event function that is called once
    the page has completed loading and modified some properties of our scroll view
    object. iAd Producer doesn't allow certain properties to be accessed, so it can
    keep its user interface clean and understandable. By hiding advanced functionality
    from beginners, they make starting out with iAd creation less overwhelming. As
    you're now an iAd pro, we can take the plunge into JavaScript to create better
    ads.
  prefs: []
  type: TYPE_NORMAL
- en: Handling user events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whenever an action on our ad is initiated by the user, or by the system, an
    event is called. We're able to add a JavaScript function to a variety of events
    in our ad, such as taps on buttons, device shakes, and orientation changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Events are separated into three groups:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Global Events:** These occur for the entire ad'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Page Events:** These are related to a particular page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Object Events:** These are specific to one object on a page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, the user shaking the device or the ad finishing the loading is
    a global event, a page loading or appearing is a page event, and a button being
    touched would be an object event. You can view the event hierarchy here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Handling user events](img/1321_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Sending SMS and e-mails
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: iAd Producer doesn't have an object or template available for sending e-mails
    or SMS, but the iAd JS framework that powers our iAd has a simple way of presenting
    the user with an e-mail dialog.
  prefs: []
  type: TYPE_NORMAL
- en: You may remember we briefly touched upon this in [Chapter 6](ch06.html "Chapter 6. Ad
    Destinations and Actions"), *Ad Destinations and Actions*, when we added the ability
    to share our ad using SMS. This time, we'll take a deeper look at the code and
    what is happening at each step and send an e-mail instead.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — detecting a tap and sending an e-mail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Continuing to enhance our `Cloud 9` ad, we'll add a button to our **Book a flight**
    page that will pre-fill the e-mail component with our booking center's e-mail
    address.
  prefs: []
  type: TYPE_NORMAL
- en: If it isn't already, open the `Cloud 9 - iPad` project in iAd Producer. Double-click
    on the **Book a flight** page to open it on the ad canvas. Using the page toggle
    above the canvas, change to the **Map Details** view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the object library, add a **Button** to the canvas. Open the inspector
    and change the outlet name to `emailButton`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: When naming outlets, you should start in lowercase and then use camel case;
    this means each subsequent word after the first should be capitalized. For example,
    *youShouldCapitalizeEveryFirstLetterOfEachWord*. Doing so makes it easier to read
    and understand what each outlet does.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Update the button text to read `Book a flight now!`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the button selected, expand the **inspector** pane and find the **Events**
    section. The **Touched Up Inside** event will already be selected, but without
    an action. We use the **Touched Up Inside** event to detect a person releasing
    their finger from a tap on the object. We use **Touched Up Inside** instead of
    **Touched Down Inside**, as the **Touch Down** event is called as soon as the
    user touches on the object. This can create a jarring experience for the user
    as accidental taps are more likely to occur on touchdown. Change the action for
    the event to **Execute JavaScript:**![Time for action — detecting a tap and sending
    an e-mail](img/1321_08_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The code editor will appear; delete the `// Code here` placeholder comment
    and add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This sets the **listener** property of our advert's `mailComposer` object to
    an empty function. Listener's are functions that are called once another action
    completes; for example, our listener is called when an e-mail is successfully
    sent or if it fails for any reason. For now, we're just using an empty function
    because we don't need to handle any sending errors or successes differently. Without
    an empty function, our ad would crash as it would try to find something that doesn't
    exist.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s set our recipient e-mail address, which is the e-mail account that will
    receive any bookings. Add the following code after our listener and update `your@emailaddress.com`
    with your own e-mail address so you''re able to test whether it works later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice the square brackets? They indicate whether anything within them is in
    an array. Think of it as a list of items wrapped within the square brackets. Each
    item of the array is separated by a comma, so if you wanted to include multiple
    recipients, you'd use `["recipientOne@email.com", "recipientTwo@email.com"]` and
    so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Although we only passed one item to the recipients, we still had to use an array
    because that's what the `toRecipients` property expects.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'With our recipient list set, we can set the `subject` property for our e-mail,
    while continuing to build up the code in the editor by adding the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This simply sets the `subject` property of our ad''s mail composer to a **string**
    —a block of text contained with quotes. We''ll pre-fill the body—the main content,
    of our e-mail:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Unlike our other properties, the body text isn't set using the `=` assignment
    but by adding values with two brackets. The items contained within these brackets
    are passed to the `setMessageBody` function of the mail composer. It accepts two
    arguments, items required by the function, in this case, a string for the body
    text, and a Boolean value indicating if the body text is an HTML string. A Boolean
    value is a simple yes or no switch, using `true` or `false` respectively. If we
    wanted to add HTML web content to our e-mail, we could use`<img src='http://awebsite.com/animage.png'
    />` as the string and `true` for the Boolean. This would show an image in our
    e-mail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: To call or invoke a function, you use the function name followed by `()`. JavaScript
    functions can also be properties, which is why `window.ad.mailComposer.setMessageBody`
    needs to be set using values wrapped in `(` and `)`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'With all the required info set for our `mailComposer` property, we can now
    present the user with the mail composer view. Add this final line of code to the
    editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This simply calls the mail composer's `presentComposer` function, which tells
    the iOS device to show the e-mail window and pre-fills it to the values we set.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice how the code is indented in from the left of the screen; each line of
    code within a function should be indented by four spaces to increase readability.
    You can use one press of the tab key on your keyboard as a shortcut for this.
  prefs: []
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As all of this code occurs within the function for the `onTouchUpInside` event
    of our button, each line is executed step-by-step, with the last step calling
    a function that shows an e-mail composer with our properties pre-filled in it.
  prefs: []
  type: TYPE_NORMAL
- en: When creating our e-mail, we used arrays, strings, and Boolean values to customize
    the message composer with our own required content.
  prefs: []
  type: TYPE_NORMAL
- en: 'The iOS Simulator often won''t send e-mails. When you hit send, the message
    is silently discarded with a success message. To test that your e-mail will reach
    the recipient, you''ll need to test on a device with an e-mail account configured:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/1321_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s great that our users can now get in touch with us without having to leave
    our ad, so why not try the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Send an image in our e-mail; you'll need to have a URL of an image hosted on
    the web.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change the mail composer to send SMS. Check out the last exercise in [Chapter
    6](ch06.html "Chapter 6. Ad Destinations and Actions"), *Ad Destinations and Actions*,
    if you need some hints.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure all your lines of code within the function are indented by four spaces/one
    tab in.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As usual, our ad could do with some styling to update the stock objects we added.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time for action — adding something extra to our e-mail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While our e-mail contact form is fit for purpose, we can still add some extra
    polish and neat functionality (just like we''ve been doing to the visual aspect
    of our ad). As the **book now** button is on the store details page, let''s make
    our e-mail body include the name of the selected store:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Cloud 9 - iPad` project in iAd Producer and open the **map details
    view** of the **Book a flight** page on the canvas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to get back to the code editor and find the code that we added in the
    last exercise. With the **book a flight** button selected, click on **Code** |
    **Show Code Editor** from the menu bar. This will open the code editor and you
    can scroll down to find the function `this.onViewTouchUpInside`. When a control
    only has one function or event added to it, this technique is simple. However,
    if our control has multiple events, our file can quickly become crowded. To open
    the code editor directly focused in a function, select the button object, then
    right-click and choose object events, then **Touched Up Inside**, and finally
    **Execute JavaScript**. You'll see that events that already have functions assigned
    have a solid dot next to their name, whereas empty events have an empty circle,
    as shown in the following screenshot:![Time for action — adding something extra
    to our e-mail](img/1321_08_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the code editor opened and positioned at our event''s function, we can
    modify some of our code to add the store name to the e-mail message''s body. Add
    the following code straight after setting the e-mail subject:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This creates a variable called `message` that contains the text `I'd like to
    book a flight at` combined with the text of the title of the map pin's annotation.
    The `+` is used to join the two strings and we access the text of the maps pin
    `title` property to construct our message. Now that we have our `message` variable
    containing the combined string, we need to pass this to the body of our e-mail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To set our new dynamic text in the body of our e-mail, we need to remove the
    string from the `.setMessageBody` and replace it with our `message` variable.
    You should update your message body function to match this line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After we update this message body function, this code will set the message body
    to be the string that we created and stored in the `message` variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure you also remove the quotes, `"`", from within the `.setMessageBody`
    function. Variable names within quotes will cause the variable name, and not the
    variable value, to appear.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Your final updated touchup event function should look like the following screenshot:![Time
    for action — adding something extra to our e-mail](img/1321_08_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now test the ad. Open a store details view page and tap the **Book a Flight!**
    button. You'll see that the main e-mail body text is dynamically set with the
    title of the store.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When testing in the simulator, make sure you click on the **Simulate** button
    from the ad overview, not the store finder canvas. Opening directly from the canvas
    will cause the ad to crash as it won't load the correct pin data required for
    the annotation title.
  prefs: []
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We've made our e-mail more dynamic by adding the current flight center the user
    is looking at to the message body; this should allow better management of e-mails
    received by users.
  prefs: []
  type: TYPE_NORMAL
- en: By triggering with the `Touch Up Inside` event of our button, we combined a
    message string with the dynamic pin annotation property, meaning the body text
    of our e-mail updates with the name of the store the user is currently viewing.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you''re feeling comfortable with the JavaScript code we''ve used so far,
    you could try extending it further by:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding the address to the message string. Hint: You can access the annotation''s
    address using `this.viewController.annotation.address`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leaving the recipient array empty and creating a `Share with friend` button
    so a specific store can be shared with a friend. To create an empty array, simply
    don't add any properties into `[]`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Including an additional e-mail address in the recipient array so the e-mail
    is distributed to two people at your company.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pop Quiz — variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Variables are a great way to store values in our JavaScript and can help keep
    our code readable and clear. See if you''re able to identify these different variable
    types and uses:'
  prefs: []
  type: TYPE_NORMAL
- en: Which of these would be the correct way to declare a variable name `cyril` with
    the string `the squirrel has lost his nuts?`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. var cyril = "the squirrel has lost his nuts";
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: b. variable cyril = "the squirrel has lost his nuts";
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: c. cyril = "the squirrel has lost his nuts";
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: d. "cyril" = the squirrel has lost his nuts;
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Which of following is the correct way of showing a Boolean value?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. yes/no
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: b. true/false
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: c. on/off
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: d. yes/true
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a calendar entry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The iAd JavaScript library allows us to add events to the user's calendar; this
    can let us leave a reminder of certain time sensitive discounts or promotional
    events.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — using the calendar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using our `Cloud 9 - iPad` project, we''ll add an events page with a button
    that''ll add an event to the user''s iPad inbuilt calendar:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Cloud 9 - iPad` project and add a blank page to your ad. Add a button
    that goes to this page to the main menu carousel. Go back to [Chapter 7](ch07.html
    "Chapter 7. Building for the Big Screen"), *Building for the Big Screen*, if you
    need a reminder on how to do this. Name the page `Events`. Use the image **events-button.png**
    for the button image and place it on one of the placeholder cloud cells, such
    as **Cell 4**, as shown in the following screenshot:![Time for action — using
    the calendar](img/1321_08_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the new **Events** page on the ad canvas and add a button to the canvas
    from the object library. Change the text in the button to read `Add to calendar`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the button selected, add an `Execute JavaScript` event for when the object
    is `Touched Up Inside`. Delete the placeholder comment and add the following lines
    of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using the `Date.parse` function, we convert a human-readable date into a format
    that JavaScript can understand. JavaScript uses the number of milliseconds since
    January 1, 1970, 00:00:00 UTC to calculate its date and times.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need to convert the JavaScript time to a format that iAd and iOS can understand.
    We''ll do this using the `Date` function. Add these lines directly after the last
    two:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This creates a new `date` object from the millisecond time that JavaScript understands.
    A `date` object has a range of functions we can use to convert the date into a
    variety of formats.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice, we didn't include `var` this time before the `startTime` variable name.
    This is because you only need to declare `var` the first time you create the variable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Using our `date` object that we just created, we can access an ISO date string
    of our date required by the iAd calendar. Continue adding the following code to
    our code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This accesses our `startDate` date object and calls its `toISOString` function;
    we then save this value in the variable `startDateISO`. An ISO date string is
    an internationalized standard, and used by our iAd to create the calendar dates.
    We could just cut out these steps and create the ISO date string directly. However,
    it's better to work with more manageable readable dates. For example, the ISO
    date for our start time is `2011-08-16T13:30:00.000Z`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With our start date in the right format, we also need to create an end date
    and time for our event. We''ll do this in exactly the same way as our start time,
    but use a different time in the future. Add the following block of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Exactly as we did for our start time, we now have an ISO date string for the
    end time of our event.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: To update this for your own event, you'd adjust the start time and end time
    in the `Date.parse()` function. Use the preceding examples as a template for your
    time. To specify different time zones, you can add the offset after the `GMT`
    at the end. For example, `GMT+0430` would offset the time four and a half hours
    east of the Greenwich meridian and `GMT-400` would offset the time four hours
    west of GMT and give you USA Eastern Time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'With our dates ready, we can now create the event object required by the iAd
    framework. Add this code to the end of your `touch Up Inside` event function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This object contains a list of properties and values required to create an event.
    We're able to take the `startDateISO` and `endDateISO` values and add them to
    the `start` and `end` properties of our object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before we're able to display the calendar window, we need to tell our ad where
    to position the calendar **popover**. A popover is an iPad-specific element that
    overlays on top of the other user interface objects, and typically appears next
    to the button that activated it. We need to get the position of our button and
    adjust it slightly to display the calendar popover in the right place. Assuming
    your button is near the center of the screen, return to the iAd Producer canvas
    and select the button object. Open the inspector pane and expand the **Layout**
    section:![Time for action — using the calendar](img/1321_08_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can use these layout metrics to calculate the X and Y positions of our popover.
    The X position is how far left our popover should show from, and Y is how far
    from the top of the device screen it should be. To calculate the X position and
    cause our popover to appear to the right of our button, we take the **Left** value,
    in this case, above **394** and add it to the **Width**, in this case, **236**,
    giving a final X value of `630`. We want the popover to appear in the center right
    of the button, so our Y value is calculated by taking the **Top** value, in this
    example **360**, and adding half of the button **Height**, in this case **24**,
    giving a final Y value of `384`. With these values, we can create our position
    object and add the following to the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Because we're using integers—number values, instead of strings, we don't need
    to wrap our position values in quotes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: As this is only necessary on iPad, we would leave the `calPosition` empty for
    an iPhone ad because it uses the entire screen when adding a calendar event. Remember,
    if you move your button, you'll also have to update these values.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We''ll quickly create an empty listener like we did for our e-mail composer.
    We don''t need any feedback to successful or failed calendar events, so we can
    just use the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will prevent the calendar from not showing because it can't find the listener.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With all our objects set up, we can finally tell the iAd framework to show
    the popover. Add this final line of code to the end of our function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This tells our advert's calendar to present the event popover and passes it
    the event object that we created, the empty listener, and the position object
    for the location of the popover on the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save the project and then test your new button! Your final code should look
    like the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Time for action — using the calendar](img/1321_08_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using the Date object in JavaScript, we converted human-readable dates into
    a format that our iAd and iOS device could translate into a machine-readable format.
    By creating two dates, for the start and end time of an event, we then set up
    an event object that we can pass to the device. This event object holds details
    of the event along with the start and end time we converted. Finally, as our ad
    was for the iPad, we had to set up an object defining the X and Y positions on
    the screen where the popover should appear. Our popover calendar will look a little
    like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/1321_08_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The popover gives the user the chance to edit the event, make the event reoccurring,
    or add an alarm to remind them. Once the user taps, the event is added to the
    in-built calendar app on their device, ensuring we keep presence with the user
    after they've closed our ad.
  prefs: []
  type: TYPE_NORMAL
- en: On the iPhone, we wouldn't need to set a coordinate for the popover and leave
    the position object empty because the iPhone automatically fills the entire screen
    with our calendar view.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A button in the middle of a blank page isn''t very compelling and unlikely
    to inspire our user to add the event to their calendar. Make your page interesting
    with some images and information about the event, for example, why not try the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Add one or more pictures from past events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use labels with details of the event
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the background of the page so it matches the rest of our advert
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't forget to include a back button so the user can return to the main menu!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing audio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: iAd Producer has an audio object where the user can tap a play button to hear
    an audio file included in our ad. This works great for songs and sound bites,
    but we can also trigger audio clips from JavaScript. As we're using JavaScript
    to play our audio file, we can use any event in our ad to initiate the audio.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — controlling an audio player
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s combine an audio object from the object library with some JavaScript
    code to make our audio clip play every time the user shakes the device:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll use our example project `Dino Stores` that we built at the beginning of
    the book and make the dinosaurs roar each time they shake our **Shake to Change**
    gallery. Open the project in iAd Producer now. If you haven't completed the project,
    you can use the `6.Dino Stores - Store Finder` in the `Dino Stores` exercises
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **Shake to Change** page on the canvas. From the object library, add
    an audio object to the canvas and position it off screen so the user won't be
    able to see it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the object selected, expand the inspector pane and select **roar-noise.m4a**
    as the audio clip's file, as shown in the following screenshot:![Time for action
    — controlling an audio player](img/1321_08_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the shake view object by clicking on the dinosaur image. Right-click
    on it and select **Object Events** | **Did Shake** | **Execute JavaScript**. This
    will open the code editor and add a placeholder function for this event.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When the shake event occurs, we want our audio object to play, so add this
    JavaScript to the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This simply gets the audio object from our page and calls its `play` function,
    which surprisingly will make our audio clip play! Make sure the outlet value in
    the object's inspector is set to `audio`. It should be this by default if it's
    the only audio object on the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the code editor and test the ad. Navigate to the **Shake to Change** page
    then shake the device. You'll hear the dinosaurs roar as the pages change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By adding an audio object to our page, we can access it through JavaScript using
    its `outlet` property. We moved the audio object off the canvas, so it's included
    in the page but not visible to the user, and when the shake event of our shake
    view occurred, we called the `play` function of the audio object. You might notice
    a delay the first time the device is shaken as the audio loads, but subsequent
    shakes will cause the audio to play immediately as the device will cache it. To
    minimize the delay, keep the audio short and optimized, as obviously, smaller
    files will play quicker than larger ones.
  prefs: []
  type: TYPE_NORMAL
- en: Tweeting with Twitter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When Apple released iOS 5 in the fall of 2011, they included support for tweeting
    text, links, and images direct from various parts of the operating system. This
    **Twitter** support has been extended to our iAds and is a great marketing tool
    due to its sharing reach.
  prefs: []
  type: TYPE_NORMAL
- en: Twitter is a popular micro-blogging service where users can send small, timely
    updates, limited to 140 characters to people who follow, or subscribe, to them.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — tweeting the tweet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As not every device will necessarily be running iOS 5, we''ll create a check
    to ensure that the device supports Twitter, and then let the user tweet and share
    an update about our brand:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Dino Stores` project we used in the last exercise. We'll add a button
    to the menu screen that'll open up the Twitter dialog. Open the menu page on the
    canvas and then drag the button from the object library.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Position the menu near the bottom of the page and expand it to fill the width.
    Update the text with a call to action, such as `Tweet a dino fact!`. Your button
    may look a little like the following screenshot:![Time for action — tweeting the
    tweet](img/1321_08_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click and select the button, and select **Execute JavaScript** as the **Touched
    Up Inside** action to create the event and automatically open the code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove the placeholder comment `//Code here` and replace it with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This checks if the Twitter composer is available and then adds the text and
    URL that'll compose the tweet. Anything contained in between the curly braces
    after the `if(window.ad.twitterComposer)` will only run if the Twitter composer
    object exists. We can now add an `else` block of code that'll run if the Twitter
    composer is unavailable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Immediately after the code we just added, insert the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will only run if the earlier check doesn't find the Twitter composer to
    be available; and will cause an alert to be presented to the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can test our ad out, either in the iOS Simulator or on a device. You'll need
    to make sure your iPhone or iPod is running iOS 5 and that you've configured your
    Twitter account. When using the simulator, you can change the version of iOS it
    is running from iAd Producer. From the menu bar, select **Export** | **Simulator
    iOS Version** | **iOS 5.x**. Save your project and click on the **Simulate** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: To log in to Twitter on your iOS device or in the simulator, open the **Settings**
    app and then select **Twitter**. You'll be prompted for your username and password
    and have the opportunity to create an account, if you haven't already.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Clicking on the **Tweet** button will now open up the **Twitter composer** window
    that we configured:![Time for action — tweeting the tweet](img/1321_08_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you see our error alert message appear, make sure you're running iOS 5 with
    your account configured correctly! You can upgrade your device using iTunes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the Twitter composer, introduced in iOS 5, we tweeted a basic text tweet
    with a link attached to it. If we tried to access the Twitter composer when our
    user wasn't on a Twitter-enabled device, our ad would crash. So checking its availability
    is vital when targeting older versions of iOS.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you feel confident with your Twitter code, consider improving it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the simulator version to a version prior to iOS 5, so you can test the
    fallback message.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the more advanced user, consider hiding the button when the Twitter composer
    isn't available. We could do this using the page event **viewControllerViewDidAppear**,
    the `if` statement we used earlier, and setting the `hidden` property of the button
    outlet to `true`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The debugger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're not all perfect, and sometimes we'll make mistakes when writing our JavaScript
    code; fortunately, iAd Producer has two built-in tools it uses to highlight and
    discover errors in your code.
  prefs: []
  type: TYPE_NORMAL
- en: Error checking syntax
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have an error with your code syntax—the rules that define the structure
    of your code, iAd Producer will prompt you when you try to save that JavaScript
    file. iAd Producer identifies the line where your error occurs and allows you
    to save the file anyway (not recommended) or edit it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Error checking syntax](img/1321_08_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'General syntactical errors you should check for include:'
  prefs: []
  type: TYPE_NORMAL
- en: Forgetting to end a line with a semicolon.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not separating an object or array values with a comma.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Including a comma on the last item in an array or an object. For example, `['item
    one', 'item two', last item',]` would be incorrect as there is an extra comma
    at the end.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the incorrect case. JavaScript and its variables are case sensitive, so
    `thisVariable` and `ThisVARIABLE` are considered two separate values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forgetting to close a bracket or brace.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the debugger
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If your code is syntactically correct but has errors when it's running, the
    debugger window will appear and highlight the line of code where the error occurred.
    For example, if we try and access a variable that we haven't assigned a value
    to, we might find the debugger showing a warning of accessing an undefined function
    or value.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the debugger](img/1321_08_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you're familiar with development, you can set breakpoints to pause your ad
    at certain parts of your code. To set these, just double-click on the line number
    of the line you'd like to pause at. You can then use the **continue** button in
    iAd Producer to resume the execution of the JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Coding conventions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you''re writing JavaScript code, you should make sure it complies with
    some basic rules and best practices used by developers:'
  prefs: []
  type: TYPE_NORMAL
- en: Name the start variables with lowercase by using camel case, which we looked
    at earlier in the chapter. Variable names should be verbose and relevant to the
    data they hold.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comment your code so it's understandable to you when you revisit the code, and
    clear for other developers that may look at it in the future.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: End each statement with a semicolon.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Code within functions should be indented from the edge using the *Tab* key
    or four spaces. Notice how the second example is more readable and clear:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Coding conventions](img/1321_08_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Having learnt some example code snippets, the style that your code should be,
    and how to identify and fix errors in your code, you could add some enhanced functionality
    to the other example projects we''ve created so far. You could:'
  prefs: []
  type: TYPE_NORMAL
- en: Add an audio clip to your shake view in the `Coffee Beans` project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add multiple event buttons to the upcoming **Events** page in the `Cloud 9 -
    iPad` project, each creating calendar events with different times and details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This should show you how multiple event functions can exist within one page's
    JavaScript file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may want to consider renaming your button outlets when you have multiple
    buttons on screen. This will make navigating between the functions in your JavaScript
    file easier.
  prefs: []
  type: TYPE_NORMAL
- en: Read the Apple documentation to find out the other possibilities of JavaScript
    in your iAd, available at [http://developer.apple.com](http://developer.apple.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an entirely new ad for your own product or brand, using a variety of
    techniques that you've learnt so far
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JavaScript is an incredibly powerful and versatile language, which, coupled
    with the iAd JS framework, can create some amazingly dynamic and rich ads. In
    this chapter, we''ve only brushed upon the potential of expanding our iAds with
    simple code snippets that have allowed us to:'
  prefs: []
  type: TYPE_NORMAL
- en: Edit values of objects that aren't exposed to us in the iAd Producer inspector
    pane
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add events to the user's calendar and continue to remind them of us once they've
    left our ad
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Send e-mails with dynamic content to let users contact us
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the code editor and debugger to catch common errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With our adverts looking great, having rich interactivity, and giving our users
    memorable experiences, let's take a look at the logistics of managing a successful
    iAd campaign.
  prefs: []
  type: TYPE_NORMAL
