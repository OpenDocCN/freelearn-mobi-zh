- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating Your First Android App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android, a mobile operating system developed by Google, runs on over two billion
    devices, such as smartphones, tablets, TVs, watches, and cars, and developers
    are able to write code that is compatible with these different devices.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll create our first Android app. We will also familiarize
    ourselves with Android Studio, the **Integrated Development Environment** (**IDE**)
    that we’ll use to develop Android apps. We will also learn some tips, shortcuts,
    and useful Android Studio features and understand the process of creating a project
    in Android Studio.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Android Studio overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your Android app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android Studio tips and tricks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To follow the instructions in this chapter, you will need to have Android Studio
    Hedgehog or later ([https://developer.android.com/studio/download](https://developer.android.com/studio/download))
    downloaded.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the code for this chapter at [https://github.com/PacktPublishing/Mastering-Kotlin-for-Android/tree/main/chaptertwo](https://github.com/PacktPublishing/Mastering-Kotlin-for-Android/tree/main/chaptertwo).
  prefs: []
  type: TYPE_NORMAL
- en: Android Studio overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developed by Google, Android Studio is the official IDE for creating Android
    applications. Built upon JetBrains’ IntelliJ IDEA, it provides a comprehensive
    platform for Android app development. It has all the features to enable you to
    develop Android apps with ease.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you download Android Studio from the official site, you need to download
    SDKs and set everything up for it to be ready for use. Open your newly installed
    Android Studio. You will see the following welcome screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ Figure 2.1 – Android Studio welcome screen](img/B19779_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – Android Studio welcome screen
  prefs: []
  type: TYPE_NORMAL
- en: 'On the top right, we have these quick options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**New Project**: We use this to create new projects in Android Studio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open**: We use this when we want to open existing projects using Android
    Studio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Get from VCS**: **VCS** stands for **version control system**. Examples of
    VCSs are GitHub, GitLab, and Bitbucket. We can always link our accounts and easily
    import projects that are hosted on VCS to our Android Studio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**More options icon**: This provides us with more options, such as **Profile
    or Debug APK**, **Import Project**, **Import an Android Code Sample**, **SDK Manager**,
    and **Virtual Device Manager**. We only use these options as needed, so we are
    not going to dive deep into them at this point.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let us look at the navigation options on the left:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Projects**: This is selected by default. It shows all the projects that you
    have created with Android Studio if present. If you do not have any, an empty
    screen will be displayed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Customize**: This provides a settings screen to customize the various aspects
    of Android Studio, as shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Customize Android Studio screen](img/B19779_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – Customize Android Studio screen
  prefs: []
  type: TYPE_NORMAL
- en: 'From the preceding screenshot, we can see that we can quickly customize the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Color theme**: We can set the theme to dark (**Dracula**), light (**InteliJ
    Light**), or high contrast depending on our preferences.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IDE font**: Here we set the preferred font size for our IDE.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Keymap**: Here we configure what IntelliJ should use for mapping our keyboard
    and mouse shortcuts. It automatically picks the one for our operating system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the bottom of this screen, we can see two more settings options. One is **Import
    Settings…**, which we use when we want to import settings from either a previous
    Android Studio installation or a custom file. The other one is **All settings…**,
    which provides more customization options.
  prefs: []
  type: TYPE_NORMAL
- en: '**Plugins**: Here, we can install external plugins to our Android Studio and
    also manage our installed plugins. There are several plugins in the Marketplace
    that we can install depending on the needs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Plugins screen](img/B19779_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – Plugins screen
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have an overview of several essential options on the Android Studio
    welcome screen, we will use the **New Project** option to create our first Android
    app in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your Android app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to create your first Android app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Tap on the **New Project** button, which will take you to the **Templates**
    screen, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.4 – New Project | Templates screen](img/B19779_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – New Project | Templates screen
  prefs: []
  type: TYPE_NORMAL
- en: The IDE presents us with a variety of options to choose from while creating
    new projects, as seen in *Figure 2**.4*. To start with, on the right-hand side,
    we need to choose the specific form factor that we are targeting. By default,
    **Phone and Tablet** is selected. We have other options, such as **Wear OS** if
    we want to target wearables, **Android TV** if we want to develop apps that run
    on Smart TVs powered by Android OS, and, lastly, **Automotive**, for apps that
    target Android Auto.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to use the default option since we want to target Android and tablet
    devices.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we have to choose a template from the options provided. There are several
    templates that we can use to quickly generate some functionality for our apps.
    For example, we have **Bottom Navigation View Activity** to generate a project
    with both UI and Koltin code for displaying bottom tabs.
  prefs: []
  type: TYPE_NORMAL
- en: We will choose **Empty Activity** as we want to start from scratch. We use this
    instead of the **No Activity** option since this comes with some dependencies
    set up for us.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Tap **Next**, and we’ll see the screen to configure the project details, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.5 – New Project settings](img/B19779_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 – New Project settings
  prefs: []
  type: TYPE_NORMAL
- en: 'As seen in the preceding screenshot, to finalize creating the project, we need
    to specify the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Name**: This is the unique name for our project.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Package name**: This is a unique identifier for our project. Normally it’s
    a combination of the company website and app name.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Save location**: Here we specify the directory that our project will be in.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Minimum SDK**: This is the minimum Android version that our Android app will
    support. Android Studio gives us the percentage of devices using all the versions
    to help us decide the minimum Android version to support. For our project, we’ve
    chosen **API 24: Android 7.0 (Nougat)**, which will run on approximately 94% of
    devices. It is important to note that choosing a lower minimum SDK version means
    we will have to make our app compatible across the different device versions,
    which can be a lot of work. Also, some features are only available in newer SDK
    versions, so we have to add a fallback mechanism for devices for'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Lastly, tap **Finish**—this creates our project. It will take a couple of minutes
    to prepare our project. Once done, we’ll be presented with the following screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.6 – New project](img/B19779_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 – New project
  prefs: []
  type: TYPE_NORMAL
- en: There are a few things about the project structure we need to understand here.
    We will be diving deep into them in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the new project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this subsection, we are going to look at the whole project structure so that
    we can understand the different components.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the left, we have the **project structure** with different directories and
    packages. On the right is the editor section, which by default does not have anything.
    When you open any file inside Android Studio, this is where they appear. This
    is the project structure for our new project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.7 – Project structure](img/B19779_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.7 – Project structure
  prefs: []
  type: TYPE_NORMAL
- en: 'On the left, we have the `app` directory, which is the root directory, which
    has all files related to the project. From *Figure 2**.7*, we can see that inside
    the `app` directory, we have the following different directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '`manifests`: This has a single `AndroidManifest.xml` file, which is essential
    for our app configuration. A manifest file has a `.xml` extension and contains
    the information critical to your app. It communicates this information to the
    Android system. In this file, we define the permissions needed for our app, the
    app name, and icons. We also declare activities and services in this file. Without
    declaring them, it’s hard for our app to use them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `java` package: This package, although named `java`, has all the Kotlin
    files for our project. If we need to add any files, this is where we add them.
    We can also create packages that help us group files with related functionality
    together. This directory is further subdivided into the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`com.packt.chaptertwo`: This is for the Kotlin files in our app'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`com.packt.chaptertwo (androidTest)`: Here, we add all the files for our instrumentation
    tests'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`com.packt.chaptertwo (test)`: Here, we add all the files for our unit tests'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Resources: This directory, normally shortened to `res`, has all the resources
    needed for our app. These resources can include images, strings, and assets. From
    *Figure 2**.6*, we can see that we have the following subdirectories:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`drawable`: This folder contains custom drawables, vector drawables, or PNGs
    and JPEGs that are used in the app.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mipmap`: This folder is where we place our launcher icons.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`values`: This folder is where we place our color, string, style, and theme
    files. In this folder, we define global values to be used all throughout the app.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xml`: In this folder, we store XML files.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Gradle Scripts`: Here, we have all the Gradle scripts and Gradle property
    files needed for our project. In our new project, we have the following files:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`build.gradle (Project: chaptertwo)`: This is the top-level Gradle file where
    we add configurations that apply all over the project and submodules.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`build.gradle (Module: app)`: This is the app module Gradle file. Inside here,
    we configure the app module. To understand this file, let’s look at the one generated
    for our project:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'At the very top, we specify the plugins needed by the module. In this case,
    we have the Android application and Kotlin plugins declared. After the `plugins`
    block, we have the `android` block. You can see we have the following properties
    defined inside this block:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`namespace`: This is used as the Kotlin or Java package name for the generated
    `R` and `BuildConfig` classes.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`compileSDK`: This defines the Android SDK version that will be used by Gradle
    to compile our app.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`defaultConfig`: This is a block where we specify the default config for all
    flavors and build types. Inside this block, we specify properties such as `applicationId`,
    `minSDK`, `targetSDK`, `versionCode`, `versionName`, and `testInstrumentationRunner`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`buildTypes`: This configures different build types for our application, such
    as `debug` and `release`, or any custom build that we define. Within each build
    type block, we specify properties such as `minifyEnabled`, `proguardFiles`, or
    `debuggable`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`compileOptions`: We use this block to configure properties related to Java
    compilation. For example, we have defined `sourceCompatibility` and `targetCompatibility`,
    which specify the Java version compatibility for our project source code.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kotlinOptions`: We use this block to configure options related to Kotlin.
    A commonly used option is `jvmTarget`, which specifies which Java version to use
    for Kotlin compilation.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`buildFeatures`: We use this block to enable and disable specific features
    in our project. For example, we’ve enabled `compose` in our project. We can enable
    or disable other additional features, such as `viewBinding` and `dataBinding`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ComposeOptions`: This block is specific to projects that use Jetpack Compose.
    For example, inside this block, we can set `kotlinCompilerExtensionVersion`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`packagingOptions`: We use this block to customize the packaging options of
    our project, particularly regarding conflicts and merging.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dependencies`: Here we specify the dependencies in our project. We can add
    different libraries, modules, or external dependencies in this block.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`proguard-rules.pro`: This is a file where you define rules for ProGuard to
    use when obfuscating your code. We will dive deep into this later in [*Chapter
    13*](B19779_13.xhtml#_idTextAnchor175).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gradle.properties (Project Properties)`: Here we define properties that apply
    to the whole project. Some of the properties include setting the Kotlin style
    and also specifying the memory to be used.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gradle.properties (Global Properties)`: This is a global file. We specify
    settings that we want to apply to all our Android Studio projects.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gradle-wrapper.properties (Gradle Version)`: In this file, we specify the
    Gradle wrapper properties, including the version and the URL from where to download
    the Gradle wrapper.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`local.properties (Local Properties)`: In this file, we specify settings that
    need to apply to our local setup. Normally, this file is never committed to version
    control, so it means the configurations we add here only apply to our individual
    setup.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`settings.gradle (Project Setting)`: We use this file to apply some settings
    to our project. For example, if we need more modules in our project, this is where
    they’re specified.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When we build the project, Android Studio compiles all the resources and code
    using the configurations specified in our Gradle files and converts them into
    an **Android Application Package** (**APK**) or **Android Application Bundle**
    (**AAB**) that can run on our Android phones or emulators.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have explored the newly created project and understood some
    of the key files and folders generated by Android Studio. In the next section,
    we are going to see how we can customize some things inside our Android Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Android Studio tips and tricks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we’re going to learn about some useful tips, shortcuts, and
    features in Android Studio.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll start by opening the `MainActivity.kt` file. When you open the file,
    you’ll be presented with the following layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.8 – MainActivity file](img/B19779_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.8 – MainActivity file
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now see the code inside the `MainActivity.kt` file, which is Kotlin
    source code. Above the tab with the filename, we can see a navigation bar, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.9 – Navigation bar](img/B19779_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.9 – Navigation bar
  prefs: []
  type: TYPE_NORMAL
- en: The navigation bar enables you to navigate easily and quickly between the different
    project files.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also switch to the **project view** to see all the resources in our
    project. The switch is at the very top of all the directories. By default, it
    is set to **Android view** and has more options depending on your preference.
    Switching to project view gives us the following folder structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.10 – Project view](img/B19779_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.10 – Project view
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 2**.10*, we can see all the resources in our project, and we can
    easily navigate through the different files and folders.
  prefs: []
  type: TYPE_NORMAL
- en: 'Android Studio has a variety of different tool windows that provide a variety
    of options. Let us start with the **Resource Manager** tool window, which is at
    the top left part below the view switcher tab. Open that window and you will see
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.11 – Resource Manager tab](img/B19779_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.11 – Resource Manager tab
  prefs: []
  type: TYPE_NORMAL
- en: As shown in *Figure 2**.11*, the **Resource Manager** tab shows all the resources
    in your project. We can also quickly add new vector and image assets and drawable
    files and import drawable here. The good thing is that we can also see a preview
    of these resources and easily browse the resources that we have in our project.
    Below this tab, we have the **Project** tab, to switch back to our project view,
    and below it, there is the **Pull Requests** tab, which enables us to see open
    pull requests from the project’s version control repository. This is especially
    useful when we are collaborating with other team members or colleagues.
  prefs: []
  type: TYPE_NORMAL
- en: Android Studio allows us to add or remove these tabs or choose which tabs to
    be shown on either the left, right, or bottom side. To remove a tab, you simply
    right-click on it and select the **Remove from Sidebar** option. Click on **View**,
    followed by **Tool Windows**. This action will display all the tool windows currently
    available for use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Android Studio provides alternative viewing options in the **View** menu. For
    example, we can switch to presentation mode while we are doing our presentations.
    To do this, still, in the **View** menu, tap **Appearance** and then **Enter Presentation
    Mode**. This brings up a minimized UI, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.12 – Presentation Mode](img/B19779_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.12 – Presentation Mode
  prefs: []
  type: TYPE_NORMAL
- en: As shown in *Figure 2**.12*, we can see that the font size has increased, and
    the UI is very minimal. This mode is extremely helpful when doing presentations.
    To exit this mode, go to **View** and then tap **Exit** **Presentation Mode**.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the bottom, we have some more useful tools as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.13 – Android Studio bottom tabs](img/B19779_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.13 – Android Studio bottom tabs
  prefs: []
  type: TYPE_NORMAL
- en: 'From *Figure 2**.13*, let us learn what the tabs do:'
  prefs: []
  type: TYPE_NORMAL
- en: '**TODO**: Shows all our to-do items. This is useful for keeping track of things
    you need to do.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Problems**: Shows all the problems in our project. This is useful for keeping
    track of errors and warnings in our project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Terminal**: Allows us to run terminal commands. This is useful for running
    commands such as Git or **Android Debug Bridge** (**ADB**) commands.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**App Inspection**: This allows us to inspect various elements in our app and
    is useful for debugging our app. It allows us to inspect our background jobs,
    database, and network requests. For the database, we can see the data in our database,
    and we can also run queries with the data. For network requests, we can see the
    network requests and their JSON responses. And for background jobs, we can see
    the jobs and their status. These are helpful for us to debug and check issues
    on our app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Logcat**: This shows all our log messages. It is especially useful for debugging
    errors as they arise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**App Quality Insights**: This allows us to view our app quality insights.
    This enables us to view crashes detected by Firebase Crashlytics inside our Android
    Studio. We can also see the crash stack trace and the line of code that has the
    issue, and we can easily navigate to that line from here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build**: Shows the build output. This is useful for debugging build errors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Profiler**: Allows us to profile our app. For the profiler to work, we must
    have an instance of our app running. The profiler is useful for debugging performance
    issues. This provides metrics on how our app is using the CPU, memory, and energy.
    We can use these metrics to optimize our app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These tabs can vary in position and at times some might not be shown. You can
    also easily add or remove them from the sidebar.
  prefs: []
  type: TYPE_NORMAL
- en: Let us now look at some useful shortcuts inside Android Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Some useful shortcuts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Shortcuts help us quickly achieve things inside Android Studio. When well mastered,
    they can help us boost our productivity. There are many shortcuts available, and
    you can also customize and create your own. Some of the most common ones include
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Alt* + *7* on Windows or *Command* + *7* on Mac: This opens the `MainActivity.kt`
    file, we can see the following structure:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.14 – Structure tab](img/B19779_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.14 – Structure tab
  prefs: []
  type: TYPE_NORMAL
- en: From *Figure 2**.14*, we can see that the `MainActivity.kt` file. Clicking on
    a method from this tab quickly navigates us to the method in our code. There is
    also an icon, highlighted in red in *Figure 2**.14*, that shows the inherited
    methods. When we click this, it shows all the inherited methods in the file as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: '*Alt* + *Enter* on Windows or *Option* + *Enter* on Mac: This allows us to
    quickly add imports for packages, files, or dependencies in our project. It also
    offers more functionality, such as providing quick fixes for errors and allowing
    us to implement methods.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Double-press *Shift*: This opens the general search window. Here we can search
    for classes, symbols, and files all over the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *Shift* + *F* on Windows or *Command* + *Shift* + *F* on Mac: This
    is helpful for searching text in all files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *F6* on Windows or *Command* + *F6*: This allows us to refactor code.
    We have renaming, changing method signatures, moving code, and many more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *D* on Windows or *Command* + *D* on Mac: This is for duplicating
    a line of code or a selected section of code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *B* on Windows or *Command* + *B* on Mac: This allows us to jump to
    declarations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have only covered some of these shortcuts. There are many of them available.
    If you want to master most of these shortcuts, you can install the Key Promoter
    X plugin ([https://plugins.jetbrains.com/plugin/9792-key-promoter-x](https://plugins.jetbrains.com/plugin/9792-key-promoter-x)).
    The plugins remind you of the shortcut whenever you perform an action that has
    a shortcut, and it also prompts you to create shortcuts when you repetitively
    do something that does not have a shortcut.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we created our first Android app. We familiarized ourselves
    with Android Studio, the IDE that we use to develop Android apps. We also learned
    about some tips, shortcuts, and useful Android Studio features and understood
    the process of creating a project in Android Studio.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be covering Jetpack Compose layout basics. We’ll
    start with an introduction to Jetpack Compose, a declarative way of declaring
    UIs for our apps.
  prefs: []
  type: TYPE_NORMAL
