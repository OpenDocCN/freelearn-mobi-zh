- en: Chapter 10. Packaging and Deploying Your Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your iOS development team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the iOS development certificate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obtaining the development certificate from Apple
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registering your iOS devices for testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your application App IDs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the development provisioning profiles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the provisioning profile to install the app on an iOS device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing an app for submission to the App Store using iTunes Connect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Archiving and submitting apps using Xcode 4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Well done for making it till here. You have successfully built your application
    and now you are ready to release it to the rest of the world. All you now need
    to do is decide how to deploy and market it.
  prefs: []
  type: TYPE_NORMAL
- en: We will take a look at what is required in order to submit your application
    to the Apple App Store, and share your creations with the rest of the community.
    In this chapter we will learn how to set up your iOS development team as well
    as the certificates for both development and distribution.
  prefs: []
  type: TYPE_NORMAL
- en: We will also learn how to create the provisioning profiles for both development
    and distribution and create the necessary Application App IDs associated with
    an iOS application. Finally, we will learn how to go about registering your iOS
    devices required for testing, as well as the steps required to submit your applications
    to the Apple App Store.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your iOS development team
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn the steps that are required to create and set up
    an iOS development team.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you can submit your application to the Apple App Store for approval,
    you will need to set up your iOS development team.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the iOS Developer portal website at [http://developer.apple.com/](http://developer.apple.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Member Center** link that is located right at the top of the
    screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign in to your account using your Apple ID and password. This will display
    the **Developer Program Resources** page, as shown in the following screenshot:![How
    to do it...](img/3349_10_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **iTunes Connect** button, as highlighted in the preceding
    screenshot. This is where you have the ability to check on various things such
    as **Sales and Trends** and **Manage Your Applications**.![How to do it...](img/3349_10_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on **Manage Users** to add yourself or the people within your organization
    who will be able to log in to the iOS Developer Program portal, test apps on iOS
    devices, and are able to add additional iOS devices to the account.![How to do
    it...](img/3349_10_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **iTunes** **Connect User** button as highlighted in the preceding
    screenshot. This will bring up the **Add New User** option pane from where you
    can add a new user as shown in the following screenshot:![How to do it...](img/3349_10_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The list in the preceding screenshot shows a list of existing users, that have
    been previously set up along with their details and their assigned roles that
    they have been set up to have access to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on **Add New User** as highlighted in the preceding screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, fill in the **Personal Details** section for the person that you will
    be adding to your development team. Once you have finished, click on the **Continue**
    button as shown in the following screenshot:![How to do it...](img/3349_10_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we need to assign which roles the user will take on as shown in the following
    screenshot:![How to do it...](img/3349_10_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, simply choose from one of the four options, and then click on the **Continue**
    button to proceed to the final step within the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select the **Notifications** tab as shown in the following screenshot.
    This section is where we will be assigning the relevant notification types and
    territories that will be assigned to the user:![How to do it...](img/3349_10_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have finished specifying the different types of notification methods
    for each territory, click on **Save Changes**. The new user account will then
    be created with a confirmation e-mail which will be sent to the users account
    for them to activate their account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following table explains each of the different types of notifications that
    are shown in the preceding screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Notifications | Description |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **App Status** | Provides e-mail alerts with app status updates. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Contract** | Provides e-mail alerts with contract status updates (for example,
    contract expiration warnings) or if iTunes needs more contractual information.
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Financial Report** | Provides e-mail alerts when finance reports are available
    for download on iTunes Connect. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Payment** | Provides e-mail alerts when payment(s) to your banking institution
    are returned. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we looked at the necessary steps required to create and assign
    roles to users and which user roles are allowed to log into the iOS Developer
    portal to manage users, view sales or trends, and payments and financial reports,
    as well as those users who have the ability to add new devices in order to test
    applications on each of the different iOS devices.
  prefs: []
  type: TYPE_NORMAL
- en: In the next recipe, we will be taking a look at the steps involved to generate
    an iOS development certificate. This certificate is encrypted and serves the purpose
    as your digital identification, and you must sign your apps using this certificate
    before you can run, and test any applications that you develop on your iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating the iOS development certificate* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the iOS development certificate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create the iOS development certificate
    to enable us to run and test our apps on an iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will start by generating the iOS development certificate. This certificate
    is encrypted and serves the purpose as your digital identification. You must sign
    your apps using this certificate before you can run and test any application that
    you develop on your iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Keychain Access application which can be found, and located in the
    `/Applications/Utilities` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, choose the **Request a Certificate From a Certificate Authority…** option
    from **Keychain Access** | **Certificate Assistant**, as shown in the following
    screenshot:![How to do it…](img/3349_10_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we need to provide some information before the certificate can be generated.
    Enter the required information as shown in the following screenshot, ensuring
    that you have selected the **Saved to disk** and the **Let me specify key pair
    information** options:![How to do it…](img/3349_10_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once all the information has been filled out, click on the **Continue** button.
    You will be asked to specify a name for the certificate; accept the default suggested
    name and click on the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, the certificate is being created at the location specified. You
    will be asked to specify the **Key Size** and **Algorithm** to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Accept the default bits of **2048 bits** and **RSA Algorithm**. Click on the
    **Continue** button and then click on **Done** when the final screen appears.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we learned how to generate a certificate request for iOS development
    **Certificate Signing Request** (**CSR**) using the pre-installed Mac OS X Keychain
    Access application. This certificate is required and will be used to code-sign
    our iOS applications, enabling us to deploy our applications to an iOS device
    for development and testing.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we learned how to use the Certificate Assistant that comes as a part of
    the Keychain Access application to request a certificate from a certified certificate
    authority. We then learned how to fill out the information for our certificate,
    as well as the key pair information for the certificate, that will be used by
    both the development and distribution provisioning profiles. The **Common** **Name**
    field is the name that will be used when you begin code-signing your applications.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Obtaining the development certificate from Apple* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obtaining the development certificate from Apple
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn how to request a development certificate from Apple.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following on from our previous recipe, now we will learn how to obtain the development
    certificate from Apple.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch your browser and log in to the iOS Developer portal on the following
    link [https://developer.apple.com/devcenter/ios/index.action](https://developer.apple.com/devcenter/ios/index.action)
    within the address bar field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that you have logged in using your Apple credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on **iOS Provisioning Portal**, located on the right-hand side of
    the page.![How to do it…](img/3349_10_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Certificates** tab, located on the left-hand side of the panel,
    then click on the **Development** tab as shown in the following screenshot:![How
    to do it…](img/3349_10_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Request** **Certificate** button and then click on the **Choose
    File** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select the certificate request file that you created in the previous recipe
    and click on the **Submit** button once you are done.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, you should see that the certificate would be showing a **Pending
    Issuance** status. This is shown in the following screenshot:![How to do it…](img/3349_10_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After a few seconds, the page will refresh and the certificate will be ready
    and you will be able to download it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once it is downloaded, double-click on the file to install it within the Keychain
    Access application, as shown in the following screenshot:![How to do it…](img/3349_10_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we started by requesting a development certificate from Apple
    which will be used as it provides us the ability to code-sign our applications
    in order to deploy our apps onto an iOS device. Next, we looked at how to use
    the generated certificate request file that we created in the previous recipe
    to generate the development certificate at which point the certificate will be
    in the **Pending Issuance** state, and after a few seconds your certificate will
    be made available for download.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we looked at how to use the downloaded certificate and install it using
    the Keychain Access application. In our next recipe, we will take a look at how
    to register an iOS device to be used for development and testing.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Registering your iOS devices for testing* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registering your iOS devices for testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn how to register an iOS device so that it can support
    the mobile provisioning profile by using the **Unique Device Identifier** (**UDID**).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following on from our previous recipe, we will learn how to register an iOS
    device using the UDID, or a **Universally Unique Identifier** (**UUID**) so that
    it can be used for development and testing.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch Xcode from the `/Xcode4/Applications` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **Organizer** window by selecting **Window** | **Organizer**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that you have connected your iOS device to your Mac.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, copy the **Identifier** field shown in the following screenshot, and save
    it using your favorite text editor.![How to do it...](img/3349_10_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Use for Development** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Use for Development button** option may not always be visible, as this
    is dependent on whether you have specified to use the iOS device previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, log back into the **Apple iOS Developer Center** page and click on the
    **iOS Provisioning Portal** link on the right-hand side of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, from the **iOS Provisioning Portal** page, click on the **Devices** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that click on the **Manage** tab, then click on the **Add Devices** button
    as shown in the following screenshot:![How to do it...](img/3349_10_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, provide a meaningful name for each device that will be used for testing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, provide a value for **Device Name** and UDID for **Device ID**, and
    click on the **Submit** button to save your changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we looked at the steps required to register an iOS device that
    will be used for both development and testing, used by the mobile provisioning
    profile. We learned that for this to happen, you require the UDID of each device
    that will be used by the provisioning profile. Failure to provide this information
    will result in errors occurring when you attempt to deploy your application.
  prefs: []
  type: TYPE_NORMAL
- en: In our next steps, we proceeded to log back into the **iOS Provisioning Portal**
    to add each of the devices and paste the UDID information for each of the devices.
    Clicking on the **+** button will allow you to add additional devices at once.
    Upon clicking on the **Submit** button, you will have successfully registered
    each of the devices you provided. You will need to go through the same process,
    if you intend to deploy to additional devices.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating your application App IDs* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your application App IDs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create the application App IDs so that
    we can use these to deploy our applications to test on the iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following on from our previous recipe, we will learn the steps involved in creating
    our application App IDs.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined:'
  prefs: []
  type: TYPE_NORMAL
- en: Log back into the **Apple iOS Developer Center** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **iOS Provisioning Portal** link on the right-hand side of
    the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click on the **App IDs** menu located at the left-hand side of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **New App ID** button as shown in the following screenshot:![How
    to do it...](img/3349_10_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, provide a description that will be used to identify `CoreLocation`, as
    this is the App ID you will be using later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Use Team ID** for **Bundle Seed ID (App ID Prefix)**, ensuring that
    you provide a suitable name for your **Bundle Identifier (App ID Suffix)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Use Team ID** option may not always be visible, as this is dependent on
    whether you set yourself up as an individual or company. The Bundle Identifier
    needs to be the same as your application's Bundle Identifier. This can be specified
    as `12345678.com.yourcompany.yourappname` or can be the date of submission that
    is, `20130512.com.yourcompany.yourappname`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click on the **Submit** button.![How to do it...](img/3349_10_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the following screenshot, you should now see the newly created App ID that
    you created in the previous step, together with those you may have previously
    created:![How to do it...](img/3349_10_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we looked at the necessary steps required to create the App
    ID for our application, which is required for each iOS application that you create
    and must contain a unique application ID that identifies itself. The App ID is
    part of the provisioning profile and identifies an app or a suite of related applications.
    This is used when your applications communicate with the iOS hardware accessories,
    the Apple Push Notification service, and when sharing of data happens between
    each of your applications.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating the development provisioning profiles* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the development provisioning profiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create the development provisioning profiles
    so that the application can be installed on an iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following on from our previous recipe, we will learn the steps involved in creating
    our development provisioning profiles so that applications can be installed on
    an iOS device for testing prior to being deployed to the Apple App Store.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined:'
  prefs: []
  type: TYPE_NORMAL
- en: Log back into the **Apple iOS Developer Center** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **iOS Provisioning Portal** link on the right-hand side of
    the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Provisioning** tab, and then click on the **New Profile** button
    as shown in the following screenshot:![How to do it...](img/3349_10_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, enter in `Development_Profile` as the value for **Profile Name**, ensuring
    that you select all the certificates that you would like to associate with this
    provisioning.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **CoreLocation** as the value for **App ID** and then check all the devices
    that you would like to provision, and then click on the **Submit** button once
    finished.![How to do it...](img/3349_10_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can choose to register additional devices using **iOS Provisioning Portal**
    by clicking on the **Devices** tab, and then follow the steps outlined in the
    recipe *Registering devices for testing* located within this chapter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: At this point, the provisioning profile will be shown as a **Pending** approval
    status. After a few seconds, you should see that the status changes from **Pending**
    to **Active**. If this does not happen, you may need to refresh your browser.
    At this point, you will be able to download your mobile provisioning file.![How
    to do it...](img/3349_10_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Download** button to download your **Provisioning Profile**.
    You will notice that when you download the mobile provisioning file, the file
    will be named as `Development_Profile.mobileprovision`. In the next recipe we
    will look at how to deploy an application to an iOS device using this certificate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe we learned how to create the provisioning profile so that your
    applications can be installed onto a real iOS device. This gives you the ability
    to assign team members who are authorized to install and test an application on
    each of their devices.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever you deploy an application onto the iOS device, this will contain the
    iOS development certificates for each team member, as well as the UDID and the
    App ID.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using the provisioning profile to install the app on an iOS device* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the provisioning profile to install the app on an iOS device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn how to use the development provisioning profiles
    so that the application can be installed on an iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following on from our previous recipe, we will learn how to modify one of our
    existing examples that we created in a previous chapter, so that it can be installed
    on an iOS device for testing.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch Xcode from the `/Xcode4/Applications` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **File** | **Open** or press *Command* + *O*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `CoreLocation.xcodeproj` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **Open** button to proceed and open the application into
    the Xcode Workspace environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, open the **Organizer** window by navigating to **Window** | **Organizer**
    or by pressing *Shift* + *Command* + *2*.![How to do it...](img/3349_10_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This process will enable us to add the Mobile Provisioning profile that we created
    in the previous sections to our project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then click on the **Import** button and select the `Development_Profile.mobileprovision`
    file, and click on the **Open** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select the `CoreLocation` project from **Project Navigator**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then from the **Build Settings** tab, move to the **Code Signing** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Any iOS SDK**, and choose your certificate from the drop-down list.![How
    to do it...](img/3349_10_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your certificate will be shown in bold, with your provisioning profile in gray.
    If you don't import a valid provisioning certificate, you won't be able to deploy
    or upload your iOS applications to the Apple App Store.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, from the **Project Navigator** window, click on your project, click on
    the **Targets** section, and then click on the **Summary** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down till you get to the **Entitlements** section, and check the **Enable
    Entitlements** checkbox. This will add a file called `CoreLocation.entitlements`
    to your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you select the **Enable Entitlements** checkbox, Xcode creates an `entitlements`
    file for you (if one does not exist) and adds a Keychain Access Groups key-value
    pair and you need to remember that they are directly bound to your applications
    provisioning profile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build and run your application to see if all works well. You will be asked to
    grant access to the certificate. Click on **Always Allow**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe we learned how to import the mobile provisioning profile for
    our development certificate and then modify the `CoreLocation` example application
    that we created in a previous chapter so that it can be deployed onto an iOS device
    using this provisioning profile. We then looked at how to modify the **Code Signing
    Entitlements** section of the project to ensure that the **Code Signing Identity**
    fields reflect the mobile provisioning details.
  prefs: []
  type: TYPE_NORMAL
- en: In our final steps, we learned how to add the `entitlements` file to the project.
    This file is an important file, and is required whenever an application needs
    to be deployed onto an iOS device for testing or to be deployed to the Apple App
    Store.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Archiving and submitting apps using Xcode 4* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Requesting entitlements for iCloud Storage* recipe in [Chapter 6](ch06.html
    "Chapter 6. Storing Documents within the Cloud"), *Storing Documents within the
    Cloud*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing an application for submission to the App Store using iTunes Connect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to prepare an application for submission to
    the Apple App Store.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following on from our previous recipe, when you have tested your application
    to ensure that it all works and is free from errors and that you have set up all
    of your accounts, you will want to start uploading your application to the Apple
    App Store.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into **iTunes Connect**, and then click on the **Manage Your Applications**
    option.![How to do it...](img/3349_10_27.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **Add New App** link to begin adding your app to the App
    Store.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, proceed to enter in the application details for the application we are
    uploading.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Continue** button to proceed with the next step. The **SKU Number**
    is a unique identifier that you create for your app as shown in the following
    screenshot:![How to do it...](img/3349_10_28.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next step, we specify values for **Availability Date** and **Price Tier**
    of the application when it will be made available for download as shown in the
    following screenshot:![How to do it...](img/3349_10_29.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There are more than 87 pricing tiers to choose from, including an option for
    selling your application for free. On clicking on the **Continue** button, you
    will be directed to the Metadata screen, where you are required to fill in the
    information pertaining to your application. The fields in that screen along with
    their description are listed in the following table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Screen field | Description |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Version** **Number** | This can be anything that you like. It is preferable
    to start at `1.0`. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Description** | This is the application description that can contain up
    to 4,000 characters. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Primary Category** | These contain up to 20 different categories to choose
    from, including **Games**, **Entertainment**, **Business**, **Books**, and so
    on. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Secondary Category** (optional) | You can choose from **Secondary Category**.
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Keywords** | These help return results faster when a customer is searching
    for an application within iTunes. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Copyright** | The name of the person or entity that owns the exclusive
    rights to the app, preceded by the year the rights were obtained (for example,
    `2013 GENIESOFT STUDIOS`). |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Contact Email Address** | An e-mail address where users can contact you,
    if there are problems with your app. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Support URL** | A URL that provides support for the app you are adding.
    This will be visible to customers on the App Store. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **App URL** (optional) | A URL with information about the app you are adding.
    If provided, this will be visible to customers on the App Store. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Review Notes** (optional) | Additional information about your app and/or
    your in-app purchases. **Review Notes** cannot be longer than 4000 bytes. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: 'When Apple released their iOS 3.0, they included a rating scheme that allowed
    parents to control which applications their children could download. This is a
    compulsory area of the application distribution process, and must be completed
    before you can submit your application. The rating scheme can be seen in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3349_10_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The age limit will change depending on how you go about rating your application.
    Ensure that you rate this correctly as Apple uses this information during their
    internal process and reviews how you score your application.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information about submitting your apps, check out the following link
    at [https://developer.apple.com/library/ios/#documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/11_EditingandUpdatingAppInformation/EditingandUpdatingAppInformation.html](https://developer.apple.com/library/ios/#documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/11_EditingandUpdatingAppInformation/EditingandUpdatingAppInformation.html)`#//apple_ref/doc/uid/TP40011225-CH14-SW40`.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe we learned the steps involved in preparing an application for
    submission to the Apple App Store using iTunes Connect. We learned that before
    submitting your applications for approval to the Apple App Store, you must ensure
    that it all works properly and is free from problems. Next, we looked at how to
    create a new application ID for the application that is being uploaded on the
    Apple App Store, providing detailed information about the application, as well
    as the date that it becomes available.
  prefs: []
  type: TYPE_NORMAL
- en: In the next step, we looked at how to specify the Pricing Tier for the application
    being uploaded, with the ability to choose from over 87 pricing tiers, with an
    added ability to sell your application for free, should you ever have the need
    to.
  prefs: []
  type: TYPE_NORMAL
- en: How much you should charge for your application is a tough question amongst
    developers and companies selling their applications on the App Store. One of the
    tactics that I have found many developers seem to adopt is to start selling their
    application at $6.99 and then, shortly after release, they temporarily drop the
    price by a couple of dollars, or sometimes offer 50 to 80 percent off the price
    for a limited time.
  prefs: []
  type: TYPE_NORMAL
- en: By reducing the price, this will create a surefire sale, encouraging people
    to rush in and purchase before the limited time expires, which can also increase
    the number of sales for your application within the iTunes App Store, hence getting
    it into the top ten, or even to number one.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before submitting your apps to the Apple App Store for approval, it is best
    to ensure that your application works correctly and is free from errors, and the
    iOS simulator is a good place to start. Although not everything can be tested
    within the simulator, it proves a good starting point. Whilst your application
    may run perfectly within the simulator, problems may still exist when it has been
    deployed to the iOS device. It is therefore always best to deploy this to a real
    iOS device running the latest versions of iOS.
  prefs: []
  type: TYPE_NORMAL
- en: You can also make use of the Instruments application to ensure that no memory
    leaks exist within your application and avoid having your application crash on
    the users' iOS device. If your application crashes, it could also prevent your
    application from being successfully approved and being displayed on the App Store
    by Apple.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever you want to proceed to submit your applications to the Apple App Store,
    please bear in mind that only a release version of your application that can be
    uploaded.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Archiving and submitting apps using Xcode 4* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Archiving and submitting apps using Xcode 4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn how to archive an app ready for submission to the
    Apple App Store using the Xcode 4 Integrated Development Environment.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following on from our previous recipe, ensure that our `CoreLocation` project
    file is open.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined:'
  prefs: []
  type: TYPE_NORMAL
- en: From the Project Navigator window, click on your project and then click on the
    **TARGETS** section and then click on the **Build Settings** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **Build Settings** tab and then navigate to **Build Options**
    | **Validate Built Product** | **Release** and set it as **Yes**.![How to do it...](img/3349_10_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Product** | **Edit Scheme…** or alternatively press the *Command*
    + *<* key combinations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, ensure that **Destination** has been set to use **iOS Device**, and **Build
    Configuration** has been set to use the **Release** scheme.![How to do it...](img/3349_10_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Product** | **Archive** from the **Xcode** menu, and it will begin
    to create the application archive as shown in the following screenshot:![How to
    do it...](img/3349_10_26.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Validate…** button to have Xcode validate your app. You will
    need to sign in with your Apple ID in order to proceed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have satisfied the necessary validation requirements, click on the
    **Distribute…** button to submit your application to Apple.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For more information on other ways of distributing your applications check out
    the provided link made available through the Apple Developer Connection website
    at [http://developer.apple.com/library/ios/#documentation/ToolsLanguages/Conceptual/Xcode4UserGuide/090-Distribute_Your_App/distribute_app.html](http://developer.apple.com/library/ios/#documentation/ToolsLanguages/Conceptual/Xcode4UserGuide/090-Distribute_Your_App/distribute_app.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe before archiving your application, you need to ensure that the
    target application file is self-contained. What this means is that, if the target
    application file relies on any static libraries, it ensures that those libraries
    are a part of the application binary, by setting **Validate Built Product** |
    **Release** to **Yes** within the **Build Settings** section of the target that
    builds and archives the application.
  prefs: []
  type: TYPE_NORMAL
- en: In our next step we needed to make sure the Archive action of the scheme has
    the appropriate destination set for the type of application to be archived before
    submitting an application to the App Store or sharing it with others; you create
    an application archive that will enable you to share your App (IPA) with other
    developers and testers or distribute it to users. In order to have your application
    considered for inclusion on the Apple App Store, you must submit the archive to
    iTunes Connect. This is to ensure that your application archive passes the essential
    iTunes Connect validation tests. Xcode can validate this for you before you submit
    it.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Preparing an application for submission to the App Store using iTunes Connect*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
