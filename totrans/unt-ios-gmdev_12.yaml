- en: 'Chapter 12. Commercialization: Make ''fat loot'' from your Creation'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: According to the American Marketing Association, marketing is the process of
    planning and executing the conception, pricing, promotion, and distribution of
    ideas, goods, and services to create exchanges that satisfy individual and organizational
    goals. While most people equate marketing with advertising, marketing encompasses
    market analysis, value proposition, product differentiation, market strategies,
    and so on. While we don't need all of this in order to build our game, we need
    to examine portions of marketing to determine what is the best way to bring it
    to market and make money from all our hard work. Should we charge 99 cents, should
    we give it away and depend on advertising, or should we try to license the game
    to a third party? These are all questions that this chapter will help us answer.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter we shall discuss:'
  prefs: []
  type: TYPE_NORMAL
- en: How to add iAds to a product
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to add In-App purchases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to publish content to the Unity Asset Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to publish the final version of our product
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to track success with iTunes Connect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is our final step to putting out a quality application that generates revenue
    and produces happy customers — our number one priority.
  prefs: []
  type: TYPE_NORMAL
- en: So let's get on with it...
  prefs: []
  type: TYPE_NORMAL
- en: Business model generation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the time of writing there are over 200 million iOS devices in the hands of
    consumers, nearly 15 billion downloads of applications from the App Store, with
    over 2.5 billion dollars being paid to developers in App Store sales. While this
    alone would have the average developer salivating, one must also consider that
    there are over 300,000 applications in the App Store with a growth rate of 11,000
    — 15,000 applications per month. As such, one cannot depend on simply shipping
    a title and expecting it to make money. You will need an approach for how to target
    customers, get your app on their device and extract money from them — and that
    approach is commonly referred to as a business model.
  prefs: []
  type: TYPE_NORMAL
- en: While normally one would discuss this as the first topic when planning to build
    a revenue generating venture, most people's eyes would glaze over in the first
    chapter and they'd put the book back on the shelf.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the Apple App Store ecosystem has developed, four successful business models
    have emerged as viable ways to capitalize on your creation: pure app sales, advertising,
    In-App purchases, and marketplace component sales.'
  prefs: []
  type: TYPE_NORMAL
- en: Pure app sales
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the traditional approach to publishing applications on the App Store.
    You produce an application, set a price based on some pricing strategy, and then
    release it to the App Store and wait for customers to purchase your application.
  prefs: []
  type: TYPE_NORMAL
- en: Advertising
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The advertising model is typically used for applications that are distributed
    for free, though some applications charge money and still include advertisements.
    Nevertheless, as the game is started or played, the application makes a request
    to an ad network to include ad content somewhere in the game. As people watch
    these ads or interact with them, the ad supplier pays the application creator.
  prefs: []
  type: TYPE_NORMAL
- en: In-App purchases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The In-App purchase model is quickly establishing itself as the business model
    of choice for mobile applications. There are two models generally used with In-App
    purchases. In the first model one develops a form of currency and players use
    that currency to purchase items in the game world. In the second model, developers
    sell additional weapons, tracks, vehicles, and so on, which are then added to
    an existing game to enhance the player's experience.
  prefs: []
  type: TYPE_NORMAL
- en: Marketplace component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While not truly a model for selling a game, selling components on a marketplace
    is something you can consider if you are building components and prefabs for your
    game and either decide that they are no longer useful for you, or that you want
    make some money without publishing an entire game. In addition, if you develop
    a novel solution to a common development problem, you should sell it on [www.gameprefabs.com](http://www.gameprefabs.com)
    or within the Unity Asset store itself.
  prefs: []
  type: TYPE_NORMAL
- en: There isn't anything preventing you from choosing just one of these business
    models or implementing all of them in a single product. The only thing you need
    to do is balance your desire to make money with the end-user experience. So long
    as you aren't very intrusive into the user playing your game, the model will not
    annoy the users, but if they begin to feel as if you're fleecing them, you will
    kill the goose that lays the golden egg.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — Readying your app for sale
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ve finally reached the point that we''ve been waiting for. We''re going
    to prepare our game for distribution to customers, set a price, and then publish
    the application for sale. Unlike the developer portal that we''ve been using up
    to this point, to publish our content for consumption we need to use the **iTunes
    Connect** portal located at: [http://itunesconnect.apple.com](http://itunesconnect.apple.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Log into the **iTunes Connect** portal using the credentials you normally use
    to connect to the developer portal:![Time for action — Readying your app for sale](img/0409_12_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Manage Your Applications** link to start the process of adding
    an application:![Time for action — Readying your app for sale](img/0409_12_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Primary Language** for your country and enter the name of your
    company or the name under which you will be doing business legally:![Time for
    action — Readying your app for sale](img/0409_12_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next you need to tell **iTunes Connect** which type of application you're going
    to create. If you have the ability to create both iOS apps and OSX apps simply
    select the iOS icon:![Time for action — Readying your app for sale](img/0409_12_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that **iTunes Connect** knows what type of application we're trying to create
    enter the **App Name, SKU Number**, and **Bundle ID** that represent your application:![Time
    for action — Readying your app for sale](img/0409_12_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After entering this information its time to set your price. Enter a date for
    when this product will be available. Set the price to be **Free**. Press the **View
    Pricing Matrix** option to see what other options you have for pricing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to provide a discount for educational institutions through mass
    purchases, check the checkbox for this option.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The second option **Custom B2B App** is for applications that are being offered
    to business customers for volume purchases ( [http://www.apple.com/business/vpp/](http://www.apple.com/business/vpp/)).
    If you check this box your game will not be available on the regular app store.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Time for action — Readying your app for sale](img/0409_12_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Next enter the metadata for the game. This is the information that will be used
    to populate the iTunes app store page:![Time for action — Readying your app for
    sale](img/0409_12_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To ensure that the application is rated and targeting the appropriate audience
    select the appropriate options for the application. Most importantly make sure
    any ratings of maturity and violence are properly represented or your application
    will be rejected. If your application has prolonged graphic, sadistic, sexual,
    or nude content it is not permissible to sell this content on the app store:![Time
    for action — Readying your app for sale](img/0409_12_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The final step is to provide **iTunes Connect** with artwork, which will be
    used on the iTunes store. Depending on your target platform you will have to provide
    up to three pieces of artwork.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Large** version of your app icon is the one that will be used in the App
    Store. It must be at least 72 DPI and a minimum of 512x512 pixels (it cannot be
    scaled up). It must be flat artwork without rounded corners.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**iPhone and iPod touch Screenshots** must be either a`.jpeg, .jpg, .tif, .tiff`,
    or .png file that is 960x640, 960x600, 640x960, 640x920, 480x320, 480x300, 320x480,
    or 320x460 pixels, at least 72 DPI, and in the RGB color space.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'iPad Screenshots must be either a.jpeg, .jpg, .tif, .tiff, or .png file that
    is 1024x768, 1024x748, 768x1024, or 768x1004 pixels, at least 72 DPI, and in the
    RGB color space:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action — Readying your app for sale](img/0409_12_09.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now that all of the app settings have been configured, the app is ready for
    distribution. Under the version of the app you will note that the status is **Prepare
    for Upload**, which means that Apple is waiting for us to upload our game for
    review.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the application icon so that we can upload the final binary version
    of our game for review:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action — Readying your app for sale](img/0409_12_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We are now ready to publish our application with the price we've set and, if
    it passes review by Apple, it will be available on the date that we specified
    as the availability date above.
  prefs: []
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just created all of the metadata for iTunes to sell our application.
    The remaining step before final publication is to submit the final binary to Apple.
    We will cover that after we have added the other components of our business model
    to the application.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — Adding iAds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the low hanging fruit for generating revenue from your application is
    introducing an advertising model to your existing game. You can easily display
    an ad in the main menu or in the loading screen of your application and not adversely
    impact the user experience of your customers, yet generate a reasonable amount
    of revenue.
  prefs: []
  type: TYPE_NORMAL
- en: 'As Unity itself doesn''t provide functionality for adding iAds to an application,
    we will illustrate how to acquire this functionality using the Prime31 plugin.
    While it is certainly possible to also implement custom plugins, this is outside
    the scope of the book. More importantly, it is a better use of our time to build
    the application:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit the website [http://www.prime31.com](http://www.prime31.com) and download
    the iAds plugin:![Time for action — Adding iAds](img/0409_12_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While the plugin itself isn't free, you should make more than the cost of the
    plugin in ads to justify its purchase.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Import the purchased unitypackage by importing a custom package through the
    **Assets** | **Import Package** | **Custom Package** menu command:![Time for action
    — Adding iAds](img/0409_12_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the unitypackage on your machine so that Unity can begin importing its
    assets:![Time for action — Adding iAds](img/0409_12_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unity will now begin importing the plugin and display a dialog confirming that
    you wish to import all of the assets from the package into the project:![Time
    for action — Adding iAds](img/0409_12_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure you have all of the items selected and press the **Import** button.
    When the import process is completed you should have two new nodes in the **Hierarchy**
    view:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Time for action — Adding iAds](img/0409_12_15.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The iAds system comes with a ready-to-use Prefab for displaying ads, so let's
    drag that into our scene.![Time for action — Adding iAds](img/0409_12_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that this is added, our application is ready to display ads.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Open the application in iTunes Connect and select the **Set Up iAd Network:**![Time
    for action — Adding iAds](img/0409_12_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enable the iAd advertising network for your application by selecting the **Enable
    iAds** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Time for action — Adding iAds](img/0409_12_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be sure to set your primary audience appropriately. This will ensure that you
    are delivering advertisements appropriately for your target audience.
  prefs: []
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just added the iAd network to our application. When running our game,
    we will now see an iAd advertisement appear in the main scene of our application
    purely driven by Apple's demographics and advertising engine. As people interact
    with the ads in our game you will get a check from Apple.
  prefs: []
  type: TYPE_NORMAL
- en: In-App purchases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An In-App purchase within a game provides users with the ability to purchase
    upgrades, access levels, weapons, or other content by transacting with the App
    Store. The App Store will then communicate with the game to notify it that a purchase
    has been authorized and that the content should be unlocked within the game. All
    of this takes place within the iOS SDK and the App Store commerce systems, so
    you will not have to deal with credit card transactions or the security of commercial
    transactions across the wire. Apple will handle the entire process and you will
    receive money in your account the same way you would with regular application
    purchases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Internally, In-App purchases are accomplished using the iOS SDK Store Kit API.
    This API is responsible for communicating with the App Store and collecting payments
    from the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![In-App purchases](img/0409_12_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To date, Unity does not provide a channel within the iOS version of the Unity
    product for an application to add In-App purchases to games so, as with iAds,
    we will have to rely on a third-party plugin to implement this functionality.
    As before we will use a plugin from Prime31 the StoreKit plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Subscription types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are four different types of In-App purchases: non-consumable, consumable,
    subscriptions, and auto-renewing subscriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Non-consumable** In-App purchases represent a class of items that you purchase
    once and have access to continuously. These purchases can be transferred between
    devices on the same iTunes account. Examples of non-consumable items include game
    levels, weapons, vehicles, and other permanently available items.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Consumable** In-App purchases represent a class of items that, as the name
    suggests, are purchased and then consumed by the player requiring an additional
    purchase each time the player wishes to use the item. Examples of consumable items
    include experience points, health kits, turbo boosts, ammo packs, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Subscriptions** are similar to magazine and newspaper subscriptions that
    last for a limited duration and then require the user to renew after that duration
    has expired. While not typical in gaming circles, an example of a subscription
    might be a defensive coach in a football game, which allows the player to not
    have to call defensive plays. The coach would be available for the duration of
    the subscription and after it expires the game would require the player to call
    defensive plays again.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Auto-renewable subscriptions** are those that allow the user to purchase
    In-App content for a set duration of time. At the end of the duration, the subscription
    will automatically renew, with iTunes charging the user, unless the user opts
    out. Examples of the auto-renewable subscriptions are the same as normal subscriptions
    except that the player continues to have the defensive coach until they cancel
    the subscription.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delivery models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In-App purchases can use one of two delivery models with iTunes, the built-in
    model and the server model.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the built-in product model, everything required for your application to
    deliver In-App purchases to your customer is built in to your game. This means
    that all of the consumable and non-consumable In-App purchases are already built
    into the game. Accordingly, this means that all purchase access would be defined
    through application identifiers. As an individual application would be responsible
    for maintaining these preferences they can become lost when a user moves between
    devices, so you must ensure that any preferences, that would preserve that state
    are stored in application preferences, as they are backed up by iTunes. Another
    solution is to use iCloud, or similar, to host these application preferences off
    of the device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Delivery models](img/0409_12_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the server product model a separate server maintains the In-App purchase
    content as well as the transactions with the App Store. The App Store, application
    and the server then orchestrate confirming purchases and delivering content to
    the iOS device. In this model a game would deliver new levels or other content
    directly to the application. While this model is compelling, at the moment it
    does not work well with Unity iOS applications, as Apple requires that all of
    your content be distributed in the application on the App Store. It is included
    here for completeness:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Delivery models](img/0409_12_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As the In-App purchase process does not provide the capability to patch an application,
    and since Unity will not directly load content that is not in the application
    bundle, it is expected that all of the content that you plan to deliver through
    In-App purchases will be delivered in a version of your application in the App
    Store.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — Adding In-App purchases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step in defining In-App purchases is to add the purchase types to
    the application in **iTunes Connect**. On the application profile page, select
    the **Manage In-App Purchases** link in the portal:![Time for action — Adding
    In-App purchases](img/0409_12_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **In-App Purchases** screen select **Create New** to start the process:![Time
    for action — Adding In-App purchases](img/0409_12_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next we want to set up an In-App purchase that represents a new gun type for
    the user, so select **Non-Consumable:**![Time for action — Adding In-App purchases](img/0409_12_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the details area provide a **Reference Name** and a **Product ID** for the
    product. The **Product ID** is what you will use to refer to the product in the
    Store Kit APIs later. You can call your product ID whatever you want, it is for
    your own internal purposes. You should follow the naming convention you used for
    your product to ensure that you will not have any name collisions between products,
    versions, and so on:![Time for action — Adding In-App purchases](img/0409_12_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As iOS applications and iTunes support localization you need to set the language
    for how your product will be displayed in the store. Select **Add Language** and
    enter the store details for the product.![Time for action — Adding In-App purchases](img/0409_12_26.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next set the pricing for the product. The tiers for **In-App Purchases** are
    similar to those of regular iTunes App Store purchases:![Time for action — Adding
    In-App purchases](img/0409_12_27.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next we need to add a screenshot for the App Store review team. It's not entirely
    clear how this screenshot is used, but you will not be able to submit your In-App
    purchase without this 320x240 image:![Time for action — Adding In-App purchases](img/0409_12_28.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With this update completed, review the In-App purchase list to ensure that
    the details entered match what is submitted for your game:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The purchase is currently pending review.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action — Adding In-App purchases](img/0409_12_29.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: With this completed we can write the plugin code necessary to access this In-App
    purchase within our Unity game.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Drag the StoreKitManager prefab from the Prime31 Plugin into the scene. The
    StoreKitManager is responsible for communicating with the native Objective-C libraries
    on the iOS device to handle integration with the Apple StoreKit API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the StoreKitEventListener prefab into the scene. As StoreKit events happen
    on the iOS device, the StoreKitEventListener will receive notifications about
    them from the operating system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To keep things simple we will create a simple GUI Button that when clicked will
    cause the user to purchase the BFG weapon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new script called InAppPurchases:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just created our second channel of revenue, In-App purchases. We have
    just created a mechanism through which the user can purchase the BFG weapon for
    use in the game by pressing a button on the game interface.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — Adding content to the Unity Asset Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'During the development of your game you may have developed assets such as music,
    artwork, or plugins that you want to share with other users of the Unity community.
    The Unity Asset Store offers a channel for distributing these works through the
    Unity IDE itself and provides a 70 pecrent revenue share with you — making it
    a way to make money on your game even if you choose to not deliver it to the Apple
    App Store. In fact, there are entire game projects available on the Unity Asset
    Store that can help developers get started. We''re going to submit part of our
    game project to the Asset Store so that people can download it and learn from
    it in their development projects:'
  prefs: []
  type: TYPE_NORMAL
- en: The first step in publishing content to the Unity Asset Store is to create an
    account. If you've been following along you have already created a customer account
    and can skip this step. Otherwise open the Unity Editor and choose **Window**
    | **Asset Store**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Create Account** and complete the account creation process:![Time for
    action — Adding content to the Unity Asset Store](img/0409_12_30.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download and review the Asset Store Provider Agreement from ( [http://download.unity3d.com/assetstore/asset-store-provider-distribution-agreement.pdf](http://download.unity3d.com/assetstore/asset-store-provider-distribution-agreement.pdf)).
    Read through this document to understand the relationship between Unity Technologies
    and the Asset Store providers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download and review the Asset Store Submission Guidelines from ( [http://download.unity3d.com/assetstore/asset-store-submission-guidelines.pdf](http://download.unity3d.com/assetstore/asset-store-submission-guidelines.pdf)).
    These guidelines outline the various conventions required when submitting content
    to the Asset Store.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Asset Store** window search for the **Asset Store Tools** and download
    them. It is represented in this image with the Unity icon:![Time for action —
    Adding content to the Unity Asset Store](img/0409_12_31.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once downloaded, import the **Asset Store Tools** package just as you would
    any other Unity package. These tools have the framework and scripts necessary
    to prepare content for submission to the Asset Store:![Time for action — Adding
    content to the Unity Asset Store](img/0409_12_32.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under the **AssetStoreTools** hierarchy of the downloaded plugin you will find
    a `Templates` directory. This directory contains all of the image templates that
    you will want to modify for submission to the Asset Store. These key images are
    what the Asset Store will use for creating its own store pages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Image Type | Size | Description |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Big | 1010x389 | Used to promote a package when the package is the primary
    item on screen. The live area where you should put your image is 550x330 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Medium | 460x250 | Used to replace big images when a smaller view size is
    required. The live area where you should put your image is 285x200. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Small | 200x258 | Used to promote images in smaller box views. The live area
    where you should put your image is 175x100. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Icon | 128x128 | Used for downloads and list views |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Update your images to adhere to the layout suggestions from Unity Technologies
    to ensure that text displays properly and that your images are not cropped when
    displayed in the store:![Time for action — Adding content to the Unity Asset Store](img/0409_12_33.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the game project create an `AssetStore` directory. All of the assets you
    want to distribute go under the root folder of the project. In our case we're
    distributing the entire game project so we don't have to do anything special as
    the Asset Store packager will copy our folder structure and assets as-is when
    distributing content to end users.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `AssetStore` directory, create a folder called `Screenshots` for your
    key images. These screenshots should be a minimum of 640x480\. These are images
    that can be viewed by customers when they are evaluating your assets in the Asset
    Store:![Time for action — Adding content to the Unity Asset Store](img/0409_12_34.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Launch the Unity Asset Store **Package Manager** that will generate the package
    necessary for submission for the Asset Store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Time for action — Adding content to the Unity Asset Store](img/0409_12_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just published our game project to the Unity Asset Store for purchase
    by other developers. This is one of the final revenue streams that we have available
    to us as content developers and allows us to sell something as simple as music,
    artwork, scripts, or entire games for other developers to purchase.
  prefs: []
  type: TYPE_NORMAL
- en: Measuring success with iTunes Connect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once your game product has been released on the market, you're going to want
    to measure success so that you can determine the best ways to grow your market
    opportunities and maximize revenue. Your channel for gathering this information
    is iTunes Connect.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — How is our game doing?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To illustrate the type of content that is possible using Unity3, we're going
    to get started by getting a real application running on a device. There are a
    number of steps that you have to perform to get this right, especially if you're
    a new developer to the iOS platform, so I'm going to take some time to make sure
    you understand what's going on. iOS development can be very unforgiving if you
    don't do things the right way, but once you walk through it a few times it becomes
    second nature.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to walk through each of the steps necessary to produce commercial
    content for Unity3 that can be deployed to an iOS device:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the **iTunes Connect** portal at [https://itunesconnect.apple.com](http://https://itunesconnect.apple.com)
    or launch it from the normal iTunes developer portal:![Time for action — How is
    our game doing?](img/0409_12_36.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once in the portal, select the **Sales and Trends** link in the portal links.
    This area houses all of the demographic reports for the content we''ve published
    to the App Store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Time for action — How is our game doing?](img/0409_12_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just examined how to look at the iTunes Connect portal and determine
    how to measure the success of your published game. In iTunes Connect you can look
    at the demographics of the purchasers of the game across a number of different
    dimensions such as time, geography, device, and so on. This will help you to measure
    the impact of things such as promotions, advertising campaigns, or the launch
    of new devices.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is one last challenge for you to accomplish that is more important than
    anything we've done thus far and that is to actually create and publish your own
    game. There are lots of reasons why people stop short, but realize that you are
    now armed with all of the information you need to create a game, publish it, and
    make money doing it. You may not be able to quit your day job, but if you stick
    with it you may very well one day create the next great gaming brand or game company.
  prefs: []
  type: TYPE_NORMAL
- en: Don't worry about creating the next best game in any one particular genre, don't
    worry about having the latest and best graphics, don't wonder if that gaming idea
    will sell a million units (I can't imagine the guys who created *Angry Birds*
    knew it would take off the way it has) — focus on creating SOMETHING, then create
    something else and, before you know it, you WILL create something great. But you
    can't do it if you try to create the next *Skyrim, World of Warcraft, Call of
    Duty*, or *Crysis* as your first project.
  prefs: []
  type: TYPE_NORMAL
- en: So, rather than say goodbye, I'll say, "See you on the App Store." Good luck
    and above all else… HAVE FUN!
  prefs: []
  type: TYPE_NORMAL
