- en: Chapter 7. Multimedia Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Selecting images and videos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capturing media with the camera
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing video
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing music and sounds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recording with the microphone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing multiple album items directly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most important features of today's smartphones and tablets is their
    ability to capture and manage multimedia resources. Be it photos, videos, or audio,
    an application targeted at these devices that can handle multimedia effectively
    is very important.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to manage media stored on the device. We
    will also see how to use the device's multimedia capturing devices (camera and
    microphone) to capture content and create an application that will provide a rich
    experience to the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'More specifically, we will discuss:'
  prefs: []
  type: TYPE_NORMAL
- en: '`UIImagePickerController:` This is a controller that not only provides access,
    through a user interface, to the saved photos and videos on the device, but also
    a camera interface for capturing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MPMoviePlayerController:` This is a controller that allows us to play and
    stream video files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MPMediaPickerController:` This is the default user interface for accessing
    the saved content, managed by the native iPod application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MPMusicPlayerController:` This is the object responsible for playing the iPod
    content'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AVAudioPlayer:` This is the class that allows us to play sound files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AVAudioRecorder:` This is the class that allows us to use the microphone to
    record audio'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ALAssetsLibrary:` This is the class that provides access to the device''s
    available assets and their metadata'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting images and videos
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to provide the user with the ability to import
    images and videos from the device album.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in MonoDevelop, and name it `ImagePickerApp`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Add a `UIImageView` and a `UIButton` on the main view of `MainController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Override the `ViewDidLoad` method of the `MainController` class, and enter
    the following code in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement the handler methods for the `FinishedPickingMedia` and `Canceled`
    events:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the application on the simulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Tap on the button to present the image picker, and select an image by tapping
    on its thumbnail. The image will be displayed in the image view. The `UIImagePickerController`
    is displayed in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/1468EXP_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `UIImagePickerController` is a special view controller that iOS provides
    for selecting images and videos that are saved on the device album, or from the
    camera.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, the iOS simulator does not have images stored in its album. To add
    images to the simulator, uncomment the method `AddImagesToAlbum` of the downloaded
    project source code and call it once, passing as a parameter the physical path
    on your computer that contains images.
  prefs: []
  type: TYPE_NORMAL
- en: 'After initializing the image picker object, we need to subscribe to its `FinishedPickingMedia`
    event, which provides us with the media the user has selected. In the handler
    we assign to it, we get the selected image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Info` property returns an `NSDictionary` object that contains various
    information about the picked media. We retrieve the image passing the constant
    `UIImagePickerController.OriginalImage` as a key. Because the values of the dictionary
    are of the type `NSObject`, we cast the return value to a `UIImage`. After we
    assign the image to the `UIImageView` to be displayed, we dismiss the controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `Canceled` event is triggered when the user taps on the controller's **Cancel**
    button. We must subscribe to it to dismiss the controller, because it will not
    be dismissed automatically when the user taps on the **Cancel** button.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can define the source of images/videos the image picker will read from, through
    its `SourceType` property. In this example, we use `UIImagePickerController.PhotoLibrary`
    because the simulator does not support the camera hardware.
  prefs: []
  type: TYPE_NORMAL
- en: Picking videos
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `UIImagePickerController` displays only images by default. To support videos,
    its `MediaType` property must be set. It accepts a `string[]`, with the specified
    media names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To determine the media type the user has picked, we check the `MediaType` key
    of the dictionary in the `FinishedPickingMedia` handler. If it is a video, we
    get its URL with the `MediaUrl` key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Capturing media with the camera*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Managing album items directly*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capturing media with the camera
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to use the device camera for capturing media.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the project `ImagePickerApp`, discussed in the previous task.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The camera functionality is not available on iOS simulator. This example can
    only run on the device. Refer to [Chapter 14](ch14.html "Chapter 14. Deploying"),
    *Deploying* for More Information.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Inside the `ViewDidLoad` method, replace the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'with this code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `FinishedPickingMedia` handler, add the following code before the dismissal
    of the image picker:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the application on the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tap the button to open the camera and take a picture. The picture will be saved
    to the device album.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before presenting the camera viewfinder, we have to make sure that the device
    the application is running on actually has the appropriate hardware. We do this
    by calling the static `IsSourceTypeAvailable` method of the `UIImagePickerController`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: If it returns `true`, we set the source type to `Camera:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This will cause the image picker controller to start the camera device instead
    of loading the device albums.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the user takes a photo (or video), it is not automatically saved on the
    device. To save it, we use the `SaveToPhotosAlbum` method of the `UIImage` class.
    This method accepts a delegate of type `UIImage.SaveStatus`, which will report
    an error if something goes wrong:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The camera view can also be customized. To disable the default camera controls,
    set the `ShowsCameraControls` property to `false`. Then, pass a custom view with
    the controls you want to the `CameraOverlayView` property. To trigger the shutter
    of the camera, call the `TakePicture` method.
  prefs: []
  type: TYPE_NORMAL
- en: Image editing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The camera supports a simple editing function, after capturing an image. This
    editing function allows the user to select a specific part of the image and even
    zoom to a specific area. To present the editing controls, set the `AllowsEditing`
    property to `true`. The edited image can be retrieved from the dictionary in the
    `FinishedPickingMedia` handler, passing the `UIImagePickerController.EditedImage`
    key. The editing interface is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image editing](img/1468EXP_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Selecting images and videos*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing video
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to display a video player interface and play
    video files.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in MonoDevelop and name it `PlayVideoApp`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Add a button on the main view of `MainController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a video file to the project, and set its **Build Action** to **Content**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following `using` directive in the `MainController.cs` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Override the `ViewDidLoad` method of the `MainController` class, and enter
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enter the following methods in the `MainController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the application on the simulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tap on the button and the video will load and start playing. Watch the messages
    displayed in the **Application Output** in MonoDevelop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `MPMoviePlayerController` plays video files stored locally or streamed
    from the network. We initialize it with the constructor that accepts an `NSUrl`
    parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `NSUrl` object maps to the local file we have added to the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating the instance, we define a frame for its view and add it to our
    view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The highlighted code adds observers to the default notification center, so that
    we will be notified when the state of the playback changes or has finished. Then,
    we call its `Play` method and the view of the `MPMoviePlayerController` is displayed,
    and the video starts playing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `MoviePlayer_PlaybackStateChanged` method, we output the `PlaybackState`
    property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This property informs us of the status of the playback, such as `Paused, Playing,
    SeekingForward, SeekingBackward`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Apart from the ones used in this example, we can add observers for more notifications
    of an `MPMoviePlayerController`, some of which are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`DidEnterFullscreenNotification:` This notifies that the user has tapped the
    full-screen control, and the controller has entered `fullscreen` mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DidExitFullscreenNotification:` This notifies that the controller has left
    `fullscreen` mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DurationAvailableNotification:` This notifies that the controller has received
    information on the duration of the video.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LoadStateDidChangeNotification:` This notification is useful for network playback
    and is triggered when the controller has finished preloading the media in the
    buffer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NaturalSizeAvailableNotification:` This notification is triggered when the
    dimensions of the movie frame are made available. The size can be retrieved through
    the player''s `NaturalSize` property.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NowPlayingMovieDidChangeNotification:` This notification is triggered when
    the video content of the player has changed. The current content is available
    through its `ContentUrl` property.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wireless streaming
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Starting with iOS version 4.3, the `MPMoviePlayerController` can be used to
    stream video to Apple's AirPlay-enabled devices. To enable it, set its `AllowsAirPlay`
    property to `true`. When the `MPMoviePlayerController` is displayed, it will present
    an interface that will allow the user to select the devices it detects.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Playing music and sounds*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing music and sounds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to play simple audio files and songs stored
    on the device.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in MonoDevelop, and name it `PlayMusicApp`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This example will not work on the simulator. You will also need at least one
    song stored on the device.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Add three buttons on the view of `MainController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `using` directive in the `MainController.cs` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add two fields in the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Override the `ViewDidLoad` method of the `MainController` class, and enter
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the application on the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tap the **Select songs** button, and select one or more songs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `MPMediaPickerController` provides the same user interface as the native
    iPod application. The `MPMusicPlayerController` is responsible for playing the
    songs stored on the device.
  prefs: []
  type: TYPE_NORMAL
- en: 'We first initialize the media picker, passing the type of media we want it
    to look for in its constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we subscribe to its `ItemsPicked` and `DidCancel` events so that
    we can capture feedback from the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The highlighted code shows how to initialize the music player object. The option
    demonstrated here, `MPMusicPlayerController.ApplicationMusicPlayer`, creates an
    instance that is specific only to the application. The other option available,
    `MPMusicPlayerController.iPodMusicPlayer`, creates an instance that allows media
    to be played even if the application is in the background, similar to the iPod
    application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `MediaPicker_ItemsPicked` handler, we set the songs that were picked
    by the user to the music player, through its `SetQueue` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: After that, we dismiss the modal media picker controller. Playing and stopping
    songs is achieved through the `Play()` and `Stop()` methods respectively of `MPMusicPlayerController`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `MPMusicPlayerController` holds information on the currently playing item.
    This information can be accessed through its `NowPlayingItem` property. It is
    of the type `MPMediaItem` and holds various types of information of the currently
    playing media. The following example gets the title of the song that is being
    played:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Playing sound files
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `MPMusicPlayerController` is an object that is specifically designed to
    manage and play items and playlists stored on the device's iPod library.
  prefs: []
  type: TYPE_NORMAL
- en: 'For playing simple sound files, MonoTouch provides another wrapper to iOS''
    class, `AVAudioPlayer`. The following is an example of its most simple usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Playing video*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recording with the microphone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to use the device's microphone to record sounds.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in MonoDevelop, and name it `RecordSoundApp`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This example will not work on the simulator.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Add two buttons on the view of `MainController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following `using` directives in the `MainController.cs` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Override the `ViewDidLoad` method, and add the following code in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the application on the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tap the **Start recording** button to start recording audio, for example, say
    something to record your voice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tap the **Stop recording** button to stop recording and listen to the playback.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `AVAudioRecorder` class provides the recording functionality. It does this
    by streaming the captured audio directly to the filesystem. To initialize an instance
    of `AVAudioRecorder`, we use its static `ToUrl` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: If the file that corresponds to the `NSUrl` variable already exists, it will
    be overwritten.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `recordingSettings` variable is of type `NSDictionary` and contains the
    settings for the output sound file. We must provide at least some minimal settings
    to the `AVAudioRecorder` upon initialization. Here, we set the sound format to
    plain wav:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'To instruct the recorder to start recording, we just call its `Record()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: When the user taps on the **Stop recording** button, the recording stops, and
    the saved sound starts playing with the `AVAudioPlayer:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `AVAudioRecorder` class also provides sound metering options. To enable
    sound metering, set its `MeteringEnabled` property to `true`. We can then output
    the peak power in decibels on a specific channel. To do this for the first channel
    of our recording, add the following code right after the `Record()` method call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The `PeakPower` method accepts the zero-based index of the channel and returns
    the peak of the channel in decibels. Call `UpdateMeters()` right before calling
    the `PeakPower` method to get the most recent reading.
  prefs: []
  type: TYPE_NORMAL
- en: Note that enabling metering on the recorder uses CPU resources. Do not enable
    it if you do not intend on using the metering values.
  prefs: []
  type: TYPE_NORMAL
- en: Record for a pre-defined amount of time
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To record audio for a pre-defined amount of time, without the need for the user
    to stop the recording, call the `RecordFor(double)` method. Its parameter specifies
    the amount of time in seconds for which to record.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Playing music and sounds*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing multiple album items directly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will discuss programmatically accessing the device's photo
    album.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in MonoDevelop, and name it `ManageAlbumApp`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This example works on the simulator. At least one image must exist in the photo
    album.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Add a button on the main view of `MainController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following `using` directive in the `MainController.cs` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Override the `ViewDidLoad` method, and enter the following code in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following methods in the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tap the **Enumerate assets** button, and watch the URLs of saved photos being
    displayed in the **Application Output** pad.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ALAssetsLibrary` class provides access to the album items of the device.
    These items are represented by the `ALAsset` class and are divided into groups,
    represented by the `ALAssetGroup` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we need to do is to enumerate the asset groups. To do this,
    call the `Enumerate` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The first parameter is of the type `ALAssetGroupTypes` and instructs the assets
    library on which asset groups to enumerate. Passing `ALAssetGroupTypes.All` means
    we want to enumerate all asset groups. The other two parameters are delegate types.
    The `GroupsEnumeration` method is where we read the group's data, while the `GroupsEnumerationFailure`
    will occur if an error occurs. When the `Enumerate` method is called for the first
    time, the user is asked to grant access to the application for accessing the device's
    assets. If the user denies access, the failure method will be triggered. The next
    time the `Enumerate` method gets called, the access message appears again.
  prefs: []
  type: TYPE_NORMAL
- en: 'The signature of the `GroupsEnumeration` method is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The `assetGroup` parameter contains the group's information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note the `stop` parameter, which is declared as a `ref`. When the enumeration
    occurs, the method is being triggered once to return the first group and does
    not get called for the second time, no matter how many more groups exists. To
    force it to keep getting called to enumerate all groups, we have to set the `stop`
    variable to `false`. When all groups have been enumerated, the method gets called
    one last time, with the `assetGroup` variable set to `null`. So, we need to check
    this. To put all this in code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Calling the `SetAssetsFilter` method on the instance of `ALAssetGroup` class,
    we instruct it to filter what types of assets we want it to look for. After this,
    the process is similar to the groups enumeration. The `ALAssetGroup` class also
    contains an `Enumerate` method. It accepts a parameter of a delegate type, represented
    here by the `AssetsEnumeration` method. Its implementation is similar to the `GroupsEnumeration`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The `ALAsset` class contains various information and properties. Most information
    is stored in its `DefaultRepresentation` property, which is of the type `ALAssetRepresentation`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If the asset we are interested in is an image, we can get the actual image
    through the `DefaultRepresentation` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Reading EXIF data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can read a photo''s **EXchangeable Image File format** (EXIF) metadata,
    through the `Metadata` property of `ALAssetRepresentation`, which is of the type
    `NSDictionary`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Retrieving individual assets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can also retrieve an individual asset if we know the asset's URL, through
    the `AssetForUrl` method of `ALAssetLibrary`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Selecting images and videos*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
