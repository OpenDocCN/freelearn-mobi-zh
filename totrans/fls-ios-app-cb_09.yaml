- en: Chapter 9. Geolocation and Accelerometer APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Determining your current location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determining your speed and heading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking for geolocation access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responding to accelerometer changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting a shake
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The iOS family makes use of many onboard sensors including the three-axis accelerometer,
    digital compass, camera, microphone, and global positioning system (GPS). Their
    inclusion has created a world of opportunity for developers, and has resulted
    in a slew of innovative, creative, and fun apps that have contributed to the overwhelming
    success of the App Store.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will focus on two of the most popular sensors—the accelerometer
    and GPS; both of which are supported by AIR for iOS.
  prefs: []
  type: TYPE_NORMAL
- en: The accelerometer measures g-force, enabling the detection of physical orientation,
    motion, and vibration. While originally seen by many as a gimmick, its uses have
    become increasingly more sophisticated as the platform has evolved. From games
    to remote controls, paint packages to sound generation, the accelerometer has
    become the input method of choice for many apps.
  prefs: []
  type: TYPE_NORMAL
- en: Devices such as the iPhone are also location-aware; its GPS receiver is able
    to determine its position anywhere in the world. Movement can be tracked, the
    current speed can be obtained, and even the direction the device is facing can
    be determined. In addition to mapping, location services are finding their way
    into all kinds of areas ranging from photography to messaging clients.
  prefs: []
  type: TYPE_NORMAL
- en: AIR provides APIs that allow access to both the accelerometer and location data
    collected by the device's sensors. Support for the accelerometer is provided by
    the `flash.sensors.Accelerometer` class, while `flash.sensors.Geolocation` is
    used when writing location-aware apps.
  prefs: []
  type: TYPE_NORMAL
- en: Determining your current location
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The iOS family of devices are location-aware, allowing your approximate geographic
    position to be determined. How this is achieved depends on the hardware present
    in the device. For example, the original iPhone, all models of the iPod touch,
    and Wi-Fi-only iPads use Wi-Fi network triangulation to provide location information.
    The remaining devices can more accurately calculate their position using an on-board
    GPS chip or cell-phone tower triangulation.
  prefs: []
  type: TYPE_NORMAL
- en: The AIR SDK provides a layer of abstraction that allows you to extract location
    information in a hardware-independent manner, meaning you can access the information
    on any iOS device using the same code.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will take you through the steps required to determine your current
    location.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An FLA has been provided as a starting point for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: From Flash Professional, open `chapter9\recipe1\recipe.fla` from the book's
    accompanying code bundle.
  prefs: []
  type: TYPE_NORMAL
- en: You will find six dynamic text fields positioned on the stage. We will populate
    each of them with location data obtained from the device.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to listen for and display geolocation data:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a document class and name it `Main`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the following classes and add a member variable of type `Geolocation:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the class'' constructor, instantiate a `Geolocation` object and listen
    for updates from it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, write an event handler that will obtain the updated geolocation data and
    populate the dynamic text fields with it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the class file as `Main.as` within the same folder as the FLA. Move back
    to the FLA and save it too.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publish and test the app on your device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When launched for the first time, a native iOS dialog will appear with the
    following prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**"c9 r1" Would Like to Use Your Current Location**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tap the **OK** button to grant your app access to the device's location data.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Devices running iOS 4 or above will remember your choice, while devices running
    older versions of iOS will prompt you each time the app is launched.
  prefs: []
  type: TYPE_NORMAL
- en: The location data will be shown on screen and periodically updated. Take your
    device on the move and you will see changes in the data as your geographical location
    changes.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AIR provides the `Geolocation` class in the `flash.sensors` package, allowing
    the location data to be retrieved from your device. To access the data, create
    a `Geolocation` instance and listen for it dispatching `GeolocationEvent.UPDATE`
    events.
  prefs: []
  type: TYPE_NORMAL
- en: 'We did this within our document class'' constructor, using the `geo` member
    variable to hold a reference to the object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The frequency with which location data is retrieved can be set by calling the
    `Geolocation.setRequestedUpdateInterval()` method. You can see this in the earlier
    code where we requested an update interval of 1000 milliseconds. This only acts
    as a hint to the device, meaning the actual time between updates may be greater
    or smaller than your request. Omitting this call will result in the device using
    a default update interval. The default interval can be anything ranging from milliseconds
    to seconds depending on the device's hardware capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each `UPDATE` event dispatches a `GeolocationEvent` object, which contains
    properties describing your current location. Our `geoUpdated()` method handles
    this event by outputting several of the properties to the dynamic text fields
    sitting on the stage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The following information was output:'
  prefs: []
  type: TYPE_NORMAL
- en: Latitude and longitude
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Altitude
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Horizontal and vertical accuracy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Timestamp
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The latitude and longitude positions are used to identify your geographical
    location. Your altitude is also obtained and is measured in meters. As you move
    with the device, these values will update to reflect your new location.
  prefs: []
  type: TYPE_NORMAL
- en: The accuracy of the location data is also shown and depends on the hardware
    capabilities of the device. Both the horizontal and vertical accuracy are measured
    in meters.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, a timestamp is associated with every `GeolocationEvent` object that
    is dispatched, allowing you to determine the actual time interval between each.
    The timestamp specifies the milliseconds that have passed since the app was launched.
  prefs: []
  type: TYPE_NORMAL
- en: Some older devices that do not include a GPS unit only dispatch `UPDATE` events
    occasionally. Initially, one or two `UPDATE` events are dispatched, with additional
    events only being dispatched when location information changes noticeably.
  prefs: []
  type: TYPE_NORMAL
- en: Also note the use of the static `Geolocation.isSupported` property within the
    constructor. Although this will currently return `true` for all iOS devices, it
    cannot be guaranteed for future devices. Checking for geolocation support is also
    advisable when writing cross-platform code.
  prefs: []
  type: TYPE_NORMAL
- en: For more information, perform a search for `flash.sensors.Geolocation` and `flash.events.GeolocationEvent`
    within Adobe Community Help.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The amount of information made available and the accuracy of that information
    depends on the capabilities of the device.
  prefs: []
  type: TYPE_NORMAL
- en: Accuracy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The accuracy of the location data depends on the method employed by the device
    to calculate your position. Typically, iOS devices with an on-board GPS chip will
    have a benefit over those that rely on Wi-Fi triangulation.
  prefs: []
  type: TYPE_NORMAL
- en: For example, running this recipe's app on an iPhone 4, which contains a GPS
    unit, results in a horizontal accuracy of around 10 meters. The same app running
    on a third-generation iPod touch and relying on a Wi-Fi network, reports a horizontal
    accuracy of around 100 meters. Quite a difference!
  prefs: []
  type: TYPE_NORMAL
- en: Altitude support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The current altitude can only be obtained from GPS-enabled devices. On devices
    without a GPS unit, the `GeolocationEvent.verticalAccuracy` property will return
    `-1` and `GeolocationEvent.altitude` will return `0`. A vertical accuracy of `-1`
    indicates that altitude cannot be detected.
  prefs: []
  type: TYPE_NORMAL
- en: You should be aware of, and code for these restrictions when developing apps
    that provide location-based services. Do not make assumptions about a device's
    capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: If your application relies on the presence of GPS hardware, then it is possible
    to state this within your application descriptor file. Doing so will prevent users
    without the necessary hardware from downloading your app from the App Store.
  prefs: []
  type: TYPE_NORMAL
- en: For more information, take a look at the *Declaring device capabilities* recipe
    from [Chapter 13](ch13.html "Chapter 13. Connectivity, Persistence, and URI Schemes").
  prefs: []
  type: TYPE_NORMAL
- en: Mapping your location
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The most obvious use for the retrieval of geolocation data is mapping. Typically,
    an app will obtain a geographic location and display a map of its surrounding
    area. There are several ways to achieve this, but launching and passing location
    data to the device's native maps application is possibly the easiest solution.
    Take a look at *Launching the Maps application* from [Chapter 13](ch13.html "Chapter 13. Connectivity,
    Persistence, and URI Schemes") to see how this is done.
  prefs: []
  type: TYPE_NORMAL
- en: If you would prefer an ActionScript solution, then there is the UMap ActionScript
    3.0 API, which integrates with map data from a wide range of providers including
    Bing, Google, and Yahoo!. You can sign up and download the API from [www.umapper.com](http://www.umapper.com).
    Also tutorials are available at [www.afcomponents.com/tutorials/umap_as3](http://www.afcomponents.com/tutorials/umap_as3).
  prefs: []
  type: TYPE_NORMAL
- en: Calculating distance between geolocations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the geographic coordinates of two separate locations are known, it is
    possible to determine the distance between them. AIR does not provide an API for
    this but an AS3 solution can be found on the Adobe Developer Connection website
    at: [http://cookbooks.adobe.com/index.cfm?event=showdetails&postId=5701](http://cookbooks.adobe.com/index.cfm?event=showdetails&postId=5701).'
  prefs: []
  type: TYPE_NORMAL
- en: The UMap ActionScript 3.0 API can also be used to calculate distances. Refer
    to [www.umapper.com](http://www.umapper.com).
  prefs: []
  type: TYPE_NORMAL
- en: Geocoding
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Mapping providers, such as Google and Yahoo!, provide geocoding and reverse-geocoding
    web services. Geocoding is the process of finding the latitude and longitude of
    an address, whereas reverse-geocoding converts a latitude-longitude pair into
    a readable address.
  prefs: []
  type: TYPE_NORMAL
- en: You can make HTTP requests from your AIR for iOS application to any of these
    services. As an example, take a look at the Yahoo! PlaceFinder web service at
    [http://developer.yahoo.com/geo/placefinder](http://developer.yahoo.com/geo/placefinder).
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, the UMap ActionScript 3.0 API integrates with many of these services
    to provide geocoding functionality directly within your Flash projects. Refer
    to the uMapper website.
  prefs: []
  type: TYPE_NORMAL
- en: Gyroscope support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another popular sensor is the gyroscope, which is found in more recent iOS devices.
    While the AIR SDK does not directly support gyroscope access, Adobe has made available
    a native extension for AIR 3.0, which provides a `Gyroscope` ActionScript class.
  prefs: []
  type: TYPE_NORMAL
- en: A download link and usage examples can be found on the Adobe Developer Connection
    site at [www.adobe.com/devnet/air/native-extensions-for-air/extensions/gyroscope.html](http://www.adobe.com/devnet/air/native-extensions-for-air/extensions/gyroscope.html).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Determining your speed and heading*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Launching the Maps application, [Chapter 13](ch13.html "Chapter 13. Connectivity,
    Persistence, and URI Schemes")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determining your speed and heading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The availability of an on-board GPS unit makes it possible to determine your
    speed and heading. In this recipe, we will write a simple app that uses the `Geolocation`
    class to obtain and use this information. In addition, we will add compass functionality
    by utilizing the user's current heading.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need a GPS-enabled iOS device. The iPhone has featured an on-board
    GPS unit since the release of the 3G. GPS hardware can also be found in all cellular
    network-enabled iPads.
  prefs: []
  type: TYPE_NORMAL
- en: From Flash Professional, open `chapter9\recipe2\recipe.fla` from the book's
    accompanying code bundle.
  prefs: []
  type: TYPE_NORMAL
- en: Sitting on the stage are three dynamic text fields. The first two `(speed1Field`
    and `speed2Field)` will be used to display the current speed in meters per second
    and miles per hour respectively. We will write the device's current heading into
    the third`—headingField.`
  prefs: []
  type: TYPE_NORMAL
- en: Also, a movie clip named `compass` has been positioned near the bottom of the
    stage and represents a compass with north, south, east, and west clearly marked
    on it. We will update the rotation of this clip in response to heading changes
    to ensure that it always points towards true north.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To obtain the device''s speed and heading, carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a document class and name it `Main`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the necessary import statements, a constant, and a member variable of type
    `Geolocation:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the constructor, instantiate a `Geolocation` object and listen for updates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will need an event listener for the `Geolocation` object''s `UPDATE` event.
    This is where we will obtain and display the current speed and heading, and also
    update the `compass` movie clip to ensure it points towards true north. Add the
    following method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add this support method to convert meters per second to miles per
    hour:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the class file as `Main.as`. Move back to the FLA and save it too.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compile the FLA and deploy the IPA to your device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch the app. When prompted, grant your app access to the GPS unit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hold the device in front of you and start turning on the spot. The **heading
    (degrees)** field will update to show the direction you are facing. The `compass`
    movie clip will also update, showing you where true north is in relation to your
    current heading.
  prefs: []
  type: TYPE_NORMAL
- en: Take your device outside and start walking, or better still, start running.
    On average every 50 milliseconds you will see the top two text fields update and
    show your current speed, measured in both meters per second and miles per hour.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we created a `Geolocation` object and listened for it dispatching
    `UPDATE` events. An update interval of 50 milliseconds was specified in an attempt
    to receive the speed and heading information frequently.
  prefs: []
  type: TYPE_NORMAL
- en: Both the speed and heading information are obtained from the `GeolocationEvent`
    object, which is dispatched on each `UPDATE` event. The event is captured and
    handled by our `geoUpdated()` handler, which displays the speed and heading information
    from the accelerometer.
  prefs: []
  type: TYPE_NORMAL
- en: 'The current speed is measured in meters per second and is obtained by querying
    the `GeolocationEvent.speed` property. Our handler also converts the speed to
    miles per hour before displaying each value within the appropriate text field.
    The following code does this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The heading, which represents the direction of movement (with respect to true
    north) in degrees, is retrieved from the `GeolocationEvent.heading` property.
    The value is used to set the `rotation` property of the `compass` movie clip and
    is also written to the `headingField` text field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The remaining method is `getMilesPerHour()` and is used within `geoUpdated()`
    to convert the current speed from meters per second into miles per hour. Notice
    the use of the `CONVERSION_FACTOR` constant that was declared within your document
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Although the speed and heading obtained from the GPS unit will suffice for most
    applications, the accuracy can vary across devices. Your surroundings can also
    have an affect; moving through streets with tall buildings or under tree coverage
    can impair the readings.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information regarding `flash.sensors.Geolocation` and `flash.events.GeolocationEvent`
    within Adobe Community Help.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following information provides some additional detail.
  prefs: []
  type: TYPE_NORMAL
- en: Determining support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Your current speed and heading can only be determined by devices that possess
    a GPS receiver.
  prefs: []
  type: TYPE_NORMAL
- en: Although you can install this recipe's app on any iOS device, you won't receive
    valid readings from any model of iPod touch, the original iPhone, or W-Fi-only
    iPads. Instead the `GeolocationEvent.speed` property will return `-1` and `GeolocationEvent.heading`
    will return `NaN`.
  prefs: []
  type: TYPE_NORMAL
- en: If your application relies on the presence of GPS hardware, then it is possible
    to state this within the application descriptor file. Doing so will prevent users
    without the necessary hardware from downloading your app from the App Store.
  prefs: []
  type: TYPE_NORMAL
- en: For more information, take a look at the *Declaring device capabilities* recipe
    from [Chapter 13](ch13.html "Chapter 13. Connectivity, Persistence, and URI Schemes").
  prefs: []
  type: TYPE_NORMAL
- en: Simulating the GPS receiver
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: During the development lifecycle it is not feasible to continually test your
    app in a live environment. Instead you will probably want to record live data
    from your device and re-use it during testing. There are various apps available
    that will log data from the sensors on your device.
  prefs: []
  type: TYPE_NORMAL
- en: One such app is xSensor, which can be downloaded from iTunes or the App Store
    and is free. Its data sensor log is limited to 5KB but this restriction can be
    lifted by purchasing xSensor Pro.
  prefs: []
  type: TYPE_NORMAL
- en: Preventing screen idle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many of this chapter's apps don't require you to touch the screen that often.
    Therefore you will be likely to experience the backlight dimming or the screen
    locking while testing them. This can be inconvenient and can be prevented by disabling
    screen locking. For more details, see the *Preventing screen idle* recipe in [Chapter
    3](ch03.html "Chapter 3. Writing your First App").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Determining your current location*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Checking for geolocation access*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking for geolocation access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Applications that make use of a device's location data must be granted permission
    by the user. The user is prompted when an app attempts to access location data
    for the first time. Devices running iOS 4 or above will remember this choice,
    whereas older versions of iOS will request access each time the app is launched.
    In addition, access privileges can be changed at any time from the device's settings.
  prefs: []
  type: TYPE_NORMAL
- en: It is important that your app can detect the availability of geolocation data,
    and also respond to permission changes at runtime. Let us see how this is done.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An FLA has been provided as a starting point.
  prefs: []
  type: TYPE_NORMAL
- en: From the book's accompanying code bundle, open `chapter9\recipe3\recipe.fla`
    into Flash Professional.
  prefs: []
  type: TYPE_NORMAL
- en: A dynamic text field with an instance name of `output` has been added to the
    stage.
  prefs: []
  type: TYPE_NORMAL
- en: We will write an app that listens for the availability of the geolocation data
    and reports any changes to the `output` text field.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a document class and name it `Main`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the following import statements and a member variable of type `Geolocation:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Within the constructor, create a `Geolocation` object and listen for it dispatching
    `GeolocationEvent.UPDATE` and `StatusEvent.STATUS:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add a handler for each event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the class file as `Main.as`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the FLA and publish it. Install the IPA and launch it on your device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A native iOS dialog will appear with the following prompt:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**"c9 r3" Would Like to Use Your Current Location**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tap the **Don't Allow** button to deny the app access to the device's location
    data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following text will appear on-screen:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Obtaining location...**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'And will quickly be replaced with:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Geolocation access denied.**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now re-launch the app. If you are using iOS 4 or above, your previous setting
    will be remembered and access to the geolocation data will once again be denied.
    If you are using an earlier version of iOS, then you will be prompted to grant
    access each time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: To re-launch an app in iOS 4 or above, you will first need to kill it using
    the fast app switcher. Refer to the *Exiting gracefully from an app* recipe in
    [Chapter 3](ch03.html "Chapter 3. Writing your First App"), for details on how
    to do this.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On devices running iOS 4 or above, an app's access privileges can be changed
    from the device's settings. Let us do this for our app.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Exit from the app by pressing the Home button. From the device's settings, move
    to **Location Services**. You will be presented with a list of apps that have
    attempted to access location data. Scroll down until you find **c9 r3**. Tap the
    button next to it to allow access to it.![How to do it...](img/1383_09_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now move back to the home screen and launch this recipe's app again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This time you will see the following text:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Obtaining location...**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'And it will quickly be replaced with:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Location received.**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the user prevents an AIR for iOS app from accessing location data, `GeolocationEvent.UPDATE`
    events cease and `StatusEvent.STATUS` is dispatched from the `Geolocation` object.
    It is therefore possible to determine when access to location data has been revoked
    by simply listening for the `STATUS` event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'A final check is performed within the `statusUpdated()` handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In this method, we query the `StatusEvent` object's `code` property. If it has
    a string value of `Geolocation.Muted`, then we know that access to the geolocation
    data is no longer available.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, although it wasn't used in this recipe's example, you can also access
    the `Geolocation.muted` property to determine if geolocation data is available.
    When a newly installed app is launched for the first time, `muted` will be set
    to `true` until the user grants permission from the native iOS dialog.
  prefs: []
  type: TYPE_NORMAL
- en: More information regarding `flash.events.StatusEvent` can be found in Adobe
    Community Help.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Determining your current location*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responding to accelerometer changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The accelerometer provides access to data that represents the device's location
    or movement along a three-dimensional axis. When motion is detected, it is returned
    as data, which can be accessed by ActionScript.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to take advantage of the accelerometer found in
    iOS devices.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An FLA has been provided as a starting point.
  prefs: []
  type: TYPE_NORMAL
- en: Open `chapter9\recipe4\recipe.fla` from the book's accompanying code bundle
    into Flash Professional.
  prefs: []
  type: TYPE_NORMAL
- en: You will find five dynamic text fields positioned on the stage. Below them is
    a movie clip with an instance name of `arrow`. We will populate each text field
    with data retrieved from the device's accelerometer and rotate the movie clip
    to reflect physical changes in the device's orientation.
  prefs: []
  type: TYPE_NORMAL
- en: Also notice the stage's dimensions are set to 480x320\. For this recipe, landscape
    orientation will be used.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform these steps to listen for and respond to accelerometer changes:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a document class and name it `Main`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the following two import statements and a member variable of type `Accelerometer:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the constructor, instantiate an `Accelerometer` object and listen for
    updates from it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finish by writing an event handler that will obtain and use the updated accelerometer
    data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the class file as `Main.as`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, save your FLA and then publish it. Install the app to your device and
    launch it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As the device's motion sensor detects activity, the text fields will update.
    Holding the device in front of yourself and tilting it clockwise and counter-clockwise
    will update the rotation of the `arrow` movie clip, ensuring that it always points
    upwards.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We accessed the accelerometer''s data by creating an instance of the `Accelerometer`
    class and listening for it dispatching the `AccelerometerEvent.UPDATE` event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The frequency with which `UPDATE` events are received can be set by calling
    the `Accelerometer.setRequestedUpdateInterval()` method. You can see this in the
    earlier code where we requested an update every 50 milliseconds. This only acts
    as a hint to the device, meaning the actual time between updates may be greater
    or smaller than your request. Omitting this call will result in the device using
    a default update interval. The default interval can be anything ranging from milliseconds
    to seconds depending on the device's hardware capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `UPDATE` event is an `AccelerometerEvent` object and provides access to
    the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`accelerationX` —Acceleration along the x-axis. When the device is upright,
    the x-axis runs from left to right. Acceleration is positive if the device is
    moved to the right.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`accelerationY`—Acceleration along the y-axis. When the device is upright,
    the y-axis runs from bottom to top. Acceleration is positive if the device is
    moved upwards.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`accelerationZ`—Acceleration along the z-axis. The acceleration is positive
    if the device is moved so that its face points upwards. Acceleration is negative
    if it faces towards the ground.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timestamp` —The number of milliseconds that have elapsed since the app was
    launched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Acceleration is measured in "g" with 1g being the standard acceleration due
    to gravity, which is approximately 9.8 meters per second squared.
  prefs: []
  type: TYPE_NORMAL
- en: 'We obtain these properties within the `accUpdated()` handler and write them
    to our dynamic text fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, the `accelerometerX` and `accelerometerY` properties are used
    to calculate the angle at which the device is being held (with the screen facing
    you). This is used to update the rotation of the `arrow` movie clip. The following
    is the code that does this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Knowing the angle, at which the device is being tilted, is useful for many applications.
    In particular games, where tilting the device may be used to move a character
    along a platform or simulate the movement of a steering wheel.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, within the constructor, note the use of the static read-only property
    `Accelerometer.isSupported` to check for the availability of an accelerometer.
    The accelerometer is supported on all existing iOS devices but isn't guaranteed
    for future devices. It is therefore a good practice to check for support and is
    also beneficial when writing cross-platform code.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following is some more information regarding the accelerometer and how to
    work with its data.
  prefs: []
  type: TYPE_NORMAL
- en: Orientation and the accelerometer axes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The accelerometer axes are re-oriented with the device's display rather than
    the physical orientation of the device itself. In other words, when auto-orientation
    is active, the y-axis will be vertical when the display's content is being viewed
    in a normal up-right position. This is true for both apps that default to a portrait
    aspect-ratio and apps that default to a landscape aspect-ratio. If however, auto-orientation
    is not active, then the accelerometer axes will not be re-oriented when the device
    is rotated.
  prefs: []
  type: TYPE_NORMAL
- en: Determining device orientation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Data from the accelerometer is affected by gravity and can be useful to determine
    the device''s current orientation. The following are the values to check for:'
  prefs: []
  type: TYPE_NORMAL
- en: '`accelerationX`> 0.5—Rotated 90 degrees counter clockwise'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`accelerationX`< -0.5—Rotated 90 degrees clockwise'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`accelerationY`> 0.5—Normal upright position'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`accelerationY`< -0.5—Upside down'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`accelerationZ`> 0.5—Face up'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`accelerationZ`< -0.5—Face down'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This provides an alternative to determining orientation by listening for `StageOrientationEvent`
    objects being dispatched from the stage. In addition, using the acceleration data
    makes it possible to determine whether the device's screen display is facing upwards
    or towards the ground.
  prefs: []
  type: TYPE_NORMAL
- en: Applying a low-pass filter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Data from the accelerometer is affected by both the effect of gravity and sudden
    changes in motion. If you are using this data to detect the device's orientation,
    then you should isolate the gravity component from the data by applying a low-pass
    filter.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be achieved by smoothing out the data over time. To do this, start
    by creating a filtering factor and three member variables to store the previous
    value for each axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now in response to each `AccelerometerEvent.UPDATE`, apply a low-pass filter
    to keep only the gravity component from each axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Essentially this code generates a value for each axis that uses 10 percent of
    its current data and 90 percent of the previously filtered data. This will ensure
    that data responds slowly to sudden and short-lived changes in motion.
  prefs: []
  type: TYPE_NORMAL
- en: Applying a high-pass filter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many types of applications use accelerometer data to detect sudden changes in
    motion. A high-pass filter can be used to isolate the portion of the data that
    is caused by sudden changes in motion.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to the implementation of a low-pass filter, use a filtering factor
    plus three member variables to store the previous value for each axis. Then in
    response to each `AccelerometerEvent.UPDATE`, apply the filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: In this example, a low-pass filter value is calculated for each axis and subtracted
    from the current value. Doing so keeps the sudden changes in motion while removing
    the gravity component.
  prefs: []
  type: TYPE_NORMAL
- en: The "muted" property
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Accelerometer` class has a static read-only property named `muted.` It
    is used to determine if a user has granted the app permission to access accelerometer
    data. This property isn't required for iOS as there is no way, at present, to
    deny an app access to the accelerometer.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Setting the default aspect ratio, [Chapter 8](ch08.html "Chapter 8. Screen
    Resolution and Orientation Changes")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Enabling auto-orientation, [Chapter 8](ch08.html "Chapter 8. Screen Resolution
    and Orientation Changes")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Responding to orientation changes, [Chapter 8](ch08.html "Chapter 8. Screen
    Resolution and Orientation Changes")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting a shake
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A common use of the accelerometer is to detect a shake and this has become a
    popular method of interaction in games and applications. For example, many of
    the apps that come with iOS allow the user to perform an undo by shaking the device.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to determine if the user is shaking their device
    by examining the data coming from the accelerometer.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the book's accompanying code bundle, open `chapter9\recipe5\recipe.fla`
    into Flash Professional.
  prefs: []
  type: TYPE_NORMAL
- en: You will find a movie clip named `shake` sitting in the center of the stage.
    Its timeline consists of two key-frames.
  prefs: []
  type: TYPE_NORMAL
- en: We will write some ActionScript that will move the clip in response to changes
    along the device's three axes. When the motion is pronounced, we will indicate
    to the user that a shake has been detected by jumping to the movie clip's second
    frame.
  prefs: []
  type: TYPE_NORMAL
- en: The stage uses a landscape aspect ratio for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to detect a shake:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a document class and name it `Main.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the classes required to work with the accelerometer and add the following
    member variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize the member variables and the `shake` movie clip. Also, instantiate
    an `Accelerometer` object and listen for it dispatching `UPDATE` events:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a handler for the `UPDATE` event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the class file and when prompted name it `Main.as`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now save the FLA and publish it. Test the app on your device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Gently shaking the device will displace the movie clip from the center of the
    screen. A more violent motion will also change its appearance indicating that
    a sufficiently large shake has been detected.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This example compares the current acceleration data with the previous to see
    if a sufficiently large change has occurred.
  prefs: []
  type: TYPE_NORMAL
- en: 'The previous acceleration data is stored within the `prevX, prevY`, and `prevZ`
    member variables and is compared against the current data to determine the change
    for each axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'If the change in any one of the three axes is large enough, then it is safe
    to assume that the device is being shaken. This information is fed back to the
    user by moving to the second frame of the `shake` movie clip. The following is
    the code that does this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The `THRESHOLD` constant simply dictates the amount of change that needs to
    take place in any of the axes for the motion to be deemed a shake. Lowering this
    value will reduce the effort required by the user to trigger a shake, while increasing
    it will make it more difficult.
  prefs: []
  type: TYPE_NORMAL
- en: 'To provide greater visual feedback, we also update the `x, y`, and `z` positions
    of the `shake` movie clip in response to changes from the accelerometer. The more
    violent the shaking motion, the more the clip is displaced from its original starting
    position:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The `startX` and `startY` member variables used are initialized within the constructor
    and are set to the `shake` movie clip's original position.
  prefs: []
  type: TYPE_NORMAL
- en: The majority of the work in this example is performed within the `accUpdated()`
    event handler, which is called each time `AccelerometerEvent.UPDATE` is dispatched
    from the `Accelerometer` object. To ensure the app is responsive, a call is made
    to the `setRequestedUpdateInterval()` method requesting frequent updates.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us look at some options to further improve this recipe's example.
  prefs: []
  type: TYPE_NORMAL
- en: Checking multiple axes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We checked for a large enough change in only one of the axes before deciding
    that the user was shaking the device. Another approach is to wait for a significant
    change in two of the three axes. The code for this would look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: For multiple axes you may want to reduce the `THRESHOLD` value slightly to compensate
    for the fact that the user must make a more exaggerated motion to initiate a shake.
  prefs: []
  type: TYPE_NORMAL
- en: Smoothing accelerometer data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may have noticed that even when holding the device still, the `shake` movie
    clip shudders slightly. Accelerometers aren't perfectly accurate and the data
    returned will contain some noise.
  prefs: []
  type: TYPE_NORMAL
- en: This noise can be reduced by applying a high-pass filter to your data over time
    and is detailed in the *Responding to accelerometer changes* recipe. Try experimenting
    with the filtering factor and the threshold constant until you find values that
    give you a result you are happy with.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Responding to accelerometer changes*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
