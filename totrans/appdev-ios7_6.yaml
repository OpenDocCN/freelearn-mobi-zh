- en: Chapter 6. Displaying User Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 显示用户数据
- en: We have almost completed our application; however, we still have one last major
    piece of functionality to add. Now that our users can add content, they need to
    be able to view that data. In this chapter, we will put together a custom cell,
    build a table view to display a list of data, and build a detail view of the items
    when a user selects an item from the list. On completing this chapter, we will
    have a fully functional application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎完成了我们的应用程序；然而，我们仍然需要添加一个最后的主要功能。现在，我们的用户可以添加内容，他们需要能够查看这些数据。在本章中，我们将组装一个自定义单元格，构建一个表格视图来显示数据列表，并在用户从列表中选择一个项目时构建项目的详细视图。完成本章后，我们将拥有一个完全功能的应用程序。
- en: We will begin by putting together our custom cell in the storyboard. Next, we
    will add a button to the navigation bar so that users can add food while viewing
    their current food items. Then, we will set up the table view, load our data,
    and pass the data to the table view. Lastly, we will implement the detail view
    of the items when a user selects an item from the table view. Let's get started!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先在故事板中组装我们的自定义单元格。接下来，我们将在导航栏中添加一个按钮，以便用户在查看当前食物项目时可以添加食物。然后，我们将设置表格视图，加载数据，并将数据传递到表格视图中。最后，当用户从表格视图中选择一个项目时，我们将实现项目的详细视图。让我们开始吧！
- en: Custom cell
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义单元格
- en: Before we start writing our code to display the data, we want to create a custom
    table view cell. With your project open, select **File** | **New** | **File**.
    Select **Cocoa Touch** as the base and select **Objective-C Class** before clicking
    on **Next**. We want this class to be a subclass of `UITableViewCell`. The cell
    will display food items, so let's give it the name `FoodCell`. Save this file
    and move it into our **Custom Class** group (if it is not already in it).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写显示数据的代码之前，我们想要创建一个自定义表格视图单元格。在项目打开的情况下，选择**文件** | **新建** | **文件**。选择**Cocoa
    Touch**作为基础，在点击**下一步**之前选择**Objective-C 类**。我们希望这个类是`UITableViewCell`的子类。单元格将显示食物项目，所以让我们给它命名为`FoodCell`。保存此文件并将其移动到我们的**自定义类**组（如果它还没有在那里）。
- en: Now that we have our class, let's link it up to our storyboard. Open `Main.storyboard`
    and find the table view controller we had previously moved into the storyboard.
    After opening the `Main.storyboard` file, open the **Utilities** pane and select
    the **Identity** section. Make sure that this view controller's class has been
    set to `MyFoodsViewController`. Now select the blank table view cell and set its
    class to our newly created `FoodCell` class.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了我们的类，让我们将其链接到我们的故事板。打开`Main.storyboard`并找到之前移动到故事板中的表格视图控制器。在打开`Main.storyboard`文件后，打开**实用工具**面板并选择**标识**部分。确保这个视图控制器的类已被设置为`MyFoodsViewController`。现在选择空白表格视图单元格并将其类设置为我们的新创建的`FoodCell`类。
- en: Building the cell
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建单元格
- en: 'Now that our class is linked, we can build the cell in our storyboard. The
    cell itself will consist of a `UIImageView` object and two `UILabel` instances.
    Open the **Utilities** pane and perform the following steps:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将类链接起来，我们可以在故事板中构建单元格。单元格本身将包含一个`UIImageView`对象和两个`UILabel`实例。打开**实用工具**面板，执行以下步骤：
- en: Drag a `UIImageView` object onto the cell itself to add it.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个`UIImageView`对象拖放到单元格本身以添加它。
- en: Set both the width and height to 100 pixels.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将宽度和高度都设置为100像素。
- en: Position the image view to the far left of the cell.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将图像视图放置在单元格的左侧。
- en: Drag two `UILabel` instances onto the cell, positioned one above the other.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个`UILabel`实例拖放到单元格中，一个位于另一个上方。
- en: From the **Attributes** pane, set the font family of the top label to **Helvetica
    Neue**.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**属性**面板中，将顶部标签的字体家族设置为**Helvetica Neue**。
- en: Set the style to **Ultra Light**.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将样式设置为**超轻**。
- en: Set the size to `20`.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将大小设置为`20`。
- en: Repeat this for the second (bottom) cell, but set the size to `11`.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对第二个（底部）单元格重复此操作，但将其大小设置为`11`。
- en: Set both labels to be left aligned.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个标签都设置为左对齐。
- en: Position the labels horizontally to your preference.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将标签水平放置到您喜欢的位置。
- en: 'Once completed, your cell should look similar to the following screenshot:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您的单元格应类似于以下截图：
- en: '![Building the cell](img/0319OT_06_01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![构建单元格](img/0319OT_06_01.jpg)'
- en: Connecting the cell
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接单元格
- en: 'Now that our cell is visually laid out, we need to connect it to the class
    we created earlier; perform the following steps to connect this cell to our class:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经可视地布局了单元格，我们需要将其连接到我们之前创建的类；执行以下步骤以连接此单元格到我们的类：
- en: Select the entire cell and then select the assistance editor. Make sure that
    we are viewing `FoodCell.h` in the right panel.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择整个单元格，然后选择辅助编辑器。确保我们在右侧面板中查看`FoodCell.h`。
- en: Control drag from the image to create an outlet named `foodImageView`. We want
    to avoid naming it just `imageView` because this property already exists by default
    on `UITableViewCell`.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从图片拖动以创建一个名为 `foodImageView` 的出口。我们不想将其命名为 `imageView`，因为这个属性已经在 `UITableViewCell`
    上默认存在。
- en: Do the same for both labels giving them the names `foodNameLabel` and `dateAddedLabel`,
    respectively.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分别给两个标签命名为 `foodNameLabel` 和 `dateAddedLabel`。
- en: Creating properties
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建属性
- en: 'Now that our cell is ready, let''s start coding `MyFoodsViewController`. This
    class will be loading the saved user data in order to display it, so we need to
    create an array property to hold the data. Additionally, we want our dates to
    be displayed in a user-friendly format, so let''s also create a date formatter
    property. The date formatter is a useful class provided by Apple that allows you
    to manipulate the format of dates based on specific patterns. This is helpful
    considering that different locales require different formatted dates. Switch to
    `MyFoodsViewController.h` and add the following code:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在单元格已经准备好了，让我们开始编写 `MyFoodsViewController` 的代码。这个类将加载保存的用户数据以显示它，因此我们需要创建一个数组属性来保存数据。此外，我们希望日期以用户友好的格式显示，因此我们还要创建一个日期格式化属性。日期格式化器是苹果提供的一个有用的类，它允许您根据特定的模式操纵日期的格式。考虑到不同的地区需要不同的日期格式，这非常有用。切换到
    `MyFoodsViewController.h` 并添加以下代码：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the preceding code, we simply created both the required properties. In addition
    to viewing the food items already created, a user will have the ability to create
    new items from this view too. In order to support this, we import the custom cell
    we created as well as the `AddNewViewController` class. We also imported the `FoodDetailViewController`
    class so that we can display our detail view.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们简单地创建了所需的两个属性。除了查看已创建的食物项外，用户还将能够从该视图创建新项目。为了支持这一点，我们导入了我们创建的自定义单元格以及
    `AddNewViewController` 类。我们还导入了 `FoodDetailViewController` 类，以便我们可以显示我们的详细视图。
- en: Adding food
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加食物
- en: 'The first thing we want to do is give the user the ability to add additional
    food items from this view. The best way to do this is to add a button in the navigation
    bar. Apple provides a system button to add items that will be displayed as a nice
    plus button. Switch to `MyFoodsViewController.m` and scroll down to the `viewDidLoad`
    method. Add the following code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要做的第一件事是让用户能够从该视图添加额外的食物项。最好的方法是向导航栏中添加一个按钮。苹果提供了一个系统按钮来添加项目，它将显示为一个漂亮的加号按钮。切换到
    `MyFoodsViewController.m` 并滚动到 `viewDidLoad` 方法。添加以下代码：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, we create a new `UIBarButtonItem` property to go on the navigation bar.
    We have set the button to system item add to give us that plus button. Next, we
    tell the navigation controller to add this button as a right-hand side bar button
    item so it will show up on the right-hand side of the navigation bar.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建一个新的 `UIBarButtonItem` 属性用于导航栏。我们将按钮设置为系统项目添加，以给我们那个加号按钮。接下来，我们告诉导航控制器将此按钮添加为右侧栏按钮项，因此它将显示在导航栏的右侧。
- en: Additionally, we set the title of the navigation controller and adjust the back
    button text. By default, iOS will add the previous view controller's title to
    the back button. For our application design, we simply want the back button icon
    only with no text. This line of code can be added to any view controller you wish
    to replicate this functionality.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们设置了导航控制器的标题并调整了返回按钮文本。默认情况下，iOS 将将前一个视图控制器的标题添加到返回按钮上。对于我们的应用程序设计，我们只想显示返回按钮图标，没有文本。此行代码可以添加到任何您希望复制此功能的视图控制器中。
- en: 'Lastly, we want to implement the same `addButtonPressed` method we used in
    our `MenuViewController`. Add this code below `viewDidLoad`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们想要实现与我们在 `MenuViewController` 中使用的相同的 `addButtonPressed` 方法。在 `viewDidLoad`
    下方添加以下代码：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Preparing the table view
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备表格视图
- en: Before we load any data, let's go ahead and set up our table view. To do so,
    we will be editing our table view delegate methods that Xcode automatically created
    for us. Scroll down to the `numberOfSectionInTableview` method and change the
    return value from `0` to `1`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载数据之前，让我们先设置我们的表格视图。为此，我们将编辑 Xcode 自动为我们创建的表格视图代理方法。滚动到 `numberOfSectionInTableview`
    方法并将返回值从 `0` 更改为 `1`。
- en: The next delegate method we should implement is `numberOfRowsInSection`. This
    number will frequently change, so instead of hard coding the number as in the
    previous method, we will set this to the count of `myFoodsArray`. Every time the
    array is updated, the table view will also be updated.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该实现的下一个代理方法是 `numberOfRowsInSection`。这个数字会经常变化，所以我们不会像上一个方法那样硬编码数字，而是将其设置为
    `myFoodsArray` 的计数。每次数组更新时，表格视图也会更新。
- en: The next method to update is `cellForRowAtIndexPath`. The default code will
    work just fine as long as we update the class name and cell identifier. Replace
    `Cell` with `FoodCell` and change the class declaration from `UITableViewCell`
    to `FoodCell`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个需要更新的方法是 `cellForRowAtIndexPath`。默认代码只要我们更新类名和单元格标识符就可以正常工作。将 `Cell` 替换为
    `FoodCell`，并将类声明从 `UITableViewCell` 更改为 `FoodCell`。
- en: Lastly, we need to add an additional delegate method that was not added. Below
    `cellForRowAtIndexPath`, type `- table`, and a list of possible methods will appear.
    Scroll through, find `didSelectRowAtIndexPath`, and select it. Xcode 5 will automatically
    type the remainder of the method call. Be sure to include the opening and closing
    brackets of the method.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要添加一个之前未添加的额外代理方法。在 `cellForRowAtIndexPath` 下方，输入 `- table`，将出现一系列可能的方法。滚动浏览，找到
    `didSelectRowAtIndexPath` 并选择它。Xcode 5 将自动输入方法调用的其余部分。确保包括方法的开始和结束括号。
- en: 'Your code should look like the following code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码应类似于以下代码：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Loading data
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载数据
- en: It's time to load our data so that we can display it in the table view. Loading
    the data is very similar to the way we checked for files and saved the data in
    the previous chapter, because both require a specified path in the documents directory
    to be defined. For our application, we will create a method to load the data and
    return an array.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候加载数据了，这样我们就可以在表格视图中显示它。加载数据的方式与我们在上一章中检查文件和保存数据的方式非常相似，因为两者都需要在文档目录中定义一个指定的路径。对于我们的应用程序，我们将创建一个加载数据并返回数组的函数。
- en: 'Place the following code below the `addButtonPressed` method:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码放置在 `addButtonPressed` 方法下方：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This code should be somewhat familiar. First, we create an array of paths using
    `NSDocumentsDirectory` and assign the path to the documents directory to a string.
    Next, we define the path to the file we want to load, in this case the `Data.plist`
    file we created previously. We allocate an `NSFileManager` instance and use it
    to check if the specified file exists at that path. If so, we assign the contents
    of the file to `self.myFoodsArray` and then reload the table view. Now, we have
    loaded all data (if any) and passed that data on to the table view.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码应该有些熟悉。首先，我们使用 `NSDocumentsDirectory` 创建一个路径数组，并将文档目录的路径分配给一个字符串。接下来，我们定义我们想要加载的文件的路径，在本例中是之前创建的
    `Data.plist` 文件。我们分配一个 `NSFileManager` 实例，并使用它来检查指定路径是否存在该文件。如果存在，我们将文件的內容分配给
    `self.myFoodsArray`，然后重新加载表格视图。现在，我们已经加载了所有数据（如果有），并将这些数据传递给了表格视图。
- en: Displaying data
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示数据
- en: With our data loaded, we can now display the data in our custom cell. Scroll
    down to `cellForRowAtIndexPath` and let's set up our cell.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载数据后，我们现在可以在自定义单元格中显示数据。滚动到 `cellForRowAtIndexPath` 并设置我们的单元格。
- en: 'First, we need to grab the current food item from our array. We will do this
    using the `indexPath.row` parameter passed to `cellForRowAtIndexPath`. Add the
    following line of code below our cell allocation and before `return cell`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要从我们的数组中获取当前食品项目。我们将使用传递给 `cellForRowAtIndexPath` 的 `indexPath.row` 参数来完成此操作。在我们的单元格分配下方并在
    `return cell` 之前添加以下代码行：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now that we have `currentFoodItem`, we can start assigning our custom cells
    properties. Let''s begin with the image. Add the following code to `cellForRowAtIndexPath`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了 `currentFoodItem`，我们可以开始分配我们自定义单元格的属性。让我们从图片开始。将以下代码添加到 `cellForRowAtIndexPath`：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here, we simply allocate an image based on the `image_filepath` key we created
    for each food item. Next, we set this image as the current cell''s image. Now,
    we can set the text for the name of the food item with the following code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们根据为每个食品项目创建的 `image_filepath` 键分配一个图像。接下来，我们将此图像设置为当前单元格的图像。现在，我们可以使用以下代码设置食品项目的文本：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The last item to update in our cell is the date the food item was added. We
    need to actually create our date formatter before this will work; so, let''s do
    that now. Allocating date formatters can be very CPU-intensive, so we are creating
    a property that is allocated only once, rather than each time a cell is loaded.
    Scroll down to the `viewDidLoad` method and add the following code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的单元格中最后要更新的项目是食品项目添加的日期。我们需要在实际工作之前创建我们的日期格式化器；因此，让我们现在就做。分配日期格式化器可能会非常占用CPU资源，因此我们创建了一个属性，它只分配一次，而不是每次加载单元格时都分配。滚动到`viewDidLoad`方法并添加以下代码：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: First, we allocate and initialize our `NSDateFormatter` property. Next, we set
    the date format. The format we have chosen will display the month as a word, the
    day number in the month, and the year with all the digits. With all of this in
    place, run your code to test it. If you don't have any food items yet, go ahead
    and add some from this view to test its functionality.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们分配并初始化我们的`NSDateFormatter`属性。接下来，我们设置日期格式。我们选择的格式将显示月份作为单词、月份中的日期数字以及全部数字的年份。所有这些设置完成后，运行你的代码以测试它。如果你还没有任何食品项目，请从该视图添加一些以测试其功能。
- en: 'Lastly, add the following final code to `cellForRowAtIndexPath`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将以下最终代码添加到`cellForRowAtIndexPath`：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, we set the date of the cell to the current items date in the format specified
    by our date formatter.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将单元格的日期设置为当前项目日期，格式由我们的日期格式化器指定。
- en: Showing the detail view
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示详细视图
- en: When selecting one of the food items, the user should be directed to a new view
    with the capacity to display more details. All of the code to do this will be
    handled in `didSelectRowAtIndexPath`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当选择一个食品项目时，用户应被引导到一个新的视图，该视图具有显示更多详细信息的功能。处理所有这些代码将在`didSelectRowAtIndexPath`中完成。
- en: 'Before we write the code to push our detail view, we are going to adjust its
    layout. Switch to `Main.storyboard`, locate the `FoodDetailViewController` object,
    and perform the following steps:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们编写推送详细视图的代码之前，我们将调整其布局。切换到`Main.storyboard`，定位`FoodDetailViewController`对象，并执行以下步骤：
- en: Select one of the image views and size it to fit the entire screen. This will
    be our background image, so it must be the back layer as well. If needed, use
    the document outline to arrange the views.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个图像视图，并调整其大小以适应整个屏幕。这将是我们背景图像，因此它必须是背景层。如果需要，请使用文档大纲来排列视图。
- en: Select the remaining image view and set its size to 200 x 200 square pixels.
    Position it centered horizontally and towards the top of the screen. This will
    be the food items' large image.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择剩余的图像视图，并设置其大小为200 x 200平方像素。将其水平居中并放置在屏幕顶部。这将是大食品项目的图像。
- en: Next, move the two labels in the view to just below the second image (the food
    image). Select the first label and open the **Attributes Inspector** from the
    **Utilities** pane. Set the font to **Helvetica Neue Thin** with a size of `24`.
    Now, change to the **Size Inspector** and set the label's width to `280` and height
    to `32`. Position this label centered horizontally and just below the food image.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将视图中的两个标签移动到第二个图像（食品图像）下方。选择第一个标签，从**实用工具**面板打开**属性检查器**。将字体设置为大小为`24`的**Helvetica
    Neue Thin**。现在，切换到**大小检查器**，设置标签的宽度为`280`，高度为`32`。将此标签水平居中并放置在食品图像下方。
- en: Select the second label and set its font to **Helvetica Neue Thin** of size
    `13`. Also, change its width to `280` and height to `26`. Also, position this
    label centered horizontally just below the name label.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择第二个标签，并将其字体设置为大小为`13`的**Helvetica Neue Thin**。同时，将其宽度设置为`280`，高度设置为`26`。此外，将此标签水平居中放置在名称标签下方。
- en: 'Everything in our storyboard is how we need it for the final app! The following
    screenshot is what your `FoodDetailViewController` should look like:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在故事板中的所有内容都是我们最终应用所需的！以下截图显示了你的`FoodDetailViewController`应该看起来像什么：
- en: '![Showing the detail view](img/0319OT_06_02.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![显示详细视图](img/0319OT_06_02.jpg)'
- en: Coding the detail view
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写详细视图的代码
- en: 'When pushing the detail view, we will pass the food item dictionary as a property
    so that we can display the data related to that food item in the detail view.
    To do this, let''s add a property. Switch to `FoodDetailViewController.h`, and
    beneath our `IBOutlets`, add the following property:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在推送详细视图时，我们将传递食品项目字典作为属性，以便在详细视图中显示与该食品项目相关的数据。为此，让我们添加一个属性。切换到`FoodDetailViewController.h`，在我们的`IBOutlets`下方添加以下属性：
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Creating blurred images
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建模糊图像
- en: Now, we can pass a food item to this view controller. Next, we want to set the
    background image of the detail view. For our application, we are going to use
    our food image itself as the background image. Before we set the image, we will
    blur it and apply a dark tint to create a nice blurred image effect.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以将一个食品项目传递给这个视图控制器。接下来，我们想要设置详细视图的背景图像。在我们的应用程序中，我们将使用我们的食品图像本身作为背景图像。在设置图像之前，我们将对其进行模糊处理并应用深色调以创建一个漂亮的模糊图像效果。
- en: 'In order to do this, we will be using a `UIImage` category provided by Apple
    on the Apple Developer Portal. I have packed this category with the resources
    file available for download with this book. Open the provided `Food And Me` folder
    that was downloaded earlier from the Packt Publishing website (if you have not
    downloaded these files, you can find them by visiting this link in your browser:
    [http://www.packtpub.com/](http://www.packtpub.com/)) and then open the `Apple
    Code` folder. You will find a `.h` file and a `.m` file titled `UIImage+ImageEffects`.
    Drag these files to your project and make sure you check the copied items into
    the destination project folder.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这项任务，我们将使用苹果开发者门户上提供的`UIImage`类别。我已经将这个类别与本书提供的资源文件打包在一起。打开之前从Packt Publishing网站下载的`Food
    And Me`文件夹（如果您尚未下载这些文件，可以通过在浏览器中访问此链接找到它们：[http://www.packtpub.com/](http://www.packtpub.com/)），然后打开`Apple
    Code`文件夹。您将找到一个名为`UIImage+ImageEffects`的`.h`文件和一个`.m`文件。将这些文件拖到您的项目中，并确保将复制的项目放入目标项目文件夹中。
- en: 'Now that we have the files in our project, we need to import them. Add this
    import statement below `#import <UIKit/UIKit.h>`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将文件放入我们的项目中，我们需要导入它们。在`#import <UIKit/UIKit.h>`下面添加此导入语句：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let''s put this category to use. Switch to `FoodDetailViewController.m`, and
    inside `viewDidLoad`, add the following code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用这个类别。切换到`FoodDetailViewController.m`，在`viewDidLoad`内部添加以下代码：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: First, we define a tint color for the image. We want it to be darkened so that
    white text is easily visible on bright food images. Next, we create a `UIImage`
    object using the `image_filepath` key from our `foodItem` property.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们为图像定义一个着色颜色。我们希望它变暗，这样在明亮的食品图像上白色文本就容易被看到。接下来，我们使用`foodItem`属性中的`image_filepath`键创建一个`UIImage`对象。
- en: The next line is where the magic happens. We create a new `UIImage` instance
    and assign it using a method from the `ImageEffects` category. This method takes
    a few parameters.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行是魔法发生的地方。我们创建一个新的`UIImage`实例，并使用`ImageEffects`类别中的方法将其分配。此方法需要一些参数。
- en: The radius will determine how blurry the image will be. For best results, pick
    a value between **1** and **12**.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 半径将决定图像的模糊程度。为了获得最佳效果，请选择介于**1**和**12**之间的值。
- en: '**Tint Color** is the color of the tint we would like on the image. You can
    set this to any color you wish based on each app''s design.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**着色颜色**是我们希望在图像上使用的颜色。您可以根据每个应用程序的设计设置为您喜欢的任何颜色。'
- en: '`SaturationDeltaFactor` will adjust the saturation of the image. The lower
    the value of `SaturationDeltaFactor`, the more dull the image will be.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`SaturationDeltaFactor`将调整图像的饱和度。`SaturationDeltaFactor`的值越低，图像就越不鲜艳。'
- en: Masking the image allows you to pass in an image mask for more advanced blur
    shapes.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对图像进行遮罩可以使您传递一个图像遮罩以实现更高级的模糊形状。
- en: The last line of code sets the background image to the food image so that our
    background is completely filled; double-check the storyboard and make sure that
    the background image has been set to the mode **Aspect Fill**.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的最后一行将背景图像设置为食品图像，这样我们的背景就完全填充了；请再次检查故事板，确保背景图像已设置为**填充模式**。
- en: 'The following screenshot is a before-and-after example:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是一个前后对比示例：
- en: '![Creating blurred images](img/0319OT_06_03.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![创建模糊图像](img/0319OT_06_03.jpg)'
- en: All of these parameters can be adjusted to your liking based on preference and/or
    app design.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些参数都可以根据您的喜好和/或应用程序设计进行调整。
- en: Finishing our detail view
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完成我们的详细视图
- en: 'Now that we have our background image, let''s fill in the rest of the information.
    First, we will start with our regular food image. Add the following code to `viewDidLoad`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了背景图像，让我们填写其余的信息。首先，我们将从常规食品图像开始。将以下代码添加到`viewDidLoad`中：
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: By reusing the `foodImage` object and setting it to the `foodImageView` property,
    we save a few lines of code. Here, we also add a corner radius to create a round
    circle image and apply a white border with a width of four pixels.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 通过重用`foodImage`对象并将其设置为`foodImageView`属性，我们节省了一些代码。在这里，我们还添加了一个圆角半径以创建圆形图像，并应用了一个宽度为四像素的白色边框。
- en: 'Now, we can write the code to display the name and date. Add the following
    code to `viewDidLoad`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以编写代码来显示名称和日期。将以下代码添加到`viewDidLoad`：
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: First, we set our name based on the `foodItem` property. Our date should be
    in the same format as in our table view cell, so we use identical code to create
    an `NSDateFormatter` object and set its format. Now, we use that date formatter
    to set our date text.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们根据`foodItem`属性设置我们的名称。我们的日期应该与我们的表格视图单元格中的格式相同，所以我们使用相同的代码创建一个`NSDateFormatter`对象并设置其格式。现在，我们使用那个日期格式化器来设置我们的日期文本。
- en: Pushing the detail view
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 推送详细视图
- en: 'Now that we have completed our detail view, we can start creating and pushing
    it onto the stack when a user selects their food items. Switch to `MyFoodViewController.m`
    and scroll down to `didSelectRowAtIndexPath`. Add the following code:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了详细视图，当用户选择他们的食物项目时，我们可以开始创建并将其推送到栈上。切换到`MyFoodViewController.m`并向下滚动到`didSelectRowAtIndexPath`。添加以下代码：
- en: '[PRE15]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This code grabs the currently selected food item using `indexPath.row`. Next,
    we allocate an instance of our `FoodDetailViewController` we just created and
    set its `foodItem` property to the currently selected food item. Lastly, we push
    the `viewController` onto the navigation stack. Go ahead, run your application,
    and test out all functionality.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码使用`indexPath.row`获取当前选定的食物项目。接下来，我们分配我们刚刚创建的`FoodDetailViewController`的一个实例并将其`foodItem`属性设置为当前选定的食物项目。最后，我们将`viewController`推送到导航栈上。现在，运行你的应用程序，并测试所有功能。
- en: Summary
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we finished our base application by adding the last piece of
    functionality, displaying the users' saved data in a table view and creating the
    detail view. We also learned how to create a blurred image using the `UIImage+ImageEffects`
    category provided by Apple.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过添加最后一块功能，在表格视图中显示用户的保存数据并创建详细视图，完成了我们的基础应用程序。我们还学习了如何使用Apple提供的`UIImage+ImageEffects`类别创建模糊图像。
- en: Now that we have completed our application, we can learn how to use TextKit
    and manipulate text in iOS 7\. We will then apply some of these new features to
    our application to spice it up a bit!
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了应用程序，我们可以学习如何在iOS 7中使用TextKit操作文本。然后我们将将这些新功能应用到我们的应用程序中，使其更加生动！
