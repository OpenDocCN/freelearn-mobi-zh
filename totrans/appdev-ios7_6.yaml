- en: Chapter 6. Displaying User Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have almost completed our application; however, we still have one last major
    piece of functionality to add. Now that our users can add content, they need to
    be able to view that data. In this chapter, we will put together a custom cell,
    build a table view to display a list of data, and build a detail view of the items
    when a user selects an item from the list. On completing this chapter, we will
    have a fully functional application.
  prefs: []
  type: TYPE_NORMAL
- en: We will begin by putting together our custom cell in the storyboard. Next, we
    will add a button to the navigation bar so that users can add food while viewing
    their current food items. Then, we will set up the table view, load our data,
    and pass the data to the table view. Lastly, we will implement the detail view
    of the items when a user selects an item from the table view. Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Custom cell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start writing our code to display the data, we want to create a custom
    table view cell. With your project open, select **File** | **New** | **File**.
    Select **Cocoa Touch** as the base and select **Objective-C Class** before clicking
    on **Next**. We want this class to be a subclass of `UITableViewCell`. The cell
    will display food items, so let's give it the name `FoodCell`. Save this file
    and move it into our **Custom Class** group (if it is not already in it).
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have our class, let's link it up to our storyboard. Open `Main.storyboard`
    and find the table view controller we had previously moved into the storyboard.
    After opening the `Main.storyboard` file, open the **Utilities** pane and select
    the **Identity** section. Make sure that this view controller's class has been
    set to `MyFoodsViewController`. Now select the blank table view cell and set its
    class to our newly created `FoodCell` class.
  prefs: []
  type: TYPE_NORMAL
- en: Building the cell
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that our class is linked, we can build the cell in our storyboard. The
    cell itself will consist of a `UIImageView` object and two `UILabel` instances.
    Open the **Utilities** pane and perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Drag a `UIImageView` object onto the cell itself to add it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set both the width and height to 100 pixels.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Position the image view to the far left of the cell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag two `UILabel` instances onto the cell, positioned one above the other.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Attributes** pane, set the font family of the top label to **Helvetica
    Neue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the style to **Ultra Light**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the size to `20`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat this for the second (bottom) cell, but set the size to `11`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set both labels to be left aligned.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Position the labels horizontally to your preference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once completed, your cell should look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building the cell](img/0319OT_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Connecting the cell
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that our cell is visually laid out, we need to connect it to the class
    we created earlier; perform the following steps to connect this cell to our class:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the entire cell and then select the assistance editor. Make sure that
    we are viewing `FoodCell.h` in the right panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Control drag from the image to create an outlet named `foodImageView`. We want
    to avoid naming it just `imageView` because this property already exists by default
    on `UITableViewCell`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do the same for both labels giving them the names `foodNameLabel` and `dateAddedLabel`,
    respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that our cell is ready, let''s start coding `MyFoodsViewController`. This
    class will be loading the saved user data in order to display it, so we need to
    create an array property to hold the data. Additionally, we want our dates to
    be displayed in a user-friendly format, so let''s also create a date formatter
    property. The date formatter is a useful class provided by Apple that allows you
    to manipulate the format of dates based on specific patterns. This is helpful
    considering that different locales require different formatted dates. Switch to
    `MyFoodsViewController.h` and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we simply created both the required properties. In addition
    to viewing the food items already created, a user will have the ability to create
    new items from this view too. In order to support this, we import the custom cell
    we created as well as the `AddNewViewController` class. We also imported the `FoodDetailViewController`
    class so that we can display our detail view.
  prefs: []
  type: TYPE_NORMAL
- en: Adding food
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing we want to do is give the user the ability to add additional
    food items from this view. The best way to do this is to add a button in the navigation
    bar. Apple provides a system button to add items that will be displayed as a nice
    plus button. Switch to `MyFoodsViewController.m` and scroll down to the `viewDidLoad`
    method. Add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here, we create a new `UIBarButtonItem` property to go on the navigation bar.
    We have set the button to system item add to give us that plus button. Next, we
    tell the navigation controller to add this button as a right-hand side bar button
    item so it will show up on the right-hand side of the navigation bar.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we set the title of the navigation controller and adjust the back
    button text. By default, iOS will add the previous view controller's title to
    the back button. For our application design, we simply want the back button icon
    only with no text. This line of code can be added to any view controller you wish
    to replicate this functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, we want to implement the same `addButtonPressed` method we used in
    our `MenuViewController`. Add this code below `viewDidLoad`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Preparing the table view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we load any data, let's go ahead and set up our table view. To do so,
    we will be editing our table view delegate methods that Xcode automatically created
    for us. Scroll down to the `numberOfSectionInTableview` method and change the
    return value from `0` to `1`.
  prefs: []
  type: TYPE_NORMAL
- en: The next delegate method we should implement is `numberOfRowsInSection`. This
    number will frequently change, so instead of hard coding the number as in the
    previous method, we will set this to the count of `myFoodsArray`. Every time the
    array is updated, the table view will also be updated.
  prefs: []
  type: TYPE_NORMAL
- en: The next method to update is `cellForRowAtIndexPath`. The default code will
    work just fine as long as we update the class name and cell identifier. Replace
    `Cell` with `FoodCell` and change the class declaration from `UITableViewCell`
    to `FoodCell`.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we need to add an additional delegate method that was not added. Below
    `cellForRowAtIndexPath`, type `- table`, and a list of possible methods will appear.
    Scroll through, find `didSelectRowAtIndexPath`, and select it. Xcode 5 will automatically
    type the remainder of the method call. Be sure to include the opening and closing
    brackets of the method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your code should look like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Loading data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's time to load our data so that we can display it in the table view. Loading
    the data is very similar to the way we checked for files and saved the data in
    the previous chapter, because both require a specified path in the documents directory
    to be defined. For our application, we will create a method to load the data and
    return an array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Place the following code below the `addButtonPressed` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This code should be somewhat familiar. First, we create an array of paths using
    `NSDocumentsDirectory` and assign the path to the documents directory to a string.
    Next, we define the path to the file we want to load, in this case the `Data.plist`
    file we created previously. We allocate an `NSFileManager` instance and use it
    to check if the specified file exists at that path. If so, we assign the contents
    of the file to `self.myFoodsArray` and then reload the table view. Now, we have
    loaded all data (if any) and passed that data on to the table view.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With our data loaded, we can now display the data in our custom cell. Scroll
    down to `cellForRowAtIndexPath` and let's set up our cell.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to grab the current food item from our array. We will do this
    using the `indexPath.row` parameter passed to `cellForRowAtIndexPath`. Add the
    following line of code below our cell allocation and before `return cell`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have `currentFoodItem`, we can start assigning our custom cells
    properties. Let''s begin with the image. Add the following code to `cellForRowAtIndexPath`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we simply allocate an image based on the `image_filepath` key we created
    for each food item. Next, we set this image as the current cell''s image. Now,
    we can set the text for the name of the food item with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The last item to update in our cell is the date the food item was added. We
    need to actually create our date formatter before this will work; so, let''s do
    that now. Allocating date formatters can be very CPU-intensive, so we are creating
    a property that is allocated only once, rather than each time a cell is loaded.
    Scroll down to the `viewDidLoad` method and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: First, we allocate and initialize our `NSDateFormatter` property. Next, we set
    the date format. The format we have chosen will display the month as a word, the
    day number in the month, and the year with all the digits. With all of this in
    place, run your code to test it. If you don't have any food items yet, go ahead
    and add some from this view to test its functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, add the following final code to `cellForRowAtIndexPath`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here, we set the date of the cell to the current items date in the format specified
    by our date formatter.
  prefs: []
  type: TYPE_NORMAL
- en: Showing the detail view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When selecting one of the food items, the user should be directed to a new view
    with the capacity to display more details. All of the code to do this will be
    handled in `didSelectRowAtIndexPath`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we write the code to push our detail view, we are going to adjust its
    layout. Switch to `Main.storyboard`, locate the `FoodDetailViewController` object,
    and perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select one of the image views and size it to fit the entire screen. This will
    be our background image, so it must be the back layer as well. If needed, use
    the document outline to arrange the views.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the remaining image view and set its size to 200 x 200 square pixels.
    Position it centered horizontally and towards the top of the screen. This will
    be the food items' large image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, move the two labels in the view to just below the second image (the food
    image). Select the first label and open the **Attributes Inspector** from the
    **Utilities** pane. Set the font to **Helvetica Neue Thin** with a size of `24`.
    Now, change to the **Size Inspector** and set the label's width to `280` and height
    to `32`. Position this label centered horizontally and just below the food image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the second label and set its font to **Helvetica Neue Thin** of size
    `13`. Also, change its width to `280` and height to `26`. Also, position this
    label centered horizontally just below the name label.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Everything in our storyboard is how we need it for the final app! The following
    screenshot is what your `FoodDetailViewController` should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Showing the detail view](img/0319OT_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Coding the detail view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When pushing the detail view, we will pass the food item dictionary as a property
    so that we can display the data related to that food item in the detail view.
    To do this, let''s add a property. Switch to `FoodDetailViewController.h`, and
    beneath our `IBOutlets`, add the following property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Creating blurred images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we can pass a food item to this view controller. Next, we want to set the
    background image of the detail view. For our application, we are going to use
    our food image itself as the background image. Before we set the image, we will
    blur it and apply a dark tint to create a nice blurred image effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to do this, we will be using a `UIImage` category provided by Apple
    on the Apple Developer Portal. I have packed this category with the resources
    file available for download with this book. Open the provided `Food And Me` folder
    that was downloaded earlier from the Packt Publishing website (if you have not
    downloaded these files, you can find them by visiting this link in your browser:
    [http://www.packtpub.com/](http://www.packtpub.com/)) and then open the `Apple
    Code` folder. You will find a `.h` file and a `.m` file titled `UIImage+ImageEffects`.
    Drag these files to your project and make sure you check the copied items into
    the destination project folder.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have the files in our project, we need to import them. Add this
    import statement below `#import <UIKit/UIKit.h>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s put this category to use. Switch to `FoodDetailViewController.m`, and
    inside `viewDidLoad`, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: First, we define a tint color for the image. We want it to be darkened so that
    white text is easily visible on bright food images. Next, we create a `UIImage`
    object using the `image_filepath` key from our `foodItem` property.
  prefs: []
  type: TYPE_NORMAL
- en: The next line is where the magic happens. We create a new `UIImage` instance
    and assign it using a method from the `ImageEffects` category. This method takes
    a few parameters.
  prefs: []
  type: TYPE_NORMAL
- en: The radius will determine how blurry the image will be. For best results, pick
    a value between **1** and **12**.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tint Color** is the color of the tint we would like on the image. You can
    set this to any color you wish based on each app''s design.'
  prefs: []
  type: TYPE_NORMAL
- en: '`SaturationDeltaFactor` will adjust the saturation of the image. The lower
    the value of `SaturationDeltaFactor`, the more dull the image will be.'
  prefs: []
  type: TYPE_NORMAL
- en: Masking the image allows you to pass in an image mask for more advanced blur
    shapes.
  prefs: []
  type: TYPE_NORMAL
- en: The last line of code sets the background image to the food image so that our
    background is completely filled; double-check the storyboard and make sure that
    the background image has been set to the mode **Aspect Fill**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot is a before-and-after example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating blurred images](img/0319OT_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: All of these parameters can be adjusted to your liking based on preference and/or
    app design.
  prefs: []
  type: TYPE_NORMAL
- en: Finishing our detail view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have our background image, let''s fill in the rest of the information.
    First, we will start with our regular food image. Add the following code to `viewDidLoad`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: By reusing the `foodImage` object and setting it to the `foodImageView` property,
    we save a few lines of code. Here, we also add a corner radius to create a round
    circle image and apply a white border with a width of four pixels.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can write the code to display the name and date. Add the following
    code to `viewDidLoad`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: First, we set our name based on the `foodItem` property. Our date should be
    in the same format as in our table view cell, so we use identical code to create
    an `NSDateFormatter` object and set its format. Now, we use that date formatter
    to set our date text.
  prefs: []
  type: TYPE_NORMAL
- en: Pushing the detail view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have completed our detail view, we can start creating and pushing
    it onto the stack when a user selects their food items. Switch to `MyFoodViewController.m`
    and scroll down to `didSelectRowAtIndexPath`. Add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This code grabs the currently selected food item using `indexPath.row`. Next,
    we allocate an instance of our `FoodDetailViewController` we just created and
    set its `foodItem` property to the currently selected food item. Lastly, we push
    the `viewController` onto the navigation stack. Go ahead, run your application,
    and test out all functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we finished our base application by adding the last piece of
    functionality, displaying the users' saved data in a table view and creating the
    detail view. We also learned how to create a blurred image using the `UIImage+ImageEffects`
    category provided by Apple.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have completed our application, we can learn how to use TextKit
    and manipulate text in iOS 7\. We will then apply some of these new features to
    our application to spice it up a bit!
  prefs: []
  type: TYPE_NORMAL
