["```swift\ndef setupNavigationBar\n  back= UIBarButtonItem.alloc.initWithTitle(\"Back\", style:UIBarButtonItemStylePlain,target:nil ,action:nil)\n  self.navigationItem.backBarButtonItem = back;\n  contact_us_button = UIBarButtonItem.alloc.initWithTitle(\"Contact Us\", style:UIBarButtonItemStylePlain ,target:self, action:\"contact_us\")\n  self.navigationItem.rightBarButtonItem = contact_us_button\nend\ndef contact_us\n  contact_us_controller = ContactUsController.alloc.initWithNibName(\"ViewController\", bundle:nil)\n  presentModalViewController(contact_us_controller, animated:true)\nend\n```", "```swift\nclass ContactUsController < UIViewController\nend\n```", "```swift\n$rake\n\n```", "```swift\nclass ContactUsController < UIViewController\n  HEADER_TAG = 1\n  EMAIL_BOX_TAG = 2\n  INFORMATION_BOX_TAG = 3\n  SUBMIT_BUTTON_TAG = 4\n  def viewDidLoad\n    @header = self.view.viewWithTag(HEADER_TAG)\n    @email_box = self.view.viewWithTag(EMAIL_BOX_TAG)\n    @information_box = self.view.viewWithTag(INFORMATION_BOX_TAG)\n    @submit_button = self.view.viewWithTag(SUBMIT_BUTTON_TAG)\n    @submit_button.addTarget(self,\n            action:\"send_message\", forControlEvents:UIControlEventTouchUpInside) \n    tapGesture = UITapGestureRecognizer.alloc.initWithTarget(self,\naction:\"hideKeyboard\")\n    tapGesture.cancelsTouchesInView = false\n    view.addGestureRecognizer(tapGesture)\n  end \n\n  def send_message\n    if form_valid?\n      puts \"Submitted the button with correct values\"\n      close\n    else\n      puts \"Invalid Values\"\n    end\n  end\n  def close\n    dismissModalViewControllerAnimated true\n  end \n\n  #method to hide keyboard when user taps on a scrollview\ndef hideKeyboard\n    @information_box.resignFirstResponder\nend\n\ndef form_valid?\n  not @email_box.text.empty? and not @information_box.text.empty? and not @email_box.text.match(/\\A([^@\\s]+)@((?:[-a-z0-9]+\\.)+[a-z]{2,})\\Z/i).nil?\nend\nend\n```", "```swift\n$rake\n\n```", "```swift\nself.view.viewWithTag(HEADER_TAG)\n\n```", "```swift\n    @submit_button.addTarget(self,\n      action:\"send_message\", forControlEvents:UIControlEventTouchUpInside)\n```", "```swift\ndef submit_button\n  @visitButton = UIButton.buttonWithType(UIButtonTypeRoundedRect)\n  @visitButton.frame = [[80,10],[180,37]]\n  @visitButton.setTitle(\"Visit\", forState:UIControlStateNormal)\n  @visitButton.setTitle(\"You have clicked me\", forState:UIControlStateHighlighted)\n  @visitButton.addTarget(self, action:\"load_some_view\", forControlEvents:UIControlEventTouchDown)\n  view.addSubview(@visitButton)\nend\ndef load_some_view\n      @my_web_view = UIWebView.alloc.initWithFrame([[0,100],[320,220]])\n      @my_web_view.delegate = self\n      @my_web_view.scalesPageToFit = \"YES\"\n      view.addSubview(@my_web_view)\n      url = NSURL.URLWithString(\"http://www.rubymotion.com\")\n      request = NSURLRequest.requestWithURL(url)\n      @my_web_view.loadRequest(request)\nend\n```", "```swift\nurl = NSURL.URLWithString(\"http://www.rubymotion.com\")\n```", "```swift\nrequest = NSURLRequest.requestWithURL(url)\n```", "```swift\n@my_web_view.loadRequest(request)\n```", "```swift\n$rake\n\n```"]