- en: Chapter 2. Building iOS Apps Using Flash
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the AIR SDK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an AIR for iOS document
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding content to the stage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AIR for iOS general settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AIR for iOS deployment settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling from Flash Professional
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing your app with iTunes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you are registered on the iOS Developer Program and have obtained the
    necessary files from the iOS Provisioning Portal, we can turn our attention towards
    building native iOS apps from Flash Professional.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will cover the fundamental tasks required to set up and compile
    iOS applications. While we will primarily focus on configuration, we will lay
    the groundwork for a basic app, which we will complete in the following chapter.
  prefs: []
  type: TYPE_NORMAL
- en: But first, let us spend some time introducing the toolchain.
  prefs: []
  type: TYPE_NORMAL
- en: Upon the release of Flash Professional CS5, Adobe included the **Packager For
    iPhone (PFI)** —a command line tool that was also integrated into the Flash IDE
    and allowed ActionScript 3.0 projects to be compiled into native iOS apps.
  prefs: []
  type: TYPE_NORMAL
- en: Initial support provided access to the majority of the Adobe AIR 2.0 and Flash
    Player 10.1 APIs, and also targeted both ARMv6 and ARMv7 iOS devices.
  prefs: []
  type: TYPE_NORMAL
- en: For those unfamiliar with **Adobe AIR,** it extends Flash beyond the browser
    sandbox, giving developers the power to directly access features of desktop computers
    and mobile devices that are off limits to the Flash Player.
  prefs: []
  type: TYPE_NORMAL
- en: With the release of **Flash Professional CS5.5** and introduction of AIR 2.6,
    the APIs made available for iOS development were extended. Adobe also made significant
    performance improvements; in particular to the rendering engine. However, support
    for iOS 3 and older ARMv6 devices has been dropped, meaning you can no longer
    target the original iPhone, iPhone 3G, or the first-generation and second-generation
    iPod touches if you are using CS5.5.
  prefs: []
  type: TYPE_NORMAL
- en: The PFI command line tool was also removed and replaced by the **AIR Development
    Tool (ADT)** . This made sense as ADT is the tool that AIR developers have traditionally
    used to package AIR apps for delivery on desktop and more recently Android handsets.
  prefs: []
  type: TYPE_NORMAL
- en: Adobe quickly followed up AIR 2.6 with 2.7\. Although it didn't provide any
    new APIs for iOS development, rendering performance was improved yet again and
    a new build option was added which dramatically improved compile times.
  prefs: []
  type: TYPE_NORMAL
- en: The most recent major version of the **AIR SDK** is 3.0, which brings a raft
    of exciting new features, performance enhancements, and bug fixes. Perhaps, the
    most significant additions are the eagerly anticipated hardware-accelerated 3D
    APIs and the ability to write custom ActionScript libraries implemented with native
    code.
  prefs: []
  type: TYPE_NORMAL
- en: The majority of the recipes covered in this book are compatible with both Flash
    Professional CS5 and CS5.5\. The newer features provided by AIR 2.6 and above,
    however, are specific to CS5.5 and will be clearly marked.
  prefs: []
  type: TYPE_NORMAL
- en: Development of iOS apps using Flash is more commonly referred to as **AIR for
    iOS**, which is the term used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the AIR SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we begin, it is important that you take the time to ensure your installation
    of Flash Professional is up-to-date and that the latest version of the AIR SDK
    is installed.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need either Flash Professional CS5 or CS5.5 in order to compile native
    iOS apps.
  prefs: []
  type: TYPE_NORMAL
- en: A 30-day trial of Flash Professional CS5.5 can be downloaded from the Adobe
    site at [www.adobe.com/downloads](http://www.adobe.com/downloads).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will split this recipe into two parts. First, we will install any updates
    required by Flash Professional. Secondly, we will download and install the most
    recent version of the AIR runtime and SDK.
  prefs: []
  type: TYPE_NORMAL
- en: Updating Flash Professional
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Occasionally, Adobe makes updates to Flash Professional available. These updates
    tend to include bug fixes or additional features that for one reason or another
    weren't available upon release.
  prefs: []
  type: TYPE_NORMAL
- en: Visit [www.adobe.com/support/flash/downloads.html](http://www.adobe.com/support/flash/downloads.html)
    and check for updates for your version of Flash.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using Flash Professional CS5, then you should specifically download
    the following two updates for your operating system of choice:'
  prefs: []
  type: TYPE_NORMAL
- en: Flash Professional CS5 Update 11.0.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flash Professional CS5 Update for iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is important that the 11.0.2 update is installed before you apply the iOS
    update. Also, if you currently have Flash Professional CS5 open, then close it
    before attempting either.
  prefs: []
  type: TYPE_NORMAL
- en: The update for iOS has to be applied manually by copying various files to your
    installation of Flash Professional CS5\. Documentation is provided with the update
    and you should read it carefully before attempting it.
  prefs: []
  type: TYPE_NORMAL
- en: A video detailing the update process for Flash Professional CS5 is also available
    and can be found at [www.gotoandlearn.com/play.php?id=133](http://www.gotoandlearn.com/play.php?id=133).
  prefs: []
  type: TYPE_NORMAL
- en: Overlaying the AIR SDK
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is advisable that you install the latest version of the AIR runtime on your
    development computer. You can download and install it from [http://get.adobe.com/air](http://get.adobe.com/air).
  prefs: []
  type: TYPE_NORMAL
- en: In addition, if you are using Flash Professional CS5.5, you will also need the
    latest version of the AIR SDK. By default, CS5.5 provides support for AIR 2.6,
    however, it can be updated to use the most recent version. This is a necessary
    step if you wish to work through all recipes covered in this book.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve this you must download and manually overlay the latest AIR SDK onto
    your Flash Professional CS5.5 installation. A download link to the SDK and step-by-step
    instructions can be found at [www.yeahbutisitflash.com/?p=2949](http://www.yeahbutisitflash.com/?p=2949).
    Follow these instructions carefully before moving on.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, if you are using Flash Professional CS5, you will be restricted
    to the AIR 2.0 SDK as it is not possible to overlay a more recent AIR SDK onto
    it. Don't worry though; you will still be able to tackle a majority of this book's
    recipes. For the recipes you can't attempt, consider upgrading to Flash Professional
    CS5.5 or downloading a 30-day trial from the Adobe site.
  prefs: []
  type: TYPE_NORMAL
- en: The official Adobe AIR website can be found at [www.adobe.com/products/air.html](http://www.adobe.com/products/air.html).
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is important that you are working with the most up-to-date version of Flash
    Professional and the AIR SDK. With each new release, AIR for iOS goes from strength
    to strength, both in terms of API coverage and performance.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an AIR for iOS document
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you create a new FLA, there are several document types you can select from.
  prefs: []
  type: TYPE_NORMAL
- en: Each document type configures the publish settings, stage size, and frame rate
    to best suit the content you intend to create. Your choice of document will depend
    on whether you want to target the Flash Player and its APIs or take advantage
    of the additional capabilities of AIR.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will take you through the necessary steps to create a new FLA that
    targets AIR for iOS. We will use this FLA as the starting point for a simple app
    that we will create throughout the course of this and the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure that your version of Flash Professional has all available updates
    applied to it and that you are using the latest AIR SDK. If you haven't already
    done this, then perform the steps outlined in the *Installing the AIR SDK* recipe
    before proceeding.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow the steps to create your FLA:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch Flash Professional and select **File** | **New** *(Ctrl + N* | *Cmd*
    + *N)* from the drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The **New Document** dialog box will appear. Ensure that the **General** tab
    is selected and click on one of the following document types depending on the
    version of Flash Professional that you are using:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'CS5: **iPhone OS**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CS5.5: **AIR for iOS**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Both **iPhone OS** and **AIR for iOS** refer to the exact same thing. From now
    on, this book will use the term AIR for iOS. If you are using Flash CS5, then
    simply select iPhone OS when creating a new document.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: In CS5.5, you will see various properties of your selected document type on
    the right-hand side of the **New Document** panel. Notice that the stage size
    changes to 320x480 pixels when you select **AIR for iOS**. This is the standard
    screen size of the iPhone 3GS when held in portrait orientation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **OK** button at the bottom-right of the dialog box as shown in
    the following screenshot:![How to do it...](img/1383_02_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your AIR for iOS document will be created.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This FLA will be used as the starting point for the simple app that we will
    create during the course of this and the next chapter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Depending on your choice of operating system, use either Windows Explorer or
    Finder to navigate to `packt\flash-ios-cookbook\` within your `Documents` folder.
    Create a new sub-folder and name it as `my-first-app`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select **File** | **Save As** *(Ctrl + Shift* + *S* | *Shift* + *Cmd* + *S)*
    from the drop-down menu and save your FLA to the `my-first-app` folder as `bubbles.fla`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You should carry out the simple steps, which we just saw, every time you are
    starting a new AIR for iOS project.
  prefs: []
  type: TYPE_NORMAL
- en: The document that Flash creates for you will be set up to utilize ActionScript
    3.0 and the AIR APIs. The **stage** will also be set to a valid iOS screen size
    and the frame rate will be defaulted to 24 fps.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can change many of the default settings associated with an AIR for iOS document.
    You may find the following among them to be of particular importance.
  prefs: []
  type: TYPE_NORMAL
- en: Stage dimensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The default AIR for iOS document type assumes you will be targeting the original
    iPhone and iPod touch devices and that your app will use a portrait screen orientation.
  prefs: []
  type: TYPE_NORMAL
- en: In Flash CS5.5, you will see your document's default properties on the right-hand
    side of the **New Document** panel. Simply change the **Width** and **Height**
    fields to target a different screen resolution and orientation. For example, if
    your app is to be locked to a landscape screen orientation, then set the stage
    size to 480x320.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using Flash CS5, you can adjust the stage dimensions after you have
    created your document. You can do this from the **Properties** panel.
  prefs: []
  type: TYPE_NORMAL
- en: 'The available iOS screen resolutions (portrait orientation) are:'
  prefs: []
  type: TYPE_NORMAL
- en: 320x480—iPhone 3GS, third-generation iPod touch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 640x960—iPhone 4, iPhone 4S, fourth-generation iPod touch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 768x1024—iPad, iPad 2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The 640x960 screen resolution is not supported when working with Flash CS5.
  prefs: []
  type: TYPE_NORMAL
- en: For the majority of its recipes, this book will stick to the default resolution
    of 320x480, which is supported by all iOS devices. Retina and iPad display resolutions,
    however, are covered in [Chapter 8](ch08.html "Chapter 8. Screen Resolution and
    Orientation Changes").
  prefs: []
  type: TYPE_NORMAL
- en: Frame rate
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A default frame rate of 24 fps is used for all new documents. Although you can
    increase this value, be aware that higher frame rates can be difficult to achieve
    on older generation devices due to CPU and GPU constraints. Given the performance
    difference between various generations of iOS devices, you should consider your
    frame rate carefully, especially if you want to target as many devices as possible.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*AIR for iOS general settings*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Supporting multiple resolutions*,[Chapter 8](ch08.html "Chapter 8. Screen
    Resolution and Orientation Changes")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding content to the stage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the many advantages of building iOS apps with Flash is the ability to
    use the authoring tools that you are already familiar with. You can still perform
    much of your layout visually by dragging content from the **library** onto the
    stage allowing rapid development.
  prefs: []
  type: TYPE_NORMAL
- en: Let us do just that to build a simple scene.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Accompanying this book are various graphical resource files that you should
    use when working through certain recipes. This will save you considerable time
    and effort and also ensure that your end result matches that of the recipe you
    are following.
  prefs: []
  type: TYPE_NORMAL
- en: If you haven't already done so, download the code bundle from this book's companion
    website.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.PacktPub.com/support](http://www.PacktPub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the resources used by this chapter within `chapter2\resources\`.
    Additionally, you will find completed code examples for each of this chapter's
    recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you are working from the `bubbles.fla` file you created in the preceding
    recipe. Each of the following recipes in this chapter will build on top of the
    previous, adding more to `bubbles.fla` as you progress.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will start by copying library symbols into your FLA.
  prefs: []
  type: TYPE_NORMAL
- en: Select **File** | **Open** *(Ctrl + O* | *Cmd* + *O)* and browse to `chapter2\resources\resources.fla`.
    Click on **Open** to load the FLA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy all the library symbols from `resources.fla`, and paste them into the library
    of `bubbles.fla`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your library will now consist of a collection of bitmaps and the following
    five movie clips: **Background, Bubble Huge, Bubble Large, Bubble Medium**, and
    **Bubble Small**. From the library, double-click into each movie-clip symbol and
    take a closer look at the contents of each. You will see that each clip consists
    of a single bitmap image.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Drag the `Background` movie clip symbol from the library onto the stage. From
    the **Properties** panel, expand the **POSITION AND SIZE** section and position
    the movie clip at (0,0). If you are using Flash Professional CS5, then you should
    also expand the **DISPLAY** section and check on the **Cache as bitmap** checkbox.
    There is no need to set this option if you are using CS5.5 as it could actually
    degrade the performance of this app if you do.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, drag three instances of `Bubble Small` from the library to the stage. If
    you are using Flash CS5, then from the **Properties** panel check the **Cache
    as bitmap** checkbox for each instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the **Properties** panel, name the instances `bubble1, bubble2`, and `bubble3`.
    Also, set the position of each to (206, 421), (162, 160), and (122, 53) respectively.
    The following screenshot shows the first of the bubble instances being positioned
    on the stage:![How to do it...](img/1383_02_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag three instances of `Bubble Medium` to the stage. For Flash CS5, check the
    **Cache as bitmap** checkbox for each instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the instances `bubble4, bubble5`, and `bubble6`. Set the position of each
    to (162, 290), (318, 274), and (203, 119) respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Only two instances of `Bubble Large` are required. Again, check the **Cache
    as bitmap** checkbox from the **Properties** panel if you are using CS5.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign instance names of `bubble7` and `bubble8` and set their positions to
    (74, 329) and (297, 12).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, position **Bubble Huge** on the stage and if you are using CS5, ensure
    you check the **Cache as bitmap** checkbox. Give it an instance name of `bubble9`
    and position it partially off stage at (440, 303).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your FLA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What we just covered should feel familiar even to those with only a basic understanding
    of Flash. You simply dragged various movie-clip instances onto the stage to create
    a scene that you will be able to display on an iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: You may not be familiar with the **Cache as Bitmap** render option. This will
    be explained in more detail in [Chapter 6](ch06.html "Chapter 6. Graphics and
    Hardware Acceleration"); but for the time being, it is enough to know that when
    working with Flash Professional CS5, choosing this option will significantly improve
    the graphics performance of your app in certain situations.
  prefs: []
  type: TYPE_NORMAL
- en: Note also that all graphical content in this recipe was provided in PNG format
    rather than vector. This was intentional as iOS devices can render bitmaps to
    the screen faster than Flash's vector content. Where appropriate, try to use bitmaps,
    although this doesn't mean you should completely ignore Flash's vector renderer
    as it is one of Flash's many strengths.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have some visual content, we can start to configure Flash's additional
    iOS specific settings in order to build and deploy your content to a device.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Using Cache as Bitmap, [Chapter 6](ch06.html "Chapter 6. Graphics and Hardware
    Acceleration")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AIR for iOS general settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Flash requires a little more information before it can compile your FLA into
    a native iOS app. First, you will need to specify some general iOS settings, which
    we will now cover.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will continue to work from `bubbles.fla`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When working from an AIR for iOS document, an additional settings panel is made
    available from Flash Professional. From it, you will be able to apply some iOS
    specifics that will be used by Flash when outputting a native iOS app.
  prefs: []
  type: TYPE_NORMAL
- en: Select **File** | **AIR for iOS Settings** to open the panel. Ensure that the
    **General** tab is selected.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are using Flash Professional CS5, select **File** | **iPhone OS Settings**
    instead. Remember, CS5 uses the term **iPhone OS** whereas CS5.5 refers to it
    as **AIR for iOS.**
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the **AIR for iOS Settings** panel, options can be set for the following
    fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Option | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Output file** | The file name for your native iOS app |'
  prefs: []
  type: TYPE_TB
- en: '| **App name** | The name of your app |'
  prefs: []
  type: TYPE_TB
- en: '| **Version** | A version number for your app |'
  prefs: []
  type: TYPE_TB
- en: '| **Aspect ratio** | The app''s default screen orientation |'
  prefs: []
  type: TYPE_TB
- en: '| **Full screen** | Whether to use the full screen or show the status bar along
    the top |'
  prefs: []
  type: TYPE_TB
- en: '| **Auto orientation** | Whether the screen orientation is to automatically
    rotate with the device |'
  prefs: []
  type: TYPE_TB
- en: '| **Rendering** | Sets the rendering mode used by your app |'
  prefs: []
  type: TYPE_TB
- en: '| **Device** | The iOS devices you are targeting |'
  prefs: []
  type: TYPE_TB
- en: '| **Resolution** | Standard or Retina screen resolution support |'
  prefs: []
  type: TYPE_TB
- en: '| **Included files** | Additional resources to be bundled with your app |'
  prefs: []
  type: TYPE_TB
- en: 'Let us set some of these options:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Output file** and **App name** fields will default to the name of your
    FLA. For this chapter's example app, ensure that the **Output file** is set to
    **bubbles.ipa** and that the **App name** is set to **Bubbles.**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set a value of **0.1** within the **Version** field.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The bubbles app has been designed for a portrait screen orientation and will
    consume the entirety of your device's screen display. Therefore, ensure that the
    **Aspect ratio** field is defaulted to **Portrait** and also check on the **Full
    screen** checkbox.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leave the **Auto orientation** option unchecked.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select **GPU** from the **Rendering** field's drop-down box.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that the **Device** field is set to **iPhone** and that the **Resolution**
    field is set to **Standard**. The **Resolution** field is not available on Flash
    CS5.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now click on the **OK** button on the bottom of the panel and save your FLA.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us examine some of the choices made earlier in a little more detail.
  prefs: []
  type: TYPE_NORMAL
- en: The output `.ipa` file is produced by Flash when you publish your FLA and contains
    your native app. This is the file that you will install on your device and is
    often referred to as an IPA.
  prefs: []
  type: TYPE_NORMAL
- en: The app name is the name that is shown beneath your app's icon on your device's
    home screen. Consider the app's name carefully. Names that are over 13-characters
    in length will be truncated due to screen space limits.
  prefs: []
  type: TYPE_NORMAL
- en: The version number is compiled into each app you build and consists of a major
    and minor value. When installing new versions of your app onto a device, you need
    to remember to increase the version number. If you don't, then the app won't actually
    be installed over the existing version.
  prefs: []
  type: TYPE_NORMAL
- en: Although your stage dimensions may already imply it, you still need to explicitly
    state the aspect ratio of your app by setting the **Aspect Ratio** field to either
    **Portrait** or **Landscape**.
  prefs: []
  type: TYPE_NORMAL
- en: The render mode specifies whether your application should be rendered with the
    device's **Graphics Processing Unit (GPU)** or using the CPU. In certain situations,
    GPU rendering will increase the rendering performance of your app. See [Chapter
    6](ch06.html "Chapter 6. Graphics and Hardware Acceleration") for more information
    regarding GPU acceleration.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting the **Device** field tells Flash which family of device you are targeting
    and dictates how your IPA will run on certain devices. You can select from **iPhone,
    iPad**, or **iPhone and iPad**.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting **iPhone** restricts your screen size to that of the iPhone's. Your
    IPA will still run on the iPad but the app won't attempt to take advantage of
    the iPad's screen resolution. Instead, the iPad will run the app using the iPhone's
    standard 320x480 resolution and scale up the image to fit the iPad's screen. Selecting
    **iPad** takes advantage of the iPad's resolution and restricts your app to that
    device. If you have written an app that can take advantage of both the iPhone
    and iPad's screen resolutions, then you should select **iPhone and iPad**.
  prefs: []
  type: TYPE_NORMAL
- en: It should also be noted that the iPod touch is treated as an iPhone. Therefore,
    selecting either **iPhone** or **iPhone and iPad** from the **Device** field will
    allow your `.ipa` file to be installed on an iPod touch too.
  prefs: []
  type: TYPE_NORMAL
- en: AIR 2.6 and above provides the ability to utilize the **Retina display** introduced
    on iPhone 4 and the fourth-generation iPod touch. This will provide you with access
    to a 640x960 screen resolution. If you do want to take advantage of the Retina
    display and you also want to support the standard resolution of 320x480, then
    you will need to write a single app that handles both. The App Store does not
    allow you to upload two separate versions; one for each resolution. Retina display
    support is not available on Flash Professional CS5.
  prefs: []
  type: TYPE_NORMAL
- en: This book will, for the most part, concentrate on the standard resolution as
    it will ensure that the examples will work across all iOS devices. Both the iPad
    and Retina display devices will scale up content that targets the standard 320x480
    resolution. However, for more details regarding Retina and iPad resolutions, see
    [Chapter 8](ch08.html "Chapter 8. Screen Resolution and Orientation Changes").
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following are a few more options you should consider.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the status bar
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can add the default iOS status bar to your application by deselecting the
    **Full screen** checkbox.
  prefs: []
  type: TYPE_NORMAL
- en: The status bar consumes 20 vertical pixels (40 pixels on Retina display screens)
    and sits along the top of the screen. Flash will attempt to scale down your app
    to fit the remaining screen height, leaving borders on either side of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: There are several ways to prevent this from happening. The simplest is to reduce
    the stage height to accommodate the remaining vertical space.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, leave the stage's dimensions unaltered and use ActionScript to
    prevent it from being scaled. By doing so, you will need to sacrifice some pixel
    real estate from either the top or bottom of your stage.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, the status bar will overlay and obscure the content
    at the top of your stage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Whereas the following piece of code positions the stage directly below the
    status bar, cropping content off the bottom of the stage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In either case, you will also need to import the `flash.display.StageScaleMode`
    and `flash.display.StageAlign` classes.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The status bar also consumes 20 vertical pixels on iPad.
  prefs: []
  type: TYPE_NORMAL
- en: Including files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the bottom of the AIR for iOS Settings panel is the **Included files** list,
    which contains resources that are to be bundled with your `.ipa` file or used
    during compilation.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, two files appear in this list: the `.swf` file that represents
    your app, and an XML file known as the application descriptor file. The application
    descriptor file contains properties for your entire application including those
    set within the AIR for iOS Settings panel.'
  prefs: []
  type: TYPE_NORMAL
- en: Additional files can be bundled with your IPA by adding them to the list. We
    will see how to do this and why it is useful at various points throughout the
    book.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Including an application launch image, [Chapter 3](ch03.html "Chapter 3. Writing
    your First App")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Editing the application descriptor file, [Chapter 3](ch03.html "Chapter 3. Writing
    your First App")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AIR for iOS deployment settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are almost ready to publish a native iOS app from Flash. Now it is actually
    time to use the development files that you created during [Chapter 1](ch01.html
    "Chapter 1. Getting Started with iOS App Development"), *Getting Started with
    iOS App Development*. As part of the deployment process, Flash Professional requires
    both your P12 certificate file and your development provisioning profile. Without
    these files it will be unable to compile your FLA into a native iOS app.
  prefs: []
  type: TYPE_NORMAL
- en: Let us go through the steps required to configure the iOS deployment settings.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before attempting this recipe, you will need to create a P12 certificate file
    and a development provisioning profile. If you haven''t already done this, then
    complete the following recipes first:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Creating a P12 certificate using Windows, [Chapter 1](ch01.html "Chapter 1. Getting
    Started with iOS App Development")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating a P12 certificate using Mac OS X, [Chapter 1](ch01.html "Chapter 1. Getting
    Started with iOS App Development")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating a development provisioning profile, [Chapter 1](ch01.html "Chapter 1. Getting
    Started with iOS App Development")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should also have set your general iOS settings within Flash Professional,
    which was covered in the *AIR for iOS general settings* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will be working within the AIR for iOS Settings panel again.
  prefs: []
  type: TYPE_NORMAL
- en: Open the **AIR for iOS Settings** panel by selecting **File** | **AIR for iOS
    Settings** from Flash Professional's drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Deployment** tab in the settings panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From here you will be able to set the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The P12 certificate file required to digitally sign your app
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The provisioning profile associated with your app
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The App ID
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The deployment type to be used
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Let us start by specifying the P12 certificate file. Click on the **Browse**
    button to the far right of the **Certificate** field. From the file browser, navigate
    to `packt\flash-ios-cookbook\developer-files\` within your `Documents` folder.
    Select the `.p12` file and click on **Open**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Password** field directly below, enter the password you associated
    with your P12 certificate. This is the export password you set up during the *Creating
    a P12 certificate using Windows* recipe or the *Creating a P12 certificate using
    Mac OS X* recipe from [Chapter 1](ch01.html "Chapter 1. Getting Started with iOS
    App Development").
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, check on the **Remember password for this session** checkbox directly
    underneath the **Password** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Remember password for this session** option will prevent Flash from asking
    you for the password every time you publish your FLA. However, you will be asked
    for the password again each time you re-launch Flash as it is only stored on a
    per-session basis.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that Flash Professional knows what certificate to use, you can specify the
    **Provisioning profile** that your app is to be tied to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Browse** button to the far right of the **Provisioning profile**
    field and select the `.mobileprovision` file from the `developer-files` folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The **App ID** field directly below expects a unique identifier for your app.
    Enter **bubbles** for this application's ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The final step is to make a selection for the deployment type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Quick publishing for device testing**option should be selected by default.
    If it isn't, then select it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **OK** and save your FLA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your FLA is now ready to be compiled into a native iOS app. In fact, you can
    actually publish the app directly from the **AIR for iOS Settings** panel, but
    we will hold off publishing until the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before proceeding, it is worth spending some time understanding the role of
    the App ID and the deployment type setting.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying an App ID
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may remember creating and associating an App ID with the provisioning profile
    you created during the *Creating a development provisioning profile* recipe from
    [Chapter 1](ch01.html "Chapter 1. Getting Started with iOS App Development").
  prefs: []
  type: TYPE_NORMAL
- en: 'An App ID consists of two parts: a bundle seed ID and a bundle identifier.
    Flash Professional expects you to provide it with only the bundle identifier.'
  prefs: []
  type: TYPE_NORMAL
- en: If your bundle identifier contains the wildcard symbol `*`, then you need to
    substitute the symbol with an arbitrary string that will uniquely represent your
    app. Wildcard App IDs allow you to use the same provisioning profile to publish
    multiple apps.
  prefs: []
  type: TYPE_NORMAL
- en: The App ID associated with your provisioning profile is solely the wildcard
    symbol, meaning that the identifier you enter into the **App ID** field within
    Flash Professional is an arbitrary string entirely of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: It makes sense in such cases to assign an App ID that is related to the name
    of your app, making `bubbles` an appropriate ID for this chapter's example app.
  prefs: []
  type: TYPE_NORMAL
- en: Deployment types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Within Flash Professional, there are four different deployment types that you
    can choose from:'
  prefs: []
  type: TYPE_NORMAL
- en: Quick publishing for device testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quick publishing for device debugging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment—Ad hoc
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment—Apple App Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of these, you only need to select from the first two when developing.
  prefs: []
  type: TYPE_NORMAL
- en: From Flash Professional, the **Quick publishing for device testing** option
    is the quickest path for deploying and running an app on a device. However, if
    you want to debug your app directly from a device, then you will need to select
    **Quick publishing for device debugging**, which will allow you to use Flash Professional's
    remote debugger to see `trace()` statements and pause your application at breakpoints.
  prefs: []
  type: TYPE_NORMAL
- en: The remaining deployment types are for building apps that are being prepared
    for beta testing or App Store submission, and will require you to have a distribution
    certificate.
  prefs: []
  type: TYPE_NORMAL
- en: For more details regarding distribution, refer to the **Distribution** section
    of the **Program User Guide**, which can be found within the iOS Provisioning
    Portal's **Resources** section.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Obtaining your development certificate, [Chapter 1](ch01.html "Chapter 1. Getting
    Started with iOS App Development")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating an App ID,[Chapter 1](ch01.html "Chapter 1. Getting Started with
    iOS App Development")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating a development provisioning profile, [Chapter 1](ch01.html "Chapter 1. Getting
    Started with iOS App Development")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling from Flash Professional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the iOS settings successfully configured, you can go ahead and compile
    your FLA into a native app.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you haven''t already configured the iOS settings for your app, then perform
    the following two recipes before proceeding:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AIR for iOS general settings*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*AIR for iOS deployment settings*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Compiling your FLA into a native iOS app from Flash Professional can take several
    minutes depending on your computer's hardware specification. It is, therefore,
    advisable to publish your FLA using the **AIR Debug Launcher (ADL)** first. This
    will let you quickly find and correct any compiler errors before attempting to
    build a native iOS version.
  prefs: []
  type: TYPE_NORMAL
- en: Let us use ADL to quickly publish `bubbles.fla`.
  prefs: []
  type: TYPE_NORMAL
- en: From Flash Professional's drop-down menu, select **Control** | **Test Movie**
    | **in AIR Debug Launcher (Mobile)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If successful, a `.swf` file will be published and run within ADL. You should
    see the scene that you created in the *Adding content to the stage* recipe earlier
    in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: At the moment, your SWF will only show a static scene consisting of various
    sized bubbles sitting against a background. The `bubbles.fla` file will become
    more dynamic as we add more functionality throughout the course of this and the
    next chapter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If there are any compiler errors, then correct them and re-publish. You can
    make subsequent publication attempts by pressing *Ctrl + Enter (Cmd + Enter* on
    Mac) rather than using the drop-down menu each time.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you are satisfied that you have eliminated all compiler errors, you can
    publish your FLA for deployment on an iOS device.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: To do this, simply select **File** | **Publish** *(Alt + Shift* + *F12* | *Shift*
    + *Cmd* + *F12)* from Flash's drop-down menu and compilation will begin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the **AIR for iOS Settings** panel appears, then it is likely that Flash
    requires your certificate's password again. This will happen if you forget to
    check the **Remember password for this session** checkbox or if you have re-launched
    Flash after closing it.
  prefs: []
  type: TYPE_NORMAL
- en: In either case, enter the password, check on the checkbox, and then click on
    the **Publish** button at the bottom of the panel.
  prefs: []
  type: TYPE_NORMAL
- en: If successful, a file named `bubbles.ipa` will be output to the same folder
    as your FLA.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `.ipa` file is the native iOS version of your app and is what you install
    onto your device for testing.
  prefs: []
  type: TYPE_NORMAL
- en: In order to perform cross compilation of your app's `.swf` file into an `.ipa`
    file, Flash Professional CS5 makes a call to the **Packager for iPhone (PFI)**
    while CS5.5 makes a call to the **AIR Development Tool (ADT)** .
  prefs: []
  type: TYPE_NORMAL
- en: Compile times can be lengthy, particularly for large projects.
  prefs: []
  type: TYPE_NORMAL
- en: Although there is no real substitute for actual on-device testing, you might
    want to test small incremental changes to your app from ADL. This will save considerable
    time, although, be aware that not all iOS features are supported on the desktop
    and will have to be tested on a device instead.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, Adobe introduced a new build target in AIR 2.7 called **Interpreter
    Mode**, which reduces compilation time from minutes to a few seconds. This feature
    is aimed at advanced developers as it requires the use of the command line.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may be curious as to why compiling an `.ipa` file takes considerably longer
    than publishing a `.swf` file using ADL. The following section may help your understanding.
  prefs: []
  type: TYPE_NORMAL
- en: The LLVM compiler infrastructure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Rather than being interpreted at runtime, a compiler was written to convert
    `.swf` files into native iOS applications.
  prefs: []
  type: TYPE_NORMAL
- en: This was achieved by using the widely used open source, **Low Level Virtual
    Machine (LLVM)** compiler infrastructure. Adobe created a new compiler frontend
    for LLVM allowing it to understand ActionScript 3.0\. LLVM's existing ARM backend
    was then used to output native ARM machine code, which is understood by the CPUs
    used in iOS devices. This is more commonly known as **ahead-of-time compilation.**
  prefs: []
  type: TYPE_NORMAL
- en: Although your application is written in Flash, the final result is a completely
    native iOS application.
  prefs: []
  type: TYPE_NORMAL
- en: However, the ahead-of-time compilation process is quite involved and takes significantly
    longer than simply publishing a `.swf` file from Flash.
  prefs: []
  type: TYPE_NORMAL
- en: You can find out more about LLVM at [http://llvm.org](http://llvm.org).
  prefs: []
  type: TYPE_NORMAL
- en: Installing your app with iTunes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have compiled your FLA into an `.ipa` file, it can be installed onto
    your device for testing. There are various applications available that you can
    use to do this, one of which is iTunes.
  prefs: []
  type: TYPE_NORMAL
- en: Let us see how this is done.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You must already have installed on your device the same provisioning profile
    you used when compiling your IPA from Flash Professional.
  prefs: []
  type: TYPE_NORMAL
- en: If you haven't yet done this, then first perform the steps detailed in the *Installing
    a provisioning profile on your device* recipe from [Chapter 1](ch01.html "Chapter 1. Getting
    Started with iOS App Development").
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Launch iTunes and connect your iOS device through a USB.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **File** | **Add File to Library** *(Ctrl + O* | *Cmd* + *O)* from iTunes'
    drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: On Mac OS X, the drop-down menu option is listed as **Add to Library**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From the file browser, navigate to and select the `.ipa` file you want to install.
    For this recipe, simply locate the `bubbles.ipa` file you created earlier. You
    should find it in your `Documents` folder at `packt\flash-ios-cookbook\my-first-app\bubbles.ipa`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `.ipa` file will install on iTunes. Confirm this by checking your iTunes
    library for an app named **Bubbles**. You can see your installed apps by clicking
    on the **Apps** category underneath the **LIBRARY** section in iTunes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The final step is to move the app from your computer's iTunes library to your
    device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Underneath the **DEVICES** section in iTunes, click on your device's name. By
    default you will be shown the device's summary information. Above the summary
    information is a row of tabs. Click on the **Apps** tab.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From here, you can synchronize your device's library with that of your computer.
    On the left-hand side, you will find a list of the apps stored on your computer
    and on the right is the list of apps installed on your device. Scroll down the
    list on the left until you find the **Bubbles** app. If it isn't already selected,
    check on the checkbox next to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now to copy the app to your device, click on the **Apply** button near the bottom-right
    corner of iTunes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: From the **Apps** tab, ensure that the **Sync Apps** checkbox is selected. If
    not then you will first have to manually synchronize your device before the latest
    version of your app can be copied to your device.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Find the **Bubbles** app on your device and launch it by tapping its icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On older iOS devices such as first-generation and second-generation iPhones
    and iPod touches, you may find the performance of some apps particularly sluggish
    when you first launch them. This tends to be caused by your device updating its
    library in the background after being synced with your computer.
  prefs: []
  type: TYPE_NORMAL
- en: If you are experiencing problems, then you may want to wait until this update
    process has completed before launching your app. You can check to see if your
    device's library is being updated by selecting the **Music** app from the home
    screen. If the library is currently being updated, you will be informed and prevented
    from selecting from your music library.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Copying your app using iTunes is a fairly trivial process but for the procedure
    to succeed, everything needs to be correct with the development files you created
    and obtained from the iOS Provisioning Portal.
  prefs: []
  type: TYPE_NORMAL
- en: 'If there are problems, then your app may fail to copy to the iTunes library
    on your computer or fail to install on your device. If you experience either of
    these problems, then it may be for one or more of the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: Your provisioning profile has not been copied to the iTunes library.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your provisioning profile has not been copied to your device.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The provisioning profile has expired.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The device hasn't been registered with the provisioning profile.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The IPA was compiled using a different provisioning profile than what is on
    your device.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The App ID you specified within Flash does not match your provisioning profile's
    bundle identifier pattern.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your development computer's firewall may interfere with installation of your
    app. If all else fails, deactivate the firewall and retry installing the app to
    your device.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unfortunately, the errors you receive from iTunes when an app fails to install
    can be obscure. If you do experience problems and you are still finding your feet
    with iOS development, then it might be better to delete your development files
    and go back through the provisioning process again.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have deployed our first app to our device. When you go to install and test
    subsequent versions of your app, you should consider the configurations mentioned
    in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Updating version numbers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each time you make a new build that you would like to test on your device; you
    will also need to update your app's version number from Flash's AIR for iOS Settings
    panel.
  prefs: []
  type: TYPE_NORMAL
- en: If you forget to do this, then iTunes will not copy the latest version of the
    app to your device when syncing; iTunes will only replace an existing app with
    one that has a higher version number.
  prefs: []
  type: TYPE_NORMAL
- en: However, updating the version number every time you make a build is easy to
    overlook. For more rapid development, you might instead want to delete the existing
    version of the app from your device before installing the latest version.
  prefs: []
  type: TYPE_NORMAL
- en: To remove an app directly from your device, simply hold your finger on the icon
    for a few seconds, then tap the cross that appears at its top-right corner.
  prefs: []
  type: TYPE_NORMAL
- en: iPhone Configuration Utility
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As an alternative to iTunes, you may want to consider downloading and installing
    the iPhone Configuration Utility from Apple.
  prefs: []
  type: TYPE_NORMAL
- en: It allows you to install and remove applications from your device, and also
    lets you see what version of the app is actually installed—something iTunes doesn't
    currently do.
  prefs: []
  type: TYPE_NORMAL
- en: The iPhone Configuration Utility is available for both Mac OS X and Windows
    and can be downloaded from [www.apple.com/support/iphone/enterprise](http://www.apple.com/support/iphone/enterprise).
  prefs: []
  type: TYPE_NORMAL
- en: TestFlight
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For team environments, take a look at **TestFlight.** It is a free over-the-air
    platform used to distribute apps to team members during development and testing.
    The service allows iOS developers to create a team, invite team members, add team
    members' devices, and distribute their latest builds to them.
  prefs: []
  type: TYPE_NORMAL
- en: Each new build is made available to testers through an e-mail with a link to
    install it. Clicking on the link will download and install the build to the device
    wirelessly. There is no need for team members to physically connect their device
    to a computer in order to install a build.
  prefs: []
  type: TYPE_NORMAL
- en: You can sign up for TestFlight at [https://testflightapp.com.](http://https://testflightapp.com.)
  prefs: []
  type: TYPE_NORMAL
