- en: SiriKit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Last year, Apple announced the addition of a new framework called **SiriKit**.
    This framework allows developers to leverage Siri in their apps. For the last
    year, SiriKit has been slowly adopted by developers. This year, Apple added even
    more supported domains. In this chapter, we are going to add SiriKit support to
    our app.
  prefs: []
  type: TYPE_NORMAL
- en: My original goal was to have Siri set up restaurant reservations, but unfortunately,
    Apple software requires this feature to be done using MapKit. Using MapKit is
    not the real issue, though. The real issue is that you have to work with Apple
    to get this set up so that we cannot make restaurant reservations. If you are
    working on an app that needs this feature, then you need to contact Apple support.
    In this chapter, we are going to set up the framework so that we have the ability
    to request money from someone. The setup for SiriKit is quite similar, so once
    you are comfortable doing this chapter, you should not have a problem working
    through the others. Please note that to use SiriKit, you must have a developer
    license to run Siri on your device.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding SiriKit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with SiriKit extensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with SiriKit UI extensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding SiriKit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We first need to understand how Siri interacts with our app before we get started. Have
    a look at how it works through this diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1a37fc7d-2d68-4cbf-88f3-5e627f694aaf.png)'
  prefs: []
  type: TYPE_IMG
- en: A user interacts with Siri to compose a request. Siri takes the request and
    looks through the intents for the requesting app. If the app is not found, Siri
    lets you know. If the app is found, but cannot do what was requested, Siri will
    notify you that the request cannot be done at this time. If the intent can be
    handled by the app, it will pass the information to your app. Your app does what
    it needs to do with that information and reports back to Siri. If the app needs
    further information, it lets Siri know what to request until the app has everything
    it needs or the user cancels the request.
  prefs: []
  type: TYPE_NORMAL
- en: Supported intents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As of iOS 11, Apple currently supports the following intents:'
  prefs: []
  type: TYPE_NORMAL
- en: VoIP Calling (initiate calls and search the user's call history)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Messaging (send messages and search the user's received messages)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Payments (send payments between users or pay bills)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lists and notes (create and manage notes and to-do list items)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Codes (convey contact and payment information using Quick Response (QR)
    codes)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Photos (search for and display photos)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Workouts (start, end, and manage fitness routines)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ride booking (book rides and report their status)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Car commands (manage vehicle door locks and get the vehicle's status)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CarPlay (interact with a vehicle's CarPlay system)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restaurant reservations (create and manage restaurant reservations with help
    from the *Maps* app)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This API requires you to work with Apple Maps before your app can use it. For
    information on how to get started, go to [http://mapsconnect.apple.com](http://mapsconnect.apple.com).
  prefs: []
  type: TYPE_NORMAL
- en: We are going to use the Payment intent, which allows us to send payments between
    users or pay bills. When we are done, we can just say *Hey Siri! Send $100 to
    Jason Clayton for dinner last night using LetsEat*. We can hook this up to any
    banking system, but at the moment, we have everything else set up for this. Let's
    get started.
  prefs: []
  type: TYPE_NORMAL
- en: Enable Siri capabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing we need to do is enable SiriKit:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Xcode, go to your app and select the LetsEat target:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e2fa805d-b167-4957-b7d9-db485ff042f5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, click on the Capabilities tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dc643328-48ea-4c9c-ba38-22da0f50743b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, hit the switch for Siri to switch it to ON:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3b32341e-041c-4b65-9c62-2927de84aca4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You should see the following when you are done:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/46567912-929b-42e5-86f6-3dabdff93f17.png)'
  prefs: []
  type: TYPE_IMG
- en: You need a working developer account to do the following steps. Otherwise, you
    will see errors when trying to follow along. Next, we need to add a new target
    to our project. At the bottom of the TARGETS section, you should see a + button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f521c703-fd52-4903-b2fc-90280d2a87a0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click the + button, and you will see the following screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e050088d-d35f-43da-9047-4666b05bf056.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, select Intents Extension under the iOS tab. Then hit Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Options screen that appears, there are some fields to fill out or choose.
    Add the following to the Options screen and then hit Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Product Name: `MakePayment`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Team: Must have a team'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Organization Name: Your name/company name'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Organization Identifier: Your domain name in reverse order'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Language: `Swift`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Include UI Extension: Checked'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Project: `LetsEat`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Embed in Application: `LetsEat`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is how it should look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3b02e56e-ff3b-401c-95bb-94cd998b5838.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you have finished, we will have two extensions added to our project: the
    `MakePayment` and `MakePaymentUI` extensions. These extensions are what we will
    use to add SiriKit to your project. We need to edit these extensions so that they
    can accept payments:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `MakePayment` folder and select the `Info.plist` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open all of the disclosure arrows under `NSExtension`. When they are all open,
    you should see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8e6d5710-8066-42e4-98a9-26433f351371.png)'
  prefs: []
  type: TYPE_IMG
- en: Currently, the app is set up to use the Send Message intent, and we want to
    use the Send Payment intent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Under `IntentsSupported`, delete `Item 1 (INSearchForMessagesIntent)` and `Item
    2 (INSetMessageAttributeIntent)`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/52e6fb1e-f237-42cd-912d-51a69366c45e.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, for `Item 0`, change `INSendMessageIntent` to `INSendPaymentIntent`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under `IntentsRestrictedWhileLocked`, add `INSendPaymentIntent` by clicking
    the + button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/acecb8b6-1cd9-464b-94d3-d92fc5779b4d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When finished, you should see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/78099d80-c50d-45f5-b7aa-75fe1026938c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, open up `Info.plist` under the `MakePaymentUI` folder, open all the disclosure
    arrows under `NSExtension`, and change `INSendMessageIntent` under `IntentsSupported`
    to `INSendPaymentIntent`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/84c8e407-a9dd-43ea-bd16-36d928c48a4c.png)'
  prefs: []
  type: TYPE_IMG
- en: We have finished setting up our plist. Whenever we access something, we always
    have to ask permission, just like we did earlier when we accessed the user's photos.
    In the `Info.plist` file of the *LetsEat* app, we need to update our plist to
    let users know that we need access for Siri and our reason. Add the `NSSiriUsageDescription`
    key.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the key value, enter anything you want as an alert that the user sees.
    In the following example, the value is set as `This app uses Siri to send payments.`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/54f226f0-d50f-4920-a5be-a7511a6674b2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, inside of your `AppDelete`, add the following import after `import UIKit`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, after `setupDefaultColors()`, add the following method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Then, in your `-application:didFinishLaunchingWithOptions:` under `setupDefaultColors()`,
    add `requestSiriPermissions()`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding this asks the user for permission to use Siri. Now, if you are going
    to use this in a real app, I would say that you should add a Settings section
    where users can use a switch to turn Siri on or off. You do not want to force
    users to use something without really giving them a reason. In iOS, once you ask
    a user for permission and they decline, they have to go into the Settings section.
    If you want to ask, then it is better to have another dialog box that asks for
    permission; if they say yes, then run the request, and if the users say no, then
    you do nothing. This way you do not have to force your users to go to the phone
    settings to turn this feature on. Now that we have our permissions set up, we
    need to create users that we can send money to.
  prefs: []
  type: TYPE_NORMAL
- en: Creating users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When using SiriKit, it needs to have an `INPerson` object. An `INPerson` object
    is used by Siri to send users things—money in our case. Let''s create this new
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Misc` folder and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside of the Choose a template for your new file screen, select iOS at the
    top, and then Swift. Then, hit Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the file as `RestaurantContact`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to this file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we are creating contacts that we can use to ask Siri to send money. We
    have set up three people to accept money at this time: Jason Clayton, Joshua Clayton,
    and Teena Harris. When we request with Siri, these are the names that it looks
    for to see if the person exists. If the name is not in this list, Siri lets you
    know that the name is not found. This list can have any name you wish to have,
    so if you want to change the names to something else, you can do that now. Just
    make sure that when we get to the requesting section, you change the name there
    as well. Our `inPerson()` method is just formatting into a format that SiriKit
    needs to be able to read the object. We now need to add code that runs when the
    send payment intent is invoked.'
  prefs: []
  type: TYPE_NORMAL
- en: Updating our intent handler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can now finally add our code that runs when the Send Payment intent is invoked.
    Open the `IntentHandler` class inside of the `MakePayment` extension folder. After
    the import intents line deletes everything else from this file, add the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we are creating a custom intent handler. When the intent is to send payment,
    we want to run our `SendMoneyIntent` class. We need to create this file next.
    In the same file direction under the `IntentHandler` class, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In this class, the `handle()` method responds to a `SendPaymentIntent`. We
    are printing the person''s display name and amount. We pass a completion block
    here, but in real production code, you would run whatever API you are using to
    verify the payment. Add the following inside of the `SendMoney` intent under the
    `handle()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In this method, we are getting the payee information and checking to see if
    the person matches within our contacts. We are looping through the contacts and
    looking for a match. When completed, we return the result to Siri. If the user
    is not found, then Siri will tell you that the person is not found. If Siri finds
    the person, then `PaymentIntent` continues. Lastly, inside of the `IntentViewController`,
    update the `desiredSize` variable to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are setting the size of the UI to a `height` of `150`. Let's look at
    how we can test this.
  prefs: []
  type: TYPE_NORMAL
- en: Testing Siri
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can test Siri on a device or in the simulator. If you want to test on a
    device, just change the target to the `MakePayment` target and plug in your iOS
    11 device. If you want to test this in the simulator, we need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: First, go to `Settings` in the iPhone Simulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select Siri.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the switch to enable Press Home for Siri.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Enable Siri.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, you have two options. You can run the app and Siri in the simulator. At
    this point, you can say `Send $100 to Jason Clayton for dinner last night using
    LetsEat` (or you use the name of whomever you added to the contacts we created
    earlier). Option two is that you can enter text that you want to display each
    time. To set up this text, every time you run the app, select the `MakePayment`
    scheme:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3fd2a5d1-2938-4db6-96ea-a1fb45c2cd85.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, hit the Scheme dropdown again and select Edit Scheme...:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1ae0c8df-1391-496c-9610-4892a7e60063.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, under Siri Intent Query, put in the desired text, such as `Send $100
    to Jason Clayton for dinner last night using LetsEat`, and then hit Close:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/01c10095-2700-4278-9dc6-89a21b60cb8d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Remember that we have the `MakePayment` scheme. Run the `MakePayment` scheme,
    and the first thing that will happen is that Siri will first ask you for permission:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b8d1c211-3657-49fe-bb29-6a411f1032cb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you accept, Siri will show you your request and ask if you accept it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/aaedc26a-1953-4e09-9b45-44e120ba8815.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you accept, you will see that your money''s been sent. In our example,
    we are not actually sending money, so this step will always goes through:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/76f6b2b7-6949-498b-995f-640438a04c03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that the reason Siri is asking for permission is that we are running Siri
    first instead of the app. If we ran the app, we would get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a9f2d029-071e-4e91-9ce6-2164e825bda3.png)'
  prefs: []
  type: TYPE_IMG
- en: We are now done. We did not do anything with our UI, but you can add anything
    you want to your UI, such as a logo, a view or display to show to the payee, or
    whatever you decide. Have fun with it and make it your own.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at how to integrate Siri into our app. Even though
    Siri is limited to specific intents, we can still find unique ways to use it,
    such as using it for messaging, notes, and lists. The overall setup for each intent
    is the same—the only difference is what you do once the intent hits your app.
    In the next chapter, we will look at how to distribute our app to others for testing,
    as well as how to submit our app to the App Store.
  prefs: []
  type: TYPE_NORMAL
