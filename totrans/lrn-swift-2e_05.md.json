["```swift\nfunc double(input: Int) -> Int {\n    return input * 2\n}\n```", "```swift\nstruct Ball {\n    var radius: Double\n\n    mutating func growByAmount(amount: Double) -> Double {\n        self.radius = self.radius + amount\n        return self.radius\n    }\n}\n```", "```swift\nmutating func currentRadiusPlusAmount(amount: Double) -> Double {\n    self.radius = self.radius + amount\n    return self.radius\n}\n```", "```swift\nvar originalArray = [1,2,3,4,5]\nvar greaterThanThree = [Int]()\nfor num in originalArray {\n    if num > 3 {\n        greaterThanThree.append(num)\n    }\n}\nprint(greaterThanThree) // [4,5]\n```", "```swift\nvar originalArray = [1,2,3,4,5]\nvar greaterThanThree = originalArray.filter {$0 > 3}\nprint(greaterThanThree) // [4,5]\n```", "```swift\nfunc double(input: Int) -> Int {\n        return input * 2\n}\n\nvar doubleClosure = double\nprint(doubleClosure(2)) // 4\n```", "```swift\nvar doubleClosure2 = { (input: Double) -> Double in\n    return input * 2\n}\n```", "```swift\nvar printDouble = { (input: Double) -> Void in\n    print(input * 2)\n}\n```", "```swift\nvar makeHelloWorld = { () -> String in\n    return \"Hello World!\"\n}\n```", "```swift\nfunc firstInNumbers(\n    numbers: [Int],\n    passingTest: (number: Int) -> Bool\n    ) -> Int?\n{\n    for number in numbers {\n        if passingTest(number: number) {\n            return number\n        }\n    }\n    return nil\n}\n```", "```swift\nlet numbers = [1,2,3,4,5]\nfunc greaterThanThree(number: Int) -> Bool {\n    return number > 3\n}\nvar firstNumber = firstInNumbers(numbers, greaterThanThree)\nprint(firstNumber) // \"Optional(4)\"\n```", "```swift\nfirstNumber = firstInNumbers(numbers, passingTest: { (number: Int) -> Bool in\n    return number > 3\n})\n```", "```swift\nfirstNumber = firstInNumbers(numbers, passingTest: { (number) in\n    return number > 3\n})\n```", "```swift\nfirstNumber = firstInNumbers(numbers) { number in\n    return number > 3\n}\n```", "```swift\nfirstNumber = firstInNumbers(numbers) { number in\n    number > 3\n}\n```", "```swift\nfirstNumber = firstInNumbers(numbers) { $0 > 3 }\n```", "```swift\nfirstNumber = firstInNumbers(numbers, passingTest: {$0 > 3})\n```", "```swift\nvar evenNumbers = numbers.filter({ element in\n    element % 2 == 0\n}) // [2, 4]\n```", "```swift\nvar sum = numbers.reduce(0, combine: { previousSum, element in\n    previousSum + element\n}) // 15\n```", "```swift\nvar evenSum = numbers.filter({$0 % 2 == 0}).reduce(0, combine: {$0 + $1}) // 6\n```", "```swift\nevenSum = numbers.filter({$0 % 2 == 0}).reduce(0, combine: +) // 6\n```", "```swift\nlet string = numbers.reduce(\"\", combine: {\"\\($0)\\($1)\"}) // \"12345\"\n```", "```swift\nlet plusOne = numbers.map({ element -> Int in\n    return element + 1\n}) // [2, 3, 4, 5, 6]\n```", "```swift\nlet strings = numbers.map {String($0)}\n```", "```swift\nnumbers.sort({ element1, element2 in\n    element1 > element2\n}) // [5, 4, 3, 2, 1]\n```", "```swift\nvar firstString = numbers.map({String($0)}).first\n```", "```swift\nfirstString = numbers.lazy.map({String($0)}).first\n```", "```swift\nlet lazyStrings = numbers.lazy.map({String($0)})\nfor string in lazyStrings {\n    print(string)\n}\n```", "```swift\n//: List of people to invite\nlet invitees = [\n    \"Sarah\",\n    \"Jamison\",\n    \"Marcos\",\n    \"Roana\",\n    \"Neena\",\n]\n\n//: Dictionary of shows organized by genre\nvar showsByGenre = [\n    \"Comedy\": \"Modern Family\",\n    \"Drama\": \"Breaking Bad\",\n    \"Variety\": \"The Colbert Report\",\n]\n```", "```swift\nfunc pickAndRemoveRandomGenre() -> (genre: String, example: String)? {\n    let genres = Array(showsByGenre.keys)\n    guard genres.count > 0 else {\n        return nil\n    }\n\n    let genre = genres[Int(rand()) % genres.count]\n    let example = showsByGenre[genre]!\n    showsByGenre[genre] = nil\n    return (genre: genre, example: example)\n}\n```", "```swift\nlet invitations: [String] = invitees\n.map({ name in\n    guard let (genre, example) = pickAndRemoveRandomGenre() else {\n        return \"\\(name), just bring yourself\"\n    }\n    return \"\\(name), bring a \\(genre) show\"\n        + \"\\n\\(example) is a great \\(genre)\"\n})\n```", "```swift\nprint(invitations.joinWithSeparator(\"\\n\"))\n```", "```swift\nfunc shuffle(array: [String]) -> [String] {\n    return array\n        .map({ ($0, Int(rand())) })\n        .sort({ $0.1 < $1.1 })\n        .map({$0.0})\n}\n```", "```swift\nlet invitations: [String] = shuffle(invitees)\n.map({ name in\n    guard let (genre, example) = pickAndRemoveRandomGenre() else {\n        return \"\\(name), just bring yourself\"\n    }\n    return \"\\(name), bring a \\(genre) show\"\n        + \"\\n\\(example) is a great \\(genre)\"\n})\n```"]