- en: Chapter 7. Working with Different Multimedia Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Selecting images and video from the camera roll
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capturing media with the camera
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing video with AppleTV integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing music using the MediaPlayer framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the iOS device microphone to record
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animating views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing customized text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing lines and curves
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing and filling shapes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying color effects using Core Image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying transition effects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Core Image** framework is a hardware-accelerated framework that provides
    an easier way for you to enhance your photos and videos using the several built-in
    filters: color effects, distortions, and transitions, as well as several advanced
    features: auto-enhance, red-eye reduction, and facial recognition.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will take a closer look into these frameworks and how these
    can be used to apply image filter effects using the `CIFilter` class, as well
    as implementing Airplay to allow us to output content to another device using
    Apple TV. We will learn how to use the **AVFoundation** framework to record and
    play back audio content using the iOS device's built-in microphone. Finally, we
    will learn how we can use the **CoreGraphics** framework to enable us to draw
    shapes, and textual information to our view.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting images and video from the camera roll
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to give the user the ability to select images
    and videos from the iOS device's photo album.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new **Single View Application**, and name it **MediaPickerExample**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `ViewController.xib` files from the **Project** **Navigator** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Object Library**, select and drag a `UIToolbar` object, and add this
    to our view and select the **Item** button located within our toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Attributes Inspector** section, change the **Identifier** property
    to **Organize**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an outlet for this `UIBarButtonItem`, and name it `btnBrowse`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the action method for the **Organize** button and name it `btnBrowse`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Object Library**, select and drag a `UIImageView` object, and add
    this to our view and resize it so that it fills the area of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an outlet for this `UIImageView`, and name it `imageView.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our next step is to create the code functionality that will be responsible for
    allowing images and videos to be selected when the **Organize** button is clicked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ViewController.h` interface file from the **Project** **Navigator**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, modify the interface file as shown by the highlighted code sections in
    the following code snippet:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Open the `ViewController.m` implementation file from the `Project` `Navigator`,
    and enter in the following highlighted code sections.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, modify the `btnBrowse:` method as shown in the code snippet:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create the following code sections, as specified in the code snippet:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Then, **Build** and **Run** the application by choosing **Product | Run** from
    the **Product** menu, or alternatively pressing *Command + R*.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: When the compilation completes, click on the **Organize** button to present
    the image picker, and select an image by clicking on its thumbnail. The image
    will be displayed in the image view. Alternatively, if you choose a video, the
    full path will be displayed within the console window.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we start by extending our class, to include each of the following
    class protocols: `UIImagePickerControllerDelegate`, `UINavigationControllerDelegate`
    so that we can access each of their respective properties and methods. We can
    check to see if we are able to access the iOS device''s photo library using the
    `isSourceTypeAvailable` property of the `UIImagePickerController` class, and initialize
    the properties of the `ImagePicker` class to only display images from our photo
    library. Next, we make the delegate point to itself and then set the `sourceType`
    property to use the camera, and then set the value of the `cameraDevice` property
    to use the rear camera and display the camera interface, and the `UIImagePickerController`
    object is dismissed.'
  prefs: []
  type: TYPE_NORMAL
- en: In our next section, we declare a delegate method for our image picker controller
    `imagePickerControllerDidCancel` that will be responsible for handling and taking
    care of closing the camera session without making an image selection, or taking
    a picture whenever the **Cancel** button has been clicked. Finally, we perform
    a check to determine the type of media that has been chosen from the photo library
    using the `UIImagePickerControllerMediaType` property of `UIImagePickerController`,
    and determine if we have selected either an image or a movie.
  prefs: []
  type: TYPE_NORMAL
- en: If we selected an image, we create a thumbnail image representation of the video,
    and set the `image` property of the `imageView` control. If a video has been chosen,
    we obtain the file location of the chosen file, using the `UIImagePickerControllerMediaURL`
    method, and display this within our console window.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Capturing media with the camera* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capturing media with the camera
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to use the iOS device camera for capturing
    media.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following on from our previous recipe, create a new **Single View Application,**
    and name it **CameraPickerExample**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `ViewController.xib` files from the **Project** **Navigator** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Object Library**, select and drag a `UIToolbar` object, and add this
    to our view and click on the **Item** button located within our toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Attributes Inspector** section, change the **Identifier** property
    to **Camera**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an outlet for this `UIBarButtonItem`, and name it `btnCamera`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the action method for the **Camera** button and name it `btnCamera`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our next step is to create the code functionality that will be responsible for
    displaying the camera view when the **Camera** button is clicked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ViewController.h` interface file from the **Project** **Navigator**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, modify the interface file as shown by the highlighted code sections in
    the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `ViewController.m` implementation file from the **Project** **Navigator**
    window, and enter in the following highlighted code sections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, modify the `btnCamera:` method as shown in the code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create the following code sections, as specified in the code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, **Build** and **Run** the application by choosing **Product | Run** from
    the **Product** menu, or alternatively pressing *Command + R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the compilation completes, click on the **Camera** button to open the camera
    and take a picture. The picture will be saved to the iOS device's photo album.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we start by extending our class, to include each of the following
    class protocols: `UIImagePickerControllerDelegate`, `UINavigationControllerDelegate`
    so that we can access each of their respective properties and methods. We then
    check to see if we are able to access the iOS device''s camera using the `isSourceTypeAvailable`
    property of the `UIImagePickerController` class and then create a new instance
    of our `UIImagePickerController` class. Next, we make the delegate point to itself
    and then set the `sourceType` property to use the camera, and then set the value
    of the `cameraDevice` property to use the rear camera. Finally, we display the
    camera interface, and the `UIImagePickerController` object is dismissed. Next,
    we declare a delegate method for our image picker controller `imagePickerControllerDidCancel`
    that will be responsible for handling and taking care of closing the camera session
    without making an image selection, or taking a picture whenever the **Cancel**
    button has been clicked on.'
  prefs: []
  type: TYPE_NORMAL
- en: Next, when the user takes a photo using the camera, it is not automatically
    saved on the device. To save it, we call the `UIImageWriteToSavedPhotosAlbum`
    method of the `UIImage` class. This method accepts a delegate of type `UIImageconextInfo`,
    which will report an error and immediately call the `didFinishSavingWithError:`
    method if something goes wrong to handle the type of error.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Selecting images and video from the camera roll* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing video with Apple TV integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **AirPlay** framework is an updated framework that lets you stream audio
    and video content from any iOS device out to any Airplay-enabled device that is
    capable of playing audio and video such as television sets and audio systems.
  prefs: []
  type: TYPE_NORMAL
- en: Starting with iOS 5, developers now have the flexibility to incorporate Airplay
    content into their applications, and have this information presented out to a
    nearby Apple TV receiver. In this section, we will take a look at how to create
    a simple application to playback video content on an iOS device, and then take
    a look at the steps involved to output this to an Apple TV device.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following on from our previous recipe, create a new **Single View Application**,
    and name it **PlayVideoExample**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a reference to the `MediaPlayer.framework` to your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `ViewController.xib` files from the **Project** **Navigator** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Object Library**, drag a `UIButton` object, and add this to our view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Attributes Inspector** section, change the **Title** property to
    **Play Video**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an outlet for this `UIButton`, and name it `btnPlayVideo`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the action method for the **Play Video** button and name it `btnPlayVideo`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our next step is to create the code functionality that will be responsible for
    playing the video when the **Play Video** button is clicked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ViewController.h` interface file from the **Project** **Navigator**
    window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, create the following code sections as highlighted in the code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `ViewController.m` implementation file from the **Project** **Navigator**
    window, and enter in the following highlighted code sections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, modify the `btnPlayVideo:` method as shown in the code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the `moviePlaybackComplete:` as method shown in the code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, **Build** and **Run** the application by choosing **Product | Run** from
    the **Product** menu, or alternatively pressing *Command + R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When the compilation completes, the following screenshot shows what the icon
    looks like when **AirPlay** has been enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3349OT_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we declared a variable (`NSString`) `moviePath` that will contain
    the file path to our movie file and then create a (`NSURL`) `movieURL` that converts
    our file path to an object that is needed by the `MPMoviePlayerController` method
    when it is being initialized.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we set up a notification method to determine when the video playback completes
    by using a notification method called `MPMoviePlayerPlaybackDidFinishNotification`
    to the `NSNotificationCenter` property which the calls the `moviePlaybackComplete:`
    method and then add the `MPMoviePlayerController` view to our custom view controller,
    so that it will appear on the screen and then use the `respondsToSelector:` method
    of the `MPMoviePlayerController` object to cater for older iOS devices that don't
    support the `allowsAirPlay` property.
  prefs: []
  type: TYPE_NORMAL
- en: In order to provide AirPlay functionality we enable a special property on our
    `MPMoviePlayerController` object, by setting the `allowsAirPlay` property to `YES`
    and then specify that we want to display our video in full screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then tell the `moviePlayerController` method to commence playback and then
    modify the `scalingMode` property of the `MPMoviePlayerController` object. By
    setting this property, it will determine how the movie image adapts to fill the
    playback size that you have defined. The following scaling modes currently exist,
    and are displayed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`MPMovieScalingModeNone`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MPMovieScalingModeAspectFit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MPMovieScalingModeAspectFill`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MPMovieScalingModeFill`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we create the `moviePlaybackComplete:` method and retrieve the object
    using the `[notificationobject]` statement and then reference it with the new
    `moviePlayerController` pointer. We then send a message back to the `NSNotificationCenter`
    method that removes the observer we previously registered within our `playVideo`
    method. We finally proceed with cleaning up our custom view controller from our
    display.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information on the `MPMoviePlayerController` class, you can refer
    to the Apple Developer Documentation at the following location: [https://developer.apple.com/library/ios/#documentation/mediaplayer/reference/MPMoviePlayerController_Class/Reference/Reference.html](https://developer.apple.com/library/ios/#documentation/mediaplayer/reference/MPMoviePlayerController_Class/Reference/Reference.html)`#//apple_ref/occ/cl/MPMoviePlayerController`'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Playing music using the MediaPlayer framework* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing music using the MediaPlayer framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn how to play songs that are stored on the iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following on from our previous recipe, create a new **Single View Application**,
    and name it **MusicPlayerExample**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a reference to the `MediaPlayer.framework` to your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `ViewController.xib` files from the **Project** **Navigator** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Object Library** window, select and drag a `UIToolbar` object, and
    add this to our view and select the **Item** button located within our toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Attributes Inspector** section, change the **Title** property to
    read **Browse**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create outlets for this `UIBarButtonItem`, and name it `btnBrowse`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the `action` method for the **Browse** button and name it `btnBrowse`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Object Library** window, select and drag a `UIBarButtonItem` object,
    and add this next to the **Browse** button within our toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Attributes Inspector** section, change **Title** property to read
    **Play**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the outlets for this `UIBarButtonItem`, and name it `btnPlay`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the `action` method for the **Play** button and name it `btnPlay`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our next step is to create the code functionality that will be responsible for
    playing music, when songs are selected and played from the Media Library.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ViewController.h` interface file from the **Project** **Navigator**
    window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, create the following code sections as highlighted in the code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `ViewController.m` implementation file from the **Project** **Navigator**
    window, and enter the following highlighted code sections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, modify the `viewDidLoad:` method as shown in the code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create the following code sections, as specified in the code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, **Build** and **Run** the application by choosing **Product | Run** from
    the **Product** menu, or alternatively pressing *Command + R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the compilation completes, click on the **Browse** button, and select one
    or more songs, then press the **Play** to play the chosen songs.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we start by extending our class, to include each of the following
    class protocols: `MPMediaPickerControllerDelegate` so that we can access each
    of their respective properties and methods. We then initialize the media picker
    and pass the type of media we want it to look for and then initialize and create
    an instance of the `MPMusicPlayerController` class. Next, we declare our `btnBrowse`
    method that will display the iOS device music library interface, and allows for
    multiple files to be selected. In our `btnPlay:` method, we check to see if any
    songs are currently being played, which is determined by checking the `playbackState`
    property. Playing and stopping of songs is achieved through the `play` and `stop`
    methods of the `MPMusicPlayerController` class object. In the `mediaPicker:didPickMediaItems:`
    method, we set the songs that were picked by the user to the music player, through
    the use of the `setQueueWithItemCollection:` method and dismiss the modal media
    picker controller.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Playing video with Apple TV integration* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Capturing media with the camera* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the iOS device's microphone to record
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn how we can use the iOS device's microphone to record
    sounds.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following on from our previous recipe, create a new **Single View Application,**
    and name it **RecorderExample**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a reference to the `AVFoundation.framework` to your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `ViewController.xib` files from the **Project** **Navigator** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Object Library** window, select and drag a `UIToolbar` object, and
    add this to our view and select the **Item** button located within our toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Attributes Inspector** section, change the **Title** property to
    read **Start Recording**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the outlet for this `UIBarButtonItem`, and name it `btnStart`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the `action` method for the button, and name it `startRecord`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Object Library** window, select and drag a `UIBarButtonItem` object,
    and add this to the right of the **Start Recording** button within our toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Attributes Inspector** section, change the **Title** property to
    read **Play**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the outlet for this `UIBarButtonItem`, and name it `btnPlay`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the `action` method for the button, and name it `startPlayback`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our next step is to create the code functionality that will be responsible for
    recording and playback our audio content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ViewController.h` interface file from the Project Navigator window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, create the following code sections as highlighted in the code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `ViewController.m` implementation file from the **Project** **Navigator**
    window, and enter in the following highlighted code sections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, modify the `viewDidLoad:` method as shown in the code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create the following code sections, as specified in the code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, **Build** and **Run** the application by choosing **Product | Run** from
    the **Product** menu, or alternatively pressing *Command + R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the compilation completes, click on the **Start Recording** button to record
    your voice sample, and then press the **Play** button to hear the playback of
    your recording.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we start by creating an instance of the `AVAudioRecorder` class
    when the application is first launched. This method is then initialized with a
    URL pointing the default filename to which the recorded audio is saved, and declare
    an `NSDictionary` object to initialize and set up the recording settings for the
    audio. Next, we use the `NSSearchPathForDirectoriesInDomains` class to identify
    the application's document directory, then construct a URL to a file in that location
    named `RecorderExample.caf`, and prepare the `aRecorder` instance to begin recording
    when the user requests it.
  prefs: []
  type: TYPE_NORMAL
- en: Next, in our `startRecord` method, we use the `aRecorder` object to determine
    if we are currently recording. If we have determined that we are not recording,
    we change the text of our `startRecord` method to display **Stop Recording**,
    disable the `btnPlay` button, and then set up our `aRecorder` object to begin
    the recording. If we are currently recording, we change the text of our `startRecord`
    method to display **Start Recording** button and disable the `btnPlay` button,
    and stop our `aRecorder` object from recording.
  prefs: []
  type: TYPE_NORMAL
- en: In our next step, we initialize the `aPlayer` object to play the file recording
    using the URL method of the `aRecorder` object and set up our `aPlayer` object
    to use the `prepareToPlay` method, before calling the `Play` method to start the
    playback. If we have decided that we are currently playing our voice recording,
    we make a call to the `stop` method on our `aPlayer` object, which ceases playback.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information on the `AVFoundation` class, refer to the Apple Developer
    Documentation located at the following location: [https://developer.apple.com/library/ios/#documentation/AVFoundation/Reference/AVAudioRecorder_ClassReference/Reference/Reference.html](https://developer.apple.com/library/ios/#documentation/AVFoundation/Reference/AVAudioRecorder_ClassReference/Reference/Reference.html)`#//apple_ref/occ/cl/AVAudioRecorder`'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Playing music using the MediaPlayer framework* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animating views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn how we can use the `UIKit` animations to move a
    `UILabel` control on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following on from our previous recipe, create a new **Single View Application,**
    and name it **AnimateViewExample**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `ViewController.xib` files from the **Project** **Navigator** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Object Library** window, drag a `UILabel` object onto the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resize the `UILabel` control so that its contents fill the width of the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create the outlet for this `UILabel`, and name it `lblAnimateMsg`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, from the **Object** **Library** window, drag a `UIButton` object onto
    the view, and place it underneath the `UILabel` that we added previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Attributes Inspector** section, modify the **Title** property to
    read **Start**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create an outlet for this `UIButton`, and name it `btnAnimate`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create the action method for the **Start** button and name it `doAnimation`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After adding the button, save the document by choosing **File | Save** from
    the menu bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our next step is to create the code functionality that will be responsible for
    animating our `UILabel` control when the **Start** button is pressed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ViewController.m` implementation file from the **Project** **Navigator**
    window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the following variable declaration as highlighted in the code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, modify the `viewDidLoad:` method as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, modify the `doAnimation:` method as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the `doAnimationStop:` method as shown in the code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, **Build** and **Run** the application by choosing **Product | Run** from
    the **Product** menu, or alternatively pressing *Command + R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the compilation completes, the iOS Simulator will appear. Tap the **Start**
    button to see the label start to animate and display the message when the animation
    completes.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we looked at how we can use the `UIKit` framework to perform
    animations on objects within the view. We start by saving the original position
    of our label and storing this into a variable called `origPos` and then create
    a new variable `AnimateFrame` that will be used to specify the height to which
    our label will animate within.
  prefs: []
  type: TYPE_NORMAL
- en: In our next step, we begin marking the start of our animation block using the
    `beginAnimations` method and then specify a name for the animation, before setting
    the graphics context to `nil`. Next, we specify the length of the animation in
    seconds using the `setAnimationDuration` property, and then set the animation
    delegate object.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we define the default easing functions that will be applied to the animation
    at its start and ending points by using the `setAnimationCurve` method. Then,
    we set up a selector object that gets called when the animation completes. Finally,
    we stop our animation block using the `commitAnimations` method to mark the end
    of our animations. Finally, in our `doAnimationStop:` method, we restore the label
    control to the original location for the next time round.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information on the `UIKit` framework, you can refer to the Apple Developer
    Documentation location at the following URL: [https://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIKit_Framework/_index.html](https://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIKit_Framework/_index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using Xcode to create an iOS project* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    and Installing the iOS SDK Development Tools"), *Getting and Installing the iOS
    SDK Development Tools*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating outlets to Interface Builder objects* recipe in [Chapter 1](ch01.html
    "Chapter 1. Getting and Installing the iOS SDK Development Tools"), *Getting and
    Installing the iOS SDK Development Tools*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing customized text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will take a look at how easy it is to draw stylized text with
    an outline on to the view.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following on from our previous recipe, create a new **Single View Application,**
    and name it **DrawTextExample**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `DrawTextExample` folder, choose **File | New | File…**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Objective-C class** template from the list of available templates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Next** button to proceed to the next step in the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter in `DrawTextView` as the name of the class name to be created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that you have selected `UIView` as the type of subclass to create from
    the **Subclass of** drop-down list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Next** button to proceed to the next step of the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click on the **Create** button to save the file to the folder location
    specified.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have successfully finished creating our `DrawTextView` class. Our next step
    is to implement the functionality and methods used by this class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `DrawTextView.m` implementation file from the **Project** **Navigator**
    window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the `drawRect:` method as shown in the following code snippet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Our next step is to create the code functionality that will be responsible for
    adding our custom view as a sub-view to our existing view controller.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ViewController.m` implementation file from the **Project** **Navigator**
    window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the following class reference as highlighted in the code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, modify the `viewDidLoad:` method as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, **Build** and **Run** the application by choosing **Product | Run** from
    the **Product** menu, or alternatively pressing *Command + R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the compilation completes, the iOS Simulator appears and displays the text
    we created within this recipe. The image has been rotated within the device.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3349OT_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we created a new custom `DrawTextView` class that inherits from
    the `UIView` class. We then modify the `drawRect:` method that will be used to
    draw our text to the view. We then declare the variable `context` that will be
    used to obtain the current graphics context using the `UIGraphicsGetCurrentContext`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we clear the view using the `CGContextClearRect` function and set the
    color of our text and pass the `FillStroke` value to our `CGContextSetTextDrawingMode`
    method and then call our `drawAtPoint:` method to draw the text using the font
    details specified by the `UIFont` class. Finally, we initialize our `DrawTextView`
    custom class and then add this as a subview using the same dimensions of our parent
    view controller.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information on the `CoreGraphics` class, you can refer to the Apple
    Developer Documentation location at the following URL: [https://developer.apple.com/library/ios/#documentation/coregraphics/reference/coregraphics_framework/_index.html](https://developer.apple.com/library/ios/#documentation/coregraphics/reference/coregraphics_framework/_index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Drawing lines and curves* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing lines and curves
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will take a look at how easy it is to draw lines and curves
    to our view.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following on from our previous recipe, create a new **Single View Application,**
    and name it **LinesCurvesExample**. Create a custom view and name it `LinesCurvesView`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `LinesCurvesView.m` implementation file from the **Project** **Navigator**
    window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the `drawRect:` method as shown in the following code snippet:.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Our next step is to create the code functionality that will be responsible for
    adding our custom view as a subview to our existing view controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ViewController.m` implementation file from the **Project** **Navigator**
    window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a reference to our `LinesCurvesView.h` interface file like we did previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, modify the `viewDidLoad:` method as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, **Build** and **Run** the application by choosing **Product | Run** from
    the **Product** menu, or alternatively pressing *Command + R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the compilation completes, the iOS Simulator will appear. The following
    screenshot displays our line and curve that we created within this recipe. I have
    rotated this image within the device.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3349OT_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we created a new custom `linesCurvesView` class that inherits
    from the `UIView` class. We then modified the `drawRect:` method and proceeded
    to declare a variable `context` used to obtain the current graphics context using
    the `UIGraphicsGetCurrentContext` function just like we did in our preceding example.
  prefs: []
  type: TYPE_NORMAL
- en: In our next step, we proceed to set the line width, color, and add the line
    using the `CGContextAddLineToPoint` method which accepts the starting and ending
    points of each line and call the `CGContextStrokePath` method to display the line
    to the view.
  prefs: []
  type: TYPE_NORMAL
- en: In order to add a curve to our view, we repeat the steps accordingly and then
    call the `CGContextMoveToPoint` method, which moves the current point, and we
    call the `CGContextAddCurveToPoint` method so that a curve will happen at the
    current point, which has been determined by the `CGContextMoveToPoint` method.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we call `CGContextStrokePath` method to display the curve to the view.
    Finally, we initialize our `LinesCurvesView` custom class and then add this as
    a subview using the same dimensions of our parent view controller.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Drawing customize text* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding and customizing views* recipe in [Chapter 2](ch02.html "Chapter 2. User
    Interfaces – Creating the UI"), *User Interfaces - Creating the UI*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing and filling shapes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will take a look at how easy it is to draw and fill a series
    of shapes on to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following on from our previous recipe, create a new **Single View Application,**
    and name it **ShapesDrawExample**. Create a custom view and name it **ShapesView**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ShapesView.m` implementation file from the **Project** **Navigator**
    window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the `drawRect:` method as shown in the following code snippet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Our next step is to create the code functionality that will be responsible for
    adding our custom view as a subview to our existing view controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ViewController.m` implementation file from the **Project** **Navigator**
    window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a reference to our `ShapesView.h` interface file like we did previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, modify the `viewDidLoad:` method as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, **Build** and **Run** the application by choosing **Product | Run** from
    the **Product** menu, or alternatively pressing *Command + R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the compilation completes, the iOS Simulator will appear. The following
    screenshot displays each of our colored shapes filled. I have rotated this image
    within the device.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3349OT_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we created a new custom `ShapesView` class that inherits from
    the `UIView` class. We then modified the `drawRect:` method and declared a variable
    `context` used to obtain the current graphics context using the `UIGraphicsGetCurrentContext`
    function just like we did in our previous example. In our next step, we proceed
    to set the fill color of our circle by using the `CGContextSetFillColorWithColor`
    method and proceed to call the `CGContextAddEllipseInRect` method while passing
    the `CGRectMake` object. The `CGRectMake` method defines the bounding rectangle
    of the circle. Next, we call the `CGContextFillPath` method, which fills the object,
    and displays it to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever you proceed to define a rectangle, you need to use the `CGContextAddRect`
    method and specify the dimensions using the `CGRectMake` method as we did when
    defining our circle. Next, we define our triangle by specifying the first point
    of the triangle using the `CGContextMoveToPoint` method and then proceed to call
    the `CGContextAddLineToPoint` method for each vertex that makes up the triangle,
    before specifying the color for our triangle and use the `CGContextFillPath` method
    to display the triangle object to the screen. Finally, we initialize our `LinesCurvesView`
    custom class and then add this as a subview using the same dimensions of our parent
    view controller.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Drawing lines and curves* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding and customizing views* recipe in [Chapter 2](ch02.html "Chapter 2. User
    Interfaces – Creating the UI"), *User Interfaces — Creating the UI*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying color effects using Core Image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will take a look at how we can use Core Image to apply color
    effects to an image.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following on from our previous recipe, create a new **Single View Application**,
    and name it **ColorEffectsExample**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a reference to the `CoreImage.framework` to your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `ViewController.xib` files from the **Project** **Navigator** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Object** **Library** window, drag a `UIImageView` object onto the
    view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resize the control accordingly so that it takes up the entire area of the screen,
    and set the image view **Mode** to **Scale to Fill** from within the **Attributes
    Inspector** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create the outlet for this `UIImageView`, and name it `imageView`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our next step is to create the code functionality that will be responsible for
    applying the various color effects to the image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ViewController.h` interface file from the **Project** **Navigator**
    window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, modify the interface file as shown by the highlighted code sections in
    the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `ViewController.m` implementation file from the **Project** **Navigator**
    window, and enter in the following highlighted code sections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, modify the `viewDidLoad:` method as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the `touchesBegan:` method as shown in the code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the `actionSheet:` method as shown in the code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, **Build** and **Run** the application by choosing **Product | Run** from
    the **Product** menu, or alternatively pressing *Command + R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the compilation completes, the iOS Simulator will appear. Tap the iOS device
    screen to see the various image options appear. The following screenshot shows
    the Sepia Tone effect applied to the image.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3349OT_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we started by extending our class to include the class protocol
    for the `UIActionSheetDelegate` class so that we can access the protocol's respective
    methods. We then initialized our `imageView` control by rendering the default
    image to use as defined by our `#define` directive and created the `touchesBegan:`
    method, and initialize an `actionSheet` variable that sets up a list of options
    that can be chosen from, and then applied to the image. Next, we create the `actionSheet:clickedButtonAtIndex:`
    method that will be used to determine what button has been selected from the action
    sheet options panel, which is derived by the `buttonIndex` property. Next, we
    declare a `CIContext` variable context. This variable will be used for rendering
    the `cImage` image object to the view.
  prefs: []
  type: TYPE_NORMAL
- en: We then declared an `inputImage` variable object of type `CIImage`, which contains
    a pointer to the image within our `imageView` and declared an `CIImageoutputImage`
    variable that will be used to apply the image filter changes, and then output
    this modified `imageView` control. We then declare a `CIFilter` variable called
    `filter`, which will contain the type of filter effect to use.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information on the `CoreImage` `filters`, please refer to the following:
    [https://developer.apple.com/library/ios/#documentation/GraphicsImaging/Reference/CoreImageFilterReference/Reference/reference.html](https://developer.apple.com/library/ios/#documentation/GraphicsImaging/Reference/CoreImageFilterReference/Reference/reference.html)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Applying transition effects* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying transition effects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will take a look at how we can apply transition effects to
    create a water ripple effect to an image.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following on from our previous recipe, create a new **Single View Application**,
    and name it **TransitionsExample**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a reference to the `QuartzCore.framework` to your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `ViewController.xib` files from the **Project** **Navigator** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Object** **Library** window, drag a `UIImageView` object onto the
    view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resize the control accordingly so that it takes up the entire area of the screen,
    and set the image view **Mode** to **Aspect Fill** from within the **Attributes
    Inspector** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create the outlet for this `UIImageView`, and name it `imageView`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our next step is to create the code functionality that will be responsible for
    applying the transition effects to the image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ViewController.m` implementation file from the **Project** **Navigator**
    window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the `QuartzCore` class reference as highlighted in the code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, modify the `viewDidLoad:` method as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the `touchesBegan:` method as shown in the code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, **Build** and **Run** the application by choosing **Product | Run** from
    the **Product** menu, or alternatively pressing *Command + R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the compilation completes, the iOS Simulator will appear. Tap the iOS device
    screen to see the water rippling effect applied to the image as can be seen in
    the following image, which has been rotated within the device.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3349OT_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we learned how easy it was to apply transition effects to an
    image contained within a view. We first start by declaring a variable called animation
    that will be responsible for handling the transition animations for our `UIView`
    layer. In the next step, we specify the duration of our ripple effect that will
    be used to define how long, in seconds, a single iteration of an animation will
    take to display.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we create the `touchesBegan:` method, which gets called when the user
    places their finger on the screen. Next, we specify the type of animation that
    we want to use is the `rippleEffect` transition effect and then apply the animation
    effect to our view.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information on the `QuartzCore` framework, refer to the following
    URL: [https://developer.apple.com/library/ios/#documentation/GraphicsImaging/Reference/QuartzCoreRefCollection/_index.html](https://developer.apple.com/library/ios/#documentation/GraphicsImaging/Reference/QuartzCoreRefCollection/_index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Applying color effects using Core Image* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
