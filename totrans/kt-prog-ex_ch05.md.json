["```\ndependencies {\n  implementation fileTree(dir: 'libs', include: ['*.jar'])\n  implementation \"org.jetbrains.kotlin:kotlin-stdlib-jre7\n                  :$kotlin_version\"\n  implementation 'com.android.support:appcompat-v7:26.1.0'\n  implementation 'com.android.support.constraint:constraint-layout:1.0.2'\n  implementation 'com.android.support:recyclerview-v7:26.1.0'\n  implementation 'com.android.support:design:26.1.0'\n\n  implementation \"android.arch.persistence.room:runtime:1.0.0-alpha9-1\"\n  implementation \"android.arch.persistence.room:rxjava2:1.0.0-alpha9-1\"\n  implementation 'com.android.support:support-v4:26.1.0'\n  implementation 'com.android.support:support-vector-drawable:26.1.0'\n  annotationProcessor \"android.arch.persistence.room:compiler\n                       :1.0.0-alpha9-1\"\n\n  implementation \"com.squareup.retrofit2:retrofit:2.3.0\"\n  implementation \"com.squareup.retrofit2:adapter-rxjava2:2.3.0\"\n  implementation \"com.squareup.retrofit2:converter-gson:2.3.0\"\n  implementation \"io.reactivex.rxjava2:rxandroid:2.0.1\"\n\n  implementation 'com.github.stfalcon:chatkit:0.2.2'\n\n  testImplementation 'junit:junit:4.12'\n  androidTestImplementation 'com.android.support.test:runner:1.0.1'\n  androidTestImplementation 'com.android.support.test.espresso\n                             :espresso-core:3.0.1'\n}\n```", "```\nbuildscript {\n  ext.kotlin_version = '1.1.4-3'\n  repositories {\n    google()\n    jcenter()\n  }\n  dependencies {\n    classpath 'com.android.tools.build:gradle:3.0.0-alpha9'\n    classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n  }\n}\n\nallprojects {\n  repositories {\n    google()\n    jcenter()\n  }\n}\n\ntask clean(type: Delete) {\n  delete rootProject.buildDir\n}\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".ui.login.LoginActivity\"\n    android:orientation=\"vertical\"\n    android:paddingTop=\"32dp\"\n    android:paddingBottom=\"@dimen/default_margin\"\n    android:paddingStart=\"@dimen/default_padding\"\n    android:paddingEnd=\"@dimen/default_padding\"\n    android:gravity=\"center_horizontal\">\n    <EditText\n        android:id=\"@+id/et_username\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:inputType=\"text\"\n        android:hint=\"@string/username\"/>\n    <EditText\n        android:id=\"@+id/et_password\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"@dimen/default_margin\"\n        android:inputType=\"textPassword\"\n        android:hint=\"@string/password\"/>\n    <Button\n        android:id=\"@+id/btn_login\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"@dimen/default_margin\"\n        android:text=\"@string/login\"/>\n    <Button\n        android:id=\"@+id/btn_sign_up\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"@dimen/default_margin\"\n        android:background=\"@android:color/transparent\"\n        android:text=\"@string/sign_up_solicitation\"/>\n    <ProgressBar\n        android:id=\"@+id/progress_bar\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:visibility=\"gone\"/>\n</LinearLayout>\n```", "```\n<resources>\n  <string name=\"app_name\">Messenger</string>\n  <string name=\"username\">Username</string>\n  <string name=\"password\">Password</string>\n  <string name=\"login\">Login</string>\n  <string name=\"sign_up_solicitation\">\n    Don\\'t have an account? Sign up!\n  </string>\n  <string name=\"sign_up\">Sign up</string>\n  <string name=\"phone_number\">Phone number</string>\n  <string name=\"action_settings\">settings</string>\n  <string name=\"hint_enter_a_message\">Type a messageâ€¦</string>\n\n  <!--  Account settings -->\n  <string name=\"title_activity_settings\">Settings</string>\n  <string name=\"pref_header_account\">Account</string>\n  <string name=\"action_logout\">logout</string>\n</resources>\n\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n  <dimen name=\"default_margin\">16dp</dimen>\n  <dimen name=\"default_padding\">16dp</dimen>\n</resources>\n```", "```\npackage com.example.messenger.ui.login\n\ninterface LoginView {\n  fun showProgress()\n  fun hideProgress()\n  fun setUsernameError()\n  fun setPasswordError()\n  fun navigateToSignUp()\n  fun navigateToHome()\n}\n```", "```\npackage com.example.messenger.ui.base\n\nimport android.content.Context\n\ninterface BaseView {\n  fun bindViews()\n  fun getContext(): Context\n}\n```", "```\npackage com.example.messenger.ui.auth\n\ninterface AuthView {\n  fun showAuthError()\n}\n```", "```\npackage com.example.messenger.ui.login\n\nimport com.example.messenger.ui.auth.AuthView\nimport com.example.messenger.ui.base.BaseView\n\ninterface LoginView : BaseView, AuthView {\n  fun showProgress()\n  fun hideProgress()\n  fun setUsernameError()\n  fun setPasswordError()\n  fun navigateToSignUp()\n  fun navigateToHome()\n}\n```", "```\npackage com.example.messenger.ui.login\n\nimport android.content.Context\nimport android.content.Intent\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\nimport android.view.View\nimport android.widget.Button\nimport android.widget.EditText\nimport android.widget.ProgressBar\nimport android.widget.Toast\nimport com.example.messenger.R\n\nclass LoginActivity : AppCompatActivity(), LoginView, View.OnClickListener {\n\n  private lateinit var etUsername: EditText\n  private lateinit var etPassword: EditText\n  private lateinit var btnLogin: Button\n  private lateinit var btnSignUp: Button\n  private lateinit var progressBar: ProgressBar\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_login)\n\n    bindViews()\n  }\n```", "```\n\n  override fun bindViews() {\n    etUsername = findViewById(R.id.et_username)\n    etPassword = findViewById(R.id.et_password)\n    btnLogin = findViewById(R.id.btn_login)\n    btnSignUp = findViewById(R.id.btn_sign_up)\n    progressBar = findViewById(R.id.progress_bar)\n    btnLogin.setOnClickListener(this)\n    btnSignUp.setOnClickListener(this)\n  }\n\n  /**\n    * Shows an appropriate Authentication error message when invoked.\n  */\n  override fun showAuthError() {\n    Toast.makeText(this, \"Invalid username and password combination.\", Toast.LENGTH_LONG).show()\n  }\n\n  override fun onClick(view: View) {\n\n  }\n\n  override fun getContext(): Context {\n    return this\n  }\n}\n```", "```\noverride fun hideProgress() {\n  progressBar.visibility = View.GONE\n}\n\noverride fun showProgress() {\n  progressBar.visibility = View.VISIBLE\n}\n\noverride fun setUsernameError() {\n  etUsername.error = \"Username field cannot be empty\"\n}\n\noverride fun setPasswordError() {\n  etPassword.error = \"Password field cannot be empty\"\n}\n\noverride fun navigateToSignUp() {\n\n}\n\noverride fun navigateToHome() {\n\n}\n```", "```\npackage com.example.messenger.data.local\n\nimport android.content.Context\nimport android.content.SharedPreferences\nimport com.example.messenger.data.vo.UserVO\n\nclass AppPreferences private constructor() {\n\n  private lateinit var preferences: SharedPreferences\n\n  companion object {\n    private val PREFERENCE_FILE_NAME = \"APP_PREFERENCES\"\n\n    fun create(context: Context): AppPreferences {\n      val appPreferences = AppPreferences()\n      appPreferences.preferences = context\n      .getSharedPreferences(PREFERENCE_FILE_NAME, 0)\n        return appPreferences\n      }\n    }\n\n    val accessToken: String?\n      get() = preferences.getString(\"ACCESS_TOKEN\", null)\n\n    fun storeAccessToken(accessToken: String) {\n      preferences.edit().putString(\"ACCESS_TOKEN\", accessToken).apply()\n    }\n\n    val userDetails: UserVO\n    get(): UserVO {\n```", "```\n  return UserVO(\n    preferences.getLong(\"ID\", 0),\n    preferences.getString(\"USERNAME\", null),\n    preferences.getString(\"PHONE_NUMBER\", null),\n    preferences.getString(\"STATUS\", null),\n    preferences.getString(\"CREATED_AT\", null)\n  )\n}\n```", "```\n  fun storeUserDetails(user: UserVO) {\n    val editor: SharedPreferences.Editor = preferences.edit()\n\n    editor.putLong(\"ID\", user.id).apply()\n    editor.putString(\"USERNAME\", user.username).apply()\n    editor.putString(\"PHONE_NUMBER\", user.phoneNumber).apply()\n    editor.putString(\"STATUS\", user.status).apply()\n    editor.putString(\"CREATED_AT\", user.createdAt).apply()\n  }\n\n  fun clear() {\n    val editor: SharedPreferences.Editor = preferences.edit()\n    editor.clear()\n    editor.apply()\n  }\n}\n```", "```\npackage com.example.messenger.data.vo\n\ndata class UserVO(\n  val id: Long,\n  val username: String,\n  val phoneNumber: String,\n  val status: String,\n  val createdAt: String\n)\n```", "```\npackage com.example.messenger.data.vo\n\ndata class MessageVO(\n  val id: Long,\n  val senderId: Long,\n  val recipientId: Long,\n  val conversationId: Long,\n  val body: String,\n  val createdAt: String\n)\n```", "```\npackage com.example.messenger.data.vo\n\ndata class ConversationVO(\n  val conversationId: Long,\n  val secondPartyUsername: String,\n  val messages: ArrayList<MessageVO>\n)\n```", "```\npackage com.example.messenger.data.vo\n\ndata class ConversationListVO(\n  val conversations: List<ConversationVO>\n)\n```", "```\npackage com.example.messenger.data.vo\n\ndata class UserListVO(\n  val users: List<UserVO>\n)\n```", "```\nimplementation 'com.squareup.okhttp3:okhttp:3.9.0'\n```", "```\nfun post(url: String, json: String): String {\n  val mediaType: MediaType = MediaType.parse(\"application/json;\n                                              charset=utf-8\")\n  val client:OkHttpClient = OkHttpClient()\n  val body: RequestBody = RequestBody.create(mediaType, json)\n\n  val request: Request = Request.Builder()\n                                .url(url)\n                                .post(body)\n                                .build()\n\n  val response: Response = client.newCall(request).execute()\n  return response.body().string()\n}\n```", "```\nval fullName: String = \"John Wayne\"\nval response = post(\"http://example.com\", \"{ \\\"full_name\\\": $fullName\")\n\nprintln(response)\n```", "```\npackage com.example.messenger.data.remote.request\n\ndata class LoginRequestObject(\n  val username: String,\n  val password: String\n)\n```", "```\npackage com.example.messenger.data.remote.request\n\ndata class MessageRequestObject(val recipientId: Long, val message: String)\n```", "```\npackage com.example.messenger.data.remote.request\n\ndata class StatusUpdateRequestObject(val status: String)\n```", "```\npackage com.example.messenger.data.remote.request\n\ndata class UserRequestObject(\n  val username: String,\n  val password: String,\n  val phoneNumber: String = \"\"\n)\n```", "```\nimplementation \"com.squareup.retrofit2:retrofit:2.3.0\"\n```", "```\nimplementation \"com.squareup.retrofit2:adapter-rxjava2:2.3.0\"\n```", "```\npackage com.example.messenger.service\n\nimport com.example.messenger.data.remote.request.LoginRequestObject\nimport com.example.messenger.data.remote.request.MessageRequestObject\nimport com.example.messenger.data.remote.request.StatusUpdateRequestObject\nimport com.example.messenger.data.remote.request.UserRequestObject\nimport com.example.messenger.data.vo.*\nimport io.reactivex.Observable\nimport okhttp3.ResponseBody\nimport retrofit2.Retrofit\nimport retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory\nimport retrofit2.converter.gson.GsonConverterFactory\nimport retrofit2.http.*\n\ninterface MessengerApiService {\n\n  @POST(\"login\")\n  @Headers(\"Content-Type: application/json\")\n  fun login(@Body user: LoginRequestObject):\n           Observable<retrofit2.Response<ResponseBody>>\n\n  @POST(\"users/registrations\")\n  fun createUser(@Body user: UserRequestObject): Observable<UserVO>\n\n  @GET(\"users\")\n  fun listUsers(@Header(\"Authorization\") authorization: String):\n               Observable<UserListVO>\n\n  @PUT(\"users\")\n  fun updateUserStatus(\n    @Body request: StatusUpdateRequestObject,\n    @Header(\"Authorization\") authorization: String): Observable<UserVO>\n\n  @GET(\"users/{userId}\")\n  fun showUser(\n    @Path(\"userId\") userId: Long,\n    @Header(\"Authorization\") authorization: String): Observable<UserVO>\n\n  @GET(\"users/details\")\n  fun echoDetails(@Header(\"Authorization\") authorization: String): Observable<UserVO>\n\n  @POST(\"messages\")\n  fun createMessage(\n    @Body messageRequestObject: MessageRequestObject,\n    @Header(\"Authorization\") authorization: String): Observable<MessageVO>\n\n  @GET(\"conversations\")\n  fun listConversations(@Header(\"Authorization\") authorization: String):\n                       Observable<ConversationListVO>\n\n  @GET(\"conversations/{conversationId}\")\n  fun showConversation(\n    @Path(\"conversationId\") conversationId: Long,\n    @Header(\"Authorization\") authorization: String):Observable<ConversationVO>\n}\n```", "```\n@POST(\"login\")\n@Headers(\"Content-Type: application/json\")\nfun login(@Body user: LoginRequestObject): Observable<retrofit2.Response<ResponseBody>>\n```", "```\n@GET(\"users/{userId}\")\nfun showUser(\n  @Path(\"userId\") userId: Long,\n  @Header(\"Authorization\") authorization: String): Observable<UserVO>\n```", "```\npackage com.example.messenger.service\n\nimport com.example.messenger.data.remote.request.LoginRequestObject\nimport com.example.messenger.data.remote.request.MessageRequestObject\nimport com.example.messenger.data.remote.request.StatusUpdateRequestObject\nimport com.example.messenger.data.remote.request.UserRequestObject\nimport com.example.messenger.data.vo.*\nimport io.reactivex.Observable\nimport okhttp3.ResponseBody\nimport retrofit2.Retrofit\nimport retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory\nimport retrofit2.converter.gson.GsonConverterFactory\nimport retrofit2.http.*\n\ninterface MessengerApiService {\n  â€¦\n  â€¦\n\n  companion object Factory {\n    private var service: MessengerApiService? = null\n```", "```\n   fun getInstance(): MessengerApiService {\n      if (service == null) {\n\n        val retrofit = Retrofit.Builder()\n                 .addCallAdapterFactory(RxJava2CallAdapterFactory.create())                   \n                 .addConverterFactory(GsonConverterFactory.create())\n                 .baseUrl(\"{AWS_URL}\") \n                 // replace AWS_URL with URL of AWS EC2 \n                 // instance deployed in the previous chapter\n                 .build()\n\n        service = retrofit.create(MessengerApiService::class.java)\n      }\n\n      return service as MessengerApiService\n    }\n  }\n}\n```", "```\nservice = retrofit.create(MessengerApiService::class.java)\n```", "```\n<uses-permission android:name=\"android.permission.INTERNET\" />\n<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n```", "```\npackage com.example.messenger.data.remote.repository\n\nimport com.example.messenger.data.vo.UserListVO\nimport com.example.messenger.data.vo.UserVO\nimport io.reactivex.Observable\n\ninterface UserRepository {\n\n  fun findById(id: Long): Observable<UserVO>\n  fun all(): Observable<UserListVO>\n  fun echoDetails(): Observable<UserVO>\n}\n```", "```\npackage com.example.messenger.data.remote.repository\n\nimport android.content.Context\nimport com.example.messenger.service.MessengerApiService\nimport com.example.messenger.data.local.AppPreferences\nimport com.example.messenger.data.vo.UserListVO\nimport com.example.messenger.data.vo.UserVO\nimport io.reactivex.Observable\n\nclass UserRepositoryImpl(ctx: Context) : UserRepository {\n\n  private val preferences: AppPreferences = AppPreferences.create(ctx)\n  private val service: MessengerApiService = MessengerApiService.getInstance()\n\n  override fun findById(id: Long): Observable<UserVO> {\n    return service.showUser(id, preferences.accessToken as String)\n  }\n\n  override fun all(): Observable<UserListVO> {\n    return service.listUsers(preferences.accessToken as String)\n  }\n\n  override fun echoDetails(): Observable<UserVO> {\n    return service.echoDetails(preferences.accessToken as String)\n  }\n}\n```", "```\npackage com.example.messenger.data.remote.repository\n\nimport com.example.messenger.data.vo.ConversationListVO\nimport com.example.messenger.data.vo.ConversationVO\nimport io.reactivex.Observable\n\ninterface ConversationRepository {\n  fun findConversationById(id: Long): Observable<ConversationVO>\n\n  fun all(): Observable<ConversationListVO>\n}\n```", "```\npackage com.example.messenger.data.remote.repository\n\nimport android.content.Context\nimport com.example.messenger.service.MessengerApiService\nimport com.example.messenger.data.local.AppPreferences\nimport com.example.messenger.data.vo.ConversationListVO\nimport com.example.messenger.data.vo.ConversationVO\nimport io.reactivex.Observable\n\nclass ConversationRepositoryImpl(ctx: Context) : ConversationRepository {\n\n  private val preferences: AppPreferences = AppPreferences.create(ctx)\n  private val service: MessengerApiService = MessengerApiService\n                                             .getInstance()\n\n```", "```\n  override fun findConversationById(id: Long): Observable<ConversationVO> {\n    return service.showConversation(id, preferences.accessToken as String)\n  }\n```", "```\n  override fun all(): Observable<ConversationListVO> {\n    return service.listConversations(preferences.accessToken as String)\n  }\n}\n```", "```\npackage com.example.messenger.ui.login\n\nimport com.example.messenger.data.local.AppPreferences\nimport com.example.messenger.ui.auth.AuthInteractor\n\ninterface LoginInteractor : AuthInteractor {\n\n  interface OnDetailsRetrievalFinishedListener {\n    fun onDetailsRetrievalSuccess()\n    fun onDetailsRetrievalError()\n  }\n\n  fun login(username: String, password: String, \n      listener: AuthInteractor.onAuthFinishedListener)\n\n  fun retrieveDetails(preferences: AppPreferences,\n      listener: OnDetailsRetrievalFinishedListener)\n}\n```", "```\npackage com.example.messenger.ui.auth\n\nimport com.example.messenger.data.local.AppPreferences\nimport com.example.messenger.data.remote.vo.UserVO\n\ninterface AuthInteractor {\n\n  var userDetails: UserVO\n  var accessToken: String\n  var submittedUsername: String\n  var submittedPassword: String\n\n  interface onAuthFinishedListener {\n    fun onAuthSuccess()\n    fun onAuthError()\n    fun onUsernameError()\n    fun onPasswordError()\n  }\n\n  fun persistAccessToken(preferences: AppPreferences)\n\n  fun persistUserDetails(preferences: AppPreferences)\n\n}\n```", "```\npackage com.example.messenger.ui.login\n\nimport com.example.messenger.data.local.AppPreferences\nimport com.example.messenger.data.remote.request.LoginRequestObject\nimport com.example.messenger.data.vo.UserVO\nimport com.example.messenger.service.MessengerApiService\nimport com.example.messenger.ui.auth.AuthInteractor\nimport io.reactivex.android.schedulers.AndroidSchedulers\nimport io.reactivex.schedulers.Schedulers\n\nclass LoginInteractorImpl : LoginInteractor {\n\n  override lateinit var userDetails: UserVO\n  override lateinit var accessToken: String\n  override lateinit var submittedUsername: String\n  override lateinit var submittedPassword: String\n\n  private val service: MessengerApiService = MessengerApiService\n                                             .getInstance()\n\n  override fun login(username: String, password: String, \n                     listener: AuthInteractor.onAuthFinishedListener) {\n    when {\n\n```", "```\nusername.isBlank() -> listener.onUsernameError() \n```", "```\n password.isBlank() -> listener.onPasswordError()\nelse -> {     \n```", "```\nsubmittedUsername = username\nsubmittedPassword = password\nval requestObject = LoginRequestObject(username, password)   \n```", "```\nservice.login(requestObject)\n       .subscribeOn(Schedulers.io())   \n         // subscribing Observable to Scheduler thread\n       .observeOn(AndroidSchedulers.mainThread())  \n          // setting observation to be done on the main thread\n       .subscribe({ res ->\n         if (res.code() != 403) {\n           accessToken = res.headers()[\"Authorization\"] as String\n           listener.onAuthSuccess()\n         } else {\n\n```", "```\n            listener.onAuthError()\n          }\n        }, { error ->\n          listener.onAuthError()\n          error.printStackTrace()\n        })\n      }\n    }\n  }\n}\n```", "```\n  override fun retrieveDetails(preferences: AppPreferences,\n              listener: LoginInteractor.OnDetailsRetrievalFinishedListener) {\n\n```", "```\n  service.echoDetails(preferences.accessToken as String)\n         .subscribeOn(Schedulers.io())\n         .observeOn(AndroidSchedulers.mainThread())\n         .subscribe({ res ->\n           userDetails = res\n           listener.onDetailsRetrievalSuccess()},\n         { error ->\n           listener.onDetailsRetrievalError()\n           error.printStackTrace()})\n}\n\noverride fun persistAccessToken(preferences: AppPreferences) {\n  preferences.storeAccessToken(accessToken)\n}\n\noverride fun persistUserDetails(preferences: AppPreferences) {\n  preferences.storeUserDetails(userDetails)\n}\n```", "```\npackage com.example.messenger.ui.login\n\ninterface LoginPresenter {\n  fun executeLogin(username: String, password: String)\n}\n```", "```\npackage com.example.messenger.ui.login\n\nimport com.example.messenger.data.local.AppPreferences\nimport com.example.messenger.ui.auth.AuthInteractor\n\nclass LoginPresenterImpl(private val view: LoginView) : \n      LoginPresenter, AuthInteractor.onAuthFinishedListener, \n      LoginInteractor.OnDetailsRetrievalFinishedListener {\n\n  private val interactor: LoginInteractor = LoginInteractorImpl()\n  private val preferences: AppPreferences = AppPreferences.create(view.getContext())\n\n  override fun onPasswordError() {\n    view.hideProgress()\n    view.setPasswordError()\n  }\n\n  override fun onUsernameError() {\n    view.hideProgress()\n    view.setUsernameError()\n  }\n\n  override fun onAuthSuccess() {\n    interactor.persistAccessToken(preferences)\n    interactor.retrieveDetails(preferences, this)\n  }\n\n  override fun onAuthError() {\n    view.showAuthError()\n    view.hideProgress()\n  }\n\n  override fun onDetailsRetrievalSuccess() {\n    interactor.persistUserDetails(preferences)\n    view.hideProgress()\n    view.navigateToHome()\n  }\n\n  override fun onDetailsRetrievalError() {\n    interactor.retrieveDetails(preferences, this)\n  }\n\n  override fun executeLogin(username: String, password: String) {\n    view.showProgress()\n    interactor.login(username, password, this)\n  }\n}\n```", "```\n  private lateinit var progressBar: ProgressBar\n  private lateinit var presenter: LoginPresenter \n  private lateinit var preferences: AppPreferences \n```", "```\noverride fun navigateToSignUp() {\n  startActivity(Intent(this, SignUpActivity::class.java))\n}\n\noverride fun navigateToHome() {\n  finish()\n  startActivity(Intent(this, MainActivity::class.java))\n}\n\noverride fun onClick(view: View) {\n  if (view.id == R.id.btn_login) {\n    presenter.executeLogin(etUsername.text.toString(),\n                           etPassword.text.toString())\n  } else if (view.id == R.id.btn_sign_up) {\n    navigateToSignUp()\n  }\n}\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".ui.signup.SignUpActivity\"\n    android:paddingTop=\"@dimen/default_padding\"\n    android:paddingBottom=\"@dimen/default_padding\"\n    android:paddingStart=\"@dimen/default_padding\"\n    android:paddingEnd=\"@dimen/default_padding\"\n    android:orientation=\"vertical\"\n    android:gravity=\"center_horizontal\">\n    <EditText\n        android:id=\"@+id/et_username\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:hint=\"@string/username\"\n        android:inputType=\"text\"/>\n    <EditText\n        android:id=\"@+id/et_phone\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"@dimen/default_margin\"\n        android:hint=\"@string/phone_number\"\n        android:inputType=\"phone\"/>\n    <EditText\n        android:id=\"@+id/et_password\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"@dimen/default_margin\"\n        android:hint=\"@string/password\"\n        android:inputType=\"textPassword\"/>\n    <Button\n        android:id=\"@+id/btn_sign_up\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"@dimen/default_margin\"\n        android:text=\"@string/sign_up\"/>\n    <ProgressBar\n        android:id=\"@+id/progress_bar\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"@dimen/default_margin\"\n        android:visibility=\"gone\"/>\n</android.support.constraint.ConstraintLayout>\n```", "```\npackage com.example.messenger.ui.signup\n\nimport com.example.messenger.ui.auth.AuthInteractor\n\ninterface SignUpInteractor : AuthInteractor {\n\n  interface OnSignUpFinishedListener {\n    fun onSuccess()\n    fun onUsernameError()\n    fun onPasswordError()\n    fun onPhoneNumberError()\n    fun onError()\n  }\n\n  fun signUp(username: String, phoneNumber: String, password: String, \n             listener: OnSignUpFinishedListener)\n\n  fun getAuthorization(listener: AuthInteractor.onAuthFinishedListener)\n}\n```", "```\npackage com.example.messenger.ui.signup\n\nimport android.text.TextUtils\nimport android.util.Log\nimport com.example.messenger.data.local.AppPreferences\nimport com.example.messenger.data.remote.request.LoginRequestObject\nimport com.example.messenger.data.remote.request.UserRequestObject\nimport com.example.messenger.data.vo.UserVO\nimport com.example.messenger.service.MessengerApiService\nimport com.example.messenger.ui.auth.AuthInteractor\nimport io.reactivex.android.schedulers.AndroidSchedulers\nimport io.reactivex.schedulers.Schedulers\n\nclass SignUpInteractorImpl : SignUpInteractor {\n\n  override lateinit var userDetails: UserVO\n  override lateinit var accessToken: String\n  override lateinit var submittedUsername: String\n  override lateinit var submittedPassword: String\n\n  private val service: MessengerApiService = MessengerApiService\n                                             .getInstance()\n\n  override fun signUp(username: String, \n                      phoneNumber: String, password: String,\n                      listener: SignUpInteractor.OnSignUpFinishedListener){\n    submittedUsername = username\n    submittedPassword = password\n    val userRequestObject = UserRequestObject(username, password,\n                                              phoneNumber)\n\n    when {\n      TextUtils.isEmpty(username) -> listener.onUsernameError()\n      TextUtils.isEmpty(phoneNumber) -> listener.onPhoneNumberError()\n      TextUtils.isEmpty(password) -> listener.onPasswordError()\n      else -> {\n```", "```\n\n        service.createUser(userRequestObject)\n               .subscribeOn(Schedulers.io())\n               .observeOn(AndroidSchedulers.mainThread())\n               .subscribe({ res ->\n          userDetails = res\n          listener.onSuccess()\n        }, { error ->\n          listener.onError()\n          error.printStackTrace()\n        })\n      }\n    }\n  }\n}\n```", "```\n  override fun getAuthorization(listener: \n                  AuthInteractor.onAuthFinishedListener) {\n    val userRequestObject = LoginRequestObject(submittedUsername,\n                                               submittedPassword)\n\n```", "```\n    service.login(userRequestObject)\n           .subscribeOn(Schedulers.io())\n           .observeOn(AndroidSchedulers.mainThread())\n           .subscribe( { res ->\n      accessToken = res.headers()[\"Authorization\"] as String\n\n```", "```\n\n    listener.onAuthSuccess()\n\n  }, { error ->\n    listener.onAuthError()\n    error.printStackTrace()\n  })\n}\n\noverride fun persistAccessToken(preferences: AppPreferences) {\n  preferences.storeAccessToken(accessToken)\n}\n\noverride fun persistUserDetails(preferences: AppPreferences) {\n  preferences.storeUserDetails(userDetails)\n}\n```", "```\npackage com.example.messenger.ui.signup\n\nimport com.example.messenger.data.local.AppPreferences\n\ninterface SignUpPresenter {\n  var preferences: AppPreferences\n\n  fun executeSignUp(username: String, phoneNumber: String, password: String)\n}\n```", "```\npackage com.example.messenger.ui.signup\n\nimport com.example.messenger.data.local.AppPreferences\nimport com.example.messenger.ui.auth.AuthInteractor\n\nclass SignUpPresenterImpl(private val view: SignUpView): SignUpPresenter,\n                          SignUpInteractor.OnSignUpFinishedListener,\n                          AuthInteractor.onAuthFinishedListener {\n\n  private val interactor: SignUpInteractor = SignUpInteractorImpl()\n  override var preferences: AppPreferences = AppPreferences\n                                             .create(view.getContext())\n```", "```\n override fun onSuccess() {\n    interactor.getAuthorization(this)\n  }\n```", "```\n\n  override fun onError() {\n    view.hideProgress()\n    view.showSignUpError()\n  }\n\n  override fun onUsernameError() {\n    view.hideProgress()\n    view.setUsernameError()\n  }\n\n  override fun onPasswordError() {\n    view.hideProgress()\n    view.setPasswordError()\n  }\n\n  override fun onPhoneNumberError() {\n    view.hideProgress()\n    view.setPhoneNumberError()\n  }\n\n  override fun executeSignUp(username: String, phoneNumber: String, \n                             password: String) {\n    view.showProgress()\n    interactor.signUp(username, phoneNumber, password, this)\n  }\n\n  override fun onAuthSuccess() {\n    interactor.persistAccessToken(preferences)\n    interactor.persistUserDetails(preferences)\n    view.hideProgress()\n    view.navigateToHome()\n  }\n\n  override fun onAuthError() {\n    view.hideProgress()\n    view.showAuthError()\n  }\n}\n```", "```\npackage com.example.messenger.ui.signup\n\nimport com.example.messenger.ui.auth.AuthView\nimport com.example.messenger.ui.base.BaseView\n\ninterface SignUpView : BaseView, AuthView {\n\n  fun showProgress()\n  fun showSignUpError()\n  fun hideProgress()\n  fun setUsernameError()\n  fun setPhoneNumberError()\n  fun setPasswordError()\n  fun navigateToHome()\n}\n```", "```\npackage com.example.messenger.ui.signup\n\nimport android.content.Context\nimport android.content.Intent\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\nimport android.view.View\nimport android.widget.Button\nimport android.widget.EditText\nimport android.widget.ProgressBar\nimport android.widget.Toast\nimport com.example.messenger.R\nimport com.example.messenger.data.local.AppPreferences\nimport com.example.messenger.ui.main.MainActivity\n\nclass SignUpActivity : AppCompatActivity(), SignUpView, View.OnClickListener {\n\n  private lateinit var etUsername: EditText\n  private lateinit var etPhoneNumber: EditText\n  private lateinit var etPassword: EditText\n  private lateinit var btnSignUp: Button\n  private lateinit var progressBar: ProgressBar\n  private lateinit var presenter: SignUpPresenter\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_sign_up)\n    presenter = SignUpPresenterImpl(this)\n    presenter.preferences = AppPreferences.create(this)\n    bindViews()\n  }\n\n  override fun bindViews() {\n    etUsername = findViewById(R.id.et_username)\n    etPhoneNumber = findViewById(R.id.et_phone)\n    etPassword = findViewById(R.id.et_password)\n    btnSignUp = findViewById(R.id.btn_sign_up)\n    progressBar = findViewById(R.id.progress_bar)\n    btnSignUp.setOnClickListener(this)\n  }\n\n  override fun showProgress() {\n    progressBar.visibility = View.VISIBLE\n  }\n\n  override fun hideProgress() {\n    progressBar.visibility = View.GONE\n  }\n\n  override fun navigateToHome() {\n    finish()\n    startActivity(Intent(this, MainActivity::class.java))\n  }\n\n  override fun onClick(view: View) {\n    if (view.id == R.id.btn_sign_up) {\n      presenter.executeSignUp(etUsername.text.toString(),\n                              etPhoneNumber.text.toString(),\n                              etPassword.text.toString())\n    }\n  }\n}\n```", "```\noverride fun setUsernameError() {\n  etUsername.error = \"Username field cannot be empty\"\n}\n\noverride fun setPhoneNumberError() {\n  etPhoneNumber.error = \"Phone number field cannot be empty\"\n}\n\noverride fun setPasswordError() {\n  etPassword.error = \"Password field cannot be empty\"\n}\n\noverride fun showAuthError() {\n  Toast.makeText(this, \"An authorization error occurred.\n                        Please try again later.\",\n                 Toast.LENGTH_LONG).show()\n}\n\noverride fun showSignUpError() {\n  Toast.makeText(this, \"An unexpected error occurred.\n                        Please try again later.\",\n                 Toast.LENGTH_LONG).show()\n}\n\noverride fun getContext(): Context {\n  return this\n}\n```"]