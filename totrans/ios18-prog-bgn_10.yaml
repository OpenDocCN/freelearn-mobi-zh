- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Swift Concurrency
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Swift 并发
- en: Apple introduced **Swift concurrency**, which adds support for structured asynchronous
    and parallel programming to Swift 5.5, during WWDC21\. It allows you to write
    concurrent code, which is more readable and easier to understand. During WWDC24,
    Apple introduced **Swift 6**, which makes concurrency programming easier by diagnosing
    **data races** at compile time.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在 WWDC21 上，Apple 引入了 **Swift 并发**，它为 Swift 5.5 添加了对结构化异步和并行编程的支持。它允许您编写更易读、更易于理解的并发代码。在
    WWDC24 上，Apple 引入了 **Swift 6**，它通过在编译时诊断 **数据竞争** 来简化并发编程。
- en: At the present time, it is not recommended to turn strict concurrency on for
    large existing projects, as it is likely to generate multiple errors and warnings.
    However, as this is Apple’s direction going forward, you will be turning it on
    for the project in this chapter and in *Part 3* of this book so you may learn
    and gain experience with it.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，不建议为大型现有项目启用严格并发，因为它可能会生成多个错误和警告。然而，鉴于这是 Apple 的未来方向，您将在本章和本书的 *第 3 部分* 中为项目启用它，以便您可以学习和获得相关经验。
- en: In this chapter, you will learn the basic concepts of Swift concurrency. Next,
    you will examine an app without concurrency and explore its issues. After that,
    you will use `async/await` to implement concurrency in the app. Finally, you’ll
    make your app more efficient by using `async-let`.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习 Swift 并发的基本概念。接下来，您将检查一个没有并发的应用程序，并探讨其问题。然后，您将使用 `async/await` 在应用程序中实现并发。最后，您将通过使用
    `async-let` 使您的应用程序更加高效。
- en: By the end of this chapter, you’ll have learned the basics of how Swift concurrency
    works and how to update your own apps to use it.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将了解 Swift 并发的工作原理以及如何更新您自己的应用程序以使用它。
- en: 'The following topics will be covered:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 以下内容将涵盖：
- en: Understanding Swift concurrency
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Swift 并发
- en: Examining an app without concurrency
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查没有并发功能的 app
- en: Updating the app using `async/await`
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `async/await` 更新应用程序
- en: Improving efficiency using `async-let`
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `async-let` 提高效率
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: We will use an example app, *BreakfastMaker*, to understand the concepts of
    Swift concurrency.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个示例应用程序，*BreakfastMaker*，来理解 Swift 并发的概念。
- en: 'The completed Xcode project for this chapter is in the `Chapter09` folder of
    the code bundle for this book, which can be downloaded here:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章完成的 Xcode 项目位于本书代码包的 `Chapter09` 文件夹中，您可以通过以下链接下载：
- en: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际运行情况：
- en: '[https://youtu.be/uEckcWHFeiE](https://youtu.be/uEckcWHFeiE%0D)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://youtu.be/uEckcWHFeiE](https://youtu.be/uEckcWHFeiE%0D)'
- en: Let’s start by learning about Swift concurrency in the next section.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从学习下一节中的 Swift 并发开始。
- en: Understanding Swift concurrency
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Swift 并发
- en: In Swift 5.5, Apple added support for writing **asynchronous** and **parallel**
    code in a structured way.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Swift 5.5 中，Apple 添加了对以结构化方式编写 **异步** 和 **并行** 代码的支持。
- en: Asynchronous code allows your app to suspend and resume code. Parallel code
    allows your app to run multiple pieces of code simultaneously. This allows your
    app to do things like update the user interface while still performing operations
    like downloading data from the internet.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 异步代码允许您的应用程序暂停和恢复代码。并行代码允许您的应用程序同时运行多个代码片段。这使得您的应用程序能够在执行如从互联网下载数据等操作的同时更新用户界面。
- en: You can find links to all of Apple’s Swift concurrency videos during WWDC21
    at [https://developer.apple.com/news/?id=2o3euotz](https://developer.apple.com/news/?id=2o3euotz).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 WWDC21 期间找到所有 Apple 的 Swift 并发视频链接，请访问 [https://developer.apple.com/news/?id=2o3euotz](https://developer.apple.com/news/?id=2o3euotz)。
- en: You can read Apple’s Swift concurrency documentation at [https://developer.apple.com/news/?id=2o3euotz](https://developer.apple.com/news/?id=2o3euotz).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://developer.apple.com/news/?id=2o3euotz](https://developer.apple.com/news/?id=2o3euotz)
    阅读Apple的 Swift 并发文档。
- en: During WWDC24, Apple released Swift 6\. With the Swift 6 language mode, the
    compiler can now guarantee that concurrent programs are free of data races. This
    means that code from one part of your app can no longer access the same area of
    memory that is being modified by code from another part of your app. However,
    when you create a new Xcode project, it defaults to the Swift 5 language mode,
    and you have to turn on the Swift 6 language mode to enable this feature.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在 WWDC24 上，Apple 发布了 Swift 6。使用 Swift 6 语言模式，编译器现在可以保证并发程序没有数据竞争。这意味着你的应用程序的一部分代码不能再访问另一部分代码正在修改的同一内存区域。然而，当你创建一个新的
    Xcode 项目时，它默认使用 Swift 5 语言模式，你必须打开 Swift 6 语言模式才能启用此功能。
- en: 'To view Apple’s WWDC24 video on migrating your app to Swift 6, click this link:
    [https://developer.apple.com/videos/play/wwdc2024/10169/](https://developer.apple.com/videos/play/wwdc2024/10169/%0D)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看 Apple 的 WWDC24 视频关于将你的应用程序迁移到 Swift 6，请点击此链接：[https://developer.apple.com/videos/play/wwdc2024/10169/](https://developer.apple.com/videos/play/wwdc2024/10169/%0D)
- en: 'To view Apple’s documentation on migrating your app to Swift 6, click this
    link: [https://www.swift.org/migration/documentation/migrationguide/](https://www.swift.org/migration/documentation/migrationguide/)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看 Apple 关于将你的应用程序迁移到 Swift 6 的文档，请点击此链接：[https://www.swift.org/migration/documentation/migrationguide/](https://www.swift.org/migration/documentation/migrationguide/)
- en: 'To give you an idea of how Swift concurrency works, imagine that you are making
    soft-boiled eggs and toast for breakfast. Here is one way of doing it:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让你了解 Swift 并发的工作方式，想象一下你正在为早餐做水煮蛋和烤面包。这里有一种做法：
- en: Put two slices of bread into the toaster.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两片面包放入烤面包机中。
- en: Wait two minutes until the bread is toasted.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待两分钟，直到面包烤熟。
- en: Put two eggs in a pan containing boiling water, and cover them.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在平底锅中放入两个鸡蛋，并盖上锅盖。
- en: Wait seven minutes until the eggs are cooked.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待七分钟，直到鸡蛋煮熟。
- en: Plate and serve your breakfast.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上菜并享用早餐。
- en: 'This takes nine minutes in total. Now, think about this sequence of events.
    Do you spend that time just staring at the toaster and the pan? You’ll probably
    be using your phone while the bread is in the toaster and the eggs are in the
    pan. In other words, you can do other things while the toast and eggs are being
    prepared. So, the sequence of events would be more accurately described as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 总共需要九分钟。现在，思考一下这个事件序列。你只是盯着烤面包机和平底锅发呆吗？你可能会在面包在烤面包机中，鸡蛋在平底锅中时使用手机。换句话说，你可以在准备烤面包和鸡蛋的同时做其他事情。因此，事件序列更准确地描述如下：
- en: Put two slices of bread into the toaster.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两片面包放入烤面包机中。
- en: Use your phone for two minutes until the bread is toasted.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用你的手机计时两分钟，直到面包烤熟。
- en: Put two eggs in a pan containing boiling water, and cover them.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个装有沸水的大平底锅里放两个鸡蛋，并盖上锅盖。
- en: Use your phone for seven minutes until the eggs are cooked.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用你的手机计时七分钟，直到鸡蛋煮熟。
- en: Plate and serve your breakfast.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上菜并享用早餐。
- en: Here, you can see that your interaction with the toaster and pan can be suspended
    and then resumed, which means these operations are asynchronous. The operation
    still takes nine minutes, but you were able to do other things during that time.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到你与烤面包机和平底锅的交互可以被暂停，然后恢复，这意味着这些操作是异步的。操作仍然需要九分钟，但你在这段时间里可以做其他事情。
- en: 'There is another factor to consider. You don’t need to wait for the bread to
    finish toasting before you put the eggs in the pan. This means you could modify
    the sequence of steps as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个需要考虑的因素。你不需要等到面包烤熟后再把鸡蛋放入平底锅。这意味着你可以修改步骤的顺序如下：
- en: Put two slices of bread into the toaster.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两片面包放入烤面包机中。
- en: While the bread is toasting, put two eggs in a pan containing boiling water,
    and cover them.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当面包正在烤制时，将两个鸡蛋放入一个装有沸水的大平底锅中，并盖上锅盖。
- en: Use your phone for seven minutes. During that time, the bread will be toasted
    and the eggs will be cooked.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用你的手机计时七分钟。在这段时间里，面包会烤熟，鸡蛋会煮熟。
- en: Plate and serve your breakfast.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上菜并享用早餐。
- en: Toasting the bread and boiling the eggs are now carried out in parallel, which
    saves you two minutes. Great! However, do note that you have more things to keep
    track of.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 烤面包和煮鸡蛋现在是并行进行的，这可以为你节省两分钟。太棒了！然而，请注意，你还有更多的事情需要关注。
- en: Now that you understand the concepts of asynchronous and parallel operations,
    let’s study the issues that an app without concurrency has in the next section.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经理解了异步和并行操作的概念，让我们在下一节研究没有并发的应用程序存在的问题。
- en: Examining an app without concurrency
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查没有并发的应用程序
- en: 'You’ve seen how asynchronous and parallel operations can help you prepare breakfast
    faster and allow you to use your phone while you’re doing it. Now, let’s look
    at a sample app that simulates the process of preparing breakfast. Initially,
    this app does not have concurrency implemented so you can see how that affects
    the app. Follow these steps:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看到了异步和并行操作如何帮助你更快地准备早餐，并允许你在做这件事的同时使用手机。现在，让我们看看一个模拟准备早餐过程的示例应用。最初，这个应用没有实现并发，这样你可以看到它对应用的影响。按照以下步骤操作：
- en: 'If you have not already done so, download the `Chapter09` folder of the code
    bundle for this book at this link: [https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Eighth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Eighth-Edition).'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你还没有这样做，请在此链接下载本书的代码包中的`Chapter09`文件夹：[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Eighth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Eighth-Edition)。
- en: Open the `Chapter09` folder, and you’ll see two folders, `BreakfastMaker-start`
    and `BreakfastMaker-complete`. The first folder contains the app that you will
    be modifying in this chapter, and the second contains the completed app.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Chapter09`文件夹，你会看到两个文件夹，`BreakfastMaker-start`和`BreakfastMaker-complete`。第一个文件夹包含你将在本章中修改的应用，第二个文件夹包含完成的应用。
- en: 'Open the `BreakfastMaker-start` folder and then the `BreakfastMaker` Xcode
    project. Click on the **Main** storyboard file in the Project navigator. You should
    see four labels and a button in the **View Controller Scene**, as shown here:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`BreakfastMaker-start`文件夹，然后打开`BreakfastMaker` Xcode项目。在项目导航器中点击**Main**故事板文件。你应该在**视图控制器场景**中看到四个标签和一个按钮，如图所示：
- en: '![](img/B31371_09_01.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_09_01.png)'
- en: 'Figure 9.1: Main storyboard file showing the View Controller Scene'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1：主故事板文件显示视图控制器场景
- en: The app will display a screen that shows the status of the toast and eggs, and
    the time taken to plate and serve your breakfast. The app will also display a
    button that you can use to test the responsiveness of the user interface.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 应用将显示一个屏幕，显示吐司和鸡蛋的状态，以及上菜和上桌所需的时间。应用还将显示一个按钮，你可以使用它来测试用户界面的响应性。
- en: Don’t worry if some of these concepts are not familiar to you. You will learn
    how to build user interfaces using storyboards for your apps in the next chapter,
    *Chapter 10*, *Setting Up the User Interface*.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对其中一些概念不熟悉，不要担心。你将在下一章，即*第10章*，*设置用户界面*中学习如何使用故事板为你的应用构建用户界面。
- en: 'Click the **ViewController** file in the Project navigator. You should see
    the following code in the Editor area:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击**ViewController**文件。你应该在编辑器区域看到以下代码：
- en: '[PRE0]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As you can see, this code simulates the process of making breakfast that was
    described in the previous section. Let’s break it down:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这段代码模拟了之前章节中描述的制作早餐的过程。让我们来分解它：
- en: '[PRE1]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: These outlets are linked to four labels in the `Main` storyboard file. When
    you run the app, these labels will display the status of the toast and eggs, plating,
    and serving, as well as the time taken to complete the process.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这些输出连接到`Main`故事板文件中的四个标签。当你运行应用时，这些标签将显示吐司和鸡蛋的状态，上菜和上桌，以及完成过程所需的时间。
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This statement method is called when the view controller’s view appears onscreen.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法在视图控制器的视图出现在屏幕上时被调用。
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This statement sets startTime to the current time, so the app can later calculate
    how long it takes to make the meal.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语句将startTime设置为当前时间，这样应用就可以稍后计算制作餐点所需的时间。
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This statement makes toastLabel display the text Making toast....
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语句使得toastLabel显示文本“制作吐司....”
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This statement calls the makeToast() method, which waits for two seconds to
    simulate the time taken to make toast, and then returns the text Toast done, which
    will be displayed by toastLabel.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语句调用了makeToast()方法，该方法等待两秒钟来模拟制作吐司所需的时间，然后返回文本“吐司完成”，该文本将由toastLabel显示。
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This statement makes eggLabel display the text Boiling eggs....
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语句使得eggLabel显示文本“正在煮鸡蛋....”
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This statement calls the boilEggs() method, which waits for seven seconds to
    simulate the time taken to boil two eggs, and then returns the text Eggs done,
    which will be displayed by eggLabel.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语句调用了boilEggs()方法，该方法等待七秒钟来模拟煮两个鸡蛋所需的时间，然后返回文本“鸡蛋完成”，该文本将由eggLabel显示。
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This statement calls the plateAndServe() method, which returns the text Plating
    and serving done, which will be displayed by `plateAndServeLabel`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语句调用了plateAndServe()方法，该方法返回文本“上菜和上桌完成”，该文本将由`plateAndServeLabel`显示。
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This statement sets `endTime` to the current time.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此语句将`endTime`设置为当前时间。
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This statement calculates the elapsed time (approximately eight seconds), which
    will be displayed by elapsedTim`eLabel`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 该语句计算经过的时间（大约八秒），这将通过`elapsedTimeLabel`显示。
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This method displays **Button tapped** in the Debug area each time the button
    onscreen is tapped.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法每次屏幕上的按钮被点击时，在调试区域显示**按钮点击**。
- en: 'Build and run the app, and tap the button the moment the user interface appears:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行应用，并在用户界面出现时立即点击按钮：
- en: '![](img/B31371_09_02.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_09_02.png)'
- en: 'Figure 9.2: iOS Simulator running the BreakfastMaker app, showing the button
    to be tapped'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2：iOS模拟器运行BreakfastMaker应用，显示要点击的按钮
- en: 'You should notice the following issues:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该注意到以下问题：
- en: Tapping the button has no effect initially, and you’ll only see **Button tapped**
    in the Debug area after approximately nine seconds.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始时点击按钮没有效果，您只能在约九秒后在调试区域看到**按钮点击**。
- en: '**Making toast...** and **Boiling eggs...** are never displayed, and **Toast
    done** and **Eggs done** only appear after approximately nine seconds.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**制作吐司...** 和 **煮鸡蛋...** 从不显示，而**吐司完成**和**鸡蛋完成**仅在约九秒后出现。'
- en: The reason why this happens is that your app’s code did not update the user
    interface while the `makeToast()` and `boilEggs()` methods were running. Your
    app did register the button taps but was only able to process them and update
    the labels after `makeToast()` and `boilEggs()` had completed their execution.
    These issues do not offer a good user experience with your app.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况发生的原因是，当`makeToast()`和`boilEggs()`方法运行时，您的应用代码没有更新用户界面。您的应用确实注册了按钮点击，但在`makeToast()`和`boilEggs()`完成执行后，才能够处理这些点击并更新标签。这些问题不会为您的应用提供良好的用户体验。
- en: You have now experienced the issues presented by an app that does not have concurrency
    implemented. In the next section, you’ll modify the app using `async/await` so
    that it can update the user interface while the `makeToast()` and `boilEggs()`
    methods are running.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经体验了没有实现并发的应用所呈现的问题。在下一节中，您将使用`async/await`修改应用，使其可以在`makeToast()`和`boilEggs()`方法运行时更新用户界面。
- en: Updating the app using async/await
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用async/await更新应用
- en: As you saw previously, the app is unresponsive when the `makeToast()` and `poachEgg()`
    methods are running. To resolve this, you will use async/await in the app.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如您之前所见，当`makeToast()`和`poachEgg()`方法运行时，应用无响应。为了解决这个问题，您将在应用中使用async/await。
- en: 'Writing the `async` keyword in the method declaration indicates that the method
    is asynchronous. This is what it looks like:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在方法声明中写入`async`关键字表示该方法是非同步的。这看起来是这样的：
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Writing the `await` keyword in front of a method call marks a point where execution
    may be suspended, thus allowing other operations to run. This is what it looks
    like:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在方法调用前写入`await`关键字标记了一个可能挂起执行的点，从而允许其他操作运行。这看起来是这样的：
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You can watch Apple’s WWDC21 video discussing async/await at [https://developer.apple.com/videos/play/wwdc2021/10132/](https://developer.apple.com/videos/play/wwdc2021/10132/).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以观看Apple的WWDC21视频，讨论async/await，链接为[https://developer.apple.com/videos/play/wwdc2021/10132/](https://developer.apple.com/videos/play/wwdc2021/10132/)。
- en: 'You will modify your app to use async/await. This will enable it to suspend
    the `makeToast()` and `poachEgg()` methods to process button taps, update the
    user interface, and then resume execution of both methods afterward. You will
    also enable strict concurrency checking for your app by turning on the Swift 6
    language mode. Follow these steps:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您将修改您的应用以使用async/await。这将使其能够挂起`makeToast()`和`poachEgg()`方法以处理按钮点击，更新用户界面，然后之后继续执行这两个方法。您还将通过开启Swift
    6语言模式来为您的应用启用严格的并发检查。请按照以下步骤操作：
- en: 'In the Project navigator, click the **BreakfastMaker** icon at the top and
    then the **BreakfastMaker** target. In the **Build Settings** tab, change **Swift
    Language Version** to **Swift 6**:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中，点击顶部的**BreakfastMaker**图标，然后点击**BreakfastMaker**目标。在**构建设置**选项卡中，将**Swift语言版本**更改为**Swift
    6**：
- en: '![](img/B31371_09_03.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_09_03.png)'
- en: 'Figure 9.3: BreakfastMaker project with Swift Language Version set to Swift
    6'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.3：BreakfastMaker项目，Swift语言版本设置为Swift 6
- en: This enables strict concurrency checking for your app.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得对您的应用进行严格的并发检查成为可能。
- en: 'Click the **ViewController** file in the Project navigator. Modify the `makeToast()`
    and `boilEggs()` methods, as shown here, to make the code in their bodies asynchronous:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击**ViewController**文件。修改`makeToast()`和`boilEggs()`方法，如下所示，以使它们体内的代码异步：
- en: '[PRE14]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`Task` represents a unit of asynchronous work. It has a static method, `sleep(for:)`,
    which pauses execution for a specified duration, measured in seconds. Since this
    method is a throwing method, you’ll use the `try?` keyword to call it without
    having to implement a `do-catch` block. The `await` keyword indicates that this
    code can be suspended to allow other code to run.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`Task`代表异步工作的一个单元。它有一个静态方法`sleep(for:)`，该方法可以暂停执行指定的时间长度，以秒为单位。由于这个方法是一个抛出异常的方法，你将使用`try?`关键字来调用它，而不需要实现`do-catch`块。`await`关键字表示此代码可以被挂起，以允许其他代码运行。'
- en: Using `try?` will result in any errors being suppressed or ignored. This is
    acceptable in this case because sleeping for 2 or 7 seconds is unlikely to generate
    an error. This may not be acceptable in other situations, where a `do-catch` block
    is a better solution. You may wish to reread *Chapter 8*, *Protocols, Extensions,
    and Error Handling* for information on how to implement a `do-catch` block.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`try?`将导致任何错误被抑制或忽略。在这种情况下这是可以接受的，因为睡眠2秒或7秒不太可能产生错误。在其他情况下，这可能不可接受，在这些情况下，`do-catch`块是一个更好的解决方案。你可能需要重新阅读*第8章*，*协议、扩展和错误处理*，以获取有关如何实现`do-catch`块的信息。
- en: 'Errors will appear for both `makeToast()` and `boilEggs()`. Click either error
    icon to display the error message:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`makeToast()`和`boilEggs()`都会出现错误。点击任一错误图标以显示错误信息：'
- en: '![](img/B31371_09_04.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_09_04.png)'
- en: 'Figure 9.4: Error message when the error icon is clicked'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4：点击错误图标时的错误信息
- en: The error is displayed because you’re calling an asynchronous method inside
    a method that does not support concurrency. You will need to add the `async` keyword
    to the method declaration to indicate that it is asynchronous.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 错误显示出来是因为你在不支持并发的方法中调用异步方法。你需要将`async`关键字添加到方法声明中，以表明它是异步的。
- en: For each method, click the **Fix** button to add the `async` keyword to the
    method declaration.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个方法，点击**修复**按钮以将`async`关键字添加到方法声明中。
- en: 'Verify that your code looks like this after you’re done:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认你完成后的代码如下所示：
- en: '[PRE15]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The errors in the `makeToast()` and `poachEgg()` methods should be gone, but
    new errors will appear in the `viewDidAppear()` method. Click one of the error
    icons to see the error message, which will be the same as the message you saw
    in *step 2*. This is because you’re calling an asynchronous method inside a method
    that does not support concurrency.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`makeToast()`和`poachEgg()`方法中的错误应该已经消失，但在`viewDidAppear()`方法中会出现新的错误。点击其中一个错误图标以查看错误信息，该信息将与你在*步骤2*中看到的相同。这是因为你在不支持并发的方法中调用异步方法。'
- en: Click the **Fix** button, and more errors will appear.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**修复**按钮，将出现更多错误。
- en: 'Ignore the error in the method declaration for now, and click the one next
    to the `makeToast()` method call to see the error message:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目前忽略方法声明中的错误，并点击`makeToast()`方法调用旁边的错误以查看错误信息：
- en: '![](img/B31371_09_05.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_09_05.png)'
- en: 'Figure 9.5: Error message when the error icon is clicked'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.5：点击错误图标时的错误信息
- en: This error message is displayed because you did not use `await` when calling
    an asynchronous function.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这个错误信息显示出来是因为你在调用异步函数时没有使用`await`。
- en: Click the **Fix** button to insert the `await` keyword before the method call.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**修复**按钮以在方法调用之前插入`await`关键字。
- en: Repeat *step 7* and *step 8* for the error next to the `boilEggs()` method call.
    The `await` keyword will be inserted for the `boilEggs()` method call as well.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`boilEggs()`方法调用旁边的错误，重复*步骤7*和*步骤8*。`await`关键字也将被插入到`boilEggs()`方法调用中。
- en: 'Click the error icon in the `viewDidAppear()` method declaration to see the
    error message:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`viewDidAppear()`方法声明中的错误图标以查看错误信息：
- en: '![](img/B31371_09_06.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_09_06.png)'
- en: 'Figure 9.6: Error with the error icon highlighted'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.6：错误图标被突出显示的错误
- en: This error is displayed because you can’t use the `async` keyword to make the
    `viewDidAppear()` method asynchronous, as this capability is not present in the
    superclass.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这个错误显示出来是因为你不能使用`async`关键字使`viewDidAppear()`方法异步，因为这个功能在超类中不存在。
- en: 'To resolve this issue, you’ll remove the `async` keyword and enclose all the
    code after `super.viewDidAppear()` in a `Task` block, which will allow it to execute
    asynchronously in a synchronous method. Modify your code as follows:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要解决这个问题，你需要移除`async`关键字，并将`super.viewDidAppear()`之后的全部代码放在一个`Task`块中，这将允许它在同步方法中异步执行。按照以下方式修改你的代码：
- en: '[PRE16]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Build and run the app, and tap the button as soon as you see the user interface.
    Note that **Button tapped** now appears immediately in the Debug area, and the
    labels update as they should. This is because the app is now able to suspend the
    `makeToast()` and `boilEggs()` methods to respond to taps, update the user interface,
    and resume method execution later. Awesome!
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行应用，一旦看到用户界面就立即点击按钮。注意，**按钮已点击**现在会立即显示在调试区域，标签也会相应更新。这是因为应用现在能够挂起`makeToast()`和`boilEggs()`方法以响应用户点击，更新用户界面，并在稍后恢复方法执行。太棒了！
- en: 'However, if you look at the elapsed time, you’ll see that the app takes slightly
    longer to prepare breakfast than it did before:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你查看经过的时间，你会发现应用准备早餐的时间比之前稍微长了一些：
- en: '![](img/B31371_09_07.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_09_07.png)'
- en: 'Figure 9.7: iOS Simulator running the BreakfastMaker app, showing the elapsed
    time'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.7：iOS模拟器运行BreakfastMaker应用，显示经过的时间
- en: This is partly due to the additional processing required for the async/await
    suspending and resuming methods, but there is another factor involved. Even though
    the `makeToast()` and `boilEggs()` methods are now asynchronous, the `boilEggs()`
    method only starts execution after the `makeToast()` method has finished execution.
    In the next section, you’ll see how you can use `async-let` to run the `makeToast()`
    and `boilEggs()` methods in parallel.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分原因是异步/等待挂起和恢复方法所需的额外处理，但还有一个因素在起作用。尽管`makeToast()`和`boilEggs()`方法现在是异步的，但`boilEggs()`方法只有在`makeToast()`方法执行完毕后才开始执行。在下一节中，你将看到如何使用`async-let`来并行运行`makeToast()`和`boilEggs()`方法。
- en: Improving efficiency using async-let
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用async-let提高效率
- en: Even though your app is now responsive to button taps and can update the user
    interface while the `makeToast()` and `boilEggs()` methods are running, both methods
    still execute sequentially. The solution here is to use `async-let`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管你的应用现在对按钮点击有响应，并且可以在`makeToast()`和`boilEggs()`方法运行时更新用户界面，但这两个方法仍然按顺序执行。这里的解决方案是使用`async-let`。
- en: 'Writing `async` in front of a `let` statement when you define a constant, and
    then writing `await` when you access the constant, allows the parallel execution
    of asynchronous methods, as shown here:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义常量时在`let`语句前写上`async`，然后在访问常量时写上`await`，允许异步方法的并行执行，如下所示：
- en: '[PRE17]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In this example, `methodName1()` and `methodName2()` will run in parallel.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`methodName1()`和`methodName2()`将并行运行。
- en: 'You will modify your app to use `async-let` to enable the `makeToast()` and
    `poachEgg()` methods to run in parallel. In the `ViewController` file, modify
    the code in the `Task` block as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 你将修改你的应用以使用`async-let`来使`makeToast()`和`poachEgg()`方法并行运行。在`ViewController`文件中，按照以下方式修改`Task`块中的代码：
- en: '[PRE18]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Build and run the app. You’ll see that the elapsed time is now less than it
    was before:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行应用。你会发现经过的时间现在比之前短：
- en: '![](img/B31371_09_08.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_09_08.png)'
- en: 'Figure 9.8: iOS Simulator running the BreakfastMaker app, showing the elapsed
    time'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.8：iOS模拟器运行BreakfastMaker应用，显示经过的时间
- en: This is because using `async-let` allows both the `makeToast()` and `poachEgg()`
    methods to run in parallel, and the `poachEgg()` method no longer waits for the
    `makeToast()` method to complete before starting execution. Cool!
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为使用`async-let`允许`makeToast()`和`poachEgg()`方法并行运行，并且`poachEgg()`方法不再等待`makeToast()`方法完成后再开始执行。酷！
- en: There is still lots more to learn about Swift concurrency, such as structured
    concurrency and actors, but that is beyond the scope of this chapter. You can
    learn more about structured concurrency at [https://developer.apple.com/videos/play/wwdc2021/10134/](https://developer.apple.com/videos/play/wwdc2021/10134/),
    and you can learn more about actors at [https://developer.apple.com/videos/play/wwdc2021/10133/](https://developer.apple.com/videos/play/wwdc2021/10133/).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Swift并发还有很多东西要学习，比如结构化并发和actors，但这超出了本章的范围。你可以在[https://developer.apple.com/videos/play/wwdc2021/10134/](https://developer.apple.com/videos/play/wwdc2021/10134/)了解更多关于结构化并发的信息，你可以在[https://developer.apple.com/videos/play/wwdc2021/10133/](https://developer.apple.com/videos/play/wwdc2021/10133/)了解更多关于actors的信息。
- en: You have successfully implemented asynchronous code in your app. Fantastic!
    There are still a lot of things to learn about Swift concurrency, such as structured
    concurrency and actors, but that is beyond the scope of this chapter.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经在你的应用中成功实现了异步代码。太棒了！关于Swift并发还有很多东西要学习，比如结构化并发和actors，但这超出了本章的范围。
- en: Give yourself a pat on the back; you have completed the first part of this book!
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 给自己鼓掌吧；你已经完成了这本书的第一部分！
- en: Summary
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about Swift concurrency and how to implement it
    in the *BreakfastMaker* app.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了Swift并发及其在*BreakfastMaker*应用程序中的实现方法。
- en: You started by learning the basic concepts of Swift concurrency. Then, you examined
    an app without concurrency and explored its issues. After that, you turned on
    strict concurrency checking and implemented concurrency in the app, using `async`/`await`.
    Finally, you made your app more efficient by using `async let`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 您从学习Swift并发的基本概念开始。然后，您检查了一个没有并发的应用程序，并探讨了它的问题。之后，您开启了严格的并发检查，并在应用程序中实现了并发，使用了`async`/`await`。最后，您通过使用`async
    let`使您的应用程序更加高效。
- en: You now understand the basics of Swift concurrency and will be able to use `async`/`await`
    and `async-let` in your own apps.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经了解了Swift并发的基础知识，并将能够在自己的应用程序中使用`async`/`await`和`async-let`。
- en: In the next chapter, you will start writing your first iOS application by creating
    the screens for it, using storyboards, which allow you to rapidly prototype an
    application without having to type a lot of code.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将通过创建它的屏幕，使用故事板来编写您的第一个iOS应用程序，这允许您在不输入大量代码的情况下快速原型化应用程序。
- en: Leave a review!
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 留下您的评价！
- en: Thank you for purchasing this book from Packt Publishing—we hope you enjoy it!
    Your feedback is invaluable and helps us improve and grow. Once you’ve completed
    reading it, please take a moment to leave an Amazon review; it will only take
    a minute, but it makes a big difference for readers like you. Scan the QR code
    below or visit the link to receive a free ebook of your choice.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您从Packt Publishing购买此书——我们希望您喜欢它！您的反馈对我们来说无价，它帮助我们改进和成长。一旦您阅读完毕，请花一点时间在亚马逊上留下评价；这只需一分钟，但对像您这样的读者来说意义重大。扫描下面的二维码或访问链接，以获得您选择的免费电子书。
- en: '[https://packt.link/NzOWQ](https://packt.link/NzOWQ%0D)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/NzOWQ](https://packt.link/NzOWQ%0D)'
- en: '[![](img/QR_Code2370024260177460609.png)](https://packt.link/NzOWQ%0D)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/QR_Code2370024260177460609.png)](https://packt.link/NzOWQ%0D)'
