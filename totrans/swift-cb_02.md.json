["```swift\nimport Foundation \n```", "```swift\nfunc normalizedStarRating(forRating rating: Float, \n   ofPossibleTotal total: Float) -> (Int, String) {\n\n} \n```", "```swift\nlet fraction = rating / total \nlet ratingOutOf5 = fraction * 5 \nlet roundedRating = round(ratingOutOf5) // Rounds to the nearest \n  // integer.\n```", "```swift\nlet numberOfStars = Int(roundedRating) // Turns a Float into an Int \nlet ratingString = \"\\(numberOfStars) Star Movie\" \nreturn (numberOfStars, ratingString) \n```", "```swift\nlet ratingAndDisplayString = normalisedStarRating(forRating: 5, \n                               ofPossibleTotal: 10)\n```", "```swift\nlet ratingNumber = ratingAndDisplayString.0 \nprint(ratingNumber) // 3 - Use to show the right number of stars\n```", "```swift\nlet ratingString = ratingAndDisplayString.1 \nprint(ratingString) // \"3 Star Movie\" - Use to put in the label\n```", "```swift\nlet ratingAndDisplayString = normalizedStarRating(forRating: 5, \n                               ofPossibleTotal: 10) \n```", "```swift\nlet ratingNumber = ratingAndDisplayString.0 \nprint(ratingNumber) // 3 - Use to show the right number of stars \n\nlet ratingString = ratingAndDisplayString.1 \nprint(ratingString) // \"3 Star Movie\" - Use to put in the label \n```", "```swift\nlet (nextNumber, nextString) = normalizedStarRating(forRating: 8, \n                                 ofPossibleTotal: 10)\nprint(nextNumber) // 4\nprint(nextString) // \"4 Star Movie\"\n```", "```swift\nfunc normalizedStarRating(forRating rating: Float, \n                          ofPossibleTotal total: Float) \n                          -> (starRating: Int, displayString: String) { \n\n    let fraction = rating / total \n    let ratingOutOf5 = fraction * 5 \n    let roundedRating = round(ratingOutOf5) // Rounds to the nearest \n      // integer. \n    let numberOfStars = Int(roundedRating) // Turns a Float into an Int \n    let ratingString = \"\\(numberOfStars) Star Movie\" \n\n    return (starRating: numberOfStars, displayString: ratingString) \n} \n\nlet ratingAndDisplayString = normalizedStarRating(forRating: 5, \n                              ofPossibleTotal: 10) \n\nlet ratingInt = ratingAndDisplayString.starRating \nprint(ratingInt) // 3 - Use to show the right number of stars \n\nlet ratingString = ratingAndDisplayString.displayString \nprint(ratingString) // \"3 Stars\" - Use to put in the label \n```", "```swift\n(starRating: Int, displayString: String)\n```", "```swift\nreturn (starRating: numberOfStars, displayString: ratingString)\n```", "```swift\nlet ratingValue = ratingAndDisplayString.starRating \nprint(ratingValue) // 3 - Use to show the right number of stars \n\nlet ratingString = ratingAndDisplayString.displayString \nprint(ratingString) // \"3 Stars\" - Use to put in the label\n```", "```swift\nvar moviesToWatch: Array<String> = Array()\n```", "```swift\nmoviesToWatch.append(\"The Shawshank Redemption\") \nmoviesToWatch.append(\"Ghostbusters\") \nmoviesToWatch.append(\"Terminator 2\")\n```", "```swift\nprint(moviesToWatch[0]) // \"The Shawshank Redemption\"\nprint(moviesToWatch[1]) // \"Ghostbusters\"\nprint(moviesToWatch[2]) // \"Terminator 2\"\n```", "```swift\nprint(moviesToWatch.count) // 3\n```", "```swift\nmoviesToWatch.insert(\"The Matrix\", at: 2)\n```", "```swift\nprint(moviesToWatch.count) // 4\nprint(moviesToWatch)\n// The Shawshank Redemption\n// Ghostbusters\n// The Matrix\n// Terminator 2\n```", "```swift\nlet firstMovieToWatch = moviesToWatch.first \nprint(firstMovieToWatch as Any) // Optional(\"The Shawshank \n  Redemption\") \nlet lastMovieToWatch = moviesToWatch.last \nprint(lastMovieToWatch as Any) // Optional(\"Terminator 2\") \n```", "```swift\nlet secondMovieToWatch = moviesToWatch[1] \nprint(secondMovieToWatch) // \"Ghostbusters\"\nmoviesToWatch[1] = \"Ghostbusters (1984)\" \nprint(moviesToWatch.count) // 4 \nprint(moviesToWatch) \n// The Shawshank Redemption \n// Ghostbusters (1984) \n// The Matrix \n// Terminator 2 \n```", "```swift\nlet spyMovieSuggestions: [String] = [\"The Bourne Identity\", \n                                     \"Casino Royale\", \n                                     \"Mission Impossible\"] \n```", "```swift\nmoviesToWatch = moviesToWatch + spyMovieSuggestions \nprint(moviesToWatch.count) // 7 \nprint(moviesToWatch) \n// The Shawshank Redemption \n// Ghostbusters (1984) \n// The Matrix \n// Terminator 2 \n// The Bourne Identity \n// Casino Royale \n// Mission Impossible \n```", "```swift\nvar starWarsTrilogy = Array<String>(repeating: \"Star Wars: \", \n  count: 3) \nstarWarsTrilogy[0] = starWarsTrilogy[0] + \"A New Hope\"  \nstarWarsTrilogy[1] = starWarsTrilogy[1] + \"Empire Strikes Back\"  \nstarWarsTrilogy[2] = starWarsTrilogy[2] + \"Return of the Jedi\"  \nprint(starWarsTrilogy)  \n// Star Wars: A New Hope \n// Star Wars: Empire Strikes Back \n// Star Wars: Return of the Jedi\n```", "```swift\nmoviesToWatch.replaceSubrange(2...4, with: starWarsTrilogy) \nprint(moviesToWatch.count) // 7 \nprint(moviesToWatch) \n// The Shawshank Redemption \n// Ghostbusters (1984) \n// Star Wars: A New Hope \n// Star Wars: Empire Strikes Back \n// Star Wars: Return of the Jedi \n// Casino Royale \n// Mission Impossible\n```", "```swift\nmoviesToWatch.remove(at: 6) \nprint(moviesToWatch.count) // 6 \nprint(moviesToWatch) \n// The Shawshank Redemption \n// Ghostbusters (1984) \n// Star Wars: A New Hope \n// Star Wars: Empire Strikes Back \n// Star Wars: Return of the Jedi \n// Casino Royale\n```", "```swift\nvar moviesToWatch: Array<String> = Array() \nmoviesToWatch.append(\"The Shawshank Redemption\") \nmoviesToWatch.append(\"Ghostbusters\") \nmoviesToWatch.append(\"Terminator 2\") \n```", "```swift\nprint(moviesToWatch[0]) // \"The Shawshank Redemption\" \nprint(moviesToWatch[1]) // \"Ghostbusters\" \nprint(moviesToWatch[2]) // \"Terminator 2\" \n```", "```swift\nlet index5 = moviesToWatch.index(moviesToWatch.startIndex,\n                                 offsetBy: 5,\n                                 limitedBy: moviesToWatch.endIndex)\nprint(index5 as Any) // Optional(5)\n\nlet index10 = moviesToWatch.index(moviesToWatch.startIndex,\n                                  offsetBy: 10,\n                                  limitedBy: moviesToWatch.endIndex)\nprint(index10 as Any) // nil\n```", "```swift\nprint(moviesToWatch.count) // 3 \n```", "```swift\nmoviesToWatch.insert(\"The Matrix\", at: 2) \n```", "```swift\nprint(moviesToWatch.count) // 4\n```", "```swift\nlet firstMovieToWatch = moviesToWatch.first \nprint(firstMovieToWatch as Any) // Optional(\"The Shawshank Redemption\") \nlet lastMovieToWatch = moviesToWatch.last \nprint(firstMovieToWatch as Any) // Optional(\"Terminator 2\") \nlet secondMovieToWatch = moviesToWatch[1] \nprint(secondMovieToWatch) // \"Ghostbusters\" \n```", "```swift\nmoviesToWatch[1] = \"Ghostbusters (1984)\" \n```", "```swift\nlet spyMovieSuggestions: [String] = [\"The Bourne Identity\", \n                                     \"Casino Royale\", \n                                     \"Mission Impossible\"] \n```", "```swift\nlet fibonacci: [Int] = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55] \n```", "```swift\nlet spyMovieSuggestions = [\"The Bourne Identity\", \"Casino Royale\", \n  \"Mission Impossible\"]\nlet fibonacci = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55] \n```", "```swift\nmoviesToWatch = moviesToWatch + spyMovieSuggestions\n```", "```swift\nvar starWarsTrilogy = Array<String>(repeating: \"Star Wars: \", count: 3)\n```", "```swift\nstarWarsTrilogy[0] = starWarsTrilogy[0] + \"A New Hope\" \nstarWarsTrilogy[1] = starWarsTrilogy[1] + \"Empire Strikes Back\" \nstarWarsTrilogy[2] = starWarsTrilogy[2] + \"Return of the Jedi\" \n```", "```swift\nmoviesToWatch.replaceSubrange(2...4, with: starWarsTrilogy)\n```", "```swift\nmoviesToWatch.replaceSubrange(2..<5, with: starWarsTrilogy)  \n```", "```swift\nmoviesToWatch.remove(at: 6) \n```", "```swift\nprint(moviesToWatch.count) // 6 \n```", "```swift\nlet evenNumbersTo10 = [2, 4, 6, 8, 10] \nevenNumbersTo10.append(12) // Doesn't compile \n\nvar evenNumbersTo12 = evenNumbersTo10\nevenNumbersTo12.append(12) // Does compile\n```", "```swift\nlet fibonacciArray: Array<Int> = [1, 1, 2, 3, 5, 8, 13, 21, 34] \nlet fibonacciSet: Set<Int> = [1, 1, 2, 3, 5, 8, 13, 21, 34] \nprint(fibonacciArray.count) // 9 \nprint(fibonacciSet.count) // 8\n```", "```swift\nprint(fibonacciArray.count) // 9 \nprint(fibonacciSet.count) // 8 \n```", "```swift\nvar animals: Set<String> = [\"cat\", \"dog\", \"mouse\", \"elephant\"] \nanimals.insert(\"rabbit\") \nprint(animals.contains(\"dog\")) // true \nanimals.remove(\"dog\") \nprint(animals.contains(\"dog\")) // false\n```", "```swift\nlet evenNumbers = Set<Int>(arrayLiteral: 2, 4, 6, 8, 10) \nlet oddNumbers: Set<Int> = [1, 3, 5, 7, 9] \nlet squareNumbers: Set<Int> = [1, 4, 9] \nlet triangularNumbers: Set<Int> = [1, 3, 6, 10]\n```", "```swift\nlet evenOrTriangularNumbers = evenNumbers.union(triangularNumbers) \n  // 2, 4, 6, 8, 10, 1, 3, unordered \nprint(evenOrTriangularNumbers.count) // 7 \n```", "```swift\nlet oddAndSquareNumbers = oddNumbers.intersection(squareNumbers) \n  // 1, 9, unordered \nprint(oddAndSquareNumbers.count) // 2 \n```", "```swift\nlet squareOrTriangularNotBoth = \n  squareNumbers.symmetricDifference(triangularNumbers) \n   // 4, 9, 3, 6, 10, unordered \nprint(squareOrTriangularNotBoth.count) // 5\n```", "```swift\nlet squareNotOdd = squareNumbers.subtracting(oddNumbers) // 4 \nprint(squareNotOdd.count) // 1 \n```", "```swift\nlet animalKingdom: Set<String> = [\"dog\", \"cat\", \"pidgeon\", \n                                  \"chimpanzee\", \"snake\", \"kangaroo\", \n                                  \"giraffe\", \"elephant\", \"tiger\", \n                                  \"lion\", \"panther\"] \n\nlet vertebrates: Set<String> = [\"dog\", \"cat\", \"pidgeon\", \n                                \"chimpanzee\", \"snake\", \"kangaroo\", \n                                \"giraffe\", \"elephant\", \"tiger\", \n                                \"lion\", \"panther\"]\n\nlet reptile: Set<String> = [\"snake\"] \n\nlet mammals: Set<String> = [\"dog\", \"cat\", \"chimpanzee\", \n                            \"kangaroo\", \"giraffe\", \"elephant\", \n                            \"tiger\", \"lion\", \"panther\"]\n\nlet catFamily: Set<String> = [\"cat\", \"tiger\", \"lion\", \"panther\"] \n\nlet domesticAnimals: Set<String> = [\"cat\", \"dog\"]\n```", "```swift\nprint(mammals.isSubset(of: animalKingdom)) // true\n```", "```swift\nprint(mammals.isSuperset(of: catFamily)) // true\n```", "```swift\nprint(vertebrates.isStrictSubset(of: animalKingdom)) // false \nprint(mammals.isStrictSubset(of: animalKingdom)) // true\n```", "```swift\nprint(animalKingdom.isStrictSuperset(of: vertebrates)) // false \nprint(animalKingdom.isStrictSuperset(of: domesticAnimals))  // true \n```", "```swift\nprint(catFamily.isDisjoint(with: reptile)) // true\n```", "```swift\nlet fibonacciArray: Array<Int> = [1, 1, 2, 3, 5, 8, 13, 21, 34] \nlet fibonacciSet: Set<Int> = [1, 1, 2, 3, 5, 8, 13, 21, 34] \n```", "```swift\nprint(fibonacciArray.count) // 9 \nprint(fibonacciSet.count) // 8\n```", "```swift\nlet evenOrTriangularNumbers = evenNumbers.union(triangularNumbers) \n  // 2,4,6,8,10,1,3,unordered \n```", "```swift\nlet oddAndSquareNumbers = oddNumbers.intersection(squareNumbers) \n  // 1, 9, unordered\n```", "```swift\nlet squareOrTriangularNotBoth =\n  squareNumbers.symmetricDifference(triangularNumbers)  \n// 4, 9, 3, 6, 10, unordered \n```", "```swift\nlet squareNotOdd = squareNumbers.subtracting(oddNumbers) // 4 \n```", "```swift\nprint(mammals.isSubset(of: animalKingdom)) // true\n```", "```swift\nprint(vertebrates.isStrictSubset(of: animalKingdom)) // false \nprint(mammals.isStrictSubset(of: animalKingdom)) // true \n```", "```swift\nprint(mammals.isSuperset(of: catFamily)) // true \n```", "```swift\nprint(animalKingdom.isStrictSuperset(of: vertebrates))     // false \nprint(animalKingdom.isStrictSuperset(of: domesticAnimals)) // true\n```", "```swift\nprint(catFamily.isDisjoint(with: reptile)) // true \n```", "```swift\nlet planets: Set<String> = [\"Mercury\", \"Venus\", \"Earth\", \n                            \"Mars\", \"Jupiter\", \"Saturn\", \n                            \"Uranus\", \"Neptune\", \"Pluto\"] \nplanets.remove(\"Pluto\") // Doesn't compile \n```", "```swift\nstruct PersonName { \n    let givenName: String \n    let familyName: String \n} \n\nenum CommunicationMethod { \n    case phone \n    case email \n    case textMessage \n    case fax \n    case telepathy \n    case subSpaceRelay \n    case tachyons \n} \n\nclass Person { \n    let name: PersonName \n    let preferredCommunicationMethod: CommunicationMethod \n\n    convenience init(givenName: String, \n                     familyName: String, \n                     commsMethod: CommunicationMethod) { \n        let name = PersonName(givenName: givenName, familyName: \n          familyName) \n        self.init(name: name, commsMethod: commsMethod) \n    } \n\n    init(name: PersonName, commsMethod: CommunicationMethod) { \n        self.name = name \n        preferredCommunicationMethod = commsMethod \n    } \n\n    var displayName: String {\n        return \"\\(name.givenName) \\(name.familyName)\"\n    }\n} \n```", "```swift\nvar crew = Dictionary<String, Person>()\n```", "```swift\ncrew[\"Captain\"] = Person(givenName: \"Jean-Luc\", \n                         familyName: \"Picard\", \n                         commsMethod: .phone)\n\ncrew[\"First Officer\"] = Person(givenName: \"William\", \n                               familyName: \"Riker\", \n                               commsMethod: .email)\n\ncrew[\"Chief Engineer\"] = Person(givenName: \"Geordi\", \n                                familyName: \"LaForge\", \n                                commsMethod: .textMessage)\n\ncrew[\"Second Officer\"] = Person(givenName: \"Data\", \n                                familyName: \"Soong\", \n                                commsMethod: .fax)\n\ncrew[\"Councillor\"] = Person(givenName: \"Deanna\", \n                            familyName: \"Troi\", \n                            commsMethod: .telepathy)\n\ncrew[\"Security Officer\"] = Person(givenName: \"Tasha\", \n                                  familyName: \"Yar\", \n                                  commsMethod: .subSpaceRelay)\n\ncrew[\"Chief Medical Officer\"] = Person(givenName: \"Beverly\", \n                                       familyName: \"Crusher\", \n                                       commsMethod: .tachyons)\n```", "```swift\nlet roles = Array(crew.keys) \nprint(roles)\n```", "```swift\nlet firstRole = roles.first! // Chief Medical Officer \nlet cmo = crew[firstRole]! // Person: Beverly Crusher \nprint(\"\\(firstRole): \\(cmo.displayName)\")\n// Chief Medical Officer: Beverly Crusher\n```", "```swift\nprint(crew[\"Security Officer\"]!.name.givenName) // Tasha\n\ncrew[\"Security Officer\"] = Person(givenName: \"Worf\", \n                                  familyName: \"Son of Mogh\", \n                                  commsMethod: .subSpaceRelay)\n\nprint(crew[\"Security Officer\"]!.name.givenName) // Worf\n```", "```swift\nvar crew = Dictionary<String, Person>() \n```", "```swift\nlet intByName: [String: Int] = [\"one\": 1, \"two\": 2, \"three\": 3] \n```", "```swift\nvar crew: [String: Person] = [:] \n```", "```swift\ncrew[\"Captain\"] = Person(givenName: \"Jean-Luc\", \n                         familyName: \"Picard\", \n                         commsMethod: .phone) \n```", "```swift\nlet roles = Array(crew.keys)  \nprint(roles)  \n```", "```swift\nlet firstRole = roles.first! // Chief Medical Officer \nlet cmo = crew[firstRole]! // Person: Beverly Crusher \nprint(\"\\(firstRole): \\(cmo.displayName)\")\n// Chief Medical Officer: Beverly Crusher\n```", "```swift\nenum Role: String { \n    case captain = \"Captain\" \n    case firstOfficer = \"First Officer\" \n    case secondOfficer = \"Second Officer\" \n    case chiefEngineer = \"Chief Engineer\" \n    case councillor = \"Councillor\" \n    case securityOfficer = \"Security Officer\" \n    case chiefMedicalOfficer = \"Chief Medical Officer\" \n}\n```", "```swift\nvar crew = Dictionary<Role, Person>() \n\ncrew[.captain] = Person(givenName: \"Jean-Luc\", \n                        familyName: \"Picard\", \n                        commsMethod: .phone) \n\ncrew[.firstOfficer] = Person(givenName: \"William\", \n                             familyName: \"Riker\", \n                             commsMethod: .email) \n\ncrew[.chiefEngineer] = Person(givenName: \"Geordi\", \n                              familyName: \"LaForge\", \n                              commsMethod: .textMessage) \n\ncrew[.secondOfficer] = Person(givenName: \"Data\", \n                              familyName: \"Soong\", \n                              commsMethod: .fax) \n\ncrew[.councillor] = Person(givenName: \"Deanna\", \n                           familyName: \"Troi\", \n                           commsMethod: .telepathy) \n\ncrew[.securityOfficer] = Person(givenName: \"Tasha\", \n                                familyName: \"Yar\", \n                                commsMethod: .subSpaceRelay) \n\ncrew[.chiefMedicalOfficer] = Person(givenName: \"Beverly\", \n                                    familyName: \"Crusher\", \n                                    commsMethod: .tachyons) \n```", "```swift\nenum Role: String { \n    //... \n} \n```", "```swift\ncrew[.captain] = Person(givenName: \"Jean-Luc\", \n                        familyName: \"Picard\", \n                        commsMethod: .phone) \nlet cmo = crew[.chiefMedicalOfficer] \n```", "```swift\nenum GridPosition: String { \n    case player1 = \"o\" \n    case player2 = \"x\" \n    case empty = \" \" \n} \n\nstruct TicTacToe { \n\n    var gridStorage: [[GridPosition]] = [] \n\n    init() { \n        gridStorage.append(Array(repeating: .empty, count: 3)) \n        gridStorage.append(Array(repeating: .empty, count: 3)) \n        gridStorage.append(Array(repeating: .empty, count: 3)) \n    } \n\n    func gameStateString() -> String { \n        var stateString = \"-------------\\n\" \n        stateString += printableString(forRow: gridStorage[0]) \n        stateString += \"-------------\\n\" \n        stateString += printableString(forRow: gridStorage[1]) \n        stateString += \"-------------\\n\" \n        stateString += printableString(forRow: gridStorage[2]) \n        stateString += \"-------------\\n\" \n\n        return stateString \n    } \n\n    func printableString(forRow row: [GridPosition]) -> String { \n        var rowString = \"| \\(row[0].rawValue) \" \n        rowString += \"| \\(row[1].rawValue) \" \n        rowString += \"| \\(row[2].rawValue) |\\n\" \n        return rowString \n    } \n} \n```", "```swift\nvar game = TicTacToe()\n```", "```swift\n// Move 1 \ngame.gridStorage[1][1] = .player1 \nprint(game.gameStateString()) \n/* \n------------- \n|   |   |   | \n------------- \n|   | o |   | \n------------- \n|   |   |   | \n------------- \n*/\n```", "```swift\n// Move 2 \ngame.gridStorage[0][2] = .player2 \nprint(game.gameStateString()) \n/* \n------------- \n|   |   | x | \n------------- \n|   | o |   | \n------------- \n|   |   |   | \n------------- \n*/  \n```", "```swift\nstruct TicTacToe { \n    var gridStorage: [[GridPosition]] = [] \n    //... \n    subscript(row: Int, column: Int) -> GridPosition { \n        get { \n            return gridStorage[row][column] \n        } \n        set(newValue) { \n            gridStorage[row][column] = newValue \n        } \n    } \n    //... \n} \n```", "```swift\n// Move 1 \ngame[1, 1] = .player1 \nprint(game.gameStateString()) \n/*  \n ------------- \n |   |   |   | \n ------------- \n |   | o |   | \n ------------- \n |   |   |   | \n ------------- \n */  \n\n// Move 2 \ngame[0, 2] = .player2 \nprint(game.gameStateString()) \n/*  \n ------------- \n |   |   | x | \n ------------- \n |   | o |   | \n ------------- \n |   |   |   | \n ------------- \n */  \n\n// Move 3 \ngame[0, 0] = .player1 \nprint(game.gameStateString()) \n/*  \n ------------- \n | o |   | x | \n ------------- \n |   | o |   | \n ------------- \n |   |   |   | \n ------------- \n */  \n\n// Move 4 \ngame[1, 2] = .player2 \nprint(game.gameStateString()) \n/*  \n ------------- \n | o |   | x | \n ------------- \n |   | o | x | \n ------------- \n |   |   |   | \n ------------- \n */  \n\n// Move 5 \ngame[2, 2] = .player1 \nprint(game.gameStateString()) \n/*  \n ------------- \n | o |   | x | \n ------------- \n |   | o | x | \n ------------- \n |   |   | o | \n ------------- \n */  \n```", "```swift\nlet topLeft = game[0, 0] \nlet middle = game[1, 1] \nlet bottomRight = game[2, 2] \nlet p1HasWon = (topLeft == .player1)\n                && (middle == .player1)\n                && (bottomRight == .player1) \n```", "```swift\nsubscript(row: Int, column: Int) -> GridPosition\n```", "```swift\nsubscript(row: Int, column: Int) -> GridPosition {\n    get {\n        return gridStorage[row][column]\n    }\n    set(newValue) {\n        gridStorage[row][column] = newValue\n    }\n}\n```", "```swift\ngame[1, 2] = .player2 // Assigning a value\nlet topLeft = game[0, 0] // Accessing a value\n```", "```swift\nsubscript(atRow row: Int, atColumn column: Int) -> GridPosition \n```", "```swift\ngame[atRow: 1, atColumn: 2] = .player2 // Assigning a value \nlet topLeft = game[atRow: 0, atColumn: 0] // Accessing a value\n```", "```swift\nstruct Pug { \n    let name: String \n}\n```", "```swift\nlet pugs = [Pug]() \n```", "```swift\ntypealias Grumble = [Pug] \n```", "```swift\nvar grumble = Grumble()\n```", "```swift\nlet marty = Pug(name: \"Marty McPug\") \nlet wolfie = Pug(name: \"Wolfgang Pug\") \nlet buddy = Pug(name: \"Buddy\") \ngrumble.append(marty) \ngrumble.append(wolfie) \ngrumble.append(buddy)\n```", "```swift\nenum Channel { \n    case BBC1 \n    case BBC2 \n    case BBCNews \n    //... \n} \n\nclass ProgrammeFetcher { \n\n    func fetchCurrentProgrammeName(forChannel channel: Channel, \n       resultHandler: (String?, Error?) -> Void) { \n        // ...  \n        // Do the work to get the current programme \n        // ... \n        let exampleProgramName = \"Sherlock\" \n        resultHandler(exampleProgramName, nil) \n    } \n\n    func fetchNextProgrammeName(forChannel channel: Channel, \n       resultHandler: (String?, Error?) -> Void) { \n        // ...  \n        // Do the work to get the next programme \n        // ... \n        let exampleProgramName = \"Luther\" \n        resultHandler(exampleProgramName, nil) \n    } \n} \n\n```", "```swift\n(String?, Error?) -> Void \n```", "```swift\nclass ProgrammeFetcher { \n\n    typealias FetchResultHandler = (String?, Error?) -> Void \n\n    func fetchCurrentProgrammeName(forChannel channel: Channel, \n                                   resultHandler: FetchResultHandler) { \n        // Get next programme \n        let programmeName = \"Sherlock\" \n        resultHandler(programmeName, nil) \n    } \n\n    func fetchNextProgrammeName(forChannel channel: Channel, \n                                resultHandler: FetchResultHandler) { \n        // Get next programme \n        let programmeName = \"Luther\" \n        resultHandler(programmeName, nil) \n    } \n} \n\n```", "```swift\nlet fetcher = ProgrammeFetcher() \nfetcher.fetchCurrentProgrammeName(forChannel: .BBC1, \n   resultHandler: { programmeName, error in  \n    print(programmeName as Any) \n})\n```", "```swift\nclass UserManager { \n    var currentUserName: String = \"Emmanuel Goldstein\" \n} \n```", "```swift\nclass UserManager { \n    var currentUserName: String = \"Emmanuel Goldstein\" { \n        willSet (newUserName) { \n            print(\"Goodbye to \\(currentUserName)\") \n            print(\"I hear \\(newUserName) is on their way!\") \n        } \n        didSet (oldUserName) { \n            print(\"Welcome to \\(currentUserName)\") \n            print(\"I miss \\(oldUserName) already!\") \n        } \n    } \n} \n```", "```swift\nlet manager = UserManager() \n\nmanager.currentUserName = \"Dade Murphy\" \n// Goodbye to Emmanuel Goldstein \n// I hear Dade Murphy is on their way! \n// Welcome to Dade Murphy \n// I miss Emmanuel Goldstein already! \n\nmanager.currentUserName = \"Kate Libby\" \n// Goodbye to Dade Murphy \n// I hear Kate Libby is on their way! \n// Welcome to Kate Libby \n// I miss Dade Murphy already! \n```", "```swift\nwillSet (newUserName) { \n    //... \n} \n\n```", "```swift\ndidSet (oldUserName) { \n    //... \n}\n```", "```swift\nclass UserManager { \n    var currentUserName: String = \"Emmanuel Goldstein\" { \n        willSet { \n            print(\"Goodbye to \\(currentUserName)\") \n            print(\"I hear \\(newValue) is on their way!\") \n        } \n        didSet { \n            print(\"Welcome to \\(currentUserName)\") \n            print(\"I miss \\(oldValue) already!\") \n        } \n    } \n} \n```", "```swift\nextension String { \n\n} \n```", "```swift\nextension String {\n    func firstWord() -> String {\n        let spaceIndex = firstIndex(of: \" \") ?? endIndex\n        let word = prefix(upTo: spaceIndex)\n        return String(word)\n    }\n}\n```", "```swift\nlet llap = \"Live long, and prosper\" \nlet firstWord = llap.firstWord() \nprint(firstWord) // Live \n```", "```swift\nextension String { \n    //... \n} \n```", "```swift\nextension String {\n    func firstWord() -> String {\n        let spaceIndex = firstIndex(of: \" \") ?? endIndex\n        let word = prefix(upTo: spaceIndex)\n        return String(word)\n    }\n}\n```", "```swift\nextension String {\n   var firstWord: String {\n       let spaceIndex = firstIndex(of: \" \") ?? endIndex\n       let word = prefix(upTo: spaceIndex)\n       return String(word)\n   }\n} \n```", "```swift\nprotocol IntRepresentable { \n    var intValue: Int { get } \n}\n```", "```swift\nextension Int: IntRepresentable { \n    var intValue: Int { \n        return self \n    } \n} \n```", "```swift\nextension String: IntRepresentable { \n    var intValue: Int { \n        return Int(self) ?? 0 \n    } \n} \n```", "```swift\nenum CrewComplement: Int { \n    case enterpriseD = 1014  \n    case voyager = 150  \n    case deepSpaceNine = 2000  \n} \n```", "```swift\nextension CrewComplement: IntRepresentable { \n    var intValue: Int { \n        return rawValue \n    } \n} \n```", "```swift\nvar intableThings = [IntRepresentable]() \nintableThings.append(55) \nintableThings.append(1200) \nintableThings.append(\"5\") \nintableThings.append(\"1009\") \nintableThings.append(CrewComplement.enterpriseD) \nintableThings.append(CrewComplement.voyager) \nintableThings.append(CrewComplement.deepSpaceNine) \n\nlet over1000 = intableThings.compactMap { $0.intValue > 1000 ? \n  $0.intValue: nil } \nprint(over1000) \n```", "```swift\nimport AppleInc \n```", "```swift\nclass SecretProductDepartment { \n\n    private var secretCodeWord = \"Titan\" \n    private var secretProducts = [\"Apple Glasses\", \n                                  \"Apple Car\", \n                                  \"Apple Brain Implant\"] \n\n    func nextProduct(codeWord: String) -> String? { \n        let codeCorrect = codeWord == secretCodeWord \n        return codeCorrect ? secretProducts.first : nil \n    } \n} \n```", "```swift\npublic enum DeviceModel {\n    case iPhone12\n    case iPhone12Mini\n    case iPhone12Pro\n    case iPhone12ProMax \n}\n\npublic class AppleiPhone { \n\n    public let model: DeviceModel \n\n    fileprivate init(model: DeviceModel) { \n        self.model = model \n    } \n} \n\nfileprivate class Factory { \n    func makeiPhone(ofModel model: DeviceModel) -> AppleiPhone { \n        return AppleiPhone(model: model) \n    } \n} \n\npublic class AppleStore { \n\n    private var factory = Factory() \n\n    public func selliPhone(ofModel model: DeviceModel) \n                           -> AppleiPhone { \n        return factory.makeiPhone(ofModel: model) \n    } \n}\n```", "```swift\npublic class Person { \n\n    public let name: String \n\n    public init(name: String) { \n        self.name = name \n    } \n} \n\npublic class Apple { \n\n    public private(set) var ceo: Person \n    private var employees = [Person]() \n    public let store = AppleStore() \n    private let secretDepartment = SecretProductDepartment() \n\n    public init() { \n        ceo = Person(name: \"Tim Cook\") \n        employees.append(ceo) \n    } \n\n    public func newEmployee(person: Person) { \n        employees.append(person) \n    } \n\n    func weeklyProductMeeting() { \n\n        var superSecretProduct = \n          secretDepartment.nextProduct(codeWord: \"Not sure...\n            Abracadabra?\") // nil\n\n        // Try again \n        superSecretProduct = \n          secretDepartment.nextProduct(givenCodeWord: \"Titan\") \n        print(superSecretProduct as Any) // \"Apple Glasses\" \n    } \n} \n```", "```swift\nopen class SwiftLanguage { \n\n    open func versionNumber() -> Float { \n        return 5.1 \n    } \n\n    open func supportedPlatforms() -> [String] { \n        return [\"iOS\", \"macOS\", \"tvOS\", \"watchOS\", \"Linux\"] \n    } \n} \n```", "```swift\nclass SecretProductDepartment { \n\n    private var secretCodeWord = \"Titan\" \n    private var secretProducts = [\"Apple Glasses\", \n                                  \"Apple Car\", \n                                  \"Apple Brain Implant\"]\n\n    func nextProduct(codeWord: String) -> String? { \n        let codeCorrect = codeWord == secretCodeWord \n        return codeCorrect ? secretProducts.first : nil \n    } \n} \n```", "```swift\nlet insecureCodeWord = SecretProductDepartment().secretCodeWord \n\n```", "```swift\nfunc nextProduct(codeWord: String) -> String? { \n    let codeCorrect = codeWord == secretCodeWord \n    return codeCorrect ? secretProducts.first : nil \n} \n```", "```swift\npublic enum DeviceModel {\n    case iPhone12\n    case iPhone12Mini\n    case iPhone12Pro\n    case iPhone12ProMax \n}\n\npublic class AppleiPhone { \n\n    public let model: DeviceModel \n\n    fileprivate init(model: DeviceModel) { \n        self.model = model \n    } \n} \n\npublic class AppleStore { \n\n    private var factory = Factory() \n\n    public func selliPhone(ofModel model: DeviceModel) \n                           -> AppleiPhone { \n        return factory.makeiPhone(ofModel: model) \n    } \n}   \n\n```", "```swift\nfileprivate class Factory { \n\n    func makeiPhone(ofModel model: DeviceModel) -> AppleiPhone { \n        return AppleiPhone(model: model) \n    } \n} \n```", "```swift\nfileprivate init(model: DeviceModel) \n```", "```swift\npublic class Person { \n\n    public let name: String \n\n    public init(name: String) { \n        self.name = name \n    } \n} \n\npublic class Apple { \n\n    public private(set) var ceo: Person \n    private var employees = [Person]() \n    public let store = AppleStore() \n    private let secretDepartment = SecretProductDepartment() \n\n    public init() { \n        ceo = Person(name: \"Tim Cook\") \n        employees.append(ceo) \n    } \n\n    public func newEmployee(person: Person) { \n        employees.append(person) \n    } \n\n    func weeklyProductMeeting() { \n\n        var superSecretProduct = \n          secretDepartment.nextProduct(givenCodeWord: \"Not sure... \n            Abracadabra?\") // nil \n\n        // Try again \n        superSecretProduct = \n          secretDepartment.nextProduct(givenCodeWord: \"Titan\") \n        print(superSecretProduct) // \"Apple Glasses\"\n    } \n} \n```", "```swift\npublic private(set) var ceo: Person \n```", "```swift\nopen class SwiftLanguage { \n\n    open func versionNumber() -> Float { \n        return 5.0\n    } \n\n    open func supportedPlatforms() -> [String] { \n        return [\"iOS\", \"macOSX\", \"tvOS\", \"watchOS\", \"Linux\"] \n    } \n} \n```", "```swift\nimport AppleInc \n```", "```swift\nclass WinSwift: SwiftLanguage { \n\n    override func versionNumber() -> Float { \n        return 5.3 \n    } \n\n    override func supportedPlatforms() -> [String] { \n\n        var supported = super.supportedPlatforms() \n        supported.append(\"Windows\") \n\n        return supported \n    } \n} \n```", "```swift\nlet apple = Apple() \n\nlet keith = Person(name: \"Keith Moon\") \napple.newEmployee(person: keith) \n\nprint(\"Current CEO: \\(apple.ceo.name)\") \nlet craig = Person(name: \"Craig Federighi\") \napple.ceo = craig // Doesn't compile \n```", "```swift\n// Buy new iPhone  \nlet boughtiPhone = apple.store.selliPhone(ofModel: .iPhone12Pro) \n// This works \n\n// Try and create your own iPhone \nlet buildAniPhone = AppleiPhone(model: .iPhone12Pro) \n// Doesn't compile \n\n```"]