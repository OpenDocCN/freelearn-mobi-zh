- en: Where Are We?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们在哪里？
- en: We have all used a map at some point in our lives, either an actual map or a
    map on our phone or another device. Apple Maps has come a long way from when it
    was first announced in 2012\. Apple has made steady improvements to Apple Maps
    every year.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在生活中都使用过地图，无论是实际的地图还是手机或其他设备上的地图。自2012年首次宣布以来，苹果地图已经取得了长足的进步。苹果每年都在稳步改进苹果地图。
- en: During this chapter, we will display our restaurant list using a map and custom
    pins. When users tap a pin on the map, they will be taken directly to the restaurant
    detail page that we created in the last chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用地图和自定义标记来显示我们的餐厅列表。当用户点击地图上的标记时，他们将被直接带到我们在上一章中创建的餐厅详情页面。
- en: 'In this chapter, we will cover:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: What annotations are and how to add them to a map
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标注是什么以及如何将它们添加到地图中
- en: How to create custom annotations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建自定义标注
- en: How to create a storyboard reference
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建故事板引用
- en: Setting up map annotations
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置地图标注
- en: In our map, we are going to drop pins down at each restaurant location. These
    pins are called annotations, more specifically, `MKAnnotation`. Since we are going
    to create multiple `MKAnnotation` protocols, we are going to create a class that
    subclasses `MKAnnotation`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的地图中，我们将在每个餐厅位置放置标记。这些标记被称为标注，更具体地说，是`MKAnnotation`。由于我们将创建多个`MKAnnotation`协议，我们将创建一个子类化`MKAnnotation`的类。
- en: What is an MKAnnotation?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是MKAnnotation？
- en: '`MKAnnotation` is a protocol that provides us with information related to a
    map view. Protocols provide a blueprint for methods, properties, and other required
    functionalities . The `MKAnnotation` will contain information, such as the coordinates
    (latitude and longitude), title, and subtitle of the annotation.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`MKAnnotation`是一个协议，为我们提供了与地图视图相关的信息。协议提供了一种方法、属性和其他所需功能的设计蓝图。`MKAnnotation`将包含信息，例如坐标（纬度和经度）、标题和副标题。'
- en: To drop a pin onto a map, we must subclass the `MKAnnotation`. When we first
    looked at classes versus structs, we saw that classes could subclass or inherit
    from other classes, which means that we can get properties, methods, and additional
    requirements from the class that we are subclassing. Let's create an annotation
    that subclasses `MKAnnotation` and see how this works.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要在地图上放置标记，我们必须子类化`MKAnnotation`。当我们第一次查看类与结构体的区别时，我们看到类可以子类化或继承自其他类，这意味着我们可以从我们要子类化的类中获取属性、方法和额外的要求。让我们创建一个子类化`MKAnnotation`的标注并看看这是如何工作的。
- en: Creating a restaurant annotation
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建餐厅标注
- en: 'Before we jump into creating our file, we should first look at the data that
    we will be using. The data for the map view will be the same data that we use
    for our restaurant-listing page. Let''s take a look at what the restaurant data
    will look like in plist format:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建文件之前，我们应该首先查看我们将要使用的数据。地图视图的数据将与我们在餐厅列表页面中使用的数据相同。让我们看看餐厅数据在plist格式下将是什么样子：
- en: '![](img/33734dc7-def5-4ba6-97e2-f764e71fbbc6.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/33734dc7-def5-4ba6-97e2-f764e71fbbc6.png)'
- en: 'We need to create a file to represent this data for the map view, which will
    differ from the restaurant-listing page because we need to subclass `MKAnnotation`.
    Let''s get started by creating this file now:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个文件来表示地图视图中的这些数据，这将与餐厅列表页面不同，因为我们需要子类化`MKAnnotation`。让我们现在开始创建这个文件：
- en: Right-click on the `Map` folder and select New File.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`Map`文件夹并选择新建文件。
- en: In the Choose a template for your new file screen, select iOS at the top and
    then Cocoa Touch Class. Then hit Next.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择新文件模板的屏幕上，顶部选择iOS，然后选择Cocoa Touch Class。然后点击下一步。
- en: 'In the Options screen that appears, add the following:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的选项屏幕中，添加以下内容：
- en: New file*:*
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 新建文件：*
- en: Class*:* `RestaurantItem`
  id: totrans-20
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类：`RestaurantItem`
- en: Subclass*:* `NSObject`
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子类：`NSObject`
- en: Also create XIB*:* Unchecked
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 也创建XIB：未选中
- en: Language*:* `Swift`
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语言：`Swift`
- en: Click Next and then Create.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下一步然后创建。
- en: In this new `RestaurantItem.swift` file, under `import UIKit`, add `import MapKit`.
    We need this `import` statement so that Xcode knows where the files are that we
    are going to use.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个新的`RestaurantItem.swift`文件中，在`import UIKit`下添加`import MapKit`。我们需要这个`import`语句，以便Xcode知道我们将要使用的文件位置。
- en: 'Next, we need to update our class declaration to make our annotation. Since
    this is subclassing `MKAnnotation`, we need to change what we currently have (`class
    RestaurantItem: NSObject`) to the following:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '接下来，我们需要更新我们的类声明以创建标注。由于这是`MKAnnotation`的子类，我们需要将我们目前拥有的内容（`class RestaurantItem:
    NSObject`）更改为以下内容：'
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You will see an error when you add the `MKAnnotation`. Just ignore it for now,
    as we will fix this error shortly.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当你添加 `MKAnnotation` 时，你会看到一个错误。现在请忽略它，因为我们很快就会修复这个错误。
- en: 'Inside of the class declaration, add the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在类声明内部，添加以下内容：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When the user taps on the annotation, the name of the restaurant and types of
    cuisine will appear along with a detail icon. This detail icon will take the user
    to the restaurant detail page. Then, we will pass along all of this data and use
    it to populate the restaurant detail page we created in the last chapter.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击注释时，餐厅的名称和菜系类型将显示出来，同时还有一个详情图标。这个详情图标将带用户到餐厅详情页面。然后，我们将传递所有这些数据并使用它来填充我们在上一章中创建的餐厅详情页面。
- en: 'We need to initialize all of the data passed into the object. Therefore, let''s
    create a custom `init()` method to which we can pass a dictionary object through
    its parameters:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要初始化传递给对象的所有数据。因此，让我们创建一个自定义的 `init()` 方法，我们可以通过其参数传递一个字典对象：
- en: '![](img/224baa32-e55f-4e29-b9c4-9cd1c884257d.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/224baa32-e55f-4e29-b9c4-9cd1c884257d.png)'
- en: This method is large, but it is nothing you have not seen before. We are using
    the `if...let` statement to check for data in each element. If something is missing,
    it will not be sent.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法很大，但它并不是你之前没有见过的。我们使用 `if...let` 语句来检查每个元素中的数据。如果缺少某些数据，则不会发送。
- en: Let's address the error now. The reason we are getting an error is because we
    are subclassing `MKAnnotation` and have not yet declared the coordinates, which
    is a required property. We also have two other optional properties—`title` and
    `subtitle`—that we are using for our map and that we need to declare. What we
    want to be able to do is pass the data that we have over to these three properties
    so that we can use them on our map.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来处理错误。我们得到错误的原因是因为我们正在子类化 `MKAnnotation` 而尚未声明坐标，这是一个必需的属性。我们还有两个其他可选属性——`title`
    和 `subtitle`——我们正在用于我们的地图，并且需要声明。我们想要能够将这些数据传递给这三个属性，以便我们可以在地图上使用它们。
- en: 'To get rid of the error, we need to add the coordinates first. We need to set
    up the latitude and longitude, so add the following after the `init()` method:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了消除错误，我们首先需要添加坐标。我们需要设置纬度和经度，所以在 `init()` 方法之后添加以下内容：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`CLLocationCoordinate2D` is a class that is used by `MapKit` to set the exact
    location of a pin.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`CLLocationCoordinate2D` 是一个由 `MapKit` 使用的类，用于设置图钉的确切位置。'
- en: Note that we are using curly braces for this property. It is defined in `MKAnnotation`,
    and we are using the computed property to set the value. For the `coordinate`
    property, we will pass a latitude and longitude to it using a `CLLocationCoordinate2D`.
    In our `init()` method, we created the data that sets the latitude and longitude,
    and now, we are passing those coordinates over to the `coordinate` property.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们在这个属性中使用大括号。它在 `MKAnnotation` 中定义，我们使用计算属性来设置值。对于 `coordinate` 属性，我们将使用
    `CLLocationCoordinate2D` 传递纬度和经度。在我们的 `init()` 方法中，我们创建了设置纬度和经度的数据，现在，我们将这些坐标传递给
    `coordinate` 属性。
- en: 'Let''s do the same with `subtitle` by adding the following above the variable
    coordinate:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在变量 `coordinate` 之上添加以下内容来对 `subtitle` 做同样的事情：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The variable `subtitle` is a computed property, but this time we are using an
    `else...if` statement. We first check to see whether the array is empty; if so,
    nothing displays. If we only have one item in the array, we just return that item.
    Finally, if we have multiple items in our array, we take each item and put them
    in one string, separating each item with a comma. For example, if your array had
    the items `["American," "Bistro," "Burgers"]`, then we would create a string that
    looks like *American*, *Bistro*, *Burgers*.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 变量 `subtitle` 是一个计算属性，但这次我们使用了一个 `else...if` 语句。我们首先检查数组是否为空；如果是，则不显示任何内容。如果数组中只有一个项目，我们只需返回该项目。最后，如果我们数组中有多个项目，我们将每个项目放入一个字符串中，并用逗号分隔每个项目。例如，如果你的数组中有项目
    `["American," "Bistro," "Burgers"]`，那么我们会创建一个看起来像 *American*, *Bistro*, *Burgers*
    的字符串。
- en: 'Finally, we need to add the title. Enter the following above the `subtitle`
    variable:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要添加标题。在 `subtitle` 变量之上输入以下内容：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Your file should no longer have an error, and should now look as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你的文件现在应该不再有错误，现在看起来应该是这样的：
- en: '![](img/120174db-8c5d-44a5-81e0-9314e707da3d.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/120174db-8c5d-44a5-81e0-9314e707da3d.png)'
- en: Next, we want to create a manager that will take our data and create annotations
    for our map.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们想要创建一个管理器，它将接收我们的数据并为我们的地图创建注释。
- en: Creating our Map Data Manager
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的地图数据管理器
- en: In the next chapter, we will deal with data, but for now, we can mock up some
    data to set up our structure. We will use a plist to load our data, just like
    we did in the last chapter.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将处理数据，但到目前为止，我们可以模拟一些数据来设置我们的结构。我们将使用plist来加载数据，就像我们在上一章中所做的那样。
- en: 'Let''s create the `MapDataManager` file now:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建`MapDataManager`文件：
- en: Right-click on the `Map` folder and select New File.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`Map`文件夹并选择新建文件。
- en: In the Choose a template for your new file screen, select iOS at the top and
    then Swift File. Then hit Next.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择新文件模板的屏幕上，顶部选择iOS，然后选择Swift文件。然后点击下一步。
- en: Name this file `MapDataManager` and then hit Create.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件命名为`MapDataManager`，然后点击创建。
- en: 'Next, we need to define our class definition, so add the following under the
    `import` statement:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要定义我们的类定义，因此请在`import`语句下添加以下内容：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Inside of the class declaration, add the following variables:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类声明内部，添加以下变量：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that we are keeping our array private since there is no reason to have
    to access this outside of the class.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们保持数组为私有，因为没有理由需要在类外部访问它。
- en: 'Now, let''s add the following methods inside of our class declaration, after
    our variables:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们在我们的类声明中，变量之后添加以下方法：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Your file should now look as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您的文件现在应该看起来如下所示：
- en: '![](img/2bcd192a-e1e5-4172-8004-d017480bbd7b.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2bcd192a-e1e5-4172-8004-d017480bbd7b.png)'
- en: 'The `fetch()` and `loadData()` methods are the same as those that we had in
    the `ExploreDataManager` file. However, the `fetch()` method here has something
    new inside of its parameters, specifically:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`fetch()`和`loadData()`方法与我们在`ExploreDataManager`文件中的方法相同。然而，这里的`fetch()`方法在其参数中有一个新的内容，具体如下：'
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This is called a **closure block**, which allows us to signify when we have
    completed the method, and it then dictates an action to occur (here, returning
    an array of annotations). We will use these annotations to load pins on our map.
    We are looping through the `for...in` loop; when we are done, we call `completion()`.
    When we get to our `MapViewController `, you will see how we write this.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这被称为**闭包块**，它允许我们表示方法何时完成，然后指定要执行的操作（在这里，返回一个注释数组）。我们将使用这些注释在地图上加载标记。我们正在使用`for...in`循环；当我们完成时，我们调用`completion()`。当我们到达`MapViewController`时，你会看到我们如何编写这个。
- en: 'Now, let''s take a look at our `MapLocations.plist` file:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看我们的`MapLocations.plist`文件：
- en: '![](img/ed176a87-db00-4a86-82c5-c551ee97cf59.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ed176a87-db00-4a86-82c5-c551ee97cf59.png)'
- en: This file is the same structure as our `ExploreData.plist` file. Our `Root`
    is an array, and each item inside of our `Root` is a dictionary item. There is
    an acronym that many programmers call  **DRY** (**don't repeat yourself**). Since
    both plist files have an array of dictionary objects, we can update our code so
    that we can use the same method in multiple places.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件结构与我们的`ExploreData.plist`文件相同。我们的`Root`是一个数组，`Root`中的每个项目都是一个字典项。许多程序员称之为**DRY**（**不要重复自己**）的缩写。由于两个plist文件都有字典对象的数组，我们可以更新我们的代码，以便在多个地方使用相同的方法。
- en: Creating a base class
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建基类
- en: 'To keep from repeating ourselves, we are going to create a base class. This
    base class will have a new method called `load(file name:)`, but we will add a
    parameter to pass the file name. Let''s create a `DataManager` file now under
    our `Common` folder:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免重复，我们将创建一个基类。这个基类将有一个名为`load(file name:)`的新方法，但我们将添加一个参数来传递文件名。现在让我们在我们的`Common`文件夹下创建一个`DataManager`文件：
- en: Right-click on the `Misc` folder and select New File.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`Misc`文件夹并选择新建文件。
- en: 'In the Choose a template for your new file screen, select iOS at the top and
    then Swift File. Then hit Next:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择新文件模板的屏幕上，顶部选择iOS，然后选择Swift文件。然后点击下一步：
- en: Name this file `DataManager`, and then hit Create.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件命名为`DataManager`，然后点击创建。
- en: 'In this new file, we need to define our class definition; therefore, add the
    following under the `import` statement:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个新文件中，我们需要定义我们的类定义；因此，请在`import`语句下添加以下内容：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Inside of the protocol declaration, add the following method:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在协议声明内部，添加以下方法：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, create an extension under the protocol:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在协议下创建一个扩展：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Inside of the `extension` declaration, add the following:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`extension`声明内部，添加以下内容：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'When you are done, your file should look like mine:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你完成时，你的文件应该看起来像我的一样：
- en: '![](img/7fca202f-6951-4241-8e93-3ff9ee20a22a.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7fca202f-6951-4241-8e93-3ff9ee20a22a.png)'
- en: Other than changing the function name to include parameters, we created the
    same function as we have in our `Explore` and `Map Data Manager` files. However,
    this function here is no longer a `private` method, because we want it to be accessible
    to any class that wants to use it.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 除了将函数名称更改为包含参数外，我们还创建了与我们在 `Explore` 和 `Map Data Manager` 文件中相同的函数。然而，这里的函数不再是一个
    `private` 方法，因为我们希望它对任何想要使用它的类都是可访问的。
- en: By creating a protocol, we are using what is known as protocol-oriented programming.
    We will not get too heavily into the detail of this since there are plenty of
    books and videos on this topic. The central concept that you will want to understand
    is that we can use this in any class we want and have access to the `load(name:)`
    method.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 通过创建一个协议，我们正在使用所谓的面向协议编程。由于关于这个主题有很多书籍和视频，我们不会深入细节。您需要理解的核心概念是，我们可以在任何我们想要的类中使用它，并且可以访问
    `load(name:)` 方法。
- en: This is all we need to do in this file.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们在这个文件中需要做的所有事情。
- en: Refactoring code
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构代码
- en: 'Now that we have created this new protocol, we can access it anywhere we need
    it. Let''s first update our `MapDataManger` class to use our newly created protocol:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了新的协议，我们可以在需要的地方访问它。让我们首先更新我们的 `MapDataManger` 类以使用我们刚刚创建的新协议：
- en: Delete the `loadData()` function, because we will not need it anymore. You will
    see an error after you delete the `loadData()` method. This error is happening
    because we need to give the `fetch()` method a filename to load whenever we call
    the `loadData()` method. We will fix this shortly.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除 `loadData()` 函数，因为我们不再需要它了。您将在删除 `loadData()` 方法后看到错误。这个错误发生是因为我们需要在调用 `loadData()`
    方法时给 `fetch()` 方法提供一个文件名来加载。我们很快就会修复这个问题。
- en: 'Next, we need to update our class declaration to say:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要更新我们的类声明，使其如下所示：
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We now have our `MapDataManager` class using our `DataManager` protocol, which
    means that we will use the `load(name:)` method from our `DataManager` inside
    of our `MapDataManager`.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们的 `MapDataManager` 类正在使用我们的 `DataManager` 协议，这意味着我们将在 `MapDataManager`
    中使用 `DataManager` 协议中的 `load(name:)` 方法。
- en: 'Now, let''s fix the error by updating our `fetch()` method from our data in
    `loadData()` to the following:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们通过更新我们的 `fetch()` 方法来修复错误，从 `loadData()` 中的数据更新到以下内容：
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Your updated file should now look like the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您更新后的文件现在应该看起来像以下这样：
- en: '![](img/fc3744ca-5cf2-403e-8f97-e3fb23d172d4.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fc3744ca-5cf2-403e-8f97-e3fb23d172d4.png)'
- en: We removed the error in our `MapDataManager`, but we need to do some refactoring
    of our `ExploreDataManager` file to do the same.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经修复了 `MapDataManager` 中的错误，但我们需要对 `ExploreDataManager` 文件进行一些重构以执行相同的操作。
- en: Refactoring ExploreDataManager
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构 ExploreDataManager
- en: 'Because our `loadData()` was written the same in both the `ExploreDataManager`
    and `MapDataManager` files, we need to update our `ExploreDataManager` in the
    same way we just did for the `MapDataManager`. Open `ExploreDataManager` and do
    the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的 `loadData()` 函数在 `ExploreDataManager` 和 `MapDataManager` 文件中都是相同的，我们需要以与刚才更新
    `MapDataManager` 相同的方式更新我们的 `ExploreDataManager`。打开 `ExploreDataManager` 并执行以下操作：
- en: Delete the private `loadData()` function, because we will not need it anymore.
    Again, ignore the error as we are going to fix this shortly.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除私有的 `loadData()` 函数，因为我们不再需要它了。再次忽略错误，因为我们很快就会修复它。
- en: 'Next, update our class declaration to now say:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，更新我们的类声明，现在应该如下所示：
- en: '[PRE15]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, let''s fix the error by updating our `fetch()` method from for data in
    `loadData()` to the following:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们通过更新我们的 `fetch()` 方法来修复错误，从 `loadData()` 中的数据更新到以下内容：
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Your updated function should now look like the following:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您更新后的函数现在应该看起来像以下这样：
- en: '[PRE17]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We have completed refactoring our files, and we can now use the same method
    any time we need to load a plist that has an array of dictionary items.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了文件的重构，现在我们可以随时使用相同的方法来加载具有字典项数组的 plist 文件。
- en: Refactoring is something with which you will become more comfortable the more
    you write code. Understanding when to refactor is a bit harder when you first
    start out because you are still learning. The most prominent indicator that you
    need to refactor is when you have written something more than once. However, refactoring
    does not always work for everything; at times, writing the same code more than
    once can be unavoidable. Just being aware of when refactoring may be useful is
    a good sign, and half the battle to a greater understanding of this method. I
    have been coding for years; there will be times when I copy and paste something
    I wrote to see if it works and then never refactor. Then, months later, I will
    wonder why I did not write a method to handle it in both places.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 重构是你随着代码编写量的增加而变得越来越熟悉的事情。当你刚开始时，理解何时重构会有些困难，因为你还在学习。你需要重构的最明显迹象是当你写了一些东西不止一次时。然而，重构并不总是适用于所有情况；有时，写相同的代码多次可能是不可避免的。仅仅意识到重构可能有用是一个好迹象，这是理解这种方法的一半战斗。我已经编程多年；有时我会复制粘贴我写的代码来测试它是否工作，然后从不重构。然后，几个月后，我会
    wonder 为什么我没有在两个地方都写一个处理它的方法。
- en: Creating and adding annotations
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建并添加注释
- en: Now, we need to get our map hooked up and start getting the annotations displaying
    on the map. Then, we will customize our annotations to look like those in our
    design.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要将我们的地图连接起来，并开始显示地图上的注释。然后，我们将自定义注释以使其看起来像我们的设计。
- en: Creating our Map View Controller
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的地图视图控制器
- en: 'We need to create our `MapViewController` file and then connect it with our
    `UIViewController` and map view in storyboard. First, let''s create this file:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建我们的“MapViewController”文件，并将其与Storyboard中的“UIViewController”和地图视图连接起来。首先，让我们创建这个文件：
- en: In the Navigator panel, right-click on the `Controller` folder in the `Map`
    folder and select New File.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航面板中，在“地图”文件夹下的“控制器”文件夹上右键单击，然后选择“新建文件”。
- en: In the Choose a template for your new file screen, select iOS at the top and
    then Cocoa Touch Class. Then hit Next.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“选择新文件模板”屏幕上，顶部选择iOS，然后选择Cocoa Touch Class。然后点击“下一步”。
- en: 'Add the following to the Options screen that appears:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的选项屏幕上添加以下内容：
- en: New file*:*
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 新文件：*
- en: 'Class: `MapViewController`'
  id: totrans-117
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类：`MapViewController`
- en: 'Subclass: `UIViewController`'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子类：`UIViewController`
- en: 'Also create XIB: Unchecked'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 也创建XIB：未选中
- en: 'Language: `Swift`'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语言：`Swift`
- en: Click Next and then Create.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“下一步”然后点击“创建”。
- en: Under the `import UIKit` statement, add `import MapKit`.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“import UIKit”语句下，添加“import MapKit”。
- en: 'Update your class declaration to include the following subclass:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新你的类声明，包括以下子类：
- en: '[PRE18]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Let''s now connect this file with our `UIViewController` and our map view in
    storyboard:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将此文件与Storyboard中的“UIViewController”和地图视图连接起来：
- en: 'Add the following after the class declaration:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类声明之后添加以下内容：
- en: '[PRE19]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Open your `Map.storyboard` file.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的“Map.storyboard”文件。
- en: In the Outline view, select the View Controller that contains the map view.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在大纲视图中，选择包含地图视图的视图控制器。
- en: Now, in the Utilities panel, select the Identity inspector.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在“实用工具”面板中，选择“身份检查器”。
- en: Under Custom Class, in the Class drop-down menu, select `MapViewController`
    and hit *Enter* in order to connect the View Controller to the class.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“自定义类”下，在类下拉菜单中选择“MapViewController”，然后按*Enter*以将视图控制器连接到类。
- en: Now, select the Connections inspector.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，选择连接检查器。
- en: Under the Outlets section, you will see an empty circle next to `mapView`. Click
    and drag the outlet to the map view in the View Controller in the Outline view.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“输出口”部分，你会在“mapView”旁边看到一个空圆圈。点击并拖动输出口到大纲视图中的视图控制器中的地图视图。
- en: 'We are going to start working with our map, but first we need to add some things
    to our `MapDataManager`:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开始使用我们的地图，但首先我们需要向我们的“MapDataManager”添加一些内容：
- en: Open the `MapDataManager.swift` file in the Navigator panel; underneath the
    `import Foundation` statement, add `import MapKit`.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航面板中打开“MapDataManager.swift”文件；在“import Foundation”语句下方，添加“import MapKit”。
- en: 'Next, add the following method to our `MapDataManager`:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，向我们的“MapDataManager”添加以下方法：
- en: '[PRE20]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Before we delve into the particular sections of this function, we need to understand
    what this function does. When you use a map and drop pins down onto it, you want
    the map to zoom into a particular area. To zoom in on a map, you need a latitude
    and longitude. What this method is doing is grabbing the first pin (or annotation)
    in the array and zooming in on the area:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入这个函数的特定部分之前，我们需要了解这个函数的作用。当你使用地图并在其上放置图钉时，你希望地图放大到特定的区域。要放大地图，你需要纬度和经度。这个方法所做的就是抓取数组中的第一个图钉（或注释）并放大到该区域：
- en: '![](img/4cc38cce-0099-4be6-a9f9-57a8ce09f582.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4cc38cce-0099-4be6-a9f9-57a8ce09f582.png)'
- en: 'Let''s break down the code:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下代码：
- en: '**Part A**: Our method has two parameters, both of which are `CLLocationDegrees`.
    It is just a class that represents a latitude or longitude coordinate in degrees:'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**A部分**：我们的方法有两个参数，它们都是`CLLocationDegrees`。它只是一个表示纬度或经度坐标的度数的类：'
- en: '[PRE21]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '**Part B**: This `guard` statement obtains the first item in the array. If
    there are no items in the array, it will just return an empty coordinate region.
    If there are items in the array, it will return the coordinate region:'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**B部分**：这个`guard`语句获取数组中的第一个项目。如果没有项目在数组中，它将只返回一个空的坐标区域。如果有项目在数组中，它将返回坐标区域：'
- en: '[PRE22]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '**Part C**: Here, we are creating an `MKCoordinate` with the latitude and longitude
    that we passed into the function. `MKCoordinateSpan` defines a span, in the latitude
    and longitude directions, to show on the map:'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**C部分**：在这里，我们使用传递给函数的纬度和经度创建了一个`MKCoordinate`。`MKCoordinateSpan`定义了在纬度和经度方向上显示在地图上的跨度：'
- en: '[PRE23]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '**Part D**: Lastly, we are setting the center and the span of our region and
    returning them so that when the pins drop, the map can zoom in on the area:'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**D部分**：最后，我们正在设置区域的中心和跨度，并返回它们，这样当图钉落下时，地图可以放大到该区域：'
- en: '[PRE24]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now, let''s set up our `MapViewController` to display annotations:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们设置我们的`MapViewController`以显示注释：
- en: Open the `MapViewController.swift` file in the Navigator panel and delete both
    `didReceiveMemoryWarning()` and `prepare()` (which has been commented out), as
    we do not need them for our purposes.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航面板中打开`MapViewController.swift`文件，并删除`didReceiveMemoryWarning()`和`prepare()`（已被注释），因为我们不需要它们来完成我们的任务。
- en: 'Directly under our `IBOutlet` statement, add the following:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`IBOutlet`语句下面直接添加以下内容：
- en: '[PRE25]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then, inside of the class definition, add the following method after `viewDidLoad()`:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在类定义内部，在`viewDidLoad()`方法之后添加以下方法：
- en: '[PRE26]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In this method, we are doing a couple of things. We first pass annotations through
    the parameter. When we call `fetch()` and it is completed, it will return the
    array of annotations. We will pass that array over to our `addMap(_ annotations:)`
    to use. Next, we set the region by obtaining it from our `MapDataManager`, thus
    setting the latitude and longitude delta. This will set our zoom and region for
    our map. Once we have that, we then pass all of our annotations for the map to
    display.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个方法中，我们做了几件事情。我们首先通过参数传递注释。当我们调用`fetch()`并且完成时，它将返回注释的数组。我们将这个数组传递给我们的`addMap(_
    annotations:)`方法以供使用。接下来，我们通过从我们的`MapDataManager`获取它来设置区域，从而设置纬度和经度增量。这将设置我们地图的缩放和区域。一旦我们有了这些，我们就将所有注释传递给地图以显示。
- en: 'Therefore, we need to have our manager fetch the annotations:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要让我们的经理去获取注释：
- en: 'Add the following method above `addMap(_ annotations:)`:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在`addMap(_ annotations:)`方法上方添加以下方法：
- en: '[PRE27]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Inside of the `initialize()` method, we are setting the map delegate to the
    class. In previous chapters, we did this using storyboard; however, you can also
    do this with code. This line allows us to be notified when the user taps on an
    annotation or taps the disclosure indicator in the annotation.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在`initialize()`方法内部，我们将地图代理设置到这个类。在前面的章节中，我们使用Storyboard来做这件事；然而，你也可以用代码来做。这一行允许我们在用户点击注释或点击注释中的展开指示器时得到通知。
- en: Earlier in this chapter, we created a `fetch()` method in the `MapDataManager`,
    wherein we used a closure block. This closure block requires that we wrap it in
    curly braces. Once the `completion()` block is called in the manager, everything
    inside of the curly braces will run. For our purposes in building this app, we
    are going to have a small number of pins or annotations ; therefore, we do not
    need a completion block. However, if you have 100 or 500 annotations, for instance,
    a closure block would be more efficient. We will do more with this later so that
    you can get more practice with closure blocks.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的早期，我们在`MapDataManager`中创建了一个`fetch()`方法，其中我们使用了闭包块。这个闭包块要求我们用大括号将其包裹起来。一旦在管理器中调用`completion()`块，大括号内的所有内容都将执行。对于构建此应用程序的目的，我们将只有少量图钉或注释；因此，我们不需要完成块。然而，如果你有100个或500个注释，例如，闭包块将更加高效。我们稍后会做更多，这样你就可以更多地练习闭包块。
- en: Add `initialize()` inside of `viewDidLoad()` so that everything will run when
    the view loads.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在`viewDidLoad()`中添加`initialize()`，以确保在视图加载时一切都会运行。
- en: Before you build, make sure that you add the `MapLocations.plist` file into
    the `maps` folder. This file is in the book `assets` folder for this chapter.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建之前，请确保将`MapLocations.plist`文件添加到`maps`文件夹中。这个文件位于本书的`assets`文件夹中。
- en: 'Let''s build and run the project by hitting the Play button (or use *cmd* +
    *R*):'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击播放按钮（或使用*cmd* + *R*）构建并运行项目：
- en: '![](img/9a2ef4a7-a905-41ee-b32a-9774d5b2e5cf.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9a2ef4a7-a905-41ee-b32a-9774d5b2e5cf.jpg)'
- en: We now have pins on our map, but we need to update them so that they look more
    like the ones in our design. Let's learn how to customize the annotations in our
    map.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在在地图上有了图钉，但我们需要更新它们，使它们看起来更像我们的设计。让我们学习如何自定义地图中的注释。
- en: Creating custom annotations
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义注释
- en: If you have ever owned an iPhone and used Apple Maps, you will be familiar with
    pins. When you have a map inside of your app, having custom pins (annotations)
    gives your app a bit more polish. Let's create our custom annotations.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经拥有过iPhone并使用过Apple Maps，你将熟悉图钉。当你应用程序内有地图时，拥有自定义图钉（注释）可以让你的应用程序看起来更加精致。让我们创建我们的自定义注释。
- en: 'Open up `MapViewController` in the Navigator panel and add the following directly
    under the `addMap(_ annotations:)` method:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在导航器面板中打开`MapViewController`，并在`addMap(_ annotations:)`方法下直接添加以下内容：
- en: '[PRE28]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Let''s break down this code so we can better understand what we are doing.
    We will break the function down into the following sections:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解这段代码，以便我们更好地理解我们在做什么。我们将函数分解为以下部分：
- en: '![](img/010d2d74-222c-4158-b899-ebdc03e5460e.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/010d2d74-222c-4158-b899-ebdc03e5460e.png)'
- en: 'Let''s start with A:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从A开始：
- en: '**Part A**: This method will call the `mapView.delegate` we set up earlier,
    when annotations need to be placed. We will use this method to grab the annotations
    before they are placed and replace the default pins with custom pins:'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部分A**：此方法将在需要放置注释时调用我们之前设置的`mapView.delegate`。我们将使用此方法在放置之前获取注释，并用自定义图钉替换默认图钉：'
- en: '[PRE29]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '**Part B**: Here, we set an identifier, similar to those that we set when using
    Collection Views and Table Views:'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部分B**：在这里，我们设置了一个标识符，类似于我们在使用集合视图和表格视图时设置的标识符：'
- en: '[PRE30]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '**Part C**: This guard will ensure that our annotation is not the user location.
    If the annotation is the user location, the `guard` will return `nil`. Otherwise,
    it will move on through the method:'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部分C**：这个`guard`将确保我们的注释不是用户位置。如果注释是用户位置，`guard`将返回`nil`。否则，它将继续通过方法：'
- en: '[PRE31]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '**Part D**: `MKAnnotationView` is the class name for the pin; here, we create
    a variable that we can use to set our custom image:'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部分D**：`MKAnnotationView`是图钉的类名；在这里，我们创建了一个变量，我们可以用它来设置我们的自定义图片：'
- en: '[PRE32]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '**Part E**: In this statement, we are checking to see whether there are any
    annotations already created that we can reuse. If so, we point them to the variable
    we just added previously. Otherwise, we create the annotation in the next `else`
    statement:'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部分E**：在这个语句中，我们检查是否已经创建了可以重用的任何注释。如果是这样，我们将它们指向我们之前添加的变量。否则，我们在下一个`else`语句中创建注释：'
- en: '[PRE33]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '**Part F**: If there are no annotations to reuse, we create a new `MKAnnotationView`
    and give it a callout with a button. A callout is a bubble that appears above
    the annotation when you tap it to display the title (restaurant name) and subtitle
    (cuisines) associated with that annotation. If the user selects this callout button,
    the user is taken to the restaurant detail view:'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第F部分**：如果没有可重用的注释，我们创建一个新的`MKAnnotationView`，并给它一个带有按钮的呼出窗口。呼出窗口是一个气泡，当你点击它时出现在注释上方，以显示与该注释相关联的标题（餐厅名称）和副标题（菜系）。如果用户选择此呼出按钮，用户将被带到餐厅详情视图：'
- en: '[PRE34]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '**Part G**: Here is where we make sure that our custom annotation will show
    a callout. We also set our custom image for our annotation:'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第G部分**：在这里，我们确保我们的自定义注释将显示呼出窗口。我们还为我们的注释设置了自定义图像：'
- en: '[PRE35]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '**Part H**: Once we are finished going through the method, we return our custom
    annotation to the map. This method is called for every annotation that appears
    on the map:'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第H部分**：一旦我们完成方法的学习，我们将我们的自定义注释返回到地图。此方法为地图上出现的每个注释调用：'
- en: '[PRE36]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Let''s build and run the project by hitting the Play button (or use *cmd* +
    *R*):'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击播放按钮（或使用*cmd* + *R*）来构建和运行项目：
- en: '![](img/7a48e52d-37f6-44a6-bea4-6698780d423b.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7a48e52d-37f6-44a6-bea4-6698780d423b.jpg)'
- en: We now have custom annotations displaying on our map. Each pin's callout shows
    the restaurant name as well as the cuisines for the restaurant associated with
    that particular pin. If you tap on the callout, the restaurant detail disclosure
    does not yet work. Let's now set that up.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的自定义注释已显示在地图上。每个图钉的呼出窗口显示餐厅名称以及与该特定图钉关联的餐厅的菜系。如果你点击呼出窗口，餐厅详情展开功能尚未工作。让我们现在设置它。
- en: Map to restaurant detail
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 地图到餐厅详情
- en: For us to go to the restaurant detail from the callout, we need to update our
    app so that our map can also open the restaurant detail. To do this, we must first
    create a storyboard reference.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从呼出窗口导航到餐厅详情，我们需要更新我们的应用程序，以便我们的地图也可以打开餐厅详情。为此，我们必须首先创建一个故事板引用。
- en: Creating a storyboard reference
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建故事板引用
- en: 'In order to link to the restaurant detail from the map, we need to create a
    storyboard reference:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从地图链接到餐厅详情，我们需要创建一个故事板引用：
- en: 'Open the `Map.storyboard`, and in the object library of the Utilities panel,
    drag a Storyboard Reference into the `Map.storyboard` scene:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Map.storyboard`，在实用工具面板的对象库中，将Storyboard Reference拖动到`Map.storyboard`场景中：
- en: '![](img/ff07caac-9b83-4a85-a15d-093338c29c3b.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ff07caac-9b83-4a85-a15d-093338c29c3b.png)'
- en: 'Next, select the Attributes inspector in the Utilities panel, and update the
    storyboard under Storyboard Reference to say `RestaurantDetail`. Then, hit *Enter*:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在实用工具面板中选择属性检查器，并将Storyboard Reference下的故事板更新为`RestaurantDetail`。然后，按*Enter*键：
- en: '![](img/6c84f149-da85-4ab4-8249-19366a0e05c6.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6c84f149-da85-4ab4-8249-19366a0e05c6.png)'
- en: '*Ctrl* + drag from the Map View controller to the storyboard reference we just
    created and select Show on the screen that appears. Note that you can *Ctrl* +
    drag from either the Map View controller in the Outline view or the Map View controller
    icon in the scene, as shown in the following screenshot:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*Ctrl* + 从地图视图控制器拖动到我们刚刚创建的故事板引用，并在出现的屏幕上选择显示。请注意，你可以从大纲视图中的地图视图控制器或场景中的地图视图控制器图标进行*Ctrl* +
    拖动，如图下所示：'
- en: '![](img/6fcc930a-141f-4d53-acde-fe720a4a720a.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6fcc930a-141f-4d53-acde-fe720a4a720a.png)'
- en: 'Select the segue connecting the Map View controller to the storyboard reference:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择连接地图视图控制器到故事板引用的segue：
- en: '![](img/3ed59446-782d-4014-9e5e-51c6c51cff02.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3ed59446-782d-4014-9e5e-51c6c51cff02.png)'
- en: 'In the Attributes inspector, update the Identifier under Storyboard Segue to
    say `showDetail`. Then, hit *Enter*:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性检查器中，更新Storyboard Segue下的标识符为`showDetail`。然后，按*Enter*键：
- en: '![](img/5be16611-379f-45e9-9132-d78fae981c35.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5be16611-379f-45e9-9132-d78fae981c35.png)'
- en: This identifier is what we are going to call whenever the restaurant detail
    disclosure is tapped. Let's connect our segue next.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 此标识符是我们每次点击餐厅详情展开时将要调用的。让我们接下来连接我们的segue。
- en: Map to restaurant detail
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 地图到餐厅详情
- en: 'Before we connect our segue, we should create an enumeration (an `enum` for
    short) to keep track of our segues. An `enum` is a user-defined data type that
    consists of a set of related values:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们连接segue之前，我们应该创建一个枚举（简称`enum`）来跟踪我们的segue。枚举是一种用户定义的数据类型，由一组相关值组成：
- en: Right-click on the `Misc` folder inside the `Common` folder and select New File.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Common`文件夹内的`Misc`文件夹上右键单击，并选择新建文件：
- en: In the Choose a template for your new file screen, select iOS at the top and
    then Swift File. Then hit Next.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择新文件模板的屏幕上，顶部选择iOS，然后选择Swift文件。然后点击下一步。
- en: Name this file `Segue` and hit Create.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件命名为`Segue`并点击创建。
- en: 'Under `import Foundation` in the new file, add the following:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新文件中的`import Foundation`下面添加以下代码：
- en: '[PRE37]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: We will eventually need all of these segues, so we can add them once. Whenever
    we use a new one, I will refer back to this file. The next thing we need is to
    know when the user taps the detail disclosure of the callout.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最终需要所有这些转场，所以我们可以一次性添加它们。每次我们使用一个新的转场时，我都会参考这个文件。接下来，我们需要知道当用户点击呼出视图的详情展开时。
- en: 'In the `MapViewController.swift` file, add the following under the `addMap(_
    annotations:)` method:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MapViewController.swift`文件中，在`addMap(_ annotations:)`方法下添加以下代码：
- en: '[PRE38]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We are using `performSegue()` to call our custom segue. Now, when you tap the
    annotation and then the callout, you will go to the restaurant-detail view:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`performSegue()`来调用我们的自定义转场。现在，当你点击注释然后点击呼出视图时，你将转到餐厅详情视图：
- en: '![](img/6359124d-3a55-493a-9f41-6b5889b3960a.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6359124d-3a55-493a-9f41-6b5889b3960a.png)'
- en: Let's build and run the project by hitting the Play button (or use *cmd* + *R*).
    We can now get to the restaurant detail view from the map.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击播放按钮（或使用*cmd* + *R*）来构建和运行项目。现在我们可以从地图中进入餐厅详情视图。
- en: Passing data to restaurant  detail
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将数据传递到餐厅详情
- en: In the next chapter, we are going to display the data in our restaurant detail.
    For now, we want to pass the data over to the detail view.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将展示餐厅详情中的数据。现在，我们想要将数据传递到详情视图中。
- en: 'To make this work, we need to update both our `RestaurantDetailViewController`
    (which we have not created yet) and the `MapViewController`. Let''s create the
    `RestaurantDetailViewController`:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个功能正常工作，我们需要更新我们的`RestaurantDetailViewController`（我们尚未创建）和`MapViewController`。让我们创建`RestaurantDetailViewController`：
- en: Right-click on the `Restaurant` folder and create a new group named `Restaurant
    Detail`.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`Restaurant`文件夹，创建一个名为`Restaurant Detail`的新组。
- en: Then, right-click on the new `Restaurant Detail` folder and create a new group
    named `Controller`.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，右键点击新的`Restaurant Detail`文件夹，创建一个名为`Controller`的新组。
- en: Next, right-click on the new `Controller` folder and select New File.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，右键点击新的`Controller`文件夹并选择新建文件。
- en: In the Choose a template for your new file screen, select iOS at the top and
    then Cocoa Touch Class. Then hit Next.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择新文件模板的屏幕上，顶部选择iOS，然后选择Cocoa Touch类。然后点击下一步。
- en: 'In the Options screen, add the following:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选项屏幕中添加以下代码：
- en: 'New file:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 新文件：
- en: 'Class: `RestaurantDetailViewController`'
  id: totrans-229
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类：`RestaurantDetailViewController`
- en: 'Subclass: `UITableViewController`'
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子类：`UITableViewController`
- en: 'Also create XIB: Unchecked'
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 也创建XIB：未选中
- en: 'Language: `Swift`'
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语言：`Swift`
- en: Click Next and then Create.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下一步然后创建。
- en: Delete everything after the `viewDidLoad()` method, as we do not need all of
    the other code.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`viewDidLoad()`方法之后的所有内容，因为我们不需要其他所有代码。
- en: 'Your file should now look as follows:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 你的文件现在应该看起来如下：
- en: '![](img/bf9fc78d-ca66-4b06-bdb9-92b927128b4b.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bf9fc78d-ca66-4b06-bdb9-92b927128b4b.png)'
- en: 'Next, inside of the class declaration, add the following:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在类声明内部，添加以下代码：
- en: '[PRE39]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Then, add the following code inside of `viewDidLoad()`:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`viewDidLoad()`内部添加以下代码：
- en: '[PRE40]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Your file should now look like the following:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的文件现在应该如下所示：
- en: '![](img/fe186c1e-0e40-4d7f-84b2-286a39dc9f00.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fe186c1e-0e40-4d7f-84b2-286a39dc9f00.png)'
- en: Open your `RestaurantDetail.storyboard` file.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的`RestaurantDetail.storyboard`文件。
- en: In the Outline view, select the Table View Controller.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在大纲视图中选择表格视图控制器。
- en: In the Utilities panel, select the Identity inspector.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在工具面板中选择身份检查器。
- en: Under Custom Class, in the Class drop-down menu, select RestaurantDetailViewController
    and hit *Enter* in order to connect the View Controller to the class.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在自定义类下，在类下拉菜单中选择RestaurantDetailViewController，然后按*Enter*以将视图控制器连接到该类。
- en: This is all we need to do in `RestaurantDetailViewController`. Next, we need
    to update our `MapViewController`**:**
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们在`RestaurantDetailViewController`中需要做的所有事情。接下来，我们需要更新我们的`MapViewController`**：
- en: Open the `MapViewController.swift` file.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MapViewController.swift`文件。
- en: 'Directly under where we declare our manager, add the following code:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 直接在我们声明管理器的地方下面，添加以下代码：
- en: '[PRE41]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Then, add the following code into the `calloutAccessoryControlTapped()` method
    above `performSegue`:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将以下代码添加到`calloutAccessoryControlTapped()`方法中，位于`performSegue`之上：
- en: '[PRE42]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Your file should now look as follows:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 你的文件现在应该看起来如下：
- en: '![](img/dbbe86b3-c822-4e56-892c-9e04dd0cdddc.png)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dbbe86b3-c822-4e56-892c-9e04dd0cdddc.png)'
- en: 'Next, add the following code after `viewDidLoad()`:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`viewDidLoad()`之后添加以下代码：
- en: '[PRE43]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: You will see an error, but ignore it as we are going to fix this in the next
    step.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到一个错误，但请忽略它，因为我们将在下一步中修复它。
- en: Whenever we transition with a segue, this method gets called. First, we check
    for the `showDetail` identifier; if this identifier is called, we want to do something
    (in this case, get the selected restaurant and pass it to the detail view) before
    we transition.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们通过过渡进行转换时，这个方法都会被调用。首先，我们检查 `showDetail` 标识符；如果这个标识符被调用，我们想在转换之前做些事情（在这种情况下，获取选定的餐厅并将其传递到详细视图）。
- en: 'Add the following code after the `addMap(_ annotations:)` method:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `addMap(_ annotations:)` 方法之后添加以下代码：
- en: '[PRE44]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Here, we are checking to make sure that the segue destination is  the `RestaurantDetailViewController`;
    if so, we make sure that we have a selected restaurant. When it is confirmed that
    the segue destination is  the `RestaurantDetailViewController` and we have a selected
    restaurant, we use the `selectedRestaurant` variable that we created in `RestaurantDetailViewController`
    and set it to the selected restaurant in `MapViewController`.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在检查确保过渡目标为 `RestaurantDetailViewController`；如果是的话，我们确保我们有一个选定的餐厅。当确认过渡目标为
    `RestaurantDetailViewController` 并且我们有一个选定的餐厅时，我们使用在 `RestaurantDetailViewController`
    中创建的 `selectedRestaurant` 变量并将其设置为 `MapViewController` 中的选定餐厅。
- en: 'Your file should now look like the following with the two new methods we just
    added:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 您的文件现在应该看起来像以下内容，包括我们刚刚添加的两个新方法：
- en: '![](img/c97dcc80-0118-4dab-844b-7619b176b625.png)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c97dcc80-0118-4dab-844b-7619b176b625.png)'
- en: 'Let''s build and run the project by hitting the Play button (or using *cmd *+
    *R*) and test whether we can pass data to our `RestaurantDetailViewController`.
    You should see the following in your Debug panel, if everything worked:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过点击播放按钮（或使用 *cmd + R*）来构建和运行项目，并测试我们是否可以向 `RestaurantDetailViewController`
    传递数据。如果一切正常，你应该在你的调试面板中看到以下内容：
- en: '![](img/ec849fcd-7def-4ce6-bd0e-4f2b10deaf8f.png)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec849fcd-7def-4ce6-bd0e-4f2b10deaf8f.png)'
- en: We now have our `RestaurantDetailViewController` capable of receiving data;
    in the next chapter, we will display that data. However, before we write any more
    code, we should organize our code a bit better.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的 `RestaurantDetailViewController` 能够接收数据；在下一章中，我们将展示这些数据。然而，在我们编写更多代码之前，我们应该更好地组织我们的代码。
- en: Organizing your code
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织你的代码
- en: Earlier, we wrote an extension for our `DataManager`; extensions are useful
    for adding your functionality onto standard libraries, structs, or classes—such
    as arrays, ints, and strings—or onto your data types.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们为我们的 `DataManager` 编写了一个扩展；扩展对于将你的功能添加到标准库、结构体或类（如数组、整数和字符串）或你的数据类型非常有用。
- en: 'Here is an example. Let''s say that you wanted to know the length of a string:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子。假设你想知道一个字符串的长度：
- en: '[PRE45]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: For us to access the count of the string, we would need to access the characters
    and then get a count.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 为了访问字符串的计数，我们需要访问字符然后获取计数。
- en: 'Let''s simplify this by creating an extension:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过创建一个扩展来简化这个操作：
- en: '[PRE46]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'With this  newly created `String` extension, we can now access the count by
    writing the following:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个新创建的 `String` 扩展，我们现在可以通过编写以下内容来访问计数：
- en: '[PRE47]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: As you can see, extensions are very powerful by enabling us to add extra functionality
    without having to change the main class or struct.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，扩展非常强大，它使我们能够添加额外的功能，而无需更改主类或结构体。
- en: 'Up until now, we have paid very little attention to file structure and more
    attention to understanding what we are writing. Organizing your code is also very
    important, which is why we are going to refactor our code. The refactoring will
    mostly consist of copying and pasting code that you have already written. Extensions
    can help us organize our code better and stay away from cluttering our View Controllers.
    Also, we can extend the functionality of View Controllers through extensions.
    We are going to update four classes: `ExploreViewController`, `RestaurantListViewController`,
    `LocationViewController`, and `MapViewController`.'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们很少关注文件结构，更多地关注理解我们在写什么。组织你的代码也非常重要，这就是为什么我们要重构我们的代码。重构将主要涉及复制和粘贴你已经写过的代码。扩展可以帮助我们更好地组织代码，并避免在
    View Controllers 中造成混乱。此外，我们还可以通过扩展来扩展 View Controllers 的功能。我们将更新四个类：`ExploreViewController`、`RestaurantListViewController`、`LocationViewController`
    和 `MapViewController`。
- en: Refactoring ExploreViewController
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构 ExploreViewController
- en: 'We are going to divide our View Controller into distinct sections using what
    is known as a `MARK` comment. Let''s start with our `ExploreViewController`:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用所谓的 `MARK` 注释将我们的 View Controller 划分为不同的部分。让我们从我们的 `ExploreViewController`
    开始：
- en: 'In the `ExploreViewController` file, after the last curly brace, hit *Enter*
    a couple of times and add the following code (remember this should be outside
    of the class, not inside):'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ExploreViewController` 文件中，在最后一个花括号之后，按几次 *Enter* 并添加以下代码（记住，这应该在类外部，而不是内部）：
- en: '[PRE48]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Here, we are creating two extensions. Our first one will be private and will
    be where we add any methods that we create that we need for this controller. Our
    second one is an extension that just deals with our `collectionview` data source.
    Let's keep going for now.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了两个扩展。我们的第一个扩展将是私有的，我们将在这里添加任何我们需要为这个控制器创建的方法。我们的第二个扩展只处理我们的 `collectionview`
    数据源。让我们继续。
- en: 'We currently have an error because we are using `UICollectionViewDataSource`
    in two places. Delete `UICollectionViewDataSource` (including the comma) from
    the class definition at the top of the file:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们目前有一个错误，因为我们同时在两个地方使用了 `UICollectionViewDataSource`。从文件顶部的类定义中删除 `UICollectionViewDataSource`（包括逗号）：
- en: '![](img/7f207b0f-2d93-4012-8fd1-1ff0fb157160.png)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7f207b0f-2d93-4012-8fd1-1ff0fb157160.png)'
- en: 'Now, let''s move all of our `CollectionViewDataSource` methods into our extension.
    You should be moving the following:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们将所有的 `CollectionViewDataSource` 方法移动到我们的扩展中。你应该移动以下内容：
- en: '![](img/9381b58f-41ce-4045-9780-932af2529374.png)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9381b58f-41ce-4045-9780-932af2529374.png)'
- en: 'Your file, including the extension, should now look as follows:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 你的文件，包括扩展，现在应该看起来如下：
- en: '![](img/28d74e84-b424-4a99-b828-acb98af1020a.png)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![](img/28d74e84-b424-4a99-b828-acb98af1020a.png)'
- en: 'Now, you are probably wondering why we created the `private` extension. Well,
    one thing that I try to do is keep `viewDidLoad()` as clean as possible. Instead
    of writing a ton of code inside of `viewDidLoad()`, I like to create an `initialize()`
    method and call that instead. This way, it''s clear to anyone going into my code
    what I am doing. Let''s add the following to our `private` extension:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能想知道我们为什么创建了 `private` 扩展。好吧，我试图做的一件事是尽可能保持 `viewDidLoad()` 的简洁。而不是在 `viewDidLoad()`
    中写很多代码，我喜欢创建一个 `initialize()` 方法并调用它。这样，任何进入我的代码的人都可以清楚地知道我在做什么。让我们向我们的 `private`
    扩展添加以下内容：
- en: '[PRE49]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Now we can call `initialize()` inside of `viewDidLoad()`. When you are done,
    you should see the following:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在 `viewDidLoad()` 中调用 `initialize()`。当你完成时，你应该看到以下内容：
- en: '[PRE50]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Now, this might seem like we wrote extra code for nothing, but as your classes
    grow, you will see the benefit of doing this. Before we clean up the other files,
    let's look at what the `MARK` comment does.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这可能会让你觉得我们为没有写任何代码，但随着你的类增长，你会看到这样做的好处。在我们清理其他文件之前，让我们看看 `MARK` 注释的作用。
- en: Using the MARK  comment
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 MARK 注释
- en: 'Currently, our `MARK` comment may seem like a useless comment in our code,
    but it is more powerful than you think. Look at the bottom bar that is located
    to the right of  the Play and Stop buttons in Xcode and look for the last arrow.
    Mine says `No Selection`, but if you have your cursor on a method you might see
    that instead:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的 `MARK` 注释可能看起来像代码中的无用注释，但它比你想象的要强大。看看位于播放和停止按钮右侧的底部栏，并寻找最后一个箭头。我的显示为
    `No Selection`，但如果你将光标放在一个方法上，你可能会看到这个：
- en: '![](img/9c289725-4e3c-48d4-a73f-83d8a7e8a3bf.png)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9c289725-4e3c-48d4-a73f-83d8a7e8a3bf.png)'
- en: 'Click on this last item and you will see the following:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 点击这个最后一个项目，你会看到以下内容：
- en: '![](img/ed4691f6-7997-4c4d-9a9e-e0e76fdfb5ee.jpg)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed4691f6-7997-4c4d-9a9e-e0e76fdfb5ee.jpg)'
- en: This shows all of your code divided just like our file. You can click on any
    method and the file will jump right to that method. Even if your file is long
    and you are looking for a method, you can use this technique to get where you
    need to be. We are done cleaning up our `ExploreViewController`.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了所有代码，就像我们的文件一样划分。你可以点击任何方法，文件就会直接跳转到那个方法。即使你的文件很长，你正在寻找一个方法，你也可以使用这个技术到达你需要的地方。我们已经完成了
    `ExploreViewController` 的清理。
- en: Refactoring RestaurantViewController
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构 RestaurantViewController
- en: 'We now know our structure, so let''s update our `RestaurantViewController`.
    Even though we do not currently have anything to put in our `private` extension,
    we will add it anyway as good practice:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道了我们的结构，所以让我们更新我们的 `RestaurantViewController`。即使我们目前没有东西要放在我们的 `private`
    扩展中，我们也会添加它作为良好的实践：
- en: 'Inside our `RestaurantViewController`, after the last curly brace, hit *Enter*
    a couple of times and add the following code (remember, this should be outside
    of the class, not inside):'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的 `RestaurantViewController` 中，在最后一个花括号之后，按几次 *Enter* 并添加以下代码（记住，这应该在类外部，而不是内部）：
- en: '[PRE51]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Next, delete the `UICollectionViewDataSource` subclass from the main class.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从主类中删除 `UICollectionViewDataSource` 子类。
- en: 'Now, let''s move all of our `CollectionViewDataSource` methods into our extension.
    You should be moving the following:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们把所有的 `CollectionViewDataSource` 方法移动到我们的扩展中。你应该移动以下内容：
- en: '![](img/0378461f-8d08-462d-a21b-5a8ef03bb0e4.png)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0378461f-8d08-462d-a21b-5a8ef03bb0e4.png)'
- en: 'Your file, including the extension, should now look as follows:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的文件，包括扩展，现在应该看起来如下：
- en: '![](img/e1ddb33b-bbc2-4cdf-bd6e-d9fca256f1cc.png)'
  id: totrans-308
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e1ddb33b-bbc2-4cdf-bd6e-d9fca256f1cc.png)'
- en: We successfully updated our `RestaurantListViewController`.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功更新了 `RestaurantListViewController`。
- en: 'Next, let''s take a look at our `LocationViewController`:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看我们的 `LocationViewController`：
- en: 'Inside of our `LocationViewController`, after the last curly brace, hit *Enter*
    a couple of times and add the following code (remember, this should be outside
    of the class, not inside):'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的 `LocationViewController` 中，在最后一个花括号之后，按几次 *Enter* 并添加以下代码（记住，这应该在类外部，而不是内部）：
- en: '[PRE52]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Next, remove the `UITableViewDataSource` subclass from the main class.
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从主类中移除 `UITableViewDataSource` 子类。
- en: 'Now, let''s move all of our `TableViewDataSource` methods into our extension.
    You should be moving the following:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们把所有的 `TableViewDataSource` 方法移动到我们的扩展中。你应该移动以下内容：
- en: '![](img/d4a987b9-112e-4474-9ee3-003203584906.png)'
  id: totrans-315
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d4a987b9-112e-4474-9ee3-003203584906.png)'
- en: 'Your file, including the extension, should now look as follows:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 你的文件，包括扩展，现在应该看起来如下：
- en: '![](img/090ab242-4ff1-44c2-a080-345999907d8a.png)'
  id: totrans-317
  prefs: []
  type: TYPE_IMG
  zh: '![](img/090ab242-4ff1-44c2-a080-345999907d8a.png)'
- en: 'Now, just like we did in our `ExploreViewController`, we want to create an
    `initialize()` method in our `private` extension and update `viewDidLoad()` to
    call `initialize()`. When you are done, your file should look like mine:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，就像我们在 `ExploreViewController` 中做的那样，我们想在 `private` 扩展中创建一个 `initialize()`
    方法，并将 `viewDidLoad()` 更新为调用 `initialize()`。当你完成时，你的文件应该看起来像我的：
- en: '![](img/b53e7ff9-2fec-4367-ab09-c020fd188551.png)'
  id: totrans-319
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b53e7ff9-2fec-4367-ab09-c020fd188551.png)'
- en: We finish by  cleaning up our `LocationViewController`. Finally, let's take
    a look at our `MapViewController`.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过清理 `LocationViewController` 来完成。最后，让我们看看我们的 `MapViewController`。
- en: Refactoring MapViewController
  id: totrans-321
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构 MapViewController
- en: 'We are just about done refactoring our files. The last file we need to refactor
    is our `MapViewController`. Let''s get started:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 我们差不多完成了对文件的重构。我们需要重构的最后一个文件是我们的 `MapViewController`。让我们开始吧：
- en: 'Inside of our `MapViewController`, after the last curly brace, hit *Enter*
    a couple of times and add the following code (remember, this should be outside
    of the class, not inside):'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的 `MapViewController` 中，在最后一个花括号之后，按几次 *Enter* 并添加以下代码（记住，这应该在类外部，而不是内部）：
- en: '[PRE53]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Next, remove the `MKMapViewDelegate` subclass from the main class and move it
    into our extension.
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从主类中移除 `MKMapViewDelegate` 子类并将其移动到我们的扩展中。
- en: 'Now, let''s move all of our `MKMapViewDelegate` methods into the extension.
    You should be moving the following:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们把所有的 `MKMapViewDelegate` 方法移动到扩展中。你应该移动以下内容：
- en: '![](img/99c87378-7d80-4e2e-bfbc-f59e255d939d.png)'
  id: totrans-327
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99c87378-7d80-4e2e-bfbc-f59e255d939d.png)'
- en: 'Your extension should now look as follows:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 你的扩展现在应该看起来如下：
- en: '![](img/3ebe92ac-81d6-448d-b8d4-4377fd45fcbc.png)'
  id: totrans-329
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ebe92ac-81d6-448d-b8d4-4377fd45fcbc.png)'
- en: 'Next, let''s update our `private` extension by moving the following:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们通过移动以下内容来更新我们的 `private` 扩展：
- en: '![](img/7234edf3-1f0e-4410-94a0-89c0669da022.png)'
  id: totrans-331
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7234edf3-1f0e-4410-94a0-89c0669da022.png)'
- en: 'When you are done, you should have the following:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成时，你应该有以下内容：
- en: '![](img/443893a8-9365-4919-b90f-e7aeae067fc7.png)'
  id: totrans-333
  prefs: []
  type: TYPE_IMG
  zh: '![](img/443893a8-9365-4919-b90f-e7aeae067fc7.png)'
- en: I did not include the `MKMapViewDelegate` extension because the file is too
    long. The extension is under our `private` extension. Why did I not move the `prepare()`
    method? The `prepare()` and `viewDidLoad()` methods are methods that are overrides
    for `UIViewController` in this case. We want to keep these methods inside of our
    main class declaration. The more we do this, the clearer it will become.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 我没有包括 `MKMapViewDelegate` 扩展，因为文件太长了。该扩展位于我们的 `private` 扩展下。为什么我没有移动 `prepare()`
    方法？在这种情况下，`prepare()` 和 `viewDidLoad()` 方法是 `UIViewController` 的重写方法。我们希望将这些方法保留在我们的主类声明中。我们做得越多，它就会变得越清晰。
- en: We finished cleaning up the four View Controllers. You might be wondering what
    the benefits of this are. In this project, it may not seem like these updates
    are very important, because we are not doing a lot in our View Controllers. However,
    as a project grows, there will be some cases where multiple protocols and delegates
    are adopted; thus, these updates will be beneficial.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 我们完成了四个视图控制器的清理工作。你可能想知道这样做的好处是什么。在这个项目中，这些更新可能看起来并不重要，因为我们没有在视图控制器中做很多事情。然而，随着项目的增长，将会有一些情况需要采用多个协议和代理；因此，这些更新将会是有益的。
- en: 'Here is an example:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子：
- en: '[PRE54]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: This class is subclassing a View Controller and adopting one protocol, three
    delegates, and one data source. If you have two methods for each one that you
    need, you would have 12 functions in your class that would need certain methods.
    Separating out our code makes it really easy to find where things are located.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类继承自视图控制器，并采用了一个协议、三个代理和一个数据源。如果你为每个需要的方法都有两个方法，那么你的类中就会有12个函数需要特定的方法。将我们的代码分离出来使得找到它们的位置变得非常容易。
- en: Summary
  id: totrans-339
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed what `MKAnnotations` are and how to add and subclass
    them in order to use them on our map. We also learned how to customize our annotations.
    Our app now takes us from tapping on an annotation to a restaurant detail page.
    We also learned that extensions help to organize code as well as add functionality
    without having to change the main class or struct with which we are working.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了`MKAnnotations`是什么以及如何将它们添加和子类化以便在地图上使用。我们还学习了如何自定义我们的标注。现在我们的应用可以从点击标注直接跳转到餐厅详情页面。我们还了解到扩展可以帮助组织代码以及添加功能，而无需更改我们正在工作的主类或结构体。
- en: In the next chapter, we are going to display data on our restaurant list. We
    will also set up our restaurant detail page to display data.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将展示我们的餐厅列表中的数据。我们还将设置餐厅详情页面以显示数据。
