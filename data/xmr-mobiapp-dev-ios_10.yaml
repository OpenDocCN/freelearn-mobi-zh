- en: Chapter 10. Animation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 10 章。动画
- en: Animation is the illusion of movement of static (still) images. To do this,
    typically something has to move roughly every 1/25th of a second. The more the
    steps used for moving something, the smoother the motion and the easier it is
    to fool the brain. We've already seen [Chapter 6](../Text/part0035.html#page "Chapter 6. Events"),
    *Events*, how animation can be achieved using `UIAlertView`. Now we need to see
    how we can do this normally using the `CoreAnimation` and `CoreGraphics` namespaces.
    This is not going to be an exhaustive study but it will give you a grounding in
    the basics.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 动画是静态（静止）图像运动的感觉。为了做到这一点，通常每秒大约需要移动 1/25。移动某物的步骤越多，运动越平滑，越容易欺骗大脑。我们已经看到了 [第
    6 章](../Text/part0035.html#page "第 6 章。事件")，*事件*，如何使用 `UIAlertView` 实现动画。现在我们需要看看我们如何使用
    `CoreAnimation` 和 `CoreGraphics` 命名空间正常地做到这一点。这不会是一个详尽无遗的研究，但它会给你一个基础知识。
- en: 'In this chapter, we will be covering the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Handling bitmaps (scaling and rotation)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理位图（缩放和旋转）
- en: Freeing memory after use
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用后释放内存
- en: Handling bitmaps
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理位图
- en: 'A bitmap image can be created either inside or outside of an app. External
    bitmaps are rendered to `UIImageView` as shown in the following code:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 位图图像可以在应用程序内部或外部创建。外部位图被渲染到 `UIImageView` 中，如下面的代码所示：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We can get the image in, so let's do something with it.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以获取图像，所以让我们对它做些什么。
- en: Scaling the image
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缩放图像
- en: Scaling can be achieved by setting the scale factor.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过设置缩放因子来实现缩放。
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If `scaleFactor` is not specified, it is `1.0f` by default.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有指定 `scaleFactor`，则默认为 `1.0f`。
- en: 'Therefore, you could create a kind of animation as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你可以创建如下所示的动画：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This gives the impression of the image growing. It's not very good, but gives
    you an idea. To get further than this (such as rotation), we need to start looking
    at `CoreGraphics` and `CoreAnimation`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这给人一种图像变大的印象。这并不很好，但给你一个想法。要做得更好（比如旋转），我们需要开始查看 `CoreGraphics` 和 `CoreAnimation`。
- en: Rotating the image – Part 1
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 旋转图像 – 第 1 部分
- en: I will assume here that there is a small-enough `UIImageView` widget set onto
    a view (say 122 x 122) in the middle of the screen. As before, the image is loaded
    in, but this time the `CoreGraphics` image is required.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里假设有一个足够小的 `UIImageView` 小部件被设置在屏幕中间（比如说 122 x 122）。和之前一样，图像被加载进来了，但这次需要使用
    `CoreGraphics` 图像。
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The image is loaded and rotated. The rotation is static (in other words, instant).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图像被加载并旋转。旋转是静态的（换句话说，瞬间）。
- en: For animation, `CoreAnimation` needs to be used. However, before doing a rotation
    animation, let's start off on something simpler—moving something across the screen
    and back. To do this, let's look at some code.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于动画，需要使用 `CoreAnimation`。然而，在进行旋转动画之前，让我们从更简单的事情开始——将某个东西在屏幕上移动并返回。为了做到这一点，让我们看看一些代码。
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: There are two important points to note about this code.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 关于此代码有两个重要点需要注意。
- en: The code operates on `UIView` rather than `UIImageView`
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码在 `UIView` 而不是 `UIImageView` 上操作
- en: The bindings between Xamarin.iOS and the underpinning Objective-C become very
    visible for animation and drawing in general (the binding is the selector)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xamarin.iOS 和底层 Objective-C 之间的绑定在动画和一般绘图（绑定是选择器）中变得非常明显。
- en: Underpinning bindings
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基础绑定
- en: In the preceding example, the code is creating an interface layer for the underpinning
    Objective-C. The compiler handles this in a slightly different manner compared
    to normal code. Adding this sort of `Selector` code can be used in other ways
    as well (for example, to access private API code—though this should be avoided
    as it will debar apps from being accepted into the app store). It should be noted
    that the bindings to the Objective-C layer may sometimes cause issues with submission
    to the Apple store.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，代码正在为底层 Objective-C 创建一个接口层。与正常代码相比，编译器以稍微不同的方式处理这一点。添加这种 `Selector`
    代码也可以用于其他方式（例如，访问私有 API 代码——尽管应该避免这样做，因为这会使应用程序无法被接受到应用商店）。应该注意的是，与 Objective-C
    层的绑定有时可能会导致提交到苹果商店的问题。
- en: Analysis of the code
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码分析
- en: 'The analysis of the preceding code can be summed up as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 之前代码的分析可以总结如下：
- en: startPoint is the position of the image at the start.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: startPoint 是图像开始时的位置。
- en: To tell the app there is going to be an animation, `BeginAnimations` needs to
    be called.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了告诉应用程序将要有一个动画，需要调用 `BeginAnimations`。
- en: '`Duration` is the length of the animation and `RepeatCount` is the number of
    times the animation is called.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Duration` 是动画的长度，`RepeatCount` 是动画被调用的次数。'
- en: '`RepeatAnimationCurve` defines how the animation is to proceed (in this case,
    to repeat the animation curve, a curve does not have to be an arc on a circle,
    it can be a straight line).'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RepeatAnimationCurve` 定义了动画如何进行（在这种情况下，重复动画曲线，曲线不一定是圆上的弧线，它也可以是直线）。'
- en: '`EaseInOut` starts the animation slowly and builds up and slows down.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EaseInOut` 从慢速开始动画，然后加速并减速。'
- en: '`EaseIn` starts the animation slowly.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EaseIn` 从慢速开始动画。'
- en: '`EaseOut` slows it at the end'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EaseOut` 在结束时减速。'
- en: '`Linear` gives a uniform speed.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Linear` 提供了均匀的速度。'
- en: The binding resets the image to the center once the animation has ended.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绑定在动画结束后将图像重置到中心。
- en: '`CommitAnimations` sets the animation going. Xamarin.iOS provides a very good
    example of animation using blocks that will provide further support on this topic.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CommitAnimations` 设置动画开始。Xamarin.iOS 提供了一个很好的动画使用块的示例，这将进一步支持这个主题。'
- en: Freeing memory after use
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用后释放内存
- en: Typically, once a class has gone out of scope, the **garbage collector** (**GC**)
    will free up memory used by the processes within that class. However, as Xamarin.iOS
    works as a binding layer to the underpinning Objective-C, there are times when
    freeing memory becomes important; this mostly happens when dealing with animation
    and graphics.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，一旦一个类超出作用域，垃圾收集器（GC）就会释放该类内部进程使用的内存。然而，由于 Xamarin.iOS 作为底层 Objective-C 的绑定层工作，有时释放内存变得很重要；这通常发生在处理动画和图形时。
- en: Probably the simplest way to clean up is provided when a new View Controller
    is created.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 可能最简单的方法是在创建新的 View Controller 时进行清理。
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'For example, to release `uiImageView` do as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要释放 `uiImageView`，请按照以下步骤操作：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If the code doesn't cause a memory warning, `ViewDidDisappear()` can also be
    used to free the memory in the same way.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果代码没有引发内存警告，`ViewDidDisappear()` 也可以用来以相同的方式释放内存。
- en: 'Another simple method of freeing memory is to allow the GC to do its job once
    the code has gone out of scope. Consider the following (simplistic) code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种简单的释放内存的方法是在代码超出作用域后让 GC 做其工作。考虑以下（简化的）代码：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The code executes and loads `UIImageView` with the image as directed by the
    returned string. If `condition` is met (that is, it's `true`), the method returns.
    If `condition` is not met, the method jumps to `callNewMethod`. Neither of these
    are big issues, except that the GC does not get called until the class itself
    goes out of scope. So any memory occupied by the `UIImageView` control is still
    used, despite it only being used for three lines in one class. With too many images
    and too many manipulations, memory soon vanishes.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 代码执行并加载 `UIImageView`，按照返回的字符串指定的图像。如果 `condition` 成立（即，它是 `true`），则方法返回。如果
    `condition` 不成立，方法将跳转到 `callNewMethod`。这两个问题都不大，除了垃圾收集器（GC）不会在类本身超出作用域之前被调用。因此，`UIImageView`
    控件占用的任何内存仍然被使用，尽管它在一个类中只被使用了三行。由于图像太多和操作太多，内存很快就会消失。
- en: If you consider an average animation, there may be 300 images with backgrounds
    and so the memory is soon drained.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你考虑一个普通的动画，可能会有300张带有背景的图片，所以内存很快就会被耗尽。
- en: 'A simple solution is to only create and use what you need and use code that
    calls the GC once it has gone out of scope. The following lines of code demonstrate
    how to do this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的解决方案是只创建和使用你需要的东西，并在代码超出作用域后调用 GC。以下代码行展示了如何做到这一点：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: While this looks similar, the image being created is used and once completed,
    the memory being used is freed up again, rather than having to wait until the
    class goes out of scope.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然看起来很相似，但正在创建的图像被使用，一旦完成，使用的内存就会被释放，而不是必须等待类超出作用域。
- en: Rotating the image – Part 2
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 旋转图像 – 第二部分
- en: To get an image to rotate, the `CoreGraphics` image has to be used followed
    by conversion to a bitmap. The following gives you an idea of how to do the rotation.
    Altering `RotateCTM` and `TranslateCTM` from positive to negative (and vice versa)
    should give different results.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要使图像旋转，必须使用 `CoreGraphics` 图像，然后将其转换为位图。以下展示了如何进行旋转。将 `RotateCTM` 和 `TranslateCTM`
    从正数变为负数（反之亦然）应该会得到不同的结果。
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Summary
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Animation and graphics handling is an extensive topic on iOS. While this chapter
    has been a whistle-stop over the subject, I would recommend you have a look at
    *Learning MonoTouch* by *Michael Bluestein*, Pearson Education, Inc. His book
    covers the topic in much greater detail than space allows here.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在iOS上，动画和图形处理是一个广泛的主题。虽然本章对这一主题进行了简要概述，但我建议您阅读由Michael Bluestein所著、Pearson Education,
    Inc.出版的*《学习MonoTouch》*。他的书对这一主题的覆盖比这里所允许的更为详细。
