- en: Chapter 1. iOS Game Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 iOS游戏开发
- en: Since the launch of iOS devices, game development has always attracted developers
    in ever-increasing numbers. There are various game engines available in the market,
    which allow developers to start developing their games for iOS devices.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 自从iOS设备推出以来，游戏开发一直吸引着越来越多的开发者。市场上提供了各种游戏引擎，允许开发者为iOS设备开始开发他们的游戏。
- en: 'In this chapter, we will be focusing on the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点关注以下主题：
- en: Getting started with the SpriteKit game framework
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用SpriteKit游戏框架
- en: Developing a mini game using SpriteKit
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发使用SpriteKit的迷你游戏
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Apple has launched its first game engine that allows you to create games for
    iOS without being dependent on the third-party game libraries. It is a very powerful
    framework similar to other iOS frameworks and is similar to other frameworks when
    it comes to its usage. It's also very easy to adopt and learn. It also supports
    lots of features such as physics simulations, texture atlas, gravity, restitution,
    animations, particle emitters, game center support, and many more. Moreover, it
    comes with very rich developer documentation for SpriteKit at the Apple development
    center. It's very useful and very well written. You might need to understand the
    anatomy of game development first to get started with game development in SpriteKit.
    There are two basic and most important terms here; one is scenes and the other
    is sprites. Scenes can be considered as the layers in the games. Therefore, in
    any game there are various layers such as the score layer, hud layer, and gameplay
    layer that can act as different scenes. However, any object in the scene such
    as a player or an enemy can be considered as a sprite.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果推出了其首个游戏引擎，允许您创建iOS游戏而无需依赖第三方游戏库。这是一个非常强大的框架，类似于其他iOS框架，在用法上与其他框架相似。它也非常容易采用和学习。它还支持许多功能，如物理模拟、纹理图集、重力、恢复系数、动画、粒子发射器、游戏中心支持等。此外，它还提供了非常丰富的SpriteKit开发者文档，位于苹果开发中心。这些文档非常实用且编写得很好。您可能需要首先了解游戏开发的解剖结构，才能开始使用SpriteKit进行游戏开发。这里有两个基本且最重要的术语；一个是场景，另一个是精灵。场景可以被认为是游戏中的层。因此，在任何游戏中，都有各种层，如得分层、HUD层和游戏玩法层，它们可以作为不同的场景。然而，场景中的任何对象，如玩家或敌人，都可以被认为是精灵。
- en: Getting started with the SpriteKit game framework
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用SpriteKit游戏框架
- en: With the release of iOS 7.0, Apple has introduced its own native 2D game framework
    called SpriteKit. SpriteKit is a great 2D game engine, which has support for sprite,
    animations, filters, masking, and most important is the physics engine to provide
    a real-world simulation for the game.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 随着iOS 7.0的发布，苹果推出了其自己的原生2D游戏框架，称为SpriteKit。SpriteKit是一个优秀的2D游戏引擎，它支持精灵、动画、滤镜、遮罩，最重要的是它提供了物理引擎，为游戏提供真实世界的模拟。
- en: Apple provides a sample game to get started with the SpriteKit called Adventure
    Game. The download URL for this example project is [http://bit.ly/Rqaeda](http://bit.ly/Rqaeda).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果提供了一个名为“冒险游戏”的示例游戏，用于开始使用SpriteKit。此示例项目的下载网址为[http://bit.ly/Rqaeda](http://bit.ly/Rqaeda)。
- en: This sample project provides a glimpse of the capability of this framework.
    However, the project is complicated to understand and for learning you just want
    to make something simple. To have a deeper understanding of SpriteKit-based games,
    we will be building a bunch of mini games in this book. To understand the basics
    of the SpriteKit game programming, we will build a mini AntKilling game in this
    chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例项目展示了该框架的能力。然而，该项目理解起来比较复杂，对于学习来说，您可能只想做一些简单的东西。为了更深入地理解基于SpriteKit的游戏，我们将在这本书中构建一系列迷你游戏。为了理解SpriteKit游戏编程的基础，我们将在本章中构建一个迷你蚂蚁杀戮游戏。
- en: Getting ready
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started with iOS game development, you have the following prerequisites
    for SpriteKit:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用SpriteKit进行iOS游戏开发，您有以下先决条件：
- en: You will need the Xcode 5.x
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您需要Xcode 5.x版本
- en: The targeted device family should be iOS 7.0+
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标设备系列应为iOS 7.0+
- en: You should be running OS X 10.8.X or later
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您应该运行OS X 10.8.X或更高版本
- en: If all the above requisites are fulfilled, then you are ready to go with the
    iOS game development. So let's start with game development using iOS native game
    framework. We will be building a mini game in the chapter and will be taking it
    forward in every chapter to add more and more features and enhancements.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有上述要求都得到满足，那么你就可以开始 iOS 游戏开发了。所以让我们从使用 iOS 原生游戏框架进行游戏开发开始。我们将在本章中构建一个小游戏，并在每一章中继续添加更多功能和改进。
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s start building the AntKilling game. Perform the following steps to create
    your new SpriteKit project:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始构建 AntKilling 游戏。按照以下步骤创建你的新 SpriteKit 项目：
- en: Start your Xcode. Navigate to **File** | **New** | **Project...**.![How to do
    it...](img/00002.jpeg)
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Xcode。导航到 **文件** | **新建** | **项目...**。![如何操作...](img/00002.jpeg)
- en: Then from the prompt window, navigate to **iOS** | **Application** | **SpriteKit
    Game** and click on **Next**.![How to do it...](img/00003.jpeg)
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后在提示窗口中，导航到 **iOS** | **应用** | **SpriteKit 游戏** 并点击 **下一步**。![如何操作...](img/00003.jpeg)
- en: Fill all the project details in the prompt window and provide `AntKilling` as
    the project name with your **Organization Name**, device as **iPhone**, and **Class
    Prefix** as `AK`. Click on **Next**.![How to do it...](img/00004.jpeg)
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示窗口中填写所有项目详细信息，并以 `AntKilling` 作为项目名称，提供你的 **组织名称**，设备为 **iPhone**，以及 **类前缀**
    为 `AK`。点击 **下一步**。![如何操作...](img/00004.jpeg)
- en: Select a location on the drive to save the project and click on **Create**.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在驱动器上选择一个位置以保存项目，并点击 **创建**。
- en: Then build the sample project to check the output of the sample project. Once
    you build and run the project with the play button, you should see the following
    on your device:![How to do it...](img/00005.jpeg)
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后构建示例项目以检查示例项目的输出。一旦使用播放按钮构建并运行项目，你应该能在你的设备上看到以下内容：![如何操作...](img/00005.jpeg)
- en: How it works...
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The following are the observations of the starter project:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对入门项目的观察：
- en: As you have seen, the sample project of SpriteKit plays a label with a background
    color.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如你所见，SpriteKit 的示例项目播放了一个带有背景色的标签。
- en: SpriteKit works on the concept of scenes, which can be understood as the layers
    or the screens of the game. There can be multiple scenes working at the same time;
    for example, there can be a gameplay scene, hud scene, and the score scene running
    at the same time in the game.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SpriteKit 的工作原理是场景，可以理解为游戏的层或屏幕。可以同时运行多个场景；例如，在游戏中可以同时运行游戏玩法场景、HUD 场景和得分场景。
- en: 'Now we can look into the project for more detail arrangements of the starter
    project. The following are the observations:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以查看入门项目的更多详细安排。以下是对观察的总结：
- en: In the main directory, you already have one scene created by default called
    **AKMyScene**.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主目录中，你已经有了一个默认创建的场景，名为 **AKMyScene**。
- en: Now click on `AKMyScene.m` to explore the code to add the label on the screen.
    You should see something similar to the following screenshot:![How it works...](img/00006.jpeg)
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击 `AKMyScene.m` 以探索代码，在屏幕上添加标签。你应该能看到以下截图类似的内容：![如何工作...](img/00006.jpeg)
- en: Now we will be updating this file with our code to create our AntKilling game
    in the next sections.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将在下一节中更新此文件，用我们的代码创建 AntKilling 游戏。
- en: We have to fulfill a few prerequisites to get started with the code, such as
    locking the orientation to landscape as we want a landscape orientation game.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须满足一些先决条件才能开始编写代码，例如将朝向锁定为横向，因为我们想要一个横向的游戏。
- en: To change the orientation of the game, navigate to AntKilling project settings
    | **TARGETS** | **General**. You should see something similar to the following
    screenshot:![How it works...](img/00007.jpeg)
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要更改游戏的朝向，导航到 AntKilling 项目设置 | **目标** | **通用**。你应该能看到以下截图类似的内容：![如何工作...](img/00007.jpeg)
- en: Now in the **General** tab, uncheck **Portrait** from the device orientation
    so that the final settings should look similar to the following screenshot:![How
    it works...](img/00008.jpeg)
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在 **通用** 选项卡中，取消选中 **纵向** 以从设备朝向中，使最终设置应类似于以下截图：![如何工作...](img/00008.jpeg)
- en: Now build and run the project. You should be able to see the app running in
    landscape orientation.![How it works...](img/00009.jpeg)
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在构建并运行项目。你应该能够看到应用以横向模式运行。![如何工作...](img/00009.jpeg)
- en: The bottom-right corner of the screen shows the number of nodes with the frame
    rate.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 屏幕的右下角显示了节点的数量和帧率。
- en: Developing a mini game using SpriteKit
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 SpriteKit 开发小游戏
- en: Now you have learned enough about SpriteKit. To explore this in more depth,
    let's create a mini game that will help you to understand the concepts in much
    more detail. We are going to create an AntKilling game. In this game, we will
    place an ant on the screen; the ant will animate when you click on it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经对SpriteKit有了足够的了解。为了更深入地探索这个主题，让我们创建一个迷你游戏，这将帮助你更详细地理解这些概念。我们将创建一个杀蚂蚁游戏。在这个游戏中，我们将在屏幕上放置一只蚂蚁；当你点击它时，蚂蚁会进行动画。
- en: Getting ready
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use the project we created in the previous section. To create a mini
    game, we will have to update the source files we have got with the starter project.
    Now it's time to update AKMyScene to hold our ant sprites.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用上一节中创建的项目。为了创建一个迷你游戏，我们需要更新我们从入门项目获取的源文件。现在，是时候更新AKMyScene以包含我们的蚂蚁精灵了。
- en: Before getting into the steps to update the code, download all the resources
    for this chapter and check for the `assets` folder, which has all the images used
    in this project.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入更新代码的步骤之前，请下载本章的所有资源，并检查`assets`文件夹，其中包含本项目中使用的所有图像。
- en: How to do it...
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Execute the following steps sequentially to create a mini game:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤依次执行以创建一个迷你游戏：
- en: Open the `Resources` folder and add them to your Xcode project.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Resources`文件夹并将它们添加到你的Xcode项目中。
- en: While adding the resources to the Xcode, make sure that the selected target
    is **AntKilling** and **Copy items into destination group's folder (if needed)**
    is checked.![How to do it...](img/00010.jpeg)
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在将资源添加到Xcode时，请确保选定的目标是**AntKilling**，并且已勾选**Copy items into destination group's
    folder (if needed)**。![如何操作...](img/00010.jpeg)
- en: Now delete all the existing code from `AKMyScene.m` and make it look similar
    to the following screenshot:![How to do it...](img/00011.jpeg)
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，从`AKMyScene.m`中删除所有现有代码，使其看起来类似于以下截图：![如何操作...](img/00011.jpeg)
- en: 'Now, firstly, we have created a private interface to declare private variables:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，首先，我们创建了一个私有接口来声明私有变量：
- en: '[PRE0]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, in the `init` method, we have printed a log to print the size of the
    screen:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`init`方法中，我们打印了一个日志来打印屏幕的大小：
- en: '[PRE1]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now we will change the screen background color to white using the following
    line of code:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将使用以下代码行将屏幕背景色更改为白色：
- en: '[PRE2]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Then we will change the screen background color to white using the `backgroundColor`
    property in the following line of code.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将使用以下代码行中的`backgroundColor`属性将屏幕背景色更改为白色。
- en: '[PRE3]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the following line of code, we are creating a sprite object using the `spriteNodeWithImageNamed`
    method and passing the image name to the same. Then we have positioned it to `100,
    100` of the screen, which is in the bottom-left corner of the screen. Then finally
    we have added it as a child.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下代码行中，我们使用`spriteNodeWithImageNamed`方法创建了一个精灵对象，并将图像名称传递给它。然后我们将它定位到屏幕的`100,
    100`位置，这是屏幕的左下角。然后最终将其添加为子对象。
- en: '[PRE4]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从你购买的所有Packt Publishing书籍的账户中下载示例代码文件。[http://www.packtpub.com](http://www.packtpub.com)。如果你在其他地方购买了这本书，你可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给你。
- en: In games, we have to keep two sets of images, one for the normal display and
    the second for the retina display. In the preceding block of code, we have provided
    the name of the sprite as `ant.jpg`, which is going to autoreference to `ant@2x.jpg`
    for the retina devices.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏中，我们需要保留两套图像，一套用于正常显示，另一套用于视网膜显示。在前面代码块中，我们提供了精灵的名称为`ant.jpg`，这将自动引用视网膜设备的`ant@2x.jpg`。
- en: 'Now build and run your application; you should see something similar to the
    following screenshot:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在构建并运行你的应用程序；你应该能看到以下截图类似的内容：
- en: '![How to do it...](img/00012.jpeg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/00012.jpeg)'
- en: 'Now as you can see, the screen color has changed to white but there is no ant
    on the screen. This means something has gone wrong in the code. So, now let''s
    check our logs, which should be printing the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以看到，屏幕颜色已经变为白色，但屏幕上没有蚂蚁。这意味着代码中出了问题。所以，现在让我们检查我们的日志，它应该打印以下内容：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: So the scene size is wrong. The scene should print 568 as the width and 320
    as the height but it's printing the opposite. To debug this, navigate to your
    `AKViewController.m` `viewDidLoad` method. You can find the complete code for
    this function at `AntKilling/AntKilling/AKViewController.m`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，场景大小是错误的。场景应该打印宽度为568，高度为320，但它打印的是相反的。为了调试这个问题，导航到你的`AKViewController.m`
    `viewDidLoad`方法。你可以在`AntKilling/AntKilling/AKViewController.m`中找到这个函数的完整代码。
- en: So, from this method, we can see that our scene is absorbing the size from the
    bounds of the view and this `viewDidLoad` method is invoked even before the view
    has been added to the view hierarchy. So it has not responded to the layout changes.
    Thus, because of the inconsistent view bounds our scene is getting started with
    wrong bounds.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，从这个方法中，我们可以看到我们的场景正在从视图的边界中获取大小，并且这个`viewDidLoad`方法在视图被添加到视图层次结构之前就被调用了。所以它没有响应布局变化。因此，由于不一致的视图边界，我们的场景以错误的边界开始。
- en: To solve this issue, we have to move the scene startup code in the `viewWillLayoutSubviews`
    method. After removing the code from the `viewDidLoad` method and pasting it to
    `viewWillLayoutSubviews`, you can find the complete code for this function at
    `AntKilling/AntKilling/AKViewController.m`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们必须将场景启动代码移动到`viewWillLayoutSubviews`方法中。在从`viewDidLoad`方法中移除代码并将其粘贴到`viewWillLayoutSubviews`之后，你可以在`AntKilling/AntKilling/AKViewController.m`中找到这个函数的完整代码。
- en: 'Now, once again build and run the app; you should see the following output:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，再次构建并运行应用程序；你应该能看到以下输出：
- en: '![How to do it...](img/00013.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/00013.jpeg)'
- en: How it works...
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'So, congrats! You have fixed the issue. Your ant has now appeared on the screen
    at the given location. If you observe closely, you can see that the status bar
    is at the top of the game, which does not look great. To remove the status bar
    from the screen, open your `AntKilling-Info.plist` file and add an `UIViewControllerBasedStatusBarAppearance`
    attribute with value `NO`. Your `.plist` file should look like the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，恭喜！你已经解决了问题。你的蚂蚁现在出现在屏幕上的指定位置。如果你仔细观察，你可以看到状态栏在游戏的顶部，这看起来并不好。为了从屏幕上移除状态栏，打开你的`AntKilling-Info.plist`文件，并添加一个值为`NO`的`UIViewControllerBasedStatusBarAppearance`属性。你的`.plist`文件应该看起来像以下截图：
- en: '![How it works...](img/00014.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/00014.jpeg)'
- en: 'Build and run your project again; you should be able to see the game without
    the status bar now:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 再次构建并运行你的项目；你现在应该能看到没有状态栏的游戏：
- en: '![How it works...](img/00015.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/00015.jpeg)'
- en: 'This looks perfect now; our ant has been residing on the screen as expected.
    So now our next objective is to animate the ant when we tap on it. To accomplish
    this, we need to add the following code in the `AKMyScene.m` file, just below
    your `initWithSize` method:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看起来完美了；我们的蚂蚁正如预期的那样居住在屏幕上。所以现在我们的下一个目标是在我们点击它时让蚂蚁动起来。为了实现这个目标，我们需要在`AKMyScene.m`文件中添加以下代码，就在你的`initWithSize`方法下面：
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can find the complete code for this function at `AntKilling/AntKilling/AKMyScene.m`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`AntKilling/AntKilling/AKMyScene.m`中找到这个函数的完整代码。
- en: So, now let's go line-by-line to understand what we have done so far. To begin
    with, we have added the `- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent
    *)event` method to the grab all the touches on the scene.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，现在让我们逐行分析一下到目前为止我们做了什么。首先，我们添加了`- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent
    *)event`方法来抓取场景上的所有触摸。
- en: Now in the function the first line allowed you to grab touch using `CGPoint
    positionInScene = [touch locationInNode:self];`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在函数的第一行允许你使用`CGPoint positionInScene = [touch locationInNode:self];`来抓取触摸。
- en: In the next line, we grabbed the touch and converting it to the `CGPoint positionInScene
    = [touch locationInNode:self];` location.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一行，我们抓取了触摸并将其转换为`CGPoint positionInScene = [touch locationInNode:self];`位置。
- en: 'In the following line, we fetched the sprite, which has been touched:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一行，我们获取了被触摸的精灵：
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, once you have the sprite object, compare and check whether the select
    object is the ant bug. If it''s the ant bug, then animate the object by adding
    the following line of code:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一旦你有了精灵对象，比较并检查选中的对象是否是蚂蚁虫。如果是蚂蚁虫，那么通过添加以下代码行来动画化对象：
- en: '[PRE8]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Using the `SKAction` class, you can execute various sequence of animations such
    as `rotation`, `moveBy`, `moveTo`, and so on. Also all the rotate methods accept
    the angle in radians. So to achieve the rotation, we must convert the degree to
    radians before passing to any `rotate` function.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`SKAction`类，你可以执行各种动画序列，如`rotation`（旋转）、`moveBy`（移动）、`moveTo`（移动到）等等。此外，所有旋转方法都接受弧度作为角度。因此，为了实现旋转，我们必须在传递给任何`rotate`函数之前将度数转换为弧度。
- en: Now, this code will animate the selected sprite. Build and run the project and
    you will see the ant animating on tap.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这段代码将会使选定的精灵开始动画。构建并运行项目，你将看到蚂蚁在点击时开始动画。
- en: 'You will soon notice that on tapping the ant, it starts animating, but there
    is no way to stop this. So now let''s add a way to stop this animation once you
    click anywhere on the scene. Navigate to the `- (void)touchesBegan:(NSSet *)touches
    withEvent:(UIEvent *)` event method, and update it to the following code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你很快就会注意到，当你轻敲蚂蚁时，它会开始动画，但没有办法停止这个动画。所以现在让我们添加一个方法，当你点击场景中的任何地方时，可以停止这个动画。导航到`-
    (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)`事件方法，并将其更新为以下代码：
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now if you observe closely, you can see that we have added an `if-else` condition
    to check whether the touch is made on the ant, which allows it to animate; when
    the touch is made anywhere outside the screen, stop all the actions. To stop all
    the actions on the sprite, we can use the `removeAllActions` method on the sprite.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你仔细观察，你会发现我们添加了一个`if-else`条件来检查触摸是否在蚂蚁上，这允许它进行动画；当触摸在屏幕外的任何地方时，停止所有动作。为了在精灵上停止所有动作，我们可以在精灵上使用`removeAllActions`方法。
