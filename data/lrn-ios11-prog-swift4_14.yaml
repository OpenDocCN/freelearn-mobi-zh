- en: Getting Data into Our Grid
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将数据放入我们的网格中
- en: Working with data is very important, but when working with beginners, I like
    to do this in steps so that this process is a bit easier. In this chapter, we
    are going to work with data that is stored on the device. Later in the book, we
    will work with data that we get from a feed. Feed data means it is coming from
    a website URL. Using data from a feed means you can update the data without having
    to update the app.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 与数据一起工作非常重要，但与初学者一起工作时，我喜欢分步骤来做，这样这个过程会容易一些。在本章中，我们将处理存储在设备上的数据。在本书的后面部分，我们将处理从源中获取的数据。源数据意味着它来自网站
    URL。使用源数据意味着您可以在不更新应用程序的情况下更新数据。
- en: 'We will cover the following in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下内容：
- en: What is a model?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是模型？
- en: What is a plist?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 plist？
- en: How to create a plist?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建一个 plist？
- en: Working with a manager class
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与管理类一起工作
- en: In the last chapter, we got the Explore listing up, but we have no data. We
    need to create a model that we can use to store information that our cell can
    use to display data.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们完成了探索列表，但我们没有数据。我们需要创建一个模型，我们可以用它来存储我们的单元格可以用来显示数据的信息。
- en: Model
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型
- en: 'Typically, when developing your model, the best way to start when you have
    a design is to look at the data associated with your view. Let''s look at our
    app design again:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当您在设计模型时，最好的开始方式是查看与您的视图关联的数据。让我们再次看看我们的应用设计：
- en: '![](img/f3c5944b-1723-489d-844e-8c53fdc4138e.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f3c5944b-1723-489d-844e-8c53fdc4138e.png)'
- en: The items (`UICollectionViewCell`) displayed in the grid are each supported
    by some data. Looking at the design, we see that each item needs an image and
    a name (cuisine). Therefore, we need to create a model called `ExploreItem` with
    two properties, specifically `image` and `name`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在网格中显示的项（`UICollectionViewCell`）都由一些数据支持。从设计来看，我们看到每个项都需要一个图像和一个名称（菜系）。因此，我们需要创建一个名为
    `ExploreItem` 的模型，具有两个属性，具体是 `image` 和 `name`。
- en: In the model camp, we have three files that we will create—`ExploreData.plist`,
    `ExploreItem.swift`, and `ExploreDataManager.swift`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在模型库中，我们将创建三个文件——`ExploreData.plist`、`ExploreItem.swift` 和 `ExploreDataManager.swift`。
- en: ExploreData.plist
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ExploreData.plist
- en: The first file, `ExploreData.plist`, has already been created for you and can
    be found in your project files for this chapter. This file contains all the data
    we need to have a list of cuisines. Drag this file into your `Model` folder in
    the Navigator panel.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个文件 `ExploreData.plist` 已经为您创建好了，可以在本章的项目文件中找到。这个文件包含我们需要的所有数据，以便有一个菜系列表。将此文件拖到导航器面板中的
    `Model` 文件夹中。
- en: 'In the file, there is an array of dictionary items. Each item has a cuisine
    name and image for that particular cuisine. Let''s take a look at the first few
    elements of this file:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中，有一个字典项数组。每个项都有一个特定菜系的名称和图像。让我们看看这个文件的前几个元素：
- en: '![](img/e70b77e9-e237-48f3-a32d-05b738d87a8c.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e70b77e9-e237-48f3-a32d-05b738d87a8c.png)'
- en: We will load this file into our Explore list, and this is what we use to filter
    restaurants by a specific cuisine.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把这个文件加载到我们的探索列表中，这是我们用来根据特定菜系筛选餐厅的工具。
- en: ExploreItem.swift
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ExploreItem.swift
- en: 'Next, we need to create a file to represent our data. Our Explore list displays
    an image and a name that match the corresponding image and name that we see in
    our `Explore.plist` file. Let''s create this `ExploreItem` file now:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建一个文件来表示我们的数据。我们的探索列表显示了一个图像和一个名称，这与我们在 `Explore.plist` 文件中看到的对应图像和名称相匹配。现在让我们创建这个
    `ExploreItem` 文件：
- en: Right-click on the `Model` folder and select New File.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 `Model` 文件夹并选择新建文件。
- en: Inside of the template screen, select iOS at the top and then Swift File. Then,
    hit Next.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模板屏幕中，选择顶部的 iOS，然后选择 Swift 文件。然后，点击下一步。
- en: Name the file `ExploreItem`, and then hit Create.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件命名为 `ExploreItem`，然后点击创建。
- en: The only thing in this file is an `import` statement.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件中只有一条 `import` 语句。
- en: The `import` statement allows us to import other libraries into our file, giving
    us the ability to see inside of these libraries and use properties from them.
    Foundation is one of Apple's core frameworks, and it has a bunch of tools that
    we can use while we program.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`import` 语句允许我们将其他库导入到我们的文件中，使我们能够查看这些库的内部，并使用它们的属性。Foundation 是苹果的核心框架之一，它提供了一组我们在编程时可以使用的工具。'
- en: 'Since we do not need to use inheritance, we are going to make this file a `struct`.
    Add the following to your file:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们不需要使用继承，我们将把这个文件做成一个 `struct`。在你的文件中添加以下内容：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now that we have declared it a `struct`, let''s add the two properties we need
    for this file—an image, and a name. For both of these properties, we are going
    to make them String data types. For the title, this makes sense, because it is
    text that we are displaying in our Collection View. However, for the image, using
    a String data type might not seem as obvious. The reason we are making the image
    a data type of String is because, to get it, we have to access it by name. For
    example, `american.png` is the filename for the American cuisine image. Add the
    following to the inside of your curly braces (`{ }`):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将其声明为 `struct`，让我们添加这个文件需要的两个属性——一个图像和一个名称。对于这两个属性，我们将它们的数据类型都设置为 String。对于标题，这很有意义，因为这是我们将在
    Collection View 中显示的文本。然而，对于图像，使用 String 数据类型可能并不那么明显。我们之所以将图像的数据类型设置为 String，是因为要获取它，我们必须通过名称来访问它。例如，`american.png`
    是美国菜图像的文件名。在你的花括号内添加以下内容：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We have now added two properties, one for the image and one for the name, both
    of which are optional. Since we cannot give either of them an initial value, we
    have to make them optional.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在添加了两个属性，一个用于图像，一个用于名称，这两个属性都是可选的。由于我们不能为它们中的任何一个提供一个初始值，我们必须使它们成为可选的。
- en: 'Your file should look like the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你的文件应该看起来如下：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We next need to add one more thing to this file.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来需要向这个文件添加另一项内容。
- en: 'We take the dictionary data we get from the `plist` and create an `ExploreItem`
    for each item. Our dictionary now looks like the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从 `plist` 中获取字典数据，并为每个项目创建一个 `ExploreItem`。我们的字典现在看起来如下：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We need to pass this dictionary object to our `ExploreItem`. When you are passing
    a dictionary object, you are required to create a custom initializer. Our initializer
    takes a dictionary object into it.  Then, we can set each item from the dictionary
    to the data of both of our properties, image, and name.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将这个字典对象传递给我们的 `ExploreItem`。当你传递一个字典对象时，你必须创建一个自定义初始化器。我们的初始化器接受一个字典对象。然后，我们可以将字典中的每个项设置到我们两个属性的
    数据中，即图像和名称。
- en: When you create a struct, by default, you get an `init()` method that has all
    the properties you created in the parameters.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个 struct 时，默认情况下，你会得到一个 `init()` 方法，它包含你在参数中创建的所有属性。
- en: 'For example, our `ExploreItem` will have a default initializer that looks like
    the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们的 `ExploreItem` 将有一个默认初始化器，如下所示：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Instead of using this initializer, we will create our own to pass a dictionary
    object into it.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将不使用这个初始化器，而是创建自己的来传递一个字典对象到它。
- en: 'To create a **custom initializer**, we are going to use what is called an **extension**,
    which gives us the ability to extend our code and add more functionality to it.
    Inside of your `ExploreItem` file, after the ending curly brace, add the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个**自定义初始化器**，我们将使用所谓的**扩展**，这使我们能够扩展我们的代码并添加更多功能。在你的 `ExploreItem` 文件中，在结束的大括号之后，添加以下内容：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, let''s create our custom initializer that takes a dictionary object into
    the parameters. Add the following between the curly braces of the extension we
    just added:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建一个自定义初始化器，它接受一个字典对象作为参数。在我们刚刚添加的扩展的大括号之间添加以下内容：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We have now created an `init()` method in the parameters, which accepts a dictionary
    object. As stated in the preceding section, we know that our data looks like the
    following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在在参数中创建了一个 `init()` 方法，它接受一个字典对象。正如前文所述，我们知道我们的数据看起来如下：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To pass each value, we need to use the dictionary syntax, such as:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要传递每个值，我们需要使用字典语法，例如：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s proceed by mapping the dictionary data to our two properties. Add the
    following inside of the `init()` method curly braces:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过将字典数据映射到我们的两个属性来继续。在 `init()` 方法的花括号内添加以下内容：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Since our dictionary value is `AnyObject`, we have to specify that our data
    is a String by using the `as? String` at the end.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的字典值是 `AnyObject`，我们必须指定我们的数据是一个字符串，通过在末尾使用 `as? String` 来实现。
- en: 'We now have our data item set up for our Explore view (cuisine list), and your
    file should look like the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经为我们的 Explore 视图（菜谱列表）设置了数据项，你的文件应该看起来如下：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Let's now focus on our data manager. We want our data manager to handle parsing
    the plist and giving us the data. Since our data will be coming from a plist,
    we need to have a method that will get the data from the plist first.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在关注我们的数据管理器。我们希望我们的数据管理器能够处理解析 plist 并提供数据。由于我们的数据将来自 plist，我们需要一个方法来首先从
    plist 中获取数据。
- en: ExploreDataManager.swift
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ExploreDataManager.swift
- en: In our app, the data manager is responsible for communicating with a service
    (for example, the Yelp API, which we will discuss later in the book), as well
    as manipulating the data from the service. Once the data from the service is received,
    the data manager will create model objects that we can use for our app.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，数据管理器负责与一个服务（例如，我们将在本书后面讨论的 Yelp API）通信，以及操作来自服务的数据。一旦收到来自服务的数据，数据管理器将创建我们可以用于应用程序的模型对象。
- en: In some apps, these two jobs are handled by the controller. However, rather
    than putting that responsibility on our controller, we limit the controller from
    talking to the manager so that it never knows anything about the service.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些应用程序中，这两个任务由控制器处理。然而，我们不是将这个责任放在我们的控制器上，而是限制控制器与管理者通信，这样它就永远不会知道任何关于服务的事情。
- en: As you get comfortable with programming, you will find that there are a few
    different types of architectures. We are sticking as closely as we can to MVC,
    because it is what Apple uses to build iOS apps.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你对编程的熟悉，你会发现有几种不同的架构类型。我们尽可能地坚持 MVC，因为这是苹果用来构建 iOS 应用程序的方式。
- en: 'Let''s create the `ExploreDataManager` file now:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建 `ExploreDataManager` 文件：
- en: Right-click on the `Model` folder and select New File.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 `Model` 文件夹，选择新建文件。
- en: Inside of the template screen, select iOS at the top and then Swift File. Then,
    hit Next.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模板屏幕中，顶部选择 iOS，然后选择 Swift 文件。然后点击下一步。
- en: Name this file `ExploreDataManager`, and hit Create.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件命名为 `ExploreDataManager`，然后点击创建。
- en: 'Since we need to define our class first, add the following under the `import`
    statement:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们需要首先定义我们的类，请在 `import` 语句下添加以下内容：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, we used a `class` instead of a `struct`, because this is a file that we
    will inherit from later. You do not always necessarily know if you are going to
    inherit from another class or not; therefore, you can just default to a struct
    and then change to a class if you realize that you need to inherit from another
    class.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了一个 `class` 而不是 `struct`，因为这是一个我们稍后会继承的文件。你并不总是确定你是否会从另一个类继承；因此，你可以默认使用
    `struct`，然后在意识到你需要从另一个类继承时将其更改为 `class`。
- en: 'Now, we need to load data from the `ExploreData.plist` file. Add the following
    method to our `ExploreDataManager`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要从 `ExploreData.plist` 文件中加载数据。向我们的 `ExploreDataManager` 添加以下方法：
- en: '![](img/878aaae9-02f9-4d11-912a-f7f3334681cd.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/878aaae9-02f9-4d11-912a-f7f3334681cd.png)'
- en: '**Part A**: This  function starts with the `fileprivate` keyword. Think of
    `fileprivate` as a way to give your methods an access level. If you do not use
    `fileprivate`, it defaults to internal, which means anyone can access or use the
    method outside of the class.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第A部分**：这个函数以 `fileprivate` 关键字开始。将 `fileprivate` 视为为你的方法设置访问级别的一种方式。如果你不使用
    `fileprivate`，它默认为 internal，这意味着任何人都可以在类外部访问或使用该方法。'
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**Part B**: Our `loadData()` function is returning something back. The `->`
    states that our function has a return value. The return value for this method
    is an array with dictionary objects. Our dictionary will have a key of a String,
    and the value will be `AnyObject`.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第B部分**：我们的 `loadData()` 函数正在返回一些内容。`->` 表示我们的函数有一个返回值。这个方法的返回值是一个包含字典对象的数组。我们的字典将有一个字符串键，值将是
    `AnyObject`。'
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`AnyObject` lets us take any data type that comes back. Therefore, we can have
    one item give us an Int, while another gives us back a String.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`AnyObject` 允许我们接受任何返回的数据类型。因此，一个项目可以给我们一个 Int，而另一个项目可以返回一个 String。'
- en: You can also use `Any`. `Any` can represent an instance of any type at all,
    including functional types and optional types.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用 `Any`。`Any` 可以代表任何类型的实例，包括函数类型和可选类型。
- en: '**Part C**: Inside of the function, we are using what is known as a `guard`
    statement. A `guard` statement is designed for exiting a method or function early
    if a given statement returns `false`. Our `guard` checks two statements and both
    need to return `true`.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第C部分**：在函数内部，我们使用的是所谓的 `guard` 语句。`guard` 语句是为了在给定的语句返回 `false` 时提前退出方法或函数。我们的
    `guard` 检查两个语句，并且两个语句都需要返回 `true`。'
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The first statement checks to see if the `ExploreData.plist` file exists in
    our app bundle. If the file is found, the statement returns `true`, and the file
    path is set to the constant path. Our next statement, which is separated by a
    comma, is discussed in *Part D*, as follows.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个语句检查 `ExploreData.plist` 文件是否存在于我们的应用程序包中。如果找到文件，该语句返回 `true`，并将文件路径设置为常量路径。我们接下来的语句，用逗号分隔，将在
    *第D部分* 中讨论，如下所示。
- en: '**Part D**: In this statement, if the first statement returns `true`, we take
    the `path` constant, and then we check the contents inside of the file. Let''s
    take a look at the data in our file again:'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部分 D**：在这个语句中，如果第一个语句返回 `true`，我们就取 `path` 常量，然后检查文件内的内容。让我们再次看看文件中的数据：'
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](img/346de2e7-47eb-46dc-9160-86538f2a1592.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/346de2e7-47eb-46dc-9160-86538f2a1592.png)'
- en: If you look at the root of this plist, you see that its type is an array. `NSArray`
    has a method that we can use to get the data out of our file and put it into an
    array with which we can work.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看这个 plist 的根，你会看到它的类型是数组。`NSArray` 有一个我们可以用来从文件中获取数据并将其放入我们可以工作的数组的方法。
- en: Typically, plists come in two types, an array or a dictionary. Currently, neither
    the standard array nor dictionary gives us a method that allows us to get data
    out of a file, so we need to utilize `NSArray` (as we are here) or `NSDictionary`,
    respectively, to do that.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，plist 有两种类型，数组或字典。目前，标准数组或字典都没有提供从文件中获取数据的方法，因此我们需要利用 `NSArray`（就像我们在这里做的那样）或
    `NSDictionary` 分别来做这件事。
- en: This statement now checks to verify that we are, indeed, working with an array,
    and then returns `true` if so. If both conditions return `true`, our array inside
    of our plist is given to us. The array is set to our constant items.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语句现在会检查我们确实是在处理一个数组，如果是的话，则返回 `true`。如果两个条件都返回 `true`，我们就可以得到我们 plist 中的数组。这个数组被设置为我们的常量项。
- en: '`NSArray` and `NSDictionary` come from Objective C (Apple''s main programming
    language for building iOS apps); they have some extra features. Just know that
    they are similar to their Swift counterparts without the `NS`.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`NSArray` 和 `NSDictionary` 来自 Objective C（苹果为构建 iOS 应用程序的主要编程语言）；它们有一些额外功能。只需知道它们与
    Swift 的对应物相似，但没有 `NS`。'
- en: '**Part E**: Here, if any of the conditions are `false`, we return an array
    with an empty dictionary.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部分 E**：在这里，如果任何条件为 `false`，我们将返回一个空字典的数组。'
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Otherwise, we run the following `return`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，我们运行以下 `return`。
- en: '**Part F**: This `return` gives back an array of dictionary items. Once we
    have our data loaded out of the plist, we can create our `ExploreItem`. Therefore,
    we need a method so that we can access all of our Explore items and return an
    array of items.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部分 F**：这个 `return` 返回一个字典项的数组。一旦我们从 plist 中加载数据，我们就可以创建我们的 `ExploreItem`。因此，我们需要一个方法来访问我们所有的探索项并返回一个项的数组。'
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Getting data
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取数据
- en: 'To get our data out of the plist, add the following method above `loadData()`
    inside of our `ExploreDataManager`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 plist 中获取数据，在 `ExploreDataManager` 中的 `loadData()` 上面添加以下方法：
- en: '[PRE18]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Our `fetch()` method is going to loop through our dictionary data from the
    plist. Here is what your file should look like now:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `fetch()` 方法将遍历从 plist 中获取的字典数据。现在你的文件应该看起来像这样：
- en: '![](img/b1dbfa66-b7e4-4d24-bc8b-927c9e5b8413.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b1dbfa66-b7e4-4d24-bc8b-927c9e5b8413.png)'
- en: 'Inside of your `ExploreViewController.swift` file, delete the previous `print`
    statement that was inside of your `viewDidLoad()` and replace it with the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 `ExploreViewController.swift` 文件中，删除 `viewDidLoad()` 中的先前 `print` 语句，并用以下内容替换它：
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let''s build and run the project by hitting the Play button (or use *cmd*+
    *R*). You will notice that, in the Debug panel, every time our loop runs, it gives
    a dictionary object, such as the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击播放按钮（或使用 *cmd*+ *R*）来构建和运行项目。你将注意到，在调试面板中，每次循环运行时，它都会给出一个字典对象，如下所示：
- en: '![](img/b7792e79-e6c2-4ec7-b7c4-ec79822ed174.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b7792e79-e6c2-4ec7-b7c4-ec79822ed174.png)'
- en: This is exactly what we want.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是我们想要的。
- en: 'Now, inside of `ExploreDataManager`, add the following directly above our `fetch`
    method:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在 `ExploreDataManager` 中，在我们的 `fetch` 方法上方直接添加以下内容：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, inside of our `fetch()`, update our `for...in` loop by replacing `print(data)`
    with the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在我们的 `fetch()` 中，通过将 `print(data)` 替换为以下内容来更新我们的 `for...in` 循环：
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Your file should look like mine:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你的文件应该看起来像我的一样：
- en: '![](img/2d52715e-8fba-4f8c-8844-4684c5c84904.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d52715e-8fba-4f8c-8844-4684c5c84904.png)'
- en: Let's build and run the project by hitting the Play button (or use *cmd* + *R*).
    In the Debug panel, you should see an array of Explore items.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击播放按钮（或使用 *cmd* + *R*）来构建和运行项目。在调试面板中，你应该看到一个探索项的数组。
- en: We currently have our data, and we have cells. However, we need to get our data
    to our cells so that we can see the image and name. Let's open up `Explore.storyboard`
    and update our `exploreCell`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们目前有数据，也有单元格。但是，我们需要将数据传到单元格中，这样我们就可以看到图片和名称。让我们打开 `Explore.storyboard` 并更新我们的
    `exploreCell`。
- en: Connecting to our cell
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到我们的单元格
- en: 'Now that we have our cell set up, we need to create a file so that we can connect
    to our cells:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了我们的单元格，我们需要创建一个文件以便我们可以连接到我们的单元格：
- en: Right-click on the `View` folder in the Navigator panel and select New File.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航器面板中的 `View` 文件夹上右键单击并选择新建文件。
- en: Inside of the template screen, select iOS at the top, and then Cocoa Touch Class.
    Then, hit Next.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模板屏幕中，在顶部选择 iOS，然后选择 Cocoa Touch 类。然后，点击下一步。
- en: 'You should now see an options screen. Add the following:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在应该看到一个选项屏幕。添加以下内容：
- en: 'New file:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 新建文件：
- en: 'Class: `ExploreCell`'
  id: totrans-112
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类：`ExploreCell`
- en: 'Subclass: `UICollectionViewCell`'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子类：`UICollectionViewCell`
- en: 'Also create XIB: Unchecked'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还创建 XIB：未选中
- en: 'Language: `Swift`'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语言：`Swift`
- en: 'After hitting Next, you are asked to create this file. Select Create and your
    file should look like mine:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下一步后，你将被要求创建此文件。选择创建，你的文件应该看起来像我的一样：
- en: '[PRE22]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Next, open `Explore.storyboard` and select the `exploreCell` in the Outline
    view.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开 `Explore.storyboard` 并在大纲视图中选择 `exploreCell`。
- en: In the Utilities panel, select the Identity inspector and, under Custom Class,
    type `ExploreCell`. Then, hit *Enter*.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在实用工具面板中，选择身份检查器，并在自定义类下输入 `ExploreCell`。然后，按 *Enter*。
- en: Hooking up our UI with IBOutlets
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 IBOutlets 连接我们的 UI
- en: To access our UI elements, we need to connect them with `IBOutlets`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 为了访问我们的 UI 元素，我们需要用 `IBOutlets` 将它们连接起来。
- en: Open the `ExploreCell.swift` file in the Navigator panel (or use *cmd* + *Shift*
    + *O*, type `ExploreCell`, and then hit *Enter*).
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航器面板中打开 `ExploreCell.swift` 文件（或使用 *cmd* + *Shift* + *O*，输入 `ExploreCell`，然后按
    *Enter*）。
- en: 'Inside of the class declaration, add the following:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类声明中，添加以下内容：
- en: '[PRE23]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Open `Explore.storyboard` and select your `exploreCell` again.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Explore.storyboard` 并再次选择你的 `exploreCell`。
- en: 'In the Utilities panel, select the Connection inspector. You should see both
    variables we just created, lblName and imgExplore, under Outlets:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在实用工具面板中，选择连接检查器。你应该在我们的输出下看到我们刚刚创建的两个变量，lblName 和 imgExplore：
- en: '![](img/107c615f-adf5-4873-b495-399546df0800.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/107c615f-adf5-4873-b495-399546df0800.png)'
- en: 'Now, Ctrl + drag from imgExplore to the UIImageView we put in our cell:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，从 imgExplore 拖动 Ctrl 到我们放在单元格中的 UIImageView：
- en: '![](img/41e197ca-029e-48fc-977a-720f65e183d8.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/41e197ca-029e-48fc-977a-720f65e183d8.png)'
- en: 'Repeat this step for lblName by CTL dragging from lblName to the UILabel in
    our cell:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从 lblName 拖动 CTL 到我们单元格中的 UILabel 来重复此步骤：
- en: '![](img/6ea14f32-e367-4d52-b549-4fb88c8cbe18.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6ea14f32-e367-4d52-b549-4fb88c8cbe18.png)'
- en: 'Great! Now that we have our cell set up, let''s pull data into it. In our `ExploreDataManager`,
    add these two methods above the `loadData()` method:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！现在我们已经设置了单元格，让我们将其中的数据拉入。在我们的 `ExploreDataManager` 中，在 `loadData()` 方法之上添加这两个方法：
- en: '[PRE24]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We use the first method, `numberOfItems()`, to update the total number of items
    in our Collection View. The second method, `explore (at index:IndexPath)`, is
    called for each item we create in our Collection View. Then, we use this to pass
    the data to our cell to display the name and the image.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用第一个方法，`numberOfItems()`，来更新我们的集合视图中项目总数的总数。第二个方法，`explore (at index:IndexPath)`，在我们在集合视图中创建每个项目时被调用。然后，我们使用这个方法将数据传递给单元格以显示名称和图像。
- en: 'Now that we have these two methods added, let''s open up our `ExploreViewController`
    file. We currently have the following inside of our `viewDidLoad()`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经添加了这两个方法，让我们打开我们的 `ExploreViewController` 文件。我们目前在 `viewDidLoad()` 中的内容如下：
- en: '[PRE25]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Let''s move `let manager` underneath our Collection View so that it is outside
    `viewDidLoad()`; and, therefore, we can access it anywhere within the class as
    opposed to only within the function. You should now have this before `viewDidLoad()`:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将 `let manager` 移动到我们的集合视图下面，这样它就在 `viewDidLoad()` 之外；因此，我们可以在类的任何地方访问它，而不是只在函数内部。你现在应该在
    `viewDidLoad()` 之前有这个：
- en: '[PRE26]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Inside of `viewDidLoad()`, only `manager.fetch()` remains. Next, we need to
    update our `numberOfItemsInSection()` to say:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `viewDidLoad()` 中，只剩下 `manager.fetch()`。接下来，我们需要更新我们的 `numberOfItemsInSection()`
    以说：
- en: '[PRE27]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Therefore, instead of returning 20, we are going to get the number of items
    from our plist.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们不会返回 20，而是将从我们的 plist 中获取项目数量。
- en: 'Finally, inside of our `cellForItemAt()`, revise the `let` statement in the
    third required method before `return` cell by adding `as! ExploreCell`, as follows:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在我们的 `cellForItemAt()` 中，在 `return` 单元格之前修改第三个必需方法中的 `let` 语句，添加 `as! ExploreCell`，如下所示：
- en: '[PRE28]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then, add the following after the code snippet you just added and before `return`
    cell:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在你刚刚添加的代码片段之后和 `return` 单元格之前添加以下内容：
- en: '[PRE29]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This gets an `ExploreItem` for each cell in our Collection View and passes
    the data to the cell. Finally, for your return, add the following:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这为我们的集合视图中的每个单元格获取一个 `ExploreItem` 并将数据传递给单元格。最后，对于你的返回，添加以下内容：
- en: '[PRE30]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Let''s build and run the project by hitting the Play button (or use *cmd* +
    *R*). You should now see your Collection View come to life with images and text:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击播放按钮（或使用 *cmd* + *R*）构建并运行项目。你现在应该看到你的 Collection View 有了图像和文本而变得生动起来：
- en: '![](img/b7f013e4-0cc0-453b-b7d3-029f09ec1f7f.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b7f013e4-0cc0-453b-b7d3-029f09ec1f7f.png)'
- en: The images are not perfect, but we will fix them later. Now that we have our
    cells displaying content, we need to make it so that when you select a cell, it
    goes to our restaurant listing.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图片并不完美，但我们稍后会修复它们。现在我们已经让我们的单元格显示内容，我们需要确保当你选择一个单元格时，它会跳转到我们的餐厅列表。
- en: Let's build and run the project by hitting the Play button (or use *cmd* + *R*).
    You should now be able to select your cell, and it goes to what will be your restaurant
    listing page. This page will be empty for now, so let's work on this next.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击播放按钮（或使用 *cmd* + *R*）构建并运行项目。你现在应该能够选择你的单元格，它会跳转到你的餐厅列表页面。这个页面现在将是空的，所以让我们接下来处理这个。
- en: Restaurant listing
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 餐厅列表
- en: 'Now that we have our Explore listing going to our restaurant listing, we need
    to get our Collection View connected to our `RestaurantListViewController`:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经让我们的探索列表跳转到我们的餐厅列表，我们需要将我们的 Collection View 连接到我们的 `RestaurantListViewController`：
- en: Right-click inside of the `LetsEat` folder and select New File.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 `LetsEat` 文件夹并选择新建文件。
- en: Inside of the template screen, select iOS at the top and then Cocoa Touch Class.
    Then, hit Next.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模板屏幕中，在顶部选择 iOS，然后选择 Cocoa Touch 类。然后，点击下一步。
- en: You should now see an options screen.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该看到一个选项屏幕。
- en: 'Add the following:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下内容：
- en: 'New file:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 新文件：
- en: 'Class: `RestaurantViewController`'
  id: totrans-159
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类：`RestaurantViewController`
- en: 'Subclass: `UIViewController`'
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子类：`UIViewController`
- en: 'Also create XIB: Unchecked'
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 也创建 XIB：未选中
- en: 'Language: `Swift`'
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语言：`Swift`
- en: After hitting Next, you will be asked to create this file.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 点击下一步后，你将被要求创建此文件。
- en: Select Create.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择创建。
- en: Let's delete both `didReceiveMemoryWarning()` and `prepare()` (which has been
    commented out), as we do not need them at this time.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们删除 `didReceiveMemoryWarning()` 和 `prepare()`（已被注释），因为我们现在不需要它们。
- en: Open `Restaurants.storyboard`.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Restaurants.storyboard`。
- en: Then, select the `UIViewController` in the Utility panel, and select the Identity
    inspector, which is the third icon from the left.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后在工具面板中选择 `UIViewController`，并选择身份检查器，这是从左数第三个图标。
- en: Under Custom Class, and in the Class drop-down menu, select `RestaurantViewController`
    and hit *Enter*.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在自定义类下，在类下拉菜单中选择 `RestaurantViewController` 并按 *Enter*。
- en: If your Navigator panel is currently open, close it by clicking on the hide
    navigator toggle or *cmd* + *0*.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你的导航器面板目前是打开的，通过点击隐藏导航器切换或 *cmd* + *0* 来关闭它。
- en: If your Utilities panel is currently open, close it by clicking on the Utilities
    toggle or use *cmd* + *Alt*/*Alt* + *0*.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你的工具面板目前是打开的，通过点击工具切换或使用 *cmd* + *Alt*/*Alt* + *0* 来关闭它。
- en: Next, select the Assistant editor or use *cmd* + *Alt*/*Alt* + *Enter*.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择助理编辑器或使用 *cmd* + *Alt*/*Alt* + *Enter*。
- en: You should now see `Restaurants.storyboard` on the left side and `RestaurantListViewController.swift`
    on the right.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在应该在左侧看到 `Restaurants.storyboard`，在右侧看到 `RestaurantListViewController.swift`。
- en: 'Now, add the following after:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在以下内容之后添加：
- en: '[PRE31]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: After you create the variable, you see a small circle to the left of the variable.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建变量后，你会看到变量左侧有一个小圆圈。
- en: 'When you hover over it, you see a plus button appear inside of the circle.
    Click on it and drag this to your Collection View inside of your `UIViewController`:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你悬停在它上面时，你会看到一个加号按钮出现在圆圈中。点击它并将它拖到你的 `UIViewController` 中的 Collection View：
- en: 'Once you release, you see the circle become filled:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦释放，你会看到圆圈被填充：
- en: '![](img/5cec34c5-87c8-481c-9e75-6e0ccc8fca85.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5cec34c5-87c8-481c-9e75-6e0ccc8fca85.png)'
- en: 'Now, it is time to display something inside of our Collection View:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候在我们的 Collection View 中显示一些内容了：
- en: Use *cmd* + *Shift* + *O*, which opens the Open Quickly search box, and type
    `Restaurant`. Then, hit *Enter* to select the `RestaurantListViewController.swift`
    file.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 *cmd* + *Shift* + *O*，它打开快速打开搜索框，并输入 `Restaurant`。然后，按 *Enter* 选择 `RestaurantListViewController.swift`
    文件。
- en: 'In your scene, select your Collection View. Then, in your Utilities panel select
    the Connections inspector, which is the last icon on the right. Under the Outlets
    section, `dataSource` and `delegate`, the same ones we removed earlier, we now
    add them back:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的场景中，选择你的 Collection View。然后在你的工具面板中选择连接检查器，这是右侧的最后一个图标。在输出部分下，`dataSource`
    和 `delegate`，我们之前移除的相同内容，我们现在再次添加它们：
- en: '![](img/5786b170-a33f-4d08-8a99-1267ad546ca6.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5786b170-a33f-4d08-8a99-1267ad546ca6.png)'
- en: 'Next, we need to update our class definition inside of the `RestaurantListViewController`.
    You currently have `RestaurantListViewController:UIViewController`—update it to
    the following:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要更新 `RestaurantListViewController` 中的类定义。您目前有 `RestaurantListViewController:UIViewController`——更新为以下内容：
- en: '[PRE32]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'As you learned earlier with our Explore grid, we are required to implement
    `numberOfSections()`, `numberOfItemsInSection()`, and `cellForItemAt()` in order
    to use a Collection View. Therefore, add the following three methods inside of
    our `RestaurantListViewController`:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如您之前在我们的探索网格中学习的那样，我们必须实现 `numberOfSections()`、`numberOfItemsInSection()` 和
    `cellForItemAt()` 这三个方法，以便使用集合视图。因此，在我们的 `RestaurantListViewController` 中添加以下三个方法：
- en: '[PRE33]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Let''s build and run the project by hitting the play button (or use *cmd* +
    *R*) to see what happens:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击播放按钮（或使用 *cmd* + *R*）来构建和运行项目，看看会发生什么：
- en: '![](img/ba59b23b-df4e-48d5-a667-e5f5275f5248.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ba59b23b-df4e-48d5-a667-e5f5275f5248.jpg)'
- en: Instead of having a grid, as we did for Explore, our restaurant list displays
    a column of cells. However, when the restaurant list displays on the iPad, it
    shows a grid instead. This is one of the flexibilities from which we benefit by
    using a Collection View. We will further set up our restaurant list cells along
    with displaying the data later in the book.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们在探索中使用的网格不同，我们的餐厅列表显示的是一列单元格。然而，当餐厅列表在 iPad 上显示时，它显示的是一个网格。这是我们使用集合视图所获得的灵活性之一。我们将在本书后面的章节中进一步设置我们的餐厅列表单元格，并显示数据。
- en: Summary
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we talked about what a model is and looked at what a plist
    is. We also learned how to create a plist as well as creating our first manager
    class that takes care of the data. In our data manager, we covered getting data
    from a plist and how to represent that data as a model object.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了什么是模型，并查看了一个 plist 是什么。我们还学习了如何创建 plist 以及创建我们的第一个负责数据的经理类。在我们的数据管理器中，我们涵盖了从
    plist 获取数据以及如何将数据表示为模型对象。
- en: In the next chapter, we will look at the differences between static and prototype
    Table Views. You will see a lot of similarities between Table Views and Collection
    Views, especially concerning how we get data into them.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨静态和原型表格视图之间的区别。您将看到表格视图和集合视图之间有很多相似之处，特别是在我们如何将数据放入它们中的方面。
