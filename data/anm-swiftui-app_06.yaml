- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Animating a Girl on a Swing
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画秋千上的女孩
- en: Welcome to the next project. In this one, we’re going to animate parts of an
    image, specifically an image of a girl on a swing, and make those individual parts
    move with a natural motion.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到下一个项目。在这个项目中，我们将对图像的一部分进行动画处理，具体是一张女孩在秋千上的图像，并使这些单独的部分以自然的方式移动。
- en: To do this, we’re going to take a look at an animating technique that uses any
    image or vector file of a subject and then cuts that image up into various parts
    in order to animate them separately. We will also take a look at a new modifier
    called `mask`, which is used for setting the opacity of a view.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们将研究一种动画技术，该技术使用任何主题的图像或矢量文件，然后将该图像切割成多个部分以单独动画它们。我们还将研究一个新的修改器，称为`mask`，它用于设置视图的不透明度。
- en: 'Let’s take a look at what we will learn in this project:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在这个项目中我们将学习什么：
- en: Gathering and slicing images
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集和切割图像
- en: Adding animating variables
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加动画变量
- en: Adding images to the scene
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将图像添加到场景中
- en: Using the `mask` modifier
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`mask`修改器
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You can download the resources and the finished project from the `Chapter 6`
    folder on GitHub: [https://github.com/PacktPublishing/Animating-SwiftUI-Applications](https://github.com/PacktPublishing/Animating-SwiftUI-Applications).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从GitHub上的`第6章`文件夹下载资源和完成的项目：[https://github.com/PacktPublishing/Animating-SwiftUI-Applications](https://github.com/PacktPublishing/Animating-SwiftUI-Applications)。
- en: Gathering and slicing images
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 收集和切割图像
- en: 'In this project, I will be using some simple graphics, including an image of
    a girl, a leafy background, and a branch. And, as I mentioned, we will be animating
    two parts of the scene: the swing and the girl’s legs.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我将使用一些简单的图形，包括一张女孩的图像、一个叶状背景和一根树枝。正如我提到的，我们将对场景的两个部分进行动画处理：秋千和女孩的小腿。
- en: 'The first thing you need to do is download the images as explained in the *Technical
    requirements* section and then cut the images into various parts. To do this,
    I will simply use Mac’s Preview app, which is a free app that’s already installed
    on your Mac computer. Inside this app, there is an option called **Markup**, as
    shown here:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 首先你需要做的是按照*技术要求*部分所述下载图像，然后将图像切割成各个部分。为此，我将简单地使用Mac的预览应用，这是一个已经安装在你Mac电脑上的免费应用。在这个应用中，有一个叫做**标记**的选项，如下所示：
- en: '![Figure 6.1: Accessing the Markup tools ](img/B18674_06_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图6.1：访问标记工具](img/B18674_06_01.jpg)'
- en: 'Figure 6.1: Accessing the Markup tools'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1：访问标记工具
- en: 'Clicking on **Markup** will open up an array of helpful editing tools that
    we can use to transform an image in unique ways. One of the best tools for cutting
    images is the **Lasso Selection** tool, which lets us draw a selection box around
    some or all of the parts of the image, and either cut it out or copy it to another
    window. You can find the tool in the drop-down menu located here:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**标记**将打开一系列有用的编辑工具，我们可以使用这些工具以独特的方式转换图像。用于切割图像的最佳工具之一是**套索选择**工具，它允许我们在图像的某些或全部部分周围绘制选择框，然后将其裁剪出来或复制到另一个窗口。你可以在以下下拉菜单中找到这个工具：
- en: '![Figure 6.2: Accessing the Lasso Selection tool ](img/B18674_06_02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图6.2：访问套索选择工具](img/B18674_06_02.jpg)'
- en: 'Figure 6.2: Accessing the Lasso Selection tool'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2：访问套索选择工具
- en: 'To use it, click and drag your cursor around any object, and then connect the
    start and end points when you’re done. We want to drag the lasso around the girl’s
    lower legs, just above the knee joint, like so:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用它时，点击并拖动你的光标围绕任何对象，完成后连接起点和终点。我们想要将套索拖动到女孩的小腿周围，就在膝盖关节上方，如下所示：
- en: '![Figure 6.3: Using the Lasso Selection tool [Credit: <a href=”https://www.freepik.com/vectors/clip-art”>Clip
    art vector created by brgfx - www.freepik.com</a>] ](img/B18674_06_03.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图6.3：使用套索选择工具 [来源：<a href=”https://www.freepik.com/vectors/clip-art”>由brgfx创建的剪贴画矢量图
    - www.freepik.com</a>] ](img/B18674_06_03.jpg)'
- en: 'Figure 6.3: Using the Lasso Selection tool [Credit: <a href=”[https://www.freepik.com/vectors/clip-art](https://www.freepik.com/vectors/clip-art)”>Clip
    art vector created by brgfx - [www.freepik.com](http://www.freepik.com)</a>]'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3：使用套索选择工具 [来源：<a href=”[https://www.freepik.com/vectors/clip-art](https://www.freepik.com/vectors/clip-art)”>由brgfx创建的剪贴画矢量图
    - [www.freepik.com](http://www.freepik.com)</a>]
- en: 'With the legs selected using the `leg`. Your image will look something like
    this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`leg`选择腿部后，你的图像将看起来像这样：
- en: '![Figure 6.4: Separating the leg with the Lasso Selection tool ](img/B18674_06_04.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图6.4：使用套索选择工具分离腿部](img/B18674_06_04.jpg)'
- en: 'Figure 6.4: Separating the leg with the Lasso Selection tool'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4：使用套索选择工具分离腿部
- en: 'This image is okay, but there’s a problem. The image contains a background
    that won’t look good in the scene; we only want the leg without any background.
    The best way I have found to remove backgrounds is to use a helpful free online
    tool called **removebg**, which you can access here: [https://www.remove.bg/upload](https://www.remove.bg/upload).
    Simply drop the image onto that website, and it identifies the background and
    removes it.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这张图像还可以，但有一个问题。这张图像包含一个在场景中看起来不太好的背景；我们只想得到没有背景的腿部。我发现移除背景的最佳方式是使用一个有用的免费在线工具**removebg**，你可以通过这里访问：[https://www.remove.bg/upload](https://www.remove.bg/upload)。只需将图像拖放到该网站上，它就会识别背景并将其移除。
- en: At this point, we now have our image of a leg (though our animation includes
    two legs, one image will work just fine to represent both legs of the girl).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们现在有一张女孩腿部的图像（尽管我们的动画包括两条腿，一张图像就可以很好地代表女孩的两条腿）。
- en: 'Next in our project, we also want a piece of rope, which we will use to tie
    the swing to the tree in our background image. However, if you look at *Figure
    6**.3*, the rope is a little too short for what we need. To get an extra piece
    of rope, I used the **Lasso Selection** tool around the rope, copied it, and made
    a new image, then removed the background with **removebg** (as we did with the
    leg). *Figure 6**.5* is the result; this is what we will use in the scene to extend
    the existing rope:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目中接下来，我们还想有一根绳子，我们将用它将秋千系在我们的背景图像的树上。然而，如果你看*图6.3*，绳子有点短，不符合我们的需求。为了得到额外的绳子部分，我使用**套索选择**工具围绕绳子，复制它，然后创建了一个新的图像，接着使用**removebg**（就像我们处理腿部一样）移除了背景。*图6.5*是结果；这是我们将在场景中用来延长现有绳子的：
- en: '![Figure 6.5: Rope ](img/B18674_06_05.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图6.5：绳子](img/B18674_06_05.jpg)'
- en: 'Figure 6.5: Rope'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5：绳子
- en: 'Next, I looked for a suitable background, which was a tree with some grass
    and a sky. Here is the one we will use (it originally had a tire swing; however,
    I didn’t want that kind of swing, so I removed it using some other software called
    Affinity Photo). Now we have a tree and we can tie a swing to its branch:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我寻找了一个合适的背景，它是一棵树，树下有一些草地和天空。这是我们将会使用的背景（它原本有一个秋千；然而，我不想要那种秋千，所以我使用了一些其他软件Affinity
    Photo将其移除）。现在我们有一棵树，我们可以在树枝上系一个秋千：
- en: '![Figure 6.6: Our background image ](img/B18674_06_06.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图6.6：我们的背景图像](img/B18674_06_06.jpg)'
- en: 'Figure 6.6: Our background image'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6：我们的背景图像
- en: '[Credit: [https://www.istockphoto.com/vector/tire-swing-in-autumn-gm165677003-10337433?phrase=tyre%20swing](https://www.istockphoto.com/vector/tire-swing-in-autumn-gm165677003-10337433?phrase=tyre%20swing)]'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[来源：[https://www.istockphoto.com/vector/tire-swing-in-autumn-gm165677003-10337433?phrase=tyre%20swing](https://www.istockphoto.com/vector/tire-swing-in-autumn-gm165677003-10337433?phrase=tyre%20swing)]'
- en: 'I also thought the tree was a little sparse, so I found some leaves that can
    be positioned onto the branch later, and they will also hide the top part of the
    rope:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我还觉得这棵树有点稀疏，所以我找到了一些可以放置在树枝上的树叶，它们也会隐藏绳子的顶部：
- en: '![Figure 6.7: Our leaves image ](img/B18674_06_07.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图6.7：我们的树叶图像](img/B18674_06_07.jpg)'
- en: 'Figure 6.7: Our leaves image'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7：我们的树叶图像
- en: As you play around with slicing up images and making the individual parts to
    animate, you may find that you want something better than Mac’s Preview app. You
    may also find that, even though **removebg** works in most cases, it may not work
    in every instance. If so, you can use professional software such as Photoshop;
    however, that can be expensive. Instead, you can try my favorite image editing
    software that I mentioned earlier, Affinity Designer and Affinity Photo. They
    are very reasonably priced and as robust as Photoshop, but they are much more
    user-friendly. Definitely take a look at them if you want to learn how to manipulate
    images that you can use in an iOS app without paying a yearly subscription, as
    you would for Photoshop.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当你尝试分割图像并制作动画的各个部分时，你可能发现你想要比Mac的预览应用更好的工具。你也可能发现，尽管**removebg**在大多数情况下都有效，但它可能不是在所有情况下都有效。如果是这样，你可以使用像Photoshop这样的专业软件；然而，那可能很昂贵。相反，你可以尝试我之前提到的我最喜欢的图像编辑软件Affinity
    Designer和Affinity Photo。它们的价格非常合理，并且和Photoshop一样强大，但它们更加用户友好。如果你想要学习如何在iOS应用中操作图像而不需要支付像Photoshop那样的年费订阅，那么你绝对应该看看它们。
- en: Once we have all the parts we need for the girl in the swing scene, we can start
    assembling it in Xcode. So, create a new project – I have called mine `Girl On
    A Swing` – then open the Assets catalog and drop all the images inside as we have
    done before.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们收集到了摇摆场景中女孩所需的全部部件，我们就可以开始在 Xcode 中组装它。因此，创建一个新的项目——我将其命名为 `Girl On A Swing`——然后打开资产目录，并将所有图片按照之前的方式拖入其中。
- en: Now we can start coding in the `ContentView` file; this is the only file we
    need for this project as there is very little code required to make this project
    work.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在 `ContentView` 文件中开始编码；这是我们在这个项目中需要的唯一文件，因为这个项目需要的代码非常少。
- en: Adding the animating variables
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加动画变量
- en: 'As we have done before, we start off by adding the properties needed to keep
    track of the different parts we want to animate. In our case, we need three properties:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所做的那样，我们首先添加了跟踪我们想要动画的不同部件所需的属性。在我们的例子中，我们需要三个属性：
- en: One property for the girl image, aptly called `girl`
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于女孩图像的属性，恰当地命名为 `girl`
- en: One for the left leg, called `leftLeg`
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于左腿的属性，命名为 `leftLeg`
- en: One for the right leg, called `rightLeg`
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于右腿的属性，命名为 `rightLeg`
- en: Even though we are using one image for both the right and left legs, we still
    need two separate leg properties for the animation to work because the legs will
    be moving at different times and speeds.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们使用一个图像来表示右腿和左腿，但为了使动画工作，我们仍然需要两个独立的腿属性，因为腿会在不同的时间和速度下移动。
- en: 'All of these properties will be `State` properties, so they will update the
    view instantly as their values change. Put the following code into the `ContentView`
    file, just above the `body` property:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些属性都将被设置为 `State` 属性，因此当它们的值发生变化时，视图将立即更新。将以下代码放入 `ContentView` 文件中，在 `body`
    属性之上：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As usual, all the properties are all set to `false` so the animation won’t start
    until they are changed to `true`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如同往常，所有属性都设置为 `false`，这样动画就不会开始，直到它们被更改为 `true`。
- en: 'We’re also going to add a fourth property, which I’m calling `fadeOutRope`.
    This isn’t strictly necessary, but it gives me an opportunity to show you how
    to use the `mask` modifier, which masks a view by changing its opacity; if we
    pass in a gradient color, we can make the rope fade out as it reaches the tree
    branch. Here is the property I want you to add under the previous ones:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将添加一个第四个属性，我将其命名为 `fadeOutRope`。这并不是严格必要的，但它给了我一个机会向您展示如何使用 `mask` 修饰符，该修饰符通过改变视图的不透明度来遮罩视图；如果我们传入一个渐变色，我们就可以使绳子在达到树枝时逐渐消失。以下是您需要在之前的属性下添加的属性：
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `Gradient` function needs an array of colors to work, so I gave it two
    colors: a `clear` color (or non-color), and a `black` color. These two colors
    will be blended together into the rope image, making the top portion fade out.
    As I said, this is not strictly necessary; however, I think it’s better to fade
    out the top of the rope because it’s not tied to the branch of the tree in the
    image we are using, so we want to blend it in a little bit, giving the appearance
    that it is attached somewhere in the tree. Later, we will use the `mask` modifier,
    add an image of some leaves to help conceal the top of the rope, and make the
    scene look even more natural.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`Gradient` 函数需要一个颜色数组才能工作，所以我提供了两种颜色：一种 `clear` 颜色（或无颜色），以及一种 `black` 颜色。这两种颜色将混合到绳子图像中，使顶部部分逐渐消失。正如我所说的，这并不是严格必要的；然而，我认为使绳子的顶部逐渐消失会更好，因为它并没有连接到我们使用的图像中的树枝，因此我们希望将其稍微混合一下，使其看起来像是连接在树的某个地方。稍后，我们将使用
    `mask` 修饰符，添加一些树叶的图像来帮助隐藏绳子的顶部，使场景看起来更加自然。'
- en: Adding the images to the scene
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将图像添加到场景中
- en: 'There are four images we need to add to our scene, which we will add in the
    following order:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加四个图像到我们的场景中，我们将按照以下顺序添加：
- en: The background
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 背景
- en: The right leg
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右腿
- en: The girl
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 女孩
- en: The left leg
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左腿
- en: So, let’s get started!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们开始吧！
- en: Adding the background
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加背景
- en: 'We’ll add the background inside a `ZStack`, this will be the first view in
    the file, and so all subsequent views will be placed on top of this. Here is the
    code you need:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 `ZStack` 内部添加背景，这将是文件中的第一个视图，因此所有后续的视图都将放置在这个视图之上。以下是您需要的代码：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In `ZStack`, we call the `Image` initializer and pass in the `tree` string.
    Next, we use the `resizable` modifier to resize the tree, and then set the `frame`
    of the background to a width of `550` and a height of `900` so the background
    image can extend to the edges of an iPhone of any size.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `ZStack` 中，我们调用 `Image` 初始化器并传入 `tree` 字符串。接下来，我们使用 `resizable` 修饰符来调整树的大小，然后将背景的
    `frame` 设置为宽度 `550` 和高度 `900`，这样背景图像就可以延伸到任何尺寸的 iPhone 的边缘。
- en: Adding the right leg
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加右腿
- en: When it comes to adding the `rightleg`, `leftleg`, and `girl` properties, we
    need another `ZStack` so we can layer all of the views on top of each other, then
    use the `offset` modifier to move them into place as needed.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到添加`rightleg`、`leftleg`和`girl`属性时，我们需要另一个`ZStack`，这样我们就可以将所有视图叠加在一起，然后使用`offset`修饰符将它们移动到所需的位置。
- en: 'To add the right leg to the scene, enter the following code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要将右腿添加到场景中，输入以下代码：
- en: '[PRE3]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: First, the `Image` initializer gets passed into it the name of the image we
    want to display; here, it’s `"leg"`. Remember, we are using this one image to
    represent the right and left legs (we can get away with using a single image because
    this is a 2D scene; we don’t have a 3D view around the image, so we can’t really
    see any variance in each leg).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，`Image`初始化器传入我们要显示的图像名称；这里，是`"leg"`。记住，我们使用这张图像来代表左右腿（由于这是一个2D场景，我们可以使用单张图像；我们没有图像周围的3D视图，因此我们实际上看不到每条腿的任何差异）。
- en: Next, we will use the `resizable` modifier and set the aspect ratio to `fit`.
    Using the `fit` option resizes the image content to use all the available screen
    space, both vertically and horizontally.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用`resizable`修饰符并将纵横比设置为`fit`。使用`fit`选项将图像内容调整到使用所有可用的屏幕空间，包括垂直和水平方向。
- en: The next line of code sets the `rotationEffect` on the leg. The right leg will
    be rotated by `-20` degrees when the `rightLeg` property is `true`, and it will
    rotate `50` degrees when it is `false`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行代码设置了腿的`rotationEffect`。当`rightLeg`属性为`true`时，右腿将旋转`-20`度，当它为`false`时，将旋转`50`度。
- en: Notice the `anchor` parameter too? An anchor point is the point around which
    the image will rotate. When thinking about humans (and animals too), our anchor
    points are our joints. We bend and move from those joints, our pivot points. In
    our project, by using the `topTrailing` option, the leg will rotate about the
    knee joint.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到`anchor`参数吗？锚点是指图像将围绕其旋转的点。当我们考虑人类（以及动物）时，我们的锚点是我们的关节。我们弯曲和移动都是从这些关节开始的，我们的支点。在我们的项目中，通过使用`topTrailing`选项，腿将围绕膝盖关节旋转。
- en: Note
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you type a dot (`.`) into your code, you can see the other options Xcode
    offers for your anchor point.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将一个点（`.`）输入到你的代码中，你将可以看到Xcode为你提供的关于锚点的其他选项。
- en: After that, we need to scale the image down to a usable size. As it is, it’s
    too big for the screen, so by using the `scaleEffect` modifier, we have scaled
    it down to 12 percent of its original size. For our scene, that’s a nice fit.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们需要将图像缩放到可用的尺寸。就目前而言，它对于屏幕来说太大，因此通过使用`scaleEffect`修饰符，我们将它缩小到原始大小的12%。对于我们这个场景来说，这是一个很好的匹配。
- en: The next line of code uses the `offset` modifier to place the right leg in the
    exact location we need. It needs to be placed at the knee joint of the girl image,
    which I worked out to be a value of -448 for the *x*-axis and 92 for the *y*-axis.
    Arriving at those coordinates is really just a matter of trial and error. For
    example, if you want to move the part up on the screen, add a smaller number for
    the *y* position, and if you want to move the image to right, add a larger number
    for the *x* position.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行代码使用`offset`修饰符将右腿放置在我们需要的确切位置。它需要放置在女孩图像的膝盖关节处，我计算出的值是*x*-轴的-448和*y*-轴的92。到达这些坐标实际上只是试错的过程。例如，如果你想将部分向上移动到屏幕上，为*y*位置添加一个较小的数字，如果你想将图像向右移动，为*x*位置添加一个较大的数字。
- en: Finally, we get to the animation, most of which we have seen before. Here, the
    `animation` modifier does the work of moving the leg, with a `duration` of 1 second,
    which is the time it takes for the animation to finish. Also, using a slight `delay`
    of `.09` seconds will give a more random look to the animation as we will set
    the left leg to a different delay.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们来到了动画部分，其中大部分我们都已经见过。在这里，`animation`修饰符负责移动腿，持续时间为1秒，这是动画完成所需的时间。此外，使用轻微的`.09`秒延迟将使动画看起来更加随机，因为我们将会将左腿设置成不同的延迟。
- en: As well as this, we want the animation to repeat forever, or at least until
    the user stops the app, so that’s why the `repeatForever` function is used. The
    `autoReverse` parameter has a value of `true` because we want the animation to
    go forward in one direction, finish, reverse itself, and continue in the opposite
    direction. Also, the `animation` modifier needs a property for its `value` parameter,
    and for that, we pass the `rightLeg` property into it.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们希望动画无限重复，或者至少直到用户停止应用程序，这就是为什么使用`repeatForever`函数的原因。`autoReverse`参数的值为`true`，因为我们希望动画在一个方向上前进，完成，然后反转并继续在相反方向上。此外，`animation`修饰符需要一个属性作为其`value`参数，为此，我们将`rightLeg`属性传递给它。
- en: The final part of this code is the `onAppear` modifier. This modifier is used
    to run code when the view appears on the screen, hence the name `onAppear`. In
    `body`, we toggle the `rightLeg` property to `true` to activate the animation.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的最后部分是`onAppear`修饰符。这个修饰符用于在视图出现在屏幕上时运行代码，因此命名为`onAppear`。在`body`中，我们切换`rightLeg`属性为`true`以激活动画。
- en: Now, having a leg on the screen that is animating back and forth is not really
    the look we are going for, so let’s add the girl now, followed by the left leg.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，屏幕上有一个来回摆动的腿，这并不是我们想要的外观，所以现在让我们添加女孩，然后是左腿。
- en: Adding the girl
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加女孩
- en: 'To add the girl to the scene, enter the following code:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要将女孩添加到场景中，请输入以下代码：
- en: '[PRE4]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This is similar code to adding the leg: we used the `Image` initializer, passed
    in the `Girl` image, made it `resizable`, and set its `aspectRatio` to `fit`.
    Then we only needed two more modifiers to finish this image off: `scaleEffect`,
    which will scale the image down to fit in the scene, and `offset` to place the
    girl image in the correct position on the *x*-and *y*-axes (using values of `-300`
    for `x` and `0` for `y` will place the girl in about the middle of the screen).'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码与添加腿的代码类似：我们使用了`Image`初始化器，传递了`Girl`图像，使其可调整大小，并将`aspectRatio`设置为`fit`。然后我们只需要两个额外的修饰符来完成这个图像：`scaleEffect`，它将图像缩放到适合场景的大小，以及`offset`，用于将女孩图像放置在*x*和*y*轴的正确位置（使用`x`的值为`-300`和`y`的值为`0`将女孩放置在大约屏幕中间）。
- en: Adding the left leg
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加左腿
- en: 'Finally, to complete the girl image, she needs a left leg:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了完成女孩图像，她需要一个左腿：
- en: '[PRE5]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The code for this left leg is pretty much the same as for the right leg, but
    we used the `leftLeg` property and changed some values. For example, the `duration`
    property for this leg is `0.4` and the `delay` property is `1` second. As I mentioned
    earlier, by adding different durations and delays from the other images, we can
    randomize the swinging effect a little bit so that the legs don’t both go up and
    down together. This will give the animation a more natural swinging motion.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这条左腿的代码与右腿的代码几乎相同，但我们使用了`leftLeg`属性并更改了一些值。例如，这条腿的`duration`属性为`0.4`，`delay`属性为`1`秒。正如我之前提到的，通过添加与其他图像不同的持续时间以及延迟，我们可以稍微随机化摆动效果，这样两条腿就不会同时上下摆动。这将使动画的摆动动作更加自然。
- en: Bringing the images together
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将图像组合在一起
- en: 'With this code in place, we have finished piecing together the girl in the
    swing scene, but if you look at the preview, it only shows the background so far:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码到位后，我们已经完成了摆动场景中女孩的拼接，但如果查看预览，它只显示了背景：
- en: '![Figure 6.8: Our animation with just the background ](img/B18674_06_08.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图6.8：只有背景的动画](img/B18674_06_08.jpg)'
- en: 'Figure 6.8: Our animation with just the background'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.8：只有背景的动画
- en: 'Where are the two legs and the girl that we just coded? Well, it’s all there,
    but it’s just not positioned over the background yet; it’s all off to the side
    of the screen. This is because we positioned the legs in relation to the girl,
    but we didn’t position the completed image in relation to the background scene.
    To do that, let’s come out of the second `ZStack` brace and add the following
    code:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚编写的两条腿和女孩在哪里？嗯，它们都在那里，但它们还没有定位在背景上；它们都在屏幕的一侧。这是因为我们根据女孩定位了腿，但没有根据背景场景定位完成的图像。为了做到这一点，让我们从第二个`ZStack`花括号中出来，并添加以下代码：
- en: '[PRE6]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is what the code does:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的功能如下：
- en: The first line offsets the completed `Girl` image a small amount so it’s centered.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一行将完成的`Girl`图像偏移一小段距离，使其居中。
- en: The second line sets the rotation parameters for the completed image, meaning
    how far we want the girl to swing back and forth. If the `girl` property is `true`,
    the girl image will swing to the right (`-30`), and if it’s `false`, the image
    will swing to the left (`-45`); this creates the swinging animation. The anchor
    point is placed above the girl image; this is where we want the image to pivot
    from.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二行设置了完成图像的旋转参数，即我们希望女孩来回摆动的幅度。如果`girl`属性为`true`，女孩图像将向右摆动（`-30`），如果为`false`，图像将向左摆动（`-45`）；这创建了摆动动画。支点放置在女孩图像上方；这是我们希望图像围绕旋转的点。
- en: And the third line adds the animation to the completed image, with a `duration`
    value of `1` second and a slight `delay` of `0.09` seconds.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三行将动画添加到完成图像中，持续时间为`1`秒，轻微延迟为`0.09`秒。
- en: 'And with that code completed, you can now see the girl and the legs. However,
    there’s still a problem: the image of the girl and her legs looks too small, and
    the legs are not connected to the girl:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这段代码的完成，你现在可以看到女孩和她的腿。然而，还有一个问题：女孩和她的腿的图像看起来太小了，而且腿没有连接到女孩身上：
- en: '![Figure 6.9: Our animation with the image parts disconnected ](img/B18674_06_09.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图6.9：我们的动画，图像部分未连接](img/B18674_06_09.jpg)'
- en: 'Figure 6.9: Our animation with the image parts disconnected'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.9：我们的动画，图像部分未连接
- en: 'To fix this, we need to add one line of code just after the closing brace of
    the very first `ZStack`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为了修复这个问题，我们需要在第一个`ZStack`的闭合括号之后添加一行代码：
- en: '[PRE7]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This code sets the frame’s width and height of all the views inside the `ZStack`
    so it’s in proportion to the background. Here is the result:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码设置了`ZStack`内部所有视图的宽度和高度，使其与背景成比例。以下是结果：
- en: '![Figure 6.10: Our animation with the image parts (nearly) connected ](img/B18674_06_10.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图6.10：我们的动画，图像部分（几乎）连接在一起](img/B18674_06_10.jpg)'
- en: 'Figure 6.10: Our animation with the image parts (nearly) connected'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.10：我们的动画，图像部分（几乎）连接在一起
- en: 'Go ahead and run the application to see what it does. There are three animations
    happening here; the girl is swinging back and forth, and each leg is separately
    kicking up and down, as shown here:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，运行一下这个应用程序看看它会做什么。这里同时有三个动画在进行；女孩在来回摆动，每条腿都在单独地上下踢动，如图所示：
- en: '![Figure 6.11: The animation (with the parts nearly connected) ](img/B18674_06_11.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图6.11：动画（部分几乎连接在一起）](img/B18674_06_11.jpg)'
- en: 'Figure 6.11: The animation (with the parts nearly connected)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.11：动画（部分几乎连接在一起）
- en: Everything is now animating... but look at the top of the swing in *Figure 6**.11*.
    The rope ends in mid-air. Let’s use the rope and leaf images in the Assets catalog
    to fix this.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一切都在动画中...但是看看摆动的顶部在*图6.11*中。绳索在空中结束。让我们使用资产目录中的绳索和树叶图像来修复这个问题。
- en: Using the mask modifier
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用遮罩修饰符
- en: 'The rope is not attached to anything – how can we fix that? Well, it’s easy:
    by adding two rope pieces and using a `mask` modifier to help them gradually fade
    out at the top.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 绳索没有连接到任何东西——我们怎么修复它呢？嗯，很简单：通过添加两根绳索并使用`mask`修饰符帮助它们在顶部逐渐淡出。
- en: 'Directly after the closing brace of the `onAppear` modifier for the left leg,
    add this code:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在左腿的`onAppear`修饰符的闭合括号之后直接添加以下代码：
- en: '[PRE8]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We need two pieces of rope because the swing has two pieces, a right piece and
    a left piece. For this reason, I added two blocks of code, one for each piece.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要两根绳索，因为摆动有两部分，一根是右边的部分，另一根是左边的部分。因此，我添加了两块代码，每部分一个。
- en: The code to add the rope is nothing new; we’re just using the `Image` initializer
    to pass in our rope image and setting the aspect ratio to `fit`. But what is new
    here is that we’re using the `mask` modifier. The `mask` modifier applies a masking
    view to the view it’s called on. The masking view defines the visible area of
    the view it is applied to, and any parts of the view that fall outside of the
    masking view’s frame will not be visible.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 添加绳索的代码并没有什么新意；我们只是使用`Image`初始化器传入我们的绳索图片，并将纵横比设置为`fit`。但这里的新颖之处在于我们使用了`mask`修饰符。`mask`修饰符将一个遮罩视图应用到被调用的视图上。遮罩视图定义了应用到的视图的可见区域，任何超出遮罩视图框架的视图部分将不可见。
- en: The `mask` modifier takes a single parameter, which is the view that will be
    used as the mask. If we pass in `gradient` as we’re doing here, we can gradually
    fade out the rope as it extends upward. This is where the `LinearGradient` function
    and our `fadeOutRope` property come into play; the latter contains an array of
    gradient colors (two colors actually, clear and black) that we pass into the `LinearGradient`
    function.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`mask` 修饰符接受一个参数，即用作遮罩的视图。如果我们像这里一样传递 `gradient`，则可以逐渐淡出向上延伸的绳索。这就是 `LinearGradient`
    函数和我们的 `fadeOutRope` 属性发挥作用的地方；后者包含一个渐变颜色数组（实际上是两种颜色，透明和黑色），我们将其传递给 `LinearGradient`
    函数。'
- en: We also need to consider the `startPoint` (where you want to start blending
    in the next color) and the `endPoint` (where you want to end one color and start
    another color). In our code, the `startPoint` for the gradient is at the top of
    the rope image, and `endPoint` is at the bottom of the rope image. The reason
    why we want the start point at the top is so that it will have a clear color so
    we can fade out the rope as it moves upward.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要考虑 `startPoint`（你想要开始混合下一个颜色的地方）和 `endPoint`（你想要结束一种颜色并开始另一种颜色的地方）。在我们的代码中，渐变的
    `startPoint` 在绳索图像的顶部，而 `endPoint` 在绳索图像的底部。我们想要起点在顶部的原因是，这样它将有一个清晰的颜色，这样我们就可以在绳索向上移动时将其淡出。
- en: 'In the final two lines of code, we set the size of the left and right rope
    images and offset them so they fit perfectly over the rope that’s attached to
    the swing. This is the result of adding the two rope images with the `mask` modifier:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码的最后两行中，我们设置了左右绳索图像的大小并将它们偏移，以便它们完美地覆盖在吊绳上。这是添加带有 `mask` 修饰符的两个绳索图像的结果：
- en: '![Figure 6.12: Our animation after adding the mask modifier ](img/B18674_06_12.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.12：添加遮罩修饰符后的我们的动画](img/B18674_06_12.jpg)'
- en: 'Figure 6.12: Our animation after adding the mask modifier'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.12：添加遮罩修饰符后的我们的动画
- en: If you run the app now, you’ll see that the rope extends up and fades away at
    the top. This looks much better because now the rope appears to be somewhere near
    the branch.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在运行这个应用，你会看到绳索向上延伸并在顶部淡出。这看起来好多了，因为现在绳索看起来好像就在树枝附近。
- en: 'To improve this even further, we can partially cover up the end of the rope
    by adding the leaves image to the scene. To do this, add this final bit of code
    at the very end of the first `ZStack`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步提高这个项目，我们可以在场景中添加树叶图像来部分遮挡绳索的末端。为此，在第一个 `ZStack` 的最后添加这段最后的代码：
- en: '[PRE9]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This is familiar code that we have used already, adding leaves to the scene,
    setting an appropriate `aspectRatio` and `frame` size, rotating it to the correct
    angle, which is perpendicular to the branch, and finally locating it on the x-and
    y-axis with the `offset` modifier.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们已经使用过的熟悉代码，向场景中添加树叶，设置合适的 `aspectRatio` 和 `frame` 大小，将其旋转到正确的角度，即与树枝垂直的角度，并最终使用
    `offset` 修饰符将其定位在 x 和 y 轴上。
- en: 'Now the rope at the top is partially hidden by the leaves, giving the effect
    that it''s tied off somewhere up in the branch:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在顶部的绳索被树叶部分遮挡，给人一种它在树枝上某个地方系起来的效果：
- en: '![Figure 6.13: Our completed animation ](img/B18674_06_13.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.13：我们的完成动画](img/B18674_06_13.jpg)'
- en: 'Figure 6.13: Our completed animation'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.13：我们的完成动画
- en: And with that, the project is complete. Run it and see what you think.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，项目就完成了。运行它，看看你的想法。
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this project, we learned how to take an image and cut out various parts at
    the joints, use those new images in code, and animate them in different and interesting
    ways. We also worked with modifiers that we have worked with before, including
    `rotation`, `scale`, and `offset`, but also a new modifier, `mask`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们学习了如何从一个图像中剪出各个关节部分，在代码中使用这些新图像，并以不同和有趣的方式对它们进行动画处理。我们还使用了之前使用过的修饰符，包括
    `rotation`、`scale` 和 `offset`，以及一个新的修饰符 `mask`。
- en: There are ways to take this project further. If you’re feeling curious, see
    whether you can cut the arms and head from the picture, and then give them some
    animation as well. Play around with the parameters so you can make each part move
    just enough to look natural. Maybe you can make the arms pivot at the elbow just
    slightly as the swing moves forward and backward. Add a button if you want so
    you can start and stop the animation that way. Mainly, just experiment and have
    fun!
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 有方法可以将这个项目进一步发展。如果你感到好奇，看看你是否可以从中剪下手臂和头部，然后也给他们添加一些动画。调整参数，以便每个部分都能自然地移动。也许你可以让手臂在摆动前后稍微在肘部旋转。如果你想的话，可以添加一个按钮来开始和停止动画。主要的是，只是实验并享受乐趣！
- en: In the next project, we will look at the three different axes of rotation, *x*,
    *y*, and *z*, and create an animation that will rotate a fan using gears and chains,
    similar to a bicycle chain that turns its gears.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个项目中，我们将探讨三个不同的旋转轴，*x*、*y* 和 *z*，并创建一个动画，使用齿轮和链条来旋转风扇，类似于自行车链条带动齿轮旋转的情况。
