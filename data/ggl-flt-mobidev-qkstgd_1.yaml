- en: Introducing Flutter
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Flutter
- en: '**Flutter** is a application development framework from Google for creating
    cross-platform mobile applications (in iOS and Android). As mentioned on the official
    website ([https://flutter.io/](https://flutter.io/)), it aims to make the development
    as easy, quick, and productive as possible. Things such as **Hot Reload**, a vast
    widget catalog, very good performance, and a solid community contribute to meeting
    that objective and makes Flutter a pretty good framework.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**Flutter**是谷歌为创建跨平台移动应用程序（iOS和Android）而开发的应用程序开发框架。如官方网站[https://flutter.io/](https://flutter.io/)所述，它旨在使开发尽可能简单、快速和高效。诸如**热重载**、庞大的小部件目录、非常好的性能和坚实的社区等因素有助于实现这一目标，使Flutter成为一个相当不错的框架。'
- en: This book is going to be a guide for you in your journey from getting started
    with Flutter to eventually deploying your applications on it. But, before that,
    let's have a quick introduction to Flutter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将指导你从开始使用Flutter到最终在它上面部署应用程序的旅程。但在那之前，让我们快速介绍一下Flutter。
- en: 'In this chapter, we will cover the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: The origin of Flutter
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flutter的起源
- en: What is a widget?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是小部件？
- en: Comparing Flutter to existing frameworks
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Flutter与现有框架进行比较
- en: The origin of Flutter
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flutter的起源
- en: The origin of Flutter was similar to that of a lot of famous software. It was
    developed at Google. Initially, Flutter was an experiment, as the developers at
    Google were trying to remove a few compatibility supports from Chrome, to try
    to make it run smoother. After a few weeks, and after many of the compatibility
    supports were removed, the developers found that they had something that rendered
    20 times faster than Chrome did and saw that it had the potential to be something
    great.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Flutter的起源与许多著名软件的起源相似。它是在谷歌开发的。最初，Flutter是一个实验，因为谷歌的开发人员试图从Chrome中移除一些兼容性支持，以尝试使其运行得更顺畅。几周后，在移除了许多兼容性支持之后，开发人员发现他们拥有一个比Chrome快20倍的渲染器，并看到它有成为伟大事物的潜力。
- en: Google had created a layered framework that communicated directly with the CPU
    and the GPU in order to allow the developer to customize the applications as much
    as possible.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌创建了一个分层框架，它直接与CPU和GPU通信，以便让开发者尽可能多地自定义应用程序。
- en: What is a widget?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是小部件？
- en: Everything in Flutter can be created using widgets. Orientation, layout, opacity,
    animation... everything is just a widget. It is the main feature of Flutter, and
    everything from a simple button to an animation or gesture is done using widgets.
    And this is great because it allows the users to choose composition over inheritance,
    making the construction of an app as simple as building a Lego tower. All you
    do is just pick up widgets and put them together to create an application.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Flutter中的所有内容都可以使用小部件创建。方向、布局、不透明度、动画……一切都是小部件。这是Flutter的主要特点，从简单的按钮到动画或手势，所有操作都是通过小部件完成的。这很棒，因为它允许用户选择组合而不是继承，使构建应用程序的过程就像搭建乐高塔一样简单。你只需要挑选小部件并将它们组合起来以创建应用程序。
- en: There are a number of fundamental widgets that will help you build an application
    with Flutter. All these widgets are cataloged in the **Flutter Widget Catalog**.
    Because everything in Flutter is made up of widgets, the more you learn how to
    use, create, and compose them, the better and faster you become at using Flutter.
    We will be going into much more detail about widgets and the widget catalog in
    Chapter 3, *Widgets, Widgets Everywhere*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多基本的小部件可以帮助你使用Flutter构建应用程序。所有这些小部件都编入**Flutter小部件目录**。因为Flutter中的所有内容都是由小部件组成的，所以你越了解如何使用、创建和组合它们，你使用Flutter的能力就越好、越快。在第3章“小部件，无处不在的小部件”中，我们将更详细地介绍小部件和小部件目录。
- en: Comparing Flutter to existing frameworks
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Flutter与现有框架进行比较
- en: When speaking of mobile application development, there are many different approaches
    that we can find, but, in the end, everything comes down to either a native or
    a cross-platform approach. Let's see how different approaches look and work when
    compared to Flutter. We will first take a look at the native platforms, and then,
    before looking at the cross-platform approach, we will take a look at the **WebView**
    system, and finally we will see where Flutter fits into this mix.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当谈到移动应用开发时，我们可以找到许多不同的方法，但最终，一切归结为原生或跨平台方法。让我们看看不同的方法与Flutter相比看起来和运作如何。我们首先将看看原生平台，然后，在查看跨平台方法之前，我们将看看**WebView**系统，最后我们将看看Flutter在这个组合中的位置。
- en: Native platforms
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原生平台
- en: 'Native frameworks such as Android and iOS SDKs are rock solid. They are the
    most stable choice for mobile application development. They have lots of available
    apps that are deeply tested and have a large community and openly available tutorials.
    The following diagram displays the working of native mobile application development
    frameworks:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 原生框架，如 Android 和 iOS SDK，非常稳固。它们是移动应用开发的最佳稳定选择。它们有很多可用的应用，经过深度测试，拥有庞大的社区和公开可用的教程。以下图显示了原生移动应用开发框架的工作原理：
- en: '![](img/735df69a-fe2d-4fd0-9143-4d18c34ce521.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/735df69a-fe2d-4fd0-9143-4d18c34ce521.png)'
- en: 'As we can see in the preceding diagram, the **app** in this framework talks
    directly to the system. This makes the native framework the most powerful choice
    in terms of functionality. However, it does have a drawback: you need to learn
    two different languages, Kotlin or Java for Android, Obj-C or Swift for iOS and
    the SDKs. These languages are used to write two different apps with the same functionalities.
    Every modification must be duplicated on both platforms, and the process might
    not be that smooth. It is not a good choice for a small team or for someone who
    needs speed in their development process.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，在这个框架中，**应用**直接与系统对话。这使得原生框架在功能方面成为最强大的选择。然而，它确实有一个缺点：你需要学习两种不同的语言，Android
    的 Kotlin 或 Java，iOS 的 Obj-C 或 Swift，以及 SDK。这些语言用于编写具有相同功能的不同应用。每次修改都必须在两个平台上重复，这个过程可能并不那么顺畅。对于小型团队或需要开发速度的人来说，这并不是一个好的选择。
- en: WebView systems
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WebView 系统
- en: On the other hand, we have the cross-platform approach, which is famous for
    being productive. In this approach, we can get the application for both Android
    and iOS from a single code base, just like in Flutter. But every framework has
    some drawbacks.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，我们有著名的跨平台方法，它以高效著称。在这个方法中，我们可以从单个代码库中获取 Android 和 iOS 的应用，就像在 Flutter 中一样。但每个框架都有一些缺点。
- en: Cordova-, Ionic-, PhoneGap-, and WebView-based frameworks in general are good
    examples of cross-platform frameworks, and they are especially good solutions
    for frontend developers. But these lack in performance, and the app view in these
    approaches is composed by a WebView rendering HTML; this means that the app is
    basically a website.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Cordova、Ionic、PhoneGap 和基于 WebView 的框架通常是跨平台框架的好例子，它们对于前端开发者来说尤其是一些好的解决方案。但它们在性能方面有所欠缺，在这些方法中，应用视图由
    WebView 渲染的 HTML 组成；这意味着应用基本上是一个网站。
- en: 'The following diagram shows how a WebView-based framework works:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图示展示了基于 WebView 的框架是如何工作的：
- en: '![](img/36140f00-a9ad-48db-a5a1-55533febdf12.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/36140f00-a9ad-48db-a5a1-55533febdf12.png)'
- en: The system uses a bridge to make the switch between JavaScript to the native
    system. This process will be too slow, depending on the features you need, which
    adds another drawback to this system.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 该系统使用一个桥接器来实现 JavaScript 与原生系统之间的切换。这个过程可能会非常慢，这取决于你需要的功能，这给这个系统增加了另一个缺点。
- en: Other cross-platform approaches
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他跨平台方法
- en: Let's take an example of another cross-platform approach to see what could be
    the shortcomings of it. **Xamarin** is the Windows answer to cross-platform development,
    which in my opinion is not so convenient, especially in terms of productivity
    and compiling time.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以另一个跨平台方法为例，看看它可能存在的不足。**Xamarin** 是 Windows 平台的跨平台开发解决方案，在我看来，它并不那么方便，尤其是在生产力和编译时间方面。
- en: When looking at other platforms, **React Native** could be considered as one
    of the best of the cross-platform frameworks, but it heavily relies on OEM components.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当查看其他平台时，**React Native** 可以被认为是跨平台框架中最好的之一，但它严重依赖于 OEM 组件。
- en: 'Lets take a look at the workings of React Native:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看 React Native 的工作原理：
- en: '![](img/99f6760c-5540-476e-9663-510cce64565d.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99f6760c-5540-476e-9663-510cce64565d.png)'
- en: React Native expands the bridge concept in the WebView systems, and uses it
    not only for services, but also to build widgets. This is really dangerous in
    terms of performance; for example, a component may be built hundreds of times
    during an animation, but due to the expanded concept of the bridge, this component
    may slow down to a great extent. This could also lead to other problems, especially
    on Android, which is the most fragmented operating system.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: React Native 在 WebView 系统中扩展了桥接概念，不仅用于服务，还用于构建小部件。从性能的角度来看，这确实很危险；例如，一个组件在动画过程中可能被构建数百次，但由于桥接概念的扩展，这个组件可能会大幅度减慢速度。这也可能导致其他问题，尤其是在
    Android 上，这是最碎片化的操作系统。
- en: Flutter's approach
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flutter 的方法
- en: In the previous sections, we took a look at different approaches to mobile application
    development. We have briefly seen how these approaches work and their drawbacks.
    Now let's take a look at Flutter.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们探讨了移动应用开发的多种方法。我们简要地了解了这些方法的工作原理及其缺点。现在让我们来看看Flutter。
- en: Flutter performs much better in comparison to other solutions, because the application
    is compiled **AOT** (**Ahead Of Time**) instead of **JIT **(**Just In Time**)
    like the JavaScript solutions. It also eliminates the concept of the bridge and
    does not rely on the OEM platform. It does allow custom components to use all
    the pixels in the screen. What does this mean? It basically means that the app
    displays the same on every version of Android and iOS.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他解决方案相比，Flutter的表现要好得多，因为应用程序是编译**AOT**（**提前编译**）而不是像JavaScript解决方案那样的**JIT**（**即时编译**）。它还消除了桥接的概念，并且不依赖于OEM平台。它确实允许自定义组件使用屏幕上的所有像素。这意味着什么？这基本上意味着应用程序在Android和iOS的每个版本上显示效果相同。
- en: 'We did take a look at the workings of other approaches, so let''s take a look
    at the workings of Flutter as well. You can see the way the Flutter framework
    works as shown in the following diagram:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们确实研究了其他方法的工作原理，所以让我们也来看看Flutter的工作原理。您可以在以下图中看到Flutter框架的工作方式：
- en: '![](img/b29966d6-9ed6-43f6-95cd-3bdff0c108ff.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b29966d6-9ed6-43f6-95cd-3bdff0c108ff.png)'
- en: Now you can see the difference between other cross-platform approaches and Flutter.
    As stated before, Flutter eliminated the bridge and the OEM platform and uses
    **Widgets Rendering** instead to work with the canvas and events. And it uses
    **Platform Channels** to use the services. In addition, it is not difficult to
    use platform APIs with an asynchronous messaging system, which means if you need
    to use a specific Android or iOS feature, you can do it easily.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以看到其他跨平台方法与Flutter之间的区别。如前所述，Flutter消除了桥接和OEM平台，并使用**Widgets Rendering**来与画布和事件一起工作。它还使用**平台通道**来使用服务。此外，使用异步消息系统使用平台API并不困难，这意味着如果您需要使用特定的Android或iOS功能，可以轻松实现。
- en: 'Flutter also makes it possible to create plugins using channels that can be
    used by every new developer. So, to put it simply: code once, and use it everywhere!'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Flutter还使得使用通道创建插件成为可能，这些插件可以被每个新开发者使用。简单来说：一次编写，到处使用！
- en: Why use Flutter?
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么使用Flutter？
- en: 'Flutter is a good option for cross-platform development due to its many features
    and a few things that it does differently than other approaches, as we have seen.
    It is not only a good option for the developers, but also for users and designers;
    let''s take a look at why this is:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Flutter由于其众多特性和与其他方法不同的几个方面，是跨平台开发的一个好选择，正如我们所看到的。它不仅对开发者来说是一个好选择，对用户和设计师来说也是如此；让我们来看看为什么是这样的：
- en: For users, Flutter makes attractive user interfaces for apps, and this enhances
    the usage of these apps by the users.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于用户来说，Flutter为应用程序提供了吸引人的用户界面，这增强了用户对这些应用程序的使用。
- en: For developers, Flutter makes it easy for the new developers to enter the world
    of building mobile apps, as it is very easy to build apps with Flutter. Flutter
    not only reduces the time for development of applications, but it also reduces
    the cost and complexity of creating an application.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于开发者来说，Flutter使得新开发者进入构建移动应用的世界变得容易，因为使用Flutter构建应用程序非常简单。Flutter不仅减少了应用程序的开发时间，还减少了创建应用程序的成本和复杂性。
- en: For designers using Flutter, an application can be created using the original
    design that was conceived for the application, without compromising on any aspect
    of it. Therefore, the original vision of the designer is not changed at the time
    of development.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于使用Flutter的设计师来说，可以使用为应用程序构思的原设计来创建应用程序，而不会对其任何方面造成妥协。因此，设计师的原有愿景在开发过程中不会改变。
- en: Most important, Flutter is a very useful tool to create mockups and prototypes,
    which is a pro, as it is a good point of contact for both designers and developers,
    two roles often very distant from each other.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，Flutter是一个非常实用的工具，可以创建原型和模型，这是一个优点，因为它为设计师和开发者提供了一个良好的接触点，这两个角色通常非常疏远。
- en: Summary
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we first had a quick introduction to Flutter and how this book
    was going to serve as a guide for learning cross-platform application development
    with Flutter. We then moved on to discussing the origin of Flutter. Then, before
    moving on to why Flutter is a good option, we took a look at where Flutter fits
    in with the existing world of mobile application development.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先对Flutter进行了简要介绍，以及本书将如何作为学习使用Flutter进行跨平台应用开发的指南。然后，我们讨论了Flutter的起源。在探讨为什么Flutter是一个好选择之前，我们考察了Flutter在现有移动应用开发世界中的位置。
- en: Nowadays, mobile development is not really a new world, but Flutter makes it
    possible to make it more fun and much quicker. And, by improving the developer
    workflow, it brings mobile application development closer to a gameplay.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，移动开发并不是一个全新的领域，但Flutter使得它变得更加有趣且快速。此外，通过改进开发者工作流程，它使移动应用开发更接近游戏体验。
- en: In the next chapter, we will install the Flutter framework and try to learn
    as much as possible from the sample app.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将安装Flutter框架，并尽可能从示例应用中学习。
