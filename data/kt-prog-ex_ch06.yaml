- en: Building the Messenger Android App – Part II
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建Messanger Android应用程序 – 第二部分
- en: In the previous chapter, we went full steam ahead with the development of the
    Messenger Android application. By doing so, we examined both Kotlin and Android
    application development in depth. We explored the **Model-View-Presenter** (**MVP**)
    pattern and how to use it to build powerful and fully functional Android applications.
    In addition to this, we covered the basics of Reactive programming and learned
    how to use RxJava and RxAndroid in our applications. We also learned about some
    of the available means by which we can communicate with a remote server. We learned
    about OkHttp and Retrofit, and then went one step further by implementing a fully
    functional Retrofit service to facilitate communication with the messenger API
    that we made in [Chapter 4](kt-prog-ex_ch04.html), *Designing and Implementing
    the Messenger Backend with Spring Boot 2.0*. Putting all this knowledge pertaining
    to Android and Kotlin together, we created both a login and signup user interface
    for the Messenger app.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们全力以赴地开发了Messanger Android应用程序。通过这样做，我们深入研究了Kotlin和Android应用程序开发。我们探讨了**模型-视图-表示者**（**MVP**）模式以及如何使用它来构建强大且功能齐全的Android应用程序。除此之外，我们还介绍了响应式编程的基础，并学习了如何在我们的应用程序中使用RxJava和RxAndroid。我们还了解了一些我们可以用来与远程服务器通信的方法。我们学习了OkHttp和Retrofit，然后更进一步，通过实现一个功能齐全的Retrofit服务来促进与我们[第4章](kt-prog-ex_ch04.html)中制作的Messanger
    API的通信，该章标题为*使用Spring Boot 2.0设计和实现Messanger后端*。将所有这些与Android和Kotlin相关的知识结合起来，我们为Messanger应用程序创建了登录和注册用户界面。
- en: 'In this chapter, we will finish the development of the Messenger app. In the
    process of doing so, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将完成Messanger应用程序的开发。在这个过程中，我们将涵盖以下主题：
- en: Working with application settings
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用应用程序设置
- en: Working with ChatKit
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ChatKit
- en: Android application testing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android应用程序测试
- en: Performing background tasks
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行后台任务
- en: Let's continue the development of our Messenger app by implementing the Main
    UI.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续开发我们的Messanger应用程序，通过实现主UI。
- en: Creating the Main UI
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建主UI
- en: Similar to what we have done in implementing the Login UI and SignUp UI, we
    will create a model, view, and presenter for the Main UI. We are not going to
    focus as much on explanations as we did in the process of implementing the previous
    two UI views. Instead, only new concepts will be explained.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们在实现登录UI和注册UI时所做的类似，我们将为主UI创建一个模型、视图和表示者。我们不会像在实现前两个UI视图的过程中那样过多地关注解释。相反，我们只会解释新的概念。
- en: Without further ado, let's create a `MainView`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 不再拖延，让我们创建一个`MainView`。
- en: Creating the MainView
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建主视图
- en: 'Before we proceed with creating the main view, it is imperative that we have
    a clear understanding of the user interface that we want to implement. A good
    place to start is to clearly write out sentences that describe how we want the
    `MainView` to function. Let''s go ahead and do that:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始创建主视图之前，我们必须清楚地了解我们想要实现的用户界面。一个好的开始是清楚地写出描述我们想要`MainView`如何工作的句子。让我们继续这样做：
- en: The main view should display the active conversations of the currently logged-in
    user upon launch
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主视图应在启动时显示当前登录用户的活跃对话
- en: The main view should allow a logged-in user to create a new conversation
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主视图应允许登录用户创建新的对话
- en: The main view should be able to show the contacts of a currently logged-in user
    (in the case of this application, this is a list of all the registered users on
    the Messenger platform)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主视图应能够显示当前登录用户的联系人（在本应用程序中，这是Messanger平台上所有注册用户的列表）
- en: A user must be able to access the settings screen directly from the `MainView`
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户必须能够直接从`MainView`访问设置屏幕
- en: A user should be able to log out of the application directly from the `MainView`
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户应能够直接从`MainView`中注销
- en: 'All right, great! We have our list of brief statements describing what the `MainView` can
    do. With this list, it is possible to get on with creating the `MainView` (in
    terms of programming, that is). We are not going to do this yet. Let''s create
    a few visual sketches of `MainView` to give us a clearer idea of how it will look:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，太棒了！我们有了描述`MainView`可以做什么的简短语句列表。有了这个列表，我们可以继续创建`MainView`（从编程的角度来说）。我们不会立即这样做。让我们为`MainView`创建一些视觉草图，以更清楚地了解它的外观：
- en: '![](img/48cec2cb-c814-47c5-b74c-ae97f62c8528.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/48cec2cb-c814-47c5-b74c-ae97f62c8528.jpg)'
- en: As can be seen from the preceding diagram, `MainActivity` can render two completely
    separate views to a user. The first view is the Conversations Screen and the second
    the Contacts Screen. A perfect way to implement this is to employ two use fragments
    within the `MainActivity`. In this case, we will require two distinct fragments.
    These are the conversations fragment and the contacts fragment.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，`MainActivity`可以向用户渲染两个完全不同的视图。第一个视图是对话屏幕，第二个是联系人屏幕。实现这一点的完美方式是在`MainActivity`中使用两个使用片段。在这种情况下，我们将需要两个不同的片段。这些是对话片段和联系人片段。
- en: 'Now that we have a clear idea of what the `MainView` is going to contain, we
    need to implement a proper interface to declare the behaviors of the `MainView`.
    The following is the `MainView` interface:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经清楚地知道了`MainView`将要包含的内容，我们需要实现一个合适的接口来声明`MainView`的行为。以下就是`MainView`接口：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Great work! We will save the implementation of the `MainView` by `MainActivity` for
    later. For now, we will work on the `MainInteractor`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！我们将把`MainActivity`对`MainView`的实现保存起来，稍后进行。现在，我们将专注于`MainInteractor`。
- en: Creating the MainInteractor
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建`MainInteractor`
- en: 'We want the user to be able to view other users (contacts) on the Messenger
    platform and view their active conversations on the main screen. In addition to
    this, we want a user to be able to log out of the platform directly from the main
    screen. As a result of these requirements, `MainInteractor` must be capable of
    loading contacts, loading conversations, and logging the user out of the platform.
    The following is the `MainInteractor` interface. Ensure to put it and all other `Main_` files
    in the `com.example.messenger.ui.main` package:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望用户能够在消息传递平台上查看其他用户（联系人）及其在主屏幕上的活跃对话。此外，我们希望用户能够直接从主屏幕注销平台。由于这些需求，`MainInteractor`必须能够加载联系人、加载对话以及让用户从平台上注销。以下就是`MainInteractor`接口。请确保将其以及所有其他`Main_`文件放入`com.example.messenger.ui.main`包中：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We added the `OnConversationsLoadFinishedListener`, `OnContactsLoadFinishedListener`,
    and `OnLogoutFinishedListener` interfaces to the `MainInteractor` interface. These
    are all interfaces that will be implemented by a `MainPresenter`. These callbacks
    are necessary for the presenter to perform appropriate actions regardless of the
    success or failure of a conversation load, contact load, or user logout process.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`OnConversationsLoadFinishedListener`、`OnContactsLoadFinishedListener`和`OnLogoutFinishedListener`接口添加到`MainInteractor`接口中。这些接口都将由`MainPresenter`实现。这些回调对于执行适当的操作是必要的，无论对话加载、联系人加载或用户注销过程的成功或失败。
- en: 'The `MainInteractorImpl` class with an implemented `loadContacts()` method
    is given below:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是实现了`loadContacts()`方法的`MainInteractorImpl`类：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s load all users registered on the Messenger API platform. These users
    are contacts that can be communicated with by the currently logged in user:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们加载在消息传递API平台上注册的所有用户。这些用户是当前登录用户可以与之通信的联系人：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, the contacts were loaded successfully. `onContactsLoadSuccess()` is called
    with the API response data passed as an argument:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，联系人已成功加载。`onContactsLoadSuccess()`方法被调用，并将API响应数据作为参数传递：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If the contact load failed, hence, `onContactsLoadError()` is called:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果联系人加载失败，因此调用`onContactsLoadError()`：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`loadContacts()` makes use of `UserRepository` to load a list of all available
    users on the messenger platform. If the users were successfully retrieved, the
    listener''s `onContactsLoadSuccess()` is invoked with the list of the users loaded
    passed as an argument. Otherwise, `onContactsLoadError()` is invoked and the error
    is printed to the standard system output .'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`loadContacts()`方法使用`UserRepository`来加载消息传递平台上所有可用的用户列表。如果用户成功检索，则调用监听器的`onContactsLoadSuccess()`方法，并将加载的用户列表作为参数传递。否则，调用`onContactsLoadError()`方法，并将错误打印到标准系统输出。'
- en: We are not done with `MainInteractorImpl` yet. We must still add functions for
    `loadConversations()` and `logout()`. These two required functions are given in
    the following code snippet. Add them to `MainInteractorImpl`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有完成`MainInteractorImpl`。我们还需要添加`loadConversations()`和`logout()`这两个函数。这两个必需的函数在下面的代码片段中给出。将它们添加到`MainInteractorImpl`中。
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'It retrieves all conversations of the currently logged in user using conversational
    repository instance:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 它使用对话存储库实例检索当前登录用户的全部对话：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When login out clear user data from shared preferences file and invokes listener''s
    `onLogoutSuccess()` callback:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当注销时，从共享首选项文件中清除用户数据，并调用监听器的`onLogoutSuccess()`回调：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`loadConversations()` works similarly to `loadContacts()`. The difference being
    that `ConversationRepository` is being used to retrieve active conversations that
    the user currently has instead of a list of contacts. `logout()` simply clears
    the preferences file used by the application to remove the currently logged in
    user''s data, after which the `onLogoutSuccess()` method of the provided `OnLogoutFinishedListener`
    invoked.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`loadConversations()` 与 `loadContacts()` 的工作方式类似。区别在于使用 `ConversationRepository`
    来检索用户当前拥有的活动对话，而不是联系人列表。`logout()` 简单地清除应用程序使用的首选项文件，以删除当前登录用户的数据，之后调用提供的 `OnLogoutFinishedListener`
    的 `onLogoutSuccess()` 方法。'
- en: That's all for the `MainInteractorImpl` class. Next on our agenda is the implementation
    of the `MainPresenter`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 `MainInteractorImpl` 类的全部内容。接下来，我们将实施 `MainPresenter`。
- en: Creating the MainPresenter
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 MainPresenter
- en: 'As always, the first thing we must do is create a presenter interface that
    defines functions to be implemented by a presenter implementation class. The following
    is the `MainPresenter` interface:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，我们必须做的第一件事是创建一个定义了将被实现类实现的函数的表示者接口。以下是 `MainPresenter` 接口：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `loadConversations()`, `loadContacts()`, and `executeLogout()` functions
    will be invoked by the `MainView` and must be implemented by the `MainPresenterImpl` class.
    Our `MainPresenterImpl` class with its defined properties, and `onConversationsLoadSuccess()`
    and `onConversationsLoadError()` methods is given as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`loadConversations()`、`loadContacts()` 和 `executeLogout()` 函数将由 `MainView`
    调用，并且必须由 `MainPresenterImpl` 类实现。以下是我们定义属性和 `onConversationsLoadSuccess()` 以及
    `onConversationsLoadError()` 方法的 `MainPresenterImpl` 类：'
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s check if currently logged in user has active conversations:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查当前登录用户是否有活动对话：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After retrieving conversations from API, we add each conversation to `ConversationFragment`''s
    conversations list and conversations adapter is notified after every item addition:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在从 API 获取对话后，我们将每个对话添加到 `ConversationFragment` 的对话列表中，并在每次添加项目后通知对话适配器：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In addition, add the `onContactsLoadSuccess()`, `onContactsLoadError()` , `onLogoutSuccess()`,
    `loadConversations()`, `loadContacts()` and `executeLogout()` functions given
    below to `MainPresenterImpl`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，将以下 `onContactsLoadSuccess()`、`onContactsLoadError()`、`onLogoutSuccess()`、`loadConversations()`、`loadContacts()`
    和 `executeLogout()` 函数添加到 `MainPresenterImpl`：
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let''s clear previously loaded contacts in contacts list and notify adapter
    pf data set change:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们清除联系人列表中先前加载的联系人并通知适配器数据集更改：
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, let''s add each contact retrieved from API to `ContactsFragment`''s contacts
    list and contacts adapter is notified after every item addition:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将 API 检索到的每个联系人添加到 `ContactsFragment` 的联系人列表中，并在每次添加项目后通知联系人适配器：
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We have successfully created our `MainInteractor` and `MainPresenter`. At this
    point, it is time to finish up our work on the `MainView` and its layouts.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功创建了 `MainInteractor` 和 `MainPresenter`。在这个时候，我们应该完成对 `MainView` 及其布局的工作。
- en: Wrapping up the MainView
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结 MainView
- en: 'First and foremost, we must work on the `activity_main.xml` layout file. Modify
    the file to contain the following code:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须处理 `activity_main.xml` 布局文件。修改文件以包含以下代码：
- en: '[PRE16]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Within the root view of the layout file, we have a single `LinearLayout`. This
    `ViewGroup` will act as a container for the conversations and contacts fragments.
    Speaking of conversations and contacts fragments, we must create appropriate layouts
    for them as well. Create a `fragment_conversations.xml` layout file in the project''s
    layout `resource` directory with the following content:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在布局文件的根视图中，我们有一个单独的 `LinearLayout`。这个 `ViewGroup` 将作为对话和联系人片段的容器。说到对话和联系人片段，我们必须为它们创建适当的布局。在项目的布局
    `resource` 目录中创建一个名为 `fragment_conversations.xml` 的布局文件，内容如下：
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We made use of two child views within the `CoordinatorLayout` root view. The
    first is a `RecyclerView` and the second is a `FloatingActionButton`. A `RecyclerView` is
    an Android widget that is used as a container for displaying large sets of data
    that can be scrolled through efficiently by maintaining a limited number of views.
    We are able to make use of the `RecyclerView` widget because we added its dependency
    to our project''s module-level `build.gradle` script, as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `CoordinatorLayout` 根视图中使用了两个子视图。第一个是一个 `RecyclerView`，第二个是一个 `FloatingActionButton`。`RecyclerView`
    是一个 Android 小部件，用作显示大量可滚动数据集的容器，通过保持有限数量的视图来有效地滚动。我们能够使用 `RecyclerView` 小部件，因为我们将其依赖项添加到了项目模块级别的
    `build.gradle` 脚本中，如下所示：
- en: '[PRE18]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As we are making use of the `RecyclerView` widgets, we need to create appropriate
    view holder layouts for each `RecyclerView` widget. Create a `vh_contacts.xml` file
    and a `vh_conversations.xml` file within the layouts resource directory.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在使用`RecyclerView`小部件，我们需要为每个`RecyclerView`小部件创建适当的视图持有者布局。在布局资源目录中创建一个`vh_contacts.xml`文件和一个`vh_conversations.xml`文件。
- en: 'The following is the `vh_contacts.xml` layout:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为`vh_contacts.xml`布局：
- en: '[PRE19]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `vh_conversations.xml` layout should contain the following code:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`vh_conversations.xml`布局应该包含以下代码：'
- en: '[PRE20]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'As written in the Android developers reference, *Floating action buttons are
    used for a special type of promoted action. They are distinguished by a circled
    icon floating above the UI and have special motion behaviors related to morphing,
    launching, and the transferring anchor point*. We can make use of the `FloatingActionButton` widget
    because we added the Android support design library dependency to the project''s `build.gradle` script:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如Android开发者参考中所述，*浮动操作按钮用于特殊类型的推荐操作。它们通过一个圆形图标浮在UI上方而区分开来，并且具有与变形、启动和转移锚点相关的特殊运动行为*。我们可以利用`FloatingActionButton`小部件，因为我们已经将Android支持设计库依赖项添加到项目的`build.gradle`脚本中：
- en: '[PRE21]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create a `fragment_contacts.xml` layout file within the layout resource directory
    containing the following XML:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在布局资源目录中创建一个包含以下XML的`fragment_contacts.xml`布局文件：
- en: '[PRE22]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now it is time to finish up the `MainActivity` class. There is a lot we need
    to get done to complete `MainActivity`. First and foremost we must declare the
    necessary class properties. Next, we need to provide implementations for the following
    methods: `bindViews()`, `showConversationsLoadError()`, `showContactsLoadError()`,
    `showConversationsScreen()`, `showContactsScreen()`, `getContext()`, `getContactsFragment()`,
    `getConversationsFragment()`, `navigateToLogin()` and `navigateToSettings()`.
    Finally, we will create `ConversationsFragment` and `ContactsFragment` classes.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候完成`MainActivity`类了。为了完成`MainActivity`，我们需要完成很多事情。首先，我们必须声明必要的类属性。接下来，我们需要为以下方法提供实现：`bindViews()`、`showConversationsLoadError()`、`showContactsLoadError()`、`showConversationsScreen()`、`showContactsScreen()`、`getContext()`、`getContactsFragment()`、`getConversationsFragment()`、`navigateToLogin()`和`navigateToSettings()`。最后，我们将创建`ConversationsFragment`和`ContactsFragment`类。
- en: That is a lot to get done. We will start first and foremost with the addition
    of `ConversationsFragment` and `ContactsFragment` to `MainActivity`.  `ConversationsFragment`
    is given below. Add it within `MainActivity`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多事情要做。我们首先将`ConversationsFragment`和`ContactsFragment`添加到`MainActivity`中。以下为`ConversationsFragment`。将其添加到`MainActivity`中。
- en: '[PRE23]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The following method is called, when user interface of `ConversationsFragment`
    is being drawn for the first time:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当`ConversationsFragment`的用户界面第一次绘制时，将调用以下方法：
- en: '[PRE24]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Setting the layout manager of conversations recycler and let''s see how to
    view a linear layout manager:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 设置对话回收视图的布局管理器，让我们看看如何查看线性布局管理器：
- en: '[PRE25]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`ConversationsFragment` possesses a `RecyclerView` layout element. Recycler
    views need adapters to provide a binding from a data set to views that are displayed
    within the `RecyclerView`. Simply put, a `RecyclerView` make use of an `Adapter`
    to provide data for the views it renders to the display.  Add `ConversationsAdapter`
    below as a nested class (an inner class) of `ConversationsFragment`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`ConversationsFragment`拥有一个`RecyclerView`布局元素。回收视图需要适配器来提供数据集与在`RecyclerView`中显示的视图之间的绑定。简单来说，`RecyclerView`使用`Adapter`为它渲染到显示的视图提供数据。以下为`ConversationsAdapter`，作为`ConversationsFragment`的嵌套类（内部类）添加：'
- en: '[PRE26]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, let''s set `View.OnClickListener` of `itemLayout`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们设置`itemLayout`的`View.OnClickListener`：
- en: '[PRE27]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, let''s create the `ViewHolder` layout:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建`ViewHolder`布局：
- en: '[PRE28]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'When creating a recycler view `Adapter`, there are some important methods that
    you must provide custom implementations for. These methods are: `onCreateViewHolder()`,
    `onBindViewHolder()`, and `getItemCount()`.  `onCreateViewHolder()` is invoked
    when the recycler view needs a new view holder instance. `onBindViewHolder()`
    is called by the recycler view in order to display data in the data set at a specified
    position. `getItemCount()` is called to get the number of items in the data set.
    A `ViewHolder` describes an item view in use as well as metadata about its place
    in a `RecyclerView`.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建一个回收视图 `Adapter` 时，你必须为以下一些重要方法提供自定义实现。这些方法是：`onCreateViewHolder()`, `onBindViewHolder()`
    和 `getItemCount()`。`onCreateViewHolder()` 在回收视图需要一个新的视图持有者实例时被调用。`onBindViewHolder()`
    由回收视图调用，以便在数据集中显示指定位置的数据。`getItemCount()` 被调用以获取数据集中的项目数。`ViewHolder` 描述了正在使用的项目视图以及关于其在
    `RecyclerView` 中位置的元数据。
- en: An inner class is a class nested in another.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 内部类是嵌套在另一个类中的类。
- en: 'Having understood what is going on in `ConversationsFragment`, let us proceed
    by implementing `ContactsFragment`. First and  add the following `ContactsFragment` class
    to `MainActivity`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在理解了 `ConversationsFragment` 中发生的事情后，让我们继续实现 `ContactsFragment`。首先，将以下 `ContactsFragment`
    类添加到 `MainActivity` 中：
- en: '[PRE29]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'As you most likely noticed, similar to `ConversationsFragment`, `ContactsFragment`
    makes use of a `RecyclerView` to render contact view elements to an application''s
    user. The corresponding adapter class for this `RecyclerView` is `ContactsAdapter`.
    It is given in the following code snippet. Add it as an inner class of `ContactsFragment`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如你很可能注意到的，与 `ConversationsFragment` 类似，`ContactsFragment` 使用 `RecyclerView`
    将联系人视图元素渲染到应用程序用户界面。这个 `RecyclerView` 的相应适配器类是 `ContactsAdapter`。它包含在以下代码片段中。将其作为
    `ContactsFragment` 的内部类添加。
- en: '[PRE30]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'So far so good. Having created the necessary fragments, we can get to work
    on the properties and methods of `MainActivity`. Add the property definitions
    below to the top of the `MainActivity` class:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止一切顺利。在创建了必要的片段后，我们可以开始处理 `MainActivity` 的属性和方法。将以下属性定义添加到 `MainActivity`
    类的顶部：
- en: '[PRE31]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Next, modify `onCreate()` to reflect the following changes:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，修改 `onCreate()` 以反映以下更改：
- en: '[PRE32]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now add the `bindViews()`, `showConversationsLoadError()`, `showContactsLoadError()`,
    and `showConversationsScreen()` and `showContactsScreen()` methods below to `MainActivity`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将 `bindViews()`, `showConversationsLoadError()`, `showContactsLoadError()`,
    和 `showConversationsScreen()` 以及 `showContactsScreen()` 方法添加到 `MainActivity` 中：
- en: '[PRE33]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Let''s begin a new fragment transaction and replace any fragment present in
    activity''s fragment container with a `ConversationsFragment`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始一个新的片段事务，并将活动片段容器中现有的任何片段替换为 `ConversationsFragment`：
- en: '[PRE34]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Finally, add the `showNoConversations()`, `onOptionsItemSelected()`, `getContext()`,
    `getContactsFragment()`, `getConversationsFragment()`, `navigateToLogin()` and
    `navigateToSettings()`  functions below to `MainActivity`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将以下函数 `showNoConversations()`, `onOptionsItemSelected()`, `getContext()`,
    `getContactsFragment()`, `getConversationsFragment()`, `navigateToLogin()` 和 `navigateToSettings()`
    添加到 `MainActivity` 中：
- en: '[PRE35]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Comments were placed in some areas within the preceding code snippets have been
    heavily commented to give you more understanding of what was done. Ensure you
    go through the comments carefully to fully grasp what we have done.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中放置了一些注释，这些注释被大量注释以帮助你更好地理解所做的工作。确保你仔细阅读注释，以完全理解我们所做的。
- en: Creating the MainActivity menu
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 MainActivity 菜单
- en: 'In the `onCreateOptionsMenu(Menu)` function of `MainActivity`, we inflated
    a menu that we have not yet implemented. Add a `main.xml` file in the `menu` package
    under the application resource directory. `main.xml` should contain the following
    content:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `MainActivity` 的 `onCreateOptionsMenu(Menu)` 函数中，我们填充了一个我们尚未实现的菜单。在应用程序资源目录下的
    `menu` 包中添加一个 `main.xml` 文件。`main.xml` 应包含以下内容：
- en: '[PRE36]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Fantastic work! We are one step closer to finishing this project. It is now
    time for us to work on the chat user The `showConversationLoadError()` and `showMessageSendError()`
    are functions that, interface (where the actual chatting happens).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们离完成这个项目又近了一步。现在是时候我们来处理聊天用户界面了。`showConversationLoadError()` 和 `showMessageSendError()`
    是函数，它们是接口（实际聊天发生的地方）的一部分。
- en: Creating the Chat UI
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建聊天用户界面
- en: The chat UI we are about to create must display the message thread of an active
    conversation as well as enable a user to send a new message to the individual
    they are chatting with. We will start this section by creating the view layout
    that will be rendered to the user.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们即将创建的聊天 UI 必须显示活跃对话的消息线程，并允许用户向他们正在聊天的人发送新消息。我们将从创建将被渲染给用户的视图布局开始这一部分。
- en: Creating the chat layout
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建聊天布局
- en: We will make use of an open source library called ChatKit to create the chat
    view's layout. ChatKit is an Android library that provides flexible components
    for chat user interface implementation in Android projects as well as utilities
    for chat-user-interface data management and customization.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个名为 ChatKit 的开源库来创建聊天视图的布局。ChatKit 是一个 Android 库，它为 Android 项目提供了灵活的组件，用于实现聊天用户界面，以及用于聊天用户界面数据管理和定制的实用工具。
- en: 'We added ChatKit to the Messenger project with the following line of code in
    the `build.gradle` script:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `build.gradle` 脚本中添加以下行将 ChatKit 添加到 Messenger 项目中：
- en: '[PRE37]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: As mentioned earlier, ChatKit provides a number of useful user interface widgets
    for creating a chat UI. Two of these widgets are `MessagesList` and `MessageInput`.
    The `MessagesList` is a widget for the display and management of messages in conversation
    threads. `MessageInput` is a widget for entering text messages. In addition to
    supporting several styling options, `MessageInput` supports simple input validation
    processes.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，ChatKit 提供了许多有用的用户界面小部件来创建聊天 UI。其中两个小部件是 `MessagesList` 和 `MessageInput`。`MessagesList`
    是用于显示和管理对话线程中消息的小部件。`MessageInput` 是用于输入文本消息的小部件。除了支持多种样式选项外，`MessageInput` 还支持简单的输入验证过程。
- en: 'Let''s see how we can use `MessagesList` and `MessageInput` in a layout file.
    Create a new `chat` package within `com.example.messenger.ui` and add a new empty
    activity named `ChatActivity` to it. Open the `ChatActivity` activities layout
    file (`activity_chat.xml`) and add the following XML to it:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在布局文件中使用 `MessagesList` 和 `MessageInput`。在 `com.example.messenger.ui`
    中创建一个新的 `chat` 包，并向其中添加一个名为 `ChatActivity` 的新空活动。打开 `ChatActivity` 的活动布局文件（`activity_chat.xml`），并向其中添加以下
    XML：
- en: '[PRE38]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: As you can see in the preceding XML, we made use of ChatKit's `MessagesList`
    and `MessageInput` UI widgets just as we would any other Android widgets. Both
    `MessagesList` and `MessageInput` are located within the `com.stfalcon.chatkit.messages`
    package. Open the layout design window to see how the layout looks visually.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述 XML 所示，我们使用了 ChatKit 的 `MessagesList` 和 `MessageInput` UI 小部件，就像我们使用任何其他
    Android 小部件一样。`MessagesList` 和 `MessageInput` 都位于 `com.stfalcon.chatkit.messages`
    包中。打开布局设计窗口，查看布局的视觉效果。
- en: 'Next on our agenda is the creation of a `ChatView` class:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来在我们的议程上是创建一个 `ChatView` 类：
- en: '[PRE39]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Within `ChatView`, we defined a `ChatAdapter` interface declaring a single `navigateToChat(String,
    Long, Long)` function. This interface should be implemented by adapters that are
    capable of directing a user to the `ChatView`. Both the `ConversationsAdapter` and `ContactsAdapter` that we
    earlier created implement this interface.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `ChatView` 中，我们定义了一个 `ChatAdapter` 接口，声明了一个 `navigateToChat(String, Long,
    Long)` 函数。这个接口应该由能够将用户引导到 `ChatView` 的适配器实现。我们之前创建的 `ConversationsAdapter` 和 `ContactsAdapter`
    都实现了这个接口。
- en: The `showConversationLoadError()` and `showMessageSendError()` are functions
    that, when implemented, must display appropriate error messages when the loading
    of a conversation and the loading of a message fail, respectively.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`showConversationLoadError()` 和 `showMessageSendError()` 是两个函数，当实现时，必须在加载对话和消息失败时分别显示适当的错误消息。'
- en: ChatKit's `MessagesList` UI widget must possess a `MessagesListAdapter` for
    the management of its messages dataset. `getMessageListAdapter()` is a function
    that, when implemented by a `ChatView`, will return the `MessagesListAdapter` of
    the UI's `MessagesList`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: ChatKit 的 `MessagesList` UI 小部件必须拥有一个 `MessagesListAdapter` 来管理其消息数据集。`getMessageListAdapter()`
    是一个函数，当由 `ChatView` 实现，将返回 UI 的 `MessagesList` 的 `MessagesListAdapter`。
- en: Preparing chat UI models
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备聊天 UI 模型
- en: 'To be able to add messages to the `MessagesListAdapter` of a `MessageList`,
    we must implement ChatKit''s `IMessage` interface in an appropriate Model. We
    will implement this model here. Create a `com.example.messenger.utils.message` package
    and add the following  `Message` class within it:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够向 `MessageList` 的 `MessagesListAdapter` 添加消息，我们必须在一个合适的模型中实现 ChatKit 的 `IMessage`
    接口。我们将在下面实现这个模型。创建一个 `com.example.messenger.utils.message` 包，并在其中添加以下 `Message`
    类：
- en: '[PRE40]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'In addition to this, we need to create an `Author` class that implements ChatKit''s `IUser` interface.
    The implementation of this class is as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还需要创建一个实现 ChatKit 的 `IUser` 接口的 `Author` 类。这个类的实现如下：
- en: '[PRE41]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The `Author` class models the user details of a message author, such as the
    name of the author, their ID, and an avatar (if they have one).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`Author` 类用于表示消息作者的详细信息，例如作者的名字、他们的 ID 和一个头像（如果有的话）。'
- en: We have done enough with views and layouts for now. Let's go ahead and implement
    a `ChatInteractor` and `ChatPresenter`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们对视图和布局的工作已经足够。让我们继续实现 `ChatInteractor` 和 `ChatPresenter`。
- en: Creating the ChatInteractor and ChatPresenter
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 ChatInteractor 和 ChatPresenter
- en: 'By now, we already understand what presenters and interactors are meant to
    do, so let''s go straight to creating code. The following is the `ChatInteractor` interface.
    This and all other `Chat_` files belong to the `com.example.messenger.ui.chat` package:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，我们已经理解了演示者和交互者应该做什么，所以让我们直接创建代码。以下就是 `ChatInteractor` 接口。这个和所有其他 `Chat_`
    文件都属于 `com.example.messenger.ui.chat` 包：
- en: '[PRE42]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The following is a corresponding `ChatInteractorImpl` class for the `ChatInteractor` interface:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是为 `ChatInteractor` 接口对应的 `ChatInteractorImpl` 类：
- en: '[PRE43]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The method below will be called to load the messages of a conversation thread:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法将被调用来加载对话线程的消息：
- en: '[PRE44]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The method below will be called to send a message to a user:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法将被调用来向用户发送消息：
- en: '[PRE45]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Now, let''s handle the `ChatPresenter` and `ChatPresenterImpl` code. For the `ChatPresenter`,
    we need to create an interface that enforces the declaration of two functions: `sendMessage(Long,
    String)` and `loadMessages(Long)`. The following is the `ChatPresenter` interface:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们处理 `ChatPresenter` 和 `ChatPresenterImpl` 的代码。对于 `ChatPresenter`，我们需要创建一个接口，强制声明两个函数：`sendMessage(Long,
    String)` 和 `loadMessages(Long)`。以下就是 `ChatPresenter` 接口：
- en: '[PRE46]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The `ChatPresenter` interface''s implementation class is shown as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`ChatPresenter` 接口的实现类如下所示：'
- en: '[PRE47]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Let''s iterate over conversation message loaded from API, and create a new
    `IMessage` object for message currently iterated upon and add `IMessage` to the
    start of `MessagesListAdapter`:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们遍历从 API 加载的对话消息，并为当前迭代的每条消息创建一个新的 `IMessage` 对象，然后将 `IMessage` 添加到 `MessagesListAdapter`
    的开头：
- en: '[PRE48]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Keeping with our practice thus far, explanatory comments have been left within
    the preceding code snippet to aid your understanding.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 按照我们迄今为止的做法，在前面代码片段中留下了说明性注释，以帮助您理解。
- en: Last, but not the least, we will work on the `ChatActivity`.  First and foremost,
    we shall begin by declaring the required properties for our activity and working
    on its `onCreate()` lifecycle method.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，但同样重要的是，我们将着手处理 `ChatActivity`。首先，我们需要为我们的活动声明所需的属性，并处理其 `onCreate()` 生命周期方法。
- en: 'Modify `ChatActivity` to contain the following code:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 修改 `ChatActivity` 以包含以下代码：
- en: '[PRE49]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Let''s parse extras bundle from intent which launched the `ChatActivity`. If
    either of the extras identified by the keys `CONVERSATION_ID` and `RECIPIENT_ID`
    does not exist, -1 is returned as a default value:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解析启动 `ChatActivity` 的意图中的额外数据包。如果通过键 `CONVERSATION_ID` 和 `RECIPIENT_ID` 识别的任何额外数据不存在，则返回
    -1 作为默认值：
- en: '[PRE50]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'If `conversationId` is not equal to -1, then the `conversationId` is valid,
    hence load messages in the conversation:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `conversationId` 不等于 -1，则 `conversationId` 是有效的，因此加载会话中的消息：
- en: '[PRE51]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: In the code above, we created `recipientId`, `messageList`, `messageInput`,
    `preferences`, `presenter`, and `messageListAdapter` properties which are of the
    type `Long`, `MessageList`, `MessageInput`, `AppPreferences`, `ChatPresenter`
    and `MessageListAdapter` respectively. `messageList` is a view which renders distinct
    views for messages provided to it by `messageListAdapter`. All the logic contained
    within `onCreate()` has to do with the initialization of views within the activity.
    The code within `onCreate()` has been commented to give you full understanding
    of what is going on. Go through each line of the comments patiently before proceeding.
    `ChatActivity` implements `MessageInput.InputListener`. Classes which implement
    this interface must provide an appropriate `onSubmit()` method. Let's go ahead
    and do that. Add the following method to `ChatActivity`.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们创建了 `recipientId`、`messageList`、`messageInput`、`preferences`、`presenter`
    和 `messageListAdapter` 属性，它们分别属于 `Long`、`MessageList`、`MessageInput`、`AppPreferences`、`ChatPresenter`
    和 `MessageListAdapter` 类型。`messageList` 是一个视图，它为 `messageListAdapter` 提供的消息渲染不同的视图。`onCreate()`
    中包含的所有逻辑都与初始化活动中的视图有关。`onCreate()` 中的代码已被注释，以便您全面了解正在发生的事情。在继续之前，耐心地逐行阅读注释。`ChatActivity`
    实现 `MessageInput.InputListener` 接口。实现此接口的类必须提供一个适当的 `onSubmit()` 方法。让我们继续并添加以下方法到
    `ChatActivity`。
- en: 'Function override from `MessageInput.InputListener` called when a user submits
    a message with the `MessageInput` widget:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户使用 `MessageInput` 小部件提交消息时，从 `MessageInput.InputListener` 重载的函数：
- en: '[PRE52]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '`onSubmit()` takes a `CharSequence` of the message submitted by the `MessageInput`
    and creates an appropriate Message instance for it. This instance is then added
    to the start of the `MessageList` by invoking `messageListAdapter.addToStart()`
    with the Message instance passed as an argument. After adding the created `Message`
    to `MessageList`, the `ChatPresenter` instance is used to initialize the sending
    procedure to the server.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`onSubmit()` 方法接收由 `MessageInput` 提交的消息的 `CharSequence`，并为它创建一个适当的 Message
    实例。然后通过调用 `messageListAdapter.addToStart()` 并将 Message 实例作为参数传递，将此实例添加到 `MessageList`
    的开头。在将创建的 `Message` 添加到 `MessageList` 后，使用 `ChatPresenter` 实例初始化向服务器发送的过程。'
- en: 'Now let us work on other method overrides we must do.  Add the `showConversationLoadError()`,
    `showMessageSendError()`, `getContext()` and `getMessageListAdapter()` methods
    shown below to `ChatActivity`:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来处理其他必须做的重载方法。将以下显示的 `showConversationLoadError()`、`showMessageSendError()`、`getContext()`
    和 `getMessageListAdapter()` 方法添加到 `ChatActivity` 中：
- en: '[PRE53]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'And finally override `bindViews()`, `onOptionsItemSelected()`,  and `onBackPressed()`
    as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，重载 `bindViews()`、`onOptionsItemSelected()` 和 `onBackPressed()` 如下：
- en: '[PRE54]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: So far, so good! You have successfully created the majority of the Messenger
    app. Go ahead and give yourself a round of applause. The only thing that remains
    for us to do before wrapping up this chapter is to create a settings activity
    from which users can update their profile statuses. Feel free to take a well-deserved
    coffee break before proceeding to the next section.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切顺利！您已成功创建了大多数的 Messenger 应用程序。请给自己鼓掌。在我们完成本章之前，我们唯一要做的就是创建一个设置活动，用户可以通过它更新他们的个人资料状态。在继续下一节之前，请尽情享受一杯应得的咖啡休息时间。
- en: Creating the application's settings activity
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建应用程序的设置活动
- en: It is now the time to develop a simple application settings activity from which
    a user can update their profile status. Create a new package within `com.example.messenger.ui`
    named `settings`. Within this package, create a new settings activity. Name the
    activity `SettingsActivity`. To create a settings activity, right-click on the
    `settings` package, then select New | Activity | Settings Activity. Input the
    necessary details of the new settings activity, such as an activity name and activity
    title, then click Finish.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候开发一个简单的应用程序设置活动，用户可以通过它更新他们的个人资料状态。在 `com.example.messenger.ui` 中创建一个新的包，命名为
    `settings`。在此包内创建一个新的设置活动。将活动命名为 `SettingsActivity`。要创建设置活动，右键单击 `settings` 包，然后选择
    New | Activity | Settings Activity。输入新设置活动的必要细节，如活动名称和活动标题，然后点击完成。
- en: 'In the process of creating a new `SettingsActivity`, Android Studio will add
    a number of additional files to your project. In addition to this, a new `.xml` resource
    directory (`app` | `res` | `xml`) will be added to your project. This directory
    should contain the following files:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建新的 `SettingsActivity` 的过程中，Android Studio 将向您的项目添加许多其他文件。除此之外，还会向您的项目添加一个新的
    `.xml` 资源目录（`app` | `res` | `xml`）。此目录应包含以下文件：
- en: '`pref_data_sync.xml`'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pref_data_sync.xml`'
- en: '`pref_general.xml`'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pref_general.xml`'
- en: '`pref_headers.xml`'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pref_headers.xml`'
- en: '`pref_notification.xml`'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pref_notification.xml`'
- en: 'You may choose to delete the `pref_notification.xml` and `pref_data_sync.xml` files.
    We will not make use of them in this project. Let''s take a look at `pref_general.xml`:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择删除 `pref_notification.xml` 和 `pref_data_sync.xml` 文件。我们在这个项目中不会使用它们。让我们看一下
    `pref_general.xml`：
- en: '[PRE55]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: The root view of this `xml` layout file is a `PreferenceScreen`. A `PreferenceScreen` is
    the root of a `Preference` hierarchy. A `PreferenceScreen` in itself is a top-level `Preference`.
    The word `Preference` has been used a few times now. Let's define what a `Preference` is.
    It is a representation of the basic `Preference` user-interface building block
    that is displayed in the form of a list by a `PreferenceActivity`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 此 `xml` 布局文件的根本视图是一个 `PreferenceScreen`。一个 `PreferenceScreen` 是 `Preference`
    层级的根。一个 `PreferenceScreen` 本身就是一个顶级 `Preference`。现在我们已经多次使用了 `Preference` 这个词。让我们定义一下什么是
    `Preference`。它是一个基本 `Preference` 用户界面构建块的表示，由 `PreferenceActivity` 以列表的形式显示。
- en: The `Preference` class provides an appropriate view for a preference to be displayed
    within a `PreferenceActivity` and its associated `SharedPreferences` for the storage
    and retrieval of preference data. `SwitchPreference`, `EditTextPreference`, and
    `ListPreference` in the preceding code snippet are all subclasses of `DialogPreference`,
    which in turn is a subclass of the `Preference` class. A `PreferenceActivity` is
    the base class needed by an activity in order to display a hierarchy of preferences
    to a user.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`Preference` 类为在 `PreferenceActivity` 中显示的偏好项提供了一个适当的视图，以及与其关联的 `SharedPreferences`
    用于存储和检索偏好数据。前述代码片段中的 `SwitchPreference`、`EditTextPreference` 和 `ListPreference`
    都是 `DialogPreference` 的子类，而 `DialogPreference` 又是 `Preference` 类的子类。`PreferenceActivity`
    是活动需要的基础类，以便向用户显示偏好项的层级结构。'
- en: 'The `SwitchPreference`, `EditTextPreference`, and `ListPreference` views in `pref_general.xml` are
    not needed. Remove them from the XML file now. We need a preference that enables
    the user to update their status on our Messenger platform. This is a highly specific
    use case and thus it comes as no surprise that there''s no preference widget that
    provides us with this ability. No worries! We will implement a custom preference
    that does the job. Let''s call it `ProfileStatusPreference`. Create a new `ProfileStatusPreference`
    class containing the following code in the `settings` package:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`pref_general.xml` 中的 `SwitchPreference`、`EditTextPreference` 和 `ListPreference`
    视图是不需要的。现在从 XML 文件中移除它们。我们需要一个偏好项，使用户能够在我们的 Messenger 平台上更新他们的状态。这是一个非常具体的用例，因此毫不奇怪，没有提供这种能力的偏好小部件。不用担心！我们将实现一个自定义偏好项来完成这项工作。让我们称它为
    `ProfileStatusPreference`。在 `settings` 包中创建一个新的 `ProfileStatusPreference` 类，包含以下代码：'
- en: '[PRE56]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The following snippet binds `ProfileStatusPreference`''s `EditText` to `etStatus`
    variable:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段将 `ProfileStatusPreference` 的 `EditText` 绑定到 `etStatus` 变量：
- en: '[PRE57]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Let''s use `MessengerApiService` to update the user''s status:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 `MessengerApiService` 更新用户的状态：
- en: '[PRE58]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Now, we will store the updated user details if status update is successful:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果状态更新成功，我们将存储更新的用户详细信息：
- en: '[PRE59]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The `ProfileStatusPreference` class extends `EditTextPreference`. `EditTextPreference`
    is a `Preference` that permits string input in an `EditText`. `EditTextPreference` is
    a `DialogPreference`, and, as such, presents a dialog to the user containing the `Preference` view
    when the `Preference` is clicked. When a dialog of the `DialogPreference` is closed,
    its `onDialogClosed(Boolean)` method is invoked. A positive `Boolean` value argument, `true`,
    is passed to `onDialogClosed()` when the dialog is dismissed with a positive result.
    `false` is passed to `onDialogClosed()` when the dialog is dismissed with a negative
    result, for example, when the dialog's cancel button is clicked.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`ProfileStatusPreference` 类扩展了 `EditTextPreference`。`EditTextPreference` 是一个允许在
    `EditText` 中输入字符串的 `Preference`。`EditTextPreference` 是一个 `DialogPreference`，因此当
    `Preference` 被点击时，它会向用户显示包含 `Preference` 视图的对话框。当 `DialogPreference` 的对话框关闭时，会调用其
    `onDialogClosed(Boolean)` 方法。当对话框以积极的结果关闭时，将传递一个正的 `Boolean` 值参数 `true` 到 `onDialogClosed()`。当对话框以负的结果关闭时，例如当点击对话框的取消按钮时，将传递
    `false` 到 `onDialogClosed()`。'
- en: The `ProfileStatusPreference` overrides the `onDialogClosed()` function of `EditTextPreference`.
    If the dialog is closed with a positive result, the validity of the status contained
    within the `EditText` function of `ProfileStatusPreference` is checked. If the
    status message is valid, the status is updated with the API, otherwise an error
    message is shown.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`ProfileStatusPreference`覆盖了`EditTextPreference`的`onDialogClosed()`函数。如果对话框以积极的结果关闭，将检查`ProfileStatusPreference`的`EditText`函数中包含的状态的有效性。如果状态消息有效，则使用API更新状态，否则显示错误消息。'
- en: 'Having created `ProfileStatusPreference`, go back to `pref_general.xml` and
    update it to reflect the XML in the following snippet:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了`ProfileStatusPreference`后，返回到`pref_general.xml`并更新它以反映以下片段中的XML：
- en: '[PRE60]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: As can be seen in the preceding code, we made use of `ProfileStatusPreference` in
    the code snippet as we would any other preference bundled within the Android application
    framework.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述代码所示，我们在代码片段中使用了`ProfileStatusPreference`，就像使用Android应用程序框架中捆绑的任何其他首选项一样。
- en: 'Moving on to other aspects, let''s check out `pref_headers.xml`:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看其他方面，检查一下`pref_headers.xml`：
- en: '[PRE61]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The preference header file defines headers for various preferences in the `SettingsActivity`.
    Modify the file to contain the following code:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 首选项头部文件定义了`SettingsActivity`中各种首选项的头部。修改文件以包含以下代码：
- en: '[PRE62]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Perfectly done! Now we have to work on the `SettingsActivity`. Modify the body
    of `SettingsActivity` to contain the content shown in the following code block:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 完美完成！现在我们必须处理`SettingsActivity`。修改`SettingsActivity`的主体以包含以下代码块中显示的内容：
- en: '[PRE63]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '`PreferenceActivity` presenting a set of application settings:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`PreferenceActivity`展示一组应用程序设置：'
- en: '[PRE64]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The following function `onBuildHeaders()` is called when the activity needs
    a list of headers build:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 当活动需要构建头部列表时，会调用以下函数`onBuildHeaders()`：
- en: '[PRE65]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The below method preventing fragment injection from malicious applications
    and all unknown fragments should be denied here:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法阻止恶意应用程序和所有未知片段进行片段注入，应在此处拒绝：
- en: '[PRE66]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The below fragment shows general preferences:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 以下片段显示了通用首选项：
- en: '[PRE67]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: The `SettingsActivity` extends `AppCompatPreferenceActivity`—an activity that
    implements the required calls to be used with `AppCompat`. `SettingsActivity` is
    a `PreferenceActivity` that represents a set of application settings. The `onBuildHeaders()`
    function of `SettingsActivity` is called when the activity needs a list of headers
    built. `isValidFragment()` prevents malicious applications from injecting fragments
    into the `SettingsActivity`. The `isValidFragment()` returns true when a fragment
    is valid and false otherwise.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`SettingsActivity`扩展了`AppCompatPreferenceActivity`——这是一个实现与`AppCompat`一起使用的必要调用的活动。`SettingsActivity`是一个`PreferenceActivity`，它代表一组应用程序设置。当活动需要构建头部列表时，会调用`SettingsActivity`的`onBuildHeaders()`函数。`isValidFragment()`防止恶意应用程序将片段注入到`SettingsActivity`中。当片段有效时，`isValidFragment()`返回true，否则返回false。'
- en: Within `SettingsActivity`, we defined a `GeneralPreferenceFragment` class. `GeneralPreferenceFragment`
    extends `PreferenceFragment`. The `PreferenceFragment` fragment is an abstract
    class defined in the Android application framework. A `PreferenceFragment` shows
    a hierarchy of `Preference` instances as lists.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在`SettingsActivity`中，我们定义了一个`GeneralPreferenceFragment`类。`GeneralPreferenceFragment`扩展了`PreferenceFragment`。`PreferenceFragment`是一个在Android应用程序框架中定义的抽象类。`PreferenceFragment`以列表的形式显示`Preference`实例的层次结构。
- en: Preferences from `pref_general.xml` are added to the `GeneralPreferenceFragment`
    in the `onCreate()` method by the invocation of `addPreferencesFromResource(R.xml.pref_general)`.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`pref_general.xml`中的首选项通过在`onCreate()`方法中调用`addPreferencesFromResource(R.xml.pref_general)`添加到`GeneralPreferenceFragment`中。'
- en: With these changes made to the `SettingsActivity`, I am pleased to inform you
    that you have successfully finished work on the settings of the Messenger application.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在对`SettingsActivity`做出这些更改后，我很高兴地通知您，您已成功完成了信使应用程序设置的工作。
- en: Having completed the `SettingsActivity`, we are now ready to run the Messenger
    app. Go ahead and build and run the Messenger application on a device (virtual
    or physical). Once the app launches, you will be directed straight to the `LoginActivity`.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 完成对`SettingsActivity`的处理后，我们现在可以运行信使应用程序了。请在设备（虚拟或物理）上构建并运行信使应用程序。一旦应用程序启动，您将被直接导向`LoginActivity`。
- en: 'The first thing we must do is register a new user on the Messenger platform.
    We can do this on the `SignUpActivity`. Go ahead and click on the DON''T HAVE
    AN ACCOUNT? SIGN UP! button. You will be directed to the `SignUpActivity`:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须做的第一件事是在消息传递平台上注册一个新用户。我们可以在`SignUpActivity`上这样做。点击“还没有账户？注册！”按钮。你将被引导到`SignUpActivity`：
- en: '![](img/ece09890-08ea-4057-9946-197b1d09d492.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ece09890-08ea-4057-9946-197b1d09d492.jpg)'
- en: 'Create a new user in this activity. Enter `popeye` as the username, as well
    as a phone number and a password, then click the SIGN UP button. A new user will
    be registered on the Messenger platform with the username `popeye`. Once the registration
    is completed, you will be directed to the `MainActivity` and the conversations
    view will be rendered immediately:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在此活动中创建一个新用户。输入用户名`popeye`，以及电话号码和密码，然后点击注册按钮。新用户将在Messenger平台上以用户名`popeye`注册。注册完成后，你将被引导到`MainActivity`，对话视图将立即渲染：
- en: '![](img/1d1c0a6f-1487-4722-9e76-47c6eedbb428.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1d1c0a6f-1487-4722-9e76-47c6eedbb428.jpg)'
- en: 'As the newly registered user does not have any active conversations, a toast
    message informing them of this will be displayed. We need to create another user
    on the messenger platform to demonstrate the chat functionality. Log out of popeye''s
    account by clicking the three dots at the top-right corner of the screen and selecting
    logout:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 由于新注册的用户没有任何活跃的对话，将显示一个通知消息告知他们这一点。我们需要在消息传递平台上创建另一个用户来演示聊天功能。通过点击屏幕右上角的三个点并选择注销来注销popeye的账户：
- en: '![](img/400e3aa8-68c2-4aa1-8138-67e41513e2a1.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![](img/400e3aa8-68c2-4aa1-8138-67e41513e2a1.jpg)'
- en: 'Once logged out, create a new Messenger account with the username `dexter`.
    After logging in as `dexter`, click on the new message creation floating action
    button at the bottom-right of the conversations view. The contacts view will be
    rendered to you:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 注销后，创建一个用户名为`dexter`的新消息传递账户。以`dexter`的身份登录后，点击对话视图右下角的新消息创建浮动动作按钮。联系人视图将显示给你：
- en: '![](img/f40a4b3a-4e08-4208-a44e-6d24e5921647.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f40a4b3a-4e08-4208-a44e-6d24e5921647.jpg)'
- en: 'Clicking on the popeye contact will open the `ChatActivity`. Let''s send a
    message to `popeye`. Type `Hey Popeye!` into the message input field at the bottom
    of the screen and click Send. The message will immediately be sent to `popeye`:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 点击popeye联系人将打开`ChatActivity`。让我们给`popeye`发送一条消息。在屏幕底部的消息输入字段中输入“嘿，Popeye！”然后点击发送。消息将立即发送给`popeye`：
- en: '![](img/b0bc732a-8b7c-404f-8912-5c342208aa42.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b0bc732a-8b7c-404f-8912-5c342208aa42.jpg)'
- en: 'Upon going back to the conversation view of the `MainActivity`, you will notice
    a conversation item now exists for the conversation initiated with `popeye`:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 当你回到`MainActivity`的对话视图时，你会注意到现在有一个与`popeye`发起的对话项存在：
- en: '![](img/551361ee-a183-428a-8afe-74a29caa9f1f.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](img/551361ee-a183-428a-8afe-74a29caa9f1f.jpg)'
- en: 'Let''s check whether the message has actually been delivered to `popeye`. Log
    out of the Messenger platform and then log in as `popeye`. Upon login, you will
    be greeted by the new conversation initiated by `dexter`:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查消息是否实际上已经送达给`popeye`。从消息传递平台上注销，然后以`popeye`的身份登录。登录后，你将看到由`dexter`发起的新对话：
- en: '![](img/f058435d-1e79-4761-a5a8-19924160672e.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f058435d-1e79-4761-a5a8-19924160672e.jpg)'
- en: 'Fantastic! It''s been delivered. Now let''s reply to `dexter`. Open the conversation
    and send `dexter` a message:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！它已经送达了。现在让我们回复`dexter`。打开对话并发送一条消息给`dexter`：
- en: '![](img/6923be76-81a7-4e8c-86c9-62c55a85377d.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6923be76-81a7-4e8c-86c9-62c55a85377d.jpg)'
- en: 'We sent a simple `How are you Dexter?` in the preceding screenshot. It is time
    to update popeye''s profile status. Navigate back to the main activity and access
    the settings activity (click the three dots on the action bar and select Settings).
    Tapping Account in the launched settings activity will display the general preference
    fragment. Click on the Profile status preference:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在先前的屏幕截图中发送了一条简单的“你好，Dexter？”。现在是时候更新popeye的个人资料状态了。返回主活动并访问设置活动（点击操作栏上的三个点并选择设置）。在启动的设置活动中，点击“账户”将显示通用偏好片段。点击“个人资料状态”偏好：
- en: '![](img/bb6fbf2e-f5ed-4fbd-8007-d9166531da25.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bb6fbf2e-f5ed-4fbd-8007-d9166531da25.jpg)'
- en: 'A dialog containing an `EditText` in which you can input a new profile status
    will pop up. Input a status message of your choosing and click OK:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包含`EditText`的对话框会弹出，你可以输入一个新的个人资料状态。输入你选择的个人状态信息，然后点击确定：
- en: '![](img/863a5158-eed9-415e-9c92-847a539c5665.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](img/863a5158-eed9-415e-9c92-847a539c5665.jpg)'
- en: The status of the current profile will be updated immediately.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 当前个人资料的状态将立即更新。
- en: At this juncture, I am pleased to inform you that you have successfully implemented
    the Messenger application in its entirety. Feel free to make modifications and
    additions to the code we created in this chapter—you will learn a lot more if
    you do. Before we conclude this chapter, there are two topics we need to cover
    briefly. The first is application testing, and the second is performing background
    tasks.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我很高兴地通知您，您已经成功实现了整个消息应用。请随意修改和添加我们在本章中创建的代码——如果您这样做，您将学到更多。在我们结束本章之前，还有两个主题需要简要介绍。第一个是应用程序测试，第二个是执行后台任务。
- en: Android application testing
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安卓应用程序测试
- en: 'Application testing is the process by which a developed software application
    is tested to assert its software quality. Many factors contribute to software
    quality. Such factors include application usability, functionality, reliability,
    and consistency. A number of advantages arise from testing an Android application.
    These advantages include but are not limited to:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序测试是开发软件应用程序的过程，通过这个过程来确认其软件质量。许多因素会影响软件质量。这些因素包括应用程序可用性、功能、可靠性和一致性。测试安卓应用程序会带来许多优势，包括但不限于：
- en: Fault detection
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 故障检测
- en: Increased software stability
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提高软件稳定性
- en: 'The integrals of Android application testing span far and wide, and, as such,
    are beyond the scope of this book. Nevertheless, the following is a list of Android-testing
    resources you may choose to (and probably should) explore in your free time:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓应用程序测试的范畴非常广泛，因此超出了本书的范围。尽管如此，以下是一些您可以在空闲时间选择（并且很可能应该选择）探索的安卓测试资源：
- en: Espresso ([https://developer.android.com/training/testing/espresso/index.html](https://developer.android.com/training/testing/espresso/index.html))
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Espresso ([https://developer.android.com/training/testing/espresso/index.html](https://developer.android.com/training/testing/espresso/index.html))
- en: Roboelectric ([http://robolectric.org](http://robolectric.org))
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Roboelectric ([http://robolectric.org](http://robolectric.org))
- en: Mockito ([http://site.mockito.org](http://site.mockito.org))
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mockito ([http://site.mockito.org](http://site.mockito.org))
- en: Calabash ([https://github.com/calabash/calabash-android](https://github.com/calabash/calabash-android))
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Calabash ([https://github.com/calabash/calabash-android](https://github.com/calabash/calabash-android))
- en: Performing background operations
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行后台操作
- en: We made use of RxAndroid extensively in the process of developing the Messenger
    application to perform asynchronous operations. In many cases, when using RxAndroid,
    we observed the outcome of background operations on the main thread of the Android
    application. In some cases, you may not want to use a third-party library, such
    as RxAndroid, to do this. Instead, you may want to use a solution bundled in the
    Android application framework. Android provides a number of options to achieve
    this goal. One such option is AsyncTask.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发消息应用的过程中，我们广泛使用了 RxAndroid 来执行异步操作。在许多情况下，当使用 RxAndroid 时，我们观察到安卓应用程序主线程上后台操作的结果。在某些情况下，您可能不想使用像
    RxAndroid 这样的第三方库来完成这项工作。相反，您可能希望使用 Android 应用程序框架中捆绑的解决方案。Android 提供了多种选项来实现这一目标。其中一种选项是
    AsyncTask。
- en: AsyncTask
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AsyncTask
- en: The `AsyncTask` class enables the performance of background operations and the
    publishing of operation results on the application UI thread without the burden
    of managing handlers and threads. `AsyncTask` is best used in situations where
    short operations need to be run. The computations of an `AsyncTask` run on a background
    thread and their results are published to the UI thread.  You can find out more
    about `AsyncTask` here: [https://developer.android.com/reference/android/os/AsyncTask.html](https://developer.android.com/reference/android/os/AsyncTask.html).
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '`AsyncTask` 类允许在无需管理处理程序和线程的负担下，在应用程序 UI 线程上执行后台操作并发布操作结果。`AsyncTask` 最好用于需要运行短操作的情况。`AsyncTask`
    的计算在后台线程上运行，其结果发布到 UI 线程。您可以在以下链接中了解更多关于 `AsyncTask` 的信息：[https://developer.android.com/reference/android/os/AsyncTask.html](https://developer.android.com/reference/android/os/AsyncTask.html)。'
- en: IntentService
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IntentService
- en: An `IntentService` is a good candidate for performing scheduled operations that
    run in the background, independent of an activity. As described in the Android
    developer reference, `IntentService` is a base class for services that handle
    asynchronous requests (expressed as Intents) on demand. Clients send requests
    through `startService` (Intent) calls; the service is started as needed and handles
    each Intent in turn using a worker thread, and stops itself when it runs out of
    work. You can learn more about `IntentService` here: [https://developer.android.com/reference/android/app/IntentService.html](https://developer.android.com/reference/android/app/IntentService.html).
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '`IntentService` 是执行后台、独立于活动调度的预定操作的理想选择。正如 Android 开发者参考中所述，`IntentService`
    是处理异步请求（以 Intent 的形式表达）的服务的基础类。客户端通过 `startService` (Intent) 调用发送请求；服务按需启动，并使用工作线程依次处理每个
    Intent，当没有更多工作要做时，它会自行停止。您可以在以下链接中了解更多关于 `IntentService` 的信息：[https://developer.android.com/reference/android/app/IntentService.html](https://developer.android.com/reference/android/app/IntentService.html)。'
- en: Summary
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we completed the development of the Messenger Android application. In
    the process of doing so, we learned how to make use of ChatKit—a third-party library
    for creating beautiful chat user interfaces. In addition to this, we further explored
    the utilities offered to us by the Android application framework. We got a firsthand
    look at the development of a settings activity in Android, which helped us to
    learn about `PreferenceScreen`, `PreferenceActivity`, `DialogPreference`, `Preference`,
    and `PreferenceFragment`. Finally, we briefly discussed Android application testing
    and performing background operations.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们完成了 Messenger Android 应用程序的开发。在这个过程中，我们学习了如何利用 ChatKit——一个用于创建美观聊天用户界面的第三方库。除此之外，我们还进一步探索了
    Android 应用程序框架为我们提供的实用工具。我们亲身体验了 Android 中设置活动的开发，这帮助我们了解了 `PreferenceScreen`、`PreferenceActivity`、`DialogPreference`、`Preference`
    和 `PreferenceFragment`。最后，我们简要讨论了 Android 应用程序测试和执行后台操作。
- en: In the next chapter, we will explore the various storage options provided to
    us by the Android application framework.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨 Android 应用程序框架为我们提供的各种存储选项。
