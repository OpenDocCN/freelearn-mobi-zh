- en: Chapter 4. Sound and Music
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章 音频与音乐
- en: This chapter is all about the different ways to present music and sound effects
    to the player of the game using Cocos2d, and why high-quality music and sound
    effects matter in a great game. Trust me, there's more to sound effects than just
    playing a sound file when an event happens. Otherwise, why would it have an entire
    chapter? Although there are a lot of users who play with the sound off on mobile
    devices, it's still an immersive part of some players' experience, so we have
    to pay close attention to not only the sounds we choose but also how they're implemented.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要介绍使用 Cocos2d 向游戏玩家呈现音乐和音效的不同方式，以及为什么高质量的音乐和音效在优秀游戏中很重要。相信我，音效不仅仅是当事件发生时播放一个声音文件。否则，为什么会有整整一章来介绍它？尽管有很多用户在移动设备上关闭声音玩游戏，但它仍然是某些玩家体验的一部分，因此我们必须密切关注我们选择的声音以及它们的实现方式。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Loading and unloading effects
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载和卸载效果
- en: Playing sound effects and loop background music in creative ways
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以创意方式播放音效和循环背景音乐
- en: Modifying the played sound on the fly
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在飞行中修改播放的声音
- en: Other good examples of sounds
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他好的声音示例
- en: Tip
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: For the code up to this point, open the **Chapter 4** project and the sound
    effects from the `Sounds` directory in the book's included files.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于到目前为止的代码，请打开**第4章**项目以及书中包含文件中的“**声音**”目录中的音效。
- en: It's recommended that you follow the code provided, as this chapter, along with
    future chapters, will be referencing methods and classes that are provided or
    mentioned within the book.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 建议您遵循提供的代码，因为本章以及未来的章节将引用书中提供或提到的方法和类。
- en: If there are any gameplay bugs or imbalances in the prototype, that's fine;
    we'll cover polishing in a later chapter. Remember, the prototype was done quickly
    with the sole purpose of showing others the core concept of the game, not providing
    them with a finished product.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果原型中存在任何游戏玩法错误或不平衡，那没关系；我们将在后面的章节中介绍润色。记住，原型是快速完成的，目的是向他人展示游戏的核心概念，而不是提供一个成品。
- en: Prerequisites
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 先决条件
- en: Make sure you've copied the sound files to your project. If they aren't there,
    no matter how many times you try to preload, unload, play, or loop, the sound
    files simply won't play. Unlike the sprite sheets used with TexturePacker and
    the BMFonts created with Glyph Designer, it's best to drag the sound files into
    your project and have the **Copy items if needed** checkbox checked, as shown
    in the following screenshot. This will ensure that the files are in your project
    until you decide to delete them.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经将声音文件复制到你的项目中。如果它们不在那里，无论你尝试多少次预加载、卸载、播放或循环，声音文件都不会播放。与用于 TexturePacker
    的精灵表和用 Glyph Designer 创建的 BMFonts 不同，最好将声音文件拖到你的项目中，并确保勾选了“**如果需要则复制项目**”复选框，如图所示。这将确保文件在你决定删除它们之前都存在于你的项目中。
- en: '![Prerequisites](img/image00245.jpeg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![先决条件](img/image00245.jpeg)'
- en: Seeing the difference in audio types
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 观察不同音频类型之间的差异
- en: If you're wondering what the differences are between MP3, CAF, and other file
    and data formats for audio, check out [http://www.raywenderlich.com/69365/audio-tutorial-ios-file-data-formats-2014-edition](http://www.raywenderlich.com/69365/audio-tutorial-ios-file-data-formats-2014-edition),
    a detailed explanation on all the different types of audio. It's not necessary
    for this book, but if you're trying to save space or wondering if you can use
    certain audio files, this link will be helpful.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想知道 MP3、CAF 和其他音频文件和数据格式之间的区别，请查看[http://www.raywenderlich.com/69365/audio-tutorial-ios-file-data-formats-2014-edition](http://www.raywenderlich.com/69365/audio-tutorial-ios-file-data-formats-2014-edition)，这是一篇关于所有不同类型音频的详细解释。对于这本书来说，这不是必需的，但如果您试图节省空间或想知道是否可以使用某些音频文件，这个链接将很有帮助。
- en: We're going to be using MP3 in this chapter (and subsequently in the rest of
    the book's content) as it's a very common format, as well as a format that's supported
    by OALSimpleAudio and the iPhone natively.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章（以及本书的其余内容）中，我们将使用 MP3 格式（以及随后的内容），因为它是一个非常常见的格式，同时也是 OALSimpleAudio 和 iPhone
    本地支持的格式。
- en: Learning about OALSimpleAudio
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解 OALSimpleAudio
- en: If you've ever wanted an easy way to play sound files, OALSimpleAudio is the
    thing you need. It can very easily load a large variety of sound files, play effects,
    loop background music, and a lot more. Its existence and integration with Cocos2d
    makes it much easier to bring your game to life with the immersive capabilities
    of sound and music.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您曾经想要一种简单的方法来播放音效文件，OALSimpleAudio 就是您需要的工具。它可以非常容易地加载各种音效文件，播放音效，循环背景音乐，以及更多。它的存在和与
    Cocos2d 的集成使得使用声音和音乐的沉浸式功能使您的游戏栩栩如生变得容易得多。
- en: Tip
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you've programmed in Cocos2d before and are wondering where SimpleAudioEngine
    is, starting in Cocos2d v3.0, OALSimpleAudio is the new way to play sound effects.
    It's basically everything that SimpleAudioEngine was.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您之前使用过 Cocos2d 进行编程并且想知道 SimpleAudioEngine 在哪里，从 Cocos2d v3.0 开始，OALSimpleAudio
    是播放音效的新方法。它基本上是 SimpleAudioEngine 的所有功能。
- en: Preloading effects
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预加载音效
- en: If you try to play an effect using OALSimpleAudio, there will be a slight freeze,
    or delay, as the device tries to quickly load the effect into the memory and then
    play it right away. Luckily, there's a way to load the sound effects and music
    such that it doesn't freeze in front of your users when you try to play an effect.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尝试使用 OALSimpleAudio 播放音效，设备会尝试快速将音效加载到内存中并立即播放，这会导致轻微的冻结或延迟。幸运的是，有一种方法可以加载音效和音乐，这样在您尝试播放音效时，不会在用户面前冻结。
- en: 'OALSimpleAudio allows preloading of effects, which essentially reads the sound
    effect into the memory long before you''ll need the effect. The choice is up to
    you whether to do this at the beginning of the game (when users first launch it
    from their home screen), or between levels by unloading and reloading the effects
    for the upcoming level. The way to load sound files into the memory with OALSimpleAudio
    is by adding the following line of code:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: OALSimpleAudio 允许预加载音效，这实际上是在您需要音效之前很久就将音效读入内存。您可以选择在游戏开始时（当用户从主屏幕首次启动它时）或在关卡之间通过卸载和重新加载即将到来的关卡的效果来进行。使用
    OALSimpleAudio 将音文件加载到内存中的方法是添加以下代码行：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `buffer` variable assignment is optional and is used if you need to print
    out various pieces of information about the sound file such as frequency or bits
    of the buffer.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`buffer` 变量赋值是可选的，如果您需要打印有关音文件的各种信息，如频率或缓冲区的位数，则使用它。'
- en: Tip
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Although the preceding code example shows `.mp3` as the file extension, OALSimpleAudio
    can load any sound file that's supported by iOS.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管前面的代码示例显示了 `.mp3` 作为文件扩展名，但 OALSimpleAudio 可以加载 iOS 支持的任何音效文件。
- en: However, if you want to cut down on the time it takes to load all your in-game
    sounds, you can do so in the background, which is known as loading asynchronously.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果您想减少加载所有游戏内音效所需的时间，您可以在后台进行，这被称为异步加载。
- en: Loading files asynchronously
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异步加载文件
- en: Loading your files asynchronously is the best way to cut down on load time while
    simultaneously getting all the files loaded. However, note that because loading
    this way occurs in the background, there's no guarantee that the files will be
    ready when the user begins to interact with your game.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以异步方式加载您的文件是减少加载时间的同时加载所有文件的最佳方式。然而，请注意，由于以这种方式加载发生在后台，无法保证当用户开始与您的游戏交互时文件已经准备好。
- en: If you wish to make certain sound effects available for them at the beginning
    of the game (at the loading screen, before the main menu starts, right when the
    main menu starts, or whatever you see the beginning of your game as), it's recommended
    to load the minimum amount of sound needed if you still wish to load the majority
    of your effects asynchronously.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望在游戏开始时（在加载屏幕，主菜单开始之前，主菜单开始时，或您认为游戏开始的地方）让某些音效可用，如果您仍然希望大多数音效异步加载，建议只加载所需的最小音效量。
- en: 'The way to do this is with the following line of code. It will push the loading
    into the background and notify you when it''s done:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要这样做，可以使用以下代码行。它将加载推入后台，并在完成后通知您：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Unloading effects
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 卸载音效
- en: If you know you're not going to use the sound effect for a while, or you often
    run into memory warnings, unloading your sound effects can be useful. For example,
    if your game uses a certain sound file for a voice-over in the tutorial only,
    once the user passes the tutorial, you can unload this sound effect to free up
    some memory. OALSimpleAudio will not unload sound effects that are either playing
    or paused.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你知道你不会在一段时间内使用音效，或者你经常遇到内存警告，卸载你的音效可能会有用。例如，如果你的游戏在教程中只使用某个声音文件进行旁白，一旦用户通过教程，你就可以卸载这个音效以释放一些内存。OALSimpleAudio
    不会卸载正在播放或暂停的音效。
- en: 'To unload a specific sound effect, you can use this line of code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要卸载特定的音效，你可以使用以下代码行：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To unload all your sound effects at once, you can use the following line of
    code:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要一次性卸载所有音效，你可以使用以下代码行：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: A recommended place to put these unloading calls is your `applicationDidReceiveMemoryWarning`
    method in the `AppDelegate` class.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些卸载调用放在 `AppDelegate` 类的 `applicationDidReceiveMemoryWarning` 方法中是一个推荐的位置。
- en: Playing sound effects and loop background music
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 播放音效和循环背景音乐
- en: Obviously, you wouldn't just want to be loading and unloading your sound effects
    all day, so let's get into the actual playing of these sounds here.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，你不会整天只加载和卸载音效，所以让我们来看看这些声音的实际播放。
- en: Getting some background music going
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 播放一些背景音乐
- en: It's always important to set the tone of the voice through the music that gets
    played in the background. Whether that means a bleak, withering tone or a happy-go-lucky,
    upbeat tone, the music can help bring in the player so that they become more engaged
    with the game.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 总是通过播放背景音乐来设定声音的基调非常重要。无论是意味着一种阴郁、枯萎的基调，还是一种快乐、轻松、向上的基调，音乐都可以帮助吸引玩家，使他们更加投入到游戏中。
- en: 'Because the background music will likely be playing for the majority of the
    time throughout the game, it''s not entirely important to preload it. However,
    it''s still recommended, as it will prevent the slight bit of lag at the beginning
    of the game when the music first starts playing. You can preload the background
    music using the following code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 由于背景音乐可能会在整个游戏的大部分时间里播放，因此预加载它并不是完全必要的。然而，仍然建议这样做，因为它可以防止音乐开始播放时游戏开始时的轻微延迟。你可以使用以下代码预加载背景音乐：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'With the preceding line of code added, you can simply play the background music
    on loop with one call. To play preloaded background music, add this line of code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加了前面的代码行之后，你可以通过一个调用简单地循环播放背景音乐。要播放预加载的背景音乐，请添加以下代码行：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'So, for this book''s project, we''re going to play background music throughout
    the time the game is being played. Thus, we want the user to be immersed as early
    as possible, so we''re going to preload the background music even before the first
    scene loads, and start playing it as soon as possible. Open `AppDelegate.m`, and
    go to the `startScene` method. Right above the return statement, add this line
    of code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于这本书的项目，我们将在游戏进行时播放背景音乐。因此，我们希望用户能够尽早沉浸其中，所以我们将预加载背景音乐，甚至在第一个场景加载之前就开始播放。打开
    `AppDelegate.m` 文件，进入 `startScene` 方法。在返回语句上方添加以下代码行：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now that we have made OALSimpleAudio aware of what our background music is,
    we can immediately play the file on loop, so by the time the first scene gets
    displayed, there''s already music playing. So, right below the preloading line,
    add this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经让 OALSimpleAudio 知道了我们的背景音乐是什么，我们可以立即循环播放文件，因此当第一个场景显示时，已经有音乐在播放。所以，在预加载行下方添加以下内容：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Isn't that lovely? But background music alone isn't going to be enough. Let's
    add in some sound effects when the user does different activities in the game.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 难道这不很可爱吗？但仅有背景音乐是不够的。让我们在用户在游戏中进行不同活动时添加一些音效。
- en: Sounds when a button is clicked on
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按钮点击时的声音
- en: One of the human psychological traits that exists is the desire for feedback
    when an action is taken. Thus, when a button is pressed in digital space, we need
    to give the user feedback that their action has been received. This is why the
    button darkens slightly to indicate that it's being pressed down. Upon release
    of this button, we'd like to also play a sound effect telling the user their action
    is being processed.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 人类心理特质之一是在采取行动时渴望反馈。因此，当在数字空间中按下按钮时，我们需要给用户反馈，告诉他们他们的操作已被接收。这就是为什么按钮会稍微变暗，以表示它被按下。在释放按钮时，我们还想播放一个音效，告诉用户他们的操作正在处理中。
- en: 'To play a sound effect when a button is pressed in Cocos2d, just add the line
    of code required to play the sound file to whichever method the button calls.
    So, for this project, open `MainScene.m`, go to the `goToMenu` method, and add
    this line of code right before the line where the `replaceScene` method gets called:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Cocos2d中播放按钮按下时的声音效果，只需将播放声音文件的代码行添加到按钮调用的任何方法中。所以，对于这个项目，打开`MainScene.m`，转到`goToMenu`方法，并在调用`replaceScene`方法之前的行添加此代码行：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This will play the sound effect once, right before everything starts to load
    for the next scene. Do the same for the **Restart** button, by going to the `restartGame`
    method and the `goToGame` method in `MenuScene.m`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在开始加载下一个场景之前播放声音效果一次。同样，对于**重启**按钮，转到`MenuScene.m`中的`restartGame`方法和`goToGame`方法：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Tip
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you notice a slight delay before the sound effect the first time you click
    on a button, that's a sign that you should preload the sound effect before the
    user can press the given button.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在第一次点击按钮时注意到轻微的延迟，这表明你应该在用户按下指定的按钮之前预加载声音效果。
- en: Now, if all we have is background music and button clicks, we surely need to
    engross the user even more. Thus, we'll add some sound when the user moves a unit
    distance on the game board.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们只有背景音乐和按钮点击，我们当然需要更多地吸引用户。因此，当用户在游戏板上移动单位一段距离时，我们将添加一些声音。
- en: Sounds on unit movements
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单位移动声音
- en: Similar to the button click effects, we want to play the effect whenever the
    `moveUnit` method gets called. Why here and not in the `Unit` class? Because,
    if we called it in the Unit class, we'd possibly be calling the method 81 times
    at once (9 x 9 grid). Yes, this is hard to obtain, but technically possible. Calling
    it up to 81 times at once will cause the effects to stack on top of each other
    and become a lot louder than we want.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 与按钮点击效果类似，我们希望在调用`moveUnit`方法时播放效果。为什么在这里而不是在`Unit`类中？因为如果我们在这个类中调用它，我们可能会一次调用81次（9
    x 9网格）。是的，这是很难实现的，但从技术上讲是可能的。一次调用81次会导致效果堆叠在一起，比我们想要的要响得多。
- en: 'So, open `MainScene.m` and go to the `moveUnit` method. Here, right after we
    update the position of the unit the user wants to move, we''ll play the sound
    effect:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，打开`MainScene.m`并转到`moveUnit`方法。在这里，在我们更新用户想要移动的单位的位置之后，我们将播放声音效果：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: When you run the game and move a unit, you should hear a very subtle sound.
    The reason it's so subtle is that the user will be doing this for the entire game.
    We don't want to overwhelm them with the movement sound effect, as it might irritate
    some players, causing them to turn the sound off or simply quit playing, the latter
    of which we don't want to happen.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行游戏并移动一个单位时，你应该听到一个非常微妙的响声。之所以如此微妙，是因为用户将在整个游戏中这样做。我们不想让他们被移动声音效果淹没，因为这可能会激怒一些玩家，导致他们关闭声音或简单地退出游戏，我们不想看到这种情况发生。
- en: Sounds on unit combination
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单位组合声音
- en: Although the movement happens literally every turn (or else a turn won't happen),
    two units combining may not be the case every turn. Therefore, we want to give
    the player a rewarding feeling when they combine two weak units to make one strong
    unit.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然移动动作实际上每回合都会发生（否则回合就不会发生），但两个单位每回合结合的情况可能并不总是如此。因此，当玩家将两个弱单位结合成一个强单位时，我们希望给他们一种奖励感。
- en: Because our unit combination code is a bit scattered, we have to be careful
    where to place the code so that the unit combination sound effect happens only
    once per combination. For example, if all three units move into one square at
    the same time, we should only play the effect only once instead of twice by accident.
    This makes it a bit tricky, but for now, let's not worry about the three- or four-unit
    combinations, and just handle the two-unit combinations. It's going to play twice
    and three times respectively for the three- and four-unit combinations, but that's
    okay for an early version of the game.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的单位组合代码有点分散，我们必须小心地放置代码，以确保单位组合声音效果在每个组合中只播放一次。例如，如果所有三个单位同时进入一个方块，我们应该只播放一次效果，而不是意外地播放两次。这使得事情有点棘手，但到目前为止，我们不必担心三或四单位的组合，只需处理两个单位的组合。对于三和四单位的组合，将分别播放两次和三次，但对于游戏的早期版本来说这没问题。
- en: 'First, open your `MainScene.m` file and add this method anywhere in your code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，打开你的`MainScene.m`文件，并在代码中的任何位置添加此方法：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then go to the `checkForAnyDirectionCombineWithUnit` method and add the following
    lines of code right under the `NSInteger fv` and `NSInteger ov` lines (`fv` and
    `ov` stand for first value and other value respectively, and they will hold the
    values of the first unit and the other unit that get passed to this method):'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然后转到`checkForAnyDirectionCombineWithUnit`方法，并在`NSInteger fv`和`NSInteger ov`行（`fv`和`ov`分别代表第一个值和其他值，它们将保存传递给此方法的第一个单元和其他单元的值）下面添加以下代码行：
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Also, go to the `checkForCombineWithUnit` method and add these lines of code
    at the same spot (below the two `NSInteger` declarations).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，转到`checkForCombineWithUnit`方法，并在相同的位置（在两个`NSInteger`声明下面）添加以下代码行。
- en: The reason we have the `if` statement is that we need to make sure the sound
    effect only plays when a friendly unit is combined with another friendly unit.
    We don't need to check `other` because we only call this method with two units
    of the same type. As for the `fv+ov` and `total` parameters, those will be used
    later in this chapter, so just hold on for now.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有`if`语句的原因是我们需要确保只有在友好单位与另一个友好单位结合时才播放音效。我们不需要检查`other`，因为我们只调用此方法时使用的是相同类型的两个单元。至于`fv+ov`和`total`参数，它们将在本章后面使用，所以现在只需等待。
- en: 'Lastly, in the `playUnitCombineSound` method, you''ll need to add the following
    line of code so that the effect actually plays:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在`playUnitCombineSound`方法中，你需要添加以下代码行，以便实际播放效果：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If you run the game now, you will hear a sound when one friendly unit combines
    with another. There's just one more type of sound effect we want to add in this
    early version of the game.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在运行游戏，当一方单位与另一方单位结合时，你会听到声音。我们还想在这个游戏的早期版本中添加一种更多类型的音效。
- en: Sounds when the user loses
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户失败时的声音
- en: Last but not least, we want to include some sounds that play when a user loses
    their game. It's not entirely motivating to hear the losing sound effect over
    and over, but it is effective in keep user retention high, as it emphasizes the
    "let me try that one more time, I almost had it" feeling. Picking the right sound
    for this can be a bit hard, but once you've found a sound effect that you feel
    is sufficient, you can go ahead and add it to the **Game Over** screen.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我们想在用户输掉游戏时播放一些声音。一遍又一遍地听到失败音效并不是很有激励性，但它有助于保持用户留存率，因为它强调了“让我再试一次，我差一点就做到了”的感觉。挑选合适的音效可能有点困难，但一旦你找到了一个你觉得足够好的音效，你就可以继续将其添加到**游戏结束**屏幕上。
- en: 'So first, we need a **Game Over** screen to exist. Similar to the `Unit` class,
    create a `GameOverScene` class with a subclass of type `CCScene`. Your `GameOverScene.h`
    file should look something like this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 所以首先，我们需要一个**游戏结束**屏幕。类似于`Unit`类，创建一个`GameOverScene`类，其子类为`CCScene`。你的`GameOverScene.h`文件应该看起来像这样：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then open your `GameOverScene.m` file. It looks something like this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然后打开你的`GameOverScene.m`文件。它看起来像这样：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the `init` method of the `GameOverScene`, we want the Game Over sound effect
    to play. We''re adding it here so that the sound effect plays as soon as the Game
    Over scene loads. So, right under the line of code for the background color, add
    the following to play the Game Over sound effect:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在`GameOverScene`的`init`方法中，我们希望播放游戏结束音效。我们在这里添加它，以便游戏结束场景加载时立即播放音效。所以，在背景颜色代码行下面，添加以下代码以播放游戏结束音效：
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To hear the sound play, we need to send the user to the GameOverScene when
    they lose, so go to the `endGame` method in the `MainScene.m` file, and change
    that line of code to this (don''t forget to add the `#include "GameOverScene.h"`
    line of code at the top of the file):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要播放声音，我们需要在用户失败时将用户发送到`GameOverScene`，所以转到`MainScene.m`文件中的`endGame`方法，并将该代码行更改为以下内容（不要忘记在文件顶部添加`#include
    "GameOverScene.h"`代码行）：
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'And there you have it—a Game Over sound effect! So, up to this point, we have
    all the sound effects in place: the unit movements, the combinations, Game Over,
    the background music, and so on. But after a while, the sound gets a little repetitive,
    so let''s modify the sounds a bit to lessen the annoyance of a repeated sound.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 由此，你就有了一个游戏结束的音效！所以，到目前为止，我们已经放置了所有的音效：单位移动、组合、游戏结束、背景音乐等等。但是过了一段时间后，声音有点重复，所以让我们稍微修改一下声音，以减少重复声音的烦恼。
- en: Modifying the sound effect on the fly
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在线修改音效
- en: One thing that's so cool about using OALSimpleAudio (and was also true about
    SimpleAudioEngine) is that you can modify how the audio file sounds when it gets
    played back to the user. For example, if you wish to have a series of coins collected,
    and each coin collected in rapid succession plays a slightly higher-pitched sound
    than the previous one, you can simply modify the pitch based on how many coins
    were collected.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OALSimpleAudio（以及SimpleAudioEngine也是如此）的一个非常酷的特性是，你可以修改音频文件在播放给用户时的声音。例如，如果你希望有一系列硬币被收集，并且每个连续收集的硬币播放的音调比前一个略高，你可以简单地根据收集到的硬币数量来修改音调。
- en: The volume (or gain), pitch, and pan
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 音量（或增益）、音调和声像
- en: 'With one simple call that adds a few parameters to the default `playEffect`
    method, you can modify the loudness of the effect, the pitch of the sound effect,
    and where in the speakers your effect plays. You can do so with the following
    code:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一个简单的调用，向默认的`playEffect`方法添加几个参数，你可以修改音效的响度、音效的音调和音效在扬声器中的播放位置。你可以用以下代码做到这一点：
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Stopping looped sound effects
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 停止循环音效
- en: 'If you''ve said "Yes" to the preceding loop and wish to stop it at some point,
    you have to grab the return value of the preceding function, like this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你之前回答“是”并希望在某个时刻停止循环，你必须获取前面函数的返回值，如下所示：
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then call the respective stop function on the variable:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然后调用变量上的相应停止函数：
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Modifying the combine sound effect
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改组合音效
- en: Ideally, we don't want the user to hear the same sound effect over and over
    every time they combine units. Not only will it become obnoxious and annoying
    to the user but it will also make the game feel more boring and less exciting.
    With that said, we want to modify the combining sound effect so slightly so that
    as the user gets a higher number of unit combinations, they feel emboldened by
    their success, making them wish to play longer.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，我们不希望用户每次组合单位时都听到相同的音效。这不仅会让用户感到厌烦和烦恼，而且会让游戏感觉更加无聊，缺乏刺激。因此，我们希望对组合音效进行轻微的修改，这样随着用户组合单位数量的增加，他们会因为成功而感到自信，从而愿意玩得更久。
- en: One of the approaches is to modify the pitch of the sound effect. This will
    work up to a certain point, until the sound effect becomes so pushed in one direction
    that it's simply better to provide another sound effect for truly large unit combinations.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一种方法是通过修改音效的音调。这将在某个点上有效，直到音效被推向一个方向，此时提供另一个音效来处理真正大量的单位组合会更好。
- en: 'Open the `MainScene.m` file and scroll to the `playUnitCombineSoundWithValue`
    method. Here, you''re going to modify the code to look something like this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`MainScene.m`文件并滚动到`playUnitCombineSoundWithValue`方法。在这里，你需要修改代码，使其看起来像这样：
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: When you run the game and combine a unit, you will hear the sound effect getting
    deeper and deeper until a certain value (the tipping point—in this case, a new
    unit value of 50 or more). At this point, we want to play a different sound effect,
    which is what the inner `if` statement handles.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行游戏并组合一个单位时，你会听到音效越来越深沉，直到达到某个值（临界点——在这种情况下，新的单位值为50或更高）。在这个时候，我们希望播放不同的音效，这正是内部`if`语句所处理的。
- en: Other great sound places
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他优秀的音效位置
- en: 'The following are a couple of examples of games that make great use of sound
    effects. These games not only engage the user more, but are also great examples
    of how you can use sound effects for more than just basic events such as simple
    user movements or button clicks:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些充分利用音效的游戏示例。这些游戏不仅更能吸引用户，而且也是如何将音效用于除基本事件（如简单的用户移动或按钮点击）之外的好例子：
- en: '*Threes!*: This game has faces on the cards, and if you don''t do anything,
    after a few moments, you''ll hear the cards making random noises. Also, if you
    try to slide the cards into a position that doesn''t move anything (an invalid
    move), you will hear one of the cards say "Nope!" It''s really cute and is just
    another way the ambience of the game is upheld through the sounds. Take a look
    at the UI of the game, as shown in the following screenshot:![Other great sound
    places](img/image00246.jpeg)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*三合一*：这款游戏卡片上有脸谱，如果你什么都不做，过一会儿你会听到卡片发出随机噪音。此外，如果你尝试将卡片滑动到不会移动任何东西的位置（无效操作），你会听到其中一张卡片说“不！”这真的很可爱，也是游戏氛围通过声音得到维持的另一种方式。看看游戏的UI界面，如下面的截图所示：![其他优秀的音效位置](img/image00246.jpeg)'
- en: '*Crossy Road*: In this game, every now and then, you''ll come across a vehicle
    that''s playing music, a police car, or a garbage truck. All of these are fairly
    rare, but when the player experiences them and hears the extra level of sound,
    it becomes more enjoyable, as it''s not just another car driving by. Plus, with
    all the cars and trains in the game, if you''re wearing headphones, you''ll hear
    the vehicle''s music go from one ear to the other. Have a look at the UI of this
    game:![Other great sound places](img/image00247.jpeg)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《穿越公路》*：在这款游戏中，时不时地，你会遇到一辆播放音乐的车辆，比如警车或垃圾车。这些都比较罕见，但当玩家遇到并听到额外的音效层次时，游戏体验会更加愉快，因为它不仅仅是一辆路过的车。此外，游戏中所有的汽车和火车，如果你戴着耳机，你会听到车辆的音乐从一只耳朵传到另一只耳朵。看看这款游戏的用户界面：![其他出色的声音地点](img/image00247.jpeg)'
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter taught you how to preload, unload, play, and modify sound files
    using `OALSimpleAudio` and Cocos2d. You also saw some cool ways in which we integrated
    the use of sound in this book's project. Because the game is still in that prototype-esque
    phase, the sounds may change or be modified. However, the vast majority of them
    are implemented. Also, if you want to learn how to turn on/off sound or music
    in your game via an option in the menu or settings, read [Chapter 6](part0049.xhtml
    "Chapter 6. Tidying Up and Polishing"), *Tidying Up and Polishing*, as that chapter
    will cover more such details.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 本章教你如何使用`OALSimpleAudio`和Cocos2d预加载、卸载、播放和修改声音文件。你还看到了一些我们在这本书的项目中整合声音的酷方法。由于游戏仍然处于类似原型的阶段，声音可能会改变或被修改。然而，绝大多数都已经实现。此外，如果你想了解如何在菜单或设置中通过选项来打开/关闭游戏中的声音或音乐，请阅读[第6章](part0049.xhtml
    "第6章。整理和抛光")，*整理和抛光*，因为那一章将涵盖更多此类细节。
- en: There are also a lot of situational methods in `OALSimpleAudio` that were not
    covered in this chapter. If you wish to read more about them, you can view the
    documentation at [http://www.learn-cocos2d.com/api-ref/1.0/ObjectAL/html/interface_o_a_l_simple_audio.html#aaf877e4f0526408d569fd12f37e8e1f7](http://www.learn-cocos2d.com/api-ref/1.0/ObjectAL/html/interface_o_a_l_simple_audio.html#aaf877e4f0526408d569fd12f37e8e1f7).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在`OALSimpleAudio`中还有很多情境方法，这一章没有涉及。如果你想了解更多关于它们的信息，你可以查看[http://www.learn-cocos2d.com/api-ref/1.0/ObjectAL/html/interface_o_a_l_simple_audio.html#aaf877e4f0526408d569fd12f37e8e1f7](http://www.learn-cocos2d.com/api-ref/1.0/ObjectAL/html/interface_o_a_l_simple_audio.html#aaf877e4f0526408d569fd12f37e8e1f7)的文档。
- en: In the next chapter, we'll cover some really cool concepts and mechanics that
    most game developers don't take time to implement in their game—and it's more
    than just Game Center or iCloud support.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍一些非常酷的概念和机制，大多数游戏开发者都没有花时间在他们的游戏中实现——这不仅仅是Game Center或iCloud支持。
