- en: '*Chapter 16*: Getting Started with MapKit'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第16章*：开始使用MapKit'
- en: In the previous chapter, you learned about table views and table view controllers,
    and completed the implementation of the **Locations** screen. It now displays
    a list of restaurant locations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了表格视图和表格视图控制器，并完成了**位置**屏幕的实现。现在它显示餐厅位置的列表。
- en: In this chapter, you'll display restaurant locations on the `MKAnnotation` protocol,
    which allows you to associate the classes you create with a specific map location.
    You'll create a new class, `RestaurantItem`, that conforms to this protocol. Next,
    you'll create `MapDataManager`, a data manager class that loads restaurant data
    from a `.plist` file and puts it into an array of `RestaurantItem` instances.
    You'll create a new `DataManager` protocol to read `.plist` files and update both
    the `MapDataManager` and `ExploreDataManager` classes to avoid redundant code
    (refactoring). After that, you'll create a `MapViewController` class, a view controller
    for the `RestaurantDetailViewController` class, a view controller for the `MapViewController`
    instance. Finally, you'll clean up and organize your code using extensions to
    make it easier to read and maintain.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将在`MKAnnotation`协议上显示餐厅位置，这允许你将你创建的类与特定的地图位置关联起来。你将创建一个新的类`RestaurantItem`，使其符合此协议。接下来，你将创建`MapDataManager`，一个数据管理类，它从`.plist`文件中加载餐厅数据并将其放入`RestaurantItem`实例的数组中。你将创建一个新的`DataManager`协议来读取`.plist`文件，并将`MapDataManager`和`ExploreDataManager`类更新以避免冗余代码（重构）。之后，你将创建一个`MapViewController`类，它是`RestaurantDetailViewController`类的视图控制器，也是`MapViewController`实例的视图控制器。最后，你将使用扩展来清理和组织你的代码，使其更容易阅读和维护。
- en: By the end of this chapter, you'll have learned how to create custom map annotation
    views and add them to a map, how to use storyboard references to link storyboards
    together, and how to use extensions to organize your code, making it easier to
    read.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将学会如何创建自定义地图注释视图并将其添加到地图中，如何使用故事板引用将故事板链接在一起，以及如何使用扩展来组织你的代码，使其更容易阅读。
- en: 'The following topics will be covered:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下内容将涵盖：
- en: Understanding and creating annotations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解和创建注释
- en: Adding annotations to a map view
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向地图视图添加注释
- en: Going from the map view to the **Restaurant Detail** screen
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从地图视图转到**餐厅详情**屏幕
- en: Organizing your code
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织你的代码
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will continue working on the `LetsEat` project that you modified in the
    previous chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你将继续在上一章中修改的`LetsEat`项目上工作。
- en: 'The resource files and completed Xcode project for this chapter are in the
    `Chapter16` folder of the code bundle for this book, which can be downloaded here:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的资源文件和完成的Xcode项目位于本书代码包的`Chapter16`文件夹中，可以在此处下载：
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际效果：
- en: '[https://bit.ly/3kEKEB7](https://bit.ly/3kEKEB7)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bit.ly/3kEKEB7](https://bit.ly/3kEKEB7)'
- en: Now let's learn about map annotations, which are used to mark restaurant locations
    on the **Map** screen.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来了解地图注释，它们用于在**地图**屏幕上标记餐厅位置。
- en: Understanding and creating annotations
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解和创建注释
- en: In [*Chapter 11*](B17469_11_Final_VK_ePub.xhtml#_idTextAnchor171)*, Finishing
    Up Your User Interface*, you added a map view to the `MKMapView` class. You can
    see what it looks like in the Apple *Maps* app.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第11章*](B17469_11_Final_VK_ePub.xhtml#_idTextAnchor171)*，完成用户界面*中，你向`MKMapView`类添加了一个地图视图。你可以在苹果*地图*应用中看到它的样子。
- en: Important Information
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: To learn more about `MKMapView`, see [https://developer.apple.com/documentation/mapkit/mkmapview](https://developer.apple.com/documentation/mapkit/mkmapview).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于`MKMapView`的信息，请参阅[https://developer.apple.com/documentation/mapkit/mkmapview](https://developer.apple.com/documentation/mapkit/mkmapview)。
- en: When you build and run your app, you will see a map on the screen. The part
    of the map that is visible onscreen can be specified by setting the `region` property
    of the map.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当你构建并运行你的应用时，你将在屏幕上看到一个地图。屏幕上可见的地图部分可以通过设置地图的`region`属性来指定。
- en: Important Information
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: To learn more about regions and how to make them, see [https://developer.apple.com/documentation/mapkit/mkmapview/1452709-region](https://developer.apple.com/documentation/mapkit/mkmapview/1452709-region).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于区域及其创建方法的信息，请参阅 [https://developer.apple.com/documentation/mapkit/mkmapview/1452709-region](https://developer.apple.com/documentation/mapkit/mkmapview/1452709-region)。
- en: Pins on the `MKAnnotationView` class. To add a pin to a map view, you need an
    object that conforms to the `MKAnnotation` protocol. This protocol allows you
    to associate an object with a specific map location.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`MKAnnotationView` 类上的图钉。要向地图视图添加图钉，您需要一个遵循 `MKAnnotation` 协议的对象。此协议允许您将一个对象与特定的地图位置关联起来。'
- en: Important Information
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: To learn more about the `MKAnnotation` protocol, see [https://developer.apple.com/documentation/mapkit/mkannotation](https://developer.apple.com/documentation/mapkit/mkannotation).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 `MKAnnotation` 协议的信息，请参阅 [https://developer.apple.com/documentation/mapkit/mkannotation](https://developer.apple.com/documentation/mapkit/mkannotation)。
- en: Any object can conform to the `MKAnnotation` protocol by implementing a `coordinate`
    property, which contains a map location. Optional `MKAnnotation` protocol properties
    are `title`, a string containing the annotation's title, and `subtitle`, a string
    containing the annotation's subtitle.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 任何对象都可以通过实现一个包含地图位置的 `coordinate` 属性来遵循 `MKAnnotation` 协议。可选的 `MKAnnotation`
    协议属性包括 `title`，一个包含注释标题的字符串，以及 `subtitle`，一个包含注释副标题的字符串。
- en: When an object conforming to the `MKAnnotation` protocol is in the area of the
    map that is visible onscreen, the map view asks its delegate (usually a view controller)
    to provide a corresponding instance of the `MKAnnotationView` class. This instance
    appears as a pin on the map.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当遵循 `MKAnnotation` 协议的对象位于屏幕上可见的地图区域时，地图视图会要求其代理（通常是视图控制器）提供一个相应的 `MKAnnotationView`
    类实例。这个实例在地图上显示为一个图钉。
- en: Important Information
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: To learn more about `MKAnnotationView`, see [https://developer.apple.com/documentation/mapkit/mkannotationview](https://developer.apple.com/documentation/mapkit/mkannotationview).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 `MKAnnotationView` 的信息，请参阅 [https://developer.apple.com/documentation/mapkit/mkannotationview](https://developer.apple.com/documentation/mapkit/mkannotationview)。
- en: If the user scrolls the map and the `MKAnnotationView` instance goes off screen,
    it will be put into a reuse queue and recycled later, similar to the way table
    view cells and collection view cells are recycled. An `MKAnnotationView` instance
    can be customized to display custom icons and can display callout bubbles when
    tapped. Callout bubbles can have buttons that perform actions, such as displaying
    a screen.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户滚动地图并且 `MKAnnotationView` 实例离开屏幕，它将被放入重用队列并在稍后回收，类似于表格视图单元格和集合视图单元格的回收方式。`MKAnnotationView`
    实例可以自定义以显示自定义图标，并且在被点击时可以显示呼出气泡。呼出气泡可以包含执行动作的按钮，例如显示屏幕。
- en: For your app, you will create a new class, `RestaurantItem`, that conforms to
    the `MKAnnotation` protocol. Let's see how to create this class in the next section.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于您的应用，您将创建一个新的类，`RestaurantItem`，该类遵循 `MKAnnotation` 协议。让我们看看如何在下一节中创建这个类。
- en: Creating the RestaurantItem class
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 RestaurantItem 类
- en: To represent restaurant locations on the `RestaurantItem`, that conforms to
    the `MKAnnotation` protocol. This class will have a `coordinate` property to store
    the restaurant's location, a `title` property to store the restaurant name, and
    a `subtitle` property to store the cuisines it offers.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在 `RestaurantItem` 上表示餐厅位置，该类遵循 `MKAnnotation` 协议。这个类将有一个 `coordinate` 属性来存储餐厅的位置，一个
    `title` 属性来存储餐厅名称，以及一个 `subtitle` 属性来存储它提供的菜系。
- en: 'You need the restaurant location to set the `coordinate` property of the `RestaurantItem`
    instance. The restaurant data (including its location) will be provided as a `.plist`
    file. Before you create the `RestaurantItem` class, you need to import this `.plist`
    file into your app. Follow these steps:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要设置餐厅位置以设置 `RestaurantItem` 实例的 `coordinate` 属性。餐厅数据（包括其位置）将以 `.plist` 文件的形式提供。在您创建
    `RestaurantItem` 类之前，您需要将此 `.plist` 文件导入到您的应用中。按照以下步骤操作：
- en: Open the `LetsEat` project. In the Project navigator, right-click the `LetsEat`
    folder and create a new group called `Map`.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `LetsEat` 项目。在项目导航器中，右键单击 `LetsEat` 文件夹并创建一个名为 `Map` 的新组。
- en: Right-click the `Map` folder and create a new group called `Model`.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 `Map` 文件夹并创建一个名为 `Model` 的新组。
- en: If you have not yet done so, download the completed project and project resources
    from [https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)
    and find the `Maplocations.plist` file inside the `resources` folder in the `Chapter16`
    folder.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你还没有这样做，请从[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)下载完成的项目和项目资源，并在`Chapter16`文件夹中的`resources`文件夹内找到`Maplocations.plist`文件。
- en: 'Drag the `Maplocations.plist` file to the `Model` folder in your project, and
    click it to view its contents. You''ll see that it is an array of dictionaries,
    with each dictionary containing a restaurant''s details (including its location).
    You''ll create properties in your `RestaurantItem` class for the data that you
    will use, which will eventually be displayed on the **Restaurant Detail** screen:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Maplocations.plist`文件拖动到项目中的`Model`文件夹，并点击它以查看其内容。你会看到它是一个字典数组，每个字典包含一家餐厅的详细信息（包括其位置）。你将在`RestaurantItem`类中创建属性以存储你将使用的数据，这些数据最终将在**餐厅详情**屏幕上显示：
- en: '![Figure 16.1: Editor area showing the contents of MapLocations.plist'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '![图16.1：编辑区域显示MapLocations.plist的内容'
- en: '](img/Figure_16.01_B17469.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_16.01_B17469.jpg)'
- en: 'Figure 16.1: Editor area showing the contents of MapLocations.plist'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.1：编辑区域显示MapLocations.plist的内容
- en: 'Let''s create the `RestaurantItem` class by following these steps:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建`RestaurantItem`类：
- en: Right-click the `Model` folder and select **New File**.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`Model`文件夹并选择**新建文件**。
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class** and then click
    **Next**.'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS**应该已经选中。选择**Cocoa Touch Class**然后点击**下一步**。'
- en: 'Configure the file as follows:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式配置文件：
- en: '`RestaurantItem`'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`RestaurantItem`'
- en: '`NSObject`'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`NSObject`'
- en: '`Swift`'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Swift`'
- en: Click **Next**.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击**下一步**。
- en: Click `RestaurantItem` file appears in the Project navigator.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`RestaurantItem`文件出现在项目导航器中。
- en: 'In the `RestaurantItem` file, type the following after the `import UIKit` statement
    to import the `MapKit` framework:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`RestaurantItem`文件中，在`import UIKit`语句之后输入以下内容以导入`MapKit`框架：
- en: '[PRE0]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This gives you access to protocols such as `MKAnnotation` and `MKMapViewDelegate`.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这使你可以访问`MKAnnotation`和`MKMapViewDelegate`等协议。
- en: 'Modify the class declaration as follows to adopt the `MKAnnotation` protocol:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改类声明如下以采用`MKAnnotation`协议：
- en: '[PRE1]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Type the following between the curly braces:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在大括号之间输入以下内容：
- en: '[PRE2]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'These properties will hold the data you get from the `Maplocations.plist` file.
    Let''s see what they are for:'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些属性将保存从`Maplocations.plist`文件获取的数据。让我们看看它们是用来做什么的：
- en: '`name` stores the name of the restaurant.'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`name`存储餐厅的名称。'
- en: '`cuisines` stores the cuisines offered by the restaurant.'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`cuisines`存储餐厅提供的菜系。'
- en: '`lat` and `long` stores the latitude and the longitude of the restaurant location.'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`lat`和`long`存储餐厅位置的纬度和经度。'
- en: '`address` stores the restaurant''s address.'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`address`存储餐厅的地址。'
- en: '`postalCode` stores the restaurant''s postal code.'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`postalCode`存储餐厅的邮政编码。'
- en: '`state` stores the state in which the restaurant is located.'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`state`存储餐厅所在的州。'
- en: '`imageURL` stores a a link to a photo of the restaurant.'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`imageURL`存储指向餐厅照片的链接。'
- en: '`restaurantID` stores a unique number used as an identifier for the restaurant.'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`restaurantID`存储用作餐厅标识符的唯一数字。'
- en: Note that you haven't created properties to store every detail of a restaurant
    contained in the `Maplocations.plist` file, and that's fine. You only need to
    create properties for the details that will appear on the **Restaurant Detail**
    screen.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，你还没有为存储`Maplocations.plist`文件中包含的每个餐厅的详细信息创建属性，这是可以的。你只需要为将在**餐厅详情**屏幕上显示的详细信息创建属性。
- en: 'You''ll use a custom initializer to initialize `RestaurantItem` instances with
    data from the `.plist` file. Type the following after the last property declaration:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将使用自定义初始化器使用`.plist`文件中的数据初始化`RestaurantItem`实例。在最后一个属性声明之后输入以下内容：
- en: '[PRE3]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Even though this initializer looks complicated, it's actually quite straightforward.
    Each line looks for a specific dictionary item key and assigns its value to the
    corresponding property. For example, the first line looks for the dictionary item
    with a key containing `lat` and assigns the associated value to the `lat` property.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尽管这个初始化器看起来很复杂，但实际上非常简单。每一行都查找特定的字典项键并将其值分配给相应的属性。例如，第一行查找包含`lat`键的字典项并将其关联的值分配给`lat`属性。
- en: 'You''ll use the `lat` and `long` properties to create the value for the `coordinate`
    property, which is required to conform to `MKAnnotation`. Type the following after
    the `init(dict:)` method to implement it:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将使用 `lat` 和 `long` 属性来创建 `coordinate` 属性的值，这是符合 `MKAnnotation` 所必需的。在 `init(dict:)`
    方法之后输入以下内容以实现它：
- en: '[PRE4]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `coordinate` property is of type `CLLocationCoordinate2D`, and it holds
    a geographical location. The value of the `coordinate` property is not assigned
    directly; the `guard` statement gets the latitude and longitude values from the
    `lat` and `long` properties, which are then used to create the value for the `coordinate`
    property. Such properties are called **computed properties**.
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`coordinate` 属性的类型是 `CLLocationCoordinate2D`，它包含一个地理位置。`coordinate` 属性的值不是直接分配的；`guard`
    语句从 `lat` 和 `long` 属性中获取纬度和经度值，然后用于创建 `coordinate` 属性的值。这样的属性被称为 **计算属性**。'
- en: 'Implement the `title` property by adding the following code after the `coordinate`
    property:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `coordinate` 属性之后添加以下代码以实现 `title` 属性：
- en: '[PRE5]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`title` is a computed property that returns the contents of the `name` property.'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`title` 是一个计算属性，它返回 `name` 属性的内容。'
- en: 'Finally, implement the `subtitle` property by adding the following code after
    the `title` property:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在 `title` 属性之后添加以下代码以实现 `subtitle` 属性：
- en: '[PRE6]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`subtitle` is also a computed property. The first line checks to see whether
    the `cuisines` property is empty, and if so, returns an empty string. If the `cuisines`
    property contains a single item, that item will be returned. If the `cuisines`
    property has more than a single item, each item is added to a string, with a comma
    in between items. For example, if `cuisines` contained the `["American", "Bistro",
    "Burgers"]` array, the generated string would be `"American, Bistro, Burgers"`.'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`subtitle` 也是一个计算属性。第一行检查 `cuisines` 属性是否为空，如果是，则返回一个空字符串。如果 `cuisines` 属性包含一个项目，则返回该项目。如果
    `cuisines` 属性包含多个项目，则每个项目都会添加到一个字符串中，项目之间用逗号分隔。例如，如果 `cuisines` 包含 `["American",
    "Bistro", "Burgers"]` 数组，生成的字符串将是 `"American, Bistro, Burgers"`。'
- en: 'Your `RestaurantItem` class is now complete and free of errors and should look
    like this:'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你的 `RestaurantItem` 类现在已完成且没有错误，应该看起来像这样：
- en: '[PRE7]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: At this point, you've added the `Maplocations.plist` file to your app, and you
    have created the `RestaurantItem` class. Next, let's create a data manager class
    that reads restaurant data from the `Maplocations.plist` file and puts it into
    an array of `RestaurantItem` instances for use by your app.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经将 `Maplocations.plist` 文件添加到你的应用中，并且已经创建了 `RestaurantItem` 类。接下来，让我们创建一个数据管理类，它从
    `Maplocations.plist` 文件中读取餐厅数据，并将其放入一个 `RestaurantItem` 实例数组中，以便你的应用使用。
- en: Creating the MapDataManager class
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 MapDataManager 类
- en: 'As you have done in previous chapters, you''ll create a data manager class,
    `MapDataManager`, that will load restaurant data from the `Maplocations.plist`
    file and put the data into an array of `RestaurantItem` instances. Follow these
    steps:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如同你在前面的章节中所做的那样，你将创建一个数据管理类，名为 `MapDataManager`，它将从 `Maplocations.plist` 文件中加载餐厅数据，并将数据放入一个
    `RestaurantItem` 实例数组中。按照以下步骤操作：
- en: Right-click the `Model` folder inside the `Map` folder and select **New File**.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 `Map` 文件夹内的 `Model` 文件夹，并选择 **新建文件**。
- en: '**iOS** should already be selected. Choose **Swift File** and then click **Next**.'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS** 应该已经选中。选择 **Swift 文件** 然后点击 **下一步**。'
- en: Name this file `MapDataManager`. Click `MapDataManager` file appears in the
    Project navigator.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件命名为 `MapDataManager`。点击项目导航器中出现的 `MapDataManager` 文件。
- en: 'In the `MapDataManager` file, add the following after the `import` statement
    to declare the `MapDataManager` class:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MapDataManager` 文件中，在 `import` 语句之后添加以下内容以声明 `MapDataManager` 类：
- en: '[PRE8]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add the following properties between the curly braces to store the `RestaurantItem`
    instances that will be read from the `.plist` file:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在大括号之间添加以下属性以存储从 `.plist` 文件中读取的 `RestaurantItem` 实例：
- en: '[PRE9]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `items` array will contain `RestaurantItem` instances. `private` makes the
    `items` array only accessible within the `MapDataManager` class, and `annotations`
    is a computed property that returns a copy of the `items` array when accessed.
    This allows the contents of the `items` array to be accessed, but not modified,
    by other objects.
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`items` 数组将包含 `RestaurantItem` 实例。`private` 使得 `items` 数组只能在 `MapDataManager`
    类内部访问，而 `annotations` 是一个计算属性，当访问时返回 `items` 数组的副本。这允许其他对象访问 `items` 数组的内容，但不能修改它。'
- en: 'Add the following methods after the property declarations to load the `.plist`
    file, read the data inside, and store it in an array of `RestaurantItem` instances:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性声明之后添加以下方法以加载`.plist`文件，读取其内部数据，并将其存储在`RestaurantItem`实例数组中：
- en: '[PRE10]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `loadData()` and `fetch(completion:)` methods perform the same tasks as
    the `loadData()` and `fetch()` methods in the `ExploreDataManager` class.
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`loadData()`和`fetch(completion:)`方法执行与`ExploreDataManager`类中的`loadData()`和`fetch()`方法相同的任务。'
- en: Tip
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 小贴士
- en: You may wish to re-read [*Chapter 14*](B17469_14_Final_VK_ePub.xhtml#_idTextAnchor201)*,
    Getting Data into Collection Views*, to refresh your memory on the `ExploreDataManager`
    class.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可能希望重新阅读[*第14章*](B17469_14_Final_VK_ePub.xhtml#_idTextAnchor201)*，将数据添加到集合视图中*，以刷新你对`ExploreDataManager`类的记忆。
- en: 'However, the `loadData()` method used here is able to return an array containing
    dictionaries where the values are of the `AnyObject` type. This is necessary since
    the `MapLocations.plist` file, unlike the `ExploreData.plist` file, does not exclusively
    contain dictionaries of the `[String: String`] type. Also, the `fetch(completion:)`
    method used here has a completion closure as a parameter, which can accept any
    function or closure that takes an array of `RestaurantItems` as a parameter:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '然而，这里使用的`loadData()`方法能够返回一个包含字典的数组，其中值是`AnyObject`类型。这是必要的，因为与`ExploreData.plist`文件不同，`MapLocations.plist`文件不仅包含`[String:
    String]`类型的字典。此外，这里使用的`fetch(completion:)`方法有一个作为参数的完成闭包，它可以接受任何接受`RestaurantItems`数组作为参数的函数或闭包：'
- en: '[PRE11]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Sometimes, you don't know when an operation will be finished. For example, you
    need to do an action after you've downloaded a file from the internet, but you
    don't know how long it would take to download. You can specify a completion closure
    to be applied once the operation has been completed. In this case, the completion
    closure will process the `items` array once all the data from the `.plist` file
    has been read.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，你不知道一个操作何时会完成。例如，你需要在从互联网下载文件后执行一个动作，但你不知道下载需要多长时间。你可以指定一个完成闭包，一旦操作完成就应用它。在这种情况下，完成闭包将处理`items`数组，一旦`.plist`文件中的所有数据都被读取。
- en: 'Now consider the `MapLocations.plist` file once more:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在再次考虑`MapLocations.plist`文件：
- en: '![Figure 16.2: Editor area showing array and dictionaries in MapLocations.plist'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 16.2: Editor area showing array and dictionaries in MapLocations.plist]'
- en: '](img/Figure_16.02_B17469.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_16.02_B17469.jpg]'
- en: 'Figure 16.2: Editor area showing array and dictionaries in MapLocations.plist'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.2：显示MapLocations.plist中的数组和字典的编辑区域
- en: This file has the same structure as `ExploreData.plist`. The `Root` item is
    an array that contains dictionaries. Since both `ExploreData.plist` and `MapLocations.plist`
    have an array of dictionaries, it would be more efficient if you could create
    a single method to load `.plist` files and use it wherever it was needed. You
    will do this in the next section.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件的结构与`ExploreData.plist`相同。`Root`项是一个包含字典的数组。由于`ExploreData.plist`和`MapLocations.plist`都有一个字典数组，因此如果你能创建一个单一的方法来加载`.plist`文件并在需要的地方使用它，将会更高效。你将在下一节中这样做。
- en: Creating the DataManager protocol
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建DataManager协议
- en: Instead of creating a method in each class to load a `.plist` file, you will
    create a new protocol, `DataManager`, to handle `.plist` file loading. This protocol
    will implement a method to load `.plist` files using an extension.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你将不会在每个类中创建一个方法来加载`.plist`文件，而是创建一个新的协议`DataManager`来处理`.plist`文件加载。此协议将实现一个使用扩展加载`.plist`文件的方法。
- en: Tip
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: You may wish to re-read [*Chapter 8*](B17469_08_Final_VK_ePub.xhtml#_idTextAnchor123)*,
    Protocols, Extensions, and Error Handling*, which covers protocols and extensions.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能希望重新阅读[*第8章*](B17469_08_Final_VK_ePub.xhtml#_idTextAnchor123)*，协议、扩展和错误处理*，该章节涵盖了协议和扩展。
- en: 'After you have created the `DataManager` protocol, any class that needs to
    load a `.plist` file can adopt it. You''ll modify both `ExploreDataManager` and
    `MapDataManager` classes to adopt this protocol. Follow these steps:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在你创建了`DataManager`协议之后，任何需要加载`.plist`文件的自定义类都可以采用它。你需要修改`ExploreDataManager`和`MapDataManager`类以采用此协议。按照以下步骤操作：
- en: Right-click the `LetsEat` folder and create a new group called `Misc`.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`LetsEat`文件夹，创建一个名为`Misc`的新组。
- en: Right-click on the `Misc` folder and choose **New File**.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`Misc`文件夹，选择**新建文件**。
- en: '**iOS** should already be selected. Choose **Swift File** and then click **Next**.'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS**应该已经选中。选择**Swift文件**然后点击**下一步**。'
- en: Name this file `DataManager`. Click **Create**.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件命名为`DataManager`。点击**创建**。
- en: 'Click the `DataManager` file in the Project navigator and declare the `DataManager`
    protocol as follows:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击 `DataManager` 文件，并声明 `DataManager` 协议如下：
- en: '[PRE12]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add an extension containing the implementation of the `loadPlist(file:)` method
    after the protocol declaration:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在协议声明之后添加一个扩展，包含 `loadPlist(file:)` 方法的实现：
- en: '[PRE13]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now that you have this protocol, you will modify the `MapDataManager` and `ExploreDataManager`
    classes to adopt it. When you take existing code and modify it to accomplish the
    same thing more efficiently, this process is called **refactoring**.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您有了这个协议，您将修改 `MapDataManager` 和 `ExploreDataManager` 类以采用它。当您将现有代码修改为更有效地完成相同的事情时，这个过程被称为
    **重构**。
- en: You will start with refactoring the `MapDataManager` class to conform to the
    `DataManager` protocol in the next section.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将开始重构 `MapDataManager` 类以符合 `DataManager` 协议。
- en: Refactoring the MapDataManager class
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重构 MapDataManager 类
- en: 'The `MapDataManager` class already has a `loadData()` method, which is hardcoded
    to read `Maplocations.plist`. Now that you have created the `DataManager` protocol,
    you will modify the `MapDataManager` class to use it instead. Follow these steps:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`MapDataManager` 类已经有一个 `loadData()` 方法，它被硬编码为读取 `Maplocations.plist`。现在您已经创建了
    `DataManager` 协议，您将修改 `MapDataManager` 类以使用它。按照以下步骤操作：'
- en: With the `MapDataManager` file selected in the Project navigator, find and delete
    the `loadData()` method. You'll see an error because the `fetch()` method calls
    the `loadData()` method, which you just removed. You'll fix this shortly.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中选择 `MapDataManager` 文件，找到并删除 `loadData()` 方法。您会看到一个错误，因为 `fetch()` 方法调用了您刚刚删除的
    `loadData()` 方法。您将在稍后修复这个问题。
- en: 'Add the `DataManager` protocol to the class declaration as follows:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `DataManager` 协议添加到类声明中，如下所示：
- en: '[PRE14]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Modify the `for data in loadData()` line in the `fetch()` method as follows
    to fix the error:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `fetch()` 方法中的 `for data in loadData()` 行按照以下方式修改以修复错误：
- en: '[PRE15]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: import Foundation
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: import Foundation
- en: 'class MapDataManager: DataManager {'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'class MapDataManager: DataManager {'
- en: 'private var items: [RestaurantItem] = []'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'private var items: [RestaurantItem] = []'
- en: 'var annotations: [RestaurantItem] {'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'var annotations: [RestaurantItem] {'
- en: items
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: items
- en: '}'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: 'func fetch(completion: (_ annotations:'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'func fetch(completion: (_ annotations:'
- en: '[RestaurantItem]) -> ()){'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[RestaurantItem]) -> ()){'
- en: if !items.isEmpty {
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: if !items.isEmpty {
- en: items.removeAll()
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: items.removeAll()
- en: '}'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: 'for data in loadPlist(file: "MapLocations") {'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'for data in loadPlist(file: "MapLocations") {'
- en: 'items.append(RestaurantItem(dict: data))'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'items.append(RestaurantItem(dict: data))'
- en: '}'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: completion(items)
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: completion(items)
- en: '}'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE16]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The error should be gone. In the next section, you will refactor the `ExploreDataManager`
    class as well to make it conform to the `DataManager` protocol.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 错误应该已经消失了。在下一节中，您将同样重构 `ExploreDataManager` 类以使其符合 `DataManager` 协议。
- en: Refactoring the ExploreDataManager class
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重构 ExploreDataManager 类
- en: Like the `MapDataManager` class, the `ExploreDataManager` class has a `loadData()`
    method, which is hardcoded to read `ExploreData.plist`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `MapDataManager` 类类似，`ExploreDataManager` 类也有一个 `loadData()` 方法，它被硬编码为读取 `ExploreData.plist`。
- en: Tip
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: You may wish to re-read [*Chapter 14*](B17469_14_Final_VK_ePub.xhtml#_idTextAnchor201)*,
    Getting Data into Collection Views*, to refresh your memory on the `ExploreDataManager`
    class.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望重新阅读 [*第14章*](B17469_14_Final_VK_ePub.xhtml#_idTextAnchor201)，“将数据放入集合视图”，以刷新您对
    `ExploreDataManager` 类的记忆。
- en: 'You need to make the same changes to the `ExploreDataManager` class that you
    made to the `MapDataManager` class. Follow these steps:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要将 `ExploreDataManager` 类中与 `MapDataManager` 类相同的更改进行修改。按照以下步骤操作：
- en: With the `ExploreDataManager` file selected in the Project navigator, find and
    delete the `loadData()` method. Ignore the error because it will be fixed shortly.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中选择 `ExploreDataManager` 文件，找到并删除 `loadData()` 方法。忽略错误，因为它将在稍后修复。
- en: 'Add the `DataManager` protocol to the class declaration as follows:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `DataManager` 协议添加到类声明中，如下所示：
- en: '[PRE17]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Modify the `fetch()` method as follows to fix the error:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式修改 `fetch()` 方法以修复错误：
- en: '[PRE18]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You have completed the implementation of the `MapDataManager` class, created
    the `DataManager` protocol, and refactored both the `MapDataManager` and `ExploreDataManager`
    classes to conform to this protocol. With the `MapDataManager` class, you can
    load data from the `MapLocations.plist` file and return an array of `RestaurantItem`
    instances. Now, let's see how to use this array to add annotations to a map view,
    which will be displayed as pins in the **Map** screen.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经完成了 `MapDataManager` 类的实现，创建了 `DataManager` 协议，并将 `MapDataManager` 和 `ExploreDataManager`
    类重构为符合此协议。使用 `MapDataManager` 类，你可以从 `MapLocations.plist` 文件加载数据，并返回一个 `RestaurantItem`
    实例数组。现在，让我们看看如何使用这个数组向地图视图添加标记，这些标记将在 **Map** 屏幕上显示为图钉。
- en: Adding annotations to a map view
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向地图视图添加标记
- en: In [*Chapter 11*](B17469_11_Final_VK_ePub.xhtml#_idTextAnchor171)*, Finishing
    Up Your User Interface*, you added a map view to the `MapLocations.plist` file
    to your project and created the `RestaurantItem` and `MapDataManager` classes.
    Remember the MVC design pattern? At this point, you have created the views and
    models for the **Map** screen, so all you need now is the view controller.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第11章*](B17469_11_Final_VK_ePub.xhtml#_idTextAnchor171)*，完成用户界面*，你向项目中添加了地图视图到
    `MapLocations.plist` 文件，并创建了 `RestaurantItem` 和 `MapDataManager` 类。还记得 MVC 设计模式吗？在这个阶段，你已经创建了
    **Map** 屏幕的视图和模型，所以你现在只需要视图控制器。
- en: 'The view controller will be responsible for the following tasks:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 视图控制器将负责以下任务：
- en: Adding `RestaurantItem` instances, which conform to the `MKAnnotation` protocol,
    to the map view.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向地图视图添加符合 `MKAnnotation` 协议的 `RestaurantItem` 实例。
- en: For `RestaurantItem` instances within the region displayed in the map view,
    provide `MKAnnotationView` instances requested by the map view.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于地图视图中显示的区域内的 `RestaurantItem` 实例，提供地图视图请求的 `MKAnnotationView` 实例。
- en: Provide custom `MKAnnotationView` instances that display a callout bubble containing
    a button when tapped, and present the **Restaurant Detail** screen when the button
    is tapped.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供自定义的 `MKAnnotationView` 实例，当点击时显示包含按钮的呼出气泡，并在按钮点击时显示 **Restaurant Detail**
    屏幕。
- en: You'll start by creating the `MapViewController` class as the view controller
    for the **Map** screen in the next section.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 你将首先创建 `MapViewController` 类，作为下一节中 **Map** 屏幕的视图控制器。
- en: Creating the MapViewController class
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 MapViewController 类
- en: 'You''ve created the view and model objects for the `MapViewController`, to
    be the view controller for the **Map** screen. Follow these steps:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经为 `MapViewController` 创建了视图和模型对象，使其成为 **Map** 屏幕的视图控制器。按照以下步骤操作：
- en: Right-click the `Map` folder and select **New File**.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 `Map` 文件夹，选择 **New File**。
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class** and then click
    **Next**.'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS** 应已选中。选择 **Cocoa Touch Class** 然后点击 **Next**。'
- en: 'Configure the file as follows:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式配置文件：
- en: '`MapViewController`'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`MapViewController`'
- en: '`UIViewController`'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`UIViewController`'
- en: '`Swift`'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Swift`'
- en: Click **Next**.
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击 **Next**。
- en: Click `MapViewController` file appears in the Project navigator.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击 `MapViewController` 文件。
- en: 'In the `MapViewController` file, add the following line after `import UIKit`
    to import the `MapKit` framework:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MapViewController` 文件中，在 `import UIKit` 之后添加以下行以导入 `MapKit` 框架：
- en: '[PRE19]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Modify the class declaration as follows to make the `MapViewController` class
    adopt the `MKMapViewDelegate` protocol:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改类声明如下，使 `MapViewController` 类采用 `MKMapViewDelegate` 协议：
- en: '[PRE20]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You have declared the `MapViewController` class. In the next section, you'll
    assign this class as the view controller for the **Map** screen, and create an
    outlet for the map view.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经声明了 `MapViewController` 类。在下一节中，你将把这个类指定为 **Map** 屏幕的视图控制器，并为地图视图创建一个出口。
- en: Connecting the outlets for the map view
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接地图视图的出口
- en: 'The view controller scene for the `MapViewController` class to be the view
    controller for the **Map** screen and add an outlet for the map view to it. Follow
    these steps:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 为 `MapViewController` 类创建视图控制器场景，使其成为 **Map** 屏幕的视图控制器，并为地图视图添加一个出口。按照以下步骤操作：
- en: 'Click the `Main` storyboard file. Click the `MapViewController`:![Figure 16.3:
    Identity inspector showing Class setting for MapViewController'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '点击 `Main` 故事板文件。点击 `MapViewController`：![Figure 16.3: Identity inspector showing
    Class setting for MapViewController'
- en: '](img/Figure_16.03_B17469.jpg)'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_16.03_B17469.jpg]'
- en: 'Figure 16.3: Identity inspector showing Class setting for MapViewController'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![Figure 16.3: Identity inspector showing Class setting for MapViewController]'
- en: 'Select the **Map View** in the document outline:![Figure 16.4: Document outline
    with Map View selected'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在文档大纲中选择 **Map View**：![Figure 16.4: Document outline with Map View selected]'
- en: '](img/Figure_16.04_B17469.jpg)'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_16.04_B17469.jpg]'
- en: 'Figure 16.4: Document outline with Map View selected'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 16.4：选择地图视图的文档大纲
- en: Click the Adjust Editor Options button.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击调整编辑器选项按钮。
- en: Choose Assistant in the pop-up menu.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出菜单中选择辅助选项。
- en: 'The assistant editor appears, showing the contents of the `MapViewController`
    file. *Ctrl + Drag* from the map view to the space just under the class declaration:![Figure
    16.5: Editor area showing MapViewController file contents'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 辅助编辑器出现，显示了`MapViewController`文件的内容。从地图视图*Ctrl + 拖动*到类声明下方空隙：![图 16.5：显示 MapViewController
    文件内容的编辑器区域
- en: '](img/Figure_16.05_B17469.jpg)'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_16.05_B17469.jpg)'
- en: 'Figure 16.5: Editor area showing MapViewController file contents'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 16.5：显示 MapViewController 文件内容的编辑器区域
- en: 'Type `mapView` in the **Name** field and click **Connect**:![Figure 16.6: Pop-up
    dialog box for mapView outlet creation'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**名称**字段中输入`mapView`并点击**连接**：![图 16.6：创建 mapView 输出端口时的弹出对话框
- en: '](img/Figure_16.06_B17469.jpg)'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_16.06_B17469.jpg)'
- en: 'Figure 16.6: Pop-up dialog box for mapView outlet creation'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 16.6：创建 mapView 输出端口时的弹出对话框
- en: 'The map view has been connected to the `mapView` outlet in the `MapViewController`
    class. Click the **x** button to close the assistant editor:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 地图视图已连接到`MapViewController`类中的`mapView`输出端口。点击**x**按钮关闭辅助编辑器：
- en: '![Figure 16.7: Assistant editor close button'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 16.7：辅助编辑器关闭按钮'
- en: '](img/Figure_16.07_B17469.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_16.07_B17469.jpg)'
- en: 'Figure 16.7: Assistant editor close button'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.7：辅助编辑器关闭按钮
- en: The `MapViewController` class now has an outlet, `mapView`, that is linked to
    the map view in the `MapDataManager` class by adding a method to generate a new
    region based on the restaurant's location, so it can provide a map region for
    the map view to display.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`MapViewController`类现在有一个输出端口`mapView`，通过添加一个基于餐厅位置生成新区域的方法将其链接到`MapDataManager`类中的地图视图，因此它可以提供地图区域以供地图视图显示。'
- en: Setting the map view region to be displayed
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置要显示的地图视图区域
- en: In a map view, the portion of the map that is visible on screen is called a
    region. To specify a region, you need the coordinates for the region's center
    point and the horizontal and vertical span representing the dimensions of the
    map to be displayed.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在地图视图中，屏幕上可见的地图部分称为区域。要指定一个区域，你需要该区域中心点的坐标以及表示要显示的地图尺寸的水平和垂直跨度。
- en: 'The `fetch(completion:)` method in the `MapDataManager` class returns an array
    of `RestaurantItem` instances. You will implement a method, `initialRegion(latDelta:longDelta:)`,
    to get the first `RestaurantItem` instance from this array, get the restaurant''s
    coordinates, and use them to create a region. Follow these steps:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`MapDataManager`类中的`fetch(completion:)`方法返回一个`RestaurantItem`实例数组。你将实现一个方法`initialRegion(latDelta:longDelta:)`，从该数组中获取第一个`RestaurantItem`实例，获取餐厅的坐标，并使用它们来创建一个区域。按照以下步骤操作：'
- en: Click the `MapDataManager` file in the Project navigator. After the `import
    Foundation` statement, add `import MapKit`.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击`MapDataManager`文件。在`import Foundation`语句之后，添加`import MapKit`。
- en: 'Just before the closing curly brace, implement the `initialRegion(latDelta:longDelta:)`
    method as follows:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在关闭花括号之前，实现`initialRegion(latDelta:longDelta:)`方法如下：
- en: '[PRE21]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Let''s break this down:'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们分解一下：
- en: '[PRE22]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This method takes two parameters and returns an `MKCoordinateRegion` instance.
    `latDelta` specifies the north-to-south distance (measured in degrees) to display
    for the map region. One degree is approximately 69 miles. `longDelta` specifies
    the amount of east-to-west distance (measured in degrees) to display for the map
    region. The `MKCoordinateRegion` instance that is returned determines the region
    that will appear onscreen.
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此方法接受两个参数并返回一个`MKCoordinateRegion`实例。`latDelta`指定要显示的地图区域的北到南距离（以度为单位）。一度大约是69英里。`longDelta`指定要显示的地图区域的东到西距离（以度为单位）。返回的`MKCoordinateRegion`实例确定将在屏幕上显示的区域。
- en: '[PRE23]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `guard` statement gets the first item in the array of `RestaurantItem` instances
    and assigns it to `item`. If the array is empty, an empty `MKCoordinateRegion`
    instance is returned.
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`guard`语句从`RestaurantItem`实例数组中获取第一个项目并将其分配给`item`。如果数组为空，则返回一个空的`MKCoordinateRegion`实例。'
- en: '[PRE24]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '`latDelta` and `longDelta` are used to make an `MKCoordinateSpan` instance,
    which is the horizontal and vertical span of the region to be created.'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`latDelta`和`longDelta`用于创建一个`MKCoordinateSpan`实例，这是要创建的区域水平和垂直跨度。'
- en: '[PRE25]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: An `MKCoordinateRegion` instance is created and returned using the coordinate
    property of `item` and the `MKCoordinateSpan` instance.
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`item`的坐标属性和`MKCoordinateSpan`实例创建并返回一个`MKCoordinateRegion`实例。
- en: Now that the map region has been determined, you can determine which `RestaurantItem`
    instances are in this region based on their `coordinate` property. Remember that
    the `RestaurantItem` class conforms to `MKAnnotation`. As the view controller
    for the map view, the `MapViewController` class is responsible for providing `MKAnnotationView`
    instances for any `RestaurantItem` instances in this region.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，地图区域已经确定，你可以根据它们的 `coordinate` 属性确定哪些 `RestaurantItem` 实例位于此区域。记住，`RestaurantItem`
    类符合 `MKAnnotation`。作为地图视图的视图控制器，`MapViewController` 类负责为该区域内的任何 `RestaurantItem`
    实例提供 `MKAnnotationView` 实例。
- en: In the next section, you'll modify the `MapViewController` class to provide
    `MKAnnotationViews` for the `RestaurantItem` instances in the region displayed
    by the map view.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将修改 `MapViewController` 类以提供地图视图显示区域内的 `RestaurantItem` 实例的 `MKAnnotationViews`。
- en: Displaying MKAnnotationView instances on the map view
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在地图视图中显示 MKAnnotationView 实例
- en: 'At this point, you have the `MapViewController` class to manage the map view
    on the `initialRegion(latDelta:longDelta:)` method in the `MapDataManager` class
    to set the map region. You will now modify the `MapViewController` class to get
    an array of `RestaurantItem` instances from the `MapDataManager` class and add
    it to the map view. Follow these steps:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经有 `MapViewController` 类来管理 `MapDataManager` 类中的 `initialRegion(latDelta:longDelta:)`
    方法上的地图视图，以设置地图区域。现在，你将修改 `MapViewController` 类以从 `MapDataManager` 类获取 `RestaurantItem`
    实例的数组并将其添加到地图视图中。按照以下步骤操作：
- en: Click the `MapViewController` file in the Project navigator and remove the commented
    code.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击 `MapViewController` 文件并删除注释代码。
- en: 'Just after the `mapView` property declaration, add the following to create
    an instance of the `MapDataManager` class and assign it to `manager`:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `mapView` 属性声明之后，添加以下代码以创建 `MapDataManager` 类的实例并将其分配给 `manager`：
- en: '[PRE26]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Add the following method after `viewDidLoad()`. This method will add `RestaurantItem`
    instances (which conform to the `MKAnnotation` protocol) to the map view:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `viewDidLoad()` 之后添加以下方法。此方法将 `RestaurantItem` 实例（符合 `MKAnnotation` 协议）添加到地图视图中：
- en: '[PRE27]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The `setupMap(_:)` method takes a parameter, `annotations`, which is an array
    of `RestaurantItem` instances. It sets the region of the map to be displayed in
    the map view using the `initialRegion(latDelta:longDelta:)` method of the `MapDataManager`
    class, then adds each `RestaurantItem` instance in the `annotations` array to
    the map view. The map view's delegate (the `MapViewController` class in this case)
    then automatically provides an `MKAnnotationView` instance for every `RestaurantItem`
    instance within the region.
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`setupMap(_:)` 方法接受一个参数 `annotations`，它是一个 `RestaurantItem` 实例的数组。它使用 `MapDataManager`
    类的 `initialRegion(latDelta:longDelta:)` 方法设置地图视图要显示的区域，然后将 `annotations` 数组中的每个
    `RestaurantItem` 实例添加到地图视图中。然后，地图视图的代理（在本例中为 `MapViewController` 类）自动为该区域内的每个
    `RestaurantItem` 实例提供 `MKAnnotationView` 实例。'
- en: 'Add the following method before the `setupMap(_:)` method. This calls the `fetch(completion:)`
    method of the `MapDataManager` instance and passes in the `setupMap(_:)` method
    as a completion closure:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `setupMap(_:)` 方法之前添加以下方法。此方法调用 `MapDataManager` 实例的 `fetch(completion:)`
    方法，并将 `setupMap(_:)` 方法作为完成闭包传入：
- en: '[PRE28]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `fetch(completion:)` method loads the `MapLocations.plist` file and creates
    and assigns the array of `RestaurantItem` instances to the `items` array. The
    `annotations` property returns a copy of the `items` array. This array is then
    processed by the `setupMap(_:)` method that was passed in as the completion closure.
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`fetch(completion:)` 方法加载 `MapLocations.plist` 文件，并创建并将 `RestaurantItem` 实例的数组分配给
    `items` 数组。`annotations` 属性返回 `items` 数组的副本。然后，该数组由传入作为完成闭包的 `setupMap(_:)` 方法处理。'
- en: 'Call the `initialize()` method inside `viewDidLoad()` so it will be called
    when the map view is loaded:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `viewDidLoad()` 中调用 `initialize()` 方法，以便在地图视图加载时调用：
- en: '[PRE29]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Build and run the application. You should see pins (`MKAnnotationView` instances)
    on the **Map** screen:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行应用程序。你应该在 **地图** 屏幕上看到图钉（`MKAnnotationView` 实例）：
- en: '![Figure 16.8: iOS Simulator showing standard MKAnnotationView instances'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 16.8：iOS 模拟器显示标准 MKAnnotationView 实例'
- en: '](img/Figure_16.08_B17469.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_16.08_B17469.jpg)'
- en: 'Figure 16.8: iOS Simulator showing standard MKAnnotationView instances'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.8：iOS 模拟器显示标准 MKAnnotationView 实例
- en: An `MKAnnotationView` instance has been added for each `RestaurantItem` instance
    in the map region. Each `MKAnnotationView` instance is represented by a pin. You
    now have pins showing restaurant locations on your map, but you need to add code
    to display custom pins as shown in the app tour. You will do that in the next
    section.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在地图区域中为每个 `RestaurantItem` 实例添加了一个 `MKAnnotationView` 实例。每个 `MKAnnotationView`
    实例由一个图钉表示。你现在地图上有显示餐厅位置的图钉，但需要添加代码来显示应用导览中所示的定制图钉。你将在下一节中完成这项工作。
- en: Creating custom MKAnnotationView instances
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建自定义 `MKAnnotationView` 实例
- en: 'Currently, the `MKAnnotationView` instances, which look like pins. You can
    replace the standard pin image with a custom image. There is a custom image in
    the `Assets.xcassets` file, and you''ll configure the `MapViewController` class
    to use it. This will make the pins onscreen match the ones in the app tour. You''ll
    also configure each pin to display a callout bubble when tapped. Follow these
    steps:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，`MKAnnotationView` 实例看起来像图钉。你可以用自定义图像替换标准图钉图像。`Assets.xcassets` 文件中有一个自定义图像，你将配置
    `MapViewController` 类使用它。这将使屏幕上的图钉与应用导览中的图钉相匹配。你还将配置每个图钉，以便在点击时显示呼出气泡。按照以下步骤操作：
- en: Click the `MapViewController` file in the Project navigator.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击 `MapViewController` 文件。
- en: 'Add the following code inside the `initialize()` method after the opening curly
    brace. This makes the `MapViewController` class the delegate for the map view:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `initialize()` 方法中，在开括号之后添加以下代码。这使得 `MapViewController` 类成为地图视图的代理：
- en: '[PRE30]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Add the following method after the `setupMap(_:)` method. This method returns
    a custom `MKAnnotationView` instance for every `MKAnnotation` instance in the
    region displayed by the map view:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `setupMap(_:)` 方法之后添加以下方法。此方法为地图视图显示区域内的每个 `MKAnnotation` 实例返回一个自定义的 `MKAnnotationView`
    实例：
- en: '[PRE31]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Let''s break this down:'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们分解一下：
- en: '[PRE32]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This is one of the delegate methods specified in the `MKMapViewDelegate` protocol.
    It's triggered when an `MKAnnotation` instance is within the map region, and it
    returns an `MKAnnotationView` instance, which the user will see on the screen.
    You'll use this method to replace the default pins with custom pins.
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是 `MKMapViewDelegate` 协议中指定的委托方法之一。当 `MKAnnotation` 实例位于地图区域内时，它会触发，并返回一个 `MKAnnotationView`
    实例，用户将在屏幕上看到它。你将使用此方法用自定义图钉替换默认图钉。
- en: '[PRE33]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: A constant, `identifier`, is assigned the `"custompin"` string. This will be
    the reuse identifier.
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 常量 `identifier` 被分配了 `"custompin"` 字符串。这将作为重用标识符。
- en: '[PRE34]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: In addition to the annotations that you specify, an `MKMapView` instance will
    also add an annotation for the user location. This `guard` statement checks to
    see whether the annotation is the user location. If it is, `nil` is returned,
    as the user location is not a restaurant location.
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 除了你指定的注释外，`MKMapView` 实例还会为用户位置添加一个注释。这个 `guard` 语句检查注释是否是用户位置。如果是，则返回 `nil`，因为用户位置不是餐厅位置。
- en: '[PRE35]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '`annotationView` is a constant of the `MKAnnotationView` type. You create this
    so that you can configure and return it later.'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`annotationView` 是 `MKAnnotationView` 类型的常量。你创建这个常量是为了稍后配置和返回它。'
- en: '[PRE36]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The `if` statement checks to see whether there are any existing annotations
    that were initially visible but are no longer on the screen. If there are, the
    `MKAnnotationView` instance for that annotation can be reused and is assigned
    to the `annotationView` variable. The `annotation` parameter is assigned to the
    `annotation` property of `annotationView`.
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`if` 语句检查是否有任何现有的注释最初是可见的，但现在不再在屏幕上。如果有，那个注释的 `MKAnnotationView` 实例可以被重用，并分配给
    `annotationView` 变量。`annotation` 参数被分配给 `annotationView` 的 `annotation` 属性。'
- en: '[PRE37]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The `else` clause is executed if there are no existing `MKAnnotationView` instances
    that can be reused. A new `MKAnnotationView` instance is created with the reuse
    identifier specified earlier (`custompin`). The `MKAnnotationView` instance is
    configured with a callout. When you tap a pin on the map, a callout bubble will
    appear showing the title (restaurant name), subtitle (cuisines), and a button.
    You'll program the button later to present the `MKAnnotationView` instance that
    you just created to display extra information in a callout bubble and sets the
    custom image to the `custom-annotation` image stored in `Assets.xcassets`. When
    adding a custom image, the annotation uses the center of the image as the pin
    point, so the `centerOffset` property is used to set the correct location of the
    pin point, at the tip of the pin.
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果没有可重用的现有`MKAnnotationView`实例，将执行`else`子句。使用之前指定的重用标识符（`custompin`）创建一个新的`MKAnnotationView`实例。通过调用配置`MKAnnotationView`实例。当你点击地图上的标记时，会出现一个调用气泡，显示标题（餐厅名称）、副标题（菜系）和一个按钮。你将在稍后编程按钮以呈现你刚刚创建的`MKAnnotationView`实例，在调用气泡中显示额外信息，并将自定义图像设置为存储在`Assets.xcassets`中的`custom-annotation`图像。当添加自定义图像时，注释使用图像的中心作为标记点，因此使用`centerOffset`属性设置标记点的正确位置，位于标记的尖端。
- en: '[PRE38]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The custom `MKAnnotationView` instance is returned.
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回自定义的`MKAnnotationView`实例。
- en: 'Build and run your app. You can see the custom pins on your map:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行你的应用。你可以在地图上看到自定义的标记：
- en: '![Figure 16.9: iOS Simulator showing custom MKAnnotationView instances'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '![图16.9：iOS模拟器显示自定义MKAnnotationView实例'
- en: '](img/Figure_16.09_B17469.jpg)'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_16.09_B17469.jpg)'
- en: 'Figure 16.9: iOS Simulator showing custom MKAnnotationView instances'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.9：iOS模拟器显示自定义MKAnnotationView实例
- en: You have configured the `MKAnnotationView` instances using the data obtained
    from the `MapDataManager` class. Tapping a pin displays a callout bubble showing
    the restaurant name and the cuisines it offers. Tapping the button in the callout
    bubble doesn't do anything yet. You'll configure the button to present the **Restaurant
    Detail** screen in the next section.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经使用从`MapDataManager`类获取的数据配置了`MKAnnotationView`实例。点击标记会显示一个调用气泡，显示餐厅名称和它提供的菜系。调用气泡中的按钮目前不起作用。你将在下一节中配置按钮以呈现**餐厅详情**屏幕。
- en: Going from the Map screen to the Restaurant Detail screen
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从地图屏幕切换到餐厅详情屏幕
- en: The `MKAnnotationView` instances, and tapping one displays a callout bubble
    showing restaurant details. The button in the callout bubble doesn't work, though.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`MKAnnotationView`实例，点击一个会显示一个调用气泡，显示餐厅详情。调用气泡中的按钮目前不起作用。'
- en: Inside the `resources` folder that you downloaded earlier, you'll find completed
    storyboards named `RestaurantDetail.Storyboard`, `PhotoFilter.Storyboard`, and
    `ReviewForm.Storyboard`, which you'll add to your project. These storyboards contain
    the scenes for the **Restaurant Detail** screen, the **Photo Filter** screen and
    the **Review Form** screen.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在你之前下载的`resources`文件夹中，你会找到名为`RestaurantDetail.Storyboard`、`PhotoFilter.Storyboard`和`ReviewForm.Storyboard`的完成的故事板，你需要将这些故事板添加到你的项目中。这些故事板包含了**餐厅详情**屏幕、**照片滤镜**屏幕和**评论表单**屏幕的场景。
- en: To present the `RestaurantDetail` storyboard file to it. You'll do this in the
    next section.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 将`RestaurantDetail`故事板文件呈现出来。你将在下一节中这样做。
- en: Creating and configuring a storyboard reference
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建和配置故事板引用
- en: 'There are a lot of scenes in the `Main` storyboard file. As your project grows,
    you''ll find it more challenging to keep track of all the scenes in your app.
    One way to manage this is to create additional storyboard files, and use storyboard
    references to link them. You will add `RestaurantDetail`, `PhotoFilter` and `ReviewForm`
    storyboard files to your project, and you will link the `Main` storyboard file
    to the `RestaurantDetail` storyboard file using a storyboard reference. Follow
    these steps to add a storyboard reference to your project:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '`Main`故事板文件中有许多场景。随着你的项目增长，你会发现跟踪应用中的所有场景更具挑战性。管理这些场景的一种方法是为它们创建额外的故事板文件，并使用故事板引用来链接它们。你将添加`RestaurantDetail`、`PhotoFilter`和`ReviewForm`故事板文件到你的项目中，并且你将使用故事板引用将`Main`故事板文件链接到`RestaurantDetail`故事板文件。按照以下步骤将故事板引用添加到你的项目中：'
- en: Open the `Main` storyboard file, and click the Library button.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Main`故事板文件，并点击库按钮。
- en: Type `story` in the filter field. A **Storyboard Reference** object will appear
    in the results.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在过滤器字段中输入`story`。一个**Storyboard Reference**对象将出现在结果中。
- en: 'Drag the `Main` storyboard file next to the **Map View Controller Scene**:![Figure
    16.10: Library with Storyboard Reference object selected'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Main`故事板文件拖动到**地图视图控制器场景**旁边：![图16.10：选择Storyboard Reference对象的库
- en: '](img/Figure_16.10_B17469.jpg)'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_16.10_B17469.jpg)'
- en: 'Figure 16.10: Library with Storyboard Reference object selected'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图16.10：选择Storyboard Reference对象的库
- en: 'Open the `resources` folder that you downloaded earlier, and locate the three
    storyboard files that you will add to your project in it (`RestaurantDetail.storyboard`,
    `PhotoFilter.storyboard`, and `ReviewForm.storyboard`):![Figure 16.11: Contents
    of resources folder'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您之前下载的`resources`文件夹，并找到您将添加到项目中的三个故事板文件（`RestaurantDetail.storyboard`、`PhotoFilter.storyboard`和`ReviewForm.storyboard`）：![图16.11：资源文件夹的内容
- en: '](img/Figure_16.11_B17469.jpg)'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_16.11_B17469.jpg)'
- en: 'Figure 16.11: Contents of resources folder'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图16.11：资源文件夹的内容
- en: 'In the Project navigator, create a new folder inside your `LetsEat` folder
    named `RestaurantDetail` and copy the `RestaurantDetail` storyboard file into
    it:![Figure 16.12: Project navigator showing RestaurantDetail folder and contents'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中，在您的`LetsEat`文件夹内创建一个名为`RestaurantDetail`的新文件夹，并将`RestaurantDetail`故事板文件复制到其中：![图16.12：项目导航器显示RestaurantDetail文件夹及其内容
- en: '](img/Figure_16.12_B17469.jpg)'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_16.12_B17469.jpg)'
- en: 'Figure 16.12: Project navigator showing RestaurantDetail folder and contents'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图16.12：项目导航器显示RestaurantDetail文件夹及其内容
- en: 'Create a new folder inside your `LetsEat` folder named `ReviewForm` and copy
    the `ReviewForm` storyboard file into it, and create a new folder inside your
    `LetsEat` folder named `PhotoFilter` and copy the `PhotoFilter` storyboard file
    into it:![Figure 16.13: Project navigator showing PhotoFilter and ReviewForm folders
    and contents'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的`LetsEat`文件夹内创建一个名为`ReviewForm`的新文件夹，并将`ReviewForm`故事板文件复制到其中，然后在您的`LetsEat`文件夹内创建一个名为`PhotoFilter`的新文件夹，并将`PhotoFilter`故事板文件复制到其中：![图16.13：项目导航器显示PhotoFilter和ReviewForm文件夹及其内容
- en: '](img/Figure_16.13_B17469.jpg)'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_16.13_B17469.jpg)'
- en: 'Figure 16.13: Project navigator showing PhotoFilter and ReviewForm folders
    and contents'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图16.13：项目导航器显示PhotoFilter和ReviewForm文件夹及其内容
- en: 'Now you''ll assign the `RestaurantDetail` storyboard file to the storyboard
    reference you added earlier to your project. Click the `Main` storyboard file,
    select the storyboard reference you added earlier, and click the Attributes inspector
    button. Under `RestaurantDetail`:![Figure 16.14: Attributes inspector settings
    for RestaurantDetail storyboard reference'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您将为之前添加到项目中的Storyboard Reference分配`RestaurantDetail`故事板文件。点击`Main`故事板文件，选择您之前添加的故事板引用，并点击属性检查器按钮。在`RestaurantDetail`下：![图16.14：RestaurantDetail故事板引用的属性检查器设置
- en: '](img/Figure_16.14_B17469.jpg)'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_16.14_B17469.jpg)'
- en: 'Figure 16.14: Attributes inspector settings for RestaurantDetail storyboard
    reference'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图16.14：RestaurantDetail故事板引用的属性检查器设置
- en: '*Ctrl + Drag* from the `MKAnnotationView` instance''s callout bubble button
    in the **Map** screen.'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**地图**屏幕中`MKAnnotationView`实例的呼出气泡按钮处*Ctrl + 拖动*。
- en: 'You will set an identifier for this segue. Later you''ll add a method that
    performs the segue with this identifier when the callout bubble button is tapped.
    Select the segue connecting the **Map View Controller Scene** to the storyboard
    reference:![Figure 16.16: Segue between Map View Controller Scene and RestaurantDetail
    storyboard reference'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将为这个转场设置一个标识符。稍后，当呼出气泡按钮被点击时，您将添加一个使用此标识符执行转场的方法。选择连接**地图视图控制器场景**到故事板引用的转场：![图16.16：地图视图控制器场景和RestaurantDetail故事板引用之间的转场
- en: '](img/Figure_16.16_B17469.jpg)'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_16.16_B17469.jpg)'
- en: 'Figure 16.16: Segue between Map View Controller Scene and RestaurantDetail
    storyboard reference'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图16.16：地图视图控制器场景和RestaurantDetail故事板引用之间的转场
- en: 'In the Attributes inspector, under `showDetail`:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性检查器中，在`showDetail`下：
- en: '![Figure 16.17: Attributes inspector settings for showDetail segue'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '![图16.17：showDetail转场的属性检查器设置'
- en: '](img/Figure_16.17_B17469.jpg)'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_16.17_B17469.jpg)'
- en: 'Figure 16.17: Attributes inspector settings for showDetail segue'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.17：showDetail转场的属性检查器设置
- en: You have now linked the view controller scene for the **Map** screen with the
    view controller scene for the **Restaurant Detail** screen using a segue. In the
    next section, you'll implement a method to present the **Restaurant Detail** screen
    when the callout bubble button is tapped.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经使用转场将**地图**屏幕的视图控制器场景与**餐厅详情**屏幕的视图控制器场景链接起来。在下一节中，您将实现一个方法，当呼出气泡按钮被点击时，显示**餐厅详情**屏幕。
- en: Performing the showDetail segue
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行showDetail转场
- en: 'You''ve linked the view controller scene for the `showDetail`. Now you need
    a method to perform that segue, but before you implement it, you''ll create an
    enumeration that contains all the segue identifiers for this project. This reduces
    potential errors by enabling autocompletion when you type the segue identifiers
    later in your code. Follow these steps:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经链接了`showDetail`的视图控制器场景。现在你需要一个方法来执行这个转换，但在实现它之前，你将创建一个包含此项目所有转换标识符的枚举。这通过在你稍后代码中输入转换标识符时启用自动完成来减少潜在的错误。按照以下步骤操作：
- en: Right-click on the `Misc` folder inside the `LetsEat` folder and choose **New
    File**.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`LetsEat`文件夹内的`Misc`文件夹上右键点击并选择**新建文件**。
- en: '**iOS** should already be selected. Choose **Swift File** and then click **Next**.'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS**应该已经选中。选择**Swift文件**然后点击**下一步**。'
- en: Name this file `Segue`. Click `Segue` file appears in the Project navigator.
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件命名为`Segue`。点击后，`Segue`文件将出现在项目导航器中。
- en: 'Add the following after the `import` statement to declare and define the `Segue`
    enumeration:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`import`语句之后添加以下内容以声明和定义`Segue`枚举：
- en: '[PRE39]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Note that the `Segue` enum's type is `String`, so the raw values for each case
    are strings. For example, the raw value for case `showDetail` is `"showDetail"`.
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，`Segue`枚举的类型是`String`，因此每个情况的原始值都是字符串。例如，`showDetail`情况的原始值是`"showDetail"`。
- en: 'Now you can add the method to perform the `showDetail` segue when the callout
    button is tapped. Click the `MapViewController` file in the Project navigator
    and add the following method after the `setupMap(_:)` method:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以添加一个方法，当点击呼出气泡按钮时执行`showDetail`转换。在项目导航器中点击`MapViewController`文件，并在`setupMap(_:)`方法之后添加以下方法：
- en: '[PRE40]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '`mapView(_:annotationView:calloutAccessoryControlTapped:)` is another method
    specified in the `MKMapViewDelegate` protocol. It is triggered when the user taps
    the callout bubble button.'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapView(_:annotationView:calloutAccessoryControlTapped:)`是`MKMapViewDelegate`协议中指定的一种方法。当用户点击呼出气泡按钮时，它会触发。'
- en: '`self.performSegue(withIdentifier: Segue.showDetail.rawValue, sender: self)`
    performs the segue with the `"showDetail"` identifier, which presents the **Restaurant
    Detail** screen.'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`self.performSegue(withIdentifier: Segue.showDetail.rawValue, sender: self)`使用`"showDetail"`标识符执行转换，显示**餐厅详情**屏幕。'
- en: 'Build and run your project. On the **Map** screen, tap a pin and tap the button
    inside the callout bubble:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行你的项目。在**地图**屏幕上，点击一个标记并点击呼出气泡内的按钮：
- en: '![Figure 16.18: iOS Simulator showing callout bubble button'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '![图16.18：iOS模拟器显示呼出气泡按钮'
- en: '](img/Figure_16.18_B17469.jpg)'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_16.18_B17469.jpg)'
- en: 'Figure 16.18: iOS Simulator showing callout bubble button'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.18：iOS模拟器显示呼出气泡按钮
- en: 'The new **Restaurant Detail** screen appears, but it does not contain any details
    about the restaurant:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 新的**餐厅详情**屏幕出现，但它不包含任何关于餐厅的详细信息：
- en: '![Figure 16.19: iOS Simulator showing Restaurant Detail screen'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '![图16.19：iOS模拟器显示餐厅详情屏幕'
- en: '](img/Figure_16.19_B17469.jpg)'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_16.19_B17469.jpg)'
- en: 'Figure 16.19: iOS Simulator showing Restaurant Detail screen'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.19：iOS模拟器显示餐厅详情屏幕
- en: You will make the **Restaurant Detail** screen display the details of a restaurant
    in [*Chapter 18*](B17469_18_Final_VK_ePub.xhtml#_idTextAnchor299)*, Displaying
    Data in a Static Table View*, but for now, let's just pass the data about the
    selected restaurant to the **Restaurant Detail** screen's view controller and
    print it to the Debug area. You will do this in the next section.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使**餐厅详情**屏幕显示在第[*第18章*](B17469_18_Final_VK_ePub.xhtml#_idTextAnchor299)*，静态表格视图中的数据展示*中餐厅的详细信息，但现在，让我们只是将所选餐厅的数据传递到**餐厅详情**屏幕的视图控制器，并将其打印到调试区域。你将在下一节中这样做。
- en: Passing data to the Restaurant Detail screen
  id: totrans-316
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将数据传递到餐厅详情屏幕
- en: 'The `MKAnnotationView` instances that display callout bubbles when tapped.
    When the button in the callout bubble is tapped, the `RestaurantItem` instance
    to the view controller for the **Restaurant Detail** screen, which has not been
    created yet. Follow these steps to create it now:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击时显示呼出气泡的`MKAnnotationView`实例。当呼出气泡中的按钮被点击时，将`RestaurantItem`实例传递到尚未创建的**餐厅详情**屏幕的视图控制器。按照以下步骤现在创建它：
- en: Right-click the `RestaurantDetail` folder and select **New File**.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`RestaurantDetail`文件夹上右键点击并选择**新建文件**。
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class** and then click
    **Next**.'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS**应该已经选中。选择**Cocoa Touch类**然后点击**下一步**。'
- en: 'Configure the file as follows:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式配置文件：
- en: '`RestaurantDetailViewController`'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`RestaurantDetailViewController`'
- en: '`UITableViewController`'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`UITableViewController`'
- en: '`Swift`'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Swift`'
- en: Click **Next**.
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击**下一步**。
- en: Click `RestaurantDetailViewController` file appears in the Project navigator.
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`RestaurantDetailViewController`文件出现在项目导航器中。
- en: 'Remove all the commented code. Your file should look like this:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除所有注释代码。你的文件应该看起来像这样：
- en: '[PRE41]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Declare a property named `selectedRestaurant` before the `viewDidLoad()` method:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`viewDidLoad()`方法之前声明一个名为`selectedRestaurant`的属性：
- en: '[PRE42]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'This property holds the `RestaurantItem` instance that will be passed to the
    `RestaurantDetailViewController` instance from the `MapViewController` instance:'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个属性保存了将被从`MapViewController`实例传递到`RestaurantDetailViewController`实例的`RestaurantItem`实例：
- en: 'Add the following code inside the `viewDidLoad()` method before the closing
    curly brace to print the `RestaurantItem` instance contents to the Debug area:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`viewDidLoad()`方法中关闭花括号之前添加以下代码，以将`RestaurantItem`实例的内容打印到调试区域：
- en: '[PRE43]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: This confirms that the `MapViewController` instance has successfully passed
    the `RestaurantItem` instance to the `RestaurantDetailViewController` instance.
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这确认了`MapViewController`实例已成功将`RestaurantItem`实例传递给`RestaurantDetailViewController`实例。
- en: 'Verify your file looks like the following:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认你的文件看起来像以下这样：
- en: '[PRE44]'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Click the `RestaurantDetail` storyboard file inside the `RestaurantDetail`
    folder. Select the `RestaurantDetailViewController`:![Figure 16.20: Identity inspector
    settings for Restaurant Detail View Controller scene'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在`RestaurantDetail`文件夹内点击`RestaurantDetail`故事板文件。选择`RestaurantDetailViewController`：![Figure
    16.20: Identity inspector settings for Restaurant Detail View Controller scene'
- en: '](img/Figure_16.20_B17469.jpg)'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_16.20_B17469.jpg]'
- en: 'Figure 16.20: Identity inspector settings for Restaurant Detail View Controller
    scene'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图16.20：餐厅详情视图控制器场景的标识检查器设置
- en: Note the scene name will change to **Restaurant Detail View Controller Scene**.
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意场景名称将更改为**餐厅详情视图控制器场景**。
- en: Click the `MapViewController` file in the Project navigator.
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击`MapViewController`文件。
- en: 'Add a property to hold a `RestaurantItem` instance after the `private let manager
    = MapDataManager()` statement:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`private let manager = MapDataManager()`语句之后添加一个属性来保存`RestaurantItem`实例：
- en: '[PRE45]'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Add the following code into the `func mapView(_:annotationView:calloutAccessoryControlTapped:)`
    method, before the `self.performSegue(withIdentifier:sender:)` method call:'
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`func mapView(_:annotationView:calloutAccessoryControlTapped:)`方法中，在调用`self.performSegue(withIdentifier:sender:)`方法之前添加以下代码：
- en: '[PRE46]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'To pass the `RestaurantItem` instance from the `MapViewController` instance
    to the `RestaurantDetailViewController` instance, you''ll override the `UIViewController`
    method named `prepare(for:sender:)`. Type in the following code after `viewDidLoad()`:'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要从`MapViewController`实例将`RestaurantItem`实例传递到`RestaurantDetailViewController`实例，你需要重写名为`prepare(for:sender:)`的`UIViewController`方法。在`viewDidLoad()`之后输入以下代码：
- en: '[PRE47]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The `prepare(for:sender:)` method is executed by a view controller before transitioning
    to another view controller. In this case, this method is called before the `showDetail`,
    which it is in this case, the `showRestaurantDetail(segue:)` method is called.
    This method will set the `selectedRestaurant` property for the `RestaurantDetailViewController`
    instance. You'll see an error because `showRestaurantDetail(segue:)` has not been
    created yet.
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在切换到另一个视图控制器之前，视图控制器会执行`prepare(for:sender:)`方法。在这种情况下，这个方法在调用`showDetail`之前被调用，在这种情况下，`showRestaurantDetail(segue:)`方法被调用。这个方法将为`RestaurantDetailViewController`实例设置`selectedRestaurant`属性。你会看到一个错误，因为`showRestaurantDetail(segue:)`还没有被创建。
- en: 'Add the following code after the `setupMap(_:)` method to implement `showRestaurantDetail(segue:)`:'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`setupMap(_:)`方法之后添加以下代码以实现`showRestaurantDetail(segue:)`：
- en: '[PRE48]'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: This checks to make sure the segue destination is a `RestaurantDetailViewController`
    instance. If it is, a temporary constant, `restaurant`, is assigned the `selectedRestaurant`
    property in the `MapViewController` instance. `restaurant` is then assigned to
    the `selectedRestaurant` property in the `RestaurantDetailViewController` instance.
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这确保了过渡目标是`RestaurantDetailViewController`实例。如果是，临时常量`restaurant`被分配了`MapViewController`实例中的`selectedRestaurant`属性。然后`restaurant`被分配给`RestaurantDetailViewController`实例中的`selectedRestaurant`属性。
- en: In other words, the restaurant details that you get from the `RestaurantItem`
    instance is passed to the `RestaurantDetailViewController` instance.
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 换句话说，从`RestaurantItem`实例获取的餐厅详情被传递到`RestaurantDetailViewController`实例。
- en: 'Build and run your app. In the **Map** screen, tap a pin and then tap the callout
    button. The **Restaurant Detail** screen will appear. Click the Report navigator
    and click the first entry as shown. You should see the restaurant details in the
    Editor area:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行你的应用。在 **地图** 屏幕上，点击一个标记并然后点击呼叫按钮。**餐厅详情** 屏幕将出现。点击报告导航器并点击如图所示的第一个条目。你应该在编辑器区域看到餐厅的详细信息：
- en: '![Figure 16.21: Report navigator showing contents of first entry'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 16.21：报告导航器显示第一个条目的内容'
- en: '](img/Figure_16.21_B17469.jpg)'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_16.21_B17469.jpg]'
- en: 'Figure 16.21: Report navigator showing contents of first entry'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.21：报告导航器显示第一个条目的内容
- en: You have added the storyboard for the `RestaurantDetailViewController` instance
    now has the data from the `RestaurantItem` instance that was selected on the **Map**
    screen. Great! You'll configure the **Restaurant Detail** screen to display that
    data in the next chapter.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经为 `RestaurantDetailViewController` 实例添加了故事板，现在它有了在 **地图** 屏幕上选择的 `RestaurantItem`
    实例的数据。太好了！你将在下一章配置 **餐厅详情** 屏幕以显示这些数据。
- en: You have done a lot of work in this chapter, so before you go on to the next
    chapter, let's organize the code that you have written to make it easier to understand.
    You will use extensions to do so in the next section.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 你在本章中做了很多工作，所以在你进入下一章之前，让我们组织你编写的代码，使其更容易理解。你将在下一节中使用扩展来完成此操作。
- en: Organizing your code
  id: totrans-358
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织你的代码
- en: As your programs become more complex, you will use extensions (covered in [*Chapter
    8*](B17469_08_Final_VK_ePub.xhtml#_idTextAnchor123)*, Protocols, Extensions, and
    Error Handling*) to organize your code. Extensions can help you to make code more
    readable and avoid clutter.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你的程序变得更加复杂，你将使用扩展（在第 [*第8章*](B17469_08_Final_VK_ePub.xhtml#_idTextAnchor123)*，协议、扩展和错误处理）来组织你的代码。扩展可以帮助你使代码更易于阅读并避免杂乱。
- en: 'You will organize four classes: `ExploreViewController`, `RestaurantListViewController`,
    `LocationViewController`, and `MapViewController`. You will segregate blocks of
    related code using extensions. Let''s begin with the `ExploreViewController` class
    in the next section.'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 你将组织四个类：`ExploreViewController`、`RestaurantListViewController`、`LocationViewController`
    和 `MapViewController`。你将使用扩展将相关代码块分离。让我们从下一节中的 `ExploreViewController` 类开始。
- en: Refactoring the ExploreViewController class
  id: totrans-361
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重构 `ExploreViewController` 类
- en: 'You will divide the code in the `ExploreViewController` file into distinct
    sections using extensions. Follow these steps:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用扩展将 `ExploreViewController` 文件中的代码划分为不同的部分。按照以下步骤操作：
- en: 'Click the `ExploreViewController` file in the Project navigator. After the
    final curly brace, add the following:'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击 `ExploreViewController` 文件。在最后的括号闭合之后，添加以下内容：
- en: '[PRE49]'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Here, you are creating two extensions. The first extension will be private,
    which means the contents of this extension are only accessible to the `ExploreViewController`
    class. The second extension will contain all of the `UICollectionViewDataSource`
    methods.
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，你正在创建两个扩展。第一个扩展将是私有的，这意味着这个扩展的内容只能被 `ExploreViewController` 类访问。第二个扩展将包含所有的
    `UICollectionViewDataSource` 方法。
- en: 'You''ll get an error because `UICollectionViewDataSource` appears in two places.
    Delete `UICollectionViewDataSource` from the class declaration at the top of the
    file. Your class declaration should look like this:'
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会得到一个错误，因为 `UICollectionViewDataSource` 出现在两个地方。从文件顶部的类声明中删除 `UICollectionViewDataSource`。你的类声明应该看起来像这样：
- en: '[PRE50]'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Move all the `UICollectionViewDataSource` methods into the second extension.
    It should look like this:'
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有 `UICollectionViewDataSource` 方法移动到第二个扩展中。它应该看起来像这样：
- en: '[PRE51]'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Add the `initialize()` method inside the `private` extension:'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `private` 扩展内添加 `initialize()` 方法：
- en: '[PRE52]'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Move the `unwindLocationCancel(segue:)` method inside the `private` extension
    as well.
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `unwindLocationCancel(segue:)` 方法也移动到 `private` 扩展内部。
- en: 'Verify that the private extension looks like this:'
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认私有扩展看起来如下：
- en: '[PRE53]'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Finally, modify `viewDidLoad()` as follows:'
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，按照以下方式修改 `viewDidLoad()`：
- en: '[PRE54]'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The benefits of segregating your code in this way may not seem obvious now,
    but as your classes become more complex, you will find it is easier to look for
    a specific method and to maintain your code. Before you do the same to the other
    files, let's see how the `// MARK:` syntax is used in the next section.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方式分离代码的好处现在可能并不明显，但随着你的类变得更加复杂，你会发现查找特定方法以及维护代码变得更加容易。在你对其他文件做同样操作之前，让我们看看下一节中
    `// MARK:` 语法是如何使用的。
- en: 'Using the // MARK: syntax'
  id: totrans-378
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 `// MARK:` 语法
- en: 'The `// MARK:` syntax is used to navigate easily between different parts of
    your code. Let''s see what it does:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '`// MARK:` 语法用于在代码的不同部分之间轻松导航。让我们看看它做了什么：'
- en: 'Look at the path that is visible just under the Toolbar and click on the last
    part as shown:![Figure 16.22: Editor area showing path'
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看位于工具栏下方可见的路径，并点击显示的部分：![图 16.22：显示路径的编辑区域](img/Figure_16.22_B17469.jpg)
- en: '](img/Figure_16.22_B17469.jpg)'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_16.22_B17469.jpg](img/Figure_16.22_B17469.jpg)'
- en: 'Figure 16.22: Editor area showing path'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 16.22：显示路径的编辑区域
- en: 'A menu is displayed, and you will see both `// MARK:` syntax. This enables
    you to easily jump to these sections:'
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将显示一个菜单，你将看到 `// MARK:` 语法。这使你能够轻松跳转到这些部分：
- en: '![Figure 16.23: Path menu with Private extension selected'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 16.23：选择 Private 扩展的路径菜单](img/Figure_16.23_B17469.jpg)'
- en: '](img/Figure_16.23_B17469.jpg)'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_16.23_B17469.jpg](img/Figure_16.23_B17469.jpg)'
- en: 'Figure 16.23: Path menu with Private extension selected'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.23：选择 Private 扩展的路径菜单
- en: You have organized the `ExploreViewController` class, so let's do the `RestaurantListViewController`
    class next by refactoring it and adding extensions.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经组织了 `ExploreViewController` 类，接下来让我们通过重构并添加扩展来处理 `RestaurantListViewController`
    类。
- en: Refactoring the RestaurantListViewController class
  id: totrans-388
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重构 `RestaurantListViewController` 类
- en: 'You will add two extensions to the `RestaurantListViewController` class, similar
    to those you added to the `ExploreViewController` class. Follow these steps:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 你将为 `RestaurantListViewController` 类添加两个扩展，类似于你在 `ExploreViewController` 类中添加的。按照以下步骤操作：
- en: 'Click the `RestaurantListViewController` file in the Project navigator. After
    the final curly brace, add the following:'
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击 `RestaurantListViewController` 文件。在最后的括号闭合之后，添加以下内容：
- en: '[PRE55]'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: You'll put private methods for the `RestaurantListViewController` class in the
    first extension, and all the `UICollectionViewDataSource` methods in the second
    extension.
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将在第一个扩展中放置 `RestaurantListViewController` 类的私有方法，并在第二个扩展中放置所有的 `UICollectionViewDataSource`
    方法。
- en: 'Delete `UICollectionViewDataSource` from the class declaration at the top of
    the file. Your class declaration should look like this:'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从文件顶部的类声明中删除 `UICollectionViewDataSource`。你的类声明应该看起来像这样：
- en: '[PRE56]'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Move all the `UICollectionViewDataSource` methods into the second extension.
    It should look like this when done:'
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有的 `UICollectionViewDataSource` 方法移动到第二个扩展中。完成后的样子应该是这样的：
- en: '[PRE57]'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: You are done organizing the `RestaurantListViewController` class, so let's clean
    up the `LocationViewController` class in the next section.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经完成了 `RestaurantListViewController` 类的组织，接下来让我们在下一节中清理 `LocationViewController`
    类。
- en: Refactoring the LocationViewController class
  id: totrans-398
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重构 `LocationViewController` 类
- en: 'As you did before, you will add two extensions to the `LocationViewController`
    file. Follow these steps:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 如同之前一样，你将在 `LocationViewController` 文件中添加两个扩展。按照以下步骤操作：
- en: 'Click the `LocationViewController` file in the Project navigator. After the
    final curly brace, add the following:'
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击 `LocationViewController` 文件。在最后的括号闭合之后，添加以下内容：
- en: '[PRE58]'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: The first extension will contain private methods for the `LocationViewController`
    class. The second extension will contain all the `UITableViewDataSource` methods.
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第一个扩展将包含 `LocationViewController` 类的私有方法。第二个扩展将包含所有的 `UITableViewDataSource`
    方法。
- en: 'Delete `UITableViewDataSource` from the class declaration at the top of the
    file. Your class declaration should look like this:'
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从文件顶部的类声明中删除 `UITableViewDataSource`。你的类声明应该看起来像这样：
- en: '[PRE59]'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Move all the `UITableViewDataSource` methods into the second extension. It
    should look like this:'
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有的 `UITableViewDataSource` 方法移动到第二个扩展中。完成后的样子应该是这样的：
- en: '[PRE60]'
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Just like you did in the `ExploreViewController` class, you will create an
    `initialize()` method inside the first extension, and put in it everything you
    need to initialize the `LocationViewController` class there. Add the following
    inside the first extension:'
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就像你在 `ExploreViewController` 类中所做的那样，你将在第一个扩展中创建一个 `initialize()` 方法，并将初始化 `LocationViewController`
    类所需的所有内容放入其中。在第一个扩展中添加以下内容：
- en: '[PRE61]'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Modify `viewDidLoad()` as follows to call the `initialize()` method:'
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式修改 `viewDidLoad()` 方法以调用 `initialize()` 方法：
- en: '[PRE62]'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: You are done organizing the `LocationViewController` class, so let's clean up
    the `MapViewController` class in the next section.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经完成了 `LocationViewController` 类的组织，接下来让我们在下一节中清理 `MapViewController` 类。
- en: Refactoring the MapViewController class
  id: totrans-412
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重构 `MapViewController` 类
- en: 'As you did before for the other classes, you will add two extensions to the
    `MapViewController` class. Follow these steps:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 如同之前对其他类所做的，你将为 `MapViewController` 类添加两个扩展。按照以下步骤操作：
- en: 'Click the `MapViewController` file in the Project navigator. After the final
    curly brace, add the following:'
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击 `MapViewController` 文件。在最后的括号闭合之后，添加以下内容：
- en: '[PRE63]'
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: The first extension will contain private methods for the `MapViewController`
    class. The second one will contain all the `MKMapViewDelegate` methods.
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第一个扩展将包含 `MapViewController` 类的私有方法。第二个将包含所有的 `MKMapViewDelegate` 方法。
- en: 'Delete `MKMapViewDelegate` from the class declaration at the top of the file.
    Your class definition should look like this:'
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从文件顶部的类声明中删除 `MKMapViewDelegate`。你的类定义应该看起来像这样：
- en: '[PRE64]'
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Move all the `MKMapViewDelegate` methods into the second extension. It should
    look like this:'
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有 `MKMapViewDelegate` 方法移动到第二个扩展中。它应该看起来像这样：
- en: '[PRE65]'
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Move the `initialize()`, `setupMap(_:)`, and `showRestaurantDetail(segue:)`
    methods into the first extension. It should look like this:'
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `initialize()`, `setupMap(_:)`, 和 `showRestaurantDetail(segue:)` 方法移动到第一个扩展中。它应该看起来像这样：
- en: '[PRE66]'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: You have organized all four view controllers (`ExploreViewController`, `RestaurantListViewController`,
    `LocationViewController`, and `MapViewController`) using extensions. Great job!
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经使用扩展组织了所有四个视图控制器（`ExploreViewController`, `RestaurantListViewController`,
    `LocationViewController`, 和 `MapViewController`）。做得好！
- en: Summary
  id: totrans-424
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you created a new class, `RestaurantItem`, that conforms to
    the `MKAnnotation` protocol. Next, you created `MapDataManager`, a data manager
    class that loads restaurant data from a `.plist` file and puts it into an array
    of `RestaurantItem` instances. You created the `DataManager` protocol and refactored
    both `MapDataManager` and `ExploreDataManager` classes to use this protocol. After
    that, you created the `MapViewController` class, a view controller for the `RestaurantDetailViewController`
    class, a view controller for the `MapViewController` instance. At this point,
    you know how to create objects that conform to the `MKAnnotation` protocol, how
    to add them to a map view, and how to create custom `MKAnnotationViews`, which
    enables you to add annotated maps to your own projects.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你创建了一个新的类，`RestaurantItem`，它符合 `MKAnnotation` 协议。接下来，你创建了 `MapDataManager`，一个数据管理类，它从
    `.plist` 文件中加载数据并将其放入 `RestaurantItem` 实例的数组中。你创建了 `DataManager` 协议，并将 `MapDataManager`
    和 `ExploreDataManager` 类重构为使用此协议。之后，你创建了 `MapViewController` 类，它是 `RestaurantDetailViewController`
    类的视图控制器，也是 `MapViewController` 实例的视图控制器。此时，你知道如何创建符合 `MKAnnotation` 协议的对象，如何将它们添加到地图视图中，以及如何创建自定义的
    `MKAnnotationViews`，这使你能够将标注地图添加到自己的项目中。
- en: You also added storyboard files to your project, learned how to use storyboard
    references and organized your view controller classes (`ExploreViewController`,
    `RestaurantListViewController`, `LocationViewController`, and `MapViewController`)
    using extensions. This will help you organize storyboards and code for large projects,
    making it easier to read and maintain.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 你还向项目中添加了故事板文件，学习了如何使用故事板引用，并使用扩展组织了你的视图控制器类（`ExploreViewController`, `RestaurantListViewController`,
    `LocationViewController`, 和 `MapViewController`）。这将帮助你组织大型项目的故事板和代码，使其更容易阅读和维护。
- en: In the next chapter, you'll learn about **JSON** files, and how to load data
    from them so the **Restaurant List** and **Map** screens can display details about
    a particular restaurant.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习关于 **JSON** 文件的知识，以及如何从它们中加载数据，以便 **餐厅列表** 和 **地图** 屏幕可以显示特定餐厅的详细信息。
