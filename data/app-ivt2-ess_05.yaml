- en: Chapter 5. Building an Event App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。构建活动应用程序
- en: 'Now that we''ve successfully created a game app, let''s try something new!
    In this chapter, you will learn to use more components and blocks—this time, to
    create an event app. This type of app is helpful to organize an event where you
    will gather a group of people for a specific activity, such as a party, book club,
    outing, or meeting. In building this type of app, you will learn how to do the
    following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经成功创建了一个游戏应用程序，让我们尝试一些新的东西！在本章中，您将学习使用更多组件和块——这次是为了创建一个活动应用程序。这种应用程序有助于组织一个您将聚集一群人进行特定活动的事件，例如派对、读书俱乐部、外出或会议。在构建此类应用程序时，您将学习以下内容：
- en: Include images
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含图像
- en: Create a navigation menu of buttons
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个按钮导航菜单
- en: Add multiple screens
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加多个屏幕
- en: Use multiple labels
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多个标签
- en: Set up a map feature
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置地图功能
- en: We are transitioning into a beginner-intermediate level of app-making, so you
    will discover that some features in this app require multiple steps. For example,
    in this chapter, we will be setting up the user interface for the RSVP form and
    the Guest List display, but we will actually be creating the database and coding
    the blocks for these in [Chapter 6](part0041_split_000.html#173722-9c0b907946184095a315b26c8a9b12bc
    "Chapter 6. Introduction to Databases"), *Introduction to Databases*.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在过渡到初学者到中级水平的应用程序制作，因此你会发现这个应用程序中的一些功能需要多个步骤。例如，在本章中，我们将设置RSVP表单和嘉宾列表显示的用户界面，但实际上我们将在[第6章](part0041_split_000.html#173722-9c0b907946184095a315b26c8a9b12bc
    "第6章。数据库简介")中创建数据库和编写这些功能的代码，*数据库简介*。
- en: As with any tutorial, this one will most probably spark creative ideas about
    other ways you could use these components or more features you may want to add
    to the app. Be sure to jot down your jolts of inspiration in a notebook when they
    occur. We recommend saving your app building ideas and concepts in one place.
    You will amass a valuable resource for when you finish the tutorials and embark
    out on your own app development.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 就像任何教程一样，这个教程可能会激发您关于如何使用这些组件或您可能想要添加到应用程序中的更多功能的创意想法。当这些灵感出现时，请确保在笔记本上记下来。我们建议将您的应用程序构建想法和概念保存在一个地方。当您完成教程并开始自己的应用程序开发时，您将积累一个宝贵的资源。
- en: User Interface for an event app
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 活动应用程序的用户界面
- en: 'Sign into App Inventor by clicking on the **Create Apps** button on the App
    Inventor home page ([http://appinventor.mit.edu/explore/](http://appinventor.mit.edu/explore/))
    and logging into your Google account. Once you are in App Inventor, click on **Start
    new project** in the upper-left corner of the screen (the location is the same
    whether you are in the **Projects** view or in the **Designer** view). A pop-up
    window will appear (as shown in the following screenshot); type `EventApp` for
    the project name:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击App Inventor主页上的**创建应用程序**按钮([http://appinventor.mit.edu/explore/](http://appinventor.mit.edu/explore/))并登录您的Google账户来登录App
    Inventor。一旦您进入App Inventor，请点击屏幕左上角的**新建项目**（无论您是在**项目**视图还是**设计器**视图中，位置都是相同的）。将出现一个弹出窗口（如下面的截图所示）；为项目名称输入`EventApp`：
- en: '![User Interface for an event app](img/00142.jpeg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![活动应用程序的用户界面](img/00142.jpeg)'
- en: Once you click on **OK**, you will be taken into the **Designer** view.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您点击**确定**，您将被带到**设计器**视图。
- en: Setting the background image
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置背景图像
- en: In this chapter, you will gain experience in using the media tool to include
    images in your app. All the apps include some sort of artwork (logos, icons, photos,
    and so on), so learning to include image files will come in handy. We've decided
    to create a pool party for our EventApp tutorial, and to keep with the theme,
    we will set the background image for Screen1 to a water image. It is extremely
    important to note that you *cannot* use just any image, logo, or artwork from
    the Internet in your app. Artwork (this includes photography) is copyrighted,
    and if you use someone else's artwork without permission (and without paying for
    it), you will be violating copyright law. Thus, we are taking the time to explain
    how to find usable, free artwork. Google makes it easy to find artwork that is
    free to reuse or remix.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将获得使用媒体工具将图片包含到您的应用程序中的经验。所有应用程序都包含某种形式的艺术品（标志、图标、照片等），因此学习包含图像文件将非常有用。我们决定为EventApp教程创建一个泳池派对，并且为了保持主题一致，我们将Screen1的背景图像设置为水景图像。需要注意的是，您**不能**在您的应用程序中使用来自互联网的任何图像、标志或艺术品。艺术品（包括摄影）是受版权保护的，如果您未经许可（并且没有付费）使用他人的艺术品，您将违反版权法。因此，我们花时间解释如何找到可用的、免费的艺术品。Google使查找可免费重用或混搭的艺术品变得容易。
- en: Type in the topic you are looking for in the Google search bar. In this case,
    we will type in **pool**. Press return on your keyboard or click on the blue magnifying
    glass icon next to the search bar.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Google搜索栏中输入您要查找的主题。在这种情况下，我们将输入**泳池**。按键盘上的回车键或点击搜索栏旁边的蓝色放大镜图标。
- en: Google will display the results. Below the search bar, you will see a horizontal
    list of options; click on **Images**.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Google将显示结果。在搜索栏下方，您将看到一个水平选项列表；点击**图片**。
- en: 'To the far right of **Images**, click on **Search Tools**. This button will
    reveal a pop-up window with more options. They include the following:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**图片**的右侧，点击**搜索工具**。此按钮将显示一个包含更多选项的弹出窗口。它们包括以下内容：
- en: Not filtered by license *(do not use this option)*
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未按许可证过滤（不要使用此选项）
- en: Labeled for reuse with modification
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记为可修改后重用
- en: Labeled for reuse
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记为可重用
- en: Labeled for noncommercial reuse with modification
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记为非商业性再利用并可修改
- en: Labeled for noncommercial reuse
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记为非商业性再利用
- en: The following screenshot displays the Google search options for our pool image
    search:![Setting the background image](img/00143.jpeg)
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下截图显示了我们的泳池图片搜索的Google搜索选项：![设置背景图片](img/00143.jpeg)
- en: Selecting an option from the drop-down menu in this case, Labeled for reuse
    will filter the displayed results to only include images with a license for that
    particular category. Again, we cannot stress enough that it is good practice to
    pick images labeled for reuse. This way, you can use them commercially in case
    you ever decide to sell your app.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在下拉菜单中选择一个选项，在这种情况下，标记为可重用将过滤显示的结果，只包括具有该特定类别许可证的图片。我们再次强调，选择标记为可重用的图片是良好的实践。这样，如果您决定出售您的应用程序，您就可以在商业上使用它们。
- en: 'Here is a quick explanation of some helpful terms:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一些有用术语的快速解释：
- en: '**Free to use or share**: You are allowed to use or share the content if you
    do not alter it'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**免费使用或分享**：如果您不更改内容，则允许您使用或分享内容'
- en: '**Free to use, share, or modify**: You are allowed to use, share, or change
    the content'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**免费使用、分享或修改**：您可以使用、分享或更改内容'
- en: '**Commercially**: If you think you may ever want to sell an app that uses artwork
    from the Internet, make sure you choose artwork that is available for commercial
    use'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**商业用途**：如果您认为您可能希望出售使用来自互联网的艺术作品的应用程序，请确保您选择可供商业使用的艺术作品'
- en: 'You can also search online for *Creative Commons* images that come with many
    different licenses. Some photos require attribution, meaning that you are required
    to give the photographer credit by including the text: *photo by (and the name
    of the photographer)*. You do not have to give attribution if the artwork is free
    to use commercially or if it is considered in the public domain (free unrestricted
    use).'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在网上搜索带有许多不同许可证的*创意共享*图片。一些照片需要署名，这意味着您必须通过包含文本：“*照片由（以及摄影师的姓名）*”来给摄影师提供信用。如果艺术作品可以免费商业使用或被认为是公共领域（免费无限制使用），则不需要署名。
- en: Note
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more detailed information on license types, visit [https://creativecommons.org/licenses/](https://creativecommons.org/licenses/).
    An especially interesting side note: the Creative Commons organization was cofounded
    by Hal Abelson, the creator of MIT App Inventor.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取有关许可证类型的更详细信息，请访问[https://creativecommons.org/licenses/](https://creativecommons.org/licenses/)。一个特别有趣的旁注是：创意共享组织是由麻省理工学院App
    Inventor的创造者Hal Abelson共同创立的。
- en: Once you find an image you like that is free to use, download it to your computer
    (by right-clicking on the image on a Windows machine or by clicking and holding
    down the **Option** key on a Mac). You will see a pop-up window. Click on **Save
    Image As...**. This will launch another pop-up window where you can rename the
    file to something that is descriptive or memorable and choose the location on
    your computer where you would like to save the image.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您找到可以免费使用的图片，请将其下载到您的电脑上（在Windows机器上通过右键点击图片或通过在Mac上点击并按住**选项**键）。您将看到一个弹出窗口。点击**另存为...**。这将启动另一个弹出窗口，您可以在其中将文件重命名为描述性或易于记忆的名称，并选择您希望在电脑上保存图片的位置。
- en: 'Once the image is saved on your computer, there are two methods to upload a
    photo: through the **Media** panel or through the **Properties** panel—steps for
    both are exactly the same. Note that the only way to delete media files is via
    the **Media** panel.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦图片保存在您的电脑上，有两种方法可以上传照片：通过**媒体**面板或通过**属性**面板——两者的步骤完全相同。请注意，删除媒体文件的唯一方式是通过**媒体**面板。
- en: 'Since we will be adding a pool water image as the background image to our app,
    we will upload it to Screen1\. When **Screen1** is highlighted, there will be
    an option in the **Properties** panel called **BackgroundImage**. Since our screen
    is empty, it will say **None**. When you click on the text **None**, a drop-down
    menu will appear, enabling you to upload an image, as shown in the following screenshot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将在应用中添加一个泳池水图片作为背景图片，因此我们将它上传到Screen1。当**Screen1**被高亮显示时，在**属性**面板中会有一个名为**BackgroundImage**的选项。由于我们的屏幕是空的，它将显示**None**。当你点击文本**None**时，会出现一个下拉菜单，允许你上传图片，如下面的截图所示：
- en: '![Setting the background image](img/00144.jpeg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![设置背景图片](img/00144.jpeg)'
- en: 'When you click on the **Upload File…** button, a pop-up window will appear,
    enabling you to choose an image from your computer. We named ours **Pool Image.png**:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击**上传文件…**按钮时，会出现一个弹出窗口，允许你从你的电脑中选择一张图片。我们将其命名为**Pool Image.png**：
- en: '![Setting the background image](img/00145.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![设置背景图片](img/00145.jpeg)'
- en: 'Once you click on **OK**, the image name will appear on the drop-down menu
    in the **Properties** and **Media** panels and the actual image will appear on
    **Screen1** as the background image, as shown in the following screenshot (note:
    we named the image `Pool Image.png`; but when it was uploaded to App Inventor,
    it was assigned a new name: `PoolImage.png` with no spaces). If your photo isn''t
    centered, you can always adjust the **AlignHorizontal** and **AlignVertical**
    properties by choosing **Center** from the drop-down menus, as shown in the following
    screenshot:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦点击**确定**，图片名称将出现在**属性**和**媒体**面板的下拉菜单中，并且实际图片将作为背景图片出现在**Screen1**上，如下面的截图所示（注意：我们命名为`Pool
    Image.png`；但上传到App Inventor时，它被分配了一个新的名称：`PoolImage.png`，没有空格）。如果你的照片没有居中，你可以通过从下拉菜单中选择**居中**来调整**水平对齐**和**垂直对齐**属性，如下面的截图所示：
- en: '![Setting the background image](img/00146.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![设置背景图片](img/00146.jpeg)'
- en: Adding an image component
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加图片组件
- en: Next, we will add another image to lay over the background image. We used Illustrator
    and Photoshop to create some artwork and saved it as a `.png` file. If you don't
    have these software programs, you can use free editors, such as Inkscape (Windows/Linux),
    Affinity Designer (Mac), or Gimp (multi-platform) to create artwork. You could
    make an image similar to ours or a new design, or find Creative Commons image
    online.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加另一张图片覆盖在背景图片之上。我们使用了Illustrator和Photoshop来创建一些艺术作品，并将其保存为`.png`文件。如果你没有这些软件程序，你可以使用免费的编辑器，如Inkscape（Windows/Linux）、Affinity
    Designer（Mac）或Gimp（多平台）来创建艺术作品。你可以制作一个类似我们的图片或新的设计，或者在网上找到Creative Commons图片。
- en: 'In the far left column in the Designer, in the **User Interface** palette drawer,
    choose the **Image** Component and drag it to the **Viewer**. You will notice
    that a small image component icon sits in the upper-left corner of the Viewer.
    We want to center it. There are two ways to do this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计师的左侧列中，在**用户界面**调色板抽屉中，选择**图片**组件并将其拖动到**查看器**中。你会注意到一个小图片组件图标位于查看器的左上角。我们希望将其居中。有两种方法可以实现：
- en: Click on **Screen1** in the **Components** panel, and in the **Properties**
    panel, select **Center** from both the **AlignHorizontal** and **AlignVertical**
    drop-down lists.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**组件**面板中点击**Screen1**，然后在**属性**面板中，从**水平对齐**和**垂直对齐**的下拉列表中选择**居中**。
- en: Since we are going to be adding many components to our home screen, we are going
    to walk you through a more complex method that requires an extra component. Go
    to Layout drawer and drag out the **VerticalArrangement** component onto the **Viewer**.
    Notice how it sits below the **Image** Component icon. Click on the **Image Component**
    icon and drag it into the VerticalArrangement box. In the **Components** panel,
    select **VerticalArrangement** and go to the **Properties** panel. In both the
    **Height** and **Width** options, select **Fill Parent** from the drop-down menu
    and click on **OK** for each. You will see the VerticalArrangement component expand
    to fill the screen. Still in the **Properties** panel, go to the **AlignVertical**
    and **AlignHorizonal** options and select **Center** from each drop-down menu.
    Notice how the Image component is now centered in the Viewer on Screen1.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于我们将在主屏幕上添加许多组件，我们将向您介绍一种更复杂的方法，该方法需要额外的组件。转到布局抽屉，将**VerticalArrangement**组件拖动到**Viewer**上。注意它位于**Image**组件图标下方。单击**Image
    Component**图标，将其拖入VerticalArrangement框中。在**Components**面板中，选择**VerticalArrangement**并转到**Properties**面板。在**Height**和**Width**选项中，从下拉菜单中选择**Fill
    Parent**并单击每个选项的**OK**。您将看到VerticalArrangement组件扩展以填充屏幕。仍然在**Properties**面板中，转到**AlignVertical**和**AlignHorizonal**选项，并从每个下拉菜单中选择**Center**。注意，Image组件现在在Viewer的Screen1上居中。
- en: 'Next we will change the name of the Image component. Go to the **Components**
    panel and select **Image1**. Once it is highlighted, click on **Rename** at the
    bottom of the panel to see a pop-up window where you can enter a new name, `Pool
    Party Message`. Click on **OK**:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将更改图像组件的名称。转到**Components**面板并选择**Image1**。一旦它高亮显示，点击面板底部的**Rename**以看到一个弹出窗口，您可以在其中输入新名称，`Pool
    Party Message`。单击**OK**：
- en: '![Adding an image component](img/00147.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![添加图像组件](img/00147.jpeg)'
- en: 'Note that App Inventor replaces the spaces with underscores, so the Image component
    name will now appear as **Pool_Party_Message** in the **Components** panel. Now,
    we will upload the actual image for the Image component. With **Pool_Party_Message**
    highlighted, go to the **Properties** panel and click on **None** under **Picture**
    to open the **Upload File** dialogue. Choose the image you want to use (we named
    our image in a similar way: `PoolPartyMessage.png`) and click on **OK**. Notice
    that the image name appears in the Properties panel under Picture and in the Media
    panel, and the actual image is displayed over our background image on Screen1
    in the Viewer, as shown in the following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，App Inventor将空格替换为下划线，因此图像组件名称现在将显示为**Pool_Party_Message**在**Components**面板中。现在，我们将上传实际的图像作为图像组件。当**Pool_Party_Message**高亮显示时，转到**Properties**面板，并在**Picture**下的**None**处单击以打开**Upload
    File**对话框。选择您想要使用的图像（我们以类似的方式命名我们的图像：`PoolPartyMessage.png`）并单击**OK**。注意，图像名称现在在**Properties**面板下的**Picture**和**Media**面板中显示，并且实际图像在Viewer中的Screen1背景图像上显示，如以下截图所示：
- en: '![Adding an image component](img/00148.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![添加图像组件](img/00148.jpeg)'
- en: 'As a mobile apps user, you may have noticed that apps have some sort of navigation
    bar. We will build ours across the bottom of the screen by adding five buttons:
    **Home**, **Info**, **RSVP**, **Guests**, and **Map**.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 作为移动应用用户，您可能已经注意到应用中存在某种类型的导航栏。我们将通过添加五个按钮来构建我们的导航栏：**Home**、**Info**、**RSVP**、**Guests**和**Map**。
- en: Adding buttons
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加按钮
- en: 'We are going to place our buttons within a **HorizontalArrangement** component.
    Drag it from the same place you found VerticalArrangement (the Layout drawer drawer)
    and drop it underneath **VerticalArrangment** that currently exist on the **Viewer**.
    You can double-check that **HorizontalArrangement** is indeed below and not within
    VerticalArrangement by seeing that their names align in the Components panel column,
    as shown in the following screenshot. The list of components shows that Pool_Party_Message
    is indented so that it is indeed within the VerticalArrangement1 component, but
    HorizontalArrangement1 is not. Next, set the properties for **HorizontalArrangement1**
    to match those indicated in the following screenshot:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把按钮放置在**HorizontalArrangement**组件中。从与找到VerticalArrangement（布局抽屉）相同的位置拖动它，并将其放置在当前存在于**Viewer**上的**VerticalArrangement**下方。您可以通过查看以下截图中的组件面板列中的名称是否对齐来确认**HorizontalArrangement**确实位于VerticalArrangement下方而不是其中。组件列表显示Pool_Party_Message缩进，因此它确实位于VerticalArrangement1组件内部，但HorizontalArrangement1不是。接下来，将**HorizontalArrangement1**的属性设置为与以下截图所示相匹配：
- en: '![Adding buttons](img/00149.jpeg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![添加按钮](img/00149.jpeg)'
- en: 'Go to the **User Interface** palette, drag out a **Button**, and place it inside
    **HorizontalArrangement** in the **Viewer**. Repeat this step four more times.
    You will now have five buttons at the bottom of the screen, as shown in the following
    screenshot. Since we already set the height of HorizontalArrangement to `50` pixels,
    you can set the **Height** property of all the buttons to **Fill parent**. This
    way, they will stretch only to the height of `50` pixels. Do the same for the
    **Width** property and all the buttons will automatically size evenly across the
    width of the screen:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 前往**用户界面**调色板，拖出一个**按钮**，并将其放置在**查看器**中的**HorizontalArrangement**内。重复此步骤四次。现在屏幕底部将有五个按钮，如下面的截图所示。由于我们已将HorizontalArrangement的高度设置为`50`像素，因此可以将所有按钮的**Height**属性设置为**填满父级**。这样，它们只会伸展到`50`像素的高度。以相同的方式为**Width**属性设置，所有按钮将自动均匀地分布在屏幕宽度上：
- en: '![Adding buttons](img/00150.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![添加按钮](img/00150.jpeg)'
- en: 'Click on **Button1** in the **Components** panel and rename it to **HomeButton**.
    In the **Properties** panel, change **BackgroundColor** to **None**, check **Enabled**
    and **FontBold**, and set **FontSize** to `14`. Under **Text**, type **Home**,
    and select **Center** for **TextAlignment** and **Black** for **TextColor**, as
    shown in the following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在**组件**面板中点击**Button1**，并将其重命名为**HomeButton**。在**属性**面板中，将**BackgroundColor**更改为**None**，勾选**Enabled**和**FontBold**，并将**FontSize**设置为`14`。在**文本**下，输入**Home**，并选择**居中**作为**TextAlignment**，以及**黑色**作为**TextColor**，如下面的截图所示：
- en: '![Adding buttons](img/00151.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![添加按钮](img/00151.jpeg)'
- en: 'Repeat these steps for all of the other buttons, renaming the buttons and changing
    the text on the buttons to reflect the names indicated in the following screenshot.
    Set all of the buttons'' **TextColor** to **White**. We are using different colors
    to aid navigation. When the user is on the **Home** screen, he or she will see
    the **Home** button''s **TextColor** in black, while the other buttons will be
    white, as shown in the next screenshot. When we build the next screen (**Info**),
    we will make the **Info** button''s text black, and change the **Home** text button
    to white, like the others:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对所有其他按钮重复这些步骤，重命名按钮，并更改按钮上的文本，以反映以下截图中的名称。将所有按钮的**TextColor**设置为**白色**。我们使用不同的颜色来辅助导航。当用户处于**主页**屏幕时，他将看到**主页**按钮的**TextColor**为黑色，而其他按钮将是白色，如下一个截图所示。当我们构建下一个屏幕（**信息**）时，我们将**信息**按钮的文本设置为黑色，并将**主页**文本按钮改为白色，就像其他按钮一样：
- en: '![Adding buttons](img/00152.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![添加按钮](img/00152.jpeg)'
- en: Here's an ideal example of why you would want to always take advantage of the
    live development environment and monitor changes you make to your app on your
    mobile device. The screenshot on the left-hand side is from the **Viewer** in
    the **Designer** window. It shows the home screen (**Screen1**) with the background
    image, the graphic, and the bottom menu bar we just built. If you relied only
    on this view from your computer screen, you might attempt to respace the buttons
    because it looks like the right button is cut off.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个理想的例子，说明了为什么你总是想要利用实时开发环境并监控你在移动设备上对应用程序所做的更改。左侧的截图来自**设计师**窗口中的**查看器**。它显示了带有背景图片、图形和刚刚构建的底部菜单栏的主屏幕（**Screen1**）。如果你只依赖电脑屏幕上的这个视图，你可能会尝试重新排列按钮，因为它看起来右边的按钮被切掉了。
- en: But if you were to look at this same view on your mobile device, you would see
    the screenshot on the right-hand side with all the buttons fitting evenly across
    the screen.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果你在移动设备上查看这个相同的视图，你会看到右侧的截图，其中所有按钮均匀地分布在屏幕上。
- en: '![Adding buttons](img/00153.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![添加按钮](img/00153.jpeg)'
- en: Adding the ActivityStarter
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加活动启动器
- en: 'Our app will feature a map, because anytime you host an event, guests will
    need to know the address and it is helpful to provide the location via GPS. For
    the EventApp app to launch Google Maps when a user presses the Map button, we
    will use the ActivityStarter Component. Go to the **Designer**, and in the **Connectivity**
    Palette, drag **ActivityStarter** onto the **Viewer** and notice how it drops
    down below the **Viewer** (see the following screenshot) unlike all of the other
    components we have used so far. This is because **ActivityStarter** is a nonvisible
    component; the user won''t see it on the screen or even know that they have launched
    it:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序将包含一个地图，因为每次你举办活动时，客人都需要知道地址，通过GPS提供位置信息很有帮助。为了让EventApp应用程序在用户按下地图按钮时启动谷歌地图，我们将使用ActivityStarter组件。转到**设计器**，在**连接**调色板中，将**ActivityStarter**拖放到**查看器**上，注意它如何落在**查看器**下方（见以下截图），与迄今为止我们使用的所有其他组件不同。这是因为**ActivityStarter**是一个不可见组件；用户在屏幕上看不到它，甚至不知道他们已经启动了它：
- en: '![Adding the ActivityStarter](img/00154.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![添加ActivityStarter](img/00154.jpeg)'
- en: 'For the app to launch the correct map, you will need to input some instructions
    in the **Properties** panel. Insert the following text into the blank text boxes
    beneath each property heading `Action`, `ActivityClass`, `ActivityPackage`, and
    `DataUri`, as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让应用程序启动正确的地图，你需要在**属性**面板中输入一些指令。将以下文本插入到每个属性标题下方的空白文本框中`Action`、`ActivityClass`、`ActivityPackage`和`DataUri`，如下所示：
- en: '**Action**: `android.intent.action.VIEW`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Action**: `android.intent.action.VIEW`'
- en: '**ActivityClass**: `com.google.android.maps.MapsActivity`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ActivityClass**: `com.google.android.maps.MapsActivity`'
- en: '**ActivityPackage**: `com.google.android.apps.maps`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ActivityPackage**: `com.google.android.apps.maps`'
- en: '**DataUri**: `http://maps.google.com/mapsq=1600+Amphitheatre+Parkway+Mountain+View+CA`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DataUri**: `http://maps.google.com/mapsq=1600+Amphitheatre+Parkway+Mountain+View+CA`'
- en: You might be wondering what all of these properties mean. The **ActivityPackage**
    property tells ActivityStarter what package to launch (in the Android programming
    jargon, the app files are called packages). Every Android app consists of one
    or more activities. Think of these activities as main parts of the app. The **ActivityClass**
    property mentions specifically which activity of the Maps app to start. The **Action**
    property provides more details about the activity that is being launched. Finally,
    the **DataUri** property specifies the web location that the map is pointing to.
    The first part of the URL, [http://maps.google.com/maps?q=](http://maps.google.com/maps?q=),
    basically means that we are querying Google Maps (the `q` stands for query) and
    the second part of the URL specifies the exact location we are looking for. In
    URLs, blank spaces are not allowed, so the conventional format is to replace all
    the black spaces with plus signs. Thus, when we specify the address of our pool
    party (is fictionally at the Google headquarters in Mountain View, CA), all the
    blank spaces between different words will be replaced by plus signs, as shown
    in the previous list under the **DataUri** property heading.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道所有这些属性的含义。**ActivityPackage**属性告诉ActivityStarter启动哪个包（在Android编程术语中，应用程序文件被称为包）。每个Android应用程序都包含一个或多个活动。将这些活动视为应用程序的主要部分。**ActivityClass**属性具体说明了要启动的地图应用程序的活动。**Action**属性提供了有关正在启动的活动更多详细信息。最后，**DataUri**属性指定了地图指向的网页位置。URL的第一部分，[http://maps.google.com/maps?q=](http://maps.google.com/maps?q=)，基本上意味着我们正在查询谷歌地图（`q`代表查询），URL的第二部分指定了我们正在寻找的确切位置。在URL中，不允许有空格，因此传统格式是将所有空格替换为加号。因此，当我们指定我们泳池派对的地址（虚构地位于加利福尼亚州山景城的谷歌总部）时，不同单词之间的所有空格都将被加号替换，如前文在**DataUri**属性标题下所示列表中所示。
- en: When creating your own event app with a different location, you will use the
    same information for **Action**, **ActivityClass**, and **ActivityPackage**, but
    for the **DataUri** property, you will insert your address after the equals sign
    ([http://maps.google.com/maps?q=](http://maps.google.com/maps?q=)). Remember to
    replace all the spaces in your address with plus signs.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用不同位置创建自己的活动应用程序时，你将使用相同的**Action**、**ActivityClass**和**ActivityPackage**信息，但对于**DataUri**属性，你将在等号后插入你的地址([http://maps.google.com/maps?q=](http://maps.google.com/maps?q=))。请记住，将你地址中的所有空格替换为加号。
- en: 'Following is a sample of what your screen should resemble. Because the text
    boxes on your screen are small, it will not display the full information without
    scrolling the cursor to the right using the arrow keys:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个您屏幕应类似示例。由于您的屏幕上的文本框很小，不使用箭头键将光标向右滚动，将无法显示完整信息：
- en: '![Adding the ActivityStarter](img/00155.jpeg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![添加ActivityStarter](img/00155.jpeg)'
- en: Adding screens
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加屏幕
- en: 'We currently have our home screen called Screen1 (because App Inventor does
    not allow you to rename Screen1). We will now add three more screens; each one
    will be associated with a button. Above the **Viewer** and below **Projects**
    in the top menu bar, you will see a row of three buttons: **Screen1** (our current
    screen), **Add Screen...**, and **Remove Screen**, which is grayed out, as shown
    in the following screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们目前的主屏幕称为Screen1（因为App Inventor不允许您重命名Screen1）。现在我们将添加另外三个屏幕；每个屏幕都将与一个按钮相关联。在顶部菜单栏的**查看器**上方和**项目**下方，您将看到一排三个按钮：**Screen1**（我们当前的屏幕）、**添加屏幕...**和**删除屏幕**，后者为灰色，如图所示：
- en: '![Adding screens](img/00156.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![添加屏幕](img/00156.jpeg)'
- en: 'Click on the **Add Screen** button and a pop-up window will ask you to input
    the new screen name. Type `Info_Screen` as shown in the following screenshot.
    Click on **OK**:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**添加屏幕**按钮，将弹出一个窗口要求您输入新的屏幕名称。按照以下截图所示，键入`Info_Screen`。点击**确定**：
- en: '![Adding screens](img/00157.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![添加屏幕](img/00157.jpeg)'
- en: 'Repeat the same procedure to add two more screens and name them **RSVP_Screen**
    and **GuestList_Screen**. Now, all of your screens will appear in the drop-down
    menu under the first menu button, and you can navigate between screens by selecting
    a different one. The next screenshot shows the name **Screen1** on the button
    to indicate the name of the screen that is currently open:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 重复相同的步骤添加另外两个屏幕，并将它们命名为**RSVP_Screen**和**GuestList_Screen**。现在，所有屏幕都将出现在第一个菜单按钮下的下拉菜单中，您可以通过选择不同的屏幕在屏幕之间导航。下一张截图显示了按钮上的名称**Screen1**，以指示当前打开的屏幕名称：
- en: .
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 。
- en: '![Adding screens](img/00158.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![添加屏幕](img/00158.jpeg)'
- en: 'Once you have added the additional screens, you will need to recreate the user
    interface for them. This means that, for each screen, you will add some of the
    same elements you added to Screen1: the pool image as the background image, a
    VerticalArrangement, a HorizontalArrangement, and five buttons. Note that it is
    vital to rename the five buttons to the exact same names as on Screen1 because
    we will be programming each button with the same name to do the same thing (to
    open its appropriate screen) and if a button is misnamed on one of the screens,
    it won''t work (note that we are referring to the actual button names, not the
    text that appears on the buttons). Also, remember to make the text of all the
    buttons white, except for the button of the screen that you have open (that is,
    when GuestList_Screen is open, the Guests button text should be black; when RSVP_Screen
    is open, the RSVP button text should be black, and so on).'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您添加了额外的屏幕，您将需要为它们重新创建用户界面。这意味着，对于每个屏幕，您将添加一些与Screen1相同的元素：泳池图像作为背景图像，一个VerticalArrangement，一个HorizontalArrangement和五个按钮。请注意，将五个按钮重命名为与Screen1上完全相同的名称至关重要，因为我们将为每个按钮使用相同的名称来执行相同的事情（打开其适当的屏幕），如果某个屏幕上的按钮名称错误，则它将无法工作（请注意，我们指的是实际的按钮名称，而不是按钮上显示的文本）。此外，请记住将所有按钮的文本设置为白色，除了您当前打开的屏幕的按钮（即，当GuestList_Screen打开时，Guests按钮文本应为黑色；当RSVP_Screen打开时，RSVP按钮文本应为黑色，依此类推）。
- en: Programming the blocks
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编程积木
- en: Now that we've designed most of the user interface of the Event app, we will
    switch to the Blocks editor to program our app. Click on the **Blocks** button
    in the upper-right corner of the Designer. You will find that throughout the building
    of this app (as with any app), you will go back and forth between the Designer
    and Blocks editor.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设计了大部份Event应用程序的用户界面，我们将切换到Blocks编辑器来编程我们的应用程序。在设计师右上角点击**Blocks**按钮。您会发现，在整个构建此应用程序的过程中（就像任何应用程序一样），您将在设计师和Blocks编辑器之间来回切换。
- en: Navigating between screens and launching maps
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在屏幕之间导航和启动地图
- en: In the Blocks editor, we will code the navigation buttons to launch the appropriate
    screen. For example, when the user presses the Info button, we want the app to
    open Info_Screen.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在Blocks编辑器中，我们将编写导航按钮的代码以启动适当的屏幕。例如，当用户按下Info按钮时，我们希望应用程序打开Info_Screen。
- en: Screen1
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Screen1
- en: In the Blocks Editor, make sure you are on Screen1 by verifying that Screen1
    (and not one of the other screens) displays on the menu button. In the **Blocks**
    palette under **HorizontalArrangement**, you will see a list of the buttons that
    you just created in the Designer. (Notice how the button names are indented underneath
    HorizontalArrangement, this is a visual cue to remind you that they are contained
    within the HorizontalArrangement Component.) If you don't see all of the buttons
    displayed in the Palette, click on the plus sign to the left of HorizontalArrangement,
    it will toggle to a minus sign and display those items (in this case, 5 buttons)
    within.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在块编辑器中，确保您在Screen1上，通过验证菜单按钮上显示的是Screen1（而不是其他屏幕之一）。在**水平排列**下的**块**调色板中，您将看到您在设计师中刚刚创建的按钮列表。（注意按钮名称在水平排列下缩进，这是一个视觉提示，提醒您它们包含在水平排列组件中。）如果您在调色板中看不到所有按钮，请单击水平排列左侧的加号，它将切换为减号并显示这些项目（在这种情况下，5个按钮）。
- en: Click on **InfoButton** to reveal the blocks drawer and choose the first gold
    block **when InfoButton.Click**.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击**InfoButton**以显示块抽屉并选择第一个金色块**当InfoButton.Click**。
- en: Under the **Built-in** blocks, click on the gold **Control** blocks and scroll
    down to the **open another screen screenName** block. Insert this block into the
    **when InfoButton.Click** block.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**内置**块下，单击金色**控制**块并向下滚动到**打开另一个屏幕 screenName**块。将此块插入到**当InfoButton.Click**块中。
- en: Add a blank pink **Text** block to it and type `Info_Screen` into the blank.
    Connect it to the **open another screen screenName** block.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向其中添加一个空白的粉色**文本**块，并输入`Info_Screen`到空白处。将其连接到**打开另一个屏幕 screenName**块。
- en: Repeat these steps for **RSVPButton** and **GuestsButton**.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为**RSVPButton**和**GuestsButton**重复这些步骤。
- en: 'For MapButton, we won''t be opening another screen; instead we will be launching
    the ActivityStarter (that we have already set to open Google Maps), as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对于MapButton，我们不会打开另一个屏幕；相反，我们将启动ActivityStarter（我们已将其设置为打开Google Maps），如下所示：
- en: In the **MapButton** drawer, select the first block, when **MapButton.Click**.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**MapButton**抽屉中，选择第一个块，当**MapButton.Click**。
- en: In the **ActivityStarter1** blocks drawer, select the purple **call ActivityStarter1.StartActivity**
    block. Connect the two blocks together.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**ActivityStarter1**块抽屉中，选择紫色**调用ActivityStarter1.StartActivity**块。将两个块连接在一起。
- en: The following screenshot shows all of the previous steps:![Screen1](img/00159.jpeg)
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下截图显示了所有之前的步骤：![Screen1](img/00159.jpeg)
- en: Sharing blocks between screens using the Backpack
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用背包在屏幕间共享块
- en: If you think about it, all the buttons on all the screens will do the same thing.
    Instead of rebuilding the exact same sets of blocks for all of the other screens,
    we can use the Backpack tool. There is a little backpack icon in the upper-right
    corner of the blocks Viewer, as shown in the earlier screenshot. This tool enables
    you to share blocks between screens and projects (note that the Backpack empties
    when you sign out).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仔细想想，所有屏幕上的所有按钮都会做同样的事情。我们不必为所有其他屏幕重建完全相同的块集，我们可以使用背包工具。在块查看器的右上角有一个小背包图标，如前面的截图所示。此工具使您能够在屏幕和项目之间共享块（请注意，当您注销时，背包会清空）。
- en: 'There are two ways to add blocks to the Backpack. They are as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 添加块到背包有两种方式。如下所示：
- en: You can drag the blocks directly to the Backpack (the simplest method).
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以直接将块拖到背包中（最简单的方法）。
- en: Or, you can right-click on block you want to add (similar to copying or pasting
    blocks, right-clicking to add blocks to the Backpack, will add all attached blocks).
    For example, right-click on the **when InfoButton.Click** block (or on a Mac,
    click on the control button on the keyboard while clicking on the event block)
    and a drop-down list will appear, as shown in the following screenshot. Select
    the fifth option, **Add to Backpack**; this will add the three blocks in this
    set (if you have your computer's sound on, you will hear an indicator sound).![Sharing
    blocks between screens using the Backpack](img/00160.jpeg)
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者，您可以在要添加的块上右键单击（类似于复制或粘贴块，在背包中右键单击添加块，将添加所有附加的块）。例如，右键单击**当InfoButton.Click**块（或者在Mac上，在单击事件块的同时按键盘上的控制按钮）并会出现一个下拉列表，如下面的截图所示。选择第五个选项，**添加到背包**；这将添加此组中的三个块（如果您打开了计算机的声音，您将听到指示音）。![使用背包在屏幕间共享块](img/00160.jpeg)
- en: The first time you do this the number in the parenthesis in the drop-down list
    will be **0** (as shown in the preceding screenshot). But after you add the first
    set of blocks to the Backpack and repeat the step for the next set of blocks,
    the number will increase. This number lets you know how many times you have added
    blocks to the Backpack.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次这样做时，下拉列表中的括号中的数字将是**0**（如前面的截图所示）。但是，在您将第一组块添加到**Backpack**并重复下一步骤以添加下一组块之后，该数字将增加。这个数字会告诉您您已将块添加到**Backpack**的次数。
- en: 'Add the three other block sets to the **Backpack**, in the method you choose.
    After adding the blocks, click on the Backpack to reveal the four block sets you
    have added, as shown on the right-hand side of the following screenshot. Click
    on any white space in the **Viewer** to close the Backpack:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以您选择的方式将另外三个块集添加到**Backpack**中。添加块后，点击**Backpack**以显示您已添加的四个块集，如下面的截图右侧所示。点击**Viewer**中的任何空白区域以关闭**Backpack**：
- en: '![Sharing blocks between screens using the Backpack](img/00161.jpeg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![在屏幕间共享Backpack中的块](img/00161.jpeg)'
- en: Now we can switch screens and retrieve our Backpack blocks. Click on the **Screen1**
    button above the **Viewer** to choose another screen from the drop-down list.
    Select **Info_Screen**.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以切换屏幕并检索我们的Backpack块。点击**Viewer**上方的**Screen1**按钮，从下拉列表中选择另一个屏幕。选择**Info_Screen**。
- en: If you think about it, we only need three of the four sets of blocks we added
    to the **BackPack**. We don't need the **InfoButton** blocks because we are currently
    on the **Info** screen, so we don't want the **InfoButton** to do anything. *To
    make a button not active or not do anything, we simply don't create any blocks
    (code) for it*.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仔细想想，我们只需要添加到**BackPack**中的四组块中的三组。我们不需要**InfoButton**块，因为我们目前处于**Info**屏幕上，所以我们不希望**InfoButton**执行任何操作。*要使按钮不活跃或不执行任何操作，我们只需不为其创建任何块（代码）*。
- en: Adding blocks from the Backpack works in exactly the same way as adding blocks
    from a drawer. Click on **Backpack** to reveal the selection of blocks you've
    added and click on the **RSVPButton** block. You will see that they those blocks
    appear on the **Viewer**. Repeat the steps to add the **GuestsButton** and the
    **MapButton** blocks from the Backpack.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 从**Backpack**中添加块的方式与从抽屉中添加块的方式完全相同。点击**Backpack**以显示您已添加的块选择，然后点击**RSVPButton**块。您将看到这些块出现在**Viewer**上。重复这些步骤以从**Backpack**中添加**GuestsButton**和**MapButton**块。
- en: 'We didn''t need to create the **HomeButton** blocks when we were on **Screen1**
    because that is essentially the Home screen. But, we do need to activate the Home
    Button on other screens so users can navigate back to Screen1 (or Home). let''s
    do that now that we are on the "Info_Screen. Copy and paste any event block on
    the screen and then click on the gold arrow to the right of the button name. It
    will reveal a drop-down list of all the buttons; choose **HomeButton**. Change
    the text in the pink Text block to **Screen1**. Your blocks for **Info_Screen**
    should look as like the following image. Repeat the same steps to add the Home
    Button blocks to the RSVP_Screen and the GuestList_Screen::'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在**Screen1**上时，我们不需要创建**HomeButton**块，因为这本质上就是主屏幕。但是，我们需要在其他屏幕上激活主按钮，以便用户可以导航回**Screen1**（或主屏幕）。既然我们现在在“Info_Screen”上，让我们现在就做这件事。将屏幕上的任何事件块复制并粘贴，然后点击按钮名称右侧的金色箭头。它将显示所有按钮的下拉列表；选择**HomeButton**。将粉红色的文本块中的文本更改为**Screen1**。您的**Info_Screen**块应该看起来像以下图像。重复相同的步骤将主按钮块添加到**RSVP_Screen**和**GuestList_Screen**：
- en: '![Sharing blocks between screens using the Backpack](img/00162.jpeg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![在屏幕间共享Backpack中的块](img/00162.jpeg)'
- en: Adding text to screens
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向屏幕添加文本
- en: The purpose of **Info_Screen** is for the organizer (you) to provide guests
    with information about the event. This screen would display static text, but it
    could easily be updated. Let's switch back to the **Designer**.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**Info_Screen**的目的是为了让组织者（您）向客人提供有关活动的信息。此屏幕将显示静态文本，但可以轻松更新。让我们切换回**Designer**。'
- en: 'An easy way to add text to a screen is with a **Label**. (Alternatively, you
    could also create the text on your computer using Photoshop or Gimp (or another
    design tool) and save it as an image file (JPG or PNG) and upload it to App Inventor
    using the Media tool). You will find the Label component in the **User Interface**
    drawer. We are going to create eight lines of text, so drag a Label onto the **Viewer**
    and repeat this seven more times. In the **Properties** panel, type your information
    in the text box under **Text**. You can copy our formatting for font, color, and
    layout, as shown in the following screenshot, or design your own:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 向屏幕添加文本的一个简单方法是使用**标签**。（或者，您也可以使用Photoshop或Gimp（或另一个设计工具）在电脑上创建文本，并将其保存为图像文件（JPG或PNG），然后使用媒体工具将其上传到App
    Inventor）。您可以在**用户界面**抽屉中找到标签组件。我们将创建八行文本，所以将一个标签拖到**查看器**上，然后重复此操作七次。在**属性**面板中，在**文本**下的文本框中输入您的信息。您可以复制以下截图所示的格式，包括字体、颜色和布局，或者设计您自己的样式：
- en: '![Adding text to screens](img/00163.jpeg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![向屏幕添加文本](img/00163.jpeg)'
- en: Summary
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You have completed the first part of setting up an event app. In this chapter,
    you have learned how to find usable images online and how to use one as a background
    image on multiple screens. You also learned how to add artwork from a computer
    over a background image. You created a button navigation bar, coded buttons to
    open other screens, used the Backpack tool to copy blocks from one screen to another,
    entered informational text using labels, and did the setup for launching Google
    Maps.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经完成了设置活动应用的第一部分。在本章中，您学习了如何在网络上找到可用的图片，以及如何将一张图片作为多屏幕的背景图。您还学会了如何将电脑上的艺术品添加到背景图上。您创建了一个按钮导航栏，编写了打开其他屏幕的按钮代码，使用背包工具将块从一个屏幕复制到另一个屏幕，使用标签输入信息性文本，并为启动谷歌地图进行了设置。
- en: In the next chapter, we will concentrate mostly on creating a database for all
    of the data we will be collecting—the guests' names, the number of attendees,
    and the potluck items. To do this, we will teach you to use Google Fusion Tables
    and how to create an RSVP form and a guest list display using **ListView**. We
    are halfway toward completing a very practical app that you can use for multiple
    purposes. And, the skills you are learning will prove instrumental for any and
    all future app-making endeavors.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将主要集中创建一个数据库，用于存储我们将收集的所有数据——宾客的名字、参加人数和拼盘物品。为此，我们将教您如何使用谷歌融合表格，以及如何使用**ListView**创建RSVP表格和宾客名单显示。我们已完成了大约一半的非常实用的应用，您可以用它来完成多种目的。而且，您正在学习的技能将对任何未来的应用制作尝试都非常有用。
