- en: Working with Photo Filters
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与照片过滤器一起工作
- en: In this chapter, we focus on creating photos for a restaurant and how to use
    the camera and camera roll. We give the user the ability to take a picture and
    apply a filter to that picture. In the next chapter, we tie the last chapter and
    this chapter all together by completing the work on the review form and enabling
    users to save their reviews. We will also learn how to save photos as well.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们专注于创建餐厅的照片以及如何使用相机和相册。我们赋予用户拍照并应用过滤器到照片的能力。在下一章中，我们将通过完成评论表单并允许用户保存他们的评论来将上一章和本章的内容全部结合起来。我们还将学习如何保存照片。
- en: 'In this chapter, you will learn:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习：
- en: How to use the camera roll to get pictures
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用相册获取图片
- en: How to use the camera to take pictures and bring them into our app
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用相机拍照并将它们带入我们的应用
- en: How to apply filters to our pictures and get them ready to save to the device
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将过滤器应用到我们的图片并将它们准备好保存到设备上
- en: Understanding filters
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解过滤器
- en: Based on our design, we know that we are going to need to apply filters to a
    photo. Instead of just creating an array of filters, we are going to use a plist
    to load in a set of filters that we want. You can find the `FilterData.plist`
    file inside this chapter's `asset` folder. Drag and drop this file into the `Model`
    folder that is inside the `Review` folder. Make sure that `Copy` items if needed
    is checked and then hit Finish.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们的设计，我们知道我们需要对照片应用过滤器。我们不会仅仅创建一个过滤器数组，而是将使用一个plist来加载我们想要的过滤器集。你可以在本章的`asset`文件夹中找到`FilterData.plist`文件。将此文件拖放到“Review”文件夹中的“Model”文件夹中。如果需要，请确保勾选“复制项目”，然后点击完成。
- en: 'Let''s take a look at the plist and see what it contains:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看plist，看看它包含什么：
- en: '![](img/d412f909-485a-41ba-9252-b5de33d3cf94.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d412f909-485a-41ba-9252-b5de33d3cf94.png)'
- en: 'This list only has 10 of over 170 filters and effects that you can use. If
    you would like to see a full list of filters, you can find the list at [http://tinyurl.com/coreimage-ios](http://tinyurl.com/coreimage-ios).
    Feel free to add, remove, or update any filters. Now that we have seen what our
    plist looks like, we need to create a model that represents this data. We also
    need to create a `Manager` class to manage our items. Let''s create the model
    first:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 此列表仅包含170多个可用的过滤器效果中的10个。如果你想查看完整的过滤器列表，可以在[http://tinyurl.com/coreimage-ios](http://tinyurl.com/coreimage-ios)找到列表。你可以自由地添加、删除或更新任何过滤器。现在我们已经看到了我们的plist的样子，我们需要创建一个表示这些数据的模型。我们还需要创建一个`Manager`类来管理我们的项目。让我们首先创建模型：
- en: Right-click the `Model` folder in the `Review` folder and select New File.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击“Review”文件夹中的“Model”文件夹，选择新建文件。
- en: Inside the Choose a template for your new file screen, select iOS at the top,
    and then Swift File. Then, hit Next.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择新文件模板的屏幕上，顶部选择iOS，然后选择Swift文件。然后，点击下一步。
- en: Name this file `FilterItem` and hit Create.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件命名为`FilterItem`并点击创建。
- en: 'Next, we need to define our struct; therefore, add the following under the
    `import` statement:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要定义我们的结构；因此，在`import`语句下添加以下内容：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `filter` property will be the class passed to apply the filter; and the
    `name` property will be used as a display.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`filter`属性将是应用过滤器的类；而`name`属性将用于显示。'
- en: 'Let''s create our `FilterManager` file next:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建我们的`FilterManager`文件：
- en: Right-click the `Photo Filter` folder and select New File.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击“Photo Filter”文件夹，选择新建文件。
- en: Inside of the Choose a template for your new file screen, select iOS at the
    top, and then Swift File. Then, hit Next.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择新文件模板的屏幕上，顶部选择iOS，然后选择Swift文件。然后，点击下一步。
- en: Name this file `FilterManager` and hit Create.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件命名为`FilterManager`并点击创建。
- en: 'Next, we need to define our class definition; therefore, add the following
    under the `import` statement:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要定义我们的类定义；因此，在`import`语句下添加以下内容：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This file uses our `DataManager` base class, which converts our plist data into
    an array of dictionary objects. Once that is complete, we create `FilterItems`
    from that.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件使用我们的`DataManager`基类，它将我们的plist数据转换为字典对象的数组。一旦完成，我们就从这些数据中创建`FilterItems`。
- en: 'Next, we need to create a file that takes a `FilterItem` and apply a filter
    to an image. Since we are going to do this in numerous places, it is best to have
    all of this code in one place. Therefore, we are going to create a file that handles
    all of this processing for us. Let''s create our `ImageFiltering` file:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建一个文件，该文件接受一个`FilterItem`并对图像应用过滤器。由于我们将在多个地方执行此操作，最好将所有这些代码放在一个地方。因此，我们将创建一个文件来处理所有这些处理工作。让我们创建我们的`ImageFiltering`文件：
- en: Right-click the `Photo Filter` folder and select New File.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`Photo Filter`文件夹并选择新建文件。
- en: Inside the Choose a template for your new file screen, select iOS at the top,
    and then Swift File. Then, hit Next.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择新文件模板的屏幕上，选择顶部的iOS，然后选择Swift文件。然后点击下一步。
- en: Name this file `ImageFiltering`, and hit Create.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件命名为`ImageFiltering`并点击创建。
- en: 'Update your file to the following:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的文件更新为以下内容：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s break down each section so that we can understand what we are doing
    with this code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解每个部分，以便我们可以理解我们用这段代码做了什么：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`CoreImage` give us access to the image processing we need for filtering.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`CoreImage`为我们提供了进行图像处理的访问权限。'
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Creating this protocol allows us to have other classes conform to it, therefore
    giving us access to the method and allowing us to use it wherever we want.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 创建此协议允许其他类遵循它，因此我们可以访问该方法，并允许我们在任何需要的地方使用它。
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This protocol is used when a filter is selected, and when we need the selected
    filter, is passed from one View or View Controller to another. The extension has
    the `apply(filter:originalImage:)` method in it. In this method, we are creating
    an extension and adding all of the code that we are going to use for applying
    filters to images.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此协议用于在选择滤镜时使用，以及当我们需要传递选定的滤镜时，从一个视图或视图控制器传递到另一个视图控制器。扩展中包含`apply(filter:originalImage:)`方法。在这个方法中，我们创建了一个扩展，并添加了所有我们将要用于应用滤镜到图像的代码。
- en: Creating our filter scroller
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的滤镜滚动条
- en: After a user selects a photo to use, we present the user with a screen, which
    contains that image. In the following image, we have a scroller, also known as
    a `UIScrollView`, which allows us to create content that scrolls either horizontally
    or vertically. The `UIScrollView` displays an image (thumbnail) with the filter
    applied to it as well as the name of the filter. This image and name represent
    our filters visually to our users.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 用户选择一张照片后，我们向用户展示一个包含该图像的屏幕。在下面的图像中，我们有一个滚动条，也称为`UIScrollView`，它允许我们创建可以水平或垂直滚动的内联内容。`UIScrollView`显示了一个应用了滤镜的图像（缩略图）以及滤镜的名称。这张图像和名称以视觉方式向用户展示我们的滤镜。
- en: 'When the user taps on the image, the user sees the selected filter change the
    primary image. Let''s look at an example:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击图像时，用户会看到选定的滤镜改变主图像。让我们看看一个例子：
- en: '![](img/3b3ece40-d88f-47b7-a6f2-86b6954ab1c2.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3b3ece40-d88f-47b7-a6f2-86b6954ab1c2.png)'
- en: 'We are now going to create the elements inside the `UIScrollView`. Since we
    have created a lot inside storyboard, let''s create the `PhotoItem` entirely in
    code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将在`UIScrollView`内部创建元素。由于我们在Storyboard中创建了很多内容，让我们完全在代码中创建`PhotoItem`：
- en: Right-click the `Review` folder and select New File.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`Review`文件夹并选择新建文件。
- en: Inside the Choose a template for your new file screen, select iOS at the top,
    and then Swift File. Then, hit Next.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择新文件模板的屏幕上，选择顶部的iOS，然后选择Swift文件。然后点击下一步。
- en: Name this file `PhotoItem` and hit Create.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件命名为`PhotoItem`并点击创建。
- en: 'Update your file to the following:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的文件更新为以下内容：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, add your variables inside of the class declaration:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在类声明中添加你的变量：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, we are creating a delegate, which is used to let any class know when something
    happens. We use this delegate when someone taps on the object itself, which allows
    us to pass the `FilterItem` data to a parent class.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了一个委托，用于让任何类知道何时发生某些事情。我们使用这个委托当有人点击对象本身时，这允许我们将`FilterItem`数据传递给父类。
- en: You have used this pattern already plenty of times. Table Views and Collection
    Views both have delegates to which you conform.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经多次使用过这种模式。表格视图和集合视图都有你遵循的委托。
- en: 'Now, we need to add our `init` methods. Add the following after your variables:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要添加我们的`init`方法。在你的变量之后添加以下内容：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Whenever you create a `UIView`, you are required to add this method. If you
    do not, it gives you an error, and then you have to add it.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你创建一个`UIView`时，你必须添加此方法。如果不添加，它会给你一个错误，然后你必须添加它。
- en: This is a custom `init()` method, which allows us to pass data (here, the frame,
    image, and filter items) when the item gets created. We have a few errors because
    we have not created the methods we added to our `init()` method.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个自定义的`init()`方法，它允许我们在创建项目时传递数据（在这里，是框架、图像和滤镜项）。我们有一些错误，因为我们没有创建添加到`init()`方法中的方法。
- en: 'Next, let''s create an extension and add the following methods:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们创建一个扩展并添加以下方法：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Our `setDefaults()` method is used to create a tap gesture. When the item gets
    tapped, we call the `thumbTapped` method. We also set the data and the background
    color of this method.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `setDefaults()` 方法用于创建一个点击手势。当项目被点击时，我们调用 `thumbTapped` 方法。我们还设置了此方法的数据和背景颜色。
- en: 'The `createThumbnail(image: item:)` is used to create an image and apply a
    filter to the image. Then, we are setting its frame and adding the image to the
    View.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`createThumbnail(image: item:)` 方法用于创建图像并应用图像过滤器。然后，我们设置其框架并将图像添加到视图中。'
- en: With our final method, `createLabel(item:)`, we are creating a label and passing
    in the name of the filter. Then, we are setting its frame and adding the label
    to the View.  We have two more methods we need to add to our extension.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的最终方法 `createLabel(item:)` 中，我们创建了一个标签并传递了过滤器的名称。然后，我们设置其框架并将标签添加到视图中。我们还需要添加到我们的扩展中的两个更多方法。
- en: 'Add the following after the `createLabel(item:)` method:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `createLabel(item:)` 方法之后添加以下内容：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `thumbTapped()` method is used to detect taps. When the user taps the item,
    it calls `filterSelected`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`thumbTapped()` 方法用于检测点击。当用户点击项目时，它调用 `filterSelected`。'
- en: The `filterSelected(item:)` method is the protocol we created earlier; and all
    we are doing is calling the `delegate` method, `filterSelected`. We see what happens
    next when the selected filter gets called.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`filterSelected(item:)` 方法是我们之前创建的协议；我们只是调用 `delegate` 方法，`filterSelected`。我们看到当选定的过滤器被调用时会发生什么。'
- en: Our `PhotoItem` is complete; now we need to work on our cell for our `Filter`
    collection view.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `PhotoItem` 已经完成；现在我们需要为我们的 `Filter` 收藏视图创建单元格。
- en: Creating a filter cell
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建过滤器单元格
- en: We already created our cell that we need in the storyboard. However, before
    we create our View Controller, we need to create a filter cell.  This cell is
    used to display all of the available filters.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在故事板中创建了所需的单元格。然而，在我们创建视图控制器之前，我们需要创建一个过滤器单元格。这个单元格用于显示所有可用的过滤器。
- en: Right-click the `Photo Filter` folder in the `Controller` folder in the `Review`
    folder and select New File.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 `Review` 文件夹中的 `Controller` 文件夹中的 `Photo Filter` 文件夹，并选择新建文件。
- en: Inside the Choose a template for your new file screen, select iOS at the top,
    and then Cocoa Touch Class. Then, hit Next.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择新文件模板的屏幕中，选择顶部的 iOS，然后选择 Cocoa Touch 类。然后，点击下一步。
- en: 'In the options screen that appears, add the following:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的选项屏幕中，添加以下内容：
- en: 'New file:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 新建文件：
- en: 'Class: `FilterCell`'
  id: totrans-71
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类：`FilterCell`
- en: 'Subclass: `UICollectionViewCell`'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子类：`UICollectionViewCell`
- en: 'Also create XIB: Unchecked'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还创建 XIB：未选中
- en: 'Language: `Swift`'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语言：`Swift`
- en: Click Next, and then Create.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下一步，然后创建。
- en: 'Update your file to the following:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新你的文件如下：
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Our cell is pretty basic: we are setting an image and giving it rounded corners.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的单元格相当基础：我们设置了一个图像并给它添加了圆角。
- en: Open `PhotoFilter.storyboard`.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `PhotoFilter.storyboard`。
- en: In the Outline view, select the Collection View cell. Then, in the Utilities
    panel, under the Identity inspector set the Custom Class to FilterCell.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在概要视图中选择集合视图单元格。然后，在实用工具面板中，在身份检查器下设置自定义类为 FilterCell。
- en: In the Attributes inspector, set the Identifier to filterCell.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性检查器中，将标识符设置为 filterCell。
- en: Next, connect your outlets for both `lblName` and `imgThumb`.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，连接 `lblName` 和 `imgThumb` 的出口。
- en: 'We need to make sure we can dismiss our modal when we click the Add Photo button.
    We already added the method we needed, but we just need to add this to the storyboard.
    CTL drag from Cancel to the Exit icon:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要确保当我们点击添加照片按钮时可以关闭模态视图。我们已经添加了所需的方法，但我们需要将其添加到故事板中。从取消按钮拖动到退出图标：CTL
- en: '![](img/ea622357-f11c-4373-825e-316424dc4eed.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ea622357-f11c-4373-825e-316424dc4eed.png)'
- en: 'In the popup, select `unwindReviewCancelWithSegue`:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出窗口中，选择 `unwindReviewCancelWithSegue`：
- en: '![](img/ee2ec13c-1429-426a-b9df-fbb1767d4fe8.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ee2ec13c-1429-426a-b9df-fbb1767d4fe8.jpg)'
- en: 'In the Navigation controller, select the Navigation bar in the Outline view.
    Then, in the Attributes inspector, uncheck Translucent:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航控制器中，在概要视图中选择导航栏。然后，在属性检查器中取消选中半透明：
- en: '![](img/106f8ba6-5457-41b7-a336-22fdb3553868.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/106f8ba6-5457-41b7-a336-22fdb3553868.png)'
- en: Adding this makes sure our navigation bar is a solid white color and not translucent.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 添加此选项确保我们的导航栏是纯白色而不是半透明的。
- en: We are done with setting up the cell and storyboard setup. Let's move to creating
    our View Controller.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了单元格和故事板设置的设置。让我们转到创建我们的视图控制器。
- en: Creating our apply filter view controller
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的应用过滤器视图控制器
- en: 'Now we need to create our `PhotoFilterViewController`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要创建我们的 `PhotoFilterViewController`：
- en: Right-click the `Photo Filter` folder in the `Controller` folder in the `Review`
    folder and select New File.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“Review”文件夹中的“Controller”文件夹中的“Photo Filter”文件夹上右键单击，并选择“新建文件”。
- en: Inside the Choose a template for your new file screen, select iOS at the top,
    and then Cocoa Touch Class. Then, hit Next.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择新文件模板的屏幕中，顶部选择iOS，然后选择Cocoa Touch类。然后，点击“下一步”。
- en: 'In the options screen that appears, add the following:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的选项屏幕中，添加以下内容：
- en: 'New file:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 新文件：
- en: 'Class: `PhotoFilterViewController`'
  id: totrans-97
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类：`PhotoFilterViewController`
- en: 'Subclass: `UIViewController`'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子类：`UIViewController`
- en: 'Also create XIB: Unchecked'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 也创建XIB：未选中
- en: 'Language: `Swift`'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语言：`Swift`
- en: Click Next and then Create.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“下一步”，然后创建。
- en: When the file opens, delete everything after the `viewDidLoad()` method.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当文件打开时，删除`viewDidLoad()`方法之后的所有内容。
- en: 'Then, add the following:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，添加以下内容：
- en: '[PRE12]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, we are setting up our variables and our `initialize()` method. You can
    ignore the error, as we fix this next by creating an extension after our class
    definition.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在设置我们的变量和我们的`initialize()`方法。你可以忽略错误，因为我们将在创建扩展后修复这个问题。
- en: 'Add the following extension:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下扩展名：
- en: '[PRE13]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We are creating some basic functions that we need.  Our first function is our
    `initialize()` method, which calls three new methods.  Let's create those three
    methods next.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在创建一些我们需要的基本函数。我们的第一个函数是`initialize()`方法，它调用三个新方法。让我们接下来创建这三个方法。
- en: 'Add the following methods after the `initialize()` method:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`initialize()`方法之后添加以下方法：
- en: '[PRE14]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Our next method, `setupCollectionView()` method, is our basic setup for our
    collection view. We are doing something different with the `delegate` and `dataSource`.
    In the previous chapters, we set this up using the Outlet inspector.  This time,
    I am setting them up in code. Either can be done; there is no right or wrong way,
    but pick one way and stick with it in the entire app. I did both only for demonstration
    purposes.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们下一个方法，`setupCollectionView()`方法，是我们集合视图的基本设置。我们在`delegate`和`dataSource`上做了不同的处理。在前面的章节中，我们使用输出检查器设置了这个。这次，我是在代码中设置的。两种方法都可以，没有对错之分，但请选择一种并在整个应用中坚持使用。我之所以做了两种，只是为了演示目的。
- en: The next method requests user access to their camera or the photo library. The
    `checkSource()`, checks whether you are running this in the simulator or phone.
    If you are running the simulator, you automatically get the photo library since
    there is no camera. If you are on a device, then the user has access to their
    camera. Now, we need to add two more helper methods. Let's add them first and
    then discuss after.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个方法请求用户访问他们的相机或照片库。`checkSource()`检查你是否在模拟器或手机上运行。如果你在模拟器上运行，由于没有相机，你将自动获得照片库。如果你在设备上，则用户可以访问他们的相机。现在，我们需要添加两个额外的辅助方法。让我们首先添加它们，然后讨论。
- en: 'Add the following methods:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法：
- en: '[PRE15]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The first method `showApplyFilter()` is used to create the filter content inside
    of our collection view. The `filterItem(at:)` is used when the user selects a
    `filter` item.  We will pass the index position of the Collection View and create
    a filter item from it.  This item is used to display the currently selected filter
    in the larger image above our Collection View.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个方法`showApplyFilter()`用于在集合视图中创建过滤器内容。`filterItem(at:)`用于用户选择`filter`项时使用。我们将传递集合视图的索引位置并从中创建一个过滤器项。此项用于在集合视图上方的大图像中显示当前选中的过滤器。
- en: 'Let''s work on getting items displayed in our Collection View. As we have done
    in the past, we have a few methods that are required for our Collection View to
    display cells. Add the following extension under our private extension:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们努力在集合视图中显示项目。正如我们过去所做的那样，我们有几个必需的方法，用于我们的集合视图显示单元格。在我们的私有扩展下添加以下扩展：
- en: '[PRE16]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We have done this before, but let's go over the methods again. Our `-collectionView:numberOfItemsInSection:` is
    responsible for the number of items in each section. For this collection view,
    it means the number of filter items we are going to display. Next, we have `-numberOfSectionsInCollectionView:`,
    which tells our Collection View how many sections we have; in our case, we only
    have one. Finally, we have the `-collectionView:cellForItemAtIndexPath:` this
    is the method that gets run for every cell we need to create. In this method,
    we are creating a filter cell.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前已经这样做过了，但让我们再次回顾一下这些方法。`-collectionView:numberOfItemsInSection:`负责每个部分中的项目数量。对于这个集合视图，这意味着我们将要显示的过滤器项数量。接下来，我们有`-numberOfSectionsInCollectionView:`，它告诉我们的集合视图我们有多少个部分；在我们的情况下，我们只有一个。最后，我们有`-collectionView:cellForItemAtIndexPath:`，这是为每个需要创建的单元格运行的方法。在这个方法中，我们正在创建一个过滤器单元格。
- en: 'Now that we have our basic collection view set up, we need to make sure our
    Collection View is laid out correctly. Let''s add another extension in this file
    that is responsible for the layout of items for our Collection View. Add the following
    extension and method after the last extension we just added:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了基本的集合视图，我们需要确保我们的集合视图布局正确。在这个文件中添加另一个扩展，用于负责集合视图项的布局。在刚刚添加的最后一个扩展之后添加以下扩展和方法：
- en: '[PRE17]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This extension just sets up our cell size and spacing. Save the file. Next,
    let''s hook up our two `IBOutlets`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这个扩展只是设置了我们的单元格大小和间距。保存文件。接下来，让我们连接我们的两个`IBOutlets`：
- en: Open the `PhotoFilter.storyboard`.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`PhotoFilter.storyboard`。
- en: Select the View Controller in the Outline view, and then the Identity inspector
    in the Utilities panel.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“大纲”视图中选择视图控制器，然后在“实用工具”面板中选择“身份”检查器。
- en: Under Custom Class, in the Class drop-down menu, select or type `PhotoFilterViewController`
    and hit *Enter*.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“自定义类”下，在“类”下拉菜单中选择或输入`PhotoFilterViewController`并按*Enter*键。
- en: Then, select the Connections inspector in the Utilities panel.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在“实用工具”面板中选择“连接”检查器。
- en: Under Outlets, click and drag from the empty circle of each of the components,
    `imgExample`, `collectionView`, and `onPhotoTapped:`, to the `Image View`, `CollectionView
    View`, `Camera Icon (inside Navigation Bar at the top)`, respectively, in the
    scene. Now, please open the `PhotoFilterViewController.swift` file again, and
    let's add some more code.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“输出”部分，点击并拖动每个组件（`imgExample`、`collectionView`和`onPhotoTapped:`）的空圆圈，分别到场景中的`Image
    View`、`CollectionView View`和`导航栏顶部的相机图标`上。现在，请再次打开`PhotoFilterViewController.swift`文件，并添加一些额外的代码。
- en: 'Our Collection View is set up, but we need to add some more code before we
    can get everything else working. Next, we need to add two more extensions that
    handle when a user uses the camera and photo library and the second one that is
    for our custom protocol we created earlier. We will need to use `AVFoundation`
    and `MobileCoreServices` in our app. `AVFoundation` is a framework that gives
    us access to the camera and `MobileCoreServices` gives us access to the filters.
    At the top of the file under import `UIKit`:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的集合视图已经设置好了，但在我们能够使其他所有功能正常工作之前，我们需要添加一些额外的代码。接下来，我们需要添加两个额外的扩展，一个用于处理用户使用相机和照片库的情况，另一个用于我们之前创建的自定义协议。在我们的应用中，我们需要使用`AVFoundation`和`MobileCoreServices`。`AVFoundation`是一个框架，它为我们提供了访问相机的权限，而`MobileCoreServices`则为我们提供了访问滤镜的权限。在文件顶部，在`import
    UIKit`下面：
- en: '[PRE18]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, let''s add the first extension we will need for access to the camera and
    photo library:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们添加第一个扩展，用于访问相机和照片库：
- en: '[PRE19]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This extensions that we created for `UIImagePickerControllerDelegate` and `UINavigationControllerDelegate`
    have two methods we need to implement. We also have some custom helper methods
    that we use. The `-imagePickerControllerDidCancel: method()` is called when the
    user hit the Cancel button; therefore, we just dismiss the `Controller` and do
    nothing.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '我们为`UIImagePickerControllerDelegate`和`UINavigationControllerDelegate`创建的扩展有两个我们需要实现的方法。我们还有一些自定义的辅助方法。当用户点击取消按钮时，会调用`-imagePickerControllerDidCancel:
    method()`，因此我们只需关闭`Controller`并什么都不做。'
- en: 'The `-imagePickerController:didFinishPickingMediaWithInfo: method()` is used
    when we get the image from the `Picker` once it is dismissed. We set our thumbnail
    and image values here; then, we apply the `generate()` method in order to get
    them in a smaller size. Finally, we dismiss the `Controller` and then call `showApplyFilter()`
    to add our selected image to our filter view.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '当我们从`Picker`中获取图像并关闭它时，会使用`-imagePickerController:didFinishPickingMediaWithInfo:
    method()`。我们在这里设置缩略图和图像值；然后，我们应用`generate()`方法以获取更小的尺寸。最后，我们关闭`Controller`并调用`showApplyFilter()`来将选定的图像添加到我们的滤镜视图中。'
- en: The `showCameraUserInterface()` is used to show the camera interface along with
    the camera controls. As I mentioned earlier, the code first checks to see if you
    are running the simulator and, if so, it shows the photo library. If you are running
    on a device, you see the camera interface.  The `generate(image:ratio:)` method
    is what we use to take the images and crop them to the size we need and return
    an image in a smaller size. The photo library and camera images are quite large.
    Therefore, if we did not use this method, it would take a long time for UI to
    go through and do everything we need.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`showCameraUserInterface()` 用于显示相机界面以及相机控制。如我之前提到的，代码首先检查你是否正在运行模拟器，如果是，则显示相册。如果你正在设备上运行，你会看到相机界面。`generate(image:ratio:)`
    方法是我们用来获取图像并将它们裁剪到所需大小，并返回一个更小尺寸的图像的方法。相册和相机图像相当大。因此，如果我们不使用这个方法，UI 将需要很长时间才能完成我们所需的所有操作。'
- en: 'We just have one more extension to add, and that is for the custom protocols
    we created earlier. Add the following extension at the bottom of your `PhotoFilterViewController`:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要添加一个扩展，那就是之前创建的自定义协议。请在 `PhotoFilterViewController` 的底部添加以下扩展：
- en: '[PRE20]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `filterSelected(item:)` gets the selected filter item and applies the filter
    to our `imgExample`. We have an `if` statement that checks to see if the user
    selected `None` and, if so, shows the image without any filters. Before we can
    run it, we need to get the user's permission to use the camera or access the user's
    photo library.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`filterSelected(item:)` 获取选定的过滤器项，并将过滤器应用于我们的 `imgExample`。我们有一个 `if` 语句来检查用户是否选择了
    `None`，如果是，则显示没有过滤器的图像。在我们运行它之前，我们需要获取用户使用相机或访问用户相册的权限。'
- en: Getting permission
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取权限
- en: Apple requires that, if we use the camera or access the camera roll, we must
    let the user know that we are doing so and why. If you fail to do this, your code
    regarding the camera will not work and your app will be rejected when you submit
    it. Let's take care of this now.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果要求，如果我们使用相机或访问相册，我们必须让用户知道我们在做什么以及为什么这样做。如果你没有这样做，你的相机相关代码将无法工作，并且当你提交应用时，你的应用将被拒绝。让我们现在就处理这个问题。
- en: 'Open the `Info.plist` file and add the following two keys by hovering over
    any key and hitting the plus icon for the first key and then repeating for the
    second key:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `Info.plist` 文件，通过在任何键上悬停并点击第一个键的加号图标来添加以下两个键，然后对第二个键重复此操作：
- en: '`- NSPhotoLibraryUsageDescription`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`- NSPhotoLibraryUsageDescription`'
- en: '`- NSCameraUsageDescription`'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`- NSCameraUsageDescription`'
- en: 'For each key''s value, enter anything you want as an alert that the user will
    see. In the following example, the value is set as `The app uses your camera to
    take pictures`:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个键的值，输入任何你想要作为用户将看到的提示。在以下示例中，值被设置为 `The app uses your camera to take pictures`：
- en: '![](img/b3c3c983-671b-4a3c-bb33-d738260d8c1f.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b3c3c983-671b-4a3c-bb33-d738260d8c1f.png)'
- en: Please make sure if you are submitting this to the store that you put in the
    appropriate verbiage. This verbiage is seen by the user as well as Apple. Let's
    build and run the project by hitting the Play button (or using *cmd* + *R*). You
    should now be able to get a photo from the photo library or use the camera.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保如果你要将此提交到商店，你使用了适当的措辞。用户和苹果都能看到这个措辞。让我们通过点击播放按钮（或使用 *cmd* + *R*）来构建和运行项目。你现在应该能够从相册获取照片或使用相机。
- en: '![](img/adf72994-dd24-4815-bd02-9284256f4e34.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/adf72994-dd24-4815-bd02-9284256f4e34.png)'
- en: Once you have a photo, the window dismisses and you can apply a filter and save
    it.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了照片，窗口就会消失，你可以应用过滤器并保存它。
- en: '![](img/d4f95a4a-5447-4595-b21a-fd81402aa6d8.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d4f95a4a-5447-4595-b21a-fd81402aa6d8.png)'
- en: We are not actually saving the photo yet. We do this in the next chapter.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实际上还没有保存照片。我们将在下一章中这样做。
- en: Summary
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered a lot of new things. You learned how to use the
    camera and how to integrate the camera roll when a camera is not available. We
    used a `UICollectionView` horizontally for the first time, to put in a row of
    images. This chapter had a lot of code and there may be some parts that were confusing.
    Review these parts and make sure that you fully understand them. There are numerous
    things in this chapter that you can reuse in many other apps.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了许多新内容。你学习了如何使用相机以及如何在相机不可用的情况下集成相册。我们首次水平使用 `UICollectionView` 来放置一排图像。这一章有很多代码，可能有些部分让人困惑。请回顾这些部分，确保你完全理解它们。这一章中有许多内容你可以在许多其他应用中重用。
- en: In the next chapter, we will be able to save photos and reviews to restaurants.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将能够保存照片和餐厅评论。
