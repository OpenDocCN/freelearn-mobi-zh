- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Classes, Structures, and Enumerations
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类、结构和枚举
- en: In the previous chapter, you learned how to group instruction sequences using
    functions and closures.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了如何使用函数和闭包来分组指令序列。
- en: It’s time to think about how to represent complex objects in your code. For
    example, think about a car. You could use a `String` constant to store a car name
    and a `Double` variable to store a car price, but they are not associated with
    one another. You’ve seen that you can group instructions to make functions and
    closures. In this chapter, you’ll learn how to group constants and variables in
    a single entity using **classes** and **structures**, and how to manipulate them.
    You’ll also learn how to use **enumerations** to group a set of related values.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候考虑如何在代码中表示复杂对象了。例如，考虑一辆车。你可以使用一个`String`常量来存储车名，以及一个`Double`变量来存储车价，但它们之间并没有关联。你已经看到你可以通过分组指令来创建函数和闭包。在本章中，你将学习如何使用**类**和**结构**将常量和变量组合成一个单一实体，以及如何操作它们。你还将学习如何使用**枚举**来分组一组相关值。
- en: By the end of this chapter, you’ll have learned how to create and initialize
    a class, create a subclass from an existing class, create and initialize a structure,
    differentiate between classes and structures, and create an enumeration.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将学会如何创建和初始化一个类，从现有类创建子类，创建和初始化一个结构，区分类和结构，以及创建枚举。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Understanding classes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解类
- en: Understanding structures
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解结构
- en: Understanding enumerations
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解枚举
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The Xcode playground for this chapter is in the `Chapter07` folder of the code
    bundle for this book, which can be downloaded here:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的Xcode游乐场位于本书代码包的`Chapter07`文件夹中，可以在此处下载：
- en: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Eighth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Eighth-Edition%0D)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Eighth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Eighth-Edition%0D)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，看看代码的实际效果：
- en: '[https://youtu.be/Yl9UuzSR_oE](https://youtu.be/Yl9UuzSR_oE%0D)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://youtu.be/Yl9UuzSR_oE](https://youtu.be/Yl9UuzSR_oE%0D)'
- en: If you wish to start from scratch, create a new playground and name it `ClassesStructuresAndEnumerations`.
    You can type in and run all the code in this chapter as you go along. Let’s start
    with learning what a class is and how to declare and define it.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望从头开始，创建一个新的游乐场，并将其命名为`ClassesStructuresAndEnumerations`。你可以一边阅读一边输入并运行本章中的所有代码。让我们从学习什么是类以及如何声明和定义它开始。
- en: Understanding classes
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解类
- en: 'Classes are useful for representing complex objects, for example:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 类对于表示复杂对象非常有用，例如：
- en: Individual employee information for a company
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公司的个别员工信息
- en: Items for sale at an e-commerce site
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在电子商务网站上出售的物品
- en: Items you have in your house for insurance purposes
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你家中用于保险目的的物品
- en: 'Here’s what a class declaration and definition look like:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个类声明和定义的例子：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Every class has a descriptive name, and it contains variables or constants used
    to represent an object. Variables or constants associated with a class are called
    **properties**.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 每个类都有一个描述性的名称，它包含用于表示对象的变量或常量。与类关联的变量或常量称为**属性**。
- en: A class can also contain functions that perform specific tasks. The functions
    associated with a class are called **methods**.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 类还可以包含执行特定任务的函数。与类关联的函数称为**方法**。
- en: Once you have declared and defined a class, you can create **instances** of
    that class. Imagine you are creating an app for a zoo. If you have an `Animal`
    class, you can use instances of that class to represent different animals at the
    zoo. Each of these instances will have different values for their properties.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你声明并定义了一个类，你就可以创建该类的**实例**。想象一下，你正在为动物园创建一个应用程序。如果你有一个`Animal`类，你可以使用该类的实例来表示动物园中的不同动物。这些实例的每个属性都将有不同的值。
- en: To learn more about classes, visit [https://docs.swift.org/swift-book/documentation/the-swift-programming-language/classesandstructures](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/classesandstructures).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于类的信息，请访问[https://docs.swift.org/swift-book/documentation/the-swift-programming-language/classesandstructures](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/classesandstructures)。
- en: Let’s look at how to work with classes. You’ll learn how to declare and define
    classes, create instances based on the class declaration, and manipulate those
    instances. You’ll start by creating a class to represent animals in the next section.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用类。你将学习如何声明和定义类，根据类声明创建实例，并操作这些实例。你将从下一节开始创建一个表示动物的类。
- en: Creating a class declaration
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建类声明
- en: 'Let’s declare and define a class that can store details about animals. Add
    the following code to your playground:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们声明并定义一个可以存储关于动物详细信息的类。将以下代码添加到你的游乐场中：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You’ve just declared a very simple class named `Animal`. Convention dictates
    that class names start with a capital letter. This class has properties to store
    the name of the animal, the sound it makes, the number of legs it has, and whether
    it breathes oxygen or not. This class also has a method, `makeSound()`, that prints
    the noise it makes to the Debug area.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚声明了一个非常简单的名为 `Animal` 的类。惯例规定，类名应以大写字母开头。这个类有属性来存储动物的名字、它发出的声音、它有多少条腿以及它是否呼吸氧气。这个类还有一个名为
    `makeSound()` 的方法，它会将产生的噪音打印到调试区域。
- en: Now that you have an `Animal` class, let’s use it to create an instance that
    represents an animal in the next section.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了 `Animal` 类，让我们在下一节中使用它来创建一个表示动物的实例。
- en: Making an instance of the class
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建类的实例
- en: 'Once you have declared and defined a class, you can create instances of that
    class. You will now create an instance of the `Animal` class that represents a
    cat. Follow these steps:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你声明并定义了一个类，你就可以创建该类的实例。现在，你将创建一个表示猫的 `Animal` 类的实例。按照以下步骤操作：
- en: 'To create an instance of the `Animal` class, list all its properties and call
    its `makeSound()` method; type the following code after your class declaration
    and run it:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建 `Animal` 类的实例，列出所有属性并调用它的 `makeSound()` 方法；在你的类声明之后输入以下代码并运行：
- en: '[PRE2]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can access instance properties and methods by typing a dot after the instance
    name, followed by the property or method you want. You’ll see the values for the
    instance properties and method calls listed in the Debug area. Since the values
    are the default values assigned when the class was created, `name` and `sound`
    contain empty strings, `numberOfLegs` contains `0`, `breathesOxygen` contains
    `true`, and the `makeSound()` method prints an empty string.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在实例名称后键入一个点，然后跟随着你想要的属性或方法来访问实例属性和方法。你将在调试区域看到实例属性和方法的值。由于这些值是在创建类时分配的默认值，因此
    `name` 和 `sound` 包含空字符串，`numberOfLegs` 包含 `0`，`breathesOxygen` 包含 `true`，而 `makeSound()`
    方法打印一个空字符串。
- en: 'Let’s assign some values to this instance’s properties. Modify your code as
    shown:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们给这个实例的属性分配一些值。按照以下所示修改你的代码：
- en: '[PRE3]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, when you run the program, the following is displayed in the Debug area:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你运行程序时，以下内容将在调试区域显示：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The values for all the instance properties and the result of the `makeSound()`
    method are printed to the Debug area.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 所有实例属性值和 `makeSound()` 方法的输出都将打印到调试区域。
- en: Note that here, you create the instance first, and then assign values to that
    instance. It is also possible to assign the values when the instance is being
    created, and you can do this by implementing an **initializer** in your class
    declaration.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在这里，你首先创建实例，然后分配值给该实例。也可以在创建实例时分配值，这可以通过在类声明中实现一个 **初始化器** 来完成。
- en: 'An initializer is responsible for ensuring all the instance properties have
    valid values when a class is created. Let’s add an initializer for the `Animal`
    class. Modify your class definition as shown:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化器负责确保在创建类时所有实例属性都有有效的值。让我们为 `Animal` 类添加一个初始化器。按照以下所示修改你的类定义：
- en: '[PRE5]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you can see, the initializer uses the `init` keyword and has a list of parameters
    that will be used to set the property values. Note that the `self` keyword distinguishes
    the property names from the parameters. For example, `self.name` refers to the
    property and `name` refers to the parameter.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，初始化器使用了 `init` 关键字，并有一个参数列表，这些参数将用于设置属性值。请注意，`self` 关键字区分了属性名和参数。例如，`self.name`
    指的是属性，而 `name` 指的是参数。
- en: At the end of the initialization process, every property in the class should
    have a valid value.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始化过程结束时，类中的每个属性都应该有一个有效的值。
- en: 'You’ll see some errors in your code at this point as the function call does
    not have any parameters. You will need to update your function call to address
    this. Modify your code as shown and run it:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个阶段，你会在代码中看到一些错误，因为函数调用没有参数。你需要更新你的函数调用以解决这个问题。按照以下所示修改你的代码并运行：
- en: '[PRE6]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The results are the same as those in *Step 2*, but you created the instance
    and set its properties in a single instruction. Excellent!
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 结果与*步骤 2*中的相同，但你在一个指令中创建了实例并设置了其属性。太棒了！
- en: Now there are different types of animals, such as mammals, birds, reptiles,
    and fish. You could create a class for each type, but you could also create a
    **subclass** based on an existing class. Let’s see how to do that in the next
    section.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有不同类型的动物，如哺乳动物、鸟类、爬行动物和鱼类。你可以为每种类型创建一个类，但你也可以基于现有类创建一个**子类**。让我们在下一节中看看如何做到这一点。
- en: Making a subclass
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建子类
- en: A subclass of a class inherits all the methods and properties of an existing
    class. You can also add additional properties and methods to it if you wish. For
    instance, for an IT company, you could have `CustomerSupportAgent` as a subclass
    of `Employee`. This class would have all the properties of the `Employee` class,
    as well as additional properties required for the customer support role.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一个类的子类继承了一个现有类的所有方法和属性。如果你愿意，你还可以向其中添加额外的属性和方法。例如，对于一家IT公司，你可以有`CustomerSupportAgent`作为`Employee`类的子类。这个类将具有`Employee`类的所有属性，以及客户支持角色所需的额外属性。
- en: 'You’ll now create `Mammal`, a subclass of the `Animal` class. Follow these
    steps:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将创建`Mammal`，它是`Animal`类的子类。按照以下步骤进行：
- en: 'To declare the `Mammal` class, type in the following code after the `Animal`
    class declaration:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要声明`Mammal`类，在`Animal`类声明之后键入以下代码：
- en: '[PRE7]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Typing `: Animal` after the class name makes the `Mammal` class a subclass
    of the `Animal` class. It has all the properties and methods declared in the `Animal`
    class, and one additional property: `hasFurOrHair`. Since the `Animal` class is
    the parent of the `Mammal` class, you can refer to it as the superclass of the
    `Mammal` class.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '在类名后面键入`: Animal`会使`Mammal`类成为`Animal`类的子类。它具有在`Animal`类中声明的所有属性和方法，以及一个额外的属性：`hasFurOrHair`。由于`Animal`类是`Mammal`类的父类，你可以将其称为`Mammal`类的超类。'
- en: 'Modify your code that creates an instance of your class, as shown, and run
    it:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下所示修改创建你的类实例的代码，然后运行它：
- en: '[PRE8]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`cat` is now an instance of the `Mammal` class instead of the `Animal` class.
    As you can see, the results displayed in the Debug area are the same as before,
    and there are no errors. The value for `hasFurOrHair` has not been displayed,
    though. Let’s fix that.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`cat`现在是一个`Mammal`类的实例，而不是`Animal`类的实例。正如你所看到的，调试区域显示的结果与之前相同，没有错误。不过，`hasFurOrHair`的值尚未显示。让我们修复这个问题。'
- en: 'Type in the following code after all the other code in your playground to display
    the contents of the `hasFurOrHair` property and run it:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的游乐场中的所有其他代码之后键入以下代码以显示`hasFurOrHair`属性的值并运行它：
- en: '[PRE9]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Since the initializer for the `Animal` class does not have a parameter to assign
    a value to `hasFurOrHair`, the default value is used, and `true` will be displayed
    in the Debug area.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`Animal`类的初始化器没有参数来分配`hasFurOrHair`的值，将使用默认值，调试区域将显示`true`。
- en: You have seen that a subclass can have additional properties. A subclass can
    also have additional methods, and method implementation in a subclass can differ
    from the superclass implementation. Let’s see how to do that in the next section.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看到子类可以具有额外的属性。子类还可以具有额外的属性和方法，子类中的方法实现可以与超类实现不同。让我们在下一节中看看如何做到这一点。
- en: Overriding a superclass method
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 覆盖超类方法
- en: 'So far, you’ve been using multiple `print()` statements to display the values
    of the class instance. You’ll implement a `description()` method to display all
    the instance properties in the Debug area, so multiple `print()` statements will
    no longer be required. Follow these steps:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你一直在使用多个`print()`语句来显示类实例的值。你将实现一个`description()`方法来在调试区域显示所有实例属性，因此不再需要多个`print()`语句。按照以下步骤进行：
- en: 'Modify your `Animal` class declaration to implement a `description()` method,
    as shown:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下所示修改你的`Animal`类声明以实现`description()`方法：
- en: '[PRE10]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Modify your code as shown to use the `description()` method in place of the
    multiple `print()` statements, and run the program:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下所示修改你的代码，用`description()`方法代替多个`print()`语句，然后运行程序：
- en: '[PRE11]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You will see the following in the Debug area:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在调试区域看到以下内容：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As you can see, even though the `description()` method is not implemented in
    the `Mammal` class, it is implemented in the `Animal` class. This means it will
    be inherited by the `Mammal` class, and the instance properties will be printed
    to the Debug area. Note that the value for the `hasFurOrHair` property is missing,
    and you can’t put it in the `description()` method because the `hasFurOrHair`
    property does not exist for the `Animal` class.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，尽管`description()`方法在`Mammal`类中没有实现，但它却在`Animal`类中实现了。这意味着它将被`Mammal`类继承，并且实例属性将被打印到调试区域。请注意，`hasFurOrHair`属性的值缺失，并且您不能将其放入`description()`方法中，因为`Animal`类中没有`hasFurOrHair`属性。
- en: 'You can change the implementation of the `description()` method in the `Mammal`
    class to display the `hasFurOrHair` property’s value. Add the following code to
    your `Mammal` class definition and run it:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以更改`Mammal`类中`description()`方法的实现，以显示`hasFurOrHair`属性的值。将以下代码添加到您的`Mammal`类定义中并运行它：
- en: '[PRE13]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `override` keyword is used here to specify that the `description()` method
    implemented is to be used in place of the superclass implementation. The `super`
    keyword is used to call the superclass implementation of `description()`. The
    value in `hasFurOrHair` is then added to the string returned by `super.description()`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`override`关键字在这里用于指定实现的`description()`方法将替换超类实现。`super`关键字用于调用超类的`description()`实现。然后，`hasFurOrHair`的值被添加到`super.description()`返回的字符串中。'
- en: 'You will see the following in the Debug area:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在调试区域看到以下内容：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `hasFurOrHair` property’s value is displayed in the Debug area, showing
    that you are using the `Mammal` subclass implementation of the `description()`
    method.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`hasFurOrHair`属性的值在调试区域中显示，表明您正在使用`Mammal`子类的`description()`方法实现。'
- en: You’ve created class and subclass declarations and made instances of both. You’ve
    also added initializers and methods to both. Cool! Let’s look at how to declare
    and use structures in the next section.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经创建了类和子类声明，并为两者创建了实例。您还为两者添加了初始化器和方法。太酷了！让我们在下一节中看看如何声明和使用结构体。
- en: Understanding structures
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解结构体
- en: Like classes, structures also group together properties and methods used to
    represent an object and do specific tasks. Remember the `Animal` class you created?
    You can also use a structure to accomplish the same thing. There are differences
    between classes and structures though, and you will learn more about those later
    in this chapter.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 与类一样，结构体也组合了用于表示对象和执行特定任务的属性和方法。还记得您创建的`Animal`类吗？您也可以使用结构体来完成相同的事情。不过，类和结构体之间还是有区别的，您将在本章后面了解更多。
- en: 'Here’s what a structure declaration and definition look like:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是结构体声明和定义的示例：
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As you can see, a structure is very similar to a class. It also has a descriptive
    name and can contain properties and methods. You can also create instances of
    a structure.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，结构体与类非常相似。它也有一个描述性的名称，可以包含属性和方法。您也可以创建结构体的实例。
- en: To learn more about structures, visit [https://docs.swift.org/swift-book/documentation/the-swift-programming-language/classesandstructures](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/classesandstructures).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 想要了解更多关于结构体的信息，请访问[https://docs.swift.org/swift-book/documentation/the-swift-programming-language/classesandstructures](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/classesandstructures)。
- en: Let’s look at how to work with structures. You’ll learn how to declare and define
    structures, create instances based on the structure, and manipulate them. You’ll
    start by creating a structure to represent reptiles in the next section.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何与结构体一起工作。您将学习如何声明和定义结构体，基于结构体创建实例，并对其进行操作。您将在下一节中创建一个结构体来表示爬行动物。
- en: Creating a structure declaration
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建结构体声明
- en: 'Continuing with the animal theme, let’s declare and define a structure that
    can store details about reptiles. Add the following code after all the other code
    in your playground:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 继续动物主题，让我们声明并定义一个可以存储关于爬行动物详细信息的结构体。在您的游乐场中所有其他代码之后添加以下代码：
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As you can see, this is almost the same as the `Animal` class declaration you
    did earlier. Structure names should also start with a capital letter, and this
    structure has properties to store the name of the animal, the sound it makes,
    how many legs it has, whether it breathes oxygen, and whether it has fur or hair.
    This structure also has a method, `makeSound()`, that prints the sound it makes
    to the Debug area.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这几乎与你之前所做的`Animal`类声明相同。结构体的名称也应该以大写字母开头，并且这个结构体有属性来存储动物的名字、它发出的声音、它有多少条腿、它是否呼吸氧气以及它是否有毛皮或毛发。这个结构体还有一个`makeSound()`方法，它会将发出的声音打印到调试区域。
- en: Now that you have a `Reptile` structure declaration, let’s use it to create
    an instance representing a snake in the next section.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了`Reptile`结构体的声明，让我们在下一节中使用它来创建一个表示蛇的实例。
- en: Making an instance of the structure
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建结构体的实例
- en: 'As with classes, you can create instances from a structure declaration. You
    will now create an instance of the `Reptile` structure that represents a snake,
    print out the property values of that instance, and call the `makeSound()` method.
    Type the following after all the other code in your playground and run it:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 与类一样，你可以从结构体声明中创建实例。现在，你将创建一个表示蛇的`Reptile`结构体的实例，打印出该实例的属性值，并调用`makeSound()`方法。在你的游乐场中的所有其他代码之后输入以下内容并运行它：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Note that you did not need to implement an initializer; structures automatically
    get an initializer for all their properties called the **memberwise initializer**.
    Neat! The following will be displayed in the Debug area:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你不需要实现一个初始化器；结构体自动为其所有属性获得一个名为**成员初始化器**的初始化器。真方便！以下内容将在调试区域显示：
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Even though the structure declaration is very similar to the class declaration,
    there are two differences between a class and a structure:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管结构体声明与类声明非常相似，但类和结构体之间有两个区别：
- en: Structures cannot inherit from another structure
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构体不能从另一个结构体继承
- en: Classes are **reference types**, while structures are **value types**
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类是**引用类型**，而结构体是**值类型**
- en: Let’s look at the difference between value types and reference types in the
    next section.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看下一节中值类型和引用类型之间的区别。
- en: Comparing value types and reference types
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较值类型和引用类型
- en: Classes are reference types. This means when you assign a class instance to
    a variable, you are storing the memory location of the original instance in the
    variable instead of the instance itself.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 类是引用类型。这意味着当你将类实例赋值给变量时，你是在变量中存储原始实例的内存位置，而不是实例本身。
- en: Structures are value types. This means when you assign a structure instance
    to a variable, that instance is copied, and whatever changes you make to the original
    instance do not affect the copy.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 结构体是值类型。这意味着当你将结构体实例赋值给变量时，该实例被复制，你对原始实例所做的任何更改都不会影响副本。
- en: 'Now, you will create an instance of a class and a structure and observe the
    differences between them. Follow these steps:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将创建一个类的实例和一个结构体的实例，并观察它们之间的差异。按照以下步骤操作：
- en: 'You’ll start by creating a variable containing a structure instance and assigning
    it to a second variable, then change the value of a property in the second variable.
    Type in the following code and run it:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将首先创建一个包含结构体实例的变量，并将其赋值给第二个变量，然后更改第二个变量中属性的值。输入以下代码并运行它：
- en: '[PRE19]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In this example, you declared a structure, `SampleValueType`, that contains
    one property, `sampleProperty`. Next, you created an instance of that structure
    and assigned it to a variable, `a`. After that, you assigned `a` to a new variable,
    `b`. Then, you changed the `sampleProperty` value of `b` to `20`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，你声明了一个包含一个属性`sampleProperty`的结构体`SampleValueType`。然后，你创建了该结构体的一个实例并将其赋值给变量`a`。之后，你将`a`赋值给一个新的变量`b`。然后，你将`b`的`sampleProperty`值更改为`20`。
- en: When you print out the `sampleProperty` value of `a`, `10` is printed in the
    Debug area, showing that any changes made to the `sampleProperty` value of `b`
    do not affect the `sampleProperty` value of `a`. This is because when you assigned
    `a` to `b`, a copy of `a` was assigned to `b`, so they are separate instances
    that don’t affect one another.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当你打印出`a`的`sampleProperty`值时，调试区域将显示`10`，这表明对`b`的`sampleProperty`值的任何更改都不会影响`a`的`sampleProperty`值。这是因为当你将`a`赋值给`b`时，`a`的一个副本被赋值给`b`，因此它们是独立的实例，不会相互影响。
- en: 'Next, you’ll create a variable containing a class instance and assign it to
    a second variable, then change the value of a property in the second variable.
    Type in the following code and run it:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你将创建一个包含类实例的变量，并将其分配给第二个变量，然后更改第二个变量的属性值。输入以下代码并运行它：
- en: '[PRE20]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In this example, you declared a class, `SampleReferenceType`, that contains
    one property, `sampleProperty`. Then, you created an instance of that class and
    assigned it to a variable, `c`. After that, you assigned `c` to a new variable,
    `d`. Next, you changed the `sampleProperty` value of `d` to `20`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，你声明了一个包含一个属性 `sampleProperty` 的类 `SampleReferenceType`。然后，你创建了该类的实例并将其分配给一个变量
    `c`。之后，你将 `c` 分配给一个新的变量 `d`。接下来，你将 `d` 的 `sampleProperty` 值更改为 `20`。
- en: When you print out the `sampleProperty` value of `c`, `20` is printed in the
    Debug area, showing that any changes made to `c` or `d` affect the same `SampleReferenceType`
    instance.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当你打印出 `c` 的 `sampleProperty` 值时，在调试区域中会打印出 `20`，这表明对 `c` 或 `d` 的任何更改都会影响相同的
    `SampleReferenceType` 实例。
- en: Now, the question is, which should you use, classes or structures? Let’s explore
    that in the next section.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，问题是，你应该使用类还是结构体？让我们在下一节中探讨这个问题。
- en: Deciding between classes and structures
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在类和结构体之间做出选择
- en: You’ve seen that you can use either a class or a structure to represent a complex
    object. So, which should you use?
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看到你可以使用类或结构体来表示复杂对象。那么，你应该使用哪一个呢？
- en: It is recommended to use structures unless you need something that requires
    classes, such as subclasses. This helps prevent some subtle errors that may occur
    due to classes being reference types.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你需要类才能实现某些功能，例如子类，否则建议使用结构体。这有助于防止由于类是引用类型而可能发生的某些微妙错误。
- en: Fantastic! Now that you have learned about classes and structures, let’s look
    at enumerations, which allow you to group related values, in the next section.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在你已经了解了类和结构体，让我们看看枚举，它允许你将相关值分组，在下一节中。
- en: Understanding enumerations
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解枚举
- en: 'Enumerations allow you to group related values, such as the following:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举允许你将相关值分组，例如以下内容：
- en: Compass directions
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指南针方向
- en: Traffic light colors
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交通信号灯颜色
- en: The colors of a rainbow
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 彩虹的颜色
- en: To understand why enumerations would be ideal for this purpose, let’s consider
    the following example.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解为什么枚举对于这个目的来说非常理想，让我们考虑以下示例。
- en: 'Imagine you’re programming a traffic light. You can use an integer variable
    to represent different traffic light colors where `0` is red, `1` is yellow, and
    `2` is green, like this:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 想象你正在编写交通信号灯的代码。你可以使用一个整型变量来表示不同的交通信号灯颜色，其中 `0` 代表红色，`1` 代表黄色，`2` 代表绿色，如下所示：
- en: '[PRE21]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Although this is a possible way to represent a traffic light, what happens when
    you assign `3` to `trafficLightColor?` This is an issue as `3` does not represent
    a valid traffic light color. So, it would be better if we could limit the possible
    values of `trafficLightColor` to the colors it can display.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这是一种表示交通信号灯的方法，但当将 `3` 分配给 `trafficLightColor` 时会发生什么？这是一个问题，因为 `3` 并不代表有效的交通信号灯颜色。因此，如果我们能将
    `trafficLightColor` 的可能值限制为它可以显示的颜色，那就更好了。
- en: 'Here’s what an enumeration declaration and definition look like:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个枚举声明和定义的例子：
- en: '[PRE22]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Every enumeration has a descriptive name, and the body contains the associated
    values for that enumeration.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 每个枚举都有一个描述性名称，其主体包含该枚举的关联值。
- en: To learn more about enumerations, visit [https://docs.swift.org/swift-book/documentation/the-swift-programming-language/enumerations](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/enumerations).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于枚举的信息，请访问 [https://docs.swift.org/swift-book/documentation/the-swift-programming-language/enumerations](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/enumerations)。
- en: Let’s look at how to work with enumerations. You’ll learn how to create and
    manipulate them. You’ll start by creating one to represent a traffic light color
    in the next section.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用枚举。你将学习如何创建和操作它们。你将从下一节创建一个表示交通信号灯颜色的枚举开始。
- en: Creating an enumeration
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个枚举
- en: 'Let’s create an enumeration to represent a traffic light. Follow these steps:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个枚举来表示交通信号灯。按照以下步骤操作：
- en: 'Add the following code to your playground and run it:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到您的游乐场中并运行它：
- en: '[PRE23]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This creates an enumeration named `TrafficLightColor`, which groups together
    the red, yellow, and green values. The value for the `trafficLightColor` variable
    is limited to `red`, `yellow`, and `green`; setting any other value will generate
    an error.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这创建了一个名为 `TrafficLightColor` 的枚举，它将红色、黄色和绿色值分组在一起。`trafficLightColor` 变量的值限制为
    `red`、`yellow` 和 `green`；设置任何其他值将生成错误。
- en: 'Just like classes and structures, enumerations can contain methods. Let’s add
    a method to `TrafficLightColor`. Modify your code as shown to make `TrafficLightColor`
    return a string representing the traffic light color and run it:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就像类和结构体一样，枚举也可以包含方法。让我们给 `TrafficLightColor` 添加一个方法。按照以下所示修改你的代码，使 `TrafficLightColor`
    返回一个表示交通灯颜色的字符串，并运行它：
- en: '[PRE24]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `description()` method returns a string depending on the value of `trafficLightColor`.
    Since the value of `trafficLightColor` is `TrafficLightColor.red`, **red** will
    appear in the Debug area.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`description()` 方法返回一个字符串，取决于 `trafficLightColor` 的值。由于 `trafficLightColor`
    的值为 `TrafficLightColor.red`，**红色**将出现在调试区域。'
- en: You’ve learned how to create and use enumerations to store grouped values, and
    how to add methods to them. Good job!
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经学会了如何创建和使用枚举来存储分组值，以及如何向它们添加方法。做得好！
- en: Summary
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to declare complex objects using a class, create
    instances of a class, create a subclass, and override a class method. You also
    learned how to declare a structure, create instances of a structure, and understand
    the difference between reference and value types. Finally, you learned how to
    use enumerations to represent a specific set of values.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何使用类声明复杂对象，如何创建类的实例，如何创建子类，以及如何重写类方法。你还学习了如何声明结构体，创建结构体的实例，以及理解引用类型和值类型之间的区别。最后，你学习了如何使用枚举来表示一组特定的值。
- en: You now know how to use classes and structures to represent complex objects,
    and how to use enumerations to group related values together in your own programs.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你知道了如何使用类和结构体来表示复杂对象，以及如何在你的程序中使用枚举将相关值分组在一起。
- en: In the next chapter, you will study how to specify common traits in classes
    and structures using protocols, extend the capability of built-in classes using
    extensions, and handle errors in your programs.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何使用协议在类和结构体中指定常见特性，如何使用扩展扩展内置类的功能，以及如何在程序中处理错误。
- en: Join us on Discord!
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 社区！
- en: Read this book alongside other users, experts, and the author himself. Ask questions,
    provide solutions to other readers, chat with the author via Ask Me Anything sessions,
    and much more. Scan the QR code or visit the link to join the community.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他用户、专家和作者本人一起阅读这本书。提问，为其他读者提供解决方案，通过 Ask Me Anything 会话与作者聊天，等等。扫描二维码或访问链接加入社区。
- en: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift%0D)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift%0D)'
- en: '[![](img/QR_Code2370024260177612484.png)](https://packt.link/ios-Swift%0D)'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/QR_Code2370024260177612484.png)](https://packt.link/ios-Swift%0D)'
