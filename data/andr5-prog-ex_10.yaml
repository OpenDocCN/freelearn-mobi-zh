- en: Chapter 10. Publishing and Marketing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。发布和营销
- en: Having covered all the topics in this book, and if you have not already done
    so, you are now in a position to create, develop, and market an app of your own
    design. There is of course much more to learn about Android 5, and Android in
    general, but exploring the SDK further is quite simple, now we understand how
    some of the most frequently used structures and objects are applied. Once we understand
    how a listener interface is implemented, then it is simply a matter of looking
    up in the documentation when we want to imply a new one.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖了本书的所有主题后，如果你还没有这样做，你现在可以创建、开发和营销自己设计的应用了。当然，关于Android 5以及Android本身还有很多东西要学习，但现在我们已经了解了如何应用一些最常用的结构和对象，进一步探索SDK就变得相当简单。一旦我们了解了监听器接口的实现方式，那么查找文档以了解何时需要引入新的接口就变得简单了。
- en: The entire purpose of developing an app for Android is to distribute it. Although
    there are many ways to make our work available to others, the obvious choice is
    via the Android Play Store. This final chapter is a step by step guide on how
    to do that. On the way, we will see how to make our apps compatible with earlier
    versions, keeping much of the Android 5 API's functionality as well as many of
    the Material Design features programmed into our Lollipop UIs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 开发Android应用的整个目的就是为了分发它。尽管有众多方式可以让我们的工作对他人可用，但最明显的选择是通过Android Play Store。本章将一步步指导你如何做到这一点。在这个过程中，我们将了解如何使我们的应用与早期版本兼容，保留Android
    5 API的大部分功能以及许多编程到我们的Lollipop UI中的Material Design特性。
- en: 'In this chapter, you will:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将：
- en: Making apps backward-compatible
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作向后兼容的应用
- en: See how to create alternative layouts for older systems
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解如何为旧系统创建替代布局
- en: Apply a Material Theme to older versions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Material主题应用于旧版本
- en: Replace the Action Bar with a Material Design Toolbar
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用Material Design工具栏替换ActionBar
- en: Prepare an app for publication
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备应用发布
- en: Create a digital certificate and a private key
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建数字证书和私钥
- en: Generate a signed APK file
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成一个签名APK文件
- en: Prepare promotional media
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备促销媒体
- en: Complete a Store Listing
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成商店列表
- en: Publish an app
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布应用
- en: Learn how to distribute apps via e-mail and websites
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何通过电子邮件和网站分发应用
- en: License an app
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许可应用
- en: Provide links to a product or a publisher
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供产品或出版商的链接
- en: Add official branding
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加官方品牌
- en: Build a template project for in-app billing
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个用于应用内付费的模板项目
- en: Include an AdMob banner advertisement
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含一个AdMob横幅广告
- en: Making apps backward-compatible
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作向后兼容的应用
- en: Throughout this book, we have focused entirely on developing for Android 5,
    and although the number of devices running this platform is bound to increase
    dramatically, they still only make up a small proportion of all active Android
    devices. In fact, **Jelly** **Bean** and **KitKat** (APIs 16 through 19) still
    make up the vast majority of platform versions accessing the Google Play Store.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们一直专注于为Android 5开发，尽管运行这个平台设备的数量注定会大幅增加，但它们仍然只占所有活跃Android设备的一小部分。实际上，**Jelly
    Bean**和**KitKat**（API 16至19）仍然占据了访问Google Play Store的平台版本中的绝大多数。
- en: '![Making apps backward-compatible](img/B04321_10_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![制作向后兼容的应用](img/B04321_10_01.jpg)'
- en: Tip
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: An up-to-date report of the relative distribution of platforms over all active
    devices can be found at [http://developer.android.com/about/dashboards/index.html](http://developer.android.com/about/dashboards/index.html).
    This page also contains similar information about currently used screen sizes
    and densities, and can greatly facilitate how we target users.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在[http://developer.android.com/about/dashboards/index.html](http://developer.android.com/about/dashboards/index.html)找到关于所有活跃设备上平台相对分布的最新报告。这个页面还包含了关于当前使用的屏幕尺寸和密度的类似信息，可以极大地帮助我们定位用户。
- en: Obviously, we want our apps to reach as many people as possible and many of
    the apps we develop take very little adjustment to make them available to users
    running earlier versions. Fortunately, Android provides support libraries, such
    as **v7 AppCompat r21** (or higher) to facilitate this.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们希望我们的应用能够触及尽可能多的人，我们开发的许多应用只需做很少的调整就可以让运行早期版本的用户使用。幸运的是，Android提供了支持库，如**v7
    AppCompat r21**（或更高版本）来简化这个过程。
- en: Adding the v7 support libraries
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加v7支持库
- en: Realistically, we should consider carefully which platforms we want our app
    to be available for, long before we start developing; for demonstration purposes,
    however, in this next short exercise we will make an app that we developed earlier
    in the book available to devices running API 16 and greater.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们在开始开发之前应该仔细考虑我们希望我们的应用在哪些平台上可用；然而，为了演示目的，在接下来的简短练习中，我们将使我们在书中早期开发的应用对运行API
    16及更高版本设备的设备可用。
- en: Open the **Ancient Britain** app that we developed earlier.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们之前开发的**Ancient Britain**应用。
- en: Open the `manifest` file.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`manifest`文件。
- en: 'Inside the root node, include this tag:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在根节点内部，包括以下标签：
- en: '[PRE0]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Open the `build.gradle` file and add these dependencies:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`build.gradle`文件并添加以下依赖项：
- en: '[PRE1]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Edit the default configuration, like so:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑默认配置，如下所示：
- en: '[PRE2]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Prepare an AVD or handset targeting API level 16:![Adding the v7 support libraries](img/B04321_10_02.jpg)
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备一个针对API级别16的AVD或手机：![添加v7支持库](img/B04321_10_02.jpg)
- en: Run the app on the device. It will appear to work normally until you try to
    swipe the images on the DetailActivity screen, when it will crash.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备上运行应用。它看起来会正常工作，直到你尝试在DetailActivity屏幕上滑动图片，那时它会崩溃。
- en: Open the `DetailActivity.java` file.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`DetailActivity.java`文件。
- en: 'In the `onShowPress()` and the `onFling()` methods, there is a call to `detailImage.setElevation()`.
    Apply conditional clauses to each, like so:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onShowPress()`和`onFling()`方法中，有一个调用`detailImage.setElevation()`。对每个方法应用条件语句，如下所示：
- en: '[PRE3]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Run the app again to check that this fix has worked.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行应用以检查此修复是否已生效。
- en: Declaring `uses-sdk` in the manifest is essential as this is how the Play Store
    decides which devices it is visible to. The **v7 AppCompat r21+** library is what
    makes backward-compatibility possible. Among other things, it provides very passable,
    Material Design widgets and other UI components. There are also libraries for
    the **RecyclerView** and **CardView** and, although the shadows are not dynamic,
    this is a small price to pay, considering the vast number of users our app can
    now reach.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在清单中声明`uses-sdk`是必要的，因为这是Play Store决定哪些设备可以看到应用的方式。**v7 AppCompat r21+**库使得向后兼容成为可能。除此之外，它还提供了非常不错的Material
    Design小部件和其他UI组件。还有针对**RecyclerView**和**CardView**的库，尽管阴影不是动态的，但考虑到我们的应用现在可以触及的大量用户，这只是一个微不足道的代价。
- en: Changing the minimum SDK level is only the first thing we need to do to make
    our apps available to older versions As we saw, APIs with a level of 21 or higher
    will cause the app to crash when called, as with the `setElevation()` call in
    this task. By being able to query a device's API at runtime, we have a way to
    work around this limitation and often with very little loss to the quality of
    user experience.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 更改最低SDK级别是我们使我们的应用对旧版本可用所需做的第一件事。正如我们所见，21级或更高版本的API会在调用时导致应用崩溃，就像在这个任务中的`setElevation()`调用一样。通过能够在运行时查询设备的API，我们有办法绕过这个限制，并且通常用户体验的质量损失很小。
- en: Another convenient way to counter this problem, is to create separate layouts
    for different platforms. You can create a `res/layout/v-21/` directory for your
    Material Design layouts and older alternatives in `res/layout/`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方便的方法来解决这个问题，是为不同的平台创建不同的布局。你可以为你的Material Design布局创建一个`res/layout/v-21/`目录，并在`res/layout/`中创建旧版替代方案。
- en: To really bring the **Material** **Design** feel to older platforms, there is
    a lot more we can do to with these libraries, such as making our customized themes
    available, and this is what we will do next.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要真正将**Material** **Design**的感觉带到旧平台上，我们可以利用这些库做更多的事情，比如使我们的自定义主题可用，这就是我们接下来要做的。
- en: Applying Material Design to older platforms
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Material Design应用于旧平台
- en: Usually when developing an app for pre-API 21 platforms, we set the minimum
    SDK at the lowest target level when we create the app rather than reverse-engineering
    the process as we just did. Here, we will see how we can add many **Material Design**
    features. Developing this way round is also a good way to judge just how far backwards
    we want our app to be, and how much functionality we are prepared to lose.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通常在为API 21之前的平台开发应用时，我们在创建应用时将最低SDK设置为最低的目标级别，而不是像我们刚才做的那样逆向工程过程。在这里，我们将看到如何添加许多**Material
    Design**功能。以这种方式开发也是一个很好的方法来判断我们希望我们的应用向后兼容到什么程度，以及我们愿意放弃多少功能。
- en: 'This next exercise demonstrates how to build an app for API 16 and apply Material
    Design to the UI. To do this, follow these steps:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个下一个练习演示了如何为API 16构建一个应用并应用Material Design到UI。为此，请按照以下步骤操作：
- en: Start a new project in the Android Studio called **Material Jelly Bean**.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个名为**Material Jelly Bean**的新项目。
- en: Do not use `com.example` in the package name.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要在包名中使用`com.example`。
- en: Select **Phone and Tablet** as the form factor and **API 16** as the minimum
    SDK. Note the number of devices that support your app.![Applying Material Design
    to older platforms](img/B04321_10_03.jpg)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**手机和平板**作为形态因子，并将**API 16**作为最小SDK。注意支持你的应用设备数量。![将Material Design应用于旧平台](img/B04321_10_03.jpg)
- en: Select **Blank Activity** and leave everything else as is, or choose your own
    values.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**空白活动**并保持其他一切不变，或者选择你自己的值。
- en: 'Add the following to the root node of the manifest file:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加到清单文件的根节点：
- en: '[PRE4]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Open the `res/values/styles.xml` file and fill it out like this:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`res/values/styles.xml`文件并按照以下方式填写：
- en: '[PRE5]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Open the `activity_main.xml` file.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`activity_main.xml`文件。
- en: 'Change the root layout from a relative layout to a linear one and set its orientation
    by adding this:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将根布局从相对布局更改为线性布局，并通过添加以下内容设置其方向：
- en: '[PRE6]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Convert `TextView` to this `EditText`:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`TextView`转换为这个`EditText`：
- en: '[PRE7]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Run the app at this point and our Material Theme palette will have been applied:![Applying
    Material Design to older platforms](img/B04321_10_04.jpg)
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此点运行应用，我们的Material主题调色板将被应用：![将Material Design应用于旧平台](img/B04321_10_04.jpg)
- en: 'Disable the Action Bar by setting the theme in the `styles.xml` file to:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`styles.xml`文件中设置主题来禁用ActionBar：
- en: '[PRE8]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Above `EditText`, place this toolbar:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`EditText`上方放置这个工具栏：
- en: '[PRE9]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You may wish to adjust the padding of the layout in the `dimens.xml` file.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可能希望调整`dimens.xml`文件中布局的填充。
- en: 'Open your main activity file and add the following code to the `onCreate()`
    method:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的主活动文件，并将以下代码添加到`onCreate()`方法中：
- en: '[PRE10]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This will generate an import error. Use the quick fix to select the v7 Toolbar.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将生成一个导入错误。使用快速修复选择v7 Toolbar。
- en: Run the app on a API 16 device or emulator to see the Material Design style
    Toolbar.![Applying Material Design to older platforms](img/B04321_10_05.jpg)
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在API 16设备或模拟器上运行应用，以查看Material Design风格的工具栏。![将Material Design应用于旧平台](img/B04321_10_05.jpg)
- en: The **AppCompat** family of themes provides nearly all of the Material Design
    features we have become used to. The colors we have chosen to represent our app
    still appear throughout the app in familiar places and tinting various widgets,
    giving our app a consistent and recognizable feel. However, certain elements are
    still lost, and if you run the app on an Android 5 device, you will get the following
    output.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**AppCompat**主题系列提供了我们习惯的大多数Material Design功能。我们选择的代表我们应用的颜色仍然在应用中熟悉的地点出现，并着色各种小部件，使我们的应用具有一致和可识别的感觉。然而，某些元素仍然丢失，如果你在Android
    5设备上运行应用，你会得到以下输出。'
- en: '![Applying Material Design to older platforms](img/B04321_10_06.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![将Material Design应用于旧平台](img/B04321_10_06.jpg)'
- en: There are two important things to notice about the way we implemented a **Material
    Toolbar**. First, notice that our `MainActivity` class extends **ActionBarActivity**
    and this has to be the case for any app we build using AppCompat, if it is to
    have a Toolbar. Second, note that the way we inflated it, unlike most views, with
    `setSupportActionBar()`. These are the only two real differences between the ways
    we are accustomed to managing Toolbars; other than this, everything can be done
    with classes and methods that we are familiar with.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 关于我们实现**Material Toolbar**的方式有两个重要的事情需要注意。首先，注意我们的`MainActivity`类扩展了**ActionBarActivity**，并且对于任何使用AppCompat构建的应用来说，如果它要有工具栏，这必须是这样。其次，注意我们通过`setSupportActionBar()`方式填充它，这与大多数视图不同。这是我们习惯于管理工具栏的方式之间的唯一两个真正差异；除此之外，其他一切都可以使用我们熟悉的类和方法来完成。
- en: There are one or two other things that can be done to bring Material Design
    to earlier versions but, for now, this is enough to set us on our way to bringing
    our apps to as many people as possible. Next, we move on to the serious subject
    of publishing our apps to the world.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将Material Design引入早期版本，可以做一些其他的事情，但到目前为止，这已经足够让我们开始将我们的应用带给尽可能多的人。接下来，我们将转向一个更严肃的主题，即向世界发布我们的应用。
- en: Publishing apps
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布应用
- en: It goes without saying that you will have exhaustively tested your app on a
    wide variety of handsets and emulators, probably prepared your promotional material,
    and checked out **Google Play Policies and Agreements**. There are many things
    to consider before publication, such as **content rating** and **country distribution**.
    From a programming point of view there are just three things that we need to check
    before we proceed.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 不言而喻，你已经在各种手机和模拟器上彻底测试了你的应用，可能已经准备好了你的推广材料，并检查了**Google Play政策和协议**。在发布之前有许多事情需要考虑，例如**内容评级**和**国家分布**。从编程的角度来看，在我们继续之前，我们只需要检查三件事情。
- en: 'Remove all logging from the project, such as:'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从项目中移除所有日志，例如：
- en: '[PRE11]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Make sure you have an application `label` and `icon` declared in your manifest,
    for example:'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保你在清单文件中声明了应用`标签`和`图标`，例如：
- en: '[PRE12]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Ensure you have declared all the necessary permissions in the manifest, for
    example:'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保你在清单文件中声明了所有必要的权限，例如：
- en: '[PRE13]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We are now just three steps from seeing our app on the Google Play Store. All
    we need to do is generate a **Signed Release APK**, register as a **Google Play
    Developer**, and finally upload our app to the Store or publish it on our own
    site. There are also one or two other ways of publishing an app and we will see
    how they are done at the end of the section. First, though, we will begin by generating
    an APK that is ready for uploading onto the Google Play Store.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只需再走三个步骤就能在Google Play商店看到我们的应用。我们所需做的就是生成一个**签名发布APK**，注册为**Google Play开发者**，最后将我们的应用上传到商店或在我们自己的网站上发布。还有一两种发布应用的方法，我们将在本节末尾看到它们是如何操作的。不过，首先，我们将开始生成一个准备好上传到Google
    Play商店的APK。
- en: Generating a signed APK
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成签名APK
- en: All published Android apps require a digitally signed certificate. This is used
    to prove the authenticity of an app. Unlike many other digital certificates, there
    is no authority and you hold the signed key, which clearly has to be securely
    protected. To do this, we need to generate a private key and then use it to generate
    a signed APK. This can all be done in the Android Studio with the Generate Signed
    APK Wizard. These steps will take you through it.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 所有发布的Android应用都需要一个数字签名的证书。这用于证明应用的真伪。与许多其他数字证书不同，这里没有权威机构，你持有签名密钥，这显然需要得到安全保护。为此，我们需要生成一个私钥，然后使用它来生成签名APK。所有这些都可以在Android
    Studio的“生成签名APK向导”中完成。这些步骤将引导你完成。
- en: Open the app you want to publish.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你想要发布的应用。
- en: Start the Generate Signed APK Wizard from the **Build | Generate Signed APK...**
    menu.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**构建 | 生成签名APK...**菜单启动“生成签名APK向导”。
- en: Select **Create new...** on the first screen.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一个屏幕上选择**创建新...**。
- en: On the next screen, provide a path and name for your key store along with a
    strong password.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，为你的密钥库提供路径和名称，并设置一个强密码。
- en: Do the same for the Alias.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于别名也做同样的操作。
- en: Select a Validity of greater than 27 years, like so:![Generating a signed APK](img/B04321_10_07.jpg)
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个大于27年的有效期，如下所示：![生成签名APK](img/B04321_10_07.jpg)
- en: Fill in at least one of the Certificate fields. Click on **OK** and you will
    be taken back to the wizard.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 至少填写一个证书字段。点击**确定**，你将被带回到向导界面。
- en: Select **release** as the Build Variant and click on **Finish**.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**发布**作为构建变体，然后点击**完成**。
- en: You now have a signed APK ready for publication.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你已经准备好了一个可用于发布的签名APK。
- en: The key store (`.jks` file) can be used to store any number of keys (aliases).
    Normally you would have a different key for each app you publish, and you must
    use the same key when producing updates of an app. Google require certificates
    to be valid until at least 22nd October, 2033 and any number that surpasses this
    date will suffice.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥库（`.jks`文件）可以用来存储任意数量的密钥（别名）。通常，你会为每个发布的应用使用不同的密钥，并且在生成应用的更新时必须使用相同的密钥。Google要求证书至少有效到2033年10月22日，任何超过这个日期的数字都适用。
- en: Tip
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'IMPORTANT: Keep at least one secure backup of your keys. If you lose them,
    you will not be able to develop future versions of those apps.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示：至少保留一个密钥的安全备份。如果你丢失了它们，你将无法开发那些应用的未来版本。
- en: 'Most Android apps are packaged this way with one exception: Google Wear. If
    you are publishing a Wear app, you will first need to visit [http://developer.android.com/training/wearables/apps/packaging.html](http://developer.android.com/training/wearables/apps/packaging.html).
    With our digital certificate signed and in place, we are now only two steps from
    being published. If you have not already done so, it is time to register as a
    Google Play Developer.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数安卓应用都是以这种方式打包的，只有一个例外：谷歌穿戴。如果你正在发布一个穿戴应用，你首先需要访问 [http://developer.android.com/training/wearables/apps/packaging.html](http://developer.android.com/training/wearables/apps/packaging.html)。在我们的数字证书签发并就绪后，我们现在只需两个步骤就可以发布。如果你还没有这么做，现在是时候注册成为谷歌
    Play 开发者了。
- en: Registering as a developer
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注册为开发者
- en: As with Signing an APK, registering as a developer is similarly straightforward.
    Note that Google charges a one-off fee of USD 25 and 30% of any revenue your app
    may generate. The following directions assume that you already have a Google account.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 与签署 APK 类似，注册开发者账号同样简单。请注意，谷歌会收取一次性费用 25 美元以及你应用可能产生的收入的 30%。以下说明假设你已经拥有一个谷歌账号。
- en: 'Review **Supported Locations** at:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下位置查看**支持位置**：
- en: '[https://support.google.com/googleplay/android-developer/table/3541286?hl=en&rd=1](https://support.google.com/googleplay/android-developer/table/3541286?hl=en&rd=1)'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://support.google.com/googleplay/android-developer/table/3541286?hl=en&rd=1](https://support.google.com/googleplay/android-developer/table/3541286?hl=en&rd=1)'
- en: 'Go to the Developer Play Console at:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往开发者 Play 控制台：
- en: '[https://play.google.com/apps/publish/](https://play.google.com/apps/publish/)'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://play.google.com/apps/publish/](https://play.google.com/apps/publish/)'
- en: Sign in with your Google account and enter the following information:![Registering
    as a developer](img/B04321_10_08.jpg)
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你的谷歌账号登录并输入以下信息：![注册为开发者](img/B04321_10_08.jpg)
- en: Read and accept the **Google Play Developer Distribution Agreement**.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 阅读并接受**谷歌 Play 开发者分发协议**。
- en: Pay the USD 25 with Google Checkout, creating an account if necessary, and that's
    it; you are now a registered Google Developer.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用谷歌 Checkout 支付 25 美元，如果需要则创建一个账号，这样你就成为了一名注册的谷歌开发者。
- en: If you intend to make your apps available worldwide, then it is always worth
    checking the Supported Locations page, as it changes regularly. The only thing
    left to do is upload our app, which we will do now.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算让应用在全球范围内可用，那么检查支持位置页面总是值得的，因为它会定期变化。剩下要做的就是上传我们的应用，我们现在就要这么做。
- en: Publishing an app on the Google Play Store
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在谷歌 Play 商店发布应用
- en: Uploading and publishing our apps to the Play Store is done through the **Developer
    Console**. As you will see, there is a lot of information and promotional material
    that we could provide about our app during this process. Provided, you have followed
    the previous steps in this chapter and have a release-ready signed `.apk` file,
    complete the following instructions to publish it. Alternatively, you may just
    want to have a look at what is involved at this point and what form the promotional
    material will take. In this case, ensure you have the following four images and
    a signed APK, and select **Save Draft** at the end rather than **Publish app**.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 将我们的应用上传并发布到 Play 商店是通过**开发者控制台**完成的。正如你将看到的，在这个过程中，我们可以提供大量关于我们应用的信息和推广材料。如果你已经遵循了本章前面的步骤并且有一个准备发布的已签名的
    `.apk` 文件，请完成以下说明以发布它。或者，你可能只是想看看目前涉及的内容以及推广材料的形式。在这种情况下，确保你拥有以下四张图像和一个已签名的 APK，并在最后选择**保存草稿**而不是**发布应用**。
- en: At least two screenshots of your app. These must not have any side that is shorter
    than 320 px or longer than 3840 px.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少两张应用截图。这些截图的任何一边都不能短于 320 像素或长于 3840 像素。
- en: If you want your app to be visible on the Play Store to users searching for
    apps designed for tablets, then you should prepare at least one 7-inch and one
    10 inch screenshot.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你希望你的应用在 Play 商店对搜索平板电脑应用的用户可见，那么你应该准备至少一张 7 英寸和一张 10 英寸的截图。
- en: A **Hi-res icon** image of 512 x 512 px.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一张 512 x 512 像素的**高分辨率图标**图像。
- en: 'A **Feature Graphic** of 1024 x 500 px, for example; with these images prepared
    and a signed `.apk` file, we have all we need to start. Decide how much, if anything,
    you wish to charge for the app and then follow these instructions:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 1024 x 500 像素的**特色图形**，例如；准备好这些图像和已签名的 `.apk` 文件，我们就需要开始。决定你希望为应用收取多少费用（如果有的话），然后按照以下说明操作：
- en: Open your **Developer Console**.
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的**开发者控制台**。
- en: Supply a **Title** and click on the **Upload APK** button.
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供一个**标题**并点击**上传 APK**按钮。
- en: Click on **Upload your first APK to Production**.
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**上传第一个生产版 APK**。
- en: Locate your signed `app-release.apk` file. It will be in `AndroidStudioProjects\YourApp\app`.
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位您的已签名 `app-release.apk` 文件。它将在 `AndroidStudioProjects\YourApp\app` 中。
- en: Drag-and-drop this into the space suggested.
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其拖放到建议的空间中。
- en: When this is completed, you will be taken to the application page.
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当此操作完成后，您将被带到应用页面。
- en: Work your way through the top four sections:![Publishing an app on the Google
    Play Store](img/B04321_10_09.jpg)
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 逐步完成前四个部分：![在 Google Play 商店发布应用](img/B04321_10_09.jpg)
- en: Complete all required fields until the **Publish app** button becomes clickable.
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成所有必填字段，直到 **发布应用** 按钮变为可点击状态。
- en: If you need help, the **Why can't I publish?** link above the button will list
    uncompleted compulsory fields.
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您需要帮助，按钮上方的 **为什么我不能发布？** 链接将列出未完成的必填字段。
- en: When all the required fields are completed, click on the **Publish app** (or
    **Save draft**) button at the top of the page.
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当所有必填字段都填写完毕后，点击页面顶部的 **发布应用**（或**保存草稿**）按钮。
- en: Congratulations! You are now a published Android Developer.
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 恭喜！您现在是一名已发布的 Android 开发者。
- en: We now know how to publish our apps on the Play Store. There are, of course,
    many other app markets, and they all have their own uploading procedures. Google
    Play however provides the widest possible audience and is the obvious choice for
    publication.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道如何将我们的应用发布到 Play 商店。当然，还有许多其他的应用市场，它们都有自己的上传流程。然而，Google Play 提供了最广泛的受众群体，是发布应用的明显选择。
- en: 'Before we move on, there are two other methods of distribution that we will
    look at: publishing on a website and distributing via e-mail.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，还有两种其他分发方法我们将要探讨：在网站上发布和通过电子邮件分发。
- en: Distributing by e-mail and websites
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过电子邮件和网站分发
- en: The first of these two methods is as simple to do as it sounds. If you attach
    the APK to an e-mail and it's opened on an Android device, the user will be offered
    the opportunity to install the app when the attachment is opened. On more recent
    devices, they will be able to tap an install button directly from the e-mail.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法中的第一种与听起来一样简单。如果您将 APK 附件附加到电子邮件中，并在 Android 设备上打开，当附件打开时，用户将有机会安装应用。在较新的设备上，他们可以直接从电子邮件中点击安装按钮。
- en: Tip
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: For both these methods, your users will have to allow the installation of **unknown
    sources** in the security settings of their devices.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这两种方法，您的用户必须在设备的设置中允许安装 **未知来源**。
- en: Distributing your app from your website is almost as simple as e-mailing it.
    All you need to do is host the APK file on your site somewhere and provide a download
    link along the lines of `<a href="download_button.jpg" download="your_apk">`.
    When browsing your site from an Android device, a tap on your link will install
    your app on their device.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 从您的网站分发应用几乎与通过电子邮件发送一样简单。您需要做的只是将 APK 文件托管在您的网站上某个位置，并提供类似 `<a href="download_button.jpg"
    download="your_apk">` 的下载链接。当从 Android 设备浏览您的网站时，点击您的链接将在他们的设备上安装您的应用。
- en: Tip
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Distribution by e-mail provides no protection against piracy and should only
    be used with this in mind. The other methods are as secure as we could hope, but
    if you would like to take extra measures then Google offers a **Licensing Service**
    that can be found at [developer.android.com/google/play/licensing](http://developer.android.com/google/play/licensing).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 通过电子邮件分发无法提供对盗版的保护，因此应仅在此前提下使用。其他方法与我们期望的同样安全，但如果您想采取额外措施，Google 提供了可以在 [developer.android.com/google/play/licensing](http://developer.android.com/google/play/licensing)
    找到的 **许可服务**。
- en: Whether we have released a paid app or a free one, we want to be able to reach
    as many users as possible. Google provides several tools to help us with this,
    as well as ways to monetize our apps, as we shall see next.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 无论我们发布的是付费应用还是免费应用，我们都希望能够触及尽可能多的用户。Google 提供了几个工具来帮助我们做到这一点，以及我们将要看到的应用盈利方式。
- en: Promoting and monetizing apps
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 推广和盈利应用
- en: Very few apps become successful without first being well promoted. There are
    countless ways to do this and you will, no doubt, be well ahead of the curve on
    how to promote your products. To help you reach a wider audience, Google provides
    some handy tools to assist with promotion.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 很少有应用在没有先进行良好推广的情况下取得成功。有无数种方法可以做到这一点，毫无疑问，您在如何推广您的产品方面将领先一步。为了帮助您触及更广泛的受众，Google
    提供了一些实用的工具来协助推广。
- en: 'After looking at promotion tools, we will explore two ways to make money from
    our app: in-app payments and advertising.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看推广工具之后，我们将探讨两种从我们的应用中赚钱的方法：应用内支付和广告。
- en: Promoting an app
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 推广应用
- en: There are two very simple methods, provided by Google, to help steer people
    towards our products on the Play Store; links from both websites and our apps
    and the **Google Play Badge,** which provides official branding to our links.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Google 提供了两种非常简单的方法来帮助引导人们访问 Play Store 上的我们的产品；来自两个网站和我们的应用的链接以及 **Google Play
    徽章**，它为我们提供了官方的品牌标识。
- en: We can add links to both individual apps and our publisher page, where all our
    apps can be browsed. We can include these links in our apps as well as our websites.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以添加指向单个应用和我们的出版商页面的链接，在那里可以浏览我们所有的应用。我们可以在我们的应用和网站上包含这些链接。
- en: 'To include a link to a specific app''s page in the Play Store, use the full
    package name, as found in the Manifest, in the following format:'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在 Play Store 中包含指向特定应用的页面的链接，请使用在 Manifest 中找到的完整包名，格式如下：
- en: '[PRE14]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To Include this within an Android app, use:'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在 Android 应用中包含此链接，请使用：
- en: '[PRE15]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If you want a link to your publisher page and a list of all your products,
    use:'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您想要一个指向您的出版商页面以及所有产品的列表的链接，请使用：
- en: '[PRE16]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Make the same changes as before when linking from an app:'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当从应用中链接时，请进行与之前相同的更改：
- en: '[PRE17]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To link to a specific search result, use:'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要链接到特定的搜索结果，请使用：
- en: '[PRE18]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To use an official Google Badge as your link, replace one of the above elements
    with the highlighted HTML here:'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要使用官方 Google 徽章作为链接，请将上述元素之一替换为以下突出显示的 HTML：
- en: '[PRE19]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The **Badge** comes in two sizes, `60.png` and `45.png`, and two styles, `"Android
    app on Google Play"` and `"Get it on Google Play"`. Simply change the relevant
    code to select the Badge that best suits your purpose.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**徽章**有两种尺寸，`60.png` 和 `45.png`，以及两种样式，`"Android app on Google Play"` 和 `"Get
    it on Google Play"`。只需更改相关代码以选择最适合您目的的徽章。'
- en: '![Promoting an app](img/B04321_10_10.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![推广应用](img/B04321_10_10.jpg)'
- en: With our app published and with well-placed links to our Play Store page, it
    is now time to consider how we can profit from the inevitable downloads, and so
    we come to how to monetize our Android app.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用发布并放置了指向 Play Store 页面的链接后，现在是时候考虑如何从不可避免的下载中获利了，因此我们来到了如何货币化我们的 Android
    应用。
- en: Monetizing an app
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用货币化
- en: 'There are many ways to make money from an app, but two of the most popular
    and effective are: **in-app billing** (**IAB**) and **advertising**. In-app billing
    can become quite involved and perhaps deserves an entire chapter to itself. Here,
    we will see how to build an effective template that you can use as a foundation
    for an in-app product you might develop. It will include all the libraries and
    packages needed, along with some very useful helper classes.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 从应用中赚钱有很多方法，但最受欢迎和有效的方法有两种：**内购**（**IAB**）和**广告**。内购可能相当复杂，也许值得单独一章来介绍。在这里，我们将看到如何构建一个有效的模板，您可以用它作为您可能开发的应用内产品的基石。它将包括所有需要的库和包，以及一些非常有用的辅助类。
- en: Including **Google AdMob** advertisements in our apps is, in contrast, a very
    familiar process to us by now. An ad is in effect just another View, and can be
    identified and referenced just like any other Android widget. The final exercise
    of this chapter, and indeed this book, will be constructing a simple working AdMob
    demo. First, though, let us take a look at in-app billing.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，在我们的应用中包含 **Google AdMob** 广告对我们来说现在是一个非常熟悉的过程。广告实际上只是另一个 View，可以像任何其他
    Android 小部件一样被识别和引用。本章和本书的最终练习将是构建一个简单的 AdMob 示例。不过，首先，让我们看看内购。
- en: In-app billing
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内购
- en: 'There are a large number of products that users can purchase from within an
    app, from upgrades and unlockables to in-game objects and currencies. Whatever
    the user is buying, the Google checkout process ensures they will pay in the same
    way as they pay for other Play Store products. From the developer''s point of
    view, each purchase will boil down to responding to the click of a button. We
    will need to install the **Google Play Billing Library**, and add an **AIDL**
    file and some helper classes to our project. Here is how:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以在应用内购买大量产品，从升级和可解锁内容到游戏内对象和货币。无论用户购买什么，Google 结账流程都确保他们将以与其他 Play Store
    产品相同的方式支付。从开发者的角度来看，每次购买都将归结为对按钮点击的响应。我们需要安装 **Google Play Billing Library**，并在我们的项目中添加一个
    **AIDL** 文件和一些辅助类。以下是方法：
- en: Start a new Android project or open one you want to add in-app billing to.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始一个新的 Android 项目或打开一个你想添加内购功能的项目。
- en: Open the SDK Manager.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 SDK 管理器。
- en: Under **Extras**, make sure you have the **Google Play Billing Library** installed.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Extras** 下，确保已安装 **Google Play Billing Library**。
- en: 'Open the manifest and apply the following permission:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Manifest 并应用以下权限：
- en: '[PRE20]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the Project pane of the Studio, right click on **app** and select **New**
    | **Folder** | **AIDL Folder**.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Studio 的项目面板中，右键单击 **app** 并选择 **新建** | **文件夹** | **AIDL 文件夹**。
- en: From this folder as **aidl**, create a **New** | **Package**, and fill out the
    resultant dialog like so:![In-app billing](img/B04321_10_11.jpg)
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从此文件夹作为 **aidl**，创建一个 **新建** | **包**，并按照如下填写结果对话框：![应用内购买](img/B04321_10_11.jpg)
- en: Locate and copy the `IinAppBillingService.aidl` file in the `sdk\extras\google\play_billing`
    directory.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `sdk\extras\google\play_billing` 目录中找到并复制 `IinAppBillingService.aidl` 文件。
- en: Paste the file into the `com.android.vending.billing` package.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件粘贴到 `com.android.vending.billing` 包中。
- en: Create a **New | Package** in the Java folder, selecting `...\app\src\main\java`
    from the dialog box.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Java 文件夹中创建一个 **新建 | 包**，从对话框中选择 `...\app\src\main\java`。
- en: Name the package `com.`**your.package.name**`.util` and click on **Finish**.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将包命名为 `com.`**你的包名**`.util` 并点击 **完成**。
- en: From the `play_billing` directory, locate and open the `TrivialDrive\src\com\example\android\trivialdrivesample\util`
    folder.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `play_billing` 目录中，找到并打开 `TrivialDrive\src\com\example\android\trivialdrivesample\util`
    文件夹。
- en: Copy the nine Java files into the `util` package you just created.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将九个 Java 文件复制到您刚刚创建的 `util` 包中。
- en: You now have a working template for any app you wish to include on in-app purchasing.
    Alternatively, you can complete the above steps on a project where you have already
    developed your in-app products. Either way, you will no doubt be taking advantage
    of the `IabHelper` class, which vastly simplifies the coding, providing listeners
    for every step of the purchasing process. Documentation on IAB can be found at
    [http://developer.android.com/google/play/billing/billing_reference.html](http://developer.android.com/google/play/billing/billing_reference.html).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经为任何希望包含应用内购买的应用有了工作模板。或者，您可以在已经开发好应用内产品的项目中完成上述步骤。无论哪种方式，您无疑都将利用 `IabHelper`
    类，该类极大地简化了编码，为购买过程的每个步骤提供了监听器。有关 IAB 的文档可以在 [http://developer.android.com/google/play/billing/billing_reference.html](http://developer.android.com/google/play/billing/billing_reference.html)
    找到。
- en: Tip
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Before you can start to implement in-app purchases, you will need to secure
    a **License Key** for your app. This can be found in the app's details in your
    developer console.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在您开始实现应用内购买之前，您需要为您的应用获取一个 **许可证密钥**。这可以在您的开发者控制台中的应用详情中找到。
- en: Paid apps and in-app products are just two ways to make money from an app, and
    many people choose another, and often lucrative, route for monetizing their work
    through advertising. **Google AdMob** allows for a great deal of flexibility and
    a familiar programming interface, as we shall see next.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 付费应用和在应用内产品只是从应用中赚钱的两种方式，许多人选择另一种，通常是更有利可图的，通过广告来货币化他们的工作。**Google AdMob** 提供了很大的灵活性以及熟悉的编程接口，正如我们接下来将要看到的。
- en: Including an advertisement
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包含广告
- en: There are many ways that we can earn money from advertising, but **AdMob** provides
    one of the easiest. Not only does the service allow you to select what types of
    product you wish to advertise but it also provides great analytical tools and
    seamless payment into your Checkout account.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从广告中赚取很多钱的方法，但 **AdMob** 提供了其中最简单的一种。该服务不仅允许您选择您希望广告的产品类型，而且还提供了出色的分析工具和无缝的付款到您的
    Checkout 账户。
- en: On top of this, an **AdView** can be treated programmatically in a way that
    is almost identical to the methods we are used to and familiar with, as we shall
    see in this final exercise where we will develop a Hello World app with a demo
    banner AdMob ad.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，**AdView** 可以以与我们习惯和熟悉的方法几乎相同的方式进行编程处理，正如我们将在最后的练习中看到的那样，我们将开发一个带有演示横幅 AdMob
    广告的 Hello World 应用。
- en: Before you start this exercise, you will need to have signed up for an AdMob
    account at [http://www.google.com/admob/](http://www.google.com/admob/).
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始这个练习之前，您需要先在 [http://www.google.com/admob/](http://www.google.com/admob/)
    上注册一个 AdMob 账户。
- en: Open a project you want to test ads on or start a new Android project.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个您想要测试广告的项目或开始一个新的 Android 项目。
- en: Make sure you have the Google Repository installed with the SDK Manager.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您已通过 SDK 管理器安装了 Google 仓库。
- en: 'In the `build.gradle` file, add this dependency:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `build.gradle` 文件中，添加以下依赖项：
- en: '[PRE21]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Rebuild the project.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新构建项目。
- en: 'In the manifest, set these two permissions:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在清单中设置这两个权限：
- en: '[PRE22]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Within the `application` node, add this `meta-data` tag:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `application` 节点内，添加以下 `meta-data` 标签：
- en: '[PRE23]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Include this second Activity to the manifest:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此第二个 Activity 包含到清单中：
- en: '[PRE24]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Add the following string to the `res/values/strings.xml` file:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下字符串添加到 `res/values/strings.xml` 文件中：
- en: '[PRE25]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Open the `main_activity.xml` layout file.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`main_activity.xml`布局文件。
- en: 'Add this second namespace to the root layout:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此第二个命名空间添加到根布局中：
- en: 'Add this `AdView` under the `TextView`:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`TextView`下添加这个`AdView`：
- en: '[PRE26]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In the `onCreate()` method of the MainActivity, insert these lines:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainActivity`的`onCreate()`方法中插入以下行：
- en: '[PRE27]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Now test the app on a device.![Including an advertisement](img/B04321_10_12.jpg)
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在设备上测试应用。![包含广告](img/B04321_10_12.jpg)
- en: More or less everything we did here resembles the way that we would program
    any other element, with one or two exceptions. The use of the `ACCESS_NETWORK_STATE`
    permission is not strictly necessary; it is used here to check for a connection
    prior to requesting an ad.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数我们在这里做的事情都类似于我们编程其他元素的方式，只有一个或两个例外。使用`ACCESS_NETWORK_STATE`权限并不是严格必要的；在这里使用它是为了在请求广告之前检查连接。
- en: Any Activity that displays an ad will require a separate ID and be declared
    in the manifest. The ID supplied here is for testing purposes only and it is forbidden
    to use live IDs for testing purposes. There are only six classes in the `android.gms.ads`
    package and documentation for all of them can be found at [https://developers.google.com/android/reference/com/google/android/gms/ads/package-summary](https://developers.google.com/android/reference/com/google/android/gms/ads/package-summary).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 任何显示广告的活动都需要一个单独的ID，并在清单中声明。这里提供的ID仅用于测试目的，并且禁止使用实时ID进行测试。`android.gms.ads`包中只有六个类，所有这些类的文档都可以在[https://developers.google.com/android/reference/com/google/android/gms/ads/package-summary](https://developers.google.com/android/reference/com/google/android/gms/ads/package-summary)找到。
- en: AdMob ads come in two flavors, the banner that we saw here and the interstitial,
    or full screen. We only dealt with banner ads here but interstitial ads are handled
    in a very similar manner. With a knowledge of how to implement paid apps, in-app
    billing and AdMob, we are now armed to reap the rewards of our hard work and make
    the very most of our apps.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: AdMob广告有两种类型，这里我们看到的是横幅广告和插屏广告，或全屏广告。我们在这里只处理了横幅广告，但插屏广告的处理方式非常相似。掌握了如何实现付费应用、应用内购买和AdMob的知识，我们现在可以收获我们辛勤工作的回报，并最大限度地发挥我们应用的优势。
- en: Summary
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we have covered the final aspect of the app development process:
    packaging and deployment. We began by making our apps backward-compatible, including
    many of the features we had originally designed for Android 5; by doing, so we
    were able to reach a far wider audience. We continued by preparing and then publishing
    our app in the Google Play Store. Once published, we saw how easy it is to promote
    and then monetize an Android app.'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了应用开发过程的最后一个方面：打包和部署。我们首先使我们的应用向后兼容，包括我们最初为Android 5设计的许多功能；通过这样做，我们能够触及更广泛的受众。然后我们准备并在Google
    Play Store发布我们的应用。一旦发布，我们就看到了推广和货币化Android应用是多么容易。
- en: This concludes our journey into the world of Android development. We have gone
    from installation to publication and hopefully covered most of the components
    required for the apps that you are planning. If you are new to developing or IDEs
    such as the Android Studio and have worked your way through this book, then what
    was previously a daunting set of tools will now seem like a familiar and productive
    place to work.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这标志着我们进入Android开发世界的旅程结束。我们从安装到发布，并希望覆盖了你计划中的应用所需的大部分组件。如果你是开发新手或IDE，如Android
    Studio，并且已经通读了这本书，那么之前令人生畏的工具集现在将显得熟悉且富有成效的工作场所。
- en: The Android platform will, no doubt, continue to flourish and develop in new
    and unexpected ways. Android 5 is the perfect entry point; with Material Design
    at its core and the most powerful set of mobile APIs available, things can only
    get better and brighter for Android developers.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，Android平台将继续以新的和意想不到的方式繁荣发展。Android 5是一个完美的入门点；以Material Design为核心，拥有最强大的移动API集合，对于Android开发者来说，事情只会变得更好、更光明。
