- en: '*Chapter 23*: Getting Started with SwiftUI'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 23 章*：SwiftUI 入门'
- en: In previous chapters, you created the **user interface** (**UI**) for the *Let's
    Eat* app using storyboards. The process involved dragging objects representing
    views to a storyboard, creating outlets in view controller files, and connecting
    the two together.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，您使用故事板为 *Let's Eat* 应用程序创建了 **用户界面**（**UI**）。这个过程涉及将表示视图的对象拖动到故事板中，在视图控制器文件中创建输出，并将两者连接起来。
- en: This chapter will focus on **SwiftUI**, an easy and innovative way to create
    apps across all Apple platforms. Instead of specifying the user interface using
    storyboards, SwiftUI uses a declarative Swift syntax, and works with new Xcode
    design tools to keep your code and design in sync. Features such as Dynamic Type,
    Dark Mode, localization, and accessibility are automatically supported.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将重点介绍 **SwiftUI**，这是一种简单且创新的方法，可以在所有 Apple 平台上创建应用程序。SwiftUI 使用声明性的 Swift
    语法来指定用户界面，而不是使用故事板，并与新的 Xcode 设计工具协同工作，以保持代码和设计的同步。动态类型、深色模式、本地化和无障碍功能都自动支持。
- en: In this chapter, you will build a simplified version of the *Let's Eat* app
    using SwiftUI. This app will just contain the `LetsEat` project you have been
    working on. You will create a new SwiftUI Xcode project instead.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将使用 SwiftUI 构建一个简化版的 *Let's Eat* 应用程序。此应用程序将仅包含您一直在工作的 `LetsEat` 项目。您将创建一个新的
    SwiftUI Xcode 项目。
- en: You'll start by adding and configuring SwiftUI views to create the `UIKit` and
    SwiftUI views together by adding and configuring a map view for the **Restaurant
    Detail** screen. Finally, you'll create the **Restaurant Detail** screen.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 您将首先添加并配置 SwiftUI 视图，通过添加和配置一个用于 **餐厅详情** 屏幕的地图视图，将 `UIKit` 和 SwiftUI 视图一起创建。最后，您将创建
    **餐厅详情** 屏幕。
- en: By the end of this chapter, you'll have learned how to build a SwiftUI app that
    reads model objects, presents them in a list, and allows navigation to a second
    screen containing a map view. You can then implement this for your own projects.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将学习如何构建一个 SwiftUI 应用程序，该应用程序可以读取模型对象，以列表形式展示它们，并允许导航到包含地图视图的第二屏幕。然后您可以为您的项目实现此功能。
- en: 'The following topics will be covered:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 以下内容将涵盖：
- en: Creating a SwiftUI Xcode project
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 SwiftUI Xcode 项目
- en: Creating the **Restaurant List** screen
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 **餐厅列表** 屏幕
- en: Adding model objects and configuring navigation
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加模型对象和配置导航
- en: Using UIKit and SwiftUI views together
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 UIKit 和 SwiftUI 视图一起
- en: Creating the Restaurant Detail screen
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建餐厅详情屏幕
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will create a new SwiftUI Xcode project for this chapter.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您将为本章创建一个新的 SwiftUI Xcode 项目。
- en: 'The resource files and completed Xcode project for this chapter are in the
    `Chapter23` folder of the code bundle for this book, which can be downloaded here:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节的资源文件和完成的 Xcode 项目位于本书代码包的 `Chapter23` 文件夹中，您可以在此处下载：
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，以查看代码的实际运行效果：
- en: '[https://bit.ly/3DnHuIN](https://bit.ly/3DnHuIN)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bit.ly/3DnHuIN](https://bit.ly/3DnHuIN)'
- en: Let's start by creating a new SwiftUI Xcode project for your SwiftUI app in
    the next section.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从下一节开始创建一个新的 SwiftUI Xcode 项目，用于您的 SwiftUI 应用程序。
- en: Creating a SwiftUI Xcode project
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 SwiftUI Xcode 项目
- en: A SwiftUI Xcode project is created in the same way as a regular Xcode project,
    but you configure it to use SwiftUI instead of storyboards. As you will see, the
    user interface is generated entirely in code, and you'll be able to see changes
    in the user interface immediately as you modify your code.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 SwiftUI Xcode 项目的方式与常规 Xcode 项目相同，但您需要配置它以使用 SwiftUI 而不是故事板。正如您将看到的，用户界面完全由代码生成，您在修改代码时可以立即看到用户界面的变化。
- en: Important Information
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: You can watch a video of Apple's SwiftUI presentation from WWDC 2020 at [https://developer.apple.com/videos/play/wwdc2020/10119](https://developer.apple.com/videos/play/wwdc2020/10119).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://developer.apple.com/videos/play/wwdc2020/10119](https://developer.apple.com/videos/play/wwdc2020/10119)
    上观看 Apple 在 WWDC 2020 上的 SwiftUI 演示视频。
- en: You can watch a video showing what's new in SwiftUI from WWDC 2021 at [https://developer.apple.com/videos/play/wwdc2021/10018/](https://developer.apple.com/videos/play/wwdc2021/10018/).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://developer.apple.com/videos/play/wwdc2021/10018/](https://developer.apple.com/videos/play/wwdc2021/10018/)
    上观看 WWDC 2021 中 SwiftUI 新功能的视频。
- en: Apple's official SwiftUI documentation can be found online at [https://developer.apple.com/xcode/swiftui/](https://developer.apple.com/xcode/swiftui/).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在网上找到Apple官方的SwiftUI文档，网址为[https://developer.apple.com/xcode/swiftui/](https://developer.apple.com/xcode/swiftui/)。
- en: 'Let''s begin by creating a new SwiftUI Xcode project. Follow these steps:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个新的SwiftUI Xcode项目开始。按照以下步骤操作：
- en: Create a new Xcode project.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的Xcode项目。
- en: 'Click **iOS**. Select the **App** template, and then click **Next**:![Figure
    23.1: Project template screen with iOS App template selected'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**iOS**。选择**App**模板，然后点击**下一步**：![图23.1：选择iOS App模板的项目模板屏幕
- en: '](img/Figure_23.01_B17469.jpg)'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_23.01_B17469.jpg)'
- en: 'Figure 23.1: Project template screen with iOS App template selected'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图23.1：选择iOS App模板的项目模板屏幕
- en: The `LetsEatSwiftUI`
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: The `LetsEatSwiftUI`
- en: '**Interface:** **SwiftUI**'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**界面：** **SwiftUI**'
- en: The other settings should already be set. Make sure all the checkboxes are unticked.
    Click **Next** when done.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其他设置应该已经设置好了。确保所有复选框都没有勾选。完成后点击**下一步**。
- en: Choose a location to save the `LetsEatSwiftUI` project and click **Create**.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择保存`LetsEatSwiftUI`项目的位置并点击**创建**。
- en: 'Your project appears on the screen, with the `ContentView` file selected in
    the Project navigator. You''ll see the content of this file on the left side of
    the Editor area, and a canvas containing a preview on the right side:![Figure
    23.3: Xcode showing LetsEatSwiftUI project'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的项目将显示在屏幕上，项目导航器中选中了`ContentView`文件。您将在编辑器区域的左侧看到此文件的内容，以及包含预览的画布在右侧：![图23.3：显示LetsEatSwiftUI项目的Xcode
- en: '](img/Figure_23.03_B17469.jpg)'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_23.03_B17469.jpg)'
- en: 'Figure 23.3: Xcode showing LetsEatSwiftUI project'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图23.3：显示LetsEatSwiftUI项目的Xcode
- en: 'The `ContentView` file contains code that will generate the initial view for
    your app. Click the Scheme menu and choose **iPhone SE (2nd generation)** so the
    view will be previewed using an **iPhone SE (2nd generation)**''s screen:![Figure
    23.4: Scheme menu with iPhone SE (2nd generation) selected'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ContentView`文件包含将生成您应用初始视图的代码。点击方案菜单并选择**iPhone SE（第二代**）以便使用**iPhone SE（第二代**）的屏幕预览视图：![图23.4：选择iPhone
    SE（第二代）的方案菜单'
- en: '](img/Figure_23.04_B17469.jpg)'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_23.04_B17469.jpg)'
- en: 'Figure 23.4: Scheme menu with iPhone SE (2nd generation) selected'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图23.4：选择iPhone SE（第二代）的方案菜单
- en: 'Click the **Resume** button in the canvas to generate the preview:![Figure
    23.5: Canvas showing Resume button'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在画布中点击**简历**按钮以生成预览：![图23.5：显示简历按钮的画布
- en: '](img/Figure_23.05_B17469.jpg)'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_23.05_B17469.jpg)'
- en: 'Figure 23.5: Canvas showing Resume button'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图23.5：显示简历按钮的画布
- en: 'Verify that a preview of your app is displayed in the canvas:![Figure 23.6:
    Canvas showing app preview'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认您的应用预览显示在画布中：![图23.6：显示应用预览的画布
- en: '](img/Figure_23.06_B17469.jpg)'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_23.06_B17469.jpg)'
- en: 'Figure 23.6: Canvas showing app preview'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图23.6：显示应用预览的画布
- en: If the canvas isn't visible, select **Canvas** from the **Adjust Editor Options**
    menu to show it. If you are using a MacBook, you can use the pinch gesture on
    your trackpad to resize the simulated image.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果画布不可见，从**调整编辑器选项**菜单中选择**画布**以显示它。如果您使用的是MacBook，您可以在触摸板上使用捏合手势来调整模拟图像的大小。
- en: 'If you need more room to work, click the Navigator and Editor buttons to hide
    the Navigator and Editor areas, and drag the border in the Editor area to resize
    the canvas:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您需要更多的工作空间，点击导航器和编辑器按钮以隐藏导航器和编辑器区域，并将编辑器区域中的边框拖动以调整画布大小：
- en: '![Figure 23.7: Xcode interface showing Navigator button, Editor button, and
    border'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '![图23.7：显示导航按钮、编辑按钮和边框的Xcode界面'
- en: '](img/Figure_23.07_B17469.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_23.07_B17469.jpg)'
- en: 'Figure 23.7: Xcode interface showing Navigator button, Editor button, and border'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图23.7：显示导航按钮、编辑按钮和边框的Xcode界面
- en: Now let's look at the `ContentView` file. This file contains two structures,
    `ContentView` and `ContentView_Previews`. The `ContentView` structure describes
    the view's content and layout, and conforms to the `View` protocol. The `ContentView_Previews`
    structure declares a preview for the `ContentView` structure. The preview is displayed
    in the canvas.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看`ContentView`文件。此文件包含两个结构，`ContentView`和`ContentView_Previews`。`ContentView`结构描述了视图的内容和布局，并符合`View`协议。`ContentView_Previews`结构声明了`ContentView`结构的预览。预览在画布中显示。
- en: 'To see this in action, change the `Hello, World!` text to `Lets Eat` as shown:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看此操作的实际效果，将`Hello, World!`文本更改为`Lets Eat`，如图所示：
- en: '[PRE0]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preview in the canvas updates to reflect your changes:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 画布中的预览会更新以反映您的更改：
- en: '![Figure 23.8: Canvas showing app preview with text view'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '![图23.8：显示带有文本视图的应用预览的画布'
- en: '](img/Figure_23.08_B17469.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_23.08_B17469.jpg)'
- en: 'Figure 23.8: Canvas showing app preview with text view'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图23.8：画布显示带有文本视图的应用预览
- en: You have successfully created your first SwiftUI project! Now let's create the
    **Restaurant List** screen, starting with a view that will display the data of
    a particular restaurant.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您已成功创建了您的第一个 SwiftUI 项目！现在让我们创建“餐厅列表”屏幕，从一个将显示特定餐厅数据的视图开始。
- en: Creating the Restaurant List screen
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建餐厅列表屏幕
- en: When using storyboards, you modify attributes of a view using the Attributes
    inspector. In SwiftUI, you can modify either your code or the preview in the canvas.
    As you have seen, changing the code in the `ContentView` file will immediately
    update the preview, and modifying the preview will update the code.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用故事板时，您使用属性检查器修改视图的属性。在SwiftUI中，您可以修改代码或画布中的预览。如您所见，更改`ContentView`文件中的代码将立即更新预览，而修改预览将更新代码。
- en: 'Let''s customize the `ContentView` structure to display the data of a particular
    restaurant. Follow these steps:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们自定义`ContentView`结构以显示特定餐厅的数据。按照以下步骤操作：
- en: 'Click the Library button. Type `tex` in the filter field, and drag a `Lets
    Eat` text:![Figure 23.9: Library with Text object to be dragged'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击库按钮。在过滤器字段中输入`tex`，然后拖动一个`Let's Eat`文本：![图23.9：库中要拖动的文本对象
- en: '](img/Figure_23.09_B17469.jpg)'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_23.09_B17469.jpg)'
- en: 'Figure 23.9: Library with Text object to be dragged'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图23.9：库中要拖动的文本对象
- en: 'Xcode has automatically added code to the `ContentView` file for this text
    view. Verify that your code looks like this:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Xcode已自动为这个文本视图向`ContentView`文件中添加了代码。确认您的代码看起来像这样：
- en: '[PRE1]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You will use details for The Tap Trailhouse, a restaurant in Boston, as sample
    data. Modify the text views in the `VStack` view to show the name and cuisines
    offered by The Tap Trailhouse restaurant:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将使用波士顿的Tap Trailhouse餐厅作为示例数据。修改`VStack`视图中的文本视图，以显示Tap Trailhouse餐厅提供的名称和菜系：
- en: '[PRE2]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Verify that the changes are reflected in the preview:![Figure 23.10: App preview
    showing The Tap Trailhouse name and cuisines'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认更改已反映在预览中：![图23.10：应用预览显示Tap Trailhouse的名称和菜系
- en: '](img/Figure_23.10_B17469.jpg)'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_23.10_B17469.jpg)'
- en: 'Figure 23.10: App preview showing The Tap Trailhouse name and cuisines'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图23.10：应用预览显示Tap Trailhouse的名称和菜系
- en: 'You''ll use a SwiftUI image view to display a photo of the restaurant. Modify
    your code as shown to add an image view to your `VStack` view:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将使用SwiftUI图像视图来显示餐厅的照片。按照所示修改您的代码以将图像视图添加到您的`VStack`视图中：
- en: '[PRE3]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Verify that your canvas now displays two text views and one image view as shown:![Figure
    23.11: App preview showing two text views and one image view'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认您的画布现在显示两个文本视图和一个图像视图，如下所示：![图23.11：应用预览显示两个文本视图和一个图像视图
- en: '](img/Figure_23.11_B17469.jpg)'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_23.11_B17469.jpg)'
- en: 'Figure 23.11: App preview showing two text views and one image view'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图23.11：应用预览显示两个文本视图和一个图像视图
- en: 'To change the way your text looks, you use **modifiers** instead of the Attributes
    inspector. These are methods that change how your objects look or behave. Update
    your code as shown to set the style and color of your text views:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要更改文本的外观，您使用**修饰符**而不是属性检查器。这些是改变对象外观或行为的方法。按照所示更新您的代码以设置文本视图的样式和颜色：
- en: '[PRE4]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note the changes to the text in the preview.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意预览中文本的变化。
- en: 'To make sure your view stays in the middle of the screen, you''ll embed it
    in an `HStack` view and add `Spacer` objects to both sides. An `HStack` view contains
    subviews that are arranged horizontally, and it is similar to a horizontally oriented
    stack view. A `Spacer` object is a flexible space that expands horizontally in
    an `HStack` view. *Command + click* on your `VStack` view and choose **Embed in
    HStack** from the pop-up menu:![Figure 23.12: Editor area showing pop-up menu
    with Embed in HStack selected'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了确保您的视图保持在屏幕中间，您将在`HStack`视图中嵌入它，并在两侧添加`Spacer`对象。`HStack`视图包含水平排列的子视图，它类似于水平方向的堆叠视图。`Spacer`对象是一个在`HStack`视图中水平扩展的灵活空间。在您的`VStack`视图中*Command
    + 点击*并从弹出菜单中选择**嵌入到HStack中**：![图23.12：编辑区域显示已选择嵌入到HStack的弹出菜单
- en: '](img/Figure_23.12_B17469.jpg)'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_23.12_B17469.jpg)'
- en: 'Figure 23.12: Editor area showing pop-up menu with Embed in HStack selected'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图23.12：编辑区域显示已选择嵌入到HStack的弹出菜单
- en: 'Verify that your code looks like this:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认您的代码看起来像这样：
- en: '[PRE5]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add two `Spacer` objects to the `HStack` view as shown to center the view horizontally
    on your screen:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照所示在`HStack`视图中添加两个`Spacer`对象以在屏幕上水平居中视图：
- en: '[PRE6]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Your view is now complete. You will use this view as a cell in the **Restaurant
    List** screen in the next section.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你的视图现在已完成。你将在下一节中将此视图用作 **Restaurant List** 屏幕中的单元格。
- en: Adding model objects and configuring navigation
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加模型对象和配置导航
- en: You now have a view that can be used to display the details of a restaurant.
    You'll use this view as a cell in a SwiftUI list, which is a container that presents
    data in a single column. You'll also configure model objects to populate this
    list. Follow these step:.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有一个可以用来显示餐厅详细信息的视图。你将使用此视图作为 SwiftUI 列表中的单元格，这是一个容器，用于以单列形式呈现数据。你还将配置模型对象以填充此列表。按照以下步骤操作：
- en: '*Command + click* on the `HStack` view and choose **Embed in List** to display
    a list containing five cells in the canvas:![Figure 23.13: Editor area showing
    pop-up menu with Embed in List selected'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `HStack` 视图上按 **Command + click** 并选择 **Embed in List** 以在画布中显示包含五个单元格的列表：![图
    23.13：显示已选择“嵌入列表”的弹出菜单的编辑区域
- en: '](img/Figure_23.13_B17469.jpg)'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_23.13_B17469.jpg)'
- en: 'Figure 23.13: Editor area showing pop-up menu with Embed in List selected'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 23.13：显示已选择“嵌入列表”的弹出菜单的编辑区域
- en: 'Verify that your code looks like this:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你的代码看起来像这样：
- en: '[PRE7]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Open the `resources` folder contained in the `Chapter23` folder of the code
    bundle you downloaded from [https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition).
    Drag the `RestaurantItem.swift` file to the Project navigator and click **Finish**
    when prompted to add them to your project.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你从 [https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)
    下载的代码包中的 `Chapter23` 文件夹中的 `resources` 文件夹。将 `RestaurantItem.swift` 文件拖到项目导航器中，并在提示时点击
    **Finish** 以将其添加到你的项目中。
- en: 'Click the `RestaurantItem` file in the Project navigator and you should see
    the following code inside it:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击 `RestaurantItem` 文件，你应该在其中看到以下代码：
- en: '[PRE8]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `RestaurantItem` file contains a structure, `RestaurantItem`, and an array,
    `testData`.
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`RestaurantItem` 文件包含一个结构 `RestaurantItem` 和一个数组 `testData`。'
- en: The `RestaurantItem` structure is similar to the `RestaurantItem` class that
    you used in your `LetsEat` project. To use this structure in a list, you have
    to make it conform to the `Identifiable` protocol. This protocol specifies that
    a list item must have an `id` property that can identify a particular item. A
    `UUID` instance is assigned to each `RestaurantItem` instance upon creation to
    ensure each `id` is unique.
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`RestaurantItem` 结构与你在 `LetsEat` 项目中使用的 `RestaurantItem` 类类似。要在列表中使用此结构，你必须使其符合
    `Identifiable` 协议。此协议指定列表项必须有一个 `id` 属性，可以识别特定项。每个 `RestaurantItem` 实例在创建时都会分配一个
    `UUID` 实例，以确保每个 `id` 都是唯一的。'
- en: Important Information
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要信息
- en: 'You can learn more about the `Identifiable` protocol at this link: [https://developer.apple.com/documentation/swift/identifiable](https://developer.apple.com/documentation/swift/identifiable).'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以在此链接中了解更多关于 `Identifiable` 协议的信息：[https://developer.apple.com/documentation/swift/identifiable](https://developer.apple.com/documentation/swift/identifiable)。
- en: '`testData` is an array containing five `RestaurantItem` instances representing
    five restaurants in the Boston area. It fulfills the same function as the JSON
    files you used in the earlier chapters of this book.'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`testData` 是一个包含五个 `RestaurantItem` 实例的数组，代表波士顿地区的五家餐厅。它执行与本书早期章节中使用的 JSON
    文件相同的功能。'
- en: 'Click the `ContentView` file in the Project navigator. Add a `restaurantItems`
    property to your view to hold data for the list after the opening curly brace
    of the `ContentView` structure:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击 `ContentView` 文件。在 `ContentView` 结构的开头大括号后添加一个 `restaurantItems` 属性来保存列表的数据。
- en: '[PRE9]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Modify your code as shown to populate your list with your test data, and display
    a restaurant''s data in each cell:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照所示修改你的代码，用测试数据填充你的列表，并在每个单元格中显示餐厅的数据：
- en: '[PRE10]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: When you make major changes to your code, the automatic updating of the canvas
    is paused. Click the **Resume** button to resume if required. Note that the cell
    size has changed to suit the restaurant image's size.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你对代码进行重大更改时，画布的自动更新会暂停。如果需要，点击 **Resume** 按钮以继续。请注意，单元格大小已更改以适应餐厅图片的大小。
- en: 'Next, you''ll implement navigation so that when a cell is tapped, a second
    screen is presented that will show details of a particular restaurant. Follow
    these steps:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将实现导航，以便当单元格被点击时，会显示一个第二屏幕，显示特定餐厅的详细信息。按照以下步骤操作：
- en: Modify your code as shown to wrap your list in a `UINavigation` class that you've
    used before in your app.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照所示修改你的代码，将你的列表包裹在之前在应用中使用的 `UINavigation` 类中。
- en: 'Add a modifier to set the list''s `title` property to show `Boston, MA` at
    the top of the screen:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个修改器以设置列表的 `title` 属性，在屏幕顶部显示 `Boston, MA`：
- en: '[PRE11]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Wrap the cell in a `destination` property, which specifies the view to be presented
    when a cell is tapped. Currently the specified view is a text view showing the
    name of the restaurant.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将单元格包裹在 `destination` 属性中，该属性指定了单元格被点击时呈现的视图。目前指定的视图是一个显示餐厅名称的文本视图。
- en: The `.fixedSize()` modifier is used to ensure the text is not truncated.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 `.fixedSize()` 修改器确保文本不会被截断。
- en: 'Note that the list in the canvas has automatically displayed disclosure arrows:![Figure
    23.14: App preview showing disclosure arrow'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意画布中的列表已自动显示展开箭头：![图 23.14：应用预览显示展开箭头
- en: '](img/Figure_23.14_B17469.jpg)'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_23.14_B17469.jpg)'
- en: 'Figure 23.14: App preview showing disclosure arrow'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 23.14：应用预览显示展开箭头
- en: 'To see this working as it should in an app, click the **Live Preview** button
    in the canvas:![Figure 23.15: Canvas showing Live Preview button'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在应用中查看它是否按预期工作，请点击画布中的 **实时预览** 按钮：![图 23.15：画布显示实时预览按钮
- en: '](img/Figure_23.15_B17469.jpg)'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_23.15_B17469.jpg)'
- en: 'Figure 23.15: Canvas showing Live Preview button'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 23.15：画布显示实时预览按钮
- en: 'Click any cell in the preview to display text containing the name of the tapped
    restaurant:![Figure 23.16: App preview showing a selected cell'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击预览中的任何单元格以显示包含被点击餐厅名称的文本：![图 23.16：应用预览显示已选择的单元格
- en: '](img/Figure_23.16_B17469.jpg)'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_23.16_B17469.jpg)'
- en: 'Figure 23.16: App preview showing a selected cell'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 23.16：应用预览显示已选择的单元格
- en: This is a great way of ensuring your list works as expected.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是一种确保你的列表按预期工作的好方法。
- en: 'The view code is starting to look cluttered, so you''ll extract the cell into
    its own separate view. *Command + click* the `NavigationLink` view and choose
    **Extract Subview**:![Figure 23.17: Editor area showing pop-up menu with Extract
    Subview selected'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 视图代码开始看起来杂乱，因此你将单元格提取到其自己的单独视图中。*Command + click* `NavigationLink` 视图并选择 **提取子视图**：![图
    23.17：编辑区域显示已选择“提取子视图”的弹出菜单
- en: '](img/Figure_23.17_B17469.jpg)'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_23.17_B17469.jpg)'
- en: 'Figure 23.17: Editor area showing pop-up menu with Extract Subview selected'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 23.17：编辑区域显示已选择“提取子视图”的弹出菜单
- en: 'All the view code for the cell has been moved into a separate view named `ExtractedView`:![Figure
    23.18: Editor area showing name of extracted view highlighted'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有单元格的视图代码都已移动到名为 `ExtractedView` 的单独视图中：![图 23.18：编辑区域显示突出显示的提取视图名称
- en: '](img/Figure_23.18_B17469.jpg)'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_23.18_B17469.jpg)'
- en: 'Figure 23.18: Editor area showing name of extracted view highlighted'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 23.18：编辑区域显示突出显示的提取视图名称
- en: 'Change the name of the method call and the extracted view to `RestaurantCell`.
    Your code should look like this:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改方法调用和提取视图的名称为 `RestaurantCell`。你的代码应该看起来像这样：
- en: '[PRE12]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Don't worry about the error, you'll fix it in the next step.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不要担心错误，你将在下一步中修复它。
- en: 'Add a property to the `RestaurantCell` view to hold a `RestaurantItem` instance:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向 `RestaurantCell` 视图中添加一个属性以保存 `RestaurantItem` 实例：
- en: '[PRE13]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add code to the `ContentView` structure to pass the `RestaurantItem` instance
    to the `RestaurantCell` view as shown:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向 `ContentView` 结构中添加代码以将 `RestaurantItem` 实例传递给 `RestaurantCell` 视图，如下所示：
- en: '[PRE14]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Verify that the preview still works the way it did before.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认预览仍然按预期工作。
- en: You've completed the implementation of the `UIKit` and SwiftUI views together
    to create a map view that you'll use in the **Restaurant Detail** screen.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经完成了 `UIKit` 和 SwiftUI 视图的实现，以创建一个你将在 **餐厅详情** 屏幕中使用的地图视图。
- en: Using UIKit and SwiftUI Views together
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 UIKit 和 SwiftUI 视图一起
- en: At this point, you have created the **Restaurant List** screen, and tapping
    each cell in this screen displays the restaurant's name on a second screen. You'll
    modify your app to display a **Restaurant Detail** screen when a cell on the **Restaurant
    List** screen is tapped, but before that, you'll create a SwiftUI view that displays
    a map.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经创建了 **餐厅列表** 屏幕并且点击此屏幕中的每个单元格都会在第二个屏幕上显示餐厅的名称。你将修改你的应用，以便在点击 **餐厅列表**
    屏幕中的单元格时显示 **餐厅详情** 屏幕但在此之前，你将创建一个显示地图的 SwiftUI 视图。
- en: 'When using storyboards, all you needed to do was to drag in a map view from
    the Library to a view in the storyboard. SwiftUI does not have a native map view
    but you can use the same map view that you used in the storyboard to render the
    map. In fact, you can use any view subclass in SwiftUI by wrapping them in a SwiftUI
    view that conforms to the `UIViewRepresentable` protocol. Let''s create a custom
    view that can present a map view now. Follow these steps:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用故事板时，你所需要做的就是从库中拖动一个地图视图到故事板中的视图。SwiftUI 没有内置的地图视图，但你可以使用与故事板中相同的地图视图来渲染地图。实际上，你可以通过将它们包裹在一个符合
    `UIViewRepresentable` 协议的 SwiftUI 视图中来使用任何视图子类。现在让我们创建一个可以显示地图视图的自定义视图。按照以下步骤操作：
- en: Choose **File** | **New** | **File** to open the template selector.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **文件** | **新建** | **文件** 以打开模板选择器。
- en: '**iOS** should already be selected. In the **User Interface** section, click
    **SwiftUI View** and click **Next**:![Figure 23.19: File template screen with
    SwiftUI View selected'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS** 应该已经选中。在 **用户界面** 部分，点击 **SwiftUI 视图** 并点击 **下一步**：![图 23.19：选择 SwiftUI
    视图的文件模板屏幕'
- en: '](img/Figure_23.19_B17469.jpg)'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_23.19_B17469.jpg)'
- en: 'Figure 23.19: File template screen with SwiftUI View selected'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 23.19：选择 SwiftUI 视图的文件模板屏幕
- en: Name the new file `MapView` and click `MapView` file will appear in the Project
    navigator.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新文件命名为 `MapView` 并点击，`MapView` 文件将出现在项目导航器中。
- en: 'In the `MapView` file, import `MapKit`, and make the `MapView` structure conform
    to the `UIViewRepresentable` protocol as shown. Don''t worry about the error that
    appears, you''ll fix that in the next few steps:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MapView` 文件中，导入 `MapKit`，并使 `MapView` 结构符合如上所示的 `UIViewRepresentable` 协议。不用担心出现的错误，你将在接下来的几个步骤中修复它：
- en: '[PRE15]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You need two methods to conform to the `UIViewRepresentable` protocol: a `makeUIView(context:)`
    method that creates an `MKMapView` and an `updateUIView(_:context:)` method that
    configures it and responds to any changes. Modify your code as shown to replace
    the `body` property with a `makeUIView(context:)` method that creates and returns
    an empty `MKMapView` instance:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要两个方法来符合 `UIViewRepresentable` 协议：一个 `makeUIView(context:)` 方法用于创建一个 `MKMapView`，一个
    `updateUIView(_:context:)` 方法用于配置它并响应任何更改。按照如下所示修改你的代码，用创建并返回一个空的 `MKMapView`
    实例的 `makeUIView(context:)` 方法替换 `body` 属性：
- en: '[PRE16]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Modify your code as shown to add an `updateUIView(_:context:)` method just
    after the `makeUIView(context:)` method. This sets the map view''s region to center
    the map on The Tap Trailhouse''s location:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照如下所示修改你的代码，在 `makeUIView(context:)` 方法之后添加一个 `updateUIView(_:context:)` 方法。这会将地图视图的区域设置为以
    The Tap Trailhouse 的位置为中心：
- en: '[PRE17]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note that this is the same method you used to make a region for the **Map**
    screen in the *Let's Eat* app.
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，这是你在 *Let's Eat* 应用中为 **地图** 屏幕创建区域时使用的方法。
- en: 'The error is now gone, and a blank map view appears in the canvas. This is
    because the preview is in static mode and only renders SwiftUI views. You''ll
    need to turn on live preview to see the map. Click the **Live Preview** button
    and you should see a map of Boston centered on The Tap Trailhouse''s location
    in a moment:![Figure 23.20: App preview showing map'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误现在消失了，画布中出现了一个空白地图视图。这是因为预览处于静态模式，并且只渲染 SwiftUI 视图。你需要打开实时预览来查看地图。点击 **实时预览**
    按钮，你应该会在片刻后看到以 The Tap Trailhouse 的位置为中心的波士顿地图：![图 23.20：显示地图的应用预览
- en: '](img/Figure_23.20_B17469.jpg)'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_23.20_B17469.jpg)'
- en: 'Figure 23.20: App preview showing map'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 23.20：显示地图的应用预览
- en: If it doesn't work, check your internet connection, and click the **Try Again**
    or **Resume** buttons above your preview.
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果不起作用，请检查您的网络连接，并点击预览上方的 **重试** 或 **继续** 按钮。
- en: 'The latitude and longitude values are currently hardcoded. Declare two properties
    to hold the latitude and longitude values as shown after the `MapView` structure
    declaration:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 纬度和经度值目前是硬编码的。在 `MapView` 结构声明之后声明两个属性来保存纬度和经度值，如下所示：
- en: '[PRE18]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Modify the `updateUI(_:context:)` method to use these properties instead of
    the hardcoded values:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `updateUI(_:context:)` 方法，使用这些属性而不是硬编码的值：
- en: '[PRE19]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Update the `MapView_Previews` structure to pass in sample latitude and longitude
    values as shown. This will generate the same map you saw earlier in the preview:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `MapView_Previews` 结构，传入示例纬度和经度值，如下所示。这将生成你在预览中看到的相同地图：
- en: '[PRE20]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the canvas, check to see that the map is still displayed (You may need to
    click **Resume**).
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在画布中检查地图是否仍然显示（你可能需要点击 **继续**）。
- en: You've created a SwiftUI map view that shows the restaurant's location. Now,
    let's see how to make the complete **Restaurant Detail** screen in the next section.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经创建了一个显示餐厅位置的 SwiftUI 地图视图。现在，让我们看看如何在下一节中制作完整的**餐厅详情**屏幕。
- en: Completing the Restaurant Detail screen
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成**餐厅详情**屏幕
- en: 'You now have a SwiftUI map view displaying a map. Now, you''ll create a new
    SwiftUI view to represent the **Restaurant Detail** screen and add the map view
    to it. Follow these steps:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你有一个显示地图的 SwiftUI 地图视图。接下来，你将创建一个新的 SwiftUI 视图来表示**餐厅详情**屏幕，并将地图视图添加到其中。按照以下步骤操作：
- en: Choose **File** | **New** | **File** to open the template selector.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**文件** | **新建** | **文件**以打开模板选择器。
- en: '**iOS** should already be selected. In the **User Interface** section, click
    **SwiftUI View** and click **Next**.'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS**应该已经选中。在**用户界面**部分，点击**SwiftUI 视图**并点击**下一步**。'
- en: Name the new file `RestaurantDetail` and click `RestaurantDetail` file appears
    in the Project navigator.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新文件命名为`RestaurantDetail`并点击，使`RestaurantDetail`文件出现在项目导航器中。
- en: 'Declare and define the `RestaurantDetail` and `RestaurantDetail_Previews` structures
    as shown:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明并定义`RestaurantDetail`和`RestaurantDetail_Previews`结构，如下所示：
- en: '[PRE21]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The preview displays a map view above the restaurant text views, but does not
    render the map. As before, click the **Live Preview** button.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 预览显示在餐厅文本视图上方的地图视图，但不会渲染地图。与之前一样，点击**实时预览**按钮。
- en: 'The canvas now displays the **Restaurant Detail** screen with a rendered map:![Figure
    23.21: App preview showing Restaurant Detail screen'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 画布现在显示带有渲染地图的**餐厅详情**屏幕：![图 23.21：应用预览显示餐厅详情屏幕
- en: '](img/Figure_23.21_B17469.jpg)'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_23.21_B17469.jpg)'
- en: 'Figure 23.21: App preview showing Restaurant Detail screen'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 23.21：应用预览显示餐厅详情屏幕
- en: You've completed the implementation of the **Restaurant Detail** screen using
    SwiftUI. Now you'll modify the list in the **Restaurant List** screen so that
    the **Restaurant Detail** screen will be displayed when a cell is tapped.
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你已经使用 SwiftUI 完成了**餐厅详情**屏幕的实现。现在，你将修改**餐厅列表**屏幕中的列表，以便在单元格被轻触时显示**餐厅详情**屏幕。
- en: 'Click the `ContentView` file in the Project navigator and modify the `RestaurantCell`
    structure''s code to use the `RestaurantDetail` structure as the destination when
    a cell is tapped:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击`ContentView`文件，并修改`RestaurantCell`结构的代码，以便在单元格被轻触时使用`RestaurantDetail`结构作为目标：
- en: '[PRE22]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Click the **Live Preview** button in the canvas. Tap a row in the **Restaurant
    List** screen. You''ll see the **Restaurant Detail** screen for that restaurant
    appear:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击画布中的**实时预览**按钮。在**餐厅列表**屏幕中轻触一行。你会看到该餐厅的**餐厅详情**屏幕出现：
- en: '![Figure 23.22: App preview showing Restaurant Detail screen'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 23.22：应用预览显示餐厅详情屏幕'
- en: '](img/Figure_23.22_B17469.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_23.22_B17469.jpg)'
- en: 'Figure 23.22: App preview showing Restaurant Detail screen'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图 23.22：应用预览显示餐厅详情屏幕
- en: 'As you can see, the app preview works fine in the canvas. If you want to run
    in the simulator, you''ll need to make one small change in the `ContentView` structure.
    Click the `ContentView` file in the Project navigator and assign the `testdata`
    array to the `restaurantItems` property as shown:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，应用预览在画布中运行良好。如果你想在模拟器中运行，你需要在`ContentView`结构中做一个小改动。在项目导航器中点击`ContentView`文件，并将`testdata`数组分配给`restaurantItems`属性，如下所示：
- en: '[PRE23]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Build and run your app, and it will appear in the simulator:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行你的应用，它将在模拟器中显示：
- en: '![Figure 23.23: iOS Simulator showing Restaurant List screen'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 23.23：iOS 模拟器显示餐厅列表屏幕'
- en: '](img/Figure_23.23_B17469.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_23.23_B17469.jpg)'
- en: 'Figure 23.23: iOS Simulator showing Restaurant List screen'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图 23.23：iOS 模拟器显示餐厅列表屏幕
- en: You have completed building a simple SwiftUI app! Awesome!
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经完成了构建一个简单的 SwiftUI 应用！太棒了！
- en: Summary
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this brief introduction to SwiftUI, you've seen how to build a simplified
    version of the *Let's Eat* app using SwiftUI.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在本简要的 SwiftUI 介绍中，你看到了如何使用 SwiftUI 构建简化版的 *Let's Eat* 应用。
- en: You started by adding and configuring SwiftUI views to create the `UIKit` and
    SwiftUI views together by adding and configuring a map view for the **Restaurant
    Detail** screen. Finally, you created the **Restaurant Detail** screen and added
    the map view you created earlier to it.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先通过添加和配置 SwiftUI 视图来创建 `UIKit` 和 SwiftUI 视图，通过添加和配置用于**餐厅详情**屏幕的地图视图来实现这一点。最后，你创建了**餐厅详情**屏幕，并将你之前创建的地图视图添加到其中。
- en: You now know how to use SwiftUI to create an app that reads model objects, presents
    them in a list, and allows navigation to a second screen containing a map view.
    You can then implement this for your own projects.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经知道了如何使用SwiftUI创建一个读取模型对象、在列表中展示它们并允许导航到包含地图视图的第二屏幕的应用程序。你可以在自己的项目中实现这一点。
- en: In the next chapter, you will learn about **Swift concurrency**, a new way to
    handle asynchronous operations in Swift.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习关于**Swift并发**的内容，这是在Swift中处理异步操作的新方法。
