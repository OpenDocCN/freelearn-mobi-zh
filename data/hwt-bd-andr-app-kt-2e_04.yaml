- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Building App Navigation
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建应用导航
- en: 'In this chapter, you will build user-friendly app navigation through three
    primary patterns: bottom navigation, the navigation drawer, and tabbed navigation.
    Through guided theory and practice, you will learn how each of these patterns
    works so that users can easily access your app’s content. This chapter will also
    focus on making the user aware of where they are in the app and which level of
    your app’s hierarchy they can navigate to.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将通过三种主要模式：底部导航、导航抽屉和标签导航来构建用户友好的应用导航。通过指导理论和实践，你将了解这些模式如何工作，以便用户可以轻松访问你的应用内容。本章还将关注让用户意识到他们在应用中的位置以及他们可以导航到应用层次结构的哪个级别。
- en: By the end of this chapter, you will know how to use these three primary navigation
    patterns and understand how they work with the app bar to support navigation.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将了解如何使用这三种主要导航模式，并理解它们如何与应用栏一起支持导航。
- en: In the previous chapter, you explored fragments and the **fragment lifecycle**
    and employed Jetpack navigation to simplify their use in your apps. In this chapter,
    you will learn how to add different types of navigation to your app while continuing
    to use Jetpack navigation.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你探索了片段和**片段生命周期**，并使用了Jetpack导航来简化它们在你的应用中的使用。在本章中，你将学习如何在继续使用Jetpack导航的同时，为你的应用添加不同类型的导航。
- en: You will start off by learning about the navigation drawer, the earliest widely
    adopted navigational pattern used in Android apps, before exploring bottom navigation
    and tab navigation. You’ll learn about the Android navigation user flow, how it
    is built around destinations, and how they govern navigation within the app.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你将从学习导航抽屉开始，这是Android应用中最早广泛采用的导航模式，然后探索底部导航和标签导航。你将了解Android导航用户流程，它是如何围绕目标构建的，以及它们如何控制应用内的导航。
- en: The difference between primary and secondary destinations will be explained,
    as well as which one of the three primary navigation patterns is more suitable,
    depending on your app’s use case.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 将解释主要和次要目标之间的区别，以及根据你的应用用例，三种主要导航模式中哪一个更适合。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Navigation overview
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航概览
- en: Navigation drawer
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航抽屉
- en: Bottom navigation
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 底部导航
- en: Tabbed navigation
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签导航
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The complete code for all the exercises and the activity in this chapter is
    available on GitHub at [https://packt.link/B2rz6](https://packt.link/B2rz6).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中所有练习和活动的完整代码可在GitHub上找到，网址为[https://packt.link/B2rz6](https://packt.link/B2rz6)。
- en: Navigation overview
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航概览
- en: The Android navigation user flow is built around **destinations** within your
    app. There are primary destinations available at the top level of your app and,
    subsequently, are always displayed in the main app navigation and secondary destinations.
    A guiding principle of each of the three navigation patterns is to contextually
    provide information about the main section of the app the user is in at any point
    in time.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Android导航用户流程围绕应用内的**目标**构建。在应用顶级有主要目标可用，随后始终显示在主应用导航和次要目标中。三个导航模式的一个指导原则是，在任何给定时间点，根据用户所在的应用主要部分提供上下文信息。
- en: This can take the form of a label in the top app bar of the destination the
    user is in, optionally displaying an arrow hint that the user is not at the top
    level, and/or providing highlighted text and icons in the **user interface** (**UI**)
    that indicate the section the user is in. Navigation in your app should be fluid
    and natural, intuitively guiding the user while also providing some context of
    where they are at any given point in time.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以表现为用户所在目标应用顶部栏中的一个标签，可选地显示一个箭头提示用户不在顶级，以及/或提供突出显示的文本和图标在**用户界面**（**UI**）中，指示用户所在的区域。你的应用中的导航应该是流畅和自然的，直观地引导用户，同时也在任何给定时间点提供一些他们所在位置的上下文。
- en: Each of the three navigation patterns you will explore accomplishes this goal
    in varying ways. Some of these navigational patterns are more suitable for use
    with a higher number of top-level primary destinations to display, and others
    are suitable for less.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你将要探索的三个导航模式以不同的方式实现这一目标。其中一些导航模式更适合与更多顶级主要目标一起使用来显示，而其他一些则适合较少的目标。
- en: Navigation drawer
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航抽屉
- en: 'The **navigation drawer** is one of the most common navigation patterns used
    in Android apps and was certainly the first pattern to be widely adopted. The
    following is a screenshot of the culmination of the next exercise, which shows
    a simple navigation drawer in its closed state:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**导航抽屉**是Android应用中最常用的导航模式之一，并且无疑是第一个被广泛采用的模式。以下是一个下一项练习的截图，显示了关闭状态下的简单导航抽屉：'
- en: '![Figure 4.1 – App with the navigation drawer closed](img/B19411_04_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.1 – 导航抽屉关闭的应用](img/B19411_04_01.jpg)'
- en: Figure 4.1 – App with the navigation drawer closed
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1 – 导航抽屉关闭的应用
- en: The navigation drawer is accessed through what has become commonly known as
    the hamburger menu, which is the icon with three horizontal lines at the top left
    of *Figure 4**.1*. The navigation options are not visible on the screen, but contextual
    information about the screen you are on is displayed in the top app bar.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 导航抽屉通过现在普遍称为汉堡菜单的方式访问，这是位于 *图 4.1* 顶部左边的带有三个水平线的图标。屏幕上不显示导航选项，但当前屏幕的上下文信息显示在顶部应用栏中。
- en: 'An overflow menu can also accompany this on the right-hand side of the screen,
    through which other contextually relevant navigation options can be accessed.
    The following screenshot is of a navigation drawer in the open state, showing
    all the navigation options:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在屏幕的右侧也可以有一个溢出菜单，通过它可以访问其他上下文相关的导航选项。以下是一个打开状态下的导航抽屉的截图，显示了所有导航选项：
- en: '![Figure 4.2 – App with the navigation drawer open](img/B19411_04_02.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.2 – 导航抽屉打开的应用](img/B19411_04_02.jpg)'
- en: Figure 4.2 – App with the navigation drawer open
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2 – 导航抽屉打开的应用
- en: Upon selecting the hamburger menu, the navigation drawer slides out from the
    left with the current section highlighted. This can be displayed with or without
    an icon. Due to the nature of the navigation occupying the height of the screen,
    it is best suited to five or more top-level destinations.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 选择汉堡菜单后，导航抽屉从左侧滑出，当前部分被突出显示。这可以显示带有或不带有图标。由于导航占据了屏幕的高度，它最适合五个或更多顶级目的地。
- en: The destinations can also be grouped together to indicate multiple hierarchies
    of primary destinations (shown by the dividing line in the preceding screenshot),
    and these hierarchies can also have labels. In addition, the drawer content is
    also scrollable. In summary, the navigation drawer is a very convenient way to
    provide quick access to many different app destinations.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 目的地也可以分组，以表示多个主要目的地的层次结构（如前一张截图中的分隔线所示），这些层次结构也可以有标签。此外，抽屉内容也是可滚动的。总之，导航抽屉是一种非常方便的方式，可以快速访问许多不同的应用目的地。
- en: A weakness of the navigation drawer is that it requires the user to select the
    hamburger menu for the destinations to become visible. Tabs and bottom navigation
    (with fixed tabs), in contrast, are always visible. However, this is conversely
    also a strength of the navigation drawer as more screen space can be used for
    the app’s content.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 导航抽屉的一个弱点是它需要用户选择汉堡菜单才能使目的地可见。相比之下，标签和底部导航（带有固定标签）始终可见。然而，这反过来也是导航抽屉的一个优点，因为可以有更多屏幕空间用于应用内容。
- en: Let’s get started with the first exercise of this chapter and create a navigation
    drawer so that we can access all the sections of an app.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始本章的第一个练习，创建一个导航抽屉，这样我们就可以访问应用的所有部分。
- en: Exercise 4.01 – creating an App with a navigation drawer
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 4.01 – 创建带有导航抽屉的应用
- en: In this exercise, you will create a new app in Android Studio named `Navigation
    Drawer` using the `Empty Activity` project template while leaving all the other
    defaults as they are. There are wizard options where you can create a new project
    with all the navigation patterns you are going to produce in the exercises within
    this chapter, but we will build the apps incrementally to guide you through the
    steps.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在此练习中，你将在Android Studio中使用 `Empty Activity` 项目模板创建一个名为 `Navigation Drawer` 的新应用，同时保留所有其他默认设置。在向导选项中，你可以创建一个新项目，其中包含本章练习中将要生成的所有导航模式，但我们将逐步构建应用以指导你完成步骤。
- en: You will build an app that often uses a navigation drawer, such as a news or
    mail app. The sections we will be adding are **Home**, **Favorites**, **Recents**,
    **Archive**, **Bin**, and **Settings**.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你将构建一个经常使用导航抽屉的应用，例如新闻或邮件应用。我们将添加的分区包括 **主页**、**收藏夹**、**最近**、**存档**、**回收站**
    和 **设置**。
- en: 'Perform the following steps to complete this exercise:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以完成此练习：
- en: Create a new project with an `Empty Activity` called `Navigation Drawer`. Do
    not use the **Navigation Drawer Activity** project template, as we are going to
    use incremental steps to build the app.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用名为 `Navigation Drawer` 的 `Empty Activity` 创建一个新的项目。不要使用 **Navigation Drawer
    Activity** 项目模板，因为我们打算使用增量步骤来构建应用。
- en: 'Add the Gradle dependencies you will require to `app/build.gradle`:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `app/build.gradle` 中添加你将需要的 Gradle 依赖项：
- en: '[PRE0]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Update `strings.xml` and `themes.xml` in the `res/values` folder with the following
    content:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `res/values` 文件夹中的 `strings.xml` 和 `themes.xml`，内容如下：
- en: strings.xml
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: strings.xml
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: themes.xml
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: themes.xml
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, update the activity element with name `MainActivity` in the `AndroidManifest.xml`
    to NOT use an Action Bar. This will be provided by the Navigation Drawer layout.
    Go to `app` | `manifests` | `AndroidManifest.xml` and add the `android:theme`
    attribute with the `NoActionBar` style as in the snippet of code shown here:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，更新 `AndroidManifest.xml` 中的名为 `MainActivity` 的活动元素，使其不使用 Action Bar。这将由导航抽屉布局提供。转到
    `app` | `manifests` | `AndroidManifest.xml` 并添加 `android:theme` 属性，使用 `NoActionBar`
    风格，如以下代码片段所示：
- en: '[PRE3]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Create the following fragments (`HomeFragment`
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建以下片段（`HomeFragment`
- en: '`FavoritesFragment`'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`FavoritesFragment`'
- en: '`RecentFragment`'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`RecentFragment`'
- en: '`ArchiveFragment`'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ArchiveFragment`'
- en: '`SettingsFragment`'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`SettingsFragment`'
- en: '`BinFragment`'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`BinFragment`'
- en: '`ContentFragment`'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ContentFragment`'
- en: 'Change each of these fragment layouts to use the following content:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将每个片段布局更改为使用以下内容：
- en: '[PRE4]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The only difference is the `android:text` attribute, which will have the corresponding
    string from the `strings.xml` file. So, create these fragments with the correct
    string, indicating which fragment the user is viewing.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的区别是 `android:text` 属性，它将包含来自 `strings.xml` 文件的相应字符串。因此，使用正确的字符串创建这些片段，以指示用户正在查看哪个片段。
- en: This may seem a bit repetitive, and one single fragment could be updated with
    this text, but it demonstrates how you would separate different sections in a
    real-world app.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来有点重复，但一个单独的片段可以更新为这段文本，但它展示了如何在现实世界的应用中分离不同的部分。
- en: 'Update the `fragment_home.xml` with the following content, which adds a button
    (this is the body content you can see in *Figure 4**.1*, with the closed navigation
    drawer):'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下内容更新 `fragment_home.xml`，其中添加了一个按钮（这是在 *图 4**.1 中可以看到的正文内容，带有关闭的导航抽屉）：
- en: '[PRE5]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`TextView` is the same as what’s specified in the other fragment layouts, except
    it has an ID (`id`) with which it constrains the button below it.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`TextView` 与其他片段布局中指定的内容相同，除了它有一个 ID (`id`)，用于约束其下方的按钮。'
- en: Create the navigation graph that will be used in the app. Select `res` folder
    is selected in the Project see this option. Select `mobile_navigation.xml`.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建将在应用中使用的导航图。在项目中选择 `res` 文件夹，查看此选项。选择 `mobile_navigation.xml`。
- en: 'This creates the navigation graph:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建导航图：
- en: '![Figure 4.3 – The Android Studio New Resource File dialog](img/B19411_04_03.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.3 – Android Studio 新资源文件对话框](img/B19411_04_03.jpg)'
- en: Figure 4.3 – The Android Studio New Resource File dialog
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3 – Android Studio 新资源文件对话框
- en: 'Open the `mobile_navigation.xml` file in the `res/navigation` folder and update
    it with the code from the file in the following link. A truncated version of the
    code is shown here. Use this link to access the entire code: [https://packt.link/ZRDiT](https://packt.link/ZRDiT).'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `res/navigation` 文件夹中打开 `mobile_navigation.xml` 文件，并使用以下链接中的文件中的代码更新它。这里显示了代码的截断版本。使用此链接访问完整代码：[https://packt.link/ZRDiT](https://packt.link/ZRDiT)。
- en: mobile_navigation.xml
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: mobile_navigation.xml
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This creates all the destinations in your app. However, it doesn’t specify whether
    these are primary or secondary destinations. This should be familiar from the
    fragment Jetpack navigation exercise from the previous chapter.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在你的应用中创建所有目的地。然而，它并没有指定这些是主要目的地还是次要目的地。这应该与上一章中提到的片段 Jetpack 导航练习中的内容相似。
- en: 'The most important point to note here is `app:startDestination="@+id/nav_home`,
    which specifies what will be displayed to start with when the navigation loads
    and that there is an action available from within `HomeFragment` to move to the
    `nav_content` destination in the graph:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的最重要的一点是 `app:startDestination="@+id/nav_home"`，它指定了导航加载时将显示的内容，以及从 `HomeFragment`
    内部有可用的操作可以移动到图中的 `nav_content` 目的地：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You are now going to see how this is set up in `HomeFragment` and its layout.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在将看到如何在 `HomeFragment` 及其布局中设置。
- en: 'Open `HomeFragment` and add two `import` statements for the `Button` and `Navigation`
    imports and update `onCreateView` to set up the button:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `HomeFragment` 并添加两个 `import` 语句用于 `Button` 和 `Navigation` 导入，并更新 `onCreateView`
    以设置按钮：
- en: HomeFragment
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: HomeFragment
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This uses the `ClickListener` navigation to complete the `R.id.nav_home_to_content`
    action when `button_home` is clicked.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用 `ClickListener` 导航，当点击 `button_home` 时完成 `R.id.nav_home_to_content` 动作。
- en: However, these changes will not do anything yet as you still need to set up
    the navigation host for your app and add all the other layout files, along with
    the navigation drawer.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这些更改目前不会产生任何效果，因为您仍然需要为您的应用程序设置导航宿主，并添加所有其他布局文件，包括导航抽屉。
- en: 'Create a `Nav` host fragment by creating a new file in the layout folder called
    `content_main.xml`. This can be done by right-clicking on the `layout` folder
    in the `res` directory and then going to `FragmentContainerView`:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在布局文件夹中创建一个名为 `content_main.xml` 的新文件来创建一个 `Nav` 主片段。这可以通过在 `res` 目录中的 `layout`
    文件夹上右键单击，然后转到 `FragmentContainerView` 来完成：
- en: '[PRE9]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You’ll notice that the navigation graph is set to the graph you just created:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您会注意到导航图设置为刚刚创建的图：
- en: '[PRE10]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'With that, the body of the app and its destination have been set up. Now, you
    need to set up the UI navigation. Create another layout resource file called `nav_header_main.xml`
    and add the following content:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这样，应用程序的主体及其目的地就已经设置好了。现在，您需要设置 UI 导航。创建另一个名为 `nav_header_main.xml` 的布局资源文件，并添加以下内容：
- en: '[PRE11]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This is the layout that’s displayed in the header of the navigation drawer.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这是显示在导航抽屉标题中的布局。
- en: 'Create the app bar with a toolbar layout file called `app_bar_main.xml`, and
    include the following content:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用名为 `app_bar_main.xml` 的工具栏布局文件创建应用程序栏，并包含以下内容：
- en: '[PRE12]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This integrates the main body layout of the app with the app bar that appears
    above it. The remaining part is to create the items that will appear in the navigation
    drawer and create and populate the navigation drawer with these items.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这将应用程序的主体布局与出现在其上方的应用程序栏集成在一起。剩下的部分是创建将出现在导航抽屉中的项目，并使用这些项目创建和填充导航抽屉。
- en: To use icons with these menu items, you need to copy the vector assets in the
    drawable folder of the completed exercise to the drawable folder of your project.
    Vector assets use coordinates for points, lines, and curves to layout images with
    associated color information.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用这些菜单项的图标，您需要将完成练习的可绘制文件夹中的矢量资产复制到项目中的可绘制文件夹。矢量资产使用坐标来布局与相关颜色信息关联的图像。
- en: 'They are significantly smaller when compared to PNG and JPG images, and vectors
    can be resized to different sizes without loss of quality. You can find them here:
    [https://packt.link/CurtF](https://packt.link/CurtF).'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 与 PNG 和 JPG 图像相比，它们显著更小，矢量图可以调整到不同的大小而不会损失质量。您可以在以下位置找到它们：[https://packt.link/CurtF](https://packt.link/CurtF)。
- en: 'Copy the following drawables:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 复制以下可绘制资源：
- en: '`favorites.xml`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`favorites.xml`'
- en: '`archive.xml`'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`archive.xml`'
- en: '`recent.xml`'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recent.xml`'
- en: '`home.xml`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`home.xml`'
- en: '`bin.xml`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bin.xml`'
- en: 'Create a menu with these items. To do this, go to `activity_main_drawer`, and
    then populate it with the following content:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用这些项目创建一个菜单。为此，转到 `activity_main_drawer`，然后用以下内容填充它：
- en: '[PRE13]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This sets up the menu items that will appear in the navigation drawer itself.
    The name of the IDs is the magic that ties up the menu items to the destinations
    within the navigation graph.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这设置了将出现在导航抽屉中的菜单项。ID 的名称是连接菜单项到导航图中目的地的魔法。
- en: If the IDs of the menu items (in `activity_main_drawer.xml`) exactly match the
    IDs of the destinations in the navigation graph (which, in this case, are fragments
    within `mobile_navigation.xml`), then the destination is automatically loaded
    into the navigation host.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果菜单项的 ID（在 `activity_main_drawer.xml` 中）与导航图中的目的地 ID（在这种情况下，是 `mobile_navigation.xml`
    中的片段）完全匹配，则目的地将自动加载到导航宿主中。
- en: 'The layout for `MainActivity` ties the navigation drawer to all the layouts
    specified previously. Open `activity_main.xml` and update it with the following
    content:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`MainActivity` 的布局将导航抽屉与之前指定的所有布局绑定在一起。打开 `activity_main.xml` 并使用以下内容更新它：'
- en: '[PRE14]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As you can see, an `include` is used to add `app_bar_main.xml`. The `<include>`
    element allows you to add layouts that will be replaced at compile time with the
    actual layout itself.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，使用了 `include` 来添加 `app_bar_main.xml`。`<include>` 元素允许您添加在编译时将被实际布局替换的布局。
- en: 'They allow us to encapsulate different layouts as they can be reused in multiple
    layout files within the app. `NavigationView` (the class that creates the navigation
    drawer) specifies the layout files you have just created to configure its header
    and menu items:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们允许我们将不同的布局封装起来，因为它们可以在应用中的多个布局文件中重复使用。`NavigationView`（创建导航抽屉的类）指定你刚刚创建的布局文件来配置其页眉和菜单项：
- en: '[PRE15]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now that you have specified all the layout files, update `MainActivity` by
    adding the following interaction logic:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你已经指定了所有布局文件，通过添加以下交互逻辑来更新`MainActivity`：
- en: '[PRE16]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, let’s go through the preceding code. The `setSupportActionBar(toolbar)`
    line configures the toolbar used in the app by referencing it from the layout
    and setting it. Retrieving `NavHostFragment` is done with the following code:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回顾一下前面的代码。`setSupportActionBar(toolbar)`这一行通过从布局中引用并设置它来配置应用中使用的工具栏。获取`NavHostFragment`的操作是通过以下代码完成的：
- en: '[PRE17]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, you add the menu items you want to display in the navigation drawer:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，添加你想要在导航抽屉中显示的菜单项：
- en: '[PRE18]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `drawer_layout` is the container for the `nav_view`, the main app bar, and
    its included content.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`drawer_layout`是`nav_view`、主要应用栏及其包含内容的容器。'
- en: This may seem like you are doing this twice as these items are displayed in
    the `activity_main_drawer.xml` menu for the navigation drawer. However, the function
    of setting these in `AppBarConfiguration` is that these primary destinations will
    not display an up arrow when they are selected as they are at the top level.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来像是你重复做了两次，因为这些项目已经在`activity_main_drawer.xml`菜单的导航抽屉中显示。然而，在`AppBarConfiguration`中设置这些项目的功能是，当这些主要目标被选中时，它们将不会显示向上箭头，因为它们处于顶层。
- en: 'It also adds `drawer_layout` as the last parameter to specify which layout
    should be used when the hamburger menu is selected to display in the navigation
    drawer. The next line is as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 它还把`drawer_layout`作为最后一个参数添加，以指定当汉堡菜单被选中并在导航抽屉中显示时应该使用哪个布局。下一行如下：
- en: '[PRE19]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This sets up the app bar with the navigation graph so that any changes that
    are made to the destinations are reflected in the app bar:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这设置了应用栏与导航图，以便对目标所做的任何更改都会反映在应用栏上：
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This is the last statement in `onCreate`, and it specifies the item within
    the navigation drawer that should be highlighted when the user clicks on it. The
    next function in the class handles pressing the up button for the secondary destination,
    ensuring that it goes back to its parent primary destination:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`onCreate`中的最后一句话，它指定了当用户点击时应在导航抽屉中突出显示的项目。类中的下一个函数处理按下向上按钮以访问次要目标，确保它返回其父级主要目标：
- en: '[PRE21]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The app bar can also display other menu items through the overflow menu, which,
    when configured, is displayed as three vertical dots at the top on the right-hand
    side. Let’s create an overflow menu to display the **Settings** screen.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 应用栏还可以通过溢出菜单显示其他菜单项，当配置好时，这些菜单项在应用栏右侧顶部以三个垂直点显示。让我们创建一个溢出菜单来显示**设置**屏幕。
- en: To add the overflow menu to the app bar, go to `main.xml`.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将溢出菜单添加到应用栏中，请转到`main.xml`。
- en: 'Update it with the following content:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 更新内容如下：
- en: '[PRE22]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This configuration shows one item: `Settings`. Since it specifies the same
    ID as the `SettingsFragment` destination in the navigation graph, `android:id="@+id/nav_settings"`
    it will open the `SettingsFragment` fragment.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置显示一个项目：“设置”。由于它指定了与导航图中`SettingsFragment`目标相同的ID，即`android:id="@+id/nav_settings"`，因此它将打开`SettingsFragment`片段。
- en: The attribute being set to `app:showAsAction="never"` ensures it will stay as
    a menu option within the three dots overflow menu and will not appear on the app
    bar itself. There are other values for `app:showAsAction`, which set menu options
    to always appear on the app bar and if there is room.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 设置为`app:showAsAction="never"`的属性确保它将作为一个菜单选项保留在三个点的溢出菜单中，并且不会出现在应用栏本身上。`app:showAsAction`还有其他值，可以将菜单选项设置为始终出现在应用栏上，如果空间允许的话。
- en: 'See the full list here: [https://developer.android.com/guide/topics/resources/menu-resource](https://developer.android.com/guide/topics/resources/menu-resource).'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里查看完整列表：[https://developer.android.com/guide/topics/resources/menu-resource](https://developer.android.com/guide/topics/resources/menu-resource)。
- en: 'To add the overflow menu to the app bar, add the following to the `MainActivity`
    class:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将溢出菜单添加到应用栏，请将以下内容添加到`MainActivity`类中：
- en: '[PRE23]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You will also need to add the following imports:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要添加以下导入：
- en: '[PRE24]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `onCreateOptionsMenu` function selects the menu to add to the app bar, while
    `onOptionsItemSelected` handles what to do when the item is selected using the
    `item.onNavDestinationSelected(findNavController(R.id.nav_host_fragment))` navigation
    function. This is used to navigate to the destination within the navigation graph.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`onCreateOptionsMenu` 函数选择要添加到应用程序栏的菜单，而 `onOptionsItemSelected` 处理当使用 `item.onNavDestinationSelected(findNavController(R.id.nav_host_fragment))`
    导航函数选择项时要执行的操作。这用于在导航图中导航到目的地。'
- en: 'Run the app and navigate to a top-level destination using the navigation drawer.
    The following screenshot shows an example of navigating to the `Recent` destination:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序，并使用导航抽屉导航到顶级目的地。以下屏幕截图显示了导航到“最近”目的地的示例：
- en: '![Figure 4.4 – Recent menu item opened from the navigation drawer](img/B19411_04_04.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.4 – 从导航抽屉打开的“最近”菜单项](img/B19411_04_04.jpg)'
- en: Figure 4.4 – Recent menu item opened from the navigation drawer
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4 – 从导航抽屉打开的“最近”菜单项
- en: 'When you open the navigation drawer again you will see that the `Recent` menu
    item is selected:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你再次打开导航抽屉时，你会看到“最近”菜单项被选中：
- en: '![Figure 4.5 – The highlighted Recent menu item in the navigation drawer](img/B19411_04_05.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.5 – 导航抽屉中高亮的“最近”菜单项](img/B19411_04_05.jpg)'
- en: Figure 4.5 – The highlighted Recent menu item in the navigation drawer
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5 – 导航抽屉中高亮的“最近”菜单项
- en: 'Select the **Home** menu item again to display the button with the label **LINK
    TO** **CONTENT BUTTON**:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次选择**主页**菜单项以显示带有标签**链接到** **内容按钮**的按钮：
- en: '![Figure 4.6 – The Home screen with a button for the secondary destination](img/B19411_04_06.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.6 – 带有次要目的地按钮的主屏幕](img/B19411_04_06.jpg)'
- en: Figure 4.6 – The Home screen with a button for the secondary destination
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.6 – 带有次要目的地按钮的主屏幕
- en: 'Click this button to go to the secondary destination. You will see an up arrow
    displayed:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击此按钮转到次要目的地。你会看到一个向上箭头显示：
- en: '![Figure 4.7 – Secondary destination with an up arrow displayed](img/B19411_04_07.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.7 – 显示向上箭头的次要目的地](img/B19411_04_07.jpg)'
- en: Figure 4.7 – Secondary destination with an up arrow displayed
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.7 – 显示向上箭头的次要目的地
- en: 'In all the preceding screenshots, the overflow menu is displayed. After selecting
    it, you will see a fragment with the up arrow displayed:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有前面的屏幕截图中，都显示了溢出菜单。选择它后，你会看到一个显示向上箭头的片段：
- en: '![Figure 4.8 – Settings Fragment](img/B19411_04_08.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.8 – 设置片段](img/B19411_04_08.jpg)'
- en: Figure 4.8 – Settings Fragment
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.8 – 设置片段
- en: Although there are quite a few steps to go through to set up an app with a navigation
    drawer, once created, it is very configurable. By adding a menu item entry to
    the drawer menu and a destination to the navigation graph, a new fragment can
    be created and set up for use immediately.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然设置具有导航抽屉的应用程序需要经过相当多的步骤，但一旦创建，它就非常可配置。通过向抽屉菜单添加一个菜单项条目和导航图中的一个目的地，可以创建并立即设置一个新的片段。
- en: This removes a lot of the boilerplate code you needed to use fragments in the
    previous chapter. The next navigational pattern you’ll explore is bottom navigation.
    This has become the most popular navigational pattern in Android, largely because
    it makes the main sections of the app easily accessible.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这将删除你在上一章中使用片段所需的大量样板代码。接下来，你将探索的下一个导航模式是底部导航。这已成为 Android 中最受欢迎的导航模式，主要是因为它使得应用程序的主要部分易于访问。
- en: Bottom navigation
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 底部导航
- en: '**Bottom navigation** is used when there are a limited number of top-level
    destinations, and these can range from three to five primary destinations that
    are not related to each other. Each item on the bottom navigation bar displays
    an icon and an optional text label.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**底部导航**用于当有有限数量的顶级目的地时，这些目的地可以从三个到五个主要目的地不等，它们之间没有关联。底部导航栏上的每个项目都显示一个图标和一个可选的文本标签。'
- en: This navigation allows quick access as the items are always available, no matter
    which secondary destination of the app the user navigates to.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这种导航允许快速访问，因为项目始终可用，无论用户导航到应用程序的哪个次要目的地。
- en: Exercise 4.02 – adding bottom navigation to your app
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 4.02 – 将底部导航添加到你的应用程序
- en: Create a new app in Android Studio named `Bottom Navigation` using the **Empty
    Activity** project template, leaving all the other defaults as they are. Do not
    use the **Bottom Navigation Activity** project template, as we are going to use
    incremental steps to build the app.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建一个名为 `Bottom Navigation` 的新应用程序，使用 **Empty Activity** 项目模板，保留所有其他默认设置。不要使用
    **Bottom Navigation Activity** 项目模板，因为我们打算使用增量步骤来构建应用程序。
- en: You will build a loyalty app that provides offers, rewards, and so on for customers
    who have signed up to use it. Bottom navigation is quite common for this kind
    of app because there will typically be limited top-level destinations.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 你将构建一个忠诚度应用程序，为注册使用该应用程序的客户提供优惠、奖励等。底部导航对于这类应用程序来说相当常见，因为通常顶级目标有限。
- en: 'Let’s get started:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧：
- en: Many of the steps are very similar to the previous exercise, as you will be
    using Jetpack navigation and defining destinations in a navigation graph and a
    corresponding menu.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 许多步骤与之前的练习非常相似，因为你将使用 Jetpack 导航并在导航图和相应的菜单中定义目标。
- en: Create a new project with an `Empty Activity` called `Bottom Navigation`.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `Bottom Navigation` 的 `Empty Activity` 的新项目。
- en: 'Add the Gradle dependencies you will require to `app/build.gradle`:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所需的 Gradle 依赖项添加到 `app/build.gradle`：
- en: '[PRE25]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Append `strings.xml` in the `res/values` folder with the following values:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `res/values` 文件夹中追加 `strings.xml` 并包含以下值：
- en: strings.xml
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`strings.xml`'
- en: '[PRE26]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create eight fragments with the following names:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建以下名称的八个片段：
- en: '`HomeFragment`'
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HomeFragment`'
- en: '`ContentFragment`'
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ContentFragment`'
- en: '`OffersFragment`'
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OffersFragment`'
- en: '`RewardsFragment`'
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RewardsFragment`'
- en: '`SettingsFragment`'
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SettingsFragment`'
- en: '`TicketsFragment`'
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TicketsFragment`'
- en: '`CartFragment`'
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CartFragment`'
- en: Apply the same layout that you applied in the previous exercise for all the
    fragments adding the corresponding string resource except for `fragment_home.xml`.
    For this layout, use the same layout file that you used in *Exercise 4.01 – creating
    an App with a* *navigation drawer*.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为所有片段应用与之前练习中相同的布局，除了 `fragment_home.xml`。对于此布局，使用你在 *练习 4.01 – 创建带有* *导航抽屉*
    *的应用* 中使用的相同布局文件。
- en: 'Create the navigation graph as you did in the previous exercise and call it
    `mobile_navigation.xml`. Update it with the code from the following file provided
    in the link. A truncated version of the code is shown here. See the link for the
    entire code block you need to use: [https://packt.link/Fwuyl](https://packt.link/Fwuyl).'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照之前的练习创建导航图，并将其命名为 `mobile_navigation.xml`。使用以下链接中提供的文件中的代码更新它。这里显示的是代码的截断版本。请参阅链接以获取您需要使用的整个代码块：[https://packt.link/Fwuyl](https://packt.link/Fwuyl)。
- en: mobile_navigation.xml
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`mobile_navigation.xml`'
- en: '[PRE27]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Update the `onCreateView` function in `HomeFragment` to use the destination
    in the navigation graph to navigate to `ContentFragment`. You will also need to
    add the following imports:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `HomeFragment` 中的 `onCreateView` 函数，使用导航图中的目标导航到 `ContentFragment`。你还需要添加以下导入语句：
- en: '[PRE28]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now that the destinations have been defined in the navigation graph, create
    the menu in the bottom navigation to reference these destinations. First, however,
    you need to gather the icons that will be used in this exercise. Go to the completed
    exercise on GitHub and find the vector assets in the `drawable` folder: [https://packt.link/pUXvC](https://packt.link/pUXvC).'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在导航图中的目标已经定义，创建底部导航菜单以引用这些目标。首先，你需要收集本练习中将要使用的图标。前往 GitHub 上的完成练习，并在 `drawable`
    文件夹中找到矢量资产：[https://packt.link/pUXvC](https://packt.link/pUXvC)。
- en: 'Copy the following drawables to the drawable folder of your project:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下可绘制文件复制到项目的 `drawable` 文件夹中：
- en: '`cart.xml`'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cart.xml`'
- en: '`home.xml`'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`home.xml`'
- en: '`offers.xml`'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`offers.xml`'
- en: '`rewards.xml`'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rewards.xml`'
- en: '`tickets.xml`'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tickets.xml`'
- en: 'Create a `bottom_nav_menu.xml` file (right click on the `res` folder and select
    `cart.xml` vector asset, which will be used for the top toolbar. Notice that the
    IDs of the items match the IDs in the navigation graph:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `bottom_nav_menu.xml` 文件（在 `res` 文件夹上右键点击并选择 `cart.xml` 矢量资产，它将被用于顶部工具栏。注意，项的
    ID 与导航图中的 ID 匹配）：
- en: bottom_nav_menu.xml
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`bottom_nav_menu.xml`'
- en: '[PRE29]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Update the `activity_main.xml` file with the following content:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `activity_main.xml` 文件如下内容：
- en: activity_main.xml
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`activity_main.xml`'
- en: '[PRE30]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `BottomNavigation` view is configured with the menu you created previously,
    that is, `app:menu="@menu/bottom_nav_menu"`, while `FragmentContainerView` is
    configured with `app:navGraph="@navigation/mobile_navigation"`. As the bottom
    navigation in the app is not connected directly to the app bar, there are fewer
    layout files to set up.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`BottomNavigation` 视图配置了之前创建的菜单，即 `app:menu="@menu/bottom_nav_menu"`，而 `FragmentContainerView`
    配置为 `app:navGraph="@navigation/mobile_navigation"`。由于应用程序中的底部导航没有直接连接到应用程序栏，因此需要设置的布局文件较少。'
- en: 'Update `MainActivity` with the following content:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `MainActivity` 如下内容：
- en: '[PRE31]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The preceding code should be very familiar because it was explained in the previous
    exercise. The main change here is that instead of a `NavigationView` that holds
    the main UI navigation for the navigation drawer, it is now replaced with a `BottomNavigationView`.
    The configuration after this is the same.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码应该非常熟悉，因为它在前面的练习中已经解释过了。这里的主要变化是，现在用 `BottomNavigationView` 替换了之前用于持有导航抽屉主要
    UI 导航的 `NavigationView`。之后的配置是相同的。
- en: 'Run the app. You should see the following output:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用。你应该看到以下输出：
- en: '![Figure 4.9 – Bottom navigation with Home selected](img/B19411_04_09.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.9 – 选择“主页”的底部导航](img/B19411_04_09.jpg)'
- en: Figure 4.9 – Bottom navigation with Home selected
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.9 – 选择“主页”的底部导航
- en: 'The display shows the four menu items you set up, with the **Home** item selected
    as the start destination. Click the square button to be taken to the secondary
    destination within **Home**:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示显示了您设置的四个菜单项，其中 **主页** 项被选中作为起始目的地。点击方形按钮将被带到 **主页** 内的辅助目的地：
- en: '![Figure 4.10 – Secondary destination within Home](img/B19411_04_10.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.10 – 主页内的辅助目的地](img/B19411_04_10.jpg)'
- en: Figure 4.10 – Secondary destination within Home
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.10 – 主页内的辅助目的地
- en: 'The action that makes this possible is the `nav_home_to_content` action specified
    in the navigation graph:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使这成为可能的行为是导航图中指定的 `nav_home_to_content` 动作：
- en: mobile_navigation.xml (snippet)
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: mobile_navigation.xml（片段）
- en: '[PRE32]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Since only a limited amount of items are added to the bottom navigation (typically
    three to five), sometimes action items (those that have a dedicated icon) are
    added to the app bar. Create another menu called `main.xml` and add the following
    content:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于底部导航栏中添加的项目数量有限（通常是三到五个），有时会将在应用栏中添加操作项（那些有专用图标的项目）。创建另一个名为 `main.xml` 的菜单，并添加以下内容：
- en: main.xml
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: main.xml
- en: '[PRE33]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This menu will be used in the overflow menu in the app bar. The overflow menu
    will be available when you click on the three dots. A `cart` vector asset will
    also be displayed on the top app bar because the `app:showAsAction` attribute
    is set to `always`. Configure the overflow menu within `MainActivity` by adding
    the following:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此菜单将在应用栏的溢出菜单中使用。当你点击三个点时，溢出菜单将可用。由于 `app:showAsAction` 属性设置为 `always`，因此还会在顶部应用栏上显示一个
    `cart` 矢量资产。在 `MainActivity` 中通过添加以下内容来配置溢出菜单：
- en: 'Add these two imports at the top of the file:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件顶部添加以下两个导入：
- en: '[PRE34]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'And then these two functions:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 然后这两个函数：
- en: '[PRE35]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This will now display the main menu in the app bar. Run the app again, and
    you’ll see the following:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，这将在应用栏中显示主菜单。再次运行应用，你将看到以下内容：
- en: '![Figure 4.11 – Bottom navigation with the overflow menu](img/B19411_04_11.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.11 – 带有溢出菜单的底部导航](img/B19411_04_11.jpg)'
- en: Figure 4.11 – Bottom navigation with the overflow menu
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.11 – 带有溢出菜单的底部导航
- en: 'Selecting the shopping cart takes you to the secondary destination we configured
    in the navigation graph:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 选择购物车将带您到我们在导航图中配置的辅助目的地：
- en: '![Figure 4.12 – Bottom navigation with the overflow menu in the secondary destination](img/B19411_04_12.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.12 – 在辅助目的地中带有溢出菜单的底部导航](img/B19411_04_12.jpg)'
- en: Figure 4.12 – Bottom navigation with the overflow menu in the secondary destination
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.12 – 在辅助目的地中带有溢出菜单的底部导航
- en: As you’ve seen in this exercise, setting up bottom navigation is quite straightforward.
    The navigation graph and the menu setup simplify linking the menu items to the
    fragments. Additionally, integrating the action bar and the overflow menu are
    also small steps to implement.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在这次练习中看到的，设置底部导航相当直接。导航图和菜单设置简化了将菜单项链接到片段的过程。此外，集成动作栏和溢出菜单也是实现的小步骤。
- en: If you are developing an app that has very well-defined top-level destinations
    and switching between them is important, then the visibility of these destinations
    makes bottom navigation an ideal choice. The final primary navigation pattern
    to explore is tabbed navigation.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在开发一个具有非常明确的高级目的地并且在这些目的地之间切换很重要的应用，那么这些目的地的可见性使得底部导航成为一个理想的选择。接下来要探索的最后一个主要导航模式是标签导航。
- en: This is a versatile pattern as it can be used as an app’s primary navigation
    and as secondary navigation with the other navigation patterns we’ve studied.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个多功能的模式，因为它可以用作应用的主要导航，也可以作为我们研究过的其他导航模式中的辅助导航。
- en: Tabbed navigation
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标签导航
- en: '**Tabbed navigation** is mostly used when you want to display related items.
    It is common to have fixed tabs if there’s only a few of them (typically between
    two and five tabs) and scrolling horizontal tabs if you have more than five tabs.
    They are used mostly for grouping destinations that are at the same hierarchical
    level.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '**标签导航**主要用于你想显示相关项目时。如果有少量标签（通常在两个到五个标签之间），通常会使用固定标签，如果你有超过五个标签，则使用可滚动的水平标签。它们主要用于对处于同一层次级别的目的地进行分组。'
- en: This can be the primary navigation if the destinations are related. This might
    be the case if the app you developed is in a narrow or specific subject field
    where the primary destinations are related, such as a news app. More commonly,
    it is used with bottom navigation to present secondary navigation that’s available
    within a primary destination. The following exercise demonstrates using tabbed
    navigation for displaying related items.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 如果目的地相关，这可以成为主要导航。这可能适用于你开发的应用程序在一个狭窄或特定主题领域，其中主要目的地是相关的，例如新闻应用。更常见的是，它与底部导航一起使用，以展示主要目的地内的次要导航。以下练习演示了使用标签导航来显示相关项目。
- en: Exercise 4.03 – using tabs for app navigation
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习4.03 – 使用标签进行应用导航
- en: 'Create a new app in Android Studio with an `Empty Activity` named `Tab Navigation`.
    You are going to build a skeleton movies app that displays the genres of movies.
    Let’s get started:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新的应用程序，名为`Tab Navigation`的`Empty Activity`。你将构建一个显示电影类型的骨架电影应用程序。让我们开始吧：
- en: 'Update the `strings.xml` with the following content:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下内容更新`strings.xml`：
- en: strings.xml
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: strings.xml
- en: '[PRE36]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The `<string name="dummy_text">` file specified provides some body text for
    each movie genre:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`<string name="dummy_text">`文件为每个电影类型提供了一些正文文本：'
- en: 'In order to be able to swipe through the tabs left and right, we need to use
    a `ViewPager` component. Add the following dependency to app `build.gradle`:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了能够左右滑动标签页，我们需要使用一个`ViewPager`组件。在app的`build.gradle`文件中添加以下依赖项：
- en: '[PRE37]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Create a new blank `MoviesFragment` fragment which will display some body text
    and replace the layout file content with the code following code snippet.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的空白`MoviesFragment`片段，它将显示一些正文文本，并用以下代码片段替换布局文件内容。
- en: fragment_movies.xml
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: fragment_movies.xml
- en: '[PRE38]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Update the `activity_main.xml` file with the following content:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下内容更新`activity_main.xml`文件：
- en: '[PRE39]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The layout displays `TabLayout` at the top and notices that it sets the tabs
    to be fixed with the `app:tabMode="fixed"` attribute. To display the required
    content, you will use `ViewPager`, a swipeable layout that allows you to add multiple
    views or fragments so that when a user swipes to change one of the tabs, the body
    content displays the corresponding view or fragment. For this exercise, you are
    going to swipe between movie fragments.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 布局在顶部显示`TabLayout`，并注意它使用`app:tabMode="fixed"`属性将标签设置为固定。为了显示所需的内容，你将使用`ViewPager`，这是一个可滑动的布局，允许你添加多个视图或片段，这样当用户滑动以更改其中一个标签时，主体内容将显示相应的视图或片段。对于这个练习，你将滑动在电影片段之间。
- en: The format of the tabs can be fixed so all are visible on the screen at the
    same time or scrollable, so some tabs will initially be off-screen if they don’t
    fit within the horizontal screen space available.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 标签的格式可以是固定的，这样所有标签都可以同时显示在屏幕上，或者可以滚动，这样如果标签不适合可用的水平屏幕空间，一些标签最初将不在屏幕上。
- en: Next, we need to provide the content for `ViewPager`. The component that provides
    the data that’s used in `ViewPager` is called an adapter.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要为`ViewPager`提供内容。在`ViewPager`中提供数据的组件被称为适配器。
- en: 'Create a simple adapter that will be used to display our movies. Go to `MovieGenresAdapter`:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个简单的适配器，用于显示我们的电影。转到`MovieGenresAdapter`：
- en: '[PRE40]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: First, look at the `MovieGenresAdapter` class header. It extends from `FragmentStateAdapter`,
    which is an adapter used to populate fragments within `ViewPager`.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，查看`MovieGenresAdapter`类的头部。它继承自`FragmentStateAdapter`，这是一个用于在`ViewPager`中填充片段的适配器。
- en: 'The callback method’s functions are as follows:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 回调方法的函数如下：
- en: '`getItemCount()`: This returns the total number of fragments we will be inserting,
    which, as we are matching the number of pages to the number of tabs, is the size
    of the `TABS_GENRE_FIXED` constant.'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getItemCount()`：这个方法返回我们将要插入的片段总数，由于我们将页面数与标签数相匹配，所以是`TABS_GENRE_FIXED`常量的大小。'
- en: '`createFragment(position Int)`: This creates the fragment to be displayed in
    `ViewPager` at the passed in argument position. Here we are setting this to be
    the same fragment, but in a real app, you would populate it with different fragments.'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`createFragment(position Int)`: 这将创建在传递的参数位置显示在 `ViewPager` 中的片段。在这里，我们将它设置为相同的片段，但在实际应用中，你会在其中填充不同的片段。'
- en: 'Update `MainActivity` so that it uses tabs with `ViewPager`:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `MainActivity` 以使用带有 `ViewPager` 的标签：
- en: '[PRE41]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: You then retrieve the Views from the layout and link the tabs to `ViewPager`
    with the `TabLayoutMediator`. The tab itself is exposed for you to customize.
    In this instance, we are just setting the text. The position is also available
    to link the tab position to the fragment position in `ViewPager`. Creating this
    tab navigation is simple and effective.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，从布局中检索视图，并使用 `TabLayoutMediator` 将标签与 `ViewPager` 链接。标签本身是公开的，以便你可以自定义。在这个例子中，我们只是设置了文本。位置也可以用来将标签位置与
    `ViewPager` 中的片段位置链接。创建这种标签导航既简单又有效。
- en: 'Run the app up, and you should see the following:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用，你应该看到以下内容：
- en: '![Figure 4.13 – Tab layout with fixed tabs](img/B19411_04_13.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.13 – 带有固定标签的标签布局](img/B19411_04_13.jpg)'
- en: Figure 4.13 – Tab layout with fixed tabs
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.13 – 带有固定标签的标签布局
- en: You can swipe left and right in the body of the page to go to each of the three
    tabs, and you can also select one of the respective tabs to perform the same action.
    Now, let’s change the tab data that’s being displayed and set the tabs so that
    they can be scrolled through.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在页面主体中左右滑动以访问三个标签中的每一个，你也可以选择相应的标签以执行相同操作。现在，让我们更改正在显示的标签数据，并设置标签以便它们可以滚动。
- en: 'First, change `MovieGenresAdapter` to use a few extra genres by updating the
    `getItemCount` function:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将 `MovieGenresAdapter` 更新为使用一些额外的类型，通过更新 `getItemCount` 函数：
- en: '[PRE42]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'In `MainActivity`, set `TabLayoutMediator` to use the updated item count in
    the Adapter to set the tab text for these extra pages:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MainActivity` 中，将 `TabLayoutMediator` 设置为使用适配器中更新的项目计数来设置这些额外页面的标签文本：
- en: '[PRE43]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: You will also need to change the `app:tabMode="fixed"` line to `app:tabMode="scrollable"`
    in the `activity_layout.xml` file.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还需要将 `activity_layout.xml` 文件中的 `app:tabMode="fixed"` 行更改为 `app:tabMode="scrollable"`。
- en: 'Run the app now, and you should see the following:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在运行应用，你应该看到以下内容：
- en: '![Figure 4.14 – The Tab Navigation layout with scrollable tabs](img/B19411_04_14.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.14 – 带有可滚动标签的标签导航布局](img/B19411_04_14.jpg)'
- en: Figure 4.14 – The Tab Navigation layout with scrollable tabs
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.14 – 带有可滚动标签的标签导航布局
- en: The list of tabs continues to display off the screen. The tabs can be swiped
    and selected, and the body content can also be swiped so that you can go left
    and right through the tab pages.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 标签列表继续显示在屏幕之外。标签可以滑动和选择，主体内容也可以滑动，这样你就可以在标签页面中左右移动。
- en: With this exercise, you learned how versatile tabs are when it comes to providing
    navigation in an app. Fixed-width tabs can be used for both primary and secondary
    navigation. At the same time, scrollable tabs can be used to group related items
    together for secondary navigation, so you also need to add primary navigation
    to the app.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个练习，你学习了标签在提供应用导航时的多功能性。固定宽度的标签可以用于主要和次要导航。同时，可滚动标签可以用来将相关项目分组以进行次要导航，因此你还需要向应用添加主要导航。
- en: In this example, the primary navigation has been omitted for simplicity, but
    for more real-world and complex apps, you can either add a navigation drawer or
    bottom navigation.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，为了简化，省略了主要导航，但对于更真实和复杂的应用，你可以添加导航抽屉或底部导航。
- en: Activity 4.01 – building primary and secondary app navigation
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 4.01 – 构建主要和次要应用导航
- en: You have been tasked with creating a sports app. It can have three or more top-level
    destinations. One of the primary destinations, however, must be called `My Sports`
    and should link to one or more secondary destinations, which are sports. You can
    use any one of the navigation patterns we have explored in this chapter or a combination
    of them, and you can also introduce any customizations that you feel are appropriate.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 你被分配了一个创建体育应用的任务。它可以有三个或更多顶级目的地。然而，其中一个主要目的地必须称为 `My Sports` 并链接到一个或多个次要目的地，即运动。你可以使用本章中探索的任何一种导航模式或它们的组合，你也可以引入你认为合适的任何自定义设置。
- en: 'There are different ways of attempting this activity. One approach would be
    to use bottom navigation and add the individual secondary sports destinations
    to the navigation graph so that it can link to these destinations. It is fairly
    simple and delegates to the navigation graph using actions. Here is what the home
    screen should look like after using this approach:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试此活动有多种方式。一种方法就是使用底部导航，并将单个二级体育目的地添加到导航图中，以便它可以链接到这些目的地。这相当简单，并且通过操作委托给导航图。以下是使用此方法后主屏幕应该看起来像什么：
- en: "![Figure 4.15 – Bottom navigation for th\uFEFF\uFEFFe My Sports app](img/B19411_04_15.jpg)"
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.15 – My Sports 应用程序的底部导航](img/B19411_04_15.jpg)'
- en: Figure 4.15 – Bottom navigation for the My Sports app
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.15 – My Sports 应用程序的底部导航
- en: Note
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The solution to this activity can be found at: [https://packt.link/By7eE](https://packt.link/By7eE).'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可在：[https://packt.link/By7eE](https://packt.link/By7eE) 找到。
- en: Summary
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter covered the most important navigation techniques you need to know
    about in order to create clear and consistent navigation in your apps. You started
    off by learning how to create an Android Studio project with a navigation drawer
    to connect navigation menu items to individual fragments using Jetpack navigation.
    You then progressed to actions within Jetpack navigation to navigate to other
    secondary destinations in your app within the navigation graph.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了您需要了解的最重要的导航技术，以便在您的应用中创建清晰和一致的导航。您从学习如何使用 Jetpack 导航创建带有导航抽屉的 Android
    Studio 项目开始，将导航菜单项连接到单个片段。然后，您继续学习 Jetpack 导航中的操作，以便在导航图中导航到应用中的其他二级目的地。
- en: The next exercise then used bottom navigation to display primary navigation
    destinations that are always visible on the screen. We followed this by looking
    at tabbed navigation, where you learned how to display both fixed and scrollable
    tabs. For each navigational pattern, you were shown when it might be more suitable,
    depending on the type of app you were building. We finished this chapter by building
    our own app using one or more of these navigational patterns and adding both primary
    and secondary destinations.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的练习使用了底部导航来显示始终可见于屏幕上的主要导航目的地。随后，我们探讨了标签导航，您学习了如何显示固定和可滚动的标签。对于每种导航模式，您都了解了根据您构建的应用类型，何时可能更适合。我们通过构建自己的应用并添加主要和次要目的地来结束本章。
- en: This chapter built upon the comprehensive introduction we provided to Android
    with Android Studio in [*Chapter 1*](B19411_01.xhtml#_idTextAnchor025), *Creating
    Your First App*, as well as what you learned about activities and fragments in
    [*Chapter 2*](B19411_02.xhtml#_idTextAnchor103), *Building User Screen Flows*,
    and [*Chapter 3*](B19411_03.xhtml#_idTextAnchor163), *Developing the UI with Fragments*.
    These chapters covered the knowledge, practice, and fundamental Android components
    you need to create apps. This chapter tied these previous chapters together by
    guiding you through the primary navigational patterns available to make your apps
    stand out and be easy to use.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 本章在 [*第 1 章*](B19411_01.xhtml#_idTextAnchor025)，*创建您的第一个应用*，以及您在 [*第 2 章*](B19411_02.xhtml#_idTextAnchor103)，*构建用户屏幕流程*，和
    [*第 3 章*](B19411_03.xhtml#_idTextAnchor163)，*使用片段开发 UI* 中学到的关于活动和片段的知识的基础上构建。这些章节涵盖了您需要创建应用所需的知识、实践和基本
    Android 组件。本章通过引导您了解可用的主要导航模式，将这些先前章节联系起来，使您的应用脱颖而出且易于使用。
- en: The next chapter will build on these concepts and introduce you to more advanced
    ways of displaying app content. You will start off by learning about binding data
    with lists using `RecyclerView`. After that, you will explore the different mechanisms
    you can use to retrieve and populate content within apps.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将在此基础上构建，并介绍更多高级的显示应用内容的方法。您将从学习如何使用 `RecyclerView` 将数据与列表绑定开始。之后，您将探索您可以使用的不同机制来检索和填充应用内的内容。
- en: 'Part 2: Displaying Network Calls'
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分：显示网络调用
- en: In this part, we will look at how we can integrate popular libraries and frameworks
    used for building Android apps. We will start with libraries used to fetch and
    process data from the internet, then continue with the `RecyclerView` library
    used for rendering lists.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在这部分，我们将探讨如何集成用于构建 Android 应用的流行库和框架。我们将从用于从互联网获取和处理数据的库开始，然后继续使用用于渲染列表的 `RecyclerView`
    库。
- en: Next, we will look at how we can handle permissions and use Google Maps, followed
    by performing tasks in the background with Services and `WorkManager`, and then
    displaying notifications to the user. Finally, we will look at Jetpack Compose
    and how we can use it to simplify the creation of user interfaces.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨如何处理权限和使用 Google Maps，然后是使用 Services 和 `WorkManager` 在后台执行任务，接着向用户显示通知。最后，我们将探讨
    Jetpack Compose 以及如何使用它来简化用户界面的创建。
- en: 'We will cover the following chapters in this section:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将涵盖以下章节：
- en: '[*Chapter 5*](B19411_05.xhtml#_idTextAnchor312), *Essential Libraries: Retrofit,
    Moshi, and Glide*'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第5章*](B19411_05.xhtml#_idTextAnchor312), *必备库：Retrofit, Moshi 和 Glide*'
- en: '[*Chapter 6*](B19411_06.xhtml#_idTextAnchor353), *Adding and Interacting with
    RecyclerView*'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第6章*](B19411_06.xhtml#_idTextAnchor353), *添加和与 RecyclerView 交互*'
- en: '[*Chapter 7*](B19411_07.xhtml#_idTextAnchor421), *Android Permissions and Google
    Maps*'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第7章*](B19411_07.xhtml#_idTextAnchor421), *Android 权限和 Google Maps*'
- en: '[*Chapter 8*](B19411_08.xhtml#_idTextAnchor471), *Services, WorkManager, and
    Notifications*'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第8章*](B19411_08.xhtml#_idTextAnchor471), *服务、WorkManager 和通知*'
- en: '[*Chapter 9*](B19411_09.xhtml#_idTextAnchor499), *Building User Interfaces
    Using Jetpack Compose*'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第9章*](B19411_09.xhtml#_idTextAnchor499), *使用 Jetpack Compose 构建用户界面*'
