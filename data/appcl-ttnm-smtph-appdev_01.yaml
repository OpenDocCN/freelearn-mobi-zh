- en: Chapter 1. Building Apps using Native UI Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 使用原生UI组件构建应用
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Building with Windows and Views
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用窗口和视图构建
- en: Adding a TabGroup to your app
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将TabGroup添加到您的应用中
- en: Creating and formatting Labels
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和格式化标签
- en: Creating TextFields for user input
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用于用户输入的TextField
- en: Working with keyboards and keyboard toolbars
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与键盘和键盘工具栏一起工作
- en: Enhancing your App with Sliders and Switches
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用滑块和开关增强您的应用
- en: Passing custom variables between windows
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在窗口之间传递自定义变量
- en: Creating buttons and capturing click events
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建按钮并捕获点击事件
- en: Informing your users with dialogs and alerts
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用对话框和警报通知您的用户
- en: Creating charts using Raphael JS
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Raphael JS创建图表
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: The ability to create user-friendly layouts with rich, intuitive controls is
    an important factor in successful app design. With mobile apps and their minimal
    screen real estate, this becomes even more important. Titanium leverages a huge
    amount of native controls found in both the iPhone/iPod Touch and Android platforms,
    allowing the developer to create apps just as rich in functionality as those created
    by native language developers.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 能够使用丰富、直观的控件创建用户友好的布局是成功应用设计的重要因素。在移动应用及其有限的屏幕空间中，这一点变得更加重要。Titanium利用了iPhone/iPod
    Touch和Android平台中大量本机控件，允许开发者创建与本地语言开发者创建的应用一样功能丰富的应用。
- en: How does this compare to the mobile web? When it comes to HTML/CSS only mobile
    apps, savvy users can definitely tell the difference in comparison to a platform
    like Titanium, which allows you to use platform-specific conventions and access
    your iPhone or Android device's latest and greatest features. An application written
    in Titanium feels and operates like a native app since essentially all of the
    UI components are native. This means crisp, responsive UI components utilizing
    the full capabilities and power of your device.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这与移动网络相比如何？当涉及到仅使用HTML/CSS的移动应用时，精明的用户肯定能感觉到与Titanium这样的平台相比的差异，Titanium允许您使用平台特定的约定并访问您iPhone或Android设备的最新和最强大的功能。用Titanium编写的应用感觉和操作就像原生应用一样，因为本质上所有的UI组件都是原生的。这意味着利用设备的全部功能和能力的清晰、响应式的UI组件。
- en: Most other books at this point would start explaining the fundamental principles
    of Titanium and maybe give you a rundown on the architecture and expand on the
    required syntax.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，大多数其他书籍都会开始解释Titanium的基本原理，也许会给你一个关于架构的概述，并扩展所需的语法。
- en: Yawn...
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 呦……
- en: 'We''re not going to do that. Instead, we will be jumping straight into the
    fun stuff, building your user interface and making a real-world app! In this chapter,
    you''ll learn:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会这么做。相反，我们将直接进入有趣的部分，构建您的用户界面并制作一个真实世界的应用！在本章中，您将学习：
- en: How to build an app using `Windows` and `Views`, and understanding the differences
    between the two
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用`Windows`和`Views`构建应用，并理解两者之间的区别
- en: Putting together a UI using all of the common components, including `TextFields,
    Labels` and `Switches`
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用所有常见组件（包括`TextField`、`Labels`和`Switches`）组合UI
- en: Just how similar Titanium component properties are to CSS when formatting your
    UI
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Titanium组件属性在格式化UI时与CSS的相似程度如何
- en: You can pick and choose any recipe from the chapter if you want since each one
    is a self-contained example that will explain a specific component or process.
    Alternatively, you can follow each chapter from beginning to end to put together
    a real-world app for calculating loan repayments which we will call **LoanCalc**
    from here on in.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想的话，您可以从中选择任何菜谱，因为每个菜谱都是一个自包含的示例，将解释一个特定的组件或过程。或者，您也可以从本章的开始到结束逐章阅读，以构建一个用于计算贷款还款的真实世界应用，从现在起我们将称之为**LoanCalc**。
- en: Note
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Complete source code for this entire chapter can be found in the `/Chapter 1/LoanCalc`
    folder.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的完整源代码可以在`/Chapter 1/LoanCalc`文件夹中找到。
- en: Building with Windows and Views
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用窗口和视图构建
- en: We are going to start off with the very building blocks of all Titanium applications,
    Windows and Views. By the end of this recipe you will understand how to implement
    a Window and add Views to it, as well as understand the fundamental difference
    between the two, which is not as obvious as it may seem at first glance.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从所有Titanium应用的基石开始，即窗口和视图。在本菜谱结束时，您将了解如何实现窗口并向其中添加视图，以及理解两者之间的基本区别，这并不像乍一看那么明显。
- en: If you are intending to follow the entire chapter and build the LoanCalc app,
    then pay careful attention to the first few steps of this chapter, as you will
    need to perform these steps again for each subsequent app in the book.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算跟随整个章节并构建LoanCalc应用，那么请仔细关注本章的前几个步骤，因为你在书中每个后续应用中都需要再次执行这些步骤。
- en: Note
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We are assuming that you have already downloaded and installed Titanium Studio
    and either Apple XCode with the iOS SDK or Google's Android SDK, or both. If not,
    you can follow along with the installation process via the online tutorial at
    [http://boydlee.com/titanium-appcelerator-cookbook/setup](http://boydlee.com/titanium-appcelerator-cookbook/setup).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设你已经下载并安装了Titanium Studio以及Apple XCode与iOS SDK或Google的Android SDK，或者两者都要。如果没有，你可以通过在线教程[http://boydlee.com/titanium-appcelerator-cookbook/setup](http://boydlee.com/titanium-appcelerator-cookbook/setup)跟随安装过程。
- en: Getting ready
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To follow this recipe you will need Titanium Studio installed. We are using
    version 1.0.7, which is the latest version at the time of writing. Additionally,
    you will also need either the iOS SDK with XCode or the Google Android SDK installed.
    All of our examples generally work on either platform unless specified explicitly
    at the start of a chapter. You will also need an IDE to write your code. Any IDE
    including Notepad, TextMate, Dashcode, Eclipse, and so on, can be used. However,
    since June 2011, Appcelerator has been providing its own IDE called "Titanium
    Studio", which is based on Aptana. Titanium Studio allows developers to build,
    test, and deploy iOS, Android, Blackberry, and mobile web apps from within a single
    development environment. All of the recipes within this book are based on the
    assumption that you are using the Titanium Studio product, which can be downloaded
    for free from [https://my.appcelerator.com/auth/signup/offer/community](http://https://my.appcelerator.com/auth/signup/offer/community).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随这个食谱，你需要安装Titanium Studio。我们使用的是1.0.7版本，这是撰写时的最新版本。此外，你还需要安装iOS SDK与XCode或Google
    Android SDK。除非在章节开头明确说明，否则我们所有的示例通常都适用于这两个平台。你还需要一个IDE来编写你的代码。任何IDE，包括记事本、TextMate、Dashcode、Eclipse等，都可以使用。然而，自2011年6月以来，Appcelerator已经提供自己的IDE，称为“Titanium
    Studio”，它基于Aptana。Titanium Studio允许开发者在一个单一的开发环境中构建、测试和部署iOS、Android、Blackberry和移动Web应用。本书中的所有食谱都基于假设你正在使用Titanium
    Studio产品，该产品可以从[https://my.appcelerator.com/auth/signup/offer/community](https://my.appcelerator.com/auth/signup/offer/community)免费下载。
- en: To prepare for this recipe, open Titanium Studio and log in if you have not
    already done so. If you need to register a new account, you can do so for free
    directly from within the application. Once you are logged in, click on **File
    | New | New Titanium Mobile Project**, and the details window for creating a new
    project will appear. Enter in LoanCalc the name of the app, and fill in the rest
    of the details with your own information as shown in the following screenshot.
    You can also uncheck the **"iPad"** option, as we will only be building our application
    for the iPhone and Android platforms.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备这个食谱，打开Titanium Studio并登录，如果你还没有这样做的话。如果你需要注册新账户，你可以在应用程序内部直接免费注册。登录后，点击**文件
    | 新建 | 新建Titanium Mobile项目**，将出现创建新项目的详细信息窗口。在LoanCalc中输入应用的名称，并填写以下截图所示的其余详细信息。你也可以取消选择**“iPad”**选项，因为我们只为iPhone和Android平台构建我们的应用程序。
- en: '![Getting ready](img/3968EXP_01_01.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/3968EXP_01_01.jpg)'
- en: Note
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Pay attention to the app identifier, which is written normally in reverse domain
    notation (that is, `com.packtpub.loancalc)`. This identifier cannot be easily
    changed after the project is created and you will need to match it exactly when
    creating provisioning profiles for distributing your apps later on.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 注意应用程序标识符，它通常以反向域名表示法（即，`com.packtpub.loancalc`）书写。在项目创建后，这个标识符不容易更改，你将在创建用于分发应用的配置文件时需要精确匹配它。
- en: Complete source code for this recipe can be found in the `/Chapter 1/Recipe
    1` folder.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的完整源代码可以在`/Chapter 1/Recipe 1`文件夹中找到。
- en: How to do it...
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: First, open the `app.js` file in Titanium Studio. If this is a new project,
    by default Titanium Studio creates a sample app containing a couple of Windows
    inside of a `TabGroup` which is certainly useful but we will cover TabGroups in
    a later recipe, so go ahead and remove all of the generated code. Now let's create
    a Window object to which we will add a View object. This View object will hold
    all of our controls, such as TextFields and Labels.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在 Titanium Studio 中打开 `app.js` 文件。如果这是一个新项目，默认情况下 Titanium Studio 会创建一个包含几个
    `TabGroup` 内部的示例应用，这当然很有用，但我们在后面的菜谱中会介绍 `TabGroup`，所以请继续删除所有生成的代码。现在让我们创建一个 `Window`
    对象，我们将向其中添加一个 `View` 对象。这个 `View` 对象将包含我们所有的控件，例如 `TextFields` 和 `Labels`。
- en: In addition to creating our base Window and View, we will also create an `ImageView`
    component to display our app logo before adding it to our View (you can get the
    image we used from the source code for chapter).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 除了创建我们的基本 `Window` 和 `View`，我们还将创建一个 `ImageView` 组件来显示我们的应用标志，然后再将其添加到我们的 `View`
    中（你可以从章节的源代码中获取我们使用的图片）。
- en: 'Finally, we''ll call the `open()` method on the `Window` to launch it:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将在 `Window` 上调用 `open()` 方法来启动它：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.PacktPub.com](http://www.PacktPub.com). If you
    purchased this book elsewhere, you can visit [http://www.PacktPub.com/support](http://www.PacktPub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从你购买的所有 Packt 书籍的账户中下载示例代码文件。[http://www.PacktPub.com](http://www.PacktPub.com)。如果你在其他地方购买了这本书，你可以访问
    [http://www.PacktPub.com/support](http://www.PacktPub.com/support) 并注册以直接将文件通过电子邮件发送给你。
- en: '![How to do it...](img/3968EXP_01_02.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/3968EXP_01_02.jpg)'
- en: How it works…
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Firstly, it's important to explain the differences between `Windows` and `Views`
    as there are a few fundamental differences that may influence your decision on
    using one compared to the other. Unlike Views, Windows have some additional abilities
    including an `open()` and `close()` method. If you come from a desktop development
    background, you can imagine a Window as the equivalent of a form or screen. If
    you prefer web analogies, then a Window is more like a page whereas Views are
    more like a Div. In addition to these methods, Windows also have display properties
    such as `fullscreen` and `modal` which are not available in Views. You will also
    notice that when creating a new object the `create` keyword pops up, that is `Titanium.UI.createView()`.
    This naming convention is used consistently throughout the Titanium API, and almost
    all components are instantiated this way.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，重要的是要解释 `Windows` 和 `Views` 之间的区别，因为有一些基本区别可能会影响你决定使用其中一个而不是另一个。与 Views 不同，Windows
    有一些额外的功能，包括 `open()` 和 `close()` 方法。如果你来自桌面开发背景，你可以想象 Window 是表单或屏幕的等价物。如果你更喜欢网络类比，那么
    Window 更像是一个页面，而 Views 更像是一个 Div。除了这些方法之外，Windows 还有一些显示属性，如 `fullscreen` 和 `modal`，这些属性在
    Views 中不可用。你还会注意到，在创建新对象时，`create` 关键字会弹出，即 `Titanium.UI.createView()`。这种命名约定在
    Titanium API 中是一致的，几乎所有组件都是以这种方式实例化的。
- en: Windows and Views can be thought of as the building blocks of your Titanium
    application. All of your UI components are added to either a Window, or a View,
    which is a child of a Window. There are a number of formatting options available
    for both of these objects, the properties and syntax of which will be very familiar
    to anyone who has used CSS in the past. Font, Color, BorderWidth, BorderRadius,
    Width, Height, Top, and Left are all properties that function exactly the same
    way as you would expect them to in CSS and apply to Windows and almost all Views.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将 Windows 和 Views 视为你的 Titanium 应用的构建块。所有的 UI 组件都添加到 Window 或其子对象 View 中。这两个对象都有许多格式化选项，其属性和语法对以前使用过
    CSS 的人来说非常熟悉。字体、颜色、边框宽度、边框半径、宽度、高度、顶部和左侧都是与你在 CSS 中期望的完全相同的属性，它们适用于 Window 和几乎所有
    View。
- en: Tip
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: It's important to note that your app requires at least one Window to function
    and that Window must be called from within your entry point which is the app.js
    file.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，你的应用至少需要一个 Window 才能运行，并且这个 Window 必须在入口点（即 app.js 文件）中调用。
- en: You may have also noticed that we sometimes instantiated objects or called methods
    using `Titanium.UI.createXXX`, and at other times used `Ti.UI.createXXX`. Using
    "Ti" is simply a short-hand namespace designed to save your time during coding,
    and will execute your code in exactly the same manner as the full "Titanium" namespace
    does.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能也注意到，我们有时使用 `Titanium.UI.createXXX` 实例化对象或调用方法，而在其他时候使用 `Ti.UI.createXXX`。使用
    "Ti" 只是一个简写命名空间，旨在节省您在编码中的时间，并且将以与完整 "Titanium" 命名空间完全相同的方式执行您的代码。
- en: Adding a TabGroup to your app
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 TabGroup 添加到您的应用程序中
- en: 'TabGroups are one of the most commonly used UI elements and form the basis
    of the layout for many iPhone and Android apps on the market today. The TabGroup
    consists of a sectioned set of tabs each containing an individual window, which
    in turn contains a navigation bar and title. On the iPhone, these tabs appear
    in a horizontal list on the bottom of the screen. On Android devices, by default,
    they appear as ''upside-down'' tabs at the top of the screen, as shown in the
    next screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: TabGroups 是最常用的 UI 元素之一，构成了市场上许多 iPhone 和 Android 应用程序的布局基础。TabGroup 由一组分区的标签组成，每个标签包含一个单独的窗口，该窗口反过来包含一个导航栏和标题。在
    iPhone 上，这些标签出现在屏幕底部的水平列表中。在 Android 设备上，默认情况下，它们以“颠倒”的标签形式出现在屏幕顶部，如下一张截图所示：
- en: '![Adding a TabGroup to your app](img/3968EXP_01_03.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![将 TabGroup 添加到您的应用程序中](img/3968EXP_01_03.jpg)'
- en: Getting ready
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The complete source code for this recipe can be found in the `/Chapter 1/Recipe
    2` folder.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的完整源代码可在 `/Chapter 1/Recipe 2` 文件夹中找到。
- en: How to do it...
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: We are going to create two separate Windows—one of these will be defined in-line
    and the other Window will be loaded from an external JavaScript file called `window2.js`.
    Before writing any code, create a new JavaScript file called `window2.js` and
    save it to your Resources directory—the same folder where your `app.js` currently
    resides.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建两个独立的 Window——其中一个将在内联定义，另一个 Window 将从名为 `window2.js` 的外部 JavaScript 文件中加载。在编写任何代码之前，创建一个名为
    `window2.js` 的新 JavaScript 文件，并将其保存到您的资源目录中——与您的 `app.js` 当前所在的同一文件夹。
- en: 'If you have been following along with the LoanCalc app so far, then delete
    the current code we created and replace it with the source below:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您到目前为止一直在跟随 LoanCalc 应用程序，那么请删除我们创建的当前代码，并用下面的源代码替换它：
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Logically, it is important to realize that the TabGroup, when used, is the root
    of the application and cannot be included from any other UI component. Each Tab
    within the TabGroup is essentially a wrapper for a single Window that can either
    be defined in-line or by providing the location of an external JavaScript file
    using the `url` property. These Windows are loaded only when that Tab gains focus
    for the first time, normally via the user tapping the **Tab** icon to gain focus
    to that particular Window.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 从逻辑上讲，重要的是要意识到，当使用时，TabGroup 是应用程序的根，不能从任何其他 UI 组件中包含。TabGroup 中的每个 Tab 实质上是一个单个
    Window 的包装器，该 Window 可以通过内联定义或通过使用 `url` 属性提供外部 JavaScript 文件的地址来定义。这些 Window
    只在相应的 Tab 首次获得焦点时加载，通常是通过用户点击 **Tab** 图标来获得该特定 Window 的焦点。
- en: The **Tab** icon is loaded from an image file, generally a PNG, but it's important
    to note that in both Android and the iPhone, all icons will be rendered in greyscale
    with alpha transparency—any color information will be discarded when you run the
    application.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**Tab** 图标是从图像文件加载的，通常是 PNG 格式，但需要注意的是，在 Android 和 iPhone 上，所有图标都将以灰度形式带有 alpha
    透明度渲染——当您运行应用程序时，任何颜色信息都将被丢弃。'
- en: There's more...
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Apple can be particularly picky when it comes to using icons in your apps. Whenever
    a standard icon has been defined by Apple (such as the gears icon for *settings)*
    you should use the same.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果在您的应用程序中使用图标时可能特别挑剔。每当苹果定义了一个标准图标（如 *设置* 中的齿轮图标）时，您应该使用相同的图标。
- en: 'A great set of additional 200 free tab bar icons are available at: [http://glyphish.com](http://glyphish.com).'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一套额外的 200 个免费标签栏图标可在：[http://glyphish.com](http://glyphish.com) 获取。
- en: Creating and formatting Labels
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和格式化标签
- en: Whether it's for presenting text content to the screen, identifying an input
    field, or displaying data within a TableRow, Labels are one of the cornerstone
    UI elements that you'll find yourself using all of the time with Titanium. Through
    them, you will display the majority of your information to the user, so it is
    important to know how to create and format them properly.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 不论是为了在屏幕上呈现文本内容、标识输入字段还是在 TableRow 中显示数据，标签都是您在使用 Titanium 时会经常使用的基础 UI 元素之一。通过它们，您将向用户展示大部分信息，因此了解如何正确创建和格式化它们非常重要。
- en: In this recipe we will create three different labels, one for each input component
    that we will be adding to our app later on. Using these examples, we will explain
    how to position your label, give it a text value, and format it.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建三个不同的标签，每个标签对应于我们稍后将要添加到我们的应用程序中的每个输入组件。通过这些示例，我们将解释如何定位您的标签，为其提供文本值，并对其进行格式化。
- en: Getting ready
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The complete source code for this recipe can be found in the `/Chapter 1/Recipe
    3` folder.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 本菜谱的完整源代码可以在 `/Chapter 1/Recipe 3` 文件夹中找到。
- en: How to do it...
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Open up your `app.js` file and begin by putting the following two variables
    at the top of your code file, directly under the TabGroup creation declaration.
    These are going to be the default values for our interest rate and loan length
    for the app:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您的 `app.js` 文件，并首先在代码文件顶部放置以下两个变量，直接位于 TabGroup 创建声明之下。这些将是我们的应用程序中利率和贷款期限的默认值：
- en: '[PRE2]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s create labels to identify the input fields we will be implementing later
    on. Type in the following source code in your `app.js` file. If you are following
    along with the LoanCalc sample app, this code should go after your ImageView logo
    which was added to the View from the previous recipe:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建标签来标识我们稍后将要实现的输入字段。在您的 `app.js` 文件中输入以下源代码。如果您正在跟随 LoanCalc 示例应用程序，则此代码应在上一菜谱中添加到
    View 的 ImageView logo 之后：
- en: '[PRE3]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You should notice a trend by now in the way that Titanium instantiates objects
    and adds them to Views/Windows, as well as a trend in the way formatting is applied
    to most basic UI elements using the JavaScript object properties. Margins and
    padding are added using the absolute positioning values of `top` and `left`, while
    font styling is done with the standard CSS font properties; `fontSize, fontFamily`
    and `fontWeight` in the case of our example code.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，您应该已经注意到了 Titanium 实例化对象并将其添加到 Views/Windows 的方式，以及将格式应用于大多数基本 UI 元素的方式趋势，使用
    JavaScript 对象属性。边距和填充使用 `top` 和 `left` 的绝对定位值添加，而字体样式使用标准的 CSS 字体属性完成；在我们的示例代码中是
    `fontSize, fontFamily` 和 `fontWeight`。
- en: 'A couple of important points to note:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的几个重要点：
- en: The `width` property of our first two labels is set to `auto`, which means Titanium
    will automatically calculate the width of the Label depending on the content inside
    (a string value in this case). This `auto` property can be used for both the width
    and height of many other UI elements as well (as you can see in the third label
    we created which has a dynamic height to match the Label's text). When no height
    or width properties are specified, the UI component will assume the exact dimensions
    of the parent view or window that encloses it.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们前两个标签的 `width` 属性设置为 `auto`，这意味着 Titanium 将根据标签内部的内容（在这种情况下是一个字符串值）自动计算标签的宽度。这个
    `auto` 属性也可以用于许多其他 UI 元素的宽度和高度（正如我们在创建的第三个标签中可以看到的，它具有动态高度以匹配标签的文本）。如果没有指定高度或宽度属性，UI
    组件将假设其父视图或窗口包围的确切尺寸。
- en: The `textAlign` property of the labels works the same way you'd expect it to
    in HTML. However, you will only notice the alignment of the text if the width
    of your label is not set to `auto` , unless that Label happens to spread over
    multiple lines.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签的 `textAlign` 属性在 HTML 中的工作方式与您预期的相同。然而，只有当您的标签宽度未设置为 `auto` 时，您才会注意到文本的对齐，除非该标签恰好跨越多行。
- en: '![How it works...](img/3968EXP_01_04.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/3968EXP_01_04.jpg)'
- en: Creating TextFields for user input
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建用于用户输入的文本字段
- en: TextFields in Titanium are single-line textboxes used for capturing user input
    via the keyboard and usually form the most common UI element for user input in
    any application, along with Labels and Buttons. In this recipe we'll show you
    how to create a TextField, add it to your application's View, and use it to capture
    user input. We will style our TextField component by using a Constant value for
    the first time.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Titanium 中的 TextField 是单行文本框，用于通过键盘捕获用户输入，通常构成任何应用程序中用户输入的最常见 UI 元素，与 Labels
    和 Buttons 一起。在本食谱中，我们将向您展示如何创建 TextField，将其添加到应用程序的视图中，并使用它来捕获用户输入。我们将通过使用常量值来首次样式化我们的
    TextField 组件。
- en: Getting ready
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The complete source code for this recipe can be found in the `/Chapter 1/Recipe
    4` folder.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的完整源代码可以在 `/Chapter 1/Recipe 4` 文件夹中找到。
- en: How to do it...
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Type in the following code after the View is created but before we add that
    view to our Window. If you have been following along from the previous recipe,
    this code should be entered after your Labels were created:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建视图但在我们将其添加到窗口之前，输入以下代码。如果您一直跟随前面的食谱，则此代码应在创建标签之后输入：
- en: '[PRE4]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works...
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In this example, we are creating a couple of basic TextFields with a rounded
    border style and introducing some new property types that don't appear in Labels
    and ImageViews including `hintText`. The `hintText` property displays a value
    in the TextField that disappears when that TextField has focus (for example, when
    a user taps it to enter some data using their keyboard).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们创建了一些具有圆角边框的基本 TextField，并介绍了一些在 Labels 和 ImageViews 中没有出现的新属性类型，包括 `hintText`。`hintText`
    属性会在 TextField 获得焦点时显示一个值（例如，当用户轻触它以使用键盘输入数据时，该值会消失）。
- en: The user input is available in the TextField's property called `value`. As you
    will note in the previous recipe, accessing this value is simply a case of assigning
    it to a variable (that is `var myName = txtFirstName.value)`, or alternatively
    using the value property directly.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 用户输入可通过 TextField 的 `value` 属性获取。正如您在前一个食谱中注意到的，访问此值只需将其分配给一个变量（即 `var myName
    = txtFirstName.value)`，或者直接使用值属性。
- en: There's more...
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: TextFields are one of the most common components in any application, and in
    Titanium, there are a couple of points and options to consider whenever using
    them.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: TextField 是任何应用程序中最常见的组件之一，在 Titanium 中，使用它们时需要考虑一些要点和选项。
- en: Retrieving text…
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取文本…
- en: It is important to note that when you want to retrieve the text a user has typed
    into a TextField, you need to reference the `value` property and not `text`, like
    many of the other string-based controls!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，当您想要检索用户在 TextField 中输入的文本时，您需要引用 `value` 属性，而不是 `text`，就像许多其他基于字符串的控制一样！
- en: Experimenting with other TextField border styles…
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 尝试使用其他 TextField 边框样式…
- en: 'Try experimenting with other TextField border styles to give your app a different
    appearance. Other possible values are:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用其他 TextField 边框样式来为您的应用程序提供不同的外观。其他可能的值包括：
- en: '[PRE5]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Working with keyboards and keyboard toolbars
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与键盘和键盘工具栏一起工作
- en: When a TextField or TextArea control gains focus in either the iPhone or Android,
    the default keyboard is what springs up onto the screen. However, there will be
    times when you wish to change this behavior example, you may only want to have
    the user input numeric characters into a TextField when they are providing a numerical
    amount (such as their age, or a monetary value). Additionally, Keyboard Toolbars
    can be created to appear above the keyboard itself, which will allow you to provide
    the user with other options such as removing the keyboard from the Window, or
    allowing copy/paste operations via a simple button tap.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当 TextField 或 TextArea 控件在 iPhone 或 Android 上获得焦点时，默认键盘会出现在屏幕上。然而，有时您可能希望改变这种行为，例如，您可能只想让用户在提供数值（如年龄或货币价值）时将数字字符输入到
    TextField 中。此外，可以创建键盘工具栏，使其出现在键盘上方，这将允许您提供用户其他选项，例如通过简单的按钮点击从窗口中移除键盘，或允许通过简单的按钮点击进行复制/粘贴操作。
- en: In the following recipe, we are going to create a toolbar that contains both
    a system button, and another system component called **FlexibleSpace**. These
    will be added to the top of our numeric keyboard which will appear whenever the
    TextField for amount or interest rate gains focus. Note that in this example we
    have updated the `tfAmount` and `tfInterestRate` TextField objects to now contain
    `keyboardType` and `returnKeyType` properties.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将创建一个包含系统按钮和另一个称为**FlexibleSpace**的系统组件的工具栏。这些将被添加到我们的数字键盘顶部，当金额或利率的TextField获得焦点时将显示。请注意，在这个例子中，我们已经更新了`tfAmount`和`tfInterestRate`TextField对象，现在它们包含`keyboardType`和`returnKeyType`属性。
- en: Getting ready
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Note that toolbars are iPhone-specific, and that they may not be available for
    Android in the current Titanium SDK.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，工具栏是iPhone特有的，并且当前Titanium SDK中可能不可用于Android。
- en: Note
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The complete source code for this recipe can be found in the `/Chapter 1/Recipe
    5` folder.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例的完整源代码可以在`/Chapter 1/Recipe 5`文件夹中找到。
- en: How to do it...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Open up your `app.js` file and type in the following code. If you have been
    following along from the previous recipe, this code should replace the previous
    recipe''s code for adding the amount and interest rate TextFields:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的`app.js`文件，并输入以下代码。如果你一直在跟随之前的示例，此代码应替换之前示例中用于添加金额和利率TextField的代码：
- en: '[PRE6]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe we are creating a TextField and adding it to our View. By now,
    you should have noticed how many properties are universal among the different
    UI components; `width, height, top`, and `right` are just four that are used in
    our TextField called `tfAmount` that have been used in previous recipes for other
    components. Many touch screen phones do not have physical keyboards; instead we
    are using a touch screen keyboard to gather our input data. Depending on the data
    you require, you may not need a full keyboard with all of the QWERTY keys and
    may want to just display a numeric keyboard (as seen in the following screenshot);
    such as when you were using the telephone dialling features on your iPhone or
    Android device. Additionally, you may require the QWERTY keys but in a specific
    format; custom keyboards make user input quicker and less frustrating for the
    user by presenting custom options such as keyboards for inputting web addresses
    and emails with all of the 'www' and '@' symbols in convenient touch locations.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们创建了一个TextField并将其添加到我们的视图中。到目前为止，你应该已经注意到不同UI组件之间有多少通用属性；`width`、`height`、`top`和`right`只是四个在我们之前示例中用于其他组件的`tfAmount`TextField中使用的属性。许多触摸屏手机没有物理键盘；相反，我们使用触摸屏键盘来收集我们的输入数据。根据你需要的数据，你可能不需要带有所有QWERTY键的全键盘，而只想显示一个数字键盘（如以下截图所示）；例如，当你使用iPhone或Android设备上的电话拨号功能时。此外，你可能需要QWERTY键，但以特定的格式；自定义键盘通过提供自定义选项（如输入网址和电子邮件的键盘，其中包含所有'www'和'@'符号，并位于方便的触摸位置）来使用户输入更快，减少用户的挫败感。
- en: '![How it works...](img/3968EXP_01_05.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/3968EXP_01_05.jpg)'
- en: There's more...
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Try experimenting with other Keyboard styles in your Titanium app!
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在你的Titanium应用中实验其他键盘样式！
- en: Experimenting with keyboard styles
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实验键盘样式
- en: 'Other possible values are:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 其他可能的值包括：
- en: '[PRE7]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Enhancing your App with Sliders & Switches
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用滑块和开关增强你的应用
- en: Sliders and Switches are two UI components that are simple to implement and
    can bring an extra level of interactivity to your apps. Switches, as the name
    suggests, have only two states on and off which are represented by Boolean values
    (*true* and *false*).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 滑块和开关是两种易于实现的UI组件，可以为你的应用带来额外的交互性。正如其名所示，开关只有两种状态：开启和关闭，分别由布尔值（*true*和*false*）表示。
- en: Sliders, on the other hand, take two float values, a minimum and maximum, and
    allow the user to select any number between and including these two values. In
    addition to it's default styling, the Slider API also allows you to use images
    for both sides of the 'track' and the 'slider thumb' image that runs along it.
    This allows you to create some truly customised designs.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，滑块接受两个浮点值，一个最小值和一个最大值，并允许用户选择这两个值之间的任何数字（包括这两个值）。除了默认样式外，滑块API还允许你使用图像作为'轨道'和沿其运行的'滑块拇指'图像的两侧。这允许你创建一些真正定制的样式。
- en: We are going to add a Switch to indicate an on/off state and a Slider to hold
    the loan length, with values ranging from a minimum of 6 to a maximum of 72 months.
    Also, we'll add some event handlers to capture the changed value from each component,
    and in the case of the Slider, update an existing Label with the new Slider value.
    Don't worry if you aren't 100 percent sure about how event handlers work yet,
    as we will explain this in further detail in [Chapter 6](ch06.html "Chapter 6. Getting
    to Grips with Events and Properties"),
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加一个开关来指示开启/关闭状态，并添加一个滑动条来表示贷款期限，其值从6个月的最小值到72个月的最大值。此外，我们还将添加一些事件处理程序来捕获每个组件的更改值，在滑动条的情况下，更新现有的标签以显示新的滑动条值。如果您对事件处理程序的工作方式还不是百分之百确定，请不要担心，我们将在[第6章](ch06.html
    "第6章。掌握事件和属性")中进一步详细解释，
- en: Getting ready
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The complete source code for this recipe can be found in the `/Chapter 1/Recipe
    6` folder.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例的完整源代码可以在`/Chapter 1/Recipe 6`文件夹中找到。
- en: How to do it...
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'If you are following with the LoanCalc app, the code below should be placed
    into your `window2.js` file for the Switch. We''ll also add in a label to identify
    what the Switch component does and a View component to hold it all together:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在跟随LoanCalc应用程序，下面的代码应放置在您的`window2.js`文件中，用于开关。我们还将添加一个标签来标识开关组件的功能，以及一个视图组件来组合所有这些：
- en: '[PRE8]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, let's write Slider code. Go back to your `app.js` file and type in the
    following code underneath the line `view.add(tfInterestRate);:`
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们编写滑动条代码。回到您的`app.js`文件，并在`view.add(tfInterestRate);`行下面输入以下代码：
- en: '[PRE9]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works...
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe we are adding two new components to two separate Views within
    two separate Windows. The first component, a Switch, is fairly straight forward,
    and apart from the standard layout and positioning properties, takes one main
    Boolean value to determine its on or off status. It also has only the one event,
    `change`, which is executed whenever the Switch changes from the on to off position
    or vice versa.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们在两个不同的窗口中的两个不同的视图中添加了两个新的组件。第一个组件是一个开关（Switch），操作相当直接，除了标准的布局和定位属性外，它只需要一个主要的布尔值来确定其开启或关闭状态。它也只有一个事件，即`change`事件，该事件在开关从开启状态变为关闭状态或反之亦然时执行。
- en: On the Android platform, the Switch can be altered to appear as a toggle button
    (default) or as a checkbox. Additionally, Android users can also display a text
    label using the `title` property, which can be changed programmatically using
    the `titleOff` and `titleOn` properties.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android平台上，开关可以被修改为显示为切换按钮（默认）或复选框。此外，Android用户还可以使用`title`属性显示文本标签，该属性可以通过`titleOff`和`titleOn`属性编程更改。
- en: The Slider component is more interesting and has many more properties than a
    Switch. Sliders are useful in instances where you want to allow the user to choose
    between a range of values, in our case, a numeric range of months from 12 to 60\.
    For instance, this is a much more effective method of choosing a number from a
    range than it would be to list all of the possible options in a Picker, and a
    much safer way than letting a user enter in possibly invalid values via a TextField
    or TextArea component.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 滑动条组件比开关更有趣，并且具有更多属性。在需要允许用户在一系列值之间进行选择的情况下，滑动条非常有用，在我们的例子中，是一个从12到60个月的数值范围。例如，这种方法比在选择器中列出所有可能的选项更有效，也比让用户通过文本字段或文本区域组件输入可能无效的值更安全。
- en: Pretty much all of the Slider can be styled using the default properties available
    in the Titanium API, including `thumbImage, selectedThumbImage`, and `highlightedThumbImage`
    as we have done in this recipe. The `highlightedThumbImage` works similar to how
    you might be used to in CSS. The image for the thumbnail in this case changes
    only when a user taps and holds on to the component in order to change its value.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有的滑动条都可以使用Titanium API中提供的默认属性进行样式化，包括我们在本示例中使用的`thumbImage, selectedThumbImage`和`highlightedThumbImage`。`highlightedThumbImage`的工作方式与您可能习惯的CSS类似。在这种情况下，缩略图的图像只有在用户点击并保持在该组件上以更改其值时才会改变。
- en: '![How it works...](img/3968EXP_01_06.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/3968EXP_01_06.jpg)'
- en: There's more…
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Try extending the styling of the Slider component by using images for the left
    and right hand sides of the 'track', which is the element that runs horizontally
    underneath the moving Switch itself.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试通过使用图像来扩展滑动条组件的样式，这些图像用于滑动条的左右两侧，滑动条是位于移动开关下方水平运行的元素。
- en: Passing custom variables between windows
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在窗口之间传递自定义变量
- en: You will often find a need to pass variables and objects between different screen
    objects, such as Windows, in your apps. One example is between a master and child
    view. For example, if you have a tabular list of data that perhaps only shows
    a small amount of information per row and you wish to view the full description,
    you might pass that description data as a variable to the child window.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你经常会发现需要在你的应用中不同屏幕对象之间传递变量和对象，例如Windows。一个例子是在主视图和子视图之间。例如，如果你有一个表格数据列表，每行可能只显示少量信息，而你希望查看完整描述，你可能将描述数据作为变量传递到子窗口。
- en: In this recipe, we are going to apply that same principle to a variable on the
    settings window (in the second tab of our LoanCalc app), by setting the variable
    in one window and then passing it back for use in our main window.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将应用同样的原则到设置窗口中的一个变量（在我们的LoanCalc应用的第二个标签页中），通过在一个窗口中设置变量，然后将其传递回主窗口使用。
- en: Getting ready
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The complete source code for this recipe can be found in the `/Chapter 1/Recipe
    7` folder.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱的完整源代码可以在`/Chapter 1/Recipe 7`文件夹中找到。
- en: How to do it...
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Under the declaration for your second window (win2) in your `app.js` file,
    add the following additional property called `autoShowChart` and set it to `false`.
    This is a custom property, that is, a property not already defined by the Titanium
    API. It is often handy to add additional properties to your objects if you require
    certain parameters that the API does not provide by default:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的`app.js`文件中为你的第二个窗口（`win2`）声明下，添加以下额外的属性名为`autoShowChart`并将其设置为`false`。这是一个自定义属性，也就是说，一个不是由Titanium
    API预先定义的属性。如果你需要API默认不提供的某些参数，添加额外的属性到你的对象中通常很有用：
- en: '[PRE10]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now in the `window2.js` file that holds all of the sub components for your
    second window, add the following code extending the existing Switch control so
    it can update the referenced window''s `autoShowChart` variable:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在包含你第二个窗口所有子组件的`window2.js`文件中，添加以下代码，扩展现有的Switch控件，以便它可以更新引用窗口的`autoShowChart`变量：
- en: '[PRE11]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works…
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: This code is actually pretty straightforward. When an object is created in Titanium,
    all of the standard properties are accessible in a dictionary object of key-value
    pairs. All we are doing here is extending that dictionary object to add a property
    of our own.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码实际上相当简单。在Titanium中创建对象时，所有标准属性都可以在键值对字典对象中访问。我们在这里所做的只是扩展这个字典对象，添加我们自己的属性。
- en: We can do this in one of the two ways. First, as shown in our recipe's source
    code this can be done after the instantiation of the Window (`win2`) object. Second,
    it can also be done immediately within the instantiation code. In the source code
    of the second window, we are simply referencing this same object, so all of its
    properties are already available for us to read from and write to.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过两种方式之一来做这件事。首先，正如我们的菜谱源代码所示，这可以在Window对象（`win2`）实例化之后完成。其次，它也可以在实例化代码中立即完成。在第二个窗口的源代码中，我们只是引用了这个相同的对象，因此它的所有属性都已经可供我们读取和写入。
- en: There's more...
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are other ways to pass and access objects and variables between Windows,
    including the use of App Properties. These will be covered in a later chapter.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows之间传递和访问对象和变量的方法有很多，包括使用App Properties。这些内容将在后面的章节中介绍。
- en: Creating buttons and capturing click events
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建按钮并捕获点击事件
- en: In any given app, you will find that creating buttons and capturing their click
    events is one of the most common tasks you will do. This recipe will show you
    how to declare a Button control in Titanium and attach the click event to it.
    Within that `click` event, we will perform a task and log it to the Info window
    in Titanium Studio.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何给定的应用中，你会发现创建按钮并捕获它们的点击事件是你最常做的任务之一。这个菜谱将展示如何在Titanium中声明一个按钮控件并将其点击事件附加到它上。在这个`click`事件中，我们将执行一个任务并将其记录到Titanium
    Studio的Info窗口中。
- en: This recipe will also demonstrate how to implement some of the default styling
    mechanisms available to you via the API.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱还将演示如何通过API实现一些默认的样式机制。
- en: Getting ready
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The complete source code for this recipe can be found in the `/Chapter 1/Recipe
    8` folder.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱的完整源代码可以在`/Chapter 1/Recipe 8`文件夹中找到。
- en: How to do it...
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Open up your `app.js` file and type in the following code. If you''re following
    along with the LoanCalc app, this code should go after you created and added the
    TextField controls to the View:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的`app.js`文件并输入以下代码。如果你正在跟随LoanCalc应用，这段代码应该在创建并添加TextField控件到视图之后执行：
- en: '[PRE12]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now that we have created our two buttons and added their event listeners, let''s
    extend the `calculateAndDisplayValue()` function to do some simple fixed interest
    mathematics and produce the results that we will log to the Titanium Studio console:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了两个按钮并添加了它们的事件监听器，让我们扩展 `calculateAndDisplayValue()` 函数以执行一些简单的固定利率数学运算，并生成我们将记录到
    Titanium Studio 控制台的结果：
- en: '[PRE13]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works...
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Most controls in Titanium are capable of firing one or more events, such as
    `focus, onload`, or as in our recipe, `click`. The `click` event is undoubtedly
    the one you will use more often than any other. In the previous source code, you'll
    note that in order to execute code from this event we are adding an event listener
    to our button, which has a signature of 'click'. This signature is a string and
    forms the first part of our event listener, the second part is the executing function
    for the event.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Titanium 控件都能够触发一个或多个事件，例如 `focus, onload`，或者在我们的食谱中，`click`。无疑，`click`
    事件将是您比其他任何事件都更频繁使用的事件。在上面的源代码中，您会注意到，为了从该事件执行代码，我们正在向我们的按钮添加一个事件监听器，其签名为 'click'。这个签名是一个字符串，构成了我们事件监听器的第一部分，第二部分是事件执行的函数。
- en: It's important to note that other component types can also be used in a similar
    manner. For example, an ImageView could be declared which contains a custom button
    image, and could have a click event attached to it in exactly the same way a regular
    button can.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，也可以以类似的方式使用其他组件类型。例如，可以声明一个 ImageView，其中包含自定义按钮图像，并且可以将其点击事件附加到它，就像常规按钮一样。
- en: '![How it works...](img/3968EXP_01_07.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/3968EXP_01_07.jpg)'
- en: Informing your users with dialogs and alerts
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用对话框和警报通知您的用户
- en: There are a number of dialogs available for you to use in the Titanium API,
    but for the purposes of this recipe we will be concentrating on the two main ones—the
    **AlertDialog** and the **OptionDialog**. These two simple components perform
    two similar roles, but with a key difference. The AlertDialog is normally only
    used to show the user a message, while the OptionDialog shows the user a message
    plus requires a response from them from a number of buttons. Generally, an AlertDialog
    only allows two standard responses from the user, OK or Cancel, whereas the OptionDialog
    can contain many more.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Titanium API 中提供了许多可供使用的对话框，但为了本食谱的目的，我们将专注于两个主要的对话框——**AlertDialog** 和 **OptionDialog**。这两个简单的组件执行两个类似的角色，但有一个关键的区别。AlertDialog
    通常仅用于向用户显示消息，而 OptionDialog 则显示消息并要求用户从多个按钮中选择响应。通常，AlertDialog 只允许用户从两个标准响应中选择，即确定或取消，而
    OptionDialog 可以包含更多。
- en: There are also key differences in the layout of these two dialog components
    which will become obvious in the recipe below.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个对话框组件的布局也存在一些关键差异，这些差异将在下面的食谱中变得明显。
- en: Getting ready
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The complete source code for this recipe can be found in the `/Chapter 1/Recipe
    9` folder.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的完整源代码可以在 `/Chapter 1/Recipe 9` 文件夹中找到。
- en: How to do it…
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'First, we''ll create an AlertDialog that simply notifies the user of an action
    that cannot be completed due to missing information—in our case, they have not
    provided a value for the loan amount in the `tfAmount` TextField:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个 AlertDialog，它只是通知用户由于缺少信息而无法完成某个操作——在我们的例子中，他们没有在 `tfAmount` TextField
    中提供贷款金额的值：
- en: '[PRE14]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now let''s add the OptionDialog. The OptionDialog is going to display the result
    from our calculation and then give the user the choice to view the results as
    a Pie Chart (in a new window) or alternatively to cancel and remain on the same
    screen:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们添加 OptionDialog。OptionDialog 将显示我们的计算结果，然后给用户选择查看结果作为饼图（在新窗口中）或取消并保持在同一屏幕上的选项：
- en: '[PRE15]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works...
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: The AlertDialog is a very simple component that simply presents the user with
    a message as a modal and only has one possible response which closes the alert.
    Note that you should be careful not to call an AlertDialog more than once while
    a pending alert is still visible, for example, if you're calling that alert from
    within a loop.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: AlertDialog 是一个非常简单的组件，它以模态方式向用户显示消息，并且只有一个可能的响应，即关闭警报。请注意，你应该小心不要在挂起的警报仍然可见时多次调用
    AlertDialog，例如，如果你是在循环中调用该警报。
- en: The OptionDialog is a much larger modal component that presents a series of
    buttons with a message from the bottom of the screen and is generally used to
    allow the user to pick from a selection of more than one item. In our code, the
    `resultOptionDialog` presents the user with a choice of two options—"Okay" or
    "No". One interesting property on this dialog is **cancel**, which dismisses the
    dialog without firing the click event and also styles the button at the requested
    index in a manner that differentiates it from the rest of the group of buttons.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: OptionDialog是一个更大的模态组件，它从屏幕底部显示一系列按钮和消息，通常用于允许用户从多个选项中选择。在我们的代码中，`resultOptionDialog`向用户提供了两个选项的选择——“确定”或“否”。这个对话框的一个有趣属性是**取消**，它在不触发点击事件的情况下关闭对话框，并且以请求的索引样式按钮，使其与其他按钮组区分开来。
- en: Just like the Window object, both of these dialogs are not added to another
    View but are presented by calling the `show()` method instead. You should only
    call the `show()` method after the dialog has been properly instantiated and any
    event listeners have been created.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 就像Window对象一样，这两个对话框都不是添加到另一个View中，而是通过调用`show()`方法来呈现。你应该只在对话框已经正确实例化并且创建了任何事件监听器之后调用`show()`方法。
- en: 'The following screenshots show the difference between the AlertDialog and Option
    Dialog respectively:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了AlertDialog和OptionDialog之间的区别：
- en: '![How it works...](img/3968EXP_01_08.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/3968EXP_01_08.jpg)'
- en: There's more...
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'You can also create a predefined AlertDialog using basic JavaScript, using
    the syntax: `alert(''Hello world!'');`. Be aware though that you only have control
    over the contents of the message using this method, and the title of your AlertDialog
    will always be set to ''Alert''.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用基本的JavaScript创建预定义的AlertDialog，使用语法：`alert('Hello world!');`。不过，请注意，你只能使用这种方法控制消息的内容，你的AlertDialog的标题将始终设置为'Alert'。
- en: Creating charts using Raphael JS
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Raphael JS创建图表
- en: Let's perform one final task for this application and for our first chapter;
    displaying charts and graphs. Titanium is without a native charting API, however,
    there are some open source options for implementing charts such as Google Charts.
    While the Google solution is free, it requires your apps to be online every time
    you need to generate a chart. This might be okay for some circumstances, but it's
    not the best solution for any application that is meant to be used offline. Plus,
    Google Charts returns a generated JPG or PNG file at the requested size and in
    a rasterized format which is not great for zooming in when viewed on an iPhone
    or iPad.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为这个应用程序和第一章执行最后一个任务；显示图表和图形。钛并没有原生的图表API，然而，有一些开源选项可以实现图表，例如Google Charts。虽然Google解决方案是免费的，但它要求你的应用程序每次需要生成图表时都必须在线。这可能适用于某些情况，但并不是任何旨在离线使用的应用程序的最佳解决方案。此外，Google
    Charts返回的生成JPG或PNG文件是请求的大小和栅格化格式，这在iPhone或iPad上查看时放大效果不佳。
- en: A better solution is to use the open source and MIT licensed Raphael library
    which, luckily for us, has a charting component! Not only is it free, but Raphael
    is also completely vector based, meaning any charts you create will look great
    on any resolution, and can be zoomed in without a loss of quality.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更好的解决方案是使用开源的MIT许可的Raphael库，幸运的是，它有一个图表组件！不仅它是免费的，而且Raphael是完全基于向量的，这意味着你创建的任何图表在任何分辨率上看起来都很棒，并且可以放大而不会损失质量。
- en: Note
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that this recipe may not work on all Android devices as the current version
    of Raphael is not supported by non-webkit mobile browsers. However, it will work
    as described here for the iPhone and iPod Touch.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这个菜谱可能不适用于所有Android设备，因为当前版本的Raphael不受非webkit移动浏览器的支持。然而，它将如这里所述在iPhone和iPod
    Touch上工作。
- en: Getting ready
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Download the main Raphael JS library from [http://raphaeljs.com](http://raphaeljs.com)
    (Direct link: [http://github.com/DmitryBaranovskiy/raphael/raw/master/raphael-min.js)](http://github.com/DmitryBaranovskiy/raphael/raw/master/raphael-min.js)).'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[http://raphaeljs.com](http://raphaeljs.com)（直接链接：[http://github.com/DmitryBaranovskiy/raphael/raw/master/raphael-min.js](http://github.com/DmitryBaranovskiy/raphael/raw/master/raphael-min.js)）下载主要的Raphael
    JS库。
- en: 'Download the main Charting library from [http://g.raphaeljs.com](http://g.raphaeljs.com)
    (Direct link: [http://github.com/DmitryBaranovskiy/g.raphael/blob/master/g.raphael-min.js?raw=true)](http://github.com/DmitryBaranovskiy/g.raphael/blob/master/g.raphael-min.js?raw=true))
    and any other charting libraries you wish to use.'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[http://g.raphaeljs.com](http://g.raphaeljs.com)（直接链接：[http://github.com/DmitryBaranovskiy/g.raphael/blob/master/g.raphael-min.js?raw=true](http://github.com/DmitryBaranovskiy/g.raphael/blob/master/g.raphael-min.js?raw=true)）下载主要的图表库以及你希望使用的任何其他图表库。
- en: 'For this example, we are implementing the Pie Chart, which is here: [http://github.com/DmitryBaranovskiy/g.raphael/blob/master/g.pie-min.js?raw=true](http://github.com/DmitryBaranovskiy/g.raphael/blob/master/g.pie-min.js?raw=true).'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们正在实现饼图，它在这里：[http://github.com/DmitryBaranovskiy/g.raphael/blob/master/g.pie-min.js?raw=true](http://github.com/DmitryBaranovskiy/g.raphael/blob/master/g.pie-min.js?raw=true)。
- en: Note
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The complete source code for this recipe can be found in the `/Chapter 1/Recipe
    10` folder.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱的完整源代码可以在`/Chapter 1/Recipe 10`文件夹中找到。
- en: How to do it...
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Create a new project in Titanium Studio (or alternatively, if you're following
    along with the LoanCalc example app, then open your project directory), and put
    your downloaded files into a new folder called **charts** under your **Resources**
    directory. You could put them into the root folder if you wish, but bear in mind,
    you'd need to ensure your references in the following steps are correct.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Titanium Studio中创建一个新的项目（或者，如果你正在跟随LoanCalc示例应用进行操作，那么打开你的项目目录），并将你下载的文件放入一个名为**charts**的新文件夹中，该文件夹位于你的**Resources**目录下。你也可以将它们放入根目录中，但请注意，你需要确保在以下步骤中的引用是正确的。
- en: The next step is to rename your `raphael-min.js` file to `raphael-min.lib`.
    The main reason is that if your file is a known JavaScript file (as in it ends
    in `'.js'`), the JSLint validator in Titanium will try to validate the Raphael
    JS library and fail, causing Titanium to lock up. This means you won't be able
    to run your app and will need to restart Titanium Studio!
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是将你的`raphael-min.js`文件重命名为`raphael-min.lib`。主要原因是你如果文件是一个已知的JavaScript文件（例如，以`'.js'`结尾），Titanium中的JSLint验证器会尝试验证Raphael
    JS库并失败，导致Titanium锁定。这意味着你将无法运行你的应用，并需要重新启动Titanium Studio！
- en: 'Create a WebView in your app, referencing a variable holding the HTML code
    to display a Raphael chart, which we will call **chartHTML**. A WebView is a UI
    component that allows you to display web pages or HTML in your application. It
    does not include any features of a fully-fledged browser such as navigation controls
    or an address bar. Type in the following code at the top of your `chartwin.js`
    file, just after you have included the charting library and created titles for
    the chart view:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的应用中创建一个WebView，引用一个变量来保存要显示的Raphael图表的HTML代码，我们将它称为**chartHTML**。WebView是一个UI组件，允许你在应用中显示网页或HTML。它不包含完整浏览器的任何功能，如导航控件或地址栏。在你的`chartwin.js`文件顶部输入以下代码，在你包含图表库并创建图表视图标题之后：
- en: '[PRE16]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now back in your `app.js` file, create a new function called `openChartWindow()`
    which will be executed when the user chooses —Okay— from the previous recipe''s
    option dialog. This function will create a new Window object based on the `chartwin.js`
    file and pass to it the values needed to show the chart:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在回到你的`app.js`文件中，创建一个新的函数`openChartWindow()`，当用户从上一个菜谱的选项对话框中选择“Okay”时将执行此函数。这个函数将创建一个新的Window对象，基于`chartwin.js`文件，并将所需的值传递给它以显示图表：
- en: '[PRE17]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How it works...
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Essentially what we are doing here is wrapping the Raphael library, something
    that originally was built for the desktop browser, into a format that can be consumed
    and displayed using the iPhone's WebKit browser. Raphael was originally created
    to simplify vector graphics generation on the web and was extended later on as
    gRaphael in order to render both static and interactive charts.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里做的基本上是将Raphael库包装起来，这个库最初是为桌面浏览器构建的，现在可以以iPhone的WebKit浏览器可以消费和显示的格式使用。Raphael最初是为了简化网页上的矢量图形生成而创建的，后来作为gRaphael扩展，以便渲染静态和交互式图表。
- en: There is a series of documentation on Raphael at [http://raphaeljs.com](http://raphaeljs.com)
    and [http://g.raphaeljs.com](http://g.raphaeljs.com) on how it renders charts
    via its JavaScript library. We will not be explaining this in detail but rather
    the implementation of the library to work with Titanium.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在[http://raphaeljs.com](http://raphaeljs.com)和[http://g.raphaeljs.com](http://g.raphaeljs.com)上有关于Raphael的一系列文档，介绍了它是如何通过其JavaScript库来渲染图表的。我们不会详细解释这一点，而是将重点放在如何使库与Titanium一起使用。
- en: 'Our implementation consists firstly of including the `charts.js` library from
    Raphael into our Titanium project. This is the main source file used by the library.
    From there, we are creating a new type of component, a WebView, which will (in
    this case) hold the HTML data that we constructed in the variable `chartHTML`.
    This HTML data contains all of the includes necessary to render the charts, which
    are listed in item #2 of the *Getting Ready* section of this recipe. If you had
    a chart with static data, you could also reference the HTML from a file using
    the `url` property of the WebView object instead of passing in all of the HTML
    as a string. The chart itself is created using some simple JavaScript embedded
    in HTML data string, r.g.piechart(150, 180, 130, n1, n2), where n1 and n2 are
    the two values we wish to display as slices in the Pie Chart. The other values
    define the center point of the chart from the top and left respectively, followed
    by the chart radius.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的实现首先包括将Raphael库中的`charts.js`库集成到我们的Titanium项目中。这是库使用的源文件。从那里，我们创建了一种新的组件类型，即WebView，它将（在这种情况下）包含我们在变量`chartHTML`中构建的HTML数据。这些HTML数据包含渲染图表所需的所有包含项，这些项在本食谱的“准备就绪”部分的第2项中列出。如果你有一个包含静态数据的图表，你也可以使用WebView对象的`url`属性从文件中引用HTML，而不是将所有HTML作为字符串传递。图表本身是通过嵌入在HTML数据字符串中的简单JavaScript创建的，例如r.g.piechart(150,
    180, 130, n1, n2)，其中n1和n2是我们希望在饼图中显示为切片的两个值。其他值分别定义了从顶部和左侧开始的图表中心点，然后是图表半径。
- en: All of this is wrapped up in a new Window defined by the `chartwin.js` file,
    which accesses properties passed in from the first tab's Window in our LoanCalc
    app. This data is passed using exactly the same mechanism as explained in the
    previous "Passing *Custom Variables Between Windows"* recipe.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都被封装在一个新的由`chartwin.js`文件定义的窗口中，该窗口访问来自我们LoanCalc应用第一个标签页窗口传递的属性。这些数据使用与之前“在窗口之间传递*自定义变量*”食谱中解释的完全相同的机制传递。
- en: 'The following screenshot shows the Raphael JS Library being used to show a
    pie chart based on our loan data:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了使用Raphael JS库根据我们的贷款数据显示饼图：
- en: '![How it works...](img/3968EXP_01_09.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/3968EXP_01_09.jpg)'
