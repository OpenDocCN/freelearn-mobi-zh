- en: Chapter 11. Let the Right Music In!
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。让正确的音乐进来！
- en: Sound and music are always left for the final stages. It's so embarrassing that
    the same has happened with this book. If you're serious about the gaming experience
    you're creating, take music and sound into account from the beginning. Even if
    your game is not audio-centric, you should think of music and audio as feedback
    systems and treat them with the same importance as graphics.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 音频和音乐总是留给最后阶段。这本书也发生了同样的事情，这真是太尴尬了。如果你对你的游戏体验认真负责，从一开始就要考虑音乐和声音。即使你的游戏不是以音频为中心，你也应该将音乐和声音视为反馈系统，并将它们与图形同等重要。
- en: In this chapter we'll learn how to play audio files inside your game using the
    built-in Untz sound system. We'll add background music and sound effects.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何在游戏中使用内置的Untz声音系统播放音频文件。我们将添加背景音乐和音效。
- en: Audio manager
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 音频管理器
- en: In order to add some music and effects to our game we'll create a module called
    `AudioManager` that will take care of loading sounds and playing them.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在我们的游戏中添加一些音乐和效果，我们将创建一个名为`AudioManager`的模块，该模块将负责加载和播放声音。
- en: 'First of all, we need to create a file called `audio_manager.lua`. This file
    will be in charge of managing all our sound needs. In this case we will use Untz,
    but you could easily modify it to use FMOD as follows:'
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个名为`audio_manager.lua`的文件。这个文件将负责管理我们所有的声音需求。在这种情况下，我们将使用Untz，但你可以轻松地修改它以使用FMOD，如下所示：
- en: '[PRE0]'
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the same way we defined the assets for our game, we will define all the
    sounds using the resource definition for the audio files. We saw this earlier
    in the [Chapter 6](ch06.html "Chapter 6. Resource Manager"), *Resource Manager*.
    If you don''t understand what we''re doing here, I suggest you go back and read
    about sound definitions in [Chapter 6](ch06.html "Chapter 6. Resource Manager").
    The `sounds` table will act as a cache for our sounds. It will be as follows:'
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与我们为游戏定义资源的方式一样，我们将使用音频文件的资源定义来定义所有声音。我们之前在[第6章](ch06.html "第6章。资源管理器")中看到了这一点，*资源管理器*。如果你不明白我们在做什么，我建议你回过头去阅读关于声音定义的内容。[第6章](ch06.html
    "第6章。资源管理器")。`sounds`表将作为我们声音的缓存。它将如下所示：
- en: '[PRE1]'
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'On the initialization method, the first thing we do is load all the definitions
    we added. We do this by calling the `setDefinitions` method from `ResourceDefinitions`
    as follows:'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在初始化方法中，我们首先加载所有添加的定义。我们通过从`ResourceDefinitions`调用`setDefinitions`方法来完成此操作，如下所示：
- en: '[PRE2]'
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, since we''re using Untz, we need to initialize it as follows:'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，由于我们正在使用Untz，我们需要按照以下方式初始化它：
- en: '[PRE3]'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'You can call `MOAIUntzSystem.initialize` with two optional parameters: the
    sampling rate (which can be changed to match your audio files) and the number
    of frames per buffer.'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以使用两个可选参数调用`MOAIUntzSystem.initialize`：采样率（可以更改以匹配您的音频文件）和每缓冲区帧数。
- en: 'In order to play our sounds, we''ll define a method that loads them in the
    local `sounds` table as follows:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了播放我们的声音，我们将定义一个方法，将它们加载到本地的`sounds`表中，如下所示：
- en: '[PRE4]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This method checks if the audio has been previously loaded; if it was not loaded,
    it loads and returns it. We split this from the `play` method that we'll write
    now because we may want to preload the sounds before playing them.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此方法检查音频是否已被预先加载；如果没有加载，则加载并返回它。我们将此与我们将要编写的`play`方法分开，因为我们可能希望在播放之前预加载声音。
- en: 'The next step is to create the `play` method:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是创建`play`方法：
- en: '[PRE5]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here we get the actual audio. If it was preloaded, it can be played without
    any loading delays.
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里我们获取实际的音频。如果它已被预加载，则可以播放而无需任何加载延迟。
- en: '[PRE6]'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here we can use the `loop` parameter to override the default `loop` attribute.
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们可以使用`loop`参数来覆盖默认的`loop`属性。
- en: '[PRE7]'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: And finally, we play it.
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们播放它。
- en: Tip
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: It's worth mentioning that playing a sound multiple times will cause the previous
    play to cut off.
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 值得注意的是，多次播放声音会导致之前的播放中断。
- en: 'We''ll now write a function to stop the audio:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将编写一个停止音频的函数：
- en: '[PRE8]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We need to append this file in `main.lua` just above the required `game.lua`.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在`main.lua`文件中所需`game.lua`之上添加此文件。
- en: Background music
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 背景音乐
- en: 'Now let''s play some background music by following the given steps:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们按照以下步骤播放一些背景音乐：
- en: 'At the bottom of `Game:initialize` you should add the following method calls:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Game:initialize`的底部，您应该添加以下方法调用：
- en: '[PRE9]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We initialize the audio using `AudioManager:initialize` (the method we created
    earlier in this chapter):'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`AudioManager:initialize`（我们在本章早些时候创建的方法）初始化音频：
- en: '[PRE10]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: And then we play the background music. Remember that we defined it in the `audio_definitions`
    table inside `audio_manager.lua`.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们播放背景音乐。记住，我们在`audio_manager.lua`文件中的`audio_definitions`表中定义了它。
- en: That should be it. Run the game and you should be listening to an amazing song
    by Milhouse Palacios.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 应该就是这样了。运行游戏，你应该正在听Milhouse Palacios的一首精彩歌曲。
- en: Sound effects
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声音效果
- en: We will add a sound that will be played when the character jumps.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加一个在角色跳跃时播放的声音。
- en: 'Open up `character.lua` and add a call to `AudioManager:play` inside `Character:jump`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`character.lua`文件，并在`Character:jump`方法内部调用`AudioManager:play`：
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: That's it. Run it and listen to your jump.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些了。运行它并听你的跳跃。
- en: Summary
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we created a new module that takes care of the sound. We added
    some background music and a jump sound effect.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们创建了一个新的模块来处理声音。我们添加了一些背景音乐和一个跳跃声音效果。
- en: We've covered a lot already, and you're ready to create a complete game with
    what we saw. The next chapter will guide you through deploying our *Concentration*
    game to iOS.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经覆盖了很多内容，你现在可以使用我们所学到的知识来创建一个完整游戏。下一章将指导你如何将我们的*集中注意力*游戏部署到iOS上。
