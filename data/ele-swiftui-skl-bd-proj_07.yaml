- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Mac Project – App Store Body
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Mac 项目 – 应用商店主体
- en: In this chapter, we will work on implementing the main body for the App Store
    project. In the previous chapter, we looked at the design of the App Store and
    more specifically the SideBar design. Then, we broke the SideBar down into all
    the necessary components required for our application requirements. We then implemented
    all the components using SwiftUI. At the end of the previous chapter, we only
    had a SideBar with some optional event tracking, but no content in the main body.
    The main section will be scrollable and showcase apps using icons and banners.
    Now we will analyze the main body, break it down into all the components it comprises,
    and implement all the components to provide an app store-like feel.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将致力于实现应用商店项目的主体部分。在前一章中，我们研究了应用商店的设计，特别是侧边栏设计。然后，我们将侧边栏分解为我们应用程序需求所需的所有必要组件。然后，我们使用
    SwiftUI 实现了所有组件。在前一章的结尾，我们只有一个带有一些可选事件跟踪的侧边栏，但主体部分没有内容。主要部分将是可滚动的，并使用图标和横幅展示应用程序。现在，我们将分析主体部分，将其分解为其包含的所有组件，并实现所有组件以提供类似应用商店的感觉。
- en: 'This chapter will be split into the following sections:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将分为以下部分：
- en: Main body overview
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主体部分概述
- en: Implementing the main body
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现主体部分
- en: Extra Tasks
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 额外任务
- en: By the end of this chapter, you will have created an app store template with
    a scrollable view to showcase applications. This will serve as a solid foundation
    for further expanding the app store application or pivoting the project to something
    totally different while using the core structure we have implemented. As we reach
    the end of the chapter, I will give exercises to implement more advanced functionality
    in the app store. This will transition nicely into our fourth and final project,
    the Apple Watch Fitness Companion App.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将创建一个具有可滚动视图的应用商店模板来展示应用程序。这将为进一步扩展应用商店应用程序或使用我们已实现的内核结构将项目转向完全不同的东西提供一个坚实的基础。随着本章的结束，我将提供练习以在应用商店中实现更高级的功能。这将很好地过渡到我们的第四个也是最后一个项目，即
    Apple Watch 健身伴侣应用程序。
- en: Technical Requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter requires you to download Xcode version 14 or above from Apple’s
    App Store.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章要求您从 Apple 的 App Store 下载 Xcode 版本 14 或更高版本。
- en: To install Xcode, just search for Xcode in the App Store, select, and download
    the latest version. Open Xcode and follow any additional installation instructions.
    Once Xcode has opened and launched, you’re ready to go.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Xcode，只需在 App Store 中搜索 Xcode，选择并下载最新版本。打开 Xcode 并遵循任何额外的安装说明。一旦 Xcode 打开并启动，您就可以开始了。
- en: 'Version 14 of Xcode has the following features/requirements:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode 版本 14 具有以下功能/要求：
- en: Includes SDKs for iOS 16, iPadOS 16, macOS 12.3, tvOS 16, and watchOS 9
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含适用于 iOS 16、iPadOS 16、macOS 12.3、tvOS 16 和 watchOS 9 的 SDK
- en: Supports on-device debugging in iOS 11 or later, tvOS 11 or later, and watchOS
    4 or later
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持 iOS 11 或更高版本、tvOS 11 或更高版本和 watchOS 4 或更高版本在设备上进行调试
- en: Requires a Mac running macOS Monterey 12.5 or later
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要 macOS Monterey 12.5 或更高版本的 Mac
- en: For further information regarding the technical details, please refer to [*Chapter
    1*](B18783_01.xhtml#_idTextAnchor014).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 有关技术细节的更多信息，请参阅 [*第 1 章*](B18783_01.xhtml#_idTextAnchor014)。
- en: 'The code files for this chapter can be found here:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可在此处找到：
- en: '[https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects](https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects](https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects)'
- en: In the next section, we will provide clarity on the specifications of our application’s
    design and look at mockups of what the app will look like.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将阐明我们应用程序设计的规范，并查看应用程序的外观原型。
- en: Main body overview
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主体部分概述
- en: In this section, we will take another look at the wireframes from [*Chapter
    6*](B18783_06.xhtml#_idTextAnchor354) and break them down into their individual
    components. The wireframe images for the app store and the main body have been
    provided in this section. These images depict the layout and design of the app
    store and the main body.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将再次查看第 6 章 [*](B18783_06.xhtml#_idTextAnchor354) 的线框，并将它们分解为其单个组件。本节提供了应用商店和主体部分的线框图像。这些图像描述了应用商店和主体部分的布局和设计。
- en: '![Figure 7.1 – App Store view](img/Figure_7.01_B18783.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.1 – 应用商店视图](img/Figure_7.01_B18783.jpg)'
- en: Figure 7.1 – App Store view
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – App Store 视图
- en: '![Figure 7.2 – App Store main body](img/Figure_7.02_B18783.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.2 – 应用商店主体](img/Figure_7.02_B18783.jpg)'
- en: Figure 7.2 – App Store main body
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2 – 应用商店主体
- en: Before we code our application, we will break down the main body into the elements
    that comprise it. As a little task, see whether you can figure out what these
    are, but don’t worry if you don’t know the exact UI component names. We will look
    at the components in the following section.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们编写应用程序代码之前，我们将把主体分解成构成它的元素。作为一个小任务，看看你是否能弄清楚这些是什么，但如果你不知道确切的 UI 组件名称，也不要担心。我们将在下一节中查看这些组件。
- en: Image components
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图像组件
- en: 'An Image component is one of the core components offered by SwiftUI. It allows
    you to display an image, which can be used to provide a visual representation
    or to aid a body of text. We will use it in two main ways, firstly to showcase
    a particular app using a Highlight banner, and secondly to show a list/grid of
    applications. The following figures show the application icon and application
    highlight banner:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图像组件是 SwiftUI 提供的核心组件之一。它允许你显示图像，可以用来提供视觉表示或辅助文本内容。我们将以两种主要方式使用它，首先是通过高亮横幅展示特定的应用程序，其次是通过显示应用程序列表/网格。
- en: '![Figure 7.3 – App icon](img/Figure_7.03_B18783.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.3 – 应用图标](img/Figure_7.03_B18783.jpg)'
- en: Figure 7.3 – App icon
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3 – 应用图标
- en: '![Figure 7.4 – Banner](img/Figure_7.04_B18783.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.4 – 横幅](img/Figure_7.04_B18783.jpg)'
- en: Figure 7.4 – Banner
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4 – 横幅
- en: Text component
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本组件
- en: 'The Text component is one of the simplest components offered by SwiftUI. It
    allows you to display a string of characters/numbers, which is very useful for
    headings and providing information. We will use it for the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 文本组件是 SwiftUI 提供的最简单的组件之一。它允许你显示一串字符/数字，这对于标题和信息提供非常有用。我们将用于以下内容：
- en: App title
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用标题
- en: Section description
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 章节描述
- en: In the upcoming section, we will proceed to develop the main body of our application
    using the SwiftUI components that we previously discussed. This implementation
    will be carried out with utmost precision and attention to detail.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将继续使用我们之前讨论的 SwiftUI 组件来开发应用程序的主体。这个实现将非常精确，并注重细节。
- en: Implementing the main body
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现主体
- en: In this section, we will complete the third project in this book by implementing
    the main body of our application. Our first step will be to code the Highlight
    banner, followed by the app icons.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过实现应用程序的主体来完成本书的第三个项目。我们的第一步将是编写高亮横幅的代码，然后是应用程序图标。
- en: Coding the highlight banner
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写高亮横幅
- en: 'Firstly, we will add the code for a Highlight banner. The banner is simply
    going to be an image that spans the width of the body; we will give it some spacing
    for aesthetic purposes. It is common to add multiple banners throughout the page
    to highlight different applications and have carousel banners, which provide the
    ability to showcase multiple banners in a single section through a transition
    such as sliding. We will implement a single banner; however, adding more is simple.
    Follow these steps:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将添加高亮横幅的代码。横幅将简单地覆盖整个页面的宽度；我们将为它添加一些间距以增加美观。在页面中添加多个横幅以突出不同的应用，并使用轮播横幅，通过滑动等过渡效果在一个部分中展示多个横幅是很常见的。我们将实现一个单独的横幅；然而，添加更多是非常简单的。按照以下步骤操作：
- en: 'Let’s start by adding a banner image. My image is **728x90** pixels. Feel free
    to modify this to suit your needs. Select **Assets** from the **Project Navigator**:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们先添加一个横幅图片。我的图片是 **728x90** 像素。请随意修改以适应你的需求。从 **项目导航器** 中选择 **资产**：
- en: '![Figure 7.5 – Assets location in Project Navigator](img/Figure_7.05_B18783.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.5 – 项目导航器中的资产位置](img/Figure_7.05_B18783.jpg)'
- en: Figure 7.5 – Assets location in Project Navigator
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5 – 项目导航器中的资产位置
- en: Now, the **Assets** view will appear. Importing an image into **Assets** can
    be done in one of two ways
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，**资产** 视图将出现。将图像导入 **资产** 可以有两种方式
- en: 'Dragging and dropping the files into the **Assets** section:'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件拖放到 **资产** 部分中：
- en: "![Figure 7.6 – Dragging and dropping asset\uFEFF](img/Figure_7.06_B18783.jpg)"
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.6 – 拖放资产](img/Figure_7.06_B18783.jpg)'
- en: Figure 7.6 – Dragging and dropping asset
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.6 – 拖放资产
- en: 'Right-clicking the **Assets** section and selecting **Import…**:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 **资产** 部分并选择 **导入…**：
- en: '![Figure 7.7 – Import… button](img/Figure_7.07_B18783.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.7 – 导入… 按钮](img/Figure_7.07_B18783.jpg)'
- en: Figure 7.7 – Import… button
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.7 – 导入… 按钮
- en: 'Once the asset(s) have been imported, the **Assets** view will look as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦导入资产，**资产** 视图将如下所示：
- en: '![Figure 7.8 – Asset(s) imported](img/Figure_7.08_B18783.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图7.8 – 导入的资产](img/Figure_7.08_B18783.jpg)'
- en: Figure 7.8 – Asset(s) imported
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.8 – 导入的资产
- en: Note
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'I am using the banner for my developer-centric podcast FireDEV. Feel free to
    use it and tune in to my podcast every Thursday at the following links:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在使用横幅为我的面向开发者的播客FireDEV。你可以自由使用，并请在以下链接中收听我的播客，每周四更新：
- en: '**Spotify**: [https://open.spotify.com/show/387RiHksQE33KYHTitFXhg](https://open.spotify.com/show/387RiHksQE33KYHTitFXhg)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spotify**：[https://open.spotify.com/show/387RiHksQE33KYHTitFXhg](https://open.spotify.com/show/387RiHksQE33KYHTitFXhg)'
- en: '**Apple** **Podcasts**: [https://podcasts.apple.com/us/podcast/firedev-fireside-chat-with-industry-professionals/id1602599831](https://podcasts.apple.com/us/podcast/firedev-fireside-chat-with-industry-professionals/id1602599831)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apple** **播客**：[https://podcasts.apple.com/us/podcast/firedev-fireside-chat-with-industry-professionals/id1602599831](https://podcasts.apple.com/us/podcast/firedev-fireside-chat-with-industry-professionals/id1602599831)'
- en: '**Google** **Podcasts**: [https://podcasts.google.com/feed/aHR0cHM6Ly9hbmNob3IuZm0vcy83Yjg2YTNiNC9wb2RjYXN0L3Jzcw](https://podcasts.google.com/feed/aHR0cHM6Ly9hbmNob3IuZm0vcy83Yjg2YTNiNC9wb2RjYXN0L3Jzcw)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google** **播客**：[https://podcasts.google.com/feed/aHR0cHM6Ly9hbmNob3IuZm0vcy83Yjg2YTNiNC9wb2RjYXN0L3Jzcw](https://podcasts.google.com/feed/aHR0cHM6Ly9hbmNob3IuZm0vcy83Yjg2YTNiNC9wb2RjYXN0L3Jzcw)'
- en: 'We will add an `Image` component after the `List` code:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在`List`代码之后添加一个`Image`组件：
- en: '[PRE0]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will result in the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致以下结果：
- en: '![Figure 7.9 – Banner added](img/Figure_7.09_B18783.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图7.9 – 添加了横幅](img/Figure_7.09_B18783.jpg)'
- en: Figure 7.9 – Banner added
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.9 – 添加了横幅
- en: 'If you try and resize the window, there are restrictions. We need to make the
    banner resizable and maintain its original aspect ratio. Update the image code
    as follows:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你尝试调整窗口大小，会有一些限制。我们需要使横幅可调整大小并保持其原始宽高比。更新图像代码如下：
- en: '[PRE1]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We made the image resizable, which allows it to change size based on the size
    of the window. This is very useful as the user will run the App Store on different
    screen sizes and may not always have it fullscreen. We then added horizontal padding
    to make sure it doesn’t touch the left or right edges. This can be omitted if
    you like, or you can specify a set amount of padding. Finally, we set it to `scaledToFit`,
    which maintains the original aspect ratio. Distortion is never a good idea. All
    of this results in the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使图像可调整大小，这样它可以根据窗口的大小改变大小。这对于用户在运行应用商店时在不同屏幕尺寸上运行非常有用，他们可能不会总是全屏显示。然后我们添加了水平填充以确保它不接触左右边缘。如果你喜欢，可以省略此步骤，或者你可以指定一个固定的填充量。最后，我们将它设置为`scaledToFit`，这保持了原始宽高比。扭曲从来都不是一个好主意。所有这些结果如下：
- en: '![Figure 7.10 – Banner updated](img/Figure_7.10_B18783.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图7.10 – 横幅已更新](img/Figure_7.10_B18783.jpg)'
- en: Figure 7.10 – Banner updated
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.10 – 横幅已更新
- en: 'As of now, the banner is always in the center. We want it at the top of the
    view. To achieve this result, we will enclose the image code we added previously
    within a `ScrollView` with an alignment of `topLeading`. Update the code like
    so:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目前，横幅始终位于中心。我们希望将其置于视图顶部。为了实现这一结果，我们将之前添加的图像代码包裹在一个具有`topLeading`对齐方式的`ScrollView`中。更新代码如下：
- en: '[PRE2]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We also add a `Color.clear` instruction to make sure there is no background
    color, all of which results in the following awesome banner:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还添加了一个`Color.clear`指令以确保没有背景颜色，所有这些结果都产生了一个很棒的横幅：
- en: '![Figure 7.11 – Banner positioned at the top](img/Figure_7.11_B18783.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图7.11 – 横幅定位在顶部](img/Figure_7.11_B18783.jpg)'
- en: Figure 7.11 – Banner positioned at the top
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.11 – 横幅定位在顶部
- en: The highlight banner has been finished, which can be converted into a carousel.
    Moving forward, the app groups will be coded to showcase a list of application
    icons.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 突出横幅已完成，可以将其转换为轮播图。接下来，应用组将被编码以展示应用图标列表。
- en: Coding the app groups
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写应用组代码
- en: 'We will now implement the code to display app groups. These will contain an
    image representing the application icon and a label that represents the application
    name. Feel free to add more components to each group and arrange them as you see
    fit. I have added an app icon to the assets. I followed the previous steps to
    add images. Feel free to refer to those steps:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将实现显示应用组的代码。这些将包含代表应用图标的图像和一个代表应用名称的标签。你可以自由地向每个组添加更多组件，并按你的喜好排列。我已经将应用图标添加到资源中。我遵循了之前的步骤来添加图像。你可以自由地参考那些步骤：
- en: 'First, add the following code before the body:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在正文之前添加以下代码：
- en: '[PRE3]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will be used in our grid and ensures the items have a minimum size of 300\.
    This is extremely useful as we don’t want them to become so small the user cannot
    see them.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在我们的网格中使用，并确保项目具有至少300像素的最小尺寸。这对于我们不想让它们变得太小以至于用户看不到它们来说非常有用。
- en: 'Add the following code beneath the banner code we added in the previous section:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一节中添加的横幅代码下方添加以下代码：
- en: '[PRE4]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Let’s break down the code before we run the application.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们运行应用程序之前，让我们分解代码。
- en: We create a `LazyVGrid` using `adaptiveColumns` and with `spacing` set to `20`.
    Feel free to change the spacing of the column sizing as you see fit.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用`adaptiveColumns`创建一个`LazyVGrid`，并将`spacing`设置为`20`。你可以根据需要更改列大小的间距。
- en: Next, we use a `ForEach` loop that runs 20 times. Feel free to substitute the
    code with an array of items as done in the previous project.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，我们使用一个运行20次的`ForEach`循环。你可以随意用上一个项目中使用的方法，将代码替换为一个项目数组。
- en: Then, we create a `Label` component beneath the image. The label will be used
    as the name of the application.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们在图像下方创建了一个`Label`组件。该标签将用作应用程序的名称。
- en: Finally, we create an `Image` component and a `Label` component, and we omit
    the `systemImage` parameter as it is not required by us. However, you must put
    something, hence the empty quotation marks.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们创建了一个`Image`组件和一个`Label`组件，并省略了`systemImage`参数，因为我们不需要它。然而，你必须放些东西，因此使用了空引号。
- en: 'Running the application will result in the following:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序将产生以下结果：
- en: '![Figure 7.12 – App groups](img/Figure_7.12_B18783.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图7.12 – 应用程序组](img/Figure_7.12_B18783.jpg)'
- en: Figure 7.12 – App groups
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.12 – 应用程序组
- en: 'We are almost done with this application. The application name is a little
    on the small side. Let’s make it bigger, and update `Label` as follows:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们几乎完成了这个应用程序。应用程序的名称有点小。让我们把它做得更大，并更新`Label`如下：
- en: '[PRE5]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, running this will result in the following figure:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，运行这将产生以下图示：
- en: '![Figure 7.13 – Label font size increase](img/Figure_7.13_B18783.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图7.13 – 标签字体大小增加](img/Figure_7.13_B18783.jpg)'
- en: Figure 7.13 – Label font size increase
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.13 – 标签字体大小增加
- en: 'As a recap, here is the whole code for `MainView`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 作为回顾，以下是`MainView`的完整代码：
- en: '[PRE6]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The code is also available in the GitHub repository of the book.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 代码也包含在本书的GitHub仓库中。
- en: In this section, we implemented the main body for our App Store application,
    thus finishing our third project. There were two main sections – first, we implemented
    a Highlight Banner, which can be used multiple times throughout the view to showcase
    different applications. Then, we implemented a grid of app groups. Although the
    app information was hardcoded, it can be abstracted into an array, which can store
    more information for each application. In the next section, we will summarize
    this chapter.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们实现了App Store应用程序的主体，从而完成了我们的第三个项目。主要有两个部分 – 首先，我们实现了一个高亮横幅，可以在整个视图中多次使用来展示不同的应用程序。然后，我们实现了一个应用程序组的网格。尽管应用程序信息是硬编码的，但它可以被抽象成一个数组，可以存储每个应用程序的更多信息。在下一节中，我们将总结本章内容。
- en: Extra Tasks
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 额外任务
- en: 'Now that the application is complete, here is a list of extra tasks for you
    to complete to enhance your application:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应用程序已经完成，以下是一些额外的任务列表，供你完成以增强你的应用程序：
- en: An app page, to which the user navigates when they click an app icon
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个应用程序页面，用户点击应用程序图标时将导航到该页面
- en: Multiple highlight banners
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个高亮横幅
- en: Updating the banner to be a carousel
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将横幅更新为轮播图
- en: Different pages for the section in the sidebar
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 侧边栏中该部分的多个页面
- en: Pulling data from an array or external source such as a database for the app
    metadata
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数组或外部源（如数据库）中提取数据用于应用程序元数据
- en: In the next section, we will summarize what we have covered in this chapter,
    but first, we will look over the code to help with the extra tasks for this project.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将总结本章所涵盖的内容，但首先，我们将回顾代码以帮助完成本项目的额外任务。
- en: Search Functionality
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搜索功能
- en: 'To add search functionality to the app, you can use the `.searchable` modifier
    provided by SwiftUI. Here’s the modified code with search functionality added:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要向应用程序添加搜索功能，你可以使用SwiftUI提供的`.searchable`修饰符。以下是添加了搜索功能的修改后的代码：
- en: '[PRE7]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In this modified code, I added the `.searchable(text: $searchText)` modifier
    to the `List` view, which enables search functionality. The `searchText` variable
    is used as the binding for the search text input.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '在这个修改后的代码中，我在`List`视图中添加了`.searchable(text: $searchText)`修饰符，这启用了搜索功能。`searchText`变量用作搜索文本输入的绑定。'
- en: 'I also added an `.onSubmit(of: .search)` modifier to the `List` view to handle
    the search submission. In this example, it prints the search text to the console,
    but you can customize the action based on your requirements.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '我还向`List`视图添加了`.onSubmit(of: .search)`修改器来处理搜索提交。在这个示例中，它将搜索文本打印到控制台，但你可以根据需求自定义操作。'
- en: With these modifications, users will be able to enter search queries and filter
    the items in the list based on the entered text.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些修改，用户将能够输入搜索查询并根据输入的文本过滤列表中的项目。
- en: App Page
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用页面
- en: 'To provide an enhanced page with more information when the user clicks on an
    app, you can create a new view that displays detailed information about the selected
    app. Here’s an example of how you can modify the code to achieve this:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击应用时，为了提供一个包含更多信息的高级页面，你可以创建一个新的视图来显示所选应用的详细信息。以下是一个如何修改代码以实现此功能的示例：
- en: '[PRE8]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this modified code, I added a new `AppDetailsView`, which takes the selected
    app name as a parameter and displays more detailed information about the app.
    You can customize the content of this view based on your requirements.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个修改后的代码中，我添加了一个新的`AppDetailsView`，它接受所选应用名称作为参数，并显示关于应用的更多详细信息。你可以根据需求自定义此视图的内容。
- en: 'I also added a new `@State` variable called `selectedApp` to track the selected
    app name. When a user taps on an app in the list or label, the corresponding app
    name is assigned to `selectedApp`, and `AppDetailsView` is presented as a sheet
    using `.sheet(item: $selectedApp)`. When the user dismisses the sheet, `selectedApp`
    is set back to `nil`.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '我还添加了一个新的`@State`变量`selectedApp`来跟踪所选应用名称。当用户在列表或标签中点击应用时，相应的应用名称被分配给`selectedApp`，并且使用`.sheet(item:
    $selectedApp)`以表单的形式展示`AppDetailsView`。当用户关闭表单时，`selectedApp`被设置回`nil`。'
- en: In `AppDetailsView`, I simply display the app name for demonstration purposes.
    You can add more information and customize the layout as per your app’s requirements.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在`AppDetailsView`中，我仅为了演示目的显示了应用名称。你可以添加更多信息并根据你应用的需求自定义布局。
- en: With these modifications, when a user taps on an app, a new sheet will appear
    showing the enhanced page with more information about the selected app.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些修改，当用户点击应用时，将出现一个新的表单，显示有关所选应用的增强页面。
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we successfully implemented the main body for the app store
    application. We started by analyzing the wireframes and breaking down each element
    into SwiftUI components. We then meticulously implemented the SwiftUI components
    to match the design from the wireframe. We implemented a scrollable stack with
    a highlight banner and app icons. We also looked at a few extra task implementations
    at the end of the chapter.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们成功实现了应用商店应用的主体。我们首先分析了线框图，并将每个元素分解成SwiftUI组件。然后，我们仔细实现了SwiftUI组件，以匹配线框图中的设计。我们实现了一个可滚动的堆叠，带有高亮横幅和应用图标。我们还在本章的末尾查看了一些额外的任务实现。
- en: In the next chapter, we will begin working on our fourth and final application,
    which is the fitness companion app for Apple Watch. Our focus will be on analyzing
    the design and breaking it down to gain a better understanding of how we can implement
    this application on our next platform.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始着手我们的第四个也是最后一个应用，这是一个适用于Apple Watch的健身伴侣应用。我们的重点将放在分析其设计和将其分解，以便更好地理解我们如何在下一个平台上实现这个应用。
