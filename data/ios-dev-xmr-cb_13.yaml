- en: Chapter 13. Localization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章。本地化
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Creating an app for different languages
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为不同语言创建应用程序
- en: Localizable resources
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可本地化资源
- en: Regional formatting
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区域格式化
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: With the release of the iOS platform and the global software marketplace in
    the form of the App Store, Apple has made it easier for developers to distribute
    applications worldwide.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 随着iOS平台和App Store这种全球软件市场的推出，苹果公司使得开发者更容易在全球范围内分发应用程序。
- en: However, users worldwide will not even bother to download and use an app that
    is released in a language they do not understand. To broaden the user base for
    their apps, developers have to localize it. Localization is the process of translating
    text into multiple languages, providing resources specific to multiple regions,
    and thus creating an app that will target audiences of different cultures.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，全球用户甚至不会费心下载和使用发布在他们不理解的语言中的应用程序。为了扩大应用程序的用户基础，开发者必须对其进行本地化。本地化是将文本翻译成多种语言、提供针对多个区域的具体资源，从而创建面向不同文化受众的应用程序的过程。
- en: In this chapter, we will discuss the best practices to provide translated text
    that will be displayed according to each user's locale preferences. We will also
    see how to provide resources (images and videos) based on these preferences. Finally,
    we will use common .NET practices to format dates, currencies, and numbers.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论提供符合每个用户区域首选项的翻译文本的最佳实践。我们还将看到如何根据这些首选项提供资源（图像和视频）。最后，我们将使用常见的.NET实践来格式化日期、货币和数字。
- en: Creating an app for different languages
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为不同语言创建应用程序
- en: In this recipe, we will create an app that will support two different languages.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将创建一个支持两种不同语言的程序。
- en: Getting ready
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new **Single View Application** in Xamarin Studio and name it `MultipleLanguageApp`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在Xamarin Studio中创建一个新的**单视图应用程序**，并将其命名为`MultipleLanguageApp`。
- en: How to do it...
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Perform the following steps:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: Add two labels on the view of `MultipleLanguageAppViewController`.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MultipleLanguageAppViewController`的视图中添加两个标签。
- en: Add two folders to the project. Name them `en.lproj` and `es.lproj`, respectively.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个文件夹添加到项目中。分别命名为`en.lproj`和`es.lproj`。
- en: 'Add a plain text file in the `en.lproj` folder and name it `Localizable.strings`.
    Enter the following in the file and save it:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`en.lproj`文件夹中添加一个纯文本文件，并将其命名为`Localizable.strings`。在文件中输入以下内容并保存：
- en: '[PRE0]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add another plain text file in the `es.lproj` folder and name it the same as
    before: `Localizable.strings`. Enter the following in the file and save it:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`es.lproj`文件夹中添加另一个纯文本文件，并将其命名为之前相同的名称：`Localizable.strings`。在文件中输入以下内容并保存：
- en: '[PRE1]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Enter the following code in the `MultipleLanguageAppViewController` class:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MultipleLanguageAppViewController`类中输入以下代码：
- en: '[PRE2]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Through the settings app on the simulator, set the language to English (if it
    is not set already) and run the app. The message will be displayed in English.
    Try setting the language of the simulator to Spanish (**Español**) and run the
    app again. The message will be displayed in Spanish.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过模拟器的设置应用程序，将语言设置为英语（如果尚未设置）并运行应用程序。消息将以英语显示。尝试将模拟器的语言设置为西班牙语（**Español**）并再次运行应用程序。消息将以西班牙语显示。
- en: How it works...
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To make it easy for developers to provide support for multiple languages in
    apps, iOS reads text in different languages from the corresponding language folder.
    In this app, we support both English and Spanish. Their corresponding folders
    are `en.lproj` and `es.lproj`, respectively. When we call the `LocalizedString`
    method, it looks for and parses the `Localizable.strings` file to return the appropriate
    text.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使开发者更容易在应用程序中提供对多种语言的支持，iOS从相应的语言文件夹中读取不同语言中的文本。在本应用程序中，我们支持英语和西班牙语。它们对应的文件夹分别是`en.lproj`和`es.lproj`。当我们调用`LocalizedString`方法时，它会查找并解析`Localizable.strings`文件，以返回适当的文本。
- en: 'The contents of the string files are defined by a set of quoted key-value pairs
    in a C style syntax, ending each set with a semicolon, as shown in the following
    code:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串文件的内容由一组用C风格语法定义的引号键值对组成，每个集合以分号结尾，如下面的代码所示：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, we can also provide comments to assist the job of the person
    who will translate the text, even if we do it ourselves.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们还可以提供注释以协助翻译文本的人的工作，即使我们自己翻译。
- en: The `NSLocale.PreferredLanguages` static property returns a string array of
    the user's preferred language identifiers. The first item in this array is the
    currently selected language. If the selected language is English, it will return
    `en`; if it is Spanish, it will return `es`, and so on.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`NSLocale.PreferredLanguages`静态属性返回一个包含用户首选语言标识符的字符串数组。该数组中的第一个项目是当前选定的语言。如果选定的语言是英语，它将返回`en`；如果是西班牙语，它将返回`es`，依此类推。'
- en: Note
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Both these language codes are based on the ISO 639-1 standard. The three-letter
    ISO 639-2 standard is also supported. A list of all the available language codes
    can be found at [http://www.loc.gov/standards/iso639-2/php/code_list.php](http://www.loc.gov/standards/iso639-2/php/code_list.php).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种语言代码都基于ISO 639-1标准。也支持三字母的ISO 639-2标准。所有可用的语言代码列表可以在[http://www.loc.gov/standards/iso639-2/php/code_list.php](http://www.loc.gov/standards/iso639-2/php/code_list.php)找到。
- en: 'The `NSBundle.PathForResource` method returns the path of the app bundle for
    the parameters we pass to it. We use this path to get the appropriate `NSBundle`
    instance, according to the selected language, as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`NSBundle.PathForResource`方法返回我们传递给它的参数的应用程序包路径。我们使用此路径根据选定的语言获取适当的`NSBundle`实例，如下所示：'
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We then call the `LocalizedString` method to display the appropriate text,
    as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们调用`LocalizedString`方法来显示适当的文本，如下所示：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The first parameter's purpose is dual. It is both the key to look for in order
    to return the translated text and also the text that will be displayed in case
    the specified localization path is not found. The second parameter is the comment
    or any instruction we want to give to the translator. It is not displayed and
    basically not used. We can pass null to this parameter, and no error will occur.
    However, it is wise to always include a comment or instruction since it will help
    avoid confusion when translating multiple strings.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数的目的是双重的。它既是查找以返回翻译文本的键，也是在找不到指定的本地化路径时将显示的文本。第二个参数是我们想要给翻译者提供的注释或任何指令。它不会显示并且基本上不会被使用。我们可以传递null到这个参数，并且不会发生错误。然而，始终包含注释或指令是明智的，因为它将有助于在翻译多个字符串时避免混淆。
- en: There's more...
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: It is advised to always provide keys that can act as the fallback text to be
    displayed in English, in case the language that the user has selected is not included
    in our app.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 建议始终提供可以作为在英语中显示的回退文本的键，以防用户选定的语言未包含在我们的应用程序中。
- en: 'However, the `LocalizedString` method is overloaded. The second overload accepts
    three parameters. Consider the following example:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`LocalizedString`方法有重载。第二个重载接受三个参数。考虑以下示例：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The first parameter is the key to look for. The second parameter is the fallback
    value in case the specified localization path is not found. The third parameter
    is the name of the file containing the strings without the `.strings` extension.
    This overload is more helpful, and we can use different keys for our strings,
    which will help us identify where that particular string is used in the code.
    For example, in this case, we could set the key in the strings file to `MultipleLanguageAppViewController.lblLocalizedOutput`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是查找键。第二个参数是在找不到指定的本地化路径时的回退值。第三个参数是不带`.strings`扩展名的字符串文件名。这种重载更有帮助，我们可以为我们的字符串使用不同的键，这有助于我们识别特定字符串在代码中的使用位置。例如，在这种情况下，我们可以在字符串文件中将键设置为`MultipleLanguageAppViewController.lblLocalizedOutput`：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, use it in our code as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在代码中使用它如下：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This overload also helps us to separate our strings into multiple `.strings`
    files, passing the corresponding filename as the third parameter.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这种重载还帮助我们将字符串分离到多个`.strings`文件中，通过传递相应的文件名作为第三个参数。
- en: The last overload contains four parameters. The first three are the same as
    the second overload. The fourth parameter is simply the comment that we want the
    particular string to have.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个重载包含四个参数。前三个与第二个重载相同。第四个参数是我们希望特定字符串具有的注释。
- en: Localization in real-world app scenarios
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在现实世界的应用程序场景中的本地化
- en: In this example, we use the `PathForResource` method to get an instance of the
    current locale bundle. This is because the values returned from the `LocalizedString`
    method are cached. In real-world app scenarios, where the app would be downloaded
    in a specific language and the user would most likely never change the language
    of the device to use it, just calling `NSBundle.MainBundle.LocalizedString` would
    be enough.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用 `PathForResource` 方法来获取当前区域包的实例。这是因为 `LocalizedString` 方法返回的值会被缓存。在现实世界的应用程序场景中，如果应用程序以特定语言下载，并且用户不太可能更改设备的语言来使用它，只需调用
    `NSBundle.MainBundle.LocalizedString` 就足够了。
- en: The localizable.strings encoding
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可本地化的字符串编码
- en: The encoding of the `Localizable.strings` file should always be either UTF-8
    or UTF-16.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`Localizable.strings` 文件的编码始终应该是 UTF-8 或 UTF-16。'
- en: Localizable resources
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可本地化资源
- en: A localizable resource is content, such as images and sound files, which is
    specific to a locale. In this recipe, we will learn how to load and display resources
    based on the user's localization preferences.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 可本地化资源是特定于区域的内容，例如图片和声音文件。在本例中，我们将学习如何根据用户的本地化首选项加载和显示资源。
- en: Getting ready
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new **Single View Application** in Xamarin Studio and name it `LocalizableResourcesApp`.
    Add a label and a `UIImageView` on the view of `LocalizableResourcesAppViewController`.
    Two different images will also be needed, one for each locale. The images of USA
    and Spain are used in this example.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在Xamarin Studio中创建一个新的 **单视图应用程序**，命名为 `LocalizableResourcesApp`。在 `LocalizableResourcesAppViewController`
    的视图中添加一个标签和一个 `UIImageView`。还需要两个不同的图片，每个区域一个。本例中使用的是美国和西班牙的图片。
- en: How to do it...
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Perform the following steps:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: Add two folders for the English and Spanish locales to the project (`en.lproj`
    and `es.lproj`).
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个文件夹（`en.lproj` 和 `es.lproj`）添加到项目中，用于英语和西班牙语区域。
- en: Add one image in each folder. Make sure that the filename for the images is
    the same within both the folders.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个文件夹中添加一个图片。确保图片的文件名在两个文件夹中都是相同的。
- en: 'Enter the following code in the `LocalizableResourcesAppViewController` class:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `LocalizableResourcesAppViewController` 类中输入以下代码：
- en: '[PRE9]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Compile and run the app on the simulator with English as the language selected
    in the *Settings* app. The result should be similar to the following screenshot:![How
    to do it...](img/8924OT_13_01.jpg)
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译并在模拟器上运行应用程序，在 *设置* 应用中选择英语作为语言。结果应该类似于以下截图：![如何操作...](img/8924OT_13_01.jpg)
- en: Now, set the simulator's language to Spanish and run the app again. The Spanish
    flag should be displayed instead, as shown in the following screenshot:![How to
    do it...](img/8924OT_13_02.jpg)
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将模拟器的语言设置为西班牙语，然后再次运行应用程序。应该显示西班牙国旗，如下面的截图所示：![如何操作...](img/8924OT_13_02.jpg)
- en: How it works...
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `PathForResource` method automatically searches for the appropriate language
    folder and loads the resource specified through its arguments. In this example,
    we pass the method's result to the `UIImage.FromFile` method in order to load
    the image and assign it to the image view's `Image` property.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`PathForResource` 方法会自动搜索适当的语言文件夹，并通过其参数加载指定的资源。在本例中，我们将方法的结果传递给 `UIImage.FromFile`
    方法，以便加载图片并将其分配给图像视图的 `Image` 属性。'
- en: There's more...
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Apart from images, we can use the `PathForResource` method to load videos, PDF
    files, and any other localizable resource we need.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 除了图片之外，我们还可以使用 `PathForResource` 方法来加载视频、PDF文件和任何其他需要的可本地化资源。
- en: More information on localizable resources
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于可本地化资源的更多信息
- en: 'We need to make sure the resource for the specific language folder exists.
    If it does not, an exception will occur. A way to avoid this is to add one universal
    image file in the project and use a `Localizable.strings` file inside each language
    folder, which contains the paths to the resources, as shown in the following code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要确保特定语言文件夹的资源存在。如果不存在，将会发生异常。避免这种情况的一种方法是，在项目中添加一个通用的图片文件，并在每个语言文件夹内使用一个
    `Localizable.strings` 文件，其中包含资源的路径，如下面的代码所示：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To load the appropriate flag, we load the image with the `LocalizedString`
    method, as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要加载适当的国旗，我们使用 `LocalizedString` 方法加载图片，如下所示：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This way, the `image.jpg` image will be loaded if the corresponding language
    folder is not found.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，如果找不到相应的语言文件夹，将会加载 `image.jpg` 图片。
- en: See also
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Creating an app for different languages* recipe
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为不同语言创建应用程序* 的配方'
- en: Regional formatting
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区域格式化
- en: Regional formatting is the manner in which various information, such as currency,
    date, and time is displayed according to the different regions of the world. In
    this recipe, we will discuss how to display formatted numbers and dates according
    to the user's regional formatting settings.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 区域格式化是指根据世界各地的不同区域，以不同的方式显示各种信息，例如货币、日期和时间。在本教程中，我们将讨论如何根据用户的区域格式化设置显示格式化的数字和日期。
- en: Getting ready
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new **Single View Application** in Xamarin Studio and name it `RegionalFormattingApp`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Xamarin Studio 中创建一个新的 **单视图应用程序**，并将其命名为 `RegionalFormattingApp`。
- en: How to do it...
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Perform the following steps:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: Add five labels on the view of `RegionalFormattingAppViewController`.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `RegionalFormattingAppViewController` 的视图中添加五个标签。
- en: 'Enter the following code in the `RegionalFormattingAppViewController` class:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `RegionalFormattingAppViewController` 类中输入以下代码：
- en: '[PRE12]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Compile and run the app on the simulator with regional formatting set to **United
    States** and **Spanish** | **Spain** under **Settings** | **General** | **International**
    | **Region Format**. The output for the United States regional format will be
    similar to what is shown in the following screenshot:![How to do it...](img/8924OT_13_03.jpg)
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模拟器上编译并运行应用程序，将区域格式设置为 **美国** 和 **西班牙** | **西班牙**，在 **设置** | **通用** | **国际**
    | **区域格式** 下。美国区域格式的输出将类似于以下屏幕截图：![如何操作...](img/8924OT_13_03.jpg)
- en: 'The output for the Spanish regional format will be similar to what is shown
    in the following screenshot:'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 西班牙区域格式的输出将类似于以下屏幕截图所示：
- en: '![How to do it...](img/8924OT_13_04.jpg)'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/8924OT_13_04.jpg)'
- en: How it works...
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To format dates, currencies, and numbers, we use the standard .NET code. For
    date and time, the `DateTime.ToLongDateString` and `DateTime.ToLongTimeString`
    methods, respectively, return the values according to the locale.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要格式化日期、货币和数字，我们使用标准的 .NET 代码。对于日期和时间，`DateTime.ToLongDateString` 和 `DateTime.ToLongTimeString`
    方法分别返回根据区域设置确定的值。
- en: 'For currency and numbers, we use C# numerical strings, as shown in the following
    code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 对于货币和数字，我们使用 C# 数值字符串，如下所示：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: There's more...
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The `System.Globalization` namespace is supported in Xamarin.iOS. To display
    the current locale, consider the following line of code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`System.Globalization` 命名空间在 Xamarin.iOS 中受支持。要显示当前区域设置，请考虑以下代码行：'
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note that there is one difference between the preceding code and `NSLocale.CurrentLocale.LocaleIdentifier`.
    The former uses a dash (`-`), while the latter uses an underscore (`_`) in the
    locale name.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，前面的代码与 `NSLocale.CurrentLocale.LocaleIdentifier` 之间有一个区别。前者使用破折号（`-`），而后者在区域名称中使用下划线（`_`）。
