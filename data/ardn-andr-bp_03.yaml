- en: Chapter 3. Bluetooth Weather Station
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章：蓝牙气象站
- en: In this chapter, we will build the first complete application of this book using
    Arduino and Android. We will build a small weather station using Arduino, which
    will be accessed by an Android app via Bluetooth.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Arduino和Android构建本书的第一个完整应用。我们将使用Arduino构建一个小型气象站，它将通过蓝牙被Android应用访问。
- en: On the Arduino side, we will build a simple weather station using a temperature
    and humidity sensor along with an ambient light-level sensor. We will connect
    a **Bluetooth Low Energy** (**BLE**) module to the project so that the Android
    phone can access the measurements wirelessly.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在Arduino端，我们将使用温度和湿度传感器以及环境光强度传感器构建一个简单的气象站。我们将把一个**蓝牙低功耗**（**BLE**）模块连接到项目中，以便Android手机可以无线访问测量数据。
- en: 'We will develop a simple Android app with an interface that allows us to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开发一个简单的Android应用，它具有一个界面，允许我们：
- en: Access all the measurements performed by the weather station with the tap of
    a button
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过点击按钮访问气象站执行的所有测量
- en: Display each measurement within an enlarged text view
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在扩大的文本视图中显示每个测量值
- en: Hardware and software requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件和软件要求
- en: The first thing you will need for this project is an Arduino Uno board.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，你首先需要一块Arduino Uno板。
- en: Then, you need a BLE module. We chose the Adafruit nRF8001 chip because it comes
    with a nice Arduino library, and it already has existing examples of Android apps
    to control the module. This is the same module that we used in the previous chapter.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你需要一个BLE模块。我们选择了Adafruit nRF8001芯片，因为它附带了一个不错的Arduino库，并且已经存在一些用于控制该模块的Android应用示例。这正是我们在上一章中使用过的模块。
- en: For the sensors, I chose a DHT11 sensor to measure the temperature and the ambient
    humidity. DHT11 is a digital temperature and humidity sensor that is really easy
    to integrate with Arduino. There are several solutions available for Arduino,
    but this sensor was chosen because it is one of the easiest to interface with
    Arduino. To make the sensor work with Arduino, we will also need a 4.7K Ohm resistor.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于传感器，我选择了DHT11传感器来测量温度和环境湿度。DHT11是一个易于与Arduino集成的数字温度和湿度传感器。有几种Arduino的解决方案，但这个传感器被选中是因为它是最容易与Arduino接口的之一。为了让传感器与Arduino一起工作，我们还需要一个4.7K欧姆电阻。
- en: We will also use a photocell in series with a 10K Ohm resistor to measure the
    ambient light level. The photocell is basically a resistor that will change its
    resistance depending on the incoming light on the cell. It will be connected to
    the Arduino analog input to measure the ambient light level.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用一个串联10K欧姆电阻的光电传感器来测量环境光强度。光电传感器基本上是一个电阻，其电阻会根据细胞上的入射光而改变。它将被连接到Arduino模拟输入以测量环境光强度。
- en: Finally, you will need a breadboard and some jumper wires to make the different
    connections.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你需要一个面板和一些跳线来制作不同的连接。
- en: 'The following is a list of all hardware parts you will need for this project,
    along with links to find these parts on the Web:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是需要为此项目准备的全部硬件部件列表，以及如何在网络上找到这些部件的链接：
- en: The Arduino Uno board ([http://www.adafruit.com/product/50](http://www.adafruit.com/product/50))
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino Uno板([http://www.adafruit.com/product/50](http://www.adafruit.com/product/50))
- en: The DHT11 sensor and 4.7K Ohm resistor ([https://www.adafruit.com/products/386](https://www.adafruit.com/products/386))
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DHT11传感器和4.7K欧姆电阻([https://www.adafruit.com/products/386](https://www.adafruit.com/products/386))
- en: The photocell ([https://www.sparkfun.com/products/9088](https://www.sparkfun.com/products/9088))
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 光电传感器([https://www.sparkfun.com/products/9088](https://www.sparkfun.com/products/9088))
- en: The 10K Ohm resistor ([https://www.sparkfun.com/products/8374](https://www.sparkfun.com/products/8374))
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 10K欧姆电阻([https://www.sparkfun.com/products/8374](https://www.sparkfun.com/products/8374))
- en: Adafruit nRF8001 breakout board ([https://www.adafruit.com/products/1697](https://www.adafruit.com/products/1697))
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Adafruit nRF8001扩展板([https://www.adafruit.com/products/1697](https://www.adafruit.com/products/1697))
- en: The breadboard ([https://www.adafruit.com/product/64](https://www.adafruit.com/product/64))
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面板([https://www.adafruit.com/product/64](https://www.adafruit.com/product/64))
- en: Jumper wires ([https://www.adafruit.com/product/758](https://www.adafruit.com/product/758))
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳线([https://www.adafruit.com/product/758](https://www.adafruit.com/product/758))
- en: On the software side, you will need the Arduino IDE as usual, and the Arduino
    aREST library, which is found at [https://github.com/marcoschwartz/aREST/](https://github.com/marcoschwartz/aREST/).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件方面，你将需要通常的Arduino IDE和Arduino aREST库，该库位于[https://github.com/marcoschwartz/aREST/](https://github.com/marcoschwartz/aREST/)。
- en: The photocell make measurements from the DHT11 sensor, you will need the DHT
    library found at [https://github.com/adafruit/DHT-sensor-library](https://github.com/adafruit/DHT-sensor-library).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 光敏电阻从DHT11传感器进行测量，您需要从[https://github.com/adafruit/DHT-sensor-library](https://github.com/adafruit/DHT-sensor-library)找到的DHT库。
- en: For the BLE chip, you will also need the nRF8001 Arduino library found at [https://github.com/adafruit/Adafruit_nRF8001](https://github.com/adafruit/Adafruit_nRF8001).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于BLE芯片，您还需要在[https://github.com/adafruit/Adafruit_nRF8001](https://github.com/adafruit/Adafruit_nRF8001)找到的nRF8001
    Arduino库。
- en: To install a given library, simply extract the folder in your `Arduino /libraries`
    folder (or create this folder if it doesn't exist yet).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装某个库，只需将文件夹提取到您的`Arduino /libraries`文件夹中（如果尚不存在，则创建此文件夹）。
- en: Hardware configuration
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 硬件配置
- en: 'We will now build the hardware for this project. To help you out, here is a
    schematic of the project:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将构建这个项目的硬件。为了帮助您，以下是项目的原理图：
- en: '![Hardware configuration](img/0389OS_03_01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![硬件配置](img/0389OS_03_01.jpg)'
- en: 'Now, we will perform the following steps:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将执行以下步骤：
- en: The first step is to place the Bluetooth module, the DHT11 sensor, and the photocell
    on the breadboard.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是将蓝牙模块、DHT11传感器和光敏电阻放置在面包板上。
- en: 'Then, connect the power supply from the Arduino board to the breadboard: 5V
    of the Arduino board goes to the red power rail, and **GND** goes to the blue
    power rail.'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将Arduino板上的电源连接到面包板：Arduino板的5V连接到红色电源轨，而**GND**连接到蓝色电源轨。
- en: 'We will now connect the BLE module. First, connect the power supply of the
    module: **GND** goes to the blue power rail, and **VIN** goes to the red power
    rail.'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将连接BLE模块。首先，连接模块的电源：**GND**连接到蓝色电源轨，**VIN**连接到红色电源轨。
- en: 'After that, you need to connect the different wires responsible for the SPI
    interface: **SCK** to Arduino pin **13**, **MISO** to Arduino pin **12**, and
    **MOSI** to Arduino pin **11**.'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，您需要连接负责SPI接口的不同电线：**SCK**连接到Arduino引脚**13**，**MISO**连接到Arduino引脚**12**，**MOSI**连接到Arduino引脚**11**。
- en: Then, connect the **REQ** pin to Arduino pin **10**. Finally, connect the **RDY**
    pin to Arduino pin **2**, and the **RST** pin to Arduino pin **9**.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将**REQ**引脚连接到Arduino引脚**10**。最后，将**RDY**引脚连接到Arduino引脚**2**，将**RST**引脚连接到Arduino引脚**9**。
- en: 'For the DHT sensor, this is the function of each pin on the sensor:'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于DHT传感器，这是传感器上每个引脚的功能：
- en: '![Hardware configuration](img/0389OS_03_02.jpg)'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![硬件配置](img/0389OS_03_02.jpg)'
- en: 'You need to first connect the power supply: the **VCC** pin goes to the red
    power rail on the breadboard, and the **GND** pin goes to the blue power rail.'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要首先连接电源：**VCC**引脚连接到面包板上的红色电源轨，而**GND**引脚连接到蓝色电源轨。
- en: You also need to connect the **DATA** pin to pin number **7** of the Arduino
    board.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还需要将**DATA**引脚连接到Arduino板的引脚编号**7**。
- en: Finally, place the 4.7K Ohm resistor between the **VCC** and the **DATA** pin
    of the sensor.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将4.7K欧姆电阻放置在**VCC**和传感器**DATA**引脚之间。
- en: For the photocell, connect the 10K Ohm resistor in series with the photocell.
    This means that one pin of the photocell should be in contact (on the same row
    on the breadboard) with one pin of the resistor.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于光敏电阻，将10K欧姆电阻串联在光敏电阻上。这意味着光敏电阻的一个引脚应该与电阻的一个引脚接触（在面包板上的同一行）。
- en: Then, connect the other pin of the resistor to the blue power rail, and the
    other pin of the photocell to the red power rail of the breadboard.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将电阻的另一端连接到蓝色电源轨，将光敏电阻的另一端连接到面包板上的红色电源轨。
- en: Finally, connect the common pin between the photocell and resistor to the analog
    pin **A0** of the Arduino board.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将光敏电阻和电阻之间的公共引脚连接到Arduino板上的模拟引脚**A0**。
- en: 'This is an image of the completely assembled project:'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是完全组装好的项目的图片：
- en: '![Hardware configuration](img/0389OS_03_03.jpg)'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![硬件配置](img/0389OS_03_03.jpg)'
- en: Testing the sensors
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试传感器
- en: 'We will now write a simple Arduino sketch to test all the sensors of the project.
    This will ensure that all the connections were made correctly before writing our
    Android app using Bluetooth. This is the complete sketch for testing the sensors:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写一个简单的Arduino草图来测试项目的所有传感器。这将确保在编写使用蓝牙的Android应用程序之前，所有连接都已正确完成。这是测试传感器的完整草图：
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s now look at this sketch in more detail. It starts by including the DHT11
    library:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看看这个草图。它首先包含DHT11库：
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We also declare that the sensor is attached to pin number 7, and that the DHT
    sensor we are using is a DHT11 sensor by declaring constants:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还声明传感器连接到引脚编号7，并且我们使用的DHT传感器是DHT11传感器，通过声明常量：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After that, we can declare an instance of the DHT sensor:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们可以声明 DHT 传感器的实例：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the `setup()` function of the sketch, we will start the serial communications:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在草图的 `setup()` 函数中，我们将开始串行通信：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We will also initialize the DHT sensor:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将初始化 DHT 传感器：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the `loop()` function of the sketch, we will perform the temperature and
    humidity measurements from the sensor:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在草图中的 `loop()` 函数中，我们将从传感器执行温度和湿度测量：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We will also read out from the photocell, and convert this reading to a percentage
    of illumination. To do so, we must know that the analog input of the Arduino returns
    a value going from 0 to 1,023 (10 bits). Therefore, we need to divide the reading
    from the input by 1,023\. Then, to get a result in percent, we will multiply this
    value by 100:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将从光敏电阻读取数据，并将此读取值转换为照度百分比。为此，我们必须知道 Arduino 的模拟输入返回一个从 0 到 1,023（10 位）的值。因此，我们需要将输入的读取值除以
    1,023。然后，为了得到一个百分比结果，我们将此值乘以 100：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When the measurements are done, we print out the value of each of them on the
    serial port so that we can visualize the data. This is for example the code that
    prints out the temperature:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当测量完成后，我们将每个测量值打印到串行端口，以便我们可以可视化数据。例如，以下代码将打印温度：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We will also repeat each `loop()` function every 500 ms:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将每 500 毫秒重复每个 `loop()` 函数：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that all the code for this chapter can be found inside the GitHub repository
    of the book at [https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：所有本章的代码都可以在本书的 GitHub 仓库中找到，网址为 [https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints)。
- en: 'It''s now time to test this simple Arduino sketch to check if our sensors are
    working. Upload the sketch to the Arduino board, and open the serial monitor (making
    sure the serial speed is set to 9,600). You should get a similar result inside
    the serial monitor, depending on your surroundings:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候测试这个简单的 Arduino 草图，以检查我们的传感器是否正常工作。将草图上传到 Arduino 板，并打开串行监视器（确保串行速度设置为
    9,600）。根据你的环境，你应该在串行监视器中看到类似的结果：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Writing the Arduino sketch
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写 Arduino 草图
- en: 'Now that we know that our sensors are working correctly, we can write the final
    sketch that allows the Arduino board to be accessed by the Android application
    we will write later on. The following is the complete sketch for this part:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道我们的传感器工作正常，我们可以编写最终的草图，允许 Arduino 板被我们稍后将要编写的 Android 应用程序访问。以下是这一部分的完整草图：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, let''s look at this sketch in more detail. Some of the parts are similar
    to the sketch we saw earlier to test the sensor; we will not detail these parts
    again. It starts by declaring that we want to use the lightweight mode of the
    aREST library:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更详细地看看这个草图。其中一些部分与之前测试传感器的草图类似；我们不会再次详细说明这些部分。它首先声明我们想要使用 aREST 库的轻量级模式：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, we will define that we want to use the library for the Bluetooth chip,
    the aREST library, and the library for the DHT sensor:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将定义我们想要使用蓝牙芯片的库、aREST 库和 DHT 传感器的库：
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'After this, we will define the pins on which we connected the BLE module:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将定义连接 BLE 模块的引脚：
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We need to create an instance of the aREST library:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建 aREST 库的实例：
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We also need to create an instance of the BLE module:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要创建一个 BLE 模块的实例：
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Just before the `setup()` function of the sketch, we will declare the following
    three variables that contain the measurements coming from the sensor:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在草图中的 `setup()` 函数之前，我们将声明以下三个变量，这些变量包含来自传感器的测量值：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then, in the `setup()` function of the sketch, we will initialize the BLE module:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在草图的 `setup()` 函数中，我们将初始化 BLE 模块：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'After that, we will set an ID and a name for our project:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们将为我们的项目设置一个 ID 和名称：
- en: '[PRE19]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We also have to expose the different measurement variables to the aREST API
    so that they can be accessed by the Android app:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须将不同的测量变量暴露给 aREST API，以便 Android 应用程序可以访问它们：
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the `loop()` function of the sketch, we will poll the status of the BLE
    module:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在草图中的 `loop()` 函数中，我们将轮询 BLE 模块的状态：
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We will also get the state of the module and store it in a variable:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将获取模块的状态并将其存储在一个变量中：
- en: '[PRE22]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If this status indicates that the Bluetooth module is connected to another
    device, we will process the incoming request with the aREST library:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个状态指示蓝牙模块连接到另一个设备，我们将使用 aREST 库处理传入的请求：
- en: '[PRE23]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that all the code for this chapter can be found inside the GitHub repository
    of the book at [https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，本章的所有代码都可以在本书的GitHub仓库[https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints)中找到。
- en: It's now time to upload the sketch to your Arduino board. When this is done,
    you can move on to the development of the Android app to control the Arduino board
    via the BLE sketch.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候将草图上传到你的Arduino板上了。完成此操作后，你可以继续开发Android应用程序，通过BLE草图来控制Arduino板。
- en: Wireframing our Android application and modifying the layout files
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绘制我们的Android应用程序和修改布局文件
- en: We will start off our BLE weather station project by creating a new project
    in Android Studio with a blank activity.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开始我们的BLE气象站项目，通过在Android Studio中创建一个新的空白活动来启动项目。
- en: We will target our project for a minimum SDK of 18 and a maximum SDK of 19.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标项目将针对最低SDK版本18和最高SDK版本19。
- en: We will first start off by drawing a paper prototype of how our application
    will work and the basic user flow, as shown in the following image. This will
    help us understand how the application will work as well as facilitating our development
    process.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先绘制一个纸制原型，展示我们的应用程序如何工作以及基本用户流程，如下面的图像所示。这将帮助我们理解应用程序的工作方式，并促进我们的开发过程。
- en: '![Wireframing our Android application and modifying the layout files](img/0389OS_03_04.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![绘制我们的Android应用程序和修改布局文件](img/0389OS_03_04.jpg)'
- en: Upon analyzing the preceding image, we can see that this design will require
    two `TextView` objects. The upper `TextView` object will show all the Bluetooth
    callbacks, state changes, and characteristics written to the BLE module, while
    the lower `TextView` object will show the output from the temperature, light,
    and humidity sensor depending on which button was tapped.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 通过分析前面的图像，我们可以看到这个设计将需要两个`TextView`对象。上面的`TextView`对象将显示所有蓝牙回调、状态变化和写入BLE模块的特性，而下面的`TextView`对象将根据哪个按钮被点击显示温度、光线和湿度传感器的输出。
- en: 'The `TextView` objects will give them the following IDs:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`TextView`对象将被赋予以下ID：'
- en: '`connectionStatusView`'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connectionStatusView`'
- en: '`dataOutputTextView`'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dataOutputTextView`'
- en: 'In the lower part of the layout, we will have three buttons reflecting the
    three parameters that we will be requesting, that is, temperature, light, and
    humidity. We will name the buttons as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在布局的下半部分，我们将有三个按钮，反映我们将请求的三个参数，即温度、光线和湿度。我们将按钮命名为如下：
- en: 'The temperature button will be named as follows:'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 温度按钮将被命名为如下：
- en: '**Text**: `Temperature`'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Text**: `Temperature`'
- en: '**ID**: `temperatureButton`'
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ID**: `temperatureButton`'
- en: 'The humidity button will be named as follows:'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 湿度按钮将被命名为如下：
- en: '**Text**: `Humidity`'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Text**: `Humidity`'
- en: '**ID**: `humidityButton`'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ID**: `humidityButton`'
- en: 'The light button will be named as follows:'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 灯光按钮将被命名为如下：
- en: '**Text**: `Light`'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Text**: `Light`'
- en: '**ID**: `lightButton`'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ID**: `lightButton`'
- en: Implementing Android layouts in the main activity
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现主活动中的Android布局
- en: Before we embark on this project, we will enable the `Auto-Import` function,
    which will enable us to compile our project even more effectively and gives us
    one thing less to worry about.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始这个项目之前，我们将启用`Auto-Import`功能，这将使我们能够更有效地编译我们的项目，并减少我们需要担心的事情。
- en: 'You can enable `Auto-Import` by going to the **Preferences** option and selecting
    all the available options. The **Auto-Import** preferences are available on Mac
    and Windows as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过进入**首选项**选项并选择所有可用选项来启用`Auto-Import`。在Mac和Windows上，**Auto-Import**首选项如下：
- en: On a Mac, navigate to **Android Studio** > **Preferences** > **Editor** > **Auto-Import**
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Mac上，导航到**Android Studio** > **首选项** > **编辑器** > **Auto-Import**
- en: On Windows, navigate to **File** > **Settings** > **Editor** > **Auto-Import**
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows上，导航到**文件** > **设置** > **编辑器** > **Auto-Import**
- en: 'With all the necessary settings in place, we will first start off by creating
    a new project, where we will choose the following within the **New Project** setup:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有必要的设置就绪后，我们将首先创建一个新的项目，在**新建项目**设置中选择以下内容：
- en: '**Name**: `Bluetooth Weather Station`'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Name**: `Bluetooth Weather Station`'
- en: '**Minimum SDK**: `18`'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Minimum SDK**: `18`'
- en: '**Project**: `Blank Activity`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Project**: `Blank Activity`'
- en: '**Activity Name**: `MainActivity`'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Activity Name**: `MainActivity`'
- en: '**Domain**: `arduinoandroid.com`'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Domain**: `arduinoandroid.com`'
- en: We will build on our previous project in [Chapter 2](ch02.html "Chapter 2. Controlling
    an Arduino Board via Bluetooth"), *Controlling an Arduino Board via Bluetooth*,
    that is, the Arduino BLE Android project will start off by importing the `arduinoBLE`
    project from the Github repository and clone it to our desktop or download it
    as a ZIP file as explained in [Chapter 2](ch02.html "Chapter 2. Controlling an
    Arduino Board via Bluetooth"), *Controlling an Arduino Board via Bluetooth*.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在第2章[通过蓝牙控制Arduino板](ch02.html "第2章。通过蓝牙控制Arduino板")的“通过蓝牙控制Arduino板”项目基础上进行扩展，即Arduino
    BLE Android项目将首先从GitHub仓库导入`arduinoBLE`项目并将其克隆到我们的桌面或下载为ZIP文件，如第2章[通过蓝牙控制Arduino板](ch02.html
    "第2章。通过蓝牙控制Arduino板")中所述。
- en: Once imported, we will open `MainActivity.java`, select all the code below the
    `import` statement and copy it. When all the code has been copied, we will open
    our current project (Android Bluetooth Weather Station), go into `MainActivity.java`,
    delete all the code below the `import` statement, and paste the code.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦导入，我们将打开`MainActivity.java`，选择`import`语句下面的所有代码并复制。当所有代码都已复制后，我们将打开我们的当前项目（Android蓝牙气象站），进入`MainActivity.java`，删除`import`语句下面的所有代码，并粘贴代码。
- en: In case you get stuck at this stage of the project, our code will be available
    in the repository in two stages, the version with all the necessary code that
    needs to be modified and the completed project. These are all available in the
    GitHub repository at [https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在项目的这个阶段遇到困难，我们的代码将在仓库中以两个阶段提供，一个是包含所有需要修改的必要代码的版本，另一个是完成的项目。所有这些都可以在GitHub仓库[https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints)中找到。
- en: 'Once the code is in our project, we will proceed by changing references to
    the UI elements to reflect our latest additions to the Android layout file in
    the `onCreate()` method:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦代码在我们的项目中，我们将通过更改对UI元素的引用来反映我们在`onCreate()`方法中对Android布局文件的最新添加：
- en: '[PRE24]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In this project, we will modify `onClickListeners` to connect to the buttons
    that we have included in the Android layout file:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将修改`onClickListeners`以连接到我们在Android布局文件中包含的按钮：
- en: '[PRE25]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We will also modify the code that deals with writing `remoteCharacteristics`,
    namely, the `writeLine()` method, and in addition, we will add another method
    known as `writeSensorData()`, which will deal with the remote data arriving from
    our different sensors:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将修改处理写入`remoteCharacteristics`的代码，即`writeLine()`方法，此外，我们还将添加另一个名为`writeSensorData()`的方法，它将处理来自我们不同传感器的远程数据：
- en: '[PRE26]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Before we are able to move ahead with compiling the project, we need to work
    on the `onCharacteristicChanged` method so that the data that is received from
    the sensor data will be set to the `dataOutput` text view:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够继续编译项目之前，我们需要处理`onCharacteristicChanged`方法，以便从传感器数据接收到的数据将被设置为`dataOutput`文本视图：
- en: '[PRE27]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'At this point in time, the project will be unable to function as the necessary
    permissions have not been implemented yet. User permissions are necessary as it
    allows the application to access different capabilities of the device. In this
    case, we will need to add the following two permissions within the `AndroidManifest.xml`
    file, which you will find by navigating to `app` > `src` > `main` > `AndroidManifest.xml`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前这个时间点，项目将无法正常运作，因为必要的权限尚未实施。用户权限是必要的，因为它允许应用程序访问设备的各种功能。在这种情况下，我们需要在`AndroidManifest.xml`文件中添加以下两个权限，您可以通过导航到`app`
    > `src` > `main` > `AndroidManifest.xml`来找到该文件：
- en: '[PRE28]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'When we perform all these changes, we should expect the rudimentary user interface
    to look as follows, with the sensor data showing up after tapping on the different
    parameters:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们完成所有这些更改时，我们应该期望基本用户界面看起来如下，传感器数据将在点击不同参数后显示：
- en: '![Implementing Android layouts in the main activity](img/0389OS_03_05.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![在主活动中实现Android布局](img/0389OS_03_05.jpg)'
- en: Enhancing the user interface
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提升用户界面
- en: The current user interface requires further enhancements to make it user friendly.
    One can easily notice that the sensor data output needs to be enlarged and centered
    and the buttons can definitely be more attractive. Also, we want to make sure
    that our Weather Station app stands out from the user's current list of apps,
    so our app would definitely benefit from a change in the icon.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 当前用户界面需要进一步改进以使其更友好。人们很容易注意到传感器数据输出需要放大并居中，按钮肯定可以更吸引人。此外，我们想要确保我们的气象站应用在用户当前的应用列表中脱颖而出，因此我们的应用肯定将从图标的变化中受益。
- en: 'We will work on the following main tasks:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将专注于以下主要任务：
- en: Creating and adding our very own Android app icon
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建并添加我们自己的Android应用图标
- en: Centering and enlarging the data output text
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 居中并放大数据输出文本
- en: Modifying the buttons and adding some color to our text
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改按钮并给我们的文本添加一些颜色
- en: Creating and adding our very own app icon
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建并添加我们自己的应用图标
- en: One of our very first steps to enhance the user experience is to have our very
    own icon.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们增强用户体验的第一步之一就是拥有我们自己的图标。
- en: First, we will start off by downloading the image asset. This is available publicly
    at [http://bit.ly/chapter3-iclauncher](http://bit.ly/chapter3-iclauncher).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将开始下载图像资产。这个资产可以在[http://bit.ly/chapter3-iclauncher](http://bit.ly/chapter3-iclauncher)公开获取。
- en: 'You should navigate using the project tree, followed by a right-click on `app`,
    as shown in the following screenshot:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 您应使用项目树进行导航，然后在`app`上右键单击，如下截图所示：
- en: '![Creating and adding our very own app icon](img/0389OS_03_06.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![创建并添加我们自己的应用图标](img/0389OS_03_06.jpg)'
- en: 'After you right-click on `app`, create a new image asset by going to **New**
    > **Image Asset**, as shown in the following screenshot:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在您右键单击`app`后，通过转到**新建** > **图像资产**来创建一个新的图像资产，如下截图所示：
- en: '![Creating and adding our very own app icon](img/0389OS_03_07.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![创建并添加我们自己的应用图标](img/0389OS_03_07.jpg)'
- en: 'You will then be shown an **Asset Studio** pop-up window, which will allow
    you to choose your very own image file. For optimization purposes, we recommend
    going for a `.png` file with a resolution of 144 pixels by 144 pixels. Android
    Studio automatically does all the resizing and resource creation to adapt your
    graphic to different screens, as shown in the following screenshot:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到一个**资产工作室**弹出窗口，它允许您选择您自己的图像文件。出于优化目的，我们建议选择分辨率为144像素×144像素的`.png`文件。Android
    Studio会自动进行所有调整大小和资源创建，以适应不同的屏幕，如下截图所示：
- en: '![Creating and adding our very own app icon](img/0389OS_03_08.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![创建并添加我们自己的应用图标](img/0389OS_03_08.jpg)'
- en: 'Once you choose the `ic_launcher` image file, which we have provided you with,
    you will be shown a screen with the icon in different sizes. Click on **Next**,
    where you will see the following screen:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您选择了我们提供的`ic_launcher`图像文件，您将看到一个显示图标在不同尺寸的屏幕。点击**下一步**，您将看到以下屏幕：
- en: '![Creating and adding our very own app icon](img/0389OS_03_09.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![创建并添加我们自己的应用图标](img/0389OS_03_09.jpg)'
- en: 'The preceding screen warns you that previous files will be overwritten and
    shows you the image launcher file in a number of different resolutions once again.
    Click on **Finish**, then compile the app, launch it on your physical device,
    and you should see something as pleasant as the following in your app tray and
    in the app''s action bar:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个屏幕警告您之前的文件将被覆盖，并再次向您展示不同分辨率的图像启动器文件。点击**完成**，然后编译应用，在您的物理设备上启动它，您应该在应用托盘和应用的操作栏中看到如下所示的东西：
- en: '![Creating and adding our very own app icon](img/0389OS_03_10.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![创建并添加我们自己的应用图标](img/0389OS_03_10.jpg)'
- en: 'Here''s what the app''s action bar will look like:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这是应用的操作栏将看起来像：
- en: '![Creating and adding our very own app icon](img/0389OS_03_11.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![创建并添加我们自己的应用图标](img/0389OS_03_11.jpg)'
- en: Centering and enlarging the data output text
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 居中并放大数据输出文本
- en: In order to edit the layout for the main text output where the sensor data will
    be shown, we will need to open the project tree and navigate towards the layout
    file, which is available at `app` > `src` > `main` > `res` > `layout` > `activity_main_screen.xml`.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 为了编辑显示传感器数据的主文本布局，我们需要打开项目树并导航到布局文件，该文件位于`app` > `src` > `main` > `res` > `layout`
    > `activity_main_screen.xml`。
- en: Once in this view, we recommend that you modify the text using the text view.
    This will allow you finer control and will also get you used to the different
    conventions used when editing Android layout files programmatically.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦进入这种视图，我们建议您使用文本视图修改文本。这将使您获得更精细的控制，并且也会让您习惯于在编程编辑Android布局文件时使用的不同约定。
- en: 'When opening the `activity_main_screen.xml` file, we will be seeing the different
    XML codes for the buttons and text views. At this point, look out for the code
    that takes care of the `Sensor Data Output` TextView and add the following code:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 当打开`activity_main_screen.xml`文件时，我们将看到按钮和文本视图的不同XML代码。在此阶段，请注意负责`Sensor Data
    Output` TextView的代码，并添加以下代码：
- en: '[PRE29]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The whole block of code responsible for the `Sensor Data Output` TextView will
    now look as follows:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 负责显示`Sensor Data Output` TextView的整个代码块现在如下所示：
- en: '[PRE30]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In this block of code, we have temporarily used the placeholder text `99` so
    that we can approximate how it will look with the Android layout designer. With
    this modification, the sensor data output is now big enough to be seen by the
    user, thus enhancing the user experience.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码块中，我们暂时使用了占位文本`99`，以便我们可以近似地看到它使用Android布局设计器时的样子。通过这次修改，传感器数据输出现在足够大，用户可以看得到，从而提升了用户体验。
- en: Modifying the buttons and adding some color to our text
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改按钮并添加一些颜色到我们的文本
- en: 'Finally, we will modify our buttons and add some color to the text by performing
    the following steps:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将通过以下步骤修改我们的按钮并为文本添加一些颜色：
- en: 'We will follow these two steps to create new buttons:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将遵循以下两个步骤来创建新的按钮：
- en: Create a `drawable` folder with a new XML drawable file known as `buttonshape.xml`.
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`buttonshape.xml`的新XML可绘制文件，并将其放入一个名为`drawable`的文件夹中。
- en: We will then connect the drawable resource file to the main Android layout file.
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将接着将可绘制资源文件连接到主Android布局文件。
- en: Create the `drawable` folder by right-clicking on the `res` folder, which is
    available by navigating to `App` > `src` > `main` > `res`.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`res`文件夹上右键单击，创建`drawable`文件夹，该文件夹可通过导航到`App` > `src` > `main` > `res`找到。
- en: After creating the `drawable` folder within the `res` folder, we need to once
    again right-click on the new `drawable` folder and click on **New** and choose
    **Drawable resource file**, as shown in the following screenshot:![Modifying the
    buttons and adding some color to our text](img/0389OS_03_12.jpg)
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`res`文件夹内创建`drawable`文件夹后，我们需要再次右键单击新的`drawable`文件夹，点击**新建**并选择**可绘制资源文件**，如图所示：![修改按钮并添加一些颜色到我们的文本](img/0389OS_03_12.jpg)
- en: Name the file `buttonshape` and type down `shape` as the **Root element** followed
    by clicking on **OK**, as shown in the following screenshot:![Modifying the buttons
    and adding some color to our text](img/0389OS_03_13.jpg)
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件命名为`buttonshape`，输入`shape`作为**根元素**，然后点击**确定**，如图所示：![修改按钮并添加一些颜色到我们的文本](img/0389OS_03_13.jpg)
- en: 'Within the `buttonshape.xml` file, we will add the following code:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`buttonshape.xml`文件中，我们将添加以下代码：
- en: '[PRE31]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then, we go towards the `activity_main_screen.xml` file and refer to this drawable
    by including the following line of code within the button modules:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们转向`activity_main_screen.xml`文件，并在按钮模块中包含以下代码来引用这个可绘制资源：
- en: '[PRE32]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We will also add some flavor by adding the following line of code to the button
    and TextView modules within the `activity_main_screen.xml` file:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还将在`activity_main_screen.xml`文件中的按钮和TextView模块中添加以下代码行，以增加一些趣味性：
- en: '[PRE33]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In the preceding code, `#4A90E2` refers to the hex code of the main color used
    in the app icon so that we maintain some consistency with the main user interface.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`#4A90E2`指的是应用图标中使用的主体颜色的十六进制代码，以便我们保持与主要用户界面的某种一致性。
- en: 'The final layout will look as follows on a Nexus 5 smartphone:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 最终布局在Nexus 5智能手机上看起来如下所示：
- en: '![Modifying the buttons and adding some color to our text](img/0389OS_03_14.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![修改按钮并添加一些颜色到我们的文本](img/0389OS_03_14.jpg)'
- en: It's important to note that different Android devices have different dimensions.
    So, for your specific Android device, you might need to do further optimizations
    within the Android layout files to improve the interface.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，不同的Android设备有不同的尺寸。因此，对于您的特定Android设备，您可能需要在Android布局文件中进行进一步的优化，以改善界面。
- en: How to go further
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何进一步操作
- en: A large number of improvements could be done towards improving the user interface
    process within the Android app. Currently, service discovery is refreshed only
    by physically rotating the device, as the `onResume()` method is called upon rotation
    of the device. This could easily be improved by adding a refresh icon in the action
    bar and connecting this icon to the code, so that this method is called when the
    icon is tapped.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android 应用程序中，针对改进用户界面流程可以做出大量的改进。目前，服务发现仅通过物理旋转设备来刷新，因为设备旋转时会调用 `onResume()`
    方法。这可以通过在操作栏中添加一个刷新图标并将其连接到代码来轻松改进，这样当图标被点击时就会调用此方法。
- en: 'In addition, further user interface customizations can make it possible to
    personalize the app to your own liking; with regards to this app, you can get
    an idea of the possibilities by looking at the following links from the Android
    developers site:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，进一步的用户界面定制可以使应用程序个性化，以便符合您的喜好；关于这个应用程序，您可以通过查看以下来自 Android 开发者网站的链接来了解可能性：
- en: Button widget documentation at [http://developer.android.com/reference/android/widget/Button.html](http://developer.android.com/reference/android/widget/Button.html)
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Button 小部件文档在 [http://developer.android.com/reference/android/widget/Button.html](http://developer.android.com/reference/android/widget/Button.html)
- en: TextView documentation at [http://developer.android.com/reference/android/widget/TextView.html](http://developer.android.com/reference/android/widget/TextView.html)
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TextView 文档在 [http://developer.android.com/reference/android/widget/TextView.html](http://developer.android.com/reference/android/widget/TextView.html)
- en: You can even expand the app further with real-time monitoring, statistics, and
    trends.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 您甚至可以通过实时监控、统计和趋势进一步扩展应用程序。
- en: Summary
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we built a simple weather station using Arduino and Android.
    We attached several sensors to our Arduino board, along with a Bluetooth Low Energy
    module. We also built the corresponding Android app so that we can access all
    the data measured by the Arduino board just by tapping on a button of the phone.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用 Arduino 和 Android 构建了一个简单的气象站。我们将多个传感器连接到我们的 Arduino 板上，以及一个低功耗蓝牙模块。我们还构建了相应的
    Android 应用程序，这样我们只需点击手机的按钮即可访问 Arduino 板上测量的所有数据。
- en: 'In the next chapter, we will use a different technology to interact with an
    Arduino board via Android: Wi-Fi. We will build a smart power switch, to control
    an electrical device remotely, and also to measure the device power consumption
    via Wi-Fi.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用不同的技术通过 Android 与 Arduino 板进行交互：Wi-Fi。我们将构建一个智能电源开关，用于远程控制电器，并通过
    Wi-Fi 测量电器的功耗。
