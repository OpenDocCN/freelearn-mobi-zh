- en: Chapter 7. Learning About Loops with a Raffle App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章. 使用抽奖应用学习循环
- en: In the previous chapters, you used the `if-then-else` control block several
    times. The **if then else** block enables apps to make decisions. It is one of
    the fundamental computing concepts that is present in any programming language.
    There is a second fundamental programming concept—the **loop**, which we will
    explore in this chapter. A loop allows a program to repeat code. More specifically,
    in App Inventor, a loop will let us execute a stack of blocks multiple times.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，你多次使用了`if-then-else`控制块。**if then else**块使应用能够做出决策。这是任何编程语言中都存在的根本计算概念之一。还有一个第二个根本的编程概念——**循环**，我们将在本章中探讨。循环允许程序重复代码。更具体地说，在App
    Inventor中，一个循环将允许我们多次执行一系列的代码块。
- en: To illustrate the concept of a loop, we will create a digital raffle App in
    this chapter. In case you aren't familiar with a regular (nondigital) raffle,
    we will explain. A raffle organizer gives participants a ticket with a number
    on it and puts a duplicate of that ticket in a bowl. When all the tickets have
    been given out (and put in the bowl), the raffle organizer then randomly picks
    a ticket out of the bowl (often times with a blindfold on) and announces the winning
    ticket number. The participant with the matching ticket number then claims a prize.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明循环的概念，我们将在本章中创建一个数字抽奖应用。如果你不熟悉传统的（非数字）抽奖，我们将解释。抽奖组织者给参与者一张带有数字的票，并将该票的副本放入碗中。当所有票都已发放（并放入碗中）后，抽奖组织者然后从碗中随机抽取一张票（通常戴着眼罩）并宣布中奖票号。持有匹配票号的参与者随后领取奖品。
- en: Creating a digital raffle app using App Inventor is not a new idea. Others have
    created similar apps before. For example, [http://www.appinventor.org/content/howDoYou/RecordingInfo/phone](http://www.appinventor.org/content/howDoYou/RecordingInfo/phone)
    shows how to create a very simple digital raffle app. We will extend this idea
    and create a more versatile digital raffle app. For our digital Raffle App, participants
    send a text message with a specific code to the raffle organizer. The raffle organizer
    runs the app on his or her phone, which keeps track of all the participants' incoming
    text messages and phone numbers and selects a random winner. Then, the app notifies
    the winner that she or he has won and notifies the rest of the participants that
    they did not win. This is a fun participatory game for a party, event, or a meeting
    break.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用App Inventor创建数字抽奖应用并不是一个新想法。其他人之前已经创建了类似的程序。例如，[http://www.appinventor.org/content/howDoYou/RecordingInfo/phone](http://www.appinventor.org/content/howDoYou/RecordingInfo/phone)展示了如何创建一个非常简单的数字抽奖应用。我们将扩展这个想法并创建一个更通用的数字抽奖应用。对于我们的数字抽奖应用，参与者将带有特定代码的短信发送给抽奖组织者。抽奖组织者在其手机上运行该应用，该应用跟踪所有参与者的
    incoming 短信和电话号码，并选择一个随机获胜者。然后，应用通知获胜者她或他已经中奖，并通知其他参与者他们没有中奖。这是一个适合聚会、活动或会议休息时间的有趣参与游戏。
- en: 'In this chapter, you will learn how to do the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习以下内容：
- en: Create a user interface for the Raffle App
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为抽奖应用创建用户界面
- en: Create and initialize a list and a variable
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建并初始化一个列表和一个变量
- en: Use a texting component to send/receive text messages
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用短信组件发送/接收短信
- en: Add items to a list
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向列表中添加项目
- en: Select a random winner
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择一个随机获胜者
- en: Notify the winner that he or she has won
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通知获胜者他或她已中奖
- en: Use a loop to send the same notification e-mail to all the participants who
    did not win
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用循环向所有未中奖的参与者发送相同的通知电子邮件
- en: Clear out the list and the variable
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清除列表和变量
- en: Creating the project and building the GUI
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建项目和构建GUI
- en: 'In preparation of using the Raffle App, the raffle organizer will give two
    pieces of information to everyone who wishes to participate in the raffle: the
    organizer''s phone number and a code. The raffle organizer can distribute this
    information by either sharing them verbally or writing then down for everyone
    to see. The participants will then send a text message to the raffle organizer''s
    phone number with the code typed in the body of the text message. When the app
    (running on the raffle organizer''s phone) receives all of the text messages containing
    the code, it will save the all the senders'' phone numbers in a list. Then, the
    raffle organizer will click on a button to randomly select a winner from the list
    of phone numbers. The winning phone number will be displayed on the raffle organizer''s
    phone screen, and the app will also send a text message notification to the winner''s
    phone indicating that he or she has won. Meanwhile, the app will notify the rest
    of the participants that they did not win.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在准备使用抽奖应用之前，抽奖组织者将向所有希望参加抽奖的人提供两份信息：组织者的电话号码和一个代码。抽奖组织者可以通过口头分享或写下这些信息供所有人看到来分发这些信息。参与者然后将带有代码的短信发送到抽奖组织者的电话号码。当应用（在抽奖组织者的手机上运行）接收到包含代码的所有短信时，它将把所有发送者的电话号码保存在列表中。然后，抽奖组织者将点击一个按钮，从电话号码列表中随机选择一个获胜者。获胜的电话号码将显示在抽奖组织者的手机屏幕上，应用还将向获胜者的手机发送一条短信通知，表明他们已经获胜。同时，应用将通知其他参与者他们没有获胜。
- en: Creating a new project
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建新项目
- en: You will start by creating a new project. At this point, this step will probably
    be very familiar to you as you have already done this several times in the previous
    chapters. As shown in the following screenshot, click on the **Start new project**
    button after logging into App Inventor. Then, in the following pop-up message
    box, give an appropriate name for this app. We will use the name `Digital_Raffle`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您将首先创建一个新项目。在这个阶段，这个步骤可能对您来说非常熟悉，因为您已经在之前的章节中做过几次了。如下面的截图所示，在登录 App Inventor
    后，点击**开始新项目**按钮。然后，在随后的弹出消息框中，为这个应用提供一个合适的名称。我们将使用名称 `Digital_Raffle`。
- en: '![Creating a new project](img/00206.jpeg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![创建新项目](img/00206.jpeg)'
- en: Creating the User Interface (UI)
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建用户界面 (UI)
- en: 'Now that we have created a new project, it is time to add the first component
    that we will use, a Label. The raffle organizer will create a code to share with
    all the participants. Since the raffle organizer may conduct several raffles,
    we will use a label to display the code on the organizer''s phone. For this app,
    we chose the code: **I want to win**. We will program the app to compare this
    code, **I want to win**, to any text message that the raffle organizer''s phone
    receives. If it is a match, the app will save the associated phone number into
    a list. As shown in the following screenshot, drag a **Label** from the **User
    Interface** Palette drawer onto the **Viewer**:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了一个新的项目，是时候添加我们将要使用的第一个组件了，一个标签。抽奖组织者将创建一个代码，与所有参与者分享。由于抽奖组织者可能要举办多次抽奖，我们将使用一个标签来在组织者的手机上显示代码。对于这个应用，我们选择了代码：**我想赢**。我们将编程这个应用来比较这个代码，**我想赢**，与抽奖组织者手机接收到的任何短信文本。如果匹配，应用将把相关的电话号码保存到列表中。如下面的截图所示，从**用户界面**调色板抽屉中拖动一个**标签**到**查看器**：
- en: '![Creating the User Interface (UI)](img/00207.jpeg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![创建用户界面 (UI)](img/00207.jpeg)'
- en: At this time, we would like to reiterate the importance of naming components
    appropriately. Proper naming helps programmers when they are creating behavior
    in the Blocks editor. Additionally, appropriate names make it easier to understand
    the logic of the code. Lastly, should you decide to extend this app six months
    after first creating it, aptly named components will help you remember the purpose
    of each component.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在此阶段，我们想再次强调适当地命名组件的重要性。合适的命名有助于程序员在 Blocks 编辑器中创建行为时。此外，合适的名称使理解代码的逻辑更加容易。最后，如果您在首次创建此应用六个月后决定扩展它，恰当地命名的组件将帮助您记住每个组件的目的。
- en: Given that, rename **Label1** as `CodeLabel`. To rename **Label1**, select **Label1**
    in the **Components** column. Recall that selecting a component will make its
    background green on the screen, which indicates that it is active. Then, click
    on the **Rename** button at the bottom of the panel. In the pop-up window, enter
    the new name.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 既然如此，将**Label1**重命名为`CodeLabel`。要重命名**Label1**，在**组件**列中选择**Label1**。回想一下，选择一个组件将在屏幕上将其背景变为绿色，这表示它处于活动状态。然后，单击面板底部的**重命名**按钮。在弹出的窗口中，输入新名称。
- en: We will use this label to display the code (text) **I want to win**. Enter **I
    want to win** (without the quotes) in the **Text** property box. To make the code
    easily visible, we make the **FontSize** property `45`. Finally, set **Width**
    of this label to **Fill parent**.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用此标签来显示代码（文本）**I want to win**。在**文本**属性框中输入**I want to win**（不带引号）。为了使代码易于查看，我们将**字体大小**属性设置为`45`。最后，将此标签的**宽度**设置为**填充父级**。
- en: '![Creating the User Interface (UI)](img/00208.jpeg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![创建用户界面 (UI)](img/00208.jpeg)'
- en: 'Next, we will add a button right below **CodeLabel**. This is the button that
    the raffle organizer will click on to select a winner. Drag a **Button** from
    the **User Interface** palette onto the **Viewer**, as shown in the following
    screenshot:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在**CodeLabel**下方添加一个按钮。这是抽奖组织者将点击以选择获胜者的按钮。如图所示，从**用户界面**调色板中将**Button**拖放到**Viewer**上：
- en: '![Creating the User Interface (UI)](img/00209.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![创建用户界面 (UI)](img/00209.jpeg)'
- en: Rename **Button1** to `WinnerButton`. By default, the **Text** property of the
    button shows **Text for Button1**. Change the **Text** property to something more
    informative by clicking in the text box and typing **Pick Winner**. Also, change
    the **Width** property to **Fill parent** so that the button is of the same width
    as the label above it.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 将**Button1**重命名为`WinnerButton`。默认情况下，按钮的**文本**属性显示为**Button1的文本**。通过在文本框中单击并输入**Pick
    Winner**来更改**文本**属性，使其更具信息性。同时，将**宽度**属性更改为**填充父级**，以便按钮的宽度与上面的标签相同。
- en: '![Creating the User Interface (UI)](img/00210.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![创建用户界面 (UI)](img/00210.jpeg)'
- en: After adding CodeLabel and WinnerButton, add a third component, another label,
    to display the phone number of the winner. Just like the **CodeLabel**, Drag another
    **Label** below WinnerButton and rename it, `WinnerLabel`. Since we will only
    use this label after a winner is selected, thus delete everything under the **Text**
    property, so that **WinnerLabel** does not show anything. To have a consistent
    look, set the **Width** property to **Fill parent**.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加CodeLabel和WinnerButton后，添加第三个组件，另一个标签，用于显示获胜者的电话号码。就像**CodeLabel**一样，将另一个**Label**拖放到WinnerButton下方，并将其重命名为`WinnerLabel`。由于我们将在选择获胜者后使用此标签，因此删除**文本**属性下的所有内容，以便**WinnerLabel**不显示任何内容。为了保持一致的外观，将**宽度**属性设置为**填充父级**。
- en: 'Finally, set the **FontSize** property to `35` so that the winner''s phone
    number when displayed is not too small. The following screenshot shows the app
    after **WinnerLabel** is added and configured:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将**字体大小**属性设置为`35`，以便显示的获胜者电话号码不会太小。以下截图显示了添加并配置了**WinnerLabel**的应用程序：
- en: '![Creating the User Interface (UI)](img/00211.jpeg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![创建用户界面 (UI)](img/00211.jpeg)'
- en: 'Since the Raffle app might be used many times, we need to have a mechanism
    to reset the app. For this purpose, add one more button below **WinnerLabel**.
    Rename it `ClearButton`, change the **Width** property of the button to **Fill
    parent**, and finally, change the **Text** property to `Clear`, as shown in the
    following screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 由于抽奖应用可能会被多次使用，我们需要有一个重置应用的方法。为此，在**WinnerLabel**下方添加一个额外的按钮。将其重命名为`ClearButton`，将按钮的**宽度**属性更改为**填充父级**，最后将**文本**属性更改为`Clear`，如以下截图所示：
- en: '![Creating the User Interface (UI)](img/00212.jpeg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![创建用户界面 (UI)](img/00212.jpeg)'
- en: Next, we need some way for the app to send and receive text messages. For this,
    use the **Texting** component. You will find the **Texting** component in the
    **Social** Palette drawer. Drag the **Texting** Component onto the **Viewer**.
    As shown in the following image, the **Texting** component is a **Non-visible
    component** and is housed below the Viewer. We do not need to set any properties
    for this component.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要一种方法让应用发送和接收文本消息。为此，使用**Texting**组件。您将在**社交**调色板抽屉中找到**Texting**组件。将**Texting**组件拖放到**Viewer**上。如图所示，**Texting**组件是一个**不可见组件**，位于Viewer下方。我们不需要为此组件设置任何属性。
- en: '![Creating the User Interface (UI)](img/00213.jpeg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![创建用户界面 (UI)](img/00213.jpeg)'
- en: This completes the GUI of the Raffle app. In the next section, we will program
    the behavior of the app in Blocks editor.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了抽奖应用的GUI。在下一节中，我们将使用Blocks编辑器编程应用的行为。
- en: Programming the behavior of the Digital Raffle app
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编程数字抽奖应用的行为
- en: To summarize, when the app receives text messages from participants, if a text
    message contains the indicated code (in this case, **I want to win**) in the body
    of the message, then the sender's phone number is added to a list. When the raffle
    organizer clicks the WinnerButton, the app will randomly select a winner from
    that list of phone numbers. Then, the app will send the winner a text message
    notifying him or her of the win. The app will also send text messages to all the
    other participants letting them know that they did not win.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，当应用收到参与者的短信时，如果短信正文包含指示的代码（在这种情况下，**I want to win**），则发送者的电话号码将被添加到列表中。当抽奖组织者点击WinnerButton时，应用将从该电话号码列表中随机选择一个赢家。然后，应用将向赢家发送一条短信，通知他们获胜。应用还将向所有其他参与者发送短信，让他们知道他们没有获胜。
- en: 'We will achieve all of this by completing the following substeps:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过完成以下子步骤来实现所有这些：
- en: Create and initialize a list and a variable
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和初始化列表和变量
- en: Receive text messages, and if the code matches, add the sender's number to the
    list
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接收短信，如果代码匹配，则将发送者的号码添加到列表中
- en: Select a random item from the list (winner)
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从列表中随机选择一个项目（赢家）
- en: Send a winner notification
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送赢家通知
- en: Send other participants a notification letting them know that they did not win
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向其他参与者发送通知，让他们知道他们没有获胜
- en: Creating and initializing the variable and list
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建和初始化变量和列表
- en: For this app, we will need a list to store all the participant's phone numbers.
    And we will also use a variable to temporarily store the winning number. To create
    the list and the variable, go to the **Variables** blocks panel and drag the topmost
    block **initialize global name** to as shown in the following screenshot. Do this
    twice.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个应用，我们需要一个列表来存储所有参与者的电话号码。我们还将使用一个变量来临时存储获胜号码。要创建列表和变量，请转到**Variables**块面板，并将最顶部的块**initialize
    global name**拖动到如下截图所示的位置。这样做两次。
- en: '![Creating and initializing the variable and list](img/00214.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![创建和初始化变量和列表](img/00214.jpeg)'
- en: 'Double-click on "**name**" inside both the blocks and type in new names, **ListOfNumbers**
    for the list and **WinningNumber** for the variable, as shown in the following
    screenshot:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 双击两个块中的“**name**”，并输入新名称，列表为**ListOfNumbers**，变量为**WinningNumber**，如下截图所示：
- en: '![Creating and initializing the variable and list](img/00215.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![创建和初始化变量和列表](img/00215.jpeg)'
- en: 'Whenever you (as a programmer) create a list or variable, you need to initialize
    it with an initial value. For our list, we want to start out with an empty list.
    App Inventor makes this easy. In the **Lists** blocks, select the **create empty
    list** block, as shown in the following screenshot, and connect it to the **initialize
    global ListOfNumbers to** block:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 每次你（作为程序员）创建一个列表或变量时，都需要用初始值对其进行初始化。对于我们的列表，我们希望从一个空列表开始。App Inventor使这变得很容易。在**Lists**块中，选择**create
    empty list**块，如下截图所示，并将其连接到**initialize global ListOfNumbers to**块：
- en: '![Creating and initializing the variable and list](img/00216.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![创建和初始化变量和列表](img/00216.jpeg)'
- en: 'For the **WinningNumber** variable, we will initialize it to be `0`. In the
    **Math** blocks, select the **0** block (shown in the following screenshot) and
    connect it to the **initialize global WinningNumber to** block:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 对于**WinningNumber**变量，我们将将其初始化为`0`。在**Math**块中，选择**0**块（如下截图所示）并将其连接到**initialize
    global WinningNumber to**块：
- en: '![Creating and initializing the variable and list](img/00217.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![创建和初始化变量和列表](img/00217.jpeg)'
- en: 'After completing these steps, the initialization blocks for the list and the
    variable will look like the following screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，列表和变量的初始化块将看起来像以下截图：
- en: '![Creating and initializing the variable and list](img/00218.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![创建和初始化变量和列表](img/00218.jpeg)'
- en: Receiving text messages from participants
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接收参与者的短信
- en: In this section, you will learn how to receive text messages from participants
    and store their numbers in a list.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将学习如何接收参与者的短信并将他们的电话号码存储在列表中。
- en: We added the nonvisible Texting1 component in the Designer tab when we created
    the UI. We will use this component to send and receive text messages. As shown
    in the following screenshot, this component has a single gold event block, when
    Texting1.MessageReceived. Whenever the raffle organizer's device receives any
    text message, this event will get triggered.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建UI时，我们在设计标签中添加了不可见的Texting1组件。我们将使用此组件来发送和接收短信。如图所示，此组件有一个单独的金色事件块，当Texting1.MessageReceived时。每当抽奖组织者的设备收到任何短信时，此事件将被触发。
- en: Click on the **when Texting1.MessageReceived** event block to add it to the
    **Viewer**. As shown in the following screenshot, this event has two associated
    variables—**number** and **messageText**. Whenever a text message is received
    and this event is triggered, the **number** variable contains the sender's phone
    number and **messageText** contains the content of the message.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**when Texting1.MessageReceived**事件块，将其添加到**查看器**中。如图所示，此事件有两个相关变量——**number**和**messageText**。每当收到短信并触发此事件时，**number**变量包含发送者的电话号码，而**messageText**包含短信的内容。
- en: Note
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When you want to store some data, you can create global variables. In previous
    steps, we explicitly created our own global variables called **ListOfNumbers**
    and **WinningNumber** and initialized them. Once you create a global variable,
    any block in your app can use that variable.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想存储一些数据时，你可以创建全局变量。在之前的步骤中，我们明确创建了名为**ListOfNumbers**和**WinningNumber**的自己的全局变量，并初始化了它们。一旦创建了一个全局变量，应用程序中的任何块都可以使用该变量。
- en: On the other hand, when an app is running, various events might also need to
    temporarily store data and hence, may need a variable. These variables, which
    are built into blocks, are called local variables. They appear in a block and
    can be accessed by hovering over them with a mouse. Their existence is limited
    to a particular event. Other blocks of the app cannot use them. In fact, if you
    try to use a variable outside the event block that they are a part of, you will
    get an error message. Examples of local variables are **number** and **messageText**;
    they are associated specifically with the block, **when Texting1.MessageReceived**.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，当应用程序运行时，各种事件可能也需要暂时存储数据，因此可能需要一个变量。这些内置在块中的变量被称为局部变量。它们出现在一个块中，可以通过鼠标悬停来访问。它们的生存期限于特定的事件。应用程序的其他块不能使用它们。实际上，如果你尝试在它们所属的事件块之外使用变量，你会得到一个错误消息。局部变量的例子是**number**和**messageText**；它们与特定的块**when
    Texting1.MessageReceived**相关联。
- en: Thus, the **number** and **messageText** variables store important data related
    to the **when Texting1.MessageReceived** event block. Whenever a text message
    is received, this event is triggered and the information related to the text message
    (the sender's number and the message text) is placed into these two variables
    and can be used by the blocks within that event.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，**number**和**messageText**变量存储与**when Texting1.MessageReceived**事件块相关的关键数据。每当收到短信时，此事件将被触发，与短信相关的信息（发送者的电话号码和短信内容）将被放入这两个变量中，并可以被该事件内的块使用。
- en: '![Receiving text messages from participants](img/00219.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![从参与者接收短信](img/00219.jpeg)'
- en: Since the raffle organizer's phone can receive text messages unrelated to the
    raffle at the same time that it receives raffle text messages, we want to filter
    out the raffle related text messages. This is the main reason we include the code
    (**I want to win**) in our design, to filter out raffle related text messages.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 由于抽奖组织者的手机可以在收到抽奖短信的同时收到与抽奖无关的短信，我们希望过滤掉与抽奖相关的短信。这是我们设计代码（**我想赢**）的主要原因，以过滤掉与抽奖相关的短信。
- en: Recall that the **messageText** variable associated with the **when Texting1.MessageReceived**
    event contains the text of the message. So, once a text message is received, we
    want the app to check whether the **messageText** variable matches **I want to
    win** or not. Can you think of what type of block we would use to determine whether
    or not the code matches?
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，与**when Texting1.MessageReceived**事件相关的**messageText**变量包含短信的文本。因此，一旦收到短信，我们希望应用程序检查**messageText**变量是否匹配**我想赢**。你能想到我们会用什么类型的块来确定代码是否匹配吗？
- en: 'If you thought of an **if then** block, you are right! Do you recall where
    to find it? Select an **if then** block and connect it to the **when Texting1.MessageReceived**
    event. As you already know, we need to plug in a condition block into the `if`
    socket. In this case, we want to match two texts. App Inventor makes this easy.
    As shown in the following screenshot, in the **Text** blocks, select and connect
    the **compare texts** block to the empty **if** socket:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想到了**if then**块，你是正确的！你记得在哪里找到它吗？选择一个**if then**块并将其连接到**when Texting1.MessageReceived**事件。如你所知，我们需要将一个条件块插入到`if`插槽中。在这种情况下，我们想要匹配两个文本。App
    Inventor使这变得容易。如下面的截图所示，在**Text**块中，选择并连接**compare texts**块到空的**if**插槽：
- en: '![Receiving text messages from participants](img/00220.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![从参与者接收短信](img/00220.jpeg)'
- en: 'Since we want to check whether the two texts match, click on the downward pointing
    triangle next to the less-than sign and select the equals sign, as shown in the
    following screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们想要检查两条短信是否匹配，请点击小于符号旁边的向下箭头并选择等于符号，如下面的截图所示：
- en: '![Receiving text messages from participants](img/00221.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![从参与者接收短信](img/00221.jpeg)'
- en: 'Hover the mouse pointer over the light orange **messageText** variable in the
    event block. This will trigger a pop-up window, as shown in the following screenshot.
    Select the **getMessageText** block and place it within the first opening in the
    **compare texts** block to the left of the equals sign. This block will get the
    text from the incoming text message (any text message):'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 将鼠标指针悬停在事件块中浅橙色**messageText**变量上。这将触发一个弹出窗口，如下面的截图所示。选择**getMessageText**块并将其放置在等于符号左侧的**compare
    texts**块的第一个开口处。此块将从传入的短信（任何短信）获取文本：
- en: '![Receiving text messages from participants](img/00222.jpeg)![Receiving text
    messages from participants](img/00223.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![从参与者接收短信](img/00222.jpeg)![从参与者接收短信](img/00223.jpeg)'
- en: For the second opening, we want to input the code we created so we can compare
    it to the text message received. If you recall, in the `Designer` property, we
    set the `Text` property of **Codelabel** to our code, **I want to win**. So, under
    **Screen1**, go to the **CodeLabel** blocks and select the **CodeLabel.Text**
    block.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第二个开口，我们想要输入我们创建的代码，以便我们可以将其与接收到的短信文本进行比较。如果你还记得，在`Designer`属性中，我们将**Codelabel**的`Text`属性设置为我们的代码，**I
    want to win**。因此，在**Screen1**下，转到**CodeLabel**块并选择**CodeLabel.Text**块。
- en: Insert the **CodeLabel.Text** block into the opening to the right of the equals
    sign in the **compare texts** block, as shown in the following screenshot. We
    have now programmed the app to check to see whether the text message (**messageText**)
    matches the `Text` property of the **CodeLabel** (the code, **I want to win**).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 将**CodeLabel.Text**块插入到**compare texts**块中等于符号右侧的开口处，如下面的截图所示。我们现在已经编程应用以检查短信（**messageText**）是否与**CodeLabel**的`Text`属性（代码，**I
    want to win**）匹配。
- en: '![Receiving text messages from participants](img/00224.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![从参与者接收短信](img/00224.jpeg)'
- en: Adding the phone numbers of all the participants to the list
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将所有参与者的电话号码添加到列表中
- en: If the text message indeed contains the correct code, we know that the text
    message came from a raffle participant. Thus, we want the app to add the sender's
    phone number to the list that we created earlier. To do this, go to the **List**
    blocks and select the **add items to list** block, as shown in the following screenshot.
    Add it to the **then** opening of the **if/then** block.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果短信确实包含正确的代码，我们知道这条短信来自抽奖参与者。因此，我们希望应用将发送者的电话号码添加到我们之前创建的列表中。为此，转到**List**块并选择**add
    items to list**块，如下面的截图所示。将其添加到**if/then**块的**then**开口处。
- en: '![Adding the phone numbers of all the participants to the list](img/00225.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![将所有参与者的电话号码添加到列表中](img/00225.jpeg)'
- en: The **add items to list** block needs two pieces of information, which we will
    attach to the empty sockets—the name of the list to add items to and the item
    to be added. To specify the list, go to the **Variables** block and select the
    **get** block and connect it to the **list** socket of the **add items to list**
    block.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**add items to list**块需要两块信息，我们将将其附加到空插槽——要添加项目的列表名称和要添加的项目。要指定列表，转到**Variables**块并选择**get**块并将其连接到**add
    items to list**块的**list**插槽。'
- en: '![Adding the phone numbers of all the participants to the list](img/00226.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![将所有参与者的电话号码添加到列表中](img/00226.jpeg)'
- en: Then, click on the downward pointing triangle of the **get** block and select
    **global ListOfNumbers** from the drop-down menu as shown in the following screenshot.
    When we initialize a global variable, like we did for **ListOfNumbers**, it is
    then available for us to use throughout the app. This is why the name appears
    in the drop-down menu as an option.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，点击**get**块的向下指向的三角形，并从下拉菜单中选择如图所示的**global ListOfNumbers**。当我们初始化一个全局变量，就像我们对**ListOfNumbers**所做的那样，它就可供我们在整个应用程序中使用。这就是为什么它的名字出现在下拉菜单中的选项中。
- en: '![Adding the phone numbers of all the participants to the list](img/00227.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![将所有参与者的电话号码添加到列表中](img/00227.jpeg)'
- en: As we mentioned before, the **number** variable associated with this **Texting1.MessageReceived**
    block contains the sender's phone number. You can use the **get number** block
    to access this number. Hover your mouse over **number** variable to view the pop-up
    window, as shown in the following image. Select the **get number** block and connect
    it to the **item** socket of the **add items to list** block.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前提到的，与**Texting1.MessageReceived**块关联的**number**变量包含发送者的电话号码。您可以使用**get
    number**块来访问此号码。将鼠标悬停在**number**变量上以查看弹出窗口，如下面的图像所示。选择**get number**块并将其连接到**add
    items to list**块的**item**插座。
- en: '![Adding the phone numbers of all the participants to the list](img/00228.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![将所有参与者的电话号码添加到列表中](img/00228.jpeg)'
- en: 'The following screenshot shows the completed set of blocks for receiving text
    messages:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了接收短信的完成块集：
- en: '![Adding the phone numbers of all the participants to the list](img/00229.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![将所有参与者的电话号码添加到列表中](img/00229.jpeg)'
- en: 'Thus far, we have programmed the app to do the following: receive text messages,
    verify that the message texts contains the **I want to win** code, and if so,
    add the sender''s phone number to the list that we created (**ListOfNumbers**).
    If the text message does not match the CodeLabel Text, then nothing happens (the
    phone number does not get added to the list.)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经编程了应用程序执行以下操作：接收短信，验证消息文本是否包含**I want to win**代码，如果是，则将发送者的电话号码添加到我们创建的列表中（**ListOfNumbers**）。如果短信不匹配CodeLabel
    Text，则不会发生任何操作（电话号码不会添加到列表中。）
- en: Selecting a winner
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择获奖者
- en: 'When designing the UI, we added a **WinnerButton** that the raffle organizer
    will click to randomly select a winner. App Inventor also makes this easy. We
    will use the **pick a random item** block to select a winner from **ListOfNumbers**.
    You can find the **pick a random item** block under the **Lists** Blocks, as shown
    in the following screenshot:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计UI时，我们添加了一个**WinnerButton**，抽奖组织者将点击它来随机选择一个获奖者。App Inventor也使这变得很容易。我们将使用**pick
    a random item**块从**ListOfNumbers**中选择一个获奖者。您可以在**Lists**块下找到**pick a random item**块，如下面的截图所示：
- en: '![Selecting a winner](img/00230.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![选择获奖者](img/00230.jpeg)'
- en: 'Since the raffle organizer will click a button to pick a winner select the
    **WinnerButton.Click** event (found in the **WinnerButton** blocks). Next, go
    to the **Variables** blocks, select a **set to** block, and place it within the
    **WinnerButton.Click** event. In the **set to** block, click on the downward pointing
    triangle and select **global WinningNumber**. Connect to this block with the **pick
    a random item** block that we selected earlier. The **pick a random item** block
    has an open socket indicating a list. Can you figure out which block would connect
    to it? Since we want the random item (phone number) to be selected from our list
    of numbers, copy and paste the **get global ListOfNumbers** block from the **add
    items to list** block (in the previous section) and connect it to the **pick a
    random item** block. The following screenshot shows the completed set of blocks
    up to this point:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 由于抽奖组织者将点击一个按钮来选择获奖者，请选择**WinnerButton.Click**事件（在**WinnerButton**块中找到）。接下来，转到**Variables**块，选择一个**set
    to**块，并将其放置在**WinnerButton.Click**事件中。在**set to**块中，点击向下指向的三角形并选择**global WinningNumber**。使用我们之前选择的**pick
    a random item**块连接到此块。**pick a random item**块有一个开放的插座，表示一个列表。你能想出哪个块可以连接到它吗？由于我们希望随机选择的项（电话号码）来自我们的数字列表，请从上一节中的**add
    items to list**块复制并粘贴**get global ListOfNumbers**块，并将其连接到**pick a random item**块。以下截图显示了到目前为止完成的块集：
- en: '![Selecting a winner](img/00231.jpeg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![选择获奖者](img/00231.jpeg)'
- en: What exactly are we coding here? We are programming the app to select a random
    item (phone number) from the list (of all the phone numbers) and store it in the
    **WinningNumber** variable (**set global WinningNumber to block**). You might
    be wondering why do we need to do this. As it will be evident later in this chapter,
    we will reuse this winning number several times. Hence, we need to temporarily
    store it somewhere.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里究竟在编写什么代码？我们正在编程应用以从列表（所有电话号码列表）中随机选择一个项目（电话号码）并将其存储在**WinningNumber**变量中（**将全局WinningNumber设置为块**）。你可能想知道为什么我们需要这样做。正如本章后面将会明显显示的，我们将多次重用这个获奖号码。因此，我们需要暂时将其存储在某个地方。
- en: 'Once we get the winning number, we want the app to display the winning number
    on the organizer''s phone. To do this, we will set the **Text** property of **WinnerLabel**
    to **WinningNumber**. As shown in the following screenshot, select **set WinnerLabel.Text
    to** (under the **WinnerLabel** blocks) and connect it to the **get global WinningNumber**
    block (which you will find in the **Variables** block drawer). It will be listed
    just as an orange **get** block, and you will need to click on the downward pointing
    triangle to select **global WinningNumber** from the drop-down list. Your blocks
    should resemble those in the following screenshot:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们得到获奖号码，我们希望应用在组织者的手机上显示获奖号码。为此，我们将设置**WinnerLabel**的**Text**属性为**WinningNumber**。如图所示，选择**设置WinnerLabel.Text**（在**WinnerLabel**块下）并将其连接到**获取全局WinningNumber**块（你将在**变量**块抽屉中找到）。它将列为一个橙色的**获取**块，你需要点击向下指向的三角形来从下拉列表中选择**全局WinningNumber**。你的块应该类似于以下截图：
- en: '![Selecting a winner](img/00232.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![选择获奖者](img/00232.jpeg)'
- en: Let's recap. We have programmed the app to randomly select a winner (phone number)
    from all the participant phone numbers (global **ListOfNumbers**), we will have
    saved the winning phone number into the **Variable Global WinningNumber** variable
    and displayed the winning number in **WinnerLabel**. The next step is notifying
    the winner by sending a text message to the winning number.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下。我们已经编程应用以从所有参与者的电话号码（全局**ListOfNumbers**）中随机选择一个获奖者（电话号码），我们将把获奖电话号码保存到**变量全局WinningNumber**变量中，并在**WinnerLabel**中显示获奖号码。下一步是通过向获奖号码发送短信来通知获奖者。
- en: Notifying the winner
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通知获奖者
- en: The non-visible **Texting1** component that we used before to receive the text
    messages from participants will be used here again. To send a text message to
    the winner, we will set both the **Texting1.Message** property and the **Texting1.PhoneNumber**
    property. Find the set blocks under the **Texting1** blocks. Select and place
    them inside the **WinnerButton.Click** event, as shown in the following screenshot.
    For the **Texting1.Message** property, connect a **blank Text** block and type
    in the message **"Congratulations!! You won"**. For the **Texting1.PhoneNumber**
    property, copy and paste the **global WinningNumber** block and connect it to
    the empty socket.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前用来接收参与者短信的不可见**Texting1**组件将再次被使用。为了向获奖者发送短信，我们将设置**Texting1.Message**属性和**Texting1.PhoneNumber**属性。在**Texting1**块下找到设置块。选择并将它们放置在**WinnerButton.Click**事件中，如图所示。对于**Texting1.Message**属性，连接一个**空白文本**块并输入信息**"恭喜！你赢了"**。对于**Texting1.PhoneNumber**属性，复制并粘贴**全局WinningNumber**块并将其连接到空插槽。
- en: 'The **Texting1** component has a purple block called **call Texting1.SendMessage**.
    This is the block that actually sends a text message. The **PhoneNumber** property
    of the **Texting1** component is used for the recipient''s number and the **Message**
    property is used for the body of the text. Hence, it is important to set these
    two properties correctly before actually sending the text with the **call Texting1.SendMessage**
    block. As shown in the following screenshot, go to the **Texting1** blocks again,
    and drag the purple **call Texting1.SendMessage** block and place it at the bottom
    of all the blocks:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**Texting1**组件有一个名为**call Texting1.SendMessage**的紫色块。这是实际发送短信的块。**Texting1**组件的**PhoneNumber**属性用于接收者的号码，**Message**属性用于短信正文。因此，在实际上传短信之前，使用**call
    Texting1.SendMessage**块发送短信之前，正确设置这两个属性非常重要。如图所示，再次转到**Texting1**块，并将紫色**call
    Texting1.SendMessage**块拖到所有块的底部：'
- en: '![Notifying the winner](img/00233.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![通知获奖者](img/00233.jpeg)'
- en: We have now coded the Raffle app to send a congratulatory notification to the
    winner.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经编写了抽奖应用，可以向获奖者发送祝贺通知。
- en: Notifying everyone else
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通知其他人
- en: Usually, the winner is excited to have won, and announces aloud that she or
    he has won. But in case this doesn't happen, we want to send a notification message
    to all the participants who did not win to ensure that no one is left wondering
    about the raffle outcome. It seems logical to send a **"Sorry, You did not win"**
    notification to all the items in **ListOfNumbers**, since it is storing all of
    the participants' phone numbers. However, there is a flaw to this logic. Can you
    guess what the problem is? Currently, **ListOfNumbers** contains all of numbers,
    including the winning number. So, before we use the **ListOfNumbers** as the source
    for the "**Sorry**" notification, we need to remove the winning number from this
    list.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，获胜者会兴奋地宣布自己获胜。但如果没有发生这种情况，我们希望向所有未获奖的参与者发送通知消息，以确保没有人对抽奖结果感到困惑。向**ListOfNumbers**中的所有项目发送一个**“很抱歉，您没有获奖”**的通知似乎很合理，因为这个列表存储了所有参与者的电话号码。然而，这个逻辑有一个缺陷。你能猜出问题是什么吗？目前，**ListOfNumbers**包含所有号码，包括获奖号码。因此，在我们将**ListOfNumbers**作为“**很抱歉**”通知的来源之前，我们需要从这个列表中移除获奖号码。
- en: 'As shown in the following screenshot, we will use the **remove list item**
    block to remove the winning number. You can find **remove list item** in the **List**
    blocks. This block needs two pieces of information (hence, the two empty sockets):
    the name of the list and the position (index) of the item to be removed. Specifying
    the name of the list is easy. Just copy and paste and connect the **global ListOfNumbers**
    block.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下截图所示，我们将使用**移除列表项**块来移除获奖号码。您可以在**List**块中找到**移除列表项**。此块需要两份数据（因此有两个空插孔）：列表的名称和要移除的项目（索引）的位置。指定列表的名称很容易。只需复制并粘贴，并将**全局ListOfNumbers**块连接起来。
- en: '![Notifying everyone else](img/00234.jpeg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![通知所有人](img/00234.jpeg)'
- en: 'Finding the position of the winning number is a little more involved. We will
    need to add another **List** block, that is, the **index in list** block to figure
    out this position. As shown in the following screenshot, connect the **index in
    list** block to the empty **index** socket in the **remove list item** block:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 找到获奖号码的位置稍微复杂一些。我们需要添加另一个**List**块，即**列表中的索引**块来找出这个位置。如图所示，将**列表中的索引**块连接到**移除列表项**块的空**索引**插孔：
- en: '![Notifying everyone else](img/00235.jpeg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![通知所有人](img/00235.jpeg)'
- en: Note
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Index** is the position of an item in a list.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**索引**是列表中一个项目的位置。'
- en: The **remove** list item block can remove an item from a certain position. First,
    we need to figure out the position of the winning number (the thing) in the list.
    Then, we will use this position to remove the winning number.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**移除**列表项块可以从特定位置移除一个项目。首先，我们需要确定获奖号码（即那个东西）在列表中的位置。然后，我们将使用这个位置来移除获奖号码。'
- en: 'The **index in list** block finds the position of the item specified in the
    **thing** socket from the list specified in the **list** socket. So, we will copy
    and paste, connect the get **global WinningNumber** block to the **thing** socket,
    and add another **get global ListOfNumbers** block to the **list** socket. Your
    code will look as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**索引**是列表中一个项目的位置。'
- en: '![Notifying everyone else](img/00236.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![通知所有人](img/00236.jpeg)'
- en: Let's recap. We have identified the position of the winning number in the list
    and have removed the item at that position, thereby removing the winning number
    from the list. Now, we are ready to use this list to send a notification to the
    participants who did not win.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下。我们已经确定了获奖号码在列表中的位置，并移除了该位置的项目，从而从列表中移除了获奖号码。现在，我们准备使用这个列表向未获奖的参与者发送通知。
- en: Just like the notification message we created for the winner previously, we
    will reuse the **Texting1** component to send out notifications to all the participants
    who did not win. Copy and paste the **set Texting1\. Message to** block (that
    will copy the attached text block). Change the text in the Text block from "**Congratulations
    !! You won**" to "**Sorry, You did not win**". Feel free to change this message
    and personalize it to your liking.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 就像之前为获胜者创建的通知消息一样，我们将重用**Texting1**组件向所有未获奖的参与者发送通知。复制并粘贴**setTexting1.Message
    to**块（这将复制附加的文本块）。将文本块中的文本从“**恭喜 !! 您获胜**”更改为“**很抱歉，您没有获胜**”。您可以根据自己的喜好更改此消息并个性化它。
- en: Note
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that blocks execution is always top down. So effectively, the winning number
    is removed from **ListOfNumbers** before the notification is sent to the losing
    participants. And, **Texting1.Message** set to the block message "**Sorry, You
    did not win.**" overwrites the previous text message "**Congratulations!! You
    won**".
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，块执行始终是自上而下的。因此，实际上，在将通知发送给失败参与者之前，获胜号码已被从**ListOfNumbers**中移除。此外，**Texting1.Message**设置为块消息“**很抱歉，你没有赢**”将覆盖先前的文本消息“**恭喜你！！你赢了**”。
- en: '![Notifying everyone else](img/00237.jpeg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![通知其他人](img/00237.jpeg)'
- en: An important difference between sending the notification to the winner and this
    notification is that this notification will be sent to *all* the numbers in the
    list **ListOfNumbers**, except the winning number. Essentially, this means that
    we need to repeat the **set Texting1.PhoneNumber to** block, followed by the **callTexting1.SendMessage**
    block—once for each item in **ListOfNumbers**. And this brings us to the concept
    of loops!
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 将通知发送给获胜者和这种通知之间的重要区别是，此通知将发送到列表**ListOfNumbers**中的所有号码，除了获胜号码。本质上，这意味着我们需要重复**将Texting1.PhoneNumber设置为**块，然后是**调用Texting1.SendMessage**块——对于**ListOfNumbers**中的每个项目各一次。这使我们来到了循环的概念！
- en: Using loops
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用循环
- en: 'A basic programming concept present in any programming language, including
    App Inventor, is called loop. Loops let us repeat code and thus we will use a
    loop here. We will place two blocks in the loop: **set Texting1.PhoneNumber to**
    and **call Texting1.SendMessage**.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 任何编程语言中，包括App Inventor，都存在的一个基本编程概念被称为循环。循环允许我们重复代码，因此我们将在这里使用循环。我们将在循环中放置两个块：**将Texting1.PhoneNumber设置为**和**调用Texting1.SendMessage**。
- en: 'Loops are available in the **Control** blocks drawer. There are different types
    of loops. We will use the **for each item in list** loop, as shown in the following
    screenshot. Select the **for each item in list** loop and place it at the bottom
    of the **when WinnerButton.Click** event. This loop requires us to specify a list
    that will be used in conjunction with the loop. The loop lets us repeat whatever
    block we place within the loop once for each item in the associated list. While
    the loop is running, during any iteration, the corresponding item from the list
    will be placed in the item variable as well. When the loop executes for the first
    time, the first item of **ListOfNumbers** will be available in the item variable
    associated with the loop. Similarly, when the loop executes for the second time,
    the second item will be available in the item variable and so on:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 循环可在**控制**块抽屉中找到。有不同类型的循环。我们将使用**对于列表中的每个项目**循环，如图所示。选择**对于列表中的每个项目**循环并将其放置在**WinnerButton.Click**事件的底部。此循环要求我们指定一个将与循环一起使用的列表。循环允许我们将放置在循环内的任何块重复一次，对于关联列表中的每个项目。当循环运行时，在每次迭代期间，列表中的相应项目也将放置在项目变量中。当循环第一次执行时，**ListOfNumbers**的第一个项目将可用在循环关联的项目变量中。同样，当循环第二次执行时，第二个项目将在项目变量中可用，依此类推：
- en: '![Using loops](img/00238.jpeg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![使用循环](img/00238.jpeg)'
- en: This loop will execute as many times as the number of number of phone numbers
    in **ListOfNumbers**. To specify the list, just copy and paste and connect the
    **get global ListOfNumbers** block to the empty list socket in the loop.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 此循环将执行与**ListOfNumbers**中电话号码数量相同的次数。要指定列表，只需复制并粘贴，并将**获取全局ListOfNumbers**块连接到循环中的空列表插槽。
- en: '![Using loops](img/00239.jpeg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![使用循环](img/00239.jpeg)'
- en: 'Now that the outline of the loop is ready, we need specify the body of the
    loop. First, drag the **set Texting1.PhoneNumber to** block into the *do* part
    of the loop, as shown in the following screenshot:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在循环的轮廓已经准备好了，我们需要指定循环体。首先，将**将Texting1.PhoneNumber设置为**块拖动到循环的*do*部分，如图所示：
- en: '![Using loops](img/00240.jpeg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![使用循环](img/00240.jpeg)'
- en: 'Next, hover your mouse over the item variable in the **for each item in list**
    block, and drag the **get item** block and connect it to the empty socket in the
    **set Texting1.PhoneNumber to** block, as shown in the following screenshot:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将鼠标悬停在**对于列表中的每个项目**块的项目变量上，并拖动**获取项目**块并将其连接到**将Texting1.PhoneNumber设置为**块的空插槽，如图所示：
- en: '![Using loops](img/00241.jpeg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![使用循环](img/00241.jpeg)'
- en: 'Next, copy and paste and place the purple **call Texting1.SendMessage** block
    into the **do** part of the loop at the very bottom, as shown in the following
    screenshot:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，复制并粘贴，并将紫色**调用Texting1.SendMessage**块放置在循环的底部*do*部分，如图所示：
- en: '![Using loops](img/00242.jpeg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![使用循环](img/00242.jpeg)'
- en: This loop accesses each item on the list one at a time, sets it as **Texting1.PhoneNumbers**,
    and sends out a text message to that phone number. So, this loop is allowing us
    to repeat the **set Texting1.PhoneNumber to** block, followed by the **call Texting1.SendMessage**
    block multiple times (for each item in **ListofNumbers**).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 此循环逐个访问列表上的每个项目，将其设置为**Texting1.PhoneNumbers**，并向该电话号码发送短信。因此，这个循环使我们能够多次重复**将Texting1.PhoneNumber设置为**积木，然后是**调用Texting1.SendMessage**积木（对于**ListofNumbers**中的每个项目）。
- en: The digital raffle is now complete. The winner has been notified of the win
    and the rest of the participants have been notified that they did not win (note
    that a prize of some sort is usually given to the winner).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 数字抽奖现在已完成。获胜者已经被告知获胜，其他参与者已经被告知他们没有获胜（请注意，通常会给获胜者某种奖品）。
- en: Clearing out the list and variable
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清除列表和变量
- en: After using the Raffle app, if you want to conduct another raffle with a different
    group of participants, you will need to clear out the list **ListOfNumbers** the
    variable **WinningNumber**, two things that were expressly created by us (the
    programmers). The other variables used in the app were local variables (**number**
    and **messageText** from the **Texting1.MessageReceived** event). These were not
    created by us, but rather generated by the blocks themselves; thus, these are
    used and cleared out automatically by the program.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用抽奖应用后，如果您想用不同组别的参与者举办另一场抽奖，您需要清除**ListOfNumbers**列表和变量**WinningNumber**，这两者是我们（程序员）明确创建的。应用中使用的其他变量是局部变量（**number**和**messageText**来自**Texting1.MessageReceived**事件）。这些不是由我们创建的，而是由积木本身生成的；因此，这些变量会由程序自动使用和清除。
- en: There are two ways to clear out the list and variable to reset the app. The
    first way doesn't require programming. You can simply close the application and
    reopen it. This will reset the list to empty and the **WinningNumber** to 0\.
    Can you guess the second way to reset the app? If you recall, we created a **ClearButton**
    feature for the UI in the Designer. We can program this **ClearButton** to clear
    out the app.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 清除列表和变量以重置应用有两种方法。第一种方法不需要编程。您可以简单地关闭应用程序并重新打开它。这将使列表变为空，并将**WinningNumber**设置为0。你能猜出重置应用的第二种方法吗？如果你还记得，我们在设计师中为UI创建了一个**ClearButton**功能。我们可以编程这个**ClearButton**来清除应用。
- en: 'In the **ClearButton** blocks, select the **ClearButton.Click** event. This
    block will help us clear out the list that stored the participants'' phone numbers
    and the variable that stored the **WinningNumber**. Recall when we started coding
    the app, we initialized our global variables. We set **list** to be empty and
    the variable to be `0`. So now, in the **when ClearButton.Click** event, add blocks
    to do the same thing. You''ve already programmed this once before in this app,
    so we imagine that you will be a pro at configuring these blocks again. But, just
    in case you need a review, select the **set global ListOfNumbers** block and connect
    it to the **create empty list** block, and select the **set global WinningNumber**
    block and set it to `0`. Your final set of blocks will resemble the following
    screenshot:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在**ClearButton**积木中，选择**ClearButton.Click**事件。此积木将帮助我们清除存储参与者电话号码的列表和存储**WinningNumber**的变量。回想一下，当我们开始编写应用时，我们初始化了全局变量。我们将**list**设置为空，并将变量设置为`0`。因此，现在在**当ClearButton.Click**事件中，添加积木执行相同的事情。您已经在这个应用中编程过一次，所以我们想象您将再次配置这些积木会非常熟练。但是，以防万一您需要复习，选择**设置全局ListOfNumbers**积木并将其连接到**创建空列表**积木，然后选择**设置全局WinningNumber**积木并将其设置为`0`。您的最终积木组合将类似于以下截图：
- en: '![Clearing out the list and variable](img/00243.jpeg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![清除列表和变量](img/00243.jpeg)'
- en: Summary
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we created a useful and fun app that you can use to conduct
    a digital raffle. We explored global and local variables along with many facets
    of the Texting Component to send and receive text messages. We also learned about
    some advanced blocks related to lists—selecting random list items, searching for
    an item on a list, and removing an item. Finally, we explored an important fundamental
    concept of programming—loops. We saw how loops enabled us to repeat behaviors
    (a stack of blocks) multiple times.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们创建了一个有用且有趣的应用程序，您可以使用它来举办数字抽奖。我们探讨了全局和局部变量以及文本组件的许多方面，以发送和接收短信。我们还了解了一些与列表相关的先进积木——选择随机列表项、在列表中搜索项以及删除项。最后，我们探索了编程的一个重要基本概念——循环。我们看到了循环如何使我们能够多次重复行为（积木堆）。
- en: In the next chapter, we will provide some tips on expanding your mobile app
    development skills with designing hints and sharing options.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将提供一些关于通过设计提示和分享选项来扩展您的移动应用开发技能的技巧。
