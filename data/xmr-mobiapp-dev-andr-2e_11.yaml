- en: Chapter 11. Publishing an App to the App Store
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 章。将应用发布到应用商店
- en: 'An app is useful if everyone can enjoy it, and this means finding a way to
    make it available to the masses. In this chapter, we will take a look at the various
    aspects of getting your app ready for deployment and discuss the various options
    available for publishing the Android application to market. In this chapter, we
    will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果每个人都能享受它，那么一个应用就是有用的，这意味着要找到一种方法使其对大众可用。在本章中，我们将探讨使您的应用准备好部署的各个方面，并讨论将 Android
    应用发布到市场的各种选项。在本章中，我们将涵盖以下主题：
- en: Preparing application for release
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备应用发布
- en: Publishing a signed APK for uploading
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布用于上传的已签名 APK
- en: Different app distribution options
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的应用分发选项
- en: Publishing on Google Play
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Google Play 上发布
- en: Preparing the application for release
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备应用发布
- en: As your application is fully developed, the moment when you put a significant
    amount of effort to verify each of the key functional modules is crucial. Many
    developers prefer to test the app using different test automation frameworks (such
    as Robotium, Appium, Xamarin Test Cloud, and so on), or some developers use manual
    testing to verify the app on targeted devices. Once you're convinced that the
    application doesn't contain any obvious glitches and works as smoothly as expected,
    you're ready to deploy the app to the app store.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的应用完全开发完成后，您投入大量精力验证每个关键功能模块的时刻至关重要。许多开发者更喜欢使用不同的测试自动化框架（如 Robotium、Appium、Xamarin
    Test Cloud 等）来测试应用，或者一些开发者使用手动测试来验证目标设备上的应用。一旦您确信应用不包含任何明显的错误并且运行得像预期的那样顺畅，您就可以准备将应用部署到应用商店。
- en: The following sections discuss the various aspects to be considered prior to
    producing a release APK.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分讨论了在生成发布版 APK 之前需要考虑的各个方面。
- en: Disabling the debug mode
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 禁用调试模式
- en: 'During the development of an application, Xamarin Studio supports debugging
    Xamarin.Android apps using **Java Debug Wire Protocol** (**JDWP**). This is great
    for development purposes but poses security risks for deployed applications and
    thus needs to be disabled in the released apps. There are two different ways to
    accomplish this:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用开发过程中，Xamarin Studio 支持使用 **Java 调试 Wire Protocol**（**JDWP**）进行调试。这对于开发目的来说很棒，但对于已部署的应用来说存在安全风险，因此需要在发布的应用中禁用。有两种不同的方法可以实现这一点：
- en: Setting the application `android:debuggable` property in the `AndroidManifest.xml`
    file.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `AndroidManifest.xml` 文件中设置应用的 `android:debuggable` 属性。
- en: Using the `AssemblyInfo.cs` conditional directives.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `AssemblyInfo.cs` 条件指令。
- en: 'To remove the debug mode using the Android `AndroidManifest.xml` descriptor,
    you need to set the value of the `android:debuggable` property to `false`. The
    following listing shows how to turn off the JDWP debugging from the manifest file:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Android 的 `AndroidManifest.xml` 描述符来移除调试模式，您需要将 `android:debuggable` 属性的值设置为
    `false`。以下列表显示了如何从清单文件中关闭 JDWP 调试：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Another way of disabling the debug mode is using the conditional directive
    in the `AssemblyInfo.cs` file. The following listing shows how to use a conditional
    directive to turn the JDWP debugging off or on based on the configuration that
    is selected. This approach has the advantage of being based on the currently selected
    configuration:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 禁用调试模式的另一种方法是使用 `AssemblyInfo.cs` 文件中的条件指令。以下列表显示了如何使用条件指令根据所选配置关闭或打开 JDWP 调试。这种方法的优势在于它基于当前所选配置：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Configuring linking options
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置链接选项
- en: By default, the release mode turns off using shared runtime and turns on linking
    so that your distribution APK only contains the portions of the Xamarin.Android
    runtime required by your app. The linker does this by performing a static analysis
    of your compiled code in order to determine which assemblies, types, and type
    members are used by your application. All unused assemblies, types, and members
    are striped out in order to reduce the overall size of the application.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，发布模式会关闭共享运行时并开启链接，以便您的分发 APK 只包含应用所需的 Xamarin.Android 运行时部分。链接器通过执行对编译代码的静态分析来确定哪些程序集、类型和类型成员被应用使用。所有未使用的程序集、类型和成员都被移除，以减少应用的整体大小。
- en: '**Linker Options** can be viewed and set in the **Project Options** dialog
    under the **Android Build** section:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**链接选项**可以在 **Android 构建**部分的**项目选项**对话框中查看和设置：'
- en: '![](img/kGBIis26.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/kGBIis26.jpg)'
- en: 'When viewing and adjusting **Linker Options**, make sure to first select **Release**
    from the **Configuration** drop-down box. Xamarin.Android provides the following
    linking behaviors:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当查看和调整**链接器选项**时，请确保首先从**配置**下拉框中选择**发布**。Xamarin.Android提供以下链接行为：
- en: '**Don''t link**: This turns off the linker; no linking will be performed.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不要链接**：这将关闭链接器；不会执行任何链接操作。'
- en: '**Link SDK assemblies only**: This will only link the assemblies that are required
    by Xamarin.Android. Other assemblies will not be linked; they will be distributed
    as separate assemblies.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仅链接SDK组件**：这将仅链接Xamarin.Android所需的组件；其他组件将不会链接，它们将以单独的组件形式分发。'
- en: '**Link all assemblies**: This will link all assemblies that are required by
    the application and not just the ones required by Xamarin.Android.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**链接所有组件**：这将链接应用程序所需的全部组件，而不仅仅是Xamarin.Android所需的组件。'
- en: Side effects of linking
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 链接的副作用
- en: In some cases, linking can have some unintended side effects, including needed
    types and members being accidentally discarded. It is very important for an application
    that is compiled and linked in a release mode to be put through a thorough testing
    cycle in order to ensure that the app does not suffer from this side effect. In
    fact, in most cases, testing beyond the initial developer's testing should be
    conducted using an APK file and produced in the release mode.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，链接可能会产生一些意外的副作用，包括需要类型和成员被意外丢弃。对于在发布模式下编译和链接的应用程序，进行彻底的测试周期非常重要，以确保应用程序不会受到这种副作用的影响。实际上，在大多数情况下，测试应超出初始开发者的测试，并使用APK文件在发布模式下进行生成。
- en: If you encounter runtime exceptions or build failure issues related to missing
    types or have trouble locating specific methods, you may need to provide a custom
    linker file that gives explicit instructions concerning specific types or members
    to the linker.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遇到与缺失类型相关的运行时异常或构建失败问题，或者难以定位特定方法，您可能需要提供一个自定义链接器文件，该文件向链接器提供有关特定类型或成员的明确指令。
- en: 'The following listing is an example of a custom linking file that directs the
    linker to always include a specific type and specific set of members for the type:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表是一个自定义链接文件的示例，该文件指示链接器始终包含特定类型及其特定成员集：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'A custom linking file can be added to a project as a simple XML file. After
    adding the file to the project, select the file, open the **Properties** pad,
    and choose **LinkDescription** from the **Build action** menu, as shown in the
    following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将自定义链接文件添加到项目中作为简单的XML文件。将文件添加到项目后，选择该文件，打开**属性**面板，并从**构建操作**菜单中选择**链接描述**，如图下所示：
- en: '![](img/gcixsNDU.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/gcixsNDU.jpg)'
- en: Selecting supported ABIs
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择支持的ABIs
- en: Android supports several different CPU architectures. The Android platform defines
    a set of **Application Binary Interfaces** (**ABIs**) that correspond to different
    CPU architectures. By default, Xamarin.Android assumes that **armeabi-v7a** is
    appropriate in most circumstances. If you need to support additional architectures,
    then you must check each one that applies. This will cause the build process to
    generate the code that will run on all the target ABIs as well as include native
    libraries that are appropriate for each architecture.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Android支持多种不同的CPU架构。Android平台定义了一组**应用程序二进制接口**（**ABIs**），对应不同的CPU架构。默认情况下，Xamarin.Android假定在大多数情况下**armeabi-v7a**是合适的。如果您需要支持额外的架构，那么您必须检查每个适用的架构。这将导致构建过程生成将在所有目标ABIs上运行的代码，以及包括适用于每个架构的本地库。
- en: 'Supported ABIs can be specified in the **Project Options** dialog under the
    **Android Build** section:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 支持的ABIs可以在**项目选项**对话框的**Android构建**部分指定：
- en: '![](img/WNxGP7Da.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/WNxGP7Da.jpg)'
- en: One scenario where I have run into the need of specifying additional ABIs is
    the testing process. I have worked with a group of testers many times; some of
    which have physical devices and some of which use emulators. To support the use
    of the x86 emulator, you will need to include x86 in the supported ABI's list.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我遇到需要指定附加ABIs的场景之一是在测试过程中。我多次与一组测试人员合作；其中一些拥有物理设备，而另一些则使用模拟器。为了支持x86模拟器的使用，您需要在支持的ABIs列表中包含x86。
- en: Verifying the package name, icon, and app version
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证包名、图标和应用程序版本
- en: There are several additional manifest properties that you need to verify before
    preparing a release build for uploading it to the Android market. This section
    will take you through some of those key items.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在准备发布构建以上传到Android市场之前，您需要验证几个额外的清单属性。本节将带您了解这些关键项目。
- en: The package name
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**包名**'
- en: A package name is a unique identifier for your application in Google Play. An
    application package name is defined in the `AndroidManifest.xml` file. Once your
    application is deployed to the market with this name, you cannot change it later.
    Changing the app package name means that it will be treated as a completely new
    application.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 包名是您应用程序在Google Play中的唯一标识符。应用程序包名在`AndroidManifest.xml`文件中定义。一旦您的应用程序使用此名称部署到市场，以后就不能更改它。更改应用程序包名意味着它将被视为一个全新的应用程序。
- en: The Android application package name should be unique and the name may contain
    the uppercase or lowercase letters ('A' through 'Z'), numbers, and underscores
    ('_'). Usually, it is a best practice to use your Internet domain ownership as
    the basis for your package names. For example, applications published by Yahoo
    will start with `com.yahoo.&lt;app id&gt;`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Android应用程序包名应该是唯一的，并且名称可以包含大写或小写字母（'A'到'Z'）、数字和下划线（'_'）。通常，使用您的互联网域名所有权作为包名的基础是一种最佳实践。例如，由Yahoo发布的应用程序将以`com.yahoo.&lt;app
    id&gt;`开头。
- en: 'Most of the app settings can be either controlled directly by editing the `AndroidManifest.xml`
    file or from the project **Options** window. To modify the package name in the
    `AndroidManifest.xml`, you need to use the `package` attribute, as shown in the
    following code snippet:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数应用程序设置可以通过直接编辑`AndroidManifest.xml`文件或在项目**选项**窗口中进行控制。要修改`AndroidManifest.xml`中的包名，您需要使用`package`属性，如下面的代码片段所示：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Right-click on your project in the Xamarin Solution Explorer and select **Options**
    to open the **Project Options** window. The following screenshot depicts the project
    options window in Xamarin Studio:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在Xamarin Solution Explorer中右键单击您的项目，然后选择**选项**以打开**项目选项**窗口。以下截图展示了Xamarin Studio中的项目选项窗口：
- en: '![](img/KDV0sTwL.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/KDV0sTwL.jpg)'
- en: The application name and icon
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用程序名称和图标
- en: Making an app that works in a device isn't just enough. You will need to provide
    a high-quality app icon that represents your brand or product. After all, the
    app icon is the first thing that a user will notice after the app is installed
    on the device. You must prepare your app launcher icon for devices of mdpi, hdpi,
    xhdpi, and xxhdpi density.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 制作一个在设备上工作的应用程序并不足够。您还需要提供一个代表您品牌或产品的优质应用程序图标。毕竟，应用程序图标是用户在设备上安装应用程序后首先注意到的东西。您必须为mdpi、hdpi、xhdpi和xxhdpi密度的设备准备应用程序启动器图标。
- en: 'Once the launcher icons are ready, add them to their respective drawable resource
    folder for different screen densities. You can set the app name by setting the
    `android:label` property to the `&lt;application&gt;` element in the `AndroidManifest.xml`
    file, and for setting the application icon, you can use the `android:icon` property:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦启动器图标准备就绪，请将它们添加到相应屏幕密度的drawable资源文件夹中。您可以通过将`android:label`属性设置为`AndroidManifest.xml`文件中的`&lt;application&gt;`元素来设置应用程序名称，并为设置应用程序图标，可以使用`android:icon`属性：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can refer to the official Google app icon design guidelines at [http://www.google.com/design/spec/style/icons.html#icons-product-icons](http://www.google.com/design/spec/style/icons.html#icons-product-icons).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以参考官方Google应用程序图标设计指南：[http://www.google.com/design/spec/style/icons.html#icons-product-icons](http://www.google.com/design/spec/style/icons.html#icons-product-icons)。
- en: The application versioning scheme
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**应用程序版本控制方案**'
- en: 'The application versioning scheme is used to track different build versions.
    This also helps notify a user when there is an upgrade version of the application
    available for download. Android uses the following two different manifest attributes
    to define the build version information:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序版本控制方案用于跟踪不同的构建版本。这也帮助在应用程序有可下载的升级版本时通知用户。Android使用以下两个不同的清单属性来定义构建版本信息：
- en: '`android:versionCode`: This is an integer value that represents the current
    build version of the application. Internally, Google Play uses this property to
    handle the build update process such as notifying the user when a new version
    of the app is available. You must increase the value of `versionCode` for each
    successive release.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:versionCode`：这是一个表示应用程序当前构建版本的整数值。内部，Google Play使用此属性来处理构建更新过程，例如在应用程序的新版本可用时通知用户。您必须为每个后续版本增加`versionCode`的值。'
- en: '`android:verionName`: This is a string that represents the release version
    of the application. This version code will be displayed publicly to the user on
    Google Play. Note that this string is not made mandatory on Google Play and is
    not used internally, but it is just displayed it to the user.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:versionName`：这是一个表示应用程序发布版本的字符串。此版本代码将在Google Play上向用户公开显示。请注意，此字符串在Google
    Play上不是强制性的，也不在内部使用，但它只是向用户显示。'
- en: 'Both of these attributes can be set either from the **Project Options** window
    or from the application manifest file:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个属性可以从**项目选项**窗口或应用程序清单文件中设置：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Review user permissions
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 审查用户权限
- en: 'The Android application must declare the list of permissions it requires for
    accessing certain features in the app. Android app permissions are declared in
    the `AndroidManifest.xml` file using the `&lt;uses-permission&gt;` tag. When an
    application is being installed on the user device, the Android system reads the
    manifest file and displays the list to the user. The user must decide to allow
    the permissions for the installation to complete. The following screenshot depicts
    the app permissions dialog while downloading the Facebook mobile app:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓应用程序必须声明它需要访问应用程序中某些功能的权限列表。安卓应用程序权限在`AndroidManifest.xml`文件中使用`<uses-permission>`标签声明。当应用程序正在用户设备上安装时，安卓系统读取清单文件并向用户显示列表。用户必须决定允许权限以完成安装。以下截图显示了下载Facebook移动应用程序时的应用程序权限对话框：
- en: '![](img/aInBxN41.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/aInBxN41.jpg)'
- en: While preparing a release version build of your application, verify that your
    app manifest file defines only the permissions that are required for your application.
    For example, a camera application that requests for the read call log permission
    could be a reason for annoyance with a high degree of a chance for the user to
    not download your application.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在准备应用程序的发布版本构建时，请确保您的应用程序清单文件仅定义了应用程序所需的权限。例如，一个请求读取通话记录权限的相机应用程序可能会引起用户的不满，并且有很高的可能性用户不会下载您的应用程序。
- en: Publishing a signed APK for uploading
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布用于上传的已签名APK
- en: Once we have completed all the previous steps, we will proceed to the final
    step of preparing a signed APK to be published on different app stores. The following
    sections discuss the steps of producing a signed APK from within Xamarin Studio.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所有之前的步骤后，我们将进入最后一步，准备一个用于在不同应用商店发布的已签名APK。以下部分将讨论在Xamarin Studio内部生成已签名APK的步骤。
- en: Android keystores
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Android密钥库
- en: A **keystore** is a database of security certificates created and managed by
    the **keytool** program from the Java SDK. The keystore is an important aspect
    of creating a release version of the Android app. The Android device cannot run
    applications that have not been digitally signed. This may come as some surprise
    because we have been running our app for some time now. During the development
    process, Xamarin.Android uses a **debug keystore** that signs the build while
    running the application from an IDE, and as such the apps to run on the device.
    This keystore works for debugging purposes only, but will not be recognized as
    a valid keystore for the distribution of released apps.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**密钥库**是由Java SDK中的**keytool**程序创建和管理的安全证书数据库。密钥库是创建安卓应用程序发布版本的重要方面。安卓设备无法运行未经数字签名的应用程序。这可能有些令人惊讶，因为我们已经运行了我们的应用程序一段时间了。在开发过程中，Xamarin.Android使用**调试密钥库**在从IDE运行应用程序时对构建进行签名，并且因此运行在设备上的应用程序。这个密钥库仅用于调试目的，但不会被视为发布应用程序的分发有效密钥库。'
- en: A keystore must be kept safe as the same keystore key is required for publishing
    all of the future versions of an application. If a keystore is lost, it will not
    be possible to publish updates to an app on Google Play. The only solution would
    be to create a new keystore and publish the new version as a completely new app.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥库必须得到妥善保管，因为发布应用程序所有未来版本都需要相同的密钥库密钥。如果密钥库丢失，将无法在Google Play上发布应用程序的更新。唯一的解决方案是创建一个新的密钥库，并将新版本作为全新的应用程序发布。
- en: 'A keystore can be created using a **keytool** and **jarsigner** command-line
    tool available in Java JDK. The following command is used to create a keystore
    using the Java keytool utility:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用Java JDK中提供的**keytool**和**jarsigner**命令行工具创建密钥库。以下命令用于使用Java keytool工具创建密钥库：
- en: '![](img/Zb4RUfjg.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Zb4RUfjg.jpg)'
- en: Note that the preceding command prompts the user to provide the password and
    other required details in order to generate the **release.keystore** key.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，前面的命令提示用户提供密码和其他必需的详细信息以生成**release.keystore**密钥。
- en: While the command-line keytool utility can be used directly to create and manage
    keystores, Xamarin.Android provides a user interface to the tool, which is integrated
    into the publishing process. The following section will guide you with the steps
    to create a keystore and prepare a signed Android build for publishing.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可以直接使用命令行keytool工具创建和管理keystore，但Xamarin.Android提供了一个用户界面来访问此工具，该界面集成到发布过程中。以下部分将指导您创建keystore并为发布准备签名Android构建。
- en: Publishing from Xamarin.Android
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从Xamarin.Android发布
- en: 'The following steps will guide you through creating a new keystore as part
    of the process while creating a signed `.apk` file:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导您在创建签名`.apk`文件的过程中创建新的keystore：
- en: In the **Run Configuration** drop-down box, select the **Release** option:![](img/fpt2MwXn.jpg)
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**运行配置**下拉框中，选择**发布**选项：![运行配置](img/fpt2MwXn.jpg)
- en: Navigate to the **Build** | **Achieve for Publishing** option in the Xamarin
    Studio toolbar. You will see a list of the latest `POIApp` builds, as shown in
    the following screenshot. If you have never build your code, it will build and
    generate one for you:![](img/OOxtJgQS.jpg)
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Xamarin Studio工具栏中导航到**构建**|**发布准备**选项。您将看到最新的`POIApp`构建列表，如下截图所示。如果您从未构建过代码，它将为您构建并生成一个：![构建列表](img/OOxtJgQS.jpg)
- en: 'Select the latest build from the list and click on the **Sign and Distribute…**
    button from the bottom-right corner. You will see two options: **Ad-Hoc** or **Google
    Play**. If you select the **Ad-Hoc** option, it will create a build and save it
    in your disk. You need to manually publish the app to Google Play. However, the
    **Google Play** option allows you to distribute your app on Google Play directly
    from Xamarin Studio.'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从列表中选择最新构建，然后单击底部的右下角的**签名和分发…**按钮。您将看到两个选项：**临时**或**Google Play**。如果您选择**临时**选项，它将创建一个构建并将其保存在您的磁盘上。您需要手动将应用发布到Google
    Play。然而，**Google Play**选项允许您直接从Xamarin Studio将应用发布到Google Play。
- en: 'However, it is always a good idea to create a signed build and save it in your
    computer so that you can verify all the features before publishing it to Google
    Play:'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而，始终创建一个签名构建并将其保存在您的计算机上是一个好主意，这样您可以在将其发布到Google Play之前验证所有功能：![创建新密钥](img/fi7OrH2o.jpg)
- en: '![](img/y0zfZ2ZF.jpg)'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![导入现有密钥](img/y0zfZ2ZF.jpg)'
- en: 'Let''s select **Ad-Hoc** and click on **Next**. Notice that it will open the
    **Android Signing Identity** wizard with two buttons: **Create a New Key** and
    **Import an Existing Key**. If you have created the keystore using the Java keytool
    command-line utility as explained earlier, you will need to directly select **Import
    Existing Key**.'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们选择**临时**并单击**下一步**。注意，它将打开**Android签名身份**向导，带有两个按钮：**创建新密钥**和**导入现有密钥**。如果您之前使用Java
    keytool命令行工具创建了keystore，您需要直接选择**导入现有密钥**。
- en: In this example, I have selected **Create a New Key** button to demonstrate
    how Xamarin Studio facilitates the process of creating a new keystore.
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此示例中，我已选择**创建新密钥**按钮来演示Xamarin Studio如何简化创建新keystore的过程。
- en: Select **Create a New Key** button.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**创建新密钥**按钮。
- en: Fill in all of the required details, such as alias, password, full name, validity,
    and so on, and then select **OK** to confirm:![](img/fi7OrH2o.jpg)
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写所有必需的详细信息，例如别名、密码、全名、有效期等，然后选择**确定**以确认：![填写详细信息](img/fi7OrH2o.jpg)
- en: It will create a new key and display the **Android Signing Identity** dialog.
    Select the key and click on **Next**.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它将创建一个新密钥并显示**Android签名身份**对话框。选择密钥并单击**下一步**。
- en: Notice that it will display a confirmation dialog, as shown in the following
    screenshot:![](img/faPYUaIb.jpg)
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，它将显示一个确认对话框，如下截图所示：![确认对话框](img/faPYUaIb.jpg)
- en: Select **Publish**. It will prompt you to select the location to save the apk
    file. As prompted, you need to provide the keystore password while generating
    the signed APK:![](img/avi4HWgt.jpg)
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**发布**。它将提示您选择保存apk文件的存储位置。按照提示，在生成签名APK时，您需要提供keystore密码：![生成签名APK](img/avi4HWgt.jpg)
- en: The resulting APK is ready for final testing and potential distribution.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的APK已准备好进行最终测试和潜在的分发。
- en: Republishing the app
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新发布应用
- en: The keystore that was created while deploying the very first version of an application
    is very important and should be kept safe. The keystore, alias, and passwords
    should be kept secure so that only those authorized to publish a new version of
    the app will have access to them.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署应用程序的第一个版本时创建的密钥库非常重要，应该保持安全。密钥库、别名和密码应该保持安全，以确保只有有权发布应用程序新版本的授权人员才能访问它们。
- en: Different app distribution options
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不同的应用分发选项
- en: 'Android developers have a number of options for distributing their applications,
    which include the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Android开发者有几种分发应用程序的选项，包括以下内容：
- en: Self-publishing via a private Cloud or via website links
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过私有云或网站链接自发布
- en: Distributing via e-mail attachments
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过电子邮件附件分发
- en: Publishing in Google Play
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Google Play上发布
- en: Publishing in third-party app stores
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第三方应用商店发布
- en: Self-publishing via website links or e-mails
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过网站链接或电子邮件自发布
- en: Website links and e-mail attachments are pretty straightforward, easy to accomplish,
    and may be suitable for some apps that are used internally by a company or by
    a small group of associates.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 网站链接和电子邮件附件相当直接，易于完成，可能适合一些公司内部使用或由一小群合作伙伴使用的应用程序。
- en: 'Prior to installing apps from a website link or an e-mail attachment, you must
    first update your device security settings to allow apps to be installed from
    **Unknown sources**. Let''s take a look at the following screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在从网站链接或电子邮件附件安装应用程序之前，你必须首先更新你的设备安全设置，以允许从**未知来源**安装应用程序。让我们看看以下截图：
- en: '![](img/EVdkKSLM.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/EVdkKSLM.jpg)'
- en: After enabling this option, you will be prompted to install an app when selecting
    an e-mail attachment or a web link that is an APK.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 启用此选项后，当你选择电子邮件附件或包含APK的网页链接时，将提示你安装应用程序。
- en: 'Note that for general consumers, website links and e-mails as a means of distribution
    are not ideal. Marketplaces such as Google Play and Amazon Appstore provide significant
    advantages over self-publishing methods. The following are some of the advantages
    of distributing your application via an app store:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，对于普通消费者来说，网站链接和电子邮件作为分发手段并不理想。像Google Play和Amazon Appstore这样的市场与自发布方法相比提供了显著的优势。以下是通过应用商店分发应用程序的一些优势：
- en: Most app stores provide a review process to ensure that apps are not malicious
    in nature. Google has recently introduced an app store review process that verifies
    the violation of the Android developer policy, build size, permissions, and so
    on. The review process strengthens the Android community and helps to build consumers'
    trust.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数应用商店都提供审查流程，以确保应用程序不是恶意的。谷歌最近推出了一种应用商店审查流程，该流程验证了违反Android开发者政策、构建大小、权限等问题。审查流程加强了Android社区，并有助于建立消费者的信任。
- en: Provides a robust infrastructure to reach out to millions of consumers by distributing
    apps on App Store.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在App Store上分发应用程序提供强大的基础设施，以接触数百万消费者。
- en: Promotes apps and allow content rating from consumers.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推广应用程序并允许消费者进行内容评级。
- en: Handles financial settlements for applications that use subscriptions or purchases.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理使用订阅或购买的应用程序的财务结算。
- en: Publishing on Google Play
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Google Play上发布
- en: Google Play is an ideal marketplace to upload and distribute your application
    to a wider range of audience. It is a single platform that allows an app publisher
    to distribute, advertise, make dollars by selling your app, and analyze the usage
    and stats of your application. On the other hand, every Android device is shipped
    with a Google Play Android app through which your published application will be
    discovered and downloaded to users.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Google Play是一个理想的市场，可以上传和分发你的应用程序给更广泛的受众。这是一个单一的平台，允许应用发布者分发、广告、通过销售你的应用程序赚钱，并分析应用程序的使用和统计数据。另一方面，每台Android设备都预装了Google
    Play Android应用程序，通过这个应用程序，你的发布的应用程序将被发现并下载给用户。
- en: Before your application is pushed into the wild, it is always valuable to get
    some real-world feedback from users. Developers prefer to distribute an alpha/beta
    version of their application to a group of users and gather feedback. Beta testing
    helps you get the early feedback from real users and address them before heading
    to the production move.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的应用程序推向市场之前，从用户那里获得一些真实的反馈总是很有价值的。开发者倾向于将应用程序的alpha/beta版本分发给一组用户并收集反馈。Beta测试可以帮助你从真实用户那里获得早期反馈，并在进入生产阶段之前解决这些问题。
- en: Google Play allows you to set up and distribute the alpha beta staging release
    of your app. After the release version of your application is prepared and uploaded
    to the beta stage, you can invite a group of testers to whom you would like to
    distribute your application. The testers with an invitation can download the app,
    provide the feedback, and rate your application. This book does not include the
    detailed steps to use the Google Play beta testing program. For more details,
    you can visit [http://developer.android.com/distribute/tools/launch-checklist.html](http://developer.android.com/distribute/tools/launch-checklist.html).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Google Play 允许您设置和分发您应用的 alpha 和 beta 阶段发布版本。在准备并上传到 beta 阶段的应用程序发布版本后，您可以邀请一组您希望分发应用的测试者。收到邀请的测试者可以下载应用，提供反馈并评分您的应用。本书不包括使用
    Google Play 测试计划的详细步骤。如需更多详情，您可以访问 [http://developer.android.com/distribute/tools/launch-checklist.html](http://developer.android.com/distribute/tools/launch-checklist.html)。
- en: 'To publish your application to Google Play, you need to follow some of the
    specific steps described as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要将您的应用程序发布到 Google Play，您需要遵循以下描述的一些具体步骤：
- en: To distribute apps on Google Play, you will require a developer account. To
    register as a developer, there is a one time registration fee of $25 USD. You
    can follow the on-screen instructions to register as a developer, which is available
    at [https://play.google.com/apps/publish/signup/](https://play.google.com/apps/publish/signup/).
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在 Google Play 上分发应用，您需要一个开发者账户。要注册为开发者，需要一次性注册费 25 美元。您可以根据屏幕上的说明注册为开发者，注册链接为
    [https://play.google.com/apps/publish/signup/](https://play.google.com/apps/publish/signup/)。
- en: 'Prepare the promotional assets such as graphics, video, and promotional messages
    required while uploading your application. The following is the list:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备在上传应用程序时所需的宣传资产，如图形、视频和宣传信息。以下是一份列表：
- en: Prepare the promotional messages, including an application title, a short description,
    and a full description
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备宣传信息，包括应用程序标题、简短描述和完整描述
- en: High-resolution application icons of size 512 w x 512 h
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高分辨率的应用程序图标，尺寸为 512 w x 512 h
- en: Feature graphic of size 1024 w x 500 h
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特征图形，尺寸为 1024 w x 500 h
- en: Promo graphic of size 180 w x 120 h
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宣传图形，尺寸为 180 w x 120 h
- en: An optional promo YouTube video showcasing your application
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示您应用的可选宣传 YouTube 视频
- en: Once you are ready with the release version of APK and the promotional contents,
    the application can be uploaded to Google Play. This is done by logging to the
    Google Play publisher dashboard:![](img/S2d52OQ0.jpg)
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦准备好 APK 的发布版本和宣传内容，应用程序就可以上传到 Google Play。这是通过登录 Google Play 发布者仪表板完成的：![img/S2d52OQ0.jpg](img/S2d52OQ0.jpg)
- en: Click on the **Add new application** button to help you with the process of
    uploading an APK:![](img/iRs16e1G.jpg)
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加新应用**按钮以帮助您上传 APK 的过程：![img/iRs16e1G.jpg](img/iRs16e1G.jpg)
- en: Provide a **Title** for your app to be displayed on Google Play and click on
    **Upload APK**.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的应用在 Google Play 上显示的**标题**提供标题，并点击**上传 APK**。
- en: Once the APK is uploaded, you need to complete the **Store listing** details
    by uploading the required screenshots and other promotional materials.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦上传了 APK，您需要通过上传所需的截图和其他宣传材料来完成**商店列表**的详细信息。
- en: While uploading, all the apps must be rated according to the Google Play ratings
    system. To learn more about the new content rating system, you can refer to [https://support.google.com/googleplay/android-developer/answer/188189](https://support.google.com/googleplay/android-developer/answer/188189).
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上传过程中，所有应用都必须根据 Google Play 评分系统进行评分。要了解更多关于新的内容评分系统，您可以参考 [https://support.google.com/googleplay/android-developer/answer/188189](https://support.google.com/googleplay/android-developer/answer/188189)。
- en: The **Pricing and Distribution** tab on the dashboard allows you to select the
    geo location for your app availability.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仪表板上的**定价和分发**选项卡允许您选择应用可用的地理位置。
- en: Once you furnish all the particulars required, you can now click on the **Publish
    app** button to make your application live for download.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦提供所有必要的详细信息，您现在可以点击**发布应用**按钮，使您的应用可供下载。
- en: Third-party app stores
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第三方应用商店
- en: Google Play is not the only option available to distribute your application
    to the world. You should consider using other distribution channels such as Mall.Soc.io
    ([http://soc.io/apps](http://soc.io/apps)), GetJar ([http://www.getjar.com/](http://www.getjar.com/)),
    Amazon Appstore, and so on. There is no restriction imposed on Google for redistributing
    the same application on other marketplaces. Consider all the available options
    to make the most of your efforts.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Google Play并非是您将应用程序分发到全球的唯一选择。您应该考虑使用其他分发渠道，例如Mall.Soc.io ([http://soc.io/apps](http://soc.io/apps))、GetJar
    ([http://www.getjar.com/](http://www.getjar.com/))、Amazon Appstore等等。Google没有对在其他市场重新分发相同的应用程序施加任何限制。考虑所有可用的选项，以充分利用您的努力。
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we briefly discussed the process to prepare and sign the release
    version of an APK. We also discussed the different app distribution channels that
    are available to developers for distributing the Android apps.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们简要讨论了准备和签名APK发布版本的过程。我们还讨论了开发者可用的不同应用程序分发渠道。
- en: We have now completed the `POIApp` app that exercises many of the Xamarin.Android
    features you will need while developing a professional Android application. However,
    there are tons of great features in Android that remained undiscovered in this
    book, which include audio, video, face recognition, Bluetooth, NFC, and so on.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了`POIApp`应用程序，该应用程序练习了您在开发专业Android应用程序时将需要的许多Xamarin.Android功能。然而，本书中还有许多伟大的功能尚未被发现，包括音频、视频、面部识别、蓝牙、NFC等等。
- en: In the context of this starter guide, we simply do not have enough space to
    cover all features that are supported in Android. Make sure that you explore the
    [http://developer.android.com/index.html](http://developer.android.com/index.html)
    and [http://developer.xamarin.com/](http://developer.xamarin.com/) to enhance
    your knowledge on the other interesting Android features.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在本入门指南的背景下，我们简单地没有足够的空间涵盖Android支持的所有功能。请确保您访问[http://developer.android.com/index.html](http://developer.android.com/index.html)和[http://developer.xamarin.com/](http://developer.xamarin.com/)以增强您对其他有趣Android功能的了解。
- en: I wish you good luck with the Xamain.Android development! Happy coding!
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我祝愿你在Xamain.Android开发中好运！快乐编码！
