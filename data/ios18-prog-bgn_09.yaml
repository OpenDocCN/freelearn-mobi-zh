- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Protocols, Extensions, and Error Handling
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 协议、扩展和错误处理
- en: In the previous chapter, you learned how to represent complex objects using
    classes or structures and how to use enumerations to group related values together.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了如何使用类或结构体来表示复杂对象，以及如何使用枚举将相关值分组在一起。
- en: In this chapter, you’ll learn about **protocols**, **extensions**, and **error
    handling**. Protocols define a blueprint of methods, properties, and other requirements
    that can be adopted by a class, structure, or enumeration. Extensions enable you
    to provide new functionality for an existing class, structure, or enumeration.
    Error handling covers how to respond to and recover from errors in your program.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解**协议**、**扩展**和**错误处理**。协议定义了一个方法、属性和其他要求的蓝图，这些可以由类、结构体或枚举采用。扩展使你能够为现有的类、结构体或枚举提供新功能。错误处理涵盖了如何响应和从程序中的错误中恢复。
- en: By the end of this chapter, you’ll be able to write your own protocols to meet
    the requirements of your apps, use extensions to add new capabilities to existing
    types, and handle error conditions in your apps without crashing.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够编写自己的协议以满足你应用程序的需求，使用扩展为现有类型添加新功能，并在你的应用程序中处理错误条件而不会崩溃。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Exploring protocols
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索协议
- en: Exploring extensions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索扩展
- en: Exploring error handling
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索错误处理
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The Xcode playground for this chapter is in the `Chapter08` folder of the code
    bundle for this book, which can be downloaded here:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的Xcode游乐场位于本书代码包的`Chapter08`文件夹中，可以在此处下载：
- en: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，看看代码的实际应用：
- en: '[https://youtu.be/fV6VNlDyyG0](https://youtu.be/fV6VNlDyyG0%0D)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://youtu.be/fV6VNlDyyG0](https://youtu.be/fV6VNlDyyG0)'
- en: If you wish to start from scratch, create a new playground and name it `ProtocolsExtensionsAndErrorHandling`.
    You can type in and run all the code in this chapter as you go along. Let’s start
    with protocols, which is a way of specifying the properties and methods that a
    class, structure, or enumeration should have.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望从头开始，创建一个新的游乐场，并将其命名为`ProtocolsExtensionsAndErrorHandling`。你可以一边输入一边运行本章中的所有代码。让我们从协议开始，这是一种指定类、结构体或枚举应该具有的属性和方法的方式。
- en: Exploring protocols
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索协议
- en: Protocols are like blueprints that determine what properties or methods an object
    must have. After you’ve declared a protocol, classes, structures, and enumerations
    can adopt it and provide their own implementation for the required properties
    and methods.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 协议就像蓝图，决定了对象必须拥有的属性或方法。在你声明了一个协议之后，类、结构体和枚举可以采用它，并为所需的属性和方法提供自己的实现。
- en: 'Here’s what a protocol declaration looks like:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是协议声明的样子：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Just like classes and structures, protocol names start with an uppercase letter.
    Properties are declared using the `var` keyword. You use `{get set}` if you want
    a property that can be read from or written to, and you use `{get}` if you want
    a read-only property. Note that you just specify property and method names; the
    implementation is done within the adopting class, structure, or enumeration.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 就像类和结构体一样，协议名称以大写字母开头。属性使用`var`关键字声明。如果你想有一个可读可写的属性，你使用`{get set}`，如果你想有一个只读属性，你使用`{get}`。请注意，你只需指定属性和方法名称；实现是在采用类、结构体或枚举内部完成的。
- en: For more information on protocols, visit [https://docs.swift.org/swift-book/documentation/the-swift-programming-language/protocols](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/protocols).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于协议的信息，请访问[https://docs.swift.org/swift-book/documentation/the-swift-programming-language/protocols](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/protocols)。
- en: 'To help you understand protocols, imagine an app used by a fast-food restaurant.
    The management has decided to show calorie counts for the meals being served.
    The app currently has the following class, structure, and enumeration, and none
    of them have calorie counts implemented:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助你理解协议，想象一个快餐店使用的应用程序。管理层已经决定显示正在提供的餐点的卡路里含量。该应用程序目前有以下类、结构体和枚举，它们都没有实现卡路里含量：
- en: A `Burger` class
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`Burger`类
- en: A `Fries` structure
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`Fries`结构体
- en: A `Sauce` enumeration
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`Sauce`枚举
- en: 'Add the following code to your playground to declare the `Burger` class, the
    `Fries` structure, and the `Sauce` enumeration:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到您的游乐场中，以声明`Burger`类、`Fries`结构和`Sauce`枚举：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: These represent the existing class, structure, and enumeration in the app. Don’t
    worry about the empty definitions, as they are not required for this lesson. As
    you can see, none of them have calorie counts at present. Let’s learn how to create
    a protocol that specifies the properties and methods needed to implement calorie
    counts. You’ll start by declaring this protocol in the next section.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这些代表应用中现有的类、结构和枚举。不用担心空定义，因为它们对于本课程不是必需的。如您所见，它们目前都没有卡路里计数。让我们学习如何创建一个指定实现卡路里计数所需属性和方法协议。您将在下一节中声明此协议。
- en: Creating a protocol declaration
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建协议声明
- en: 'Let’s create a protocol that specifies a required property, `calories`, and
    a method, `description()`. Type the following into your playground before the
    class, structure, and enumeration declarations:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个协议，该协议指定一个必需的属性`calories`和一个方法`description()`。在类、结构和枚举声明之前，将以下内容输入到您的游乐场中：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This protocol is named `CalorieCountable`. It specifies that any object that
    adopts it must have a property, `calories`, that holds the calorie count, and
    a method, `description()`, that returns a string.`{ get }` means that you only
    need to be able to read the value stored in `calories`, and you don’t have to
    write to it. Note that the definition of the `description()` method is not specified,
    as that will be done in the class, structure, or enumeration. All you need to
    do to adopt a protocol is type a colon after the class name, followed by the protocol
    name, and implement the required properties and methods.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此协议命名为`CalorieCountable`。它指定了采用它的任何对象必须有一个属性`calories`，该属性包含卡路里计数，以及一个返回字符串的方法`description()`。`{
    get }`表示您只需能够读取存储在`calories`中的值，而无需写入它。请注意，`description()`方法的定义没有指定，因为这将在类、结构或枚举中完成。您要采用协议只需在类名后键入一个冒号，然后是协议名，并实现所需的属性和方法。
- en: 'To make the `Burger` class conform to this protocol, modify your code as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要使`Burger`类符合此协议，请按以下方式修改您的代码：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, the `calories` property and the `description()` method have
    been added to the `Burger` class. Even though the protocol specifies a variable,
    you can use a constant here because the protocol only requires that you get the
    value for `calories`, not set it.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`calories`属性和`description()`方法已添加到`Burger`类中。尽管协议指定了一个变量，但您在这里可以使用一个常量，因为协议只要求您获取`calories`的值，而不需要设置它。
- en: 'Let’s make the `Fries` structure adopt this protocol as well. Modify your code
    for the `Fries` structure as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们让`Fries`结构也采用此协议。按以下方式修改您的`Fries`结构代码：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The code added to the `Fries` structure is similar to that added to the `Burger`
    class, and it now conforms to the `CalorieCountable` protocol as well.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 添加到`Fries`结构的代码与添加到`Burger`类的代码类似，并且它现在也符合`CalorieCountable`协议。
- en: You could modify the `Sauce` enumeration in the same way, but let’s do it using
    extensions instead. Extensions extend the capabilities of an existing class, structure,
    or enumeration. You’ll add the `CalorieCountable` protocol to the `Sauce` enumeration
    using an extension in the next section.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以以相同的方式修改`Sauce`枚举，但让我们使用扩展来实现。扩展可以扩展现有类、结构或枚举的功能。您将在下一节中使用扩展将`CalorieCountable`协议添加到`Sauce`枚举中。
- en: Exploring extensions
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索扩展
- en: 'Extensions allow you to provide extra capabilities to an object without modifying
    the original object definition. You can use them on Apple-provided objects (where
    you don’t have access to the object definition) or when you wish to segregate
    your code for readability and ease of maintenance. Here’s what an extension looks
    like:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展允许您在不修改原始对象定义的情况下向对象提供额外的功能。您可以在Apple提供的对象上使用它们（您无法访问对象定义的地方）或当您希望将代码分离以提高可读性和易于维护时。以下是一个扩展的示例：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, an extension is used to provide an additional property and method to an
    existing class.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，扩展被用来向现有类提供额外的属性和方法。
- en: For more information on extensions, visit [https://docs.swift.org/swift-book/documentation/the-swift-programming-language/extensions](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/extensions).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于扩展的信息，请访问[https://docs.swift.org/swift-book/documentation/the-swift-programming-language/extensions](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/extensions)。
- en: Let’s look at how to use extensions. You’ll start by making the `Sauce` enumeration
    conform to the `CalorieCountable` protocol using an extension in the next section.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用扩展。您将首先通过在下一节中使用扩展使 `Sauce` 枚举符合 `CalorieCountable` 协议。
- en: Adopting a protocol via an extension
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过扩展采用协议
- en: 'At present, the `Sauce` enumeration does not conform to the `CalorieCountable`
    protocol. You’ll use an extension to add the properties and methods required to
    make it conform. Type in the following code after the declaration for the `Sauce`
    enumeration:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，`Sauce` 枚举不符合 `CalorieCountable` 协议。您将使用扩展来添加使其符合所需的属性和方法。在 `Sauce` 枚举声明之后输入以下代码：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you can see, no changes were made to the original definition for the `Sauce`
    enumeration. This is also useful if you want to extend the capabilities of existing
    Swift standard types, such as `String` and `Int`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，对 `Sauce` 枚举的原定义没有进行任何更改。如果您想扩展现有的 Swift 标准类型的功能，如 `String` 和 `Int`，这也很有用。
- en: Enumeration instances can’t store values in properties the way structures and
    classes can, so a `switch` statement is used to return the number of calories
    based on the enumeration’s value. The `description()` method is the same as the
    one in the `Burger` class and the `Fries` structure.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举实例不能像结构体和类那样在属性中存储值，因此使用 `switch` 语句根据枚举的值返回卡路里数。`description()` 方法与 `Burger`
    类和 `Fries` 结构体中的相同。
- en: All three objects have a `calories` property and a `description()` method. Great!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 所有三个对象都有一个 `calories` 属性和一个 `description()` 方法。太棒了！
- en: Let’s see how you can put them in an array and perform an operation to get the
    total calorie count for a meal in the next section.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在下一节中将它们放入数组中，并执行操作以获取餐点的总卡路里数。
- en: Creating an array of different types of objects
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建不同类型对象的数组
- en: 'Ordinarily, an array’s elements must be of the same type. However, since the
    `Burger` class, the `Fries` structure, and the `Sauce` enumeration all conform
    to the `CalorieCountable` protocol, you can make an array that contains elements
    conforming to this protocol. Follow these steps:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，数组的元素必须是同一类型。然而，由于 `Burger` 类、`Fries` 结构体和 `Sauce` 枚举都符合 `CalorieCountable`
    协议，您可以创建一个包含符合此协议的元素的数组。按照以下步骤操作：
- en: 'To add instances of the `Burger` class, the `Fries` structure, and the `Sauce`
    enumeration to an array, type in the following code after all other code in the
    file:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将 `Burger` 类的实例、`Fries` 结构体和 `Sauce` 枚举的实例添加到数组中，在文件中的所有其他代码之后输入以下代码：
- en: '[PRE7]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To get the total calorie count, add the following code after the line where
    you created the `foodArray` constant:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取总卡路里数，在创建 `foodArray` 常量之后的行中添加以下代码：
- en: '[PRE8]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `reduce` method is used to produce a single value from the elements of the
    `foodArray` array. The first parameter of this method is the initial value, and
    it is set to `0`. The second parameter is a closure that combines the initial
    value with the value stored in an element’s `calories` property. This is repeated
    for each element in the `foodArray` array and the result is assigned to `totalCalories`.
    The total amount, **1315**, will be displayed in the Debug area.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`reduce` 方法用于从 `foodArray` 数组的元素中生成一个单一值。此方法的第一参数是初始值，设置为 `0`。第二个参数是一个闭包，它将初始值与一个元素的
    `calories` 属性中存储的值组合。这将对 `foodArray` 数组中的每个元素重复进行，并将结果分配给 `totalCalories`。总数量，**1315**，将在调试区域显示。'
- en: You have learned how to create a protocol and make a class, structure, or enumeration
    conform to it, either within the class definition or via extensions. Let’s look
    at error handling next, and see how to respond to or recover from errors in your
    program.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经学习了如何创建一个协议，并使类、结构体或枚举符合它，无论是通过类定义还是通过扩展。让我们接下来看看错误处理，并了解如何在程序中响应或恢复错误。
- en: Exploring error handling
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索错误处理
- en: When you write apps, bear in mind that error conditions may happen, and error
    handling is how your app responds to and recovers from such conditions.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当您编写应用程序时，请记住可能会发生错误条件，错误处理是您的应用程序如何响应和从这些条件中恢复的方式。
- en: First, you create a type that conforms to Swift’s `Error` protocol, which lets
    this type be used for error handling. Enumerations are normally used, as you can
    specify associated values for different kinds of errors. When something unexpected
    happens, you can stop program execution by throwing an error. You use the `throw`
    statement for this and provide an instance of the type conforming to the `Error`
    protocol, with the appropriate value. This allows you to see what went wrong.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你创建一个符合Swift的`Error`协议的类型，这使得该类型可用于错误处理。枚举通常被使用，因为你可以为不同类型的错误指定关联值。当发生意外情况时，你可以通过抛出错误来停止程序执行。你使用`throw`语句来完成此操作，并提供一个符合`Error`协议的类型的实例，并带有适当的值。这允许你看到出了什么问题。
- en: 'Of course, it would be better if you could respond to an error without stopping
    your program. For this, you can use a `do-catch` block, which looks like this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果你能在不停止程序的情况下响应错误，那就更好了。为此，你可以使用`do-catch`块，它看起来像这样：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, you attempt to execute code in the `do` block using the `try` keyword.
    If an error is thrown, the statements in the `catch` block are executed. You can
    have multiple `catch` blocks to handle different error types.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你尝试使用`try`关键字在`do`块中执行代码。如果抛出错误，`catch`块中的语句将被执行。你可以有多个`catch`块来处理不同类型的错误。
- en: For more information on error handling, visit [https://docs.swift.org/swift-book/documentation/the-swift-programming-language/errorhandling](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/errorhandling).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于错误处理的信息，请访问[https://docs.swift.org/swift-book/documentation/the-swift-programming-language/errorhandling](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/errorhandling)。
- en: As an example, let’s say you have an app that needs to access a web page. However,
    if the server where that web page is located is down, it is up to you to write
    the code to handle the error, such as trying an alternative web server or informing
    the user that the server is down.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你有一个需要访问网页的应用程序。然而，如果该网页所在的服务器宕机，你需要编写代码来处理错误，例如尝试使用备用网页服务器或通知用户服务器已宕机。
- en: 'Let’s create an enumeration that conforms to the `Error` protocol, use a `throw`
    statement to stop program execution when an error occurs, and use a `do-catch`
    block to handle an error. Follow these steps:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个符合`Error`协议的枚举，当发生错误时使用`throw`语句停止程序执行，并使用`do-catch`块来处理错误。按照以下步骤操作：
- en: 'Type the following code into your playground:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码输入到你的playground中：
- en: '[PRE10]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This declares an enumeration, `WebsiteError`, that adopts the `Error` protocol.
    It covers three possible error conditions: there is no internet connection, the
    website is down, or the URL cannot be resolved.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这声明了一个符合`Error`协议的枚举`WebsiteError`，它涵盖了三种可能的错误条件：没有互联网连接、网站宕机或URL无法解析。
- en: 'Type the following code after the `WebsiteError` definition to declare a function
    that checks if a website is up after the `WebpageError` declaration:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`WebsiteError`定义之后输入以下代码以声明一个函数，该函数在`WebpageError`声明之后检查网站是否可用：
- en: '[PRE11]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If `siteUp` is `true`, `"Site is up"` is returned. If `siteUp` is `false`, the
    program will stop executing and throw an error.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`siteUp`为`true`，则返回`"Site is up"`。如果`siteUp`为`false`，程序将停止执行并抛出错误。
- en: 'Type the following code after the `checkWebsite(siteUp:)` function definition
    and run your program:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`checkWebsite(siteUp:)`函数定义之后输入以下代码并运行你的程序：
- en: '[PRE12]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Since `siteStatus` is `true`, **Site is up** will appear in the Results area.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`siteStatus`为`true`，**Site is up**将出现在结果区域。
- en: 'Change the value of `siteStatus` to `false` and run your program. Your program
    crashes and the following error message is displayed in the Debug area:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`siteStatus`的值更改为`false`并运行你的程序。你的程序会崩溃，并在调试区域显示以下错误消息：
- en: '[PRE13]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Of course, it is always better if you can handle errors without making your
    program crash. You can do this by using a `do-catch` block. Modify your code as
    shown and run it:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当然，如果你能在不使程序崩溃的情况下处理错误，那就更好了。你可以通过使用`do-catch`块来实现这一点。按照以下所示修改你的代码并运行它：
- en: '[PRE14]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `do` block tries to execute the `checkWebsite(siteUp:)` function and prints
    the status if successful. If there is an error, instead of crashing, the statements
    in the `catch` block are executed, and the error message `siteDown` appears in
    the Debug area.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`do`块尝试执行`checkWebsite(siteUp:)`函数，并在成功时打印状态。如果有错误发生，而不是崩溃，`catch`块中的语句将被执行，错误消息`siteDown`将出现在调试区域。'
- en: 'You can make your program handle different error conditions by implementing
    multiple `catch` blocks. See this link for details: [https://docs.swift.org/swift-book/documentation/the-swift-programming-language/errorhandling](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/errorhandling).'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过实现多个`catch`块来让你的程序处理不同的错误条件。有关详细信息，请参阅此链接：[https://docs.swift.org/swift-book/documentation/the-swift-programming-language/errorhandling](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/errorhandling)。
- en: You have learned how to handle errors in your app without making it crash. Great!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经学会了如何在应用程序中处理错误而不会导致其崩溃。太棒了！
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to write protocols and how to make classes,
    structures, and enumerations conform to them. You also learned how to extend the
    capabilities of a class by using an extension. Finally, you learned how to handle
    errors using the `do-catch` block.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何编写协议以及如何使类、结构和枚举符合这些协议。你还学习了如何通过使用扩展来扩展类的能力。最后，你学习了如何使用`do-catch`块来处理错误。
- en: These may seem rather abstract and hard to understand now, but in *Part 3* of
    this book, you will see how to use protocols to implement common functionalities
    in different parts of your program instead of writing the same program over and
    over. You will see how useful extensions are in organizing your code, which makes
    it easy to maintain. Finally, you’ll see how good error handling makes it easy
    to pinpoint the mistakes you made while coding your app.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这些内容现在可能看起来相当抽象且难以理解，但在本书的**第3部分**中，你将看到如何使用协议在程序的各个部分实现常见功能，而不是一遍又一遍地编写相同的程序。你将看到扩展在组织代码方面的有用性，这使得代码易于维护。最后，你将看到良好的错误处理如何使定位你在编写应用程序时犯的错误变得容易。
- en: In the next chapter, you will learn about **Swift concurrency**, a new way to
    handle asynchronous operations in Swift.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将了解**Swift并发**，这是在Swift中处理异步操作的新方法。
- en: Join us on Discord!
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的Discord频道！
- en: Read this book alongside other users, experts, and the author himself. Ask questions,
    provide solutions to other readers, chat with the author via Ask Me Anything sessions,
    and much more. Scan the QR code or visit the link to join the community.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他用户、专家以及作者本人一起阅读这本书。提出问题，为其他读者提供解决方案，通过“问我任何问题”的环节与作者聊天，还有更多。扫描二维码或访问链接加入社区。
- en: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift)'
- en: '[![](img/QR_Code2370024260177612484.png)](https://packt.link/ios-Swift)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/QR_Code2370024260177612484.png)](https://packt.link/ios-Swift)'
