- en: Gamestats, Social, IAP, and Ad Integration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏统计数据、社交、内购和广告集成
- en: Since we are done with gameplay we can now see how to run the app on a device.
    We also have an introduction to Unity Ads and In App purchase tools that are already
    included. We will also include game achievements, and finally, we will see how
    to upload the APK to the app store and publish the game.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经完成了游戏玩法，现在我们可以看看如何在设备上运行应用程序。我们还介绍了已包含的Unity Ads和内购工具。我们还将包括游戏成就，最后，我们将看到如何上传APK到应用商店并发布游戏。
- en: 'This chapter includes the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包括以下主题：
- en: Running the app on a device/emulator
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在设备/模拟器上运行应用程序
- en: Android Developer Console
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android开发者控制台
- en: Adding achievements to the game
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加游戏成就
- en: Saving game stats
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存游戏统计数据
- en: Ad integration
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 广告集成
- en: IAP purchases
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内购购买
- en: Adding social media integration
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加社交媒体集成
- en: Running the app on the device/ emulator
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在设备/模拟器上运行应用程序
- en: To run an app on a device, you have to get the Android SDK and also the **Java
    Development Kit** (**JDK**) and set the location of the **Software Development
    Kit** (**SDK**) in Unity.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要在设备上运行应用程序，您必须获取Android SDK和Java开发工具包（JDK），并在Unity中设置SDK的位置。
- en: 'Let us first download the Android SDK. You can download the SDK from [https://developer.android.com/studio/index.html](https://developer.android.com/studio/index.html).
    Go to the bottom of the page and download the command-line tool. You can download
    Android Studio, but only if you are going to use Android Studio for development,
    which in this case we are not:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先下载Android SDK。您可以从[https://developer.android.com/studio/index.html](https://developer.android.com/studio/index.html)下载SDK。滚动到页面底部并下载命令行工具。您也可以下载Android
    Studio，但仅当您打算使用Android Studio进行开发时，在这种情况下我们并不需要：
- en: '![](img/image_07_001.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_001.png)'
- en: Download it for your operating system. In my case, I will be showing you how
    to do it on Windows.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为您的操作系统下载它。在我的情况下，我将向您展示如何在Windows上操作。
- en: After downloading the folder, create a new folder, in `C:` drive and call it
    `AndroidSDK` and copy the `Tools` folder into it. In the `Tools` folder, right-click
    on the `Android.bat` file and run it as an administrator.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完文件夹后，在`C:`驱动器上创建一个新的文件夹，命名为`AndroidSDK`，并将`Tools`文件夹复制进去。在`Tools`文件夹中，右键单击`Android.bat`文件，并以管理员身份运行。
- en: 'You will see an interface as follows. In the packages under `Tools` folder,
    you will need to download Android SDK Tools, Android SDK Platform-tools, and Android
    SDK Build-tools by selecting the respective checkbox as shown as following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到一个如下所示的界面。在`Tools`文件夹下的包中，您需要通过选择相应的复选框来下载Android SDK工具、Android SDK平台工具和Android
    SDK构建工具，如下所示：
- en: '![](img/image_07_002.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_002.png)'
- en: 'In the Android SDK version, select the version that is running on your phone.
    If you have a Google Pixel, you are probably running on Android version 7.1 or
    7.0\. I have Google Nexus 5 phone and it is running Android version 6.0, so I
    am required to install it. If you are running on an older version of Android,
    check which version of the SDK is required for your device:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android SDK版本中，选择运行在您手机上的版本。如果您有Google Pixel，您可能运行的是Android 7.1或7.0版本。我有一部Google
    Nexus 5手机，它运行的是Android 6.0版本，因此我需要安装它。如果您运行的是较旧的Android版本，请检查您的设备需要哪个版本的SDK：
- en: '![](img/image_07_003.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_003.png)'
- en: 'Next, you will also need to install things under the Extras folder, which will
    be required later anyway. You will need to check the Android Support Repository,
    Google Play Services, Google Repository, and also Google USB Driver options from
    the list to connect your device for installation to start:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您还需要在“额外”文件夹下安装一些东西，这些内容稍后无论如何都是必需的。您需要从列表中检查Android支持库、Google Play服务、Google仓库和Google
    USB驱动器选项，以连接您的设备并开始安装：
- en: '![](img/image_07_004.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_004.png)'
- en: 'Select all the options, accept the terms, and click the install button for
    the installation to start:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 选择所有选项，接受条款，然后点击安装按钮以开始安装：
- en: While that is getting installed, let's also download the JDK. To download the
    SDK go to this link [http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)
    and download the version for your operating system.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装过程中，我们还可以下载JDK。要下载JDK，请访问此链接 [http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)
    并下载适用于您的操作系统的版本。
- en: '![](img/image_07_006.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_006.png)'
- en: There is no need to download demos and samples. Once downloaded, install it
    at the default location.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 没有必要下载演示和示例。一旦下载，就在默认位置安装它。
- en: You will also need to download the Unity Android module. Go to File | Build
    Settings and select the Android in the Platform section. It will say *No Android
    Module* *Loaded*. Click on the Open Download page. Once you click the button,
    the download should start and once downloaded, it should be inside the `Downloads`
    folder. You can also download it from [http://download.unity3d.com/download_unity/38b4efef76f0/TargetSupportInstaller/UnitySetup-Android-Support-for-Editor-5.5.0f3.exe](http://download.unity3d.com/download_unity/38b4efef76f0/TargetSupportInstaller/UnitySetup-Android-Support-for-Editor-5.5.0f3.exe).
    Make sure you change the version number to the one that you are currently running.
    Once downloaded, open the Unity project and then double-click on the Android module
    to install the required package.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要下载Unity Android模块。转到文件 | 构建设置，然后在平台部分选择Android。它将显示*未加载Android模块*。点击打开下载页面。点击按钮后，下载应该开始，下载完成后，它应该位于`下载`文件夹中。你也可以从[http://download.unity3d.com/download_unity/38b4efef76f0/TargetSupportInstaller/UnitySetup-Android-Support-for-Editor-5.5.0f3.exe](http://download.unity3d.com/download_unity/38b4efef76f0/TargetSupportInstaller/UnitySetup-Android-Support-for-Editor-5.5.0f3.exe)下载。确保将版本号改为你当前运行的版本。下载完成后，打开Unity项目，然后双击Android模块以安装所需的包。
- en: 'Now go to Build Settings and select the Android platform and click on the Switch
    Platform button at the bottom:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在转到构建设置并选择Android平台，然后点击底部的切换平台按钮：
- en: '![](img/image_07_007.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_007.png)'
- en: 'Now we have to set the path for the `AndroidSDK` folder and JDK in Unity. Go
    to Edit menu and open Preferences under the External tools option, then browse
    to the SDK and JDK locations:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须在Unity中设置`AndroidSDK`文件夹和JDK的路径。转到编辑菜单，然后在外部工具选项下打开首选项，然后浏览到SDK和JDK的位置：
- en: '![](img/image_07_008.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_008.png)'
- en: The Android SDK location is at `C:/ AndroidSDK` and for the JDK it is located
    at `C:/Program Files/Java/jdk1.8.0_121`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Android SDK的位置在`C:/ AndroidSDK`，而对于JDK，它位于`C:/Program Files/Java/jdk1.8.0_121`。
- en: 'Now we have to prepare the Android device, enable the Developer Options mode
    in the device, and enable USB debugging. On the device, go to Settings and About
    Phone and at the bottom you will find the Build Number, tap on it seven times.
    It will then tell you that you are a developer now:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须准备Android设备，启用设备中的开发者选项模式，并启用USB调试。在设备上，转到设置和关于手机，底部你会找到构建号，连续点击七次。然后它会告诉你你现在是一名开发者了：
- en: '![](img/image_07_009.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_009.png)'
- en: 'Press back key and go into Developer Options. Enable the USB debugging and
    Stay awake options:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 按下返回键进入开发者选项。启用USB调试和保持唤醒选项：
- en: '![](img/image_07_010.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_010.png)'
- en: And that should be it. Now your device is ready to build on the device.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就完成了。现在你的设备已经准备好在设备上构建了。
- en: Android Developer Console
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android开发者控制台
- en: Now, to test/publish your game or to add achievements, you will need to upload
    your app to the Android's Developer Console. It has a one-time fee of 25 USD.
    Once paid, you can publish and test as many games/apps as you want.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了测试/发布你的游戏或添加成就，你需要将你的应用到Android的开发者控制台上传。它有一个一次性费用为25美元。一旦支付，你可以发布和测试你想要的任何游戏/应用。
- en: 'If you have your Gmail ID ready, head on to [https://play.google.com/apps/publish/signup/#](https://play.google.com/apps/publish/signup/);
    to sign up as an Android developer. The following window will be displayed:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你准备好了Gmail ID，前往[https://play.google.com/apps/publish/signup/#](https://play.google.com/apps/publish/signup/)注册为Android开发者。以下窗口将显示：
- en: '![](img/image_07_011.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_011.png)'
- en: Click on the Continue to payment button and have your credit card ready. Once
    payment is made, you will have access to the Developer Console. Congratulations!
    You are an Android developer now.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 点击继续支付按钮并准备好你的信用卡。一旦支付完成，你将能够访问开发者控制台。恭喜！你现在是一名Android开发者了。
- en: 'You will be greeted with the following screen. I already have some games and
    apps on the android store, so your existing apps will show up here:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到以下屏幕。我已经在Android商店有一些游戏和应用程序，所以你的现有应用程序将显示在这里：
- en: '![](img/image_07_012.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_012.png)'
- en: 'While we are here, let us create a new app. Click on the + Create application
    button on the top-right corner:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在这里时，让我们创建一个新的应用。点击右上角的+创建应用按钮：
- en: '![](img/image_07_013.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_013.png)'
- en: 'In the dialog box, specify the language and title of the game here. Next specify
    the details in the Title and Short description fields and then click on the Save
    Draft button at the top-right corner of the window:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在对话框中，指定游戏的语言和标题。接下来在标题和简短描述字段中指定详细信息，然后点击窗口右上角的保存草稿按钮：
- en: '![](img/image_07_014.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_014.png)'
- en: 'Next click on the APK tab on the left, as we will have to upload an APK to
    add achievements:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来点击左侧的 APK 选项卡，因为我们需要上传 APK 来添加成就：
- en: '![](img/image_07_015.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_015.png)'
- en: 'Click on Upload your first APK to Production. Now we have to upload the APK
    to the page:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 点击上传您的第一个生产 APK。现在我们必须将 APK 上传到页面：
- en: '![](img/image_07_016.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_016.png)'
- en: Let's us go back to Unity and build the APK so that we can upload to the Developer
    Console. In Unity, go to Edit | Build Settings and click on the PlayerSettings
    option.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到 Unity 并构建 APK，以便我们可以将其上传到开发者控制台。在 Unity 中，转到编辑 | 构建设置，然后点击 PlayerSettings
    选项。
- en: Under PlayerSettings, type in the details in the Company Name and Product Name
    fields. Don't worry about icons now; we will add them later.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PlayerSettings 下，在 公司名称 和 产品名称 字段中输入详细信息。现在不用担心图标；我们稍后会添加它们。
- en: 'Under the Other Settings section, add a bundle identifier. This is always the
    reverse order of your company website followed by the product name. Add the version
    number, which is 1.0\. The bundle version code can be 1\. Lastly add the minimum
    Android API level that the application can support. I have chosen Marshmallow,
    but the lower the number is, the better, so the application can be enjoyed by
    people even with older phones running older android versions:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他设置部分，添加一个捆绑标识符。这通常是公司网站的反序，后面跟着产品名称。添加版本号，为 1.0。捆绑版本代码可以是 1。最后添加应用程序可以支持的最低
    Android API 级别。我选择了 Marshmallow，但数字越低越好，这样应用程序就可以被使用较老手机和较老 Android 版本的用户享受：
- en: '![](img/image_07_017.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_017.png)'
- en: Next under Publishing Settings section, we will have to create a new keystore.
    Type in the password in the Keystore password field and confirm the password.
    Now click on the Browse Keystore button and select where you want to store the
    Keystore. Keep it in a safe place as you might need this file later.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来在发布设置部分，我们需要创建一个新的密钥库。在密钥库密码字段中输入密码，并确认密码。现在点击浏览密钥库按钮，选择您想要存储密钥库的位置。请将其保存在安全的地方，因为您可能稍后需要此文件。
- en: 'Next under the Key section, instead of Unsigned (debug) option, click on it
    and select the Create a new key option:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来在密钥部分，不要选择未签名的（调试）选项，而是点击它并选择创建新密钥选项：
- en: '![](img/image_07_018.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_018.png)'
- en: 'Next fill in the required details:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来填写所需的详细信息：
- en: '![](img/image_07_019.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_019.png)'
- en: Create an alias, which is usually the name of the product. Create a password
    for the key and then confirm it. Add in your first name, last name, company address
    and company name, city, state, and country location.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个别名，通常是产品的名称。为密钥创建一个密码，然后确认它。添加您的名字、姓氏、公司地址和公司名称、城市、州和位置国家。
- en: 'Now select the alias and type in the password for the key:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在选择别名并输入密钥的密码：
- en: '![](img/image_07_020.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_020.png)'
- en: 'Now we can create an APK to upload. Go to Build Settings and click Build. It
    will ask for a location to save the APK, specify a location and name. Remember
    the location and name:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以创建一个 APK 来上传。转到构建设置并点击构建。它将询问保存 APK 的位置，指定位置和名称。记住位置和名称：
- en: '![](img/image_07_021.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_021.png)'
- en: 'Now go back to the Developer Console. Drag and drop the `build.apk` file onto
    where it says Drop your APK file here, or select file. Once you select the file
    to upload it will begin:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在回到开发者控制台。将 `build.apk` 文件拖放到“在此处放下您的 APK 文件”或选择文件的位置，或者选择文件。选择文件后，它将开始上传：
- en: '![](img/image_07_022.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_022.png)'
- en: 'Now, if you go to the ALL APPLICATIONS page, you will see our Punchypunch application
    listed:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您转到 ALL APPLICATIONS 页面，您将看到我们的 Punchypunch 应用程序列在列表中：
- en: '![](img/image_07_023.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_023.png)'
- en: Now let us add some achievements.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们添加一些成就。
- en: Adding achievements in the game
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在游戏中添加成就
- en: 'In the Developer Console, click on the GAME SERVICES tab:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发者控制台中，点击 GAME SERVICES 选项卡：
- en: '![](img/image_07_024.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_024.png)'
- en: 'Here click on + Add new game on the top right. Type in the game name and the
    genre and click on the Continue button at the bottom of the screen:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在右上角点击 + 添加新游戏。输入游戏名称和类型，然后点击屏幕底部的继续按钮：
- en: '![](img/image_07_025.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_025.png)'
- en: Click on the ACHIEVEMENTS tab, and then click Add achievement tab. You need
    to add at least five achievements for it to work.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“成就”标签页，然后点击“添加成就”标签页。您至少需要添加五个成就才能使其工作。
- en: '![](img/image_07_026.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_026.png)'
- en: 'Type in a name and add a small description. For our example, I am going to
    add achievements for the number of times the user has played the game. So for
    playing the game the 1st time, 5th time, 50th, 100th, and 1000th time, I want
    an achievement to pop up each time:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 输入一个名称并添加简短描述。在我们的例子中，我将为用户玩游戏次数的成就添加成就。因此，对于第一次、第五次、第五十次、第一百次和第一千次玩游戏，我想要每次都弹出成就：
- en: '![](img/image_07_027.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_027.png)'
- en: 'Next, add a new achievement and all the achievements in:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，添加一个新成就以及以下所有成就：
- en: '![](img/image_07_028.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_028.png)'
- en: 'Click on the Get Resources button on the bottom and select the Android tab
    in the window. Now, copy all the data:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 点击底部的“获取资源”按钮，并在窗口中选择“安卓”标签。现在，复制所有数据：
- en: '![](img/image_07_029.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_029.png)'
- en: 'Next go to the Testing tab and click on the Add testers button. Here add in
    the e-mail address that you will be using to log in to your device:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 接着转到“测试”标签页，点击“添加测试者”按钮。在此处输入您将用于登录设备的电子邮件地址：
- en: '![](img/image_07_030.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_030.png)'
- en: 'Now you are ready to test the achievements on the device. Go to Unity and go
    to Window | Google Play Services | Setup | Android Setup...:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已准备好在设备上测试成就。转到Unity，转到“窗口”|“谷歌播放服务”|“设置”|“安卓设置...”：
- en: '![](img/image_07_031.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_031.png)'
- en: In the window, let the Directory to save constants field be set to `Assets`
    folder.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在窗口中，让“保存常数的目录”字段设置为“Assets”文件夹。
- en: 'Type in the details in Constants class name component and finally paste the
    code you copied from Get Resources tab here, and click on the Setup button at
    the bottom of the screen:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在“常量类名组件”中输入详细信息，并将从“获取资源”标签页复制的代码粘贴到这里，然后点击屏幕底部的“设置”按钮：
- en: '![](img/image_07_032.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_032.png)'
- en: Now when the MainMenu loads, we have to activate Google Play Services and whenever
    an achievement is hit, we have to send a notification telling Google Play Services
    that the achievement has been met.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当主菜单加载时，我们必须激活谷歌播放服务，并且每当达到一个成就时，我们必须发送一个通知告诉谷歌播放服务该成就已达成。
- en: 'So in the Project menu open the MainMenu scene. In the `Project`/`Scripts`
    folder create a new script called `MainMenuScript`. In the script, add the following
    code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在项目菜单中打开`MainMenu`场景。在`Project`/`Scripts`文件夹中创建一个名为`MainMenuScript`的新脚本。在脚本中，添加以下代码：
- en: '[PRE0]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: At the top of the class, add the `GooglePlayGames`, `UnityEngine.SocialPlatform`,
    and `System.Collections.Generic` namespaces. In the class, create a `isUserAthenticated`
    Boolean and initialize it to `false`. In the `Update` function, we will check
    if the user is logged into Google Play Services; otherwise, we will wait until
    the user is logged in.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在类顶部添加`GooglePlayGames`、`UnityEngine.SocialPlatform`和`System.Collections.Generic`命名空间。在类中创建一个名为`isUserAthenticated`的布尔值，并将其初始化为`false`。在`Update`函数中，我们将检查用户是否已登录谷歌播放服务；否则，我们将等待用户登录。
- en: We activate the Google Play Services and then enable Debug mode. In the `Update` function,
    we check if the user is logged in. If the user is logged in, we change our Boolean
    variable to `true`, or else we log out saying that the user didn't log in. Attach
    this script as a component to the `MainCamera` component in the scene.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们激活谷歌播放服务并启用调试模式。在`Update`函数中，我们检查用户是否已登录。如果用户已登录，我们将布尔变量更改为`true`，否则我们将注销并说明用户未登录。将此脚本作为组件附加到场景中的`MainCamera`组件。
- en: 'Now plug in your device to the computer and go to Build Settings and press
    Build and Run. It will connect to the Google Play Services, as shown in the following
    screenshot:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将您的设备连接到计算机，转到“构建设置”并按“构建和运行”。它将连接到谷歌播放服务，如下面的截图所示：
- en: '![](img/image_07_033.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_033.png)'
- en: 'It will ask you to log in with your e-mail address:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 它将要求您使用电子邮件地址登录：
- en: '![](img/image_07_034.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_034.png)'
- en: 'Once you are logged in, it will give you a welcome message:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您登录，它将显示欢迎信息：
- en: '![](img/image_07_035.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_035.png)'
- en: 'Now to store information in the achievement that is actually achieved at the
    gameover condition, add the following:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在为了在游戏结束条件下存储实际达成的成就信息，添加以下内容：
- en: '[PRE1]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the class add a global integer called `gameplayCount`. When the game is over
    this variable is incremented.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在类中添加一个名为`gameplayCount`的全局整数。当游戏结束时，此变量会增加。
- en: Depending on the value of the `gameplayCount` variable, the `if` statements
    are made and the `Social.ProgressReport` function is called. It takes three parameters.
    The first being is name of the achievement that is stored in the class that was
    created, the second is the progress level, in this case we will call this when
    100% progress is made on the achievement, and the third is a call back function.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 根据`gameplayCount`变量的值，执行`if`语句并调用`Social.ProgressReport`函数。它接受三个参数。第一个是存储在创建的类中的成就名称，第二个是进度级别，在这种情况下，当成就完成100%时我们将调用它，第三个是回调函数。
- en: Now build and run the game again. Now when you finish the game, you will get
    the notification that you played for the first time.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在再次构建并运行游戏。现在当你完成游戏时，你将收到你第一次玩游戏的通知。
- en: Next, we will open the achievements window to see all the achievements. In the
    MainMenu scene, we have a button that we created to show the achievement.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将打开成就窗口以查看所有成就。在`MainMenu`场景中，我们有一个创建的按钮来显示成就。
- en: 'In the `buttonClick` class, create a new function called `openAchievements`.
    It is created as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在`buttonClick`类中，创建一个名为`openAchievements`的新函数。它创建如下：
- en: '[PRE2]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `Social.showAchievementsUI()` function opens the Achievements window. Now
    on the Achievement button call this function when the button is clicked:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`Social.showAchievementsUI()`函数打开成就窗口。现在在成就按钮点击时调用此函数：'
- en: '![](img/image_07_036.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_036.png)'
- en: 'Build and run your project again and click the Achievement button on the main
    menu and the Achievements window will pop up, as shown in the following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 再次构建并运行你的项目，然后在主菜单上点击成就按钮，成就窗口将弹出，如下所示：
- en: '![](img/image_07_037.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_037.png)'
- en: But there is a bit of a problem here. The game only remembers all the information
    when you play the game; once you close the game, it forgets the information. Let's
    now see how to store game information on the device.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 但这里有一个小问题。游戏只在你玩游戏时记住所有信息；一旦你关闭游戏，它就会忘记信息。现在让我们看看如何将游戏信息存储在设备上。
- en: Saving game stats
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保存游戏统计数据
- en: Saving game information is actually very easy. This method works on all devices.
    The `PlayerPrefs` function can save and load player information on the system.
    All you have to pass in is a key that you will save and retrieve the data and
    a value that you want to store.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 保存游戏信息实际上非常简单。这种方法适用于所有设备。`PlayerPrefs`函数可以在系统中保存和加载玩家信息。你只需要传递一个键，你将保存和检索数据，以及一个你想要存储的值。
- en: 'So in your `gameScript`, when you increment the value of `gameplayCount` variable
    and add the following code after it:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在你的`gameScript`中，当你增加`gameplayCount`变量的值并在其后添加以下代码时：
- en: '[PRE3]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now the value of `gameplayCount` will be stored in the `GameplayCount` key.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`gameplayCount`的值将被保存在`GameplayCount`键中。
- en: 'To retrieve information, you will use the `GetInt` function of `PlayerPrefs`
    to get the value stored in the key. So, before you increment the `gameplayCount`
    variable, add the following code:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要检索信息，你将使用`PlayerPrefs`的`GetInt`函数来获取存储在键中的值。因此，在你增加`gameplayCount`变量之前，添加以下代码：
- en: '[PRE4]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now the value stored in the key in the system for `GameplayCount` is retrieved
    and stored in a local variable called `gameplayCount`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在系统存储在`GameplayCount`键中的值被检索并存储在一个名为`gameplayCount`的局部变量中。
- en: You are now incrementing this value and then saving the new value in the system.
    Now the system will remember the number of times you have played the game.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在正在增加这个值，然后将新的值保存在系统中。现在系统将记住你玩游戏的次数。
- en: 'For convenience, I have created a button in the Options menu, using which I
    reset the value of the `GameplayCount` key to `0` whenever the button is pressed:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，我在选项菜单中创建了一个按钮，使用它可以每次按下按钮时将`GameplayCount`键的值重置为`0`：
- en: '![](img/image_07_038.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_038.png)'
- en: I also added a home button so that I can go back to the main menu. Let us now
    see how to add ad integration.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我还添加了一个主页按钮，这样我就可以回到主菜单。现在让我们看看如何添加广告集成。
- en: Ad integration
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 广告集成
- en: 'In Unity, it is very easy to integrate ads in your games using Unity Ads. In
    Unity, go to Windows | Services and a new tab will open on the right:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中，使用Unity Ads集成广告非常简单。在Unity中，转到“窗口”|“服务”，右侧将打开一个新标签页：
- en: '![](img/image_07_039.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_039.png)'
- en: In the Services tab, log in with your Unity login and password that you obtained
    while registering on Unity.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在“服务”标签页中，使用你在Unity注册时获得的Unity登录名和密码登录。
- en: 'Click on the Create button. This will show the different services that are
    available to you:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 点击创建按钮。这将显示您可用的不同服务：
- en: '![](img/image_07_040.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_040.png)'
- en: 'Click on the SERVICES tab:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 点击SERVICES选项卡：
- en: '![](img/image_07_041.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_041.png)'
- en: 'Flip the switch on the top right corner to enable it. If the game is targeted
    at kids under 13 click the checkbox and click on the Continue button:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在右上角翻转开关以启用它。如果游戏针对13岁以下的儿童，请点击复选框并点击继续按钮：
- en: '![](img/image_07_042.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_042.png)'
- en: 'Select Android as the target platform, and check the Enable test mode option,
    so that we can test it before we publish the game. Now, in the `gamescript` class,
    at the top of the class add the following:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 选择Android作为目标平台，并勾选启用测试模式选项，这样我们可以在发布游戏之前测试它。现在，在`gamescript`类中，在类顶部添加以下代码：
- en: '[PRE5]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'All we have to do is call the `ShowAd` function when we want to show an ad.
    We don''t want to show an ad when the player has an achievement as we also don''t
    want to show the ad every time we call the `ShowAd` function in the `else` statement,
    when achievements are showing:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所需要做的就是在我们想要显示广告时调用`ShowAd`函数。我们不希望在玩家有成就时显示广告，因为我们也不希望在显示成就时每次调用`ShowAd`函数的`else`语句中显示广告：
- en: '[PRE6]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We call the show ad function if `gameplayCount` is divisible by 3\. Then, all
    the magic happens inside the `ShowAd` function.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`gameplayCount`能被3整除，我们就调用显示广告函数。然后，所有的魔法都在`ShowAd`函数内部发生。
- en: 'Create the `ShowAd` function as follows:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`ShowAd`函数如下：
- en: '[PRE7]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Sometimes ads are not available at the moment to show, it might be while playing
    or restarting the game that the ad will start playing. We don't want that so we
    first check if there is an ad to show so we calling `Advertisement.Isready`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 有时广告可能暂时不可用，可能是在玩游戏或重新启动游戏时广告开始播放。我们不希望这样，所以我们首先检查是否有可显示的广告，因此我们调用`Advertisement.Isready`。
- en: If there is an ad that is ready, we call the `Advertisement.Show` function,
    and we specify the type of ad we want to show, which is a video. We add in a callback
    function that will tell us what the player did while watching an ad or if the
    ad played at all.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有准备好的广告，我们调用`Advertisement.Show`函数，并指定我们想要显示的广告类型，即视频。我们添加一个回调函数，它会告诉我们玩家在观看广告时做了什么，或者广告是否播放过。
- en: 'So add a new function called `adViewResult` as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 因此添加一个名为`adViewResult`的新函数，如下所示：
- en: '[PRE8]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We check if the ad has finished playing, skipped, or failed. In each case we
    log out the information. Build and run the game. Now a test ad should show as
    per our code:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们检查广告是否播放完毕、跳过或失败。在每种情况下，我们记录信息。构建并运行游戏。现在测试广告应按照我们的代码显示：
- en: '![](img/image_07_043.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_043.png)'
- en: Let us see how to add In-App purchases, so that if the player wants to disable
    the ad they can make a purchase to disable the ad.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何添加应用内购买，这样如果玩家想要禁用广告，他们可以通过购买来禁用广告。
- en: In-App purchasing
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用内购买
- en: 'In the `Services` tab in Unity, click on `In- App Purchasing` component:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity的`Services`选项卡中，点击`In-App Purchasing`组件：
- en: '![](img/image_07_044.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_044.png)'
- en: 'Once again flip the switch on the top right against the IN-APP PURCHASING to
    enable it:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 再次翻转右上角的开关以启用IN-APP PURCHASING：
- en: '![](img/image_07_045.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_045.png)'
- en: 'Click on the Import button to import the IAP library:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 点击导入按钮导入IAP库：
- en: '![](img/image_07_046.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_046.png)'
- en: Next, we create a new class that will handle In-App purchases; we will call
    this class `IAPManager`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个新的类来处理应用内购买；我们将把这个类称为`IAPManager`。
- en: 'In this add the following code. The code has been taken from the Unity example
    site, which has a detailed and commented code showing what each function does.
    The code can be accessed from [https://unity3d.com/learn/tutorials/topics/ads-analytics/integrating-unity-iap-your-game](https://unity3d.com/learn/tutorials/topics/ads-analytics/integrating-unity-iap-your-game):'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里添加以下代码。代码是从Unity示例网站复制的，它包含详细且带注释的代码，展示了每个函数的作用。代码可以从[https://unity3d.com/learn/tutorials/topics/ads-analytics/integrating-unity-iap-your-game](https://unity3d.com/learn/tutorials/topics/ads-analytics/integrating-unity-iap-your-game)访问：
- en: '![](img/image_07_047.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_047.png)'
- en: 'The code has been modified for our purpose. As this is a long code, I have
    added comments with numbers, which I will explain later:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 代码已被修改以符合我们的目的。由于这是一段较长的代码，我添加了带编号的注释，稍后我会解释：
- en: '[PRE9]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Products can be of three types: consumable, nonconsumable, and subscription:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 产品可以分为三种类型：消耗品、非消耗品和订阅：
- en: Consumables can be used only once after which you cannot purchase it again
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消耗品只能使用一次，之后就不能再次购买了
- en: Nonconsumables can be purchased again and again
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非消耗品可以反复购买
- en: A subscription product is subscription-based like Netflix, which you pay for
    every month
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订阅产品是基于订阅的，类似于 Netflix，你每个月都要支付费用。
- en: There are four key steps to remember when setting the product. They are commented
    in the code as 1, 2, 3, and 4.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置产品时，有四个关键步骤需要记住。它们在代码中注释为 1、2、3 和 4。
- en: First, we set a string that should be the same as what we set in the Android
    store.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们设置一个字符串，它应该与我们设置在 Android 商店中的相同。
- en: In the initialized `Purchasing` function we have to specify our product as the
    product needs to be present when the store is built. The store is built every
    time you click on the store icon.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始化的 `Purchasing` 函数中，我们必须指定我们的产品，因为当商店建立时，产品需要存在。每次点击商店图标时都会建立商店。
- en: 'The Builder will add the product to the store. Specify the product name and
    type of product here:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 构建器会将产品添加到商店中。在这里指定产品名称和产品类型：
- en: '[PRE10]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We will create our own function, which will called when we want to buy a product:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建自己的函数，当我们要购买产品时将被调用：
- en: '[PRE11]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This intern will call the BuyProductID function in which we pass the product
    name that will initiate the purchase of the product.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这个实习生将调用 BuyProductID 函数，我们将传递产品名称，这将启动产品的购买。
- en: 'Finally in the initiated function we check if the product was purchased. We
    set a key so that if the product was purchased the no ads button doesn''t show
    any more:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在初始化函数中，我们检查产品是否已购买。我们设置一个键，如果产品已购买，则不再显示无广告按钮：
- en: '[PRE12]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now on the MainMenu scene, create a new button on top-right and in the `buttonClick` script,
    add a function that will call the `BuyRemoveAds` function in the `IAPManager`
    class:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在 MainMenu 场景中，在右上角创建一个新按钮，并在 `buttonClick` 脚本中添加一个函数，该函数将调用 `IAPManager`
    类中的 `BuyRemoveAds` 函数：
- en: '[PRE13]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Also on the `mainMenu` class add a button object for the Ad remove button and
    disable it if the `noads` key is equal to 1.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 还在 `mainMenu` 类中添加一个用于广告移除按钮的按钮对象，如果 `noads` 键等于 1，则禁用它。
- en: 'The `mainMenu` script should look as follows:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`mainMenu` 脚本应如下所示：'
- en: '[PRE14]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We have to do one final thing. We actually need to add the product in the Developer
    Console. Go to All Application | PunchyPunch and click on In-app products option
    in the list. Now click on + Add new product button:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须做最后一件事。实际上，我们需要在开发者控制台中添加产品。转到所有应用 | PunchyPunch，然后在列表中点击“内购产品”选项。现在点击“+
    添加新产品”按钮：
- en: '![](img/image_07_048.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_048.png)'
- en: 'In the box, select Managed product option and in the Product ID field, add
    removeads. This is the same as the string we set in the `IAPManager` class:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在框中，选择“管理产品”选项，并在产品 ID 字段中添加 removeads。这与我们在 `IAPManager` 类中设置的字符串相同：
- en: '![](img/image_07_049.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_049.png)'
- en: 'Next, add a title and description in the Title and Description fields respectively:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在标题和描述字段中分别添加标题和描述：
- en: '![](img/image_07_050.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_050.png)'
- en: 'Next, click on Add a price button at the bottom and in the Default price field,
    type in the price. In my case it is INR, so I will add an appropriate value and
    click on the Apply button:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在底部点击“添加价格”按钮，并在默认价格字段中输入价格。在我的情况下是 INR，所以我将添加一个适当的值并点击“应用”按钮：
- en: '![](img/image_07_051.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_051.png)'
- en: 'Now the app will show up on the In-App products:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，应用程序将显示在“内购产品”中：
- en: '![](img/image_07_052.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_052.png)'
- en: You can build and run the app now, but in-app purchases can only be tested once
    the app has been published. So we will see how it works in the next chapter.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以构建和运行应用程序，但只有在应用程序发布后才能测试内购功能。所以我们将看看它在下一章是如何工作的。
- en: Adding social media integration
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加社交媒体集成
- en: 'First, let us setup a Facebook share integration. Go to [https://developers.facebook.com/](https://developers.facebook.com/)
    that will open the Facebook developer site. Log in with your Facebook login and
    password:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们设置一个 Facebook 分享集成。转到 [https://developers.facebook.com/](https://developers.facebook.com/)，这将打开
    Facebook 开发者网站。使用您的 Facebook 登录名和密码登录：
- en: '![](img/image_07_053.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_053.png)'
- en: 'Click on My Apps box on the top and select the Add a New App option:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 点击顶部的“我的应用”框，并选择“添加新应用”选项：
- en: '![](img/image_07_054.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_054.png)'
- en: Type in the name of the game in the Display Name field. Add your contact e-mail
    address and select Apps for Pages option in the Category list. Then click on the
    Create App ID button.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在显示名称字段中输入游戏的名称。在类别列表中选择“页面应用”，并添加你的联系电子邮件地址。然后点击创建应用 ID 按钮。
- en: 'In settings click on + Add Platform button at the bottom and choose Android.
    Add the package name for the app and add in the Class Name field, which will also
    be in the reverse website name with the class name at the end. When we create
    a manager in Unity, we have to make sure that the class name matches this:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置中，点击底部的+添加平台按钮并选择Android。添加应用的包名，并在类名字段中添加，它也将以反向网站名结尾，以类名结尾。当我们创建Unity中的管理器时，必须确保类名与此匹配：
- en: '![](img/image_07_055.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_055.png)'
- en: 'You will also get an App ID, copy this information as this will be required.
    Next on the top-right corner, there is a button called DOCs, click it as we will
    need to download the Facebook SDK for Unity. Click on Unity SDK from the list
    and the SDK will start downloading:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 你还会得到一个应用ID，复制此信息，因为这将需要。接下来在右上角，有一个名为DOCs的按钮，点击它，因为我们需要下载Unity的Facebook SDK。从列表中选择Unity
    SDK，SDK将开始下载：
- en: '![](img/image_07_056.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_056.png)'
- en: 'Once the SDK is downloaded, make sure your current unity project is open and
    import the package:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: SDK下载完成后，请确保你的当前Unity项目已打开，并导入该包：
- en: '![](img/image_07_057.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_057.png)'
- en: 'Check all the boxes and click on the Import button:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 选择所有复选框并点击导入按钮：
- en: '![](img/image_07_058.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_058.png)'
- en: 'You will see that there is a new Facebook tab on your project, click on it
    and select Edit Settings options:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到在你的项目中有一个新的Facebook选项卡，点击它并选择编辑设置选项：
- en: '![](img/image_07_059.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_059.png)'
- en: 'In the Inspector type, the App Name (Optional) and App ID [?] fields are as
    it appears on the Facebook Developer Console:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查器类型中，应用程序名称（可选）和应用程序ID[？]字段与Facebook开发者控制台上的显示一致：
- en: '![](img/image_07_060.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_060.png)'
- en: 'Next, create a new class called `fbManager`. In the class, add the following
    code:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个名为`fbManager`的新类。在类中添加以下代码：
- en: '[PRE15]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the `Awake` function, first we check whether Facebook SDK is initialized.
    If not then we initialize it and we activate the app.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Awake`函数中，首先检查Facebook SDK是否已初始化。如果没有，则初始化它并激活应用程序。
- en: The `Share` function is the function that we will call when the Facebook button
    is pressed from the main menu.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`Share`函数是我们将在主菜单中点击Facebook按钮时调用的函数。'
- en: Once the button is pressed, the function will check whether the user is logged
    in. If they are logged in then the post is made using the `sharelink` function.
    We pass in the content title, a link to the website, and a description. We also
    provide a call back function that will check if the post was made or not.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦点击按钮，函数将检查用户是否已登录。如果已登录，则使用`sharelink`函数创建帖子。我们传递内容标题、网站链接和描述。我们还提供了一个回调函数，用于检查帖子是否已创建。
- en: If the user is not logged in then, we log in using the `loginWithPermissions`
    function. We also pass in a call back function that will check if the user has
    logged in. Once the user is logged in the function will call the share function.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户未登录，则使用`loginWithPermissions`函数进行登录。我们还传递了一个回调函数，用于检查用户是否已登录。一旦用户登录，函数将调用分享函数。
- en: While sharing if it was cancelled the `onShare` call back function will specify
    if there is an error, otherwise it will post a message. Now create a new button
    in the MainMenu for Facebook sharing and call the `Share` function once the button
    is pressed.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在分享过程中，如果取消分享，`onShare`回调函数将指定是否存在错误，否则将发布一条消息。现在在`MainMenu`中创建一个新的按钮用于Facebook分享，并在按钮被点击时调用`Share`函数。
- en: You also need to install **openSSL** as it is a requirement for Facebook. Download
    and install OpenSSL from [https://code.google.com/archive/p/openssl-for-windows/downloads](https://code.google.com/archive/p/openssl-for-windows/downloads).
    Download, unzip, and install it. Next, go to Start and search for `Environment
    Variables`. Open it.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要安装**OpenSSL**，因为它是Facebook的要求。从[https://code.google.com/archive/p/openssl-for-windows/downloads](https://code.google.com/archive/p/openssl-for-windows/downloads)下载并安装OpenSSL。下载、解压并安装它。接下来，转到开始并搜索“环境变量”。打开它。
- en: Under the System Variables section, look for the path and press Edit.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在“系统变量”部分，查找路径并点击编辑。
- en: 'Under Edit Environment Variables, click New and type in the OpenSSL binary
    location. Click OK. Next click New again and add the JDK binary location. Click
    OK and exit:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在“编辑环境变量”下，点击新建并输入OpenSSL二进制位置。点击确定。然后再次点击新建，并添加JDK二进制位置。点击确定并退出：
- en: '![](img/image_07_061.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_07_061.png)'
- en: 'You might get build errors as when you installed Facebook SDK there might be
    older versions of `support-annotations-23.4.0.jar` and `support-v4-23.4.0.aar` library
    present. You will have to manually go into the Facebook Android library folder
    and delete these files. So go to the location and delete the files:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会遇到构建错误，因为当你安装Facebook SDK时，可能存在较旧的`support-annotations-23.4.0.jar`和`support-v4-23.4.0.aar`库版本。你必须手动进入Facebook
    Android库文件夹并删除这些文件。所以前往该位置并删除文件：
- en: '![](img/image_07_062.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_062.png)'
- en: 'Now build and run the application and click on the Facebook button on the main
    menu that you created. Once logged in you are ready to post on Facebook:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 现在构建并运行应用程序，然后点击你创建的主菜单上的Facebook按钮。一旦登录，你就可以在Facebook上发帖了：
- en: '![](img/image_07_063.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_063.png)'
- en: 'Next we will look at Twitter sharing. Twitter sharing is really easy. Create
    one more button on the MainMenu for calling Twitter share and attach a function
    that will get called once the button is pressed. I created a function called `openTwitter`
    in the `buttonClick` class as follows:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将查看Twitter分享。Twitter分享非常简单。在`MainMenu`上再创建一个按钮来调用Twitter分享，并附加一个在按钮被点击时将被调用的函数。我在`buttonClick`类中创建了一个名为`openTwitter`的函数，如下所示：
- en: '[PRE16]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You will create strings that will store values for app store links, the twitter
    tweet intent address link, a description, and a message. Then you will call `Application.OpenURL`
    and pass the information as a string.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 你将创建字符串来存储应用商店链接、Twitter推文意图地址链接、描述和消息的值。然后你将调用`Application.OpenURL`并将信息作为字符串传递。
- en: 'Now, when you build the application and press the Twitter button, you will
    be able to share a tweet:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你构建应用程序并点击Twitter按钮时，你将能够分享一条推文：
- en: '![](img/image_07_064.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_07_064.png)'
- en: Summary
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we added sound and added touch input as we have only worked
    with mouse clicks all this time.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们添加了声音和触摸输入，因为我们一直只使用鼠标点击。
- en: We also created a developer account and made the app itself ready. We saw how
    to run the app on a device. We also created the app on the store and uploaded
    the APK to the store. We added achievements by saving the number of times we played
    the game. We added IAP and ads so that we can monetize the game. In the next chapter,
    we will finally publish the game.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还创建了一个开发者账户，并使应用程序本身准备就绪。我们看到了如何在设备上运行应用程序。我们还创建了商店中的应用程序，并将APK上传到商店。我们通过保存游戏游玩次数来添加成就。我们添加了内购和广告，以便我们可以使游戏货币化。在下一章中，我们最终将发布游戏。
