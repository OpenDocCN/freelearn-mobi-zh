- en: Chapter 7. Voice-activated Arduino
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。语音激活Arduino
- en: 'In this chapter, we will use another feature of Android devices to control
    an Arduino system: voice recognition. We will control a relay that is connected
    to an Arduino board by sending vocal commands from the phone.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用安卓设备的一个新特性来控制Arduino系统：语音识别。我们将通过从手机发送语音命令来控制连接到Arduino板上的继电器。
- en: This relay can be connected to many things. For example, it can be connected
    to an electric door lock so that you could open and close a door by just speaking
    into your phone. You can also connect the relay to a lamp, to switch the lamp
    on and off by giving a vocal command to your phone.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这个继电器可以连接到很多东西。例如，它可以连接到电动门锁，这样你只需对着手机说话就可以打开和关闭门。你还可以将继电器连接到灯泡，通过向手机发出语音命令来开关灯泡。
- en: 'In this chapter, you will learn how to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何：
- en: Connect a relay and a Bluetooth module to an Arduino board so that it can be
    controlled from the Android application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将一个继电器和一个蓝牙模块连接到Arduino板，以便可以从Android应用程序中控制它
- en: Build an application using the Android speech API
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Android语音API构建应用程序
- en: Control the relay on the Arduino board by voice
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过语音控制Arduino板上的继电器
- en: Hardware and software requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件和软件要求
- en: The first thing you will need for this project is an Arduino Uno board.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，你首先需要一块Arduino Uno板。
- en: Then you will need a BLE module. We chose the Adafruit nRF8001 chip because
    it comes with a nice Arduino library and it has already existing examples of Android
    apps to control the module.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你需要一个BLE模块。我们选择了Adafruit nRF8001芯片，因为它附带了一个不错的Arduino库，并且已经有现成的Android应用程序示例来控制该模块。
- en: 'You will also need a relay module. For this project, we used a 5V relay module
    from Polulu, which is the same as the one we used in the previous chapters. This
    is an image of the relay we used for this chapter:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要一个继电器模块。对于这个项目，我们使用了Polulu的5V继电器模块，这与我们在前几章中使用的是同一个。这是本章中我们使用的继电器的图片：
- en: '![Hardware and software requirements](img/0389OS_07_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![硬件和软件要求](img/0389OS_07_01.jpg)'
- en: Finally, to make the different electrical connections, you will also need a
    breadboard and some jumper wires.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了进行不同的电气连接，你还需要一个面板和一些跳线。
- en: 'This is the list of all hardware parts you will need for this project, along
    with links to find these parts on the Web:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你需要为这个项目准备的所有硬件组件列表，以及如何在网络上找到这些组件的链接：
- en: The Arduino Uno board ([http://www.adafruit.com/product/50](http://www.adafruit.com/product/50))
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino Uno板（[http://www.adafruit.com/product/50](http://www.adafruit.com/product/50)）
- en: The 5V relay module ([http://www.pololu.com/product/2480](http://www.pololu.com/product/2480))
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5V继电器模块（[http://www.pololu.com/product/2480](http://www.pololu.com/product/2480)）
- en: The Adafruit nRF8001 breakout board ([https://www.adafruit.com/products/1697](https://www.adafruit.com/products/1697))
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Adafruit nRF8001扩展板（[https://www.adafruit.com/products/1697](https://www.adafruit.com/products/1697)）
- en: The breadboard ([https://www.adafruit.com/product/64](https://www.adafruit.com/product/64))
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面板（[https://www.adafruit.com/product/64](https://www.adafruit.com/product/64)）
- en: Jumper wires ([https://www.adafruit.com/product/758](https://www.adafruit.com/product/758))
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳线（[https://www.adafruit.com/product/758](https://www.adafruit.com/product/758)）
- en: Note that these are all the components we already used in the previous chapters.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这些都是我们在前几章中已经使用过的组件。
- en: 'On the software side, you will need the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件方面，你需要以下内容：
- en: The Arduino IDE ([http://arduino.cc/en/Main/Software](http://arduino.cc/en/Main/Software))
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino IDE（[http://arduino.cc/en/Main/Software](http://arduino.cc/en/Main/Software)）
- en: The Arduino aREST library ([https://github.com/marcoschwartz/aREST/](https://github.com/marcoschwartz/aREST/))
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino aREST库（[https://github.com/marcoschwartz/aREST/](https://github.com/marcoschwartz/aREST/)）
- en: The nRF8001 Arduino library for the BLE chip ([https://github.com/adafruit/Adafruit_nRF8001](https://github.com/adafruit/Adafruit_nRF8001))
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于BLE芯片的nRF8001 Arduino库（[https://github.com/adafruit/Adafruit_nRF8001](https://github.com/adafruit/Adafruit_nRF8001)）
- en: To install a given library, simply extract the folder in your `Arduino/libraries`
    folder (or create this folder if it doesn't exist yet).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装一个特定的库，只需将文件夹提取到你的`Arduino/libraries`文件夹中（如果尚不存在，则创建此文件夹）。
- en: Configuring the hardware
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置硬件
- en: 'We will now build the hardware part of the project. To help you out, the following
    is the schematic of the project, without the relay being connected yet:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将构建项目的硬件部分。为了帮助你，以下是无继电器连接的项目原理图：
- en: '![Configuring the hardware](img/0389OS_07_02.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![配置硬件](img/0389OS_07_02.jpg)'
- en: Note that these instructions are the same as in the previous chapter. Therefore,
    you can just use the same configuration if you still have it built on your desk.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这些说明与上一章相同。因此，如果您仍然在桌子上构建了相同的配置，您可以直接使用相同的配置。
- en: 'The first step is to place the Bluetooth module on the breadboard. Then, connect
    the power supply from the Arduino board to the breadboard: 5V of the Arduino board
    goes to the red power rail and **GND** goes to the blue power rail.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是将蓝牙模块放置在面包板上。然后，将Arduino板上的电源连接到面包板：Arduino板的5V连接到红色电源轨，**GND**连接到蓝色电源轨。
- en: 'We will now connect the BLE module. First, connect the power supply of the
    module: **GND** goes to the blue power rail, and **VIN** goes to the red power
    rail. After this, you need to connect the different wires responsible for the
    SPI interface: **SCK** to Arduino pin **13**, **MISO** to Arduino pin **12**,
    and **MOSI** to Arduino pin **11**. Then connect the **REQ** pin to Arduino pin
    **10**. Finally, connect the **RDY** pin to Arduino pin **2**, and the **RST**
    pin to Arduino pin **9**.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将连接BLE模块。首先，连接模块的电源：**GND**连接到蓝色电源轨，**VIN**连接到红色电源轨。之后，您需要连接负责SPI接口的不同电线：**SCK**连接到Arduino引脚**13**，**MISO**连接到Arduino引脚**12**，**MOSI**连接到Arduino引脚**11**。然后，将**REQ**引脚连接到Arduino引脚**10**。最后，将**RDY**引脚连接到Arduino引脚**2**，将**RST**引脚连接到Arduino引脚**9**。
- en: For the relay module, connect the **VCC** pin to the red power rail on the breadboard
    and the **GND** pin on the blue power rail. Finally, connect the **SIG** pin of
    the relay to pin number **7** of the Arduino board.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于继电器模块，将**VCC**引脚连接到面包板上的红色电源轨，将**GND**引脚连接到蓝色电源轨。最后，将继电器的**SIG**引脚连接到Arduino板的**7**号引脚。
- en: 'The following is an image of an overview of the assembled project (for the
    precise connections between the elements, refer to the preceding instructions):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 下图是组装好的项目的概述图（有关元件之间的精确连接，请参阅前面的说明）：
- en: '![Configuring the hardware](img/0389OS_07_03.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![配置硬件](img/0389OS_07_03.jpg)'
- en: 'The close-up image of the relay and BLE module can be seen as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 可以看到继电器和BLE模块的特写图像如下：
- en: '![Configuring the hardware](img/0389OS_07_04.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![配置硬件](img/0389OS_07_04.jpg)'
- en: Writing the Arduino sketch
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写Arduino草图
- en: 'We will now write the sketch to control the relay from an Android device. Note
    that this is the same sketch as in the previous chapter, so you can skip it if
    you already did this part for the last chapter. The following is the complete
    sketch for this part:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将编写草图以从Android设备控制继电器。请注意，这与上一章中的草图相同，所以如果您已经在上一个章节中完成了这部分，您可以跳过它。以下是本部分的完整草图：
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, let''s see the details of the sketch. It starts by importing the required
    libraries for the nRF8001 module and the aREST library:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看草图的细节。它首先导入nRF8001模块和aREST库所需的库：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then we will define which pin the BLE module is connected to:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将定义BLE模块连接到的引脚：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We also need to declare which pin the relay is connected to:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要声明继电器连接到的引脚：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After this, we can create an instance of the aREST API that will be used to
    handle the requests coming via Bluetooth:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，我们可以创建一个用于处理通过蓝牙传入的请求的aREST API实例：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We will also create an instance of the nRF8001 chip library:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将创建nRF8001芯片库的实例：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, in the `setup()` function of the sketch, we will initialize serial communications
    and print a welcome message as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在草图中的`setup()`函数中，我们将初始化串行通信并打印一条欢迎信息，如下所示：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We will also give a name to the device:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将为设备命名：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, we will set the relay pin so it becomes an output:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将设置继电器引脚，使其成为输出：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, in the `loop()` function of the sketch, we will check the status of the
    BLE chip:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在草图中的`loop()`函数中，我们将检查BLE芯片的状态：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then, if any device is connected to the chip, we will process any incoming
    request with the aREST library:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，如果任何设备连接到芯片，我们将使用aREST库处理任何传入的请求：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note that all the code for this chapter can be found in the GitHub repository
    of the book at [https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，本章的所有代码都可以在本书的GitHub仓库[https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints)中找到。
- en: It's now time to upload the sketch to your Arduino board. When this is done,
    you can move on to the development of the Android app to control the Arduino board
    via the BLE sketch.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候将草图上传到您的Arduino板上了。完成此操作后，您可以继续开发Android应用，通过BLE草图控制Arduino板。
- en: Setting up the Android app
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Android应用
- en: In this project, we will be implementing an Android app that leverages the use
    of the Speech Recognition API and we are going output that text in an `EditText`
    field. In the background, we will also include the BLE services in order to connect
    to the BLE module and be able to send messages to it. Once we have the BLE and
    Speech Recognition API set up, we will be able to connect them both by setting
    up conditions where if the speech is recognized as `switch on`, it will switch
    on the relay, whereas if `switch off` is recognized, the relay will be switched
    off.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将实现一个利用语音识别API的Android应用程序，并将输出文本在`EditText`字段中。在后台，我们还将包括BLE服务，以便连接到BLE模块并能够向其发送消息。一旦我们设置了BLE和语音识别API，我们就可以通过设置条件将它们连接起来，如果语音被识别为`开启`，则继电器将开启，而如果被识别为`关闭`，则继电器将关闭。
- en: 'We will assume that you will switch on the `Auto-Import` function within your
    preferences. If not, kindly activate it by going to the **Auto-Import** preferences
    and selecting all the available options. The **Auto-Import** preferences are available
    on Mac and Windows as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将假设您已经在首选项中切换了`自动导入`功能。如果没有，请通过转到**自动导入**首选项并选择所有可用选项来激活它。**自动导入**首选项在Mac和Windows上的位置如下：
- en: On a Mac, navigate to **Android Studio** > **Preferences** > **Editor** > **Auto-Import**
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Mac上，导航到**Android Studio** > **首选项** > **编辑器** > **自动导入**
- en: On Windows, navigate to **File** > **Settings** > **Editor** > **Auto-Import**
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows上，导航到**文件** > **设置** > **编辑器** > **自动导入**
- en: 'With all the necessary settings in place, we will first start off by creating
    a new project where we will choose the following within the **New Project** setup:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有必要的设置就绪后，我们将首先创建一个新的项目，在**新建项目**设置中选择以下内容：
- en: '**Name**: `Talk to Arduino`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**: `与Arduino对话`'
- en: '**Minimum SDK**: `18`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最小SDK**: `18`'
- en: '**Project**: `Blank Activity`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目**: `空白活动`'
- en: '**Activity Name**: `MainScreen`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**活动名称**: `MainScreen`'
- en: '**Domain**: `arduinoandroid.com`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**域名**: `arduinoandroid.com`'
- en: In order to make this project work, we will need to first go over to the Android
    `Manifest` file, which is available at `app` > `src` > `ma` `in` > `AndroidManifest.xml`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个项目工作，我们首先需要转到Android的`Manifest`文件，该文件位于`app` > `src` > `main` > `java`
    > `包名` > `AndroidManifest.xml`。
- en: Laying out the Android user interface and permissions
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计Android用户界面和权限
- en: 'Once we open the file, we need to add permissions for access to Bluetooth functionality;
    this will allow us to transmit the voice messages to the Arduino. The following
    two lines of XML need to be added to the Android `Manifest` file:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们打开文件，我们需要添加访问蓝牙功能的权限；这将允许我们向Arduino传输语音消息。以下两行XML需要添加到Android的`Manifest`文件中：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The next step that we will take is to set up the very basic Android layout file
    so that we are able to implement the app's functions and to allow the user to
    activate the voice recognition intent.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要做的步骤是设置一个非常基本的Android布局文件，以便我们能够实现应用程序的功能，并允许用户激活语音识别意图。
- en: In our project, we will navigate to the main layout file, which can be accessed
    from `app` > `src` > `res` > `layout` > `activity_speech.xml`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目中，我们将导航到主布局文件，该文件可以通过`app` > `src` > `res` > `layout` > `activity_speech.xml`访问。
- en: 'By replacing the current code with the following, we will add a relative layout
    with two buttons, an `EditText` field and a `TextView` field, which will allow
    us to see the outcome of our voice input:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通过用以下代码替换当前代码，我们将添加一个包含两个按钮、一个`EditText`字段和一个`TextView`字段的相对布局，这将使我们能够看到语音输入的结果：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Coding the app's internals
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写应用程序的内部代码
- en: We will then move on to the `MainScreen.java` file, which is available at `app`
    > `src` > `main` > `java` > `package name` > `MainScreen.java`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将转到`MainScreen.java`文件，该文件位于`app` > `src` > `main` > `java` > `包名` > `MainScreen.java`。
- en: We will then replace the current code with the following code, which we will
    walk through step-by-step and with **Auto-import** enabled; Android Studio will
    automatically import all the statements that we will need for our project.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将用以下代码替换当前代码，我们将逐步讲解，并启用**自动导入**；Android Studio将自动导入我们项目所需的所有语句。
- en: Note
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Feel free to follow along the project through the GitHub repository where all
    the source is available for the users of our book in its entirety. The repository
    is available at [https://github.com/marcoschwartz/arduino-android-blueprints/tree/master/chapter7/TalktoArduino](https://github.com/marcoschwartz/arduino-android-blueprints/tree/master/chapter7/TalktoArduino).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以自由地通过GitHub仓库跟随项目，那里提供了我们书中用户所需的所有源代码。仓库地址为[https://github.com/marcoschwartz/arduino-android-blueprints/tree/master/chapter7/TalktoArduino](https://github.com/marcoschwartz/arduino-android-blueprints/tree/master/chapter7/TalktoArduino)。
- en: 'We will start off by declaring the class that extends `Activity`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从声明扩展`Activity`的类开始：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following are all the variables that are needed to be declared in order
    to work with the BLE module, log tag for logging purposes, user interface elements,
    and Bluetooth characteristics for voice recognition requests:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是需要声明的所有变量，以便与BLE模块一起工作，用于日志记录的日志标签，用户界面元素，以及用于语音识别请求的蓝牙特征：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the `OnCreate()` method, we will initialize the user interface layout that
    we implemented earlier and connect the user interface elements to the different
    methods within our code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在`OnCreate()`方法中，我们将初始化我们之前实现的用户界面布局，并将用户界面元素连接到我们代码中的不同方法：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `recordSpeech()` method allows us to launch the Google speech recognition
    intent where we can modify the message that we will show the user. In this case,
    we decided to replace the default text with the prompt, "You can now send a command
    to the Arduino":'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`recordSpeech()`方法允许我们启动Google语音识别意图，我们可以修改将显示给用户的消息。在这种情况下，我们决定用提示“您现在可以向Arduino发送命令”替换默认文本：'
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `onActivityResult()` method allows the application to process what has
    been recognized and implement methods based on what has been received. In the
    following method, we will take the speech that has been recognized, output it
    in the `EditText` field that we set up earlier and, depending on the output, we
    will send the commands via BLE to switch on or switch off the relay:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`onActivityResult()`方法允许应用程序处理已识别的内容，并根据接收到的内容实现方法。在以下方法中，我们将识别出的语音输出到我们之前设置的`EditText`字段中，并根据输出结果，通过BLE发送命令来打开或关闭继电器：'
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The following code deals with making sure the Bluetooth callback output is
    being sent to its associated `TextView`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码处理确保蓝牙回调输出被发送到其关联的`TextView`：
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here, we will deal with all the `BluetoothGattCallback` class that needs to
    be implemented to connect to the BLE module:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将处理所有需要实现以连接到BLE模块的`BluetoothGattCallback`类：
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In the following `onStart()` and `onStop()` methods, we are making sure that
    we start scanning of BLE devices and that Bluetooth scanning stops when we close
    the application so as to prevent the battery drain and ensure optimization of
    device memory resources for tasks running in the foreground:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下`onStart()`和`onStop()`方法中，我们确保开始扫描BLE设备，并在关闭应用程序时停止蓝牙扫描，以防止电池耗尽并确保优化前台运行的任务的设备内存资源：
- en: '[PRE20]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The following methods deal with the starting, stopping, and restarting of the
    Bluetooth scan callback:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法处理蓝牙扫描回调的启动、停止和重新启动：
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `scanCallback()` method is concerned mostly with the main logic to get
    the Bluetooth device addresses and maintain the necessary connections between
    the Android device and BLE module:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`scanCallback()`方法主要关注获取蓝牙设备地址和保持Android设备和BLE模块之间必要连接的主要逻辑：'
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In contrast to the previous chapters of the book, you will recognize that we
    have transferred the UUID parsing to a `utility` class in order to refactor the
    code and make our code more readable. In order to create a `utility` class, we
    first need to right-click on our package name and create a new package and call
    it `Bluetooth`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 与本书的前几章相比，您会注意到我们将UUID解析转移到了`utility`类中，以便重构代码并使我们的代码更易于阅读。为了创建一个`utility`类，我们首先需要右键点击我们的包名，创建一个新的包，并将其命名为`Bluetooth`。
- en: After this, we will right-click on the new package, select **New** > **Java
    Class**, and name the new class as `BluetoothUtils`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，我们将右键点击新包，选择**新建** > **Java类**，并将新类命名为`BluetoothUtils`。
- en: 'After those two steps, we will replace the code within the class with the following
    code:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两个步骤之后，我们将替换类中的代码为以下代码：
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Once you have included this code, you can go ahead and build and run this app
    on your Android physical device, which is running Android 4.3 or higher and connected
    to the Internet, due to the fact that most of the speech recognition services
    work via the Internet.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你包含了这段代码，你就可以在你的安卓物理设备上构建并运行这个应用，该设备运行Android 4.3或更高版本，并且连接到互联网，因为大多数语音识别服务都是通过互联网工作的。
- en: 'When you load the app, you should start off with something as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当你加载应用时，你应该从以下内容开始：
- en: '![Coding the app''s internals](img/0389OS_07_05.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![编写应用内部代码](img/0389OS_07_05.jpg)'
- en: How to go further
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何更进一步
- en: This base project offers endless possibilities and you can possibly include
    other commands that can be recognized and connect other components and sensors
    in order to enhance the capabilities of your voice-activated app. We hope that
    with this baseline project, we can inspire you to enhance your projects further
    on.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这个基础项目提供了无限的可能性，你可能会包含其他可识别的命令，以便连接其他组件和传感器，从而增强你语音激活应用的功能。我们希望这个基础项目能够激发你进一步改进你的项目。
- en: Summary
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Let's summarize what we did in this chapter. As usual, we connected a BLE module
    to our Arduino board so that it can receive commands via the Android phone. We
    also connected a simple relay module to the board, to control it via an Android
    application. Then we designed an application using the Android speech engine to
    control the relay depending on what the user says to the Android phone.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们总结一下本章所做的工作。像往常一样，我们将一个BLE模块连接到Arduino板上，以便它可以通过安卓手机接收命令。我们还连接了一个简单的继电器模块到板上，通过安卓应用程序来控制它。然后我们设计了一个应用，使用安卓语音引擎根据用户对安卓手机说的话来控制继电器。
- en: 'In the next chapter, we will use another feature of the Android phone to control
    Arduino projects: NFC. We will use NFC to control the state of a relay just by
    putting our phone in front of an Arduino NFC shield.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用安卓手机的另一个功能来控制Arduino项目：NFC。我们将使用NFC通过将手机放在Arduino NFC保护板前，来控制继电器的状态。
