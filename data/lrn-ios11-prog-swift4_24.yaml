- en: iMessages
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: iMessages
- en: Text messaging started with just simple text and the creation of faces using
    special characters. As smartphones began to become more and more commonplace,
    so did text messaging. Messages are now a significant form of communication for
    the vast majority of people. People find it easier to respond to a text message
    than to answer a phone call.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 文本消息最初只是简单的文本和特殊字符创建的面部表情。随着智能手机变得越来越普遍，文本消息也是如此。现在，消息是绝大多数人重要的沟通方式。人们发现回复短信比接听电话更容易。
- en: When Apple announced iMessage apps and stickers, it took messaging to another
    level. We had stickers before this announcement, but now we had a fully integrated
    system. iMessages does not only allow you to send a sticker to express a feeling
    or an emotion more effectively than words; you can now use messages to send the
    score of a game or even play games through text messages.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当苹果公司宣布 iMessage 应用和贴纸时，它将消息提升到了另一个层次。在此之前，我们已经有贴纸了，但现在我们有一个完全集成的系统。iMessages
    不仅允许你发送贴纸来表达比文字更有效的情感或情绪；你现在可以使用消息发送游戏的分数，甚至可以通过短信玩游戏。
- en: In this chapter, we are going to create an *iMessage* app. This app will allow
    the user to look for restaurants and send reservations to others. We will build
    our UI to look similar to what our phone looks like. To create the *iMessages*
    app, we need to add a message extension to our app.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建一个 *iMessage* 应用。这个应用将允许用户查找餐厅并向其他人发送预订。我们将构建我们的 UI，使其看起来与我们的手机相似。为了创建
    *iMessages* 应用，我们需要向我们的应用添加一个消息扩展。
- en: 'We will cover the following in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Building a custom message app UI
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建自定义消息应用 UI
- en: Creating a framework
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建框架
- en: Sharing code between multiple targets
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在多个目标之间共享代码
- en: Learning how to send a reservation to others
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何将预订发送给其他人
- en: Understanding iMessages
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 iMessages
- en: Starting with the UI is always my preferred way to begin building an app, because
    you can get a feel for what you need to code. We are going to implement a single
    screen that will be a list of restaurants (accessible by hitting the sticker icon
    next to where a user writes his or her message). The user can choose a restaurant
    for which he or she has a reservation and send it via messages to another person.
    Once that other person receives the message, that person will be able to tap on
    the reservation and see all of the details.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 从 UI 开始总是我首选的构建应用的方式，因为你可以感受到你需要编写什么代码。我们将实现一个单屏，它将是一个餐厅列表（通过点击用户编写消息旁边的贴纸图标访问）。用户可以选择他或她有预订的餐厅，并通过消息发送给另一个人。一旦那个人收到消息，那个人将能够点击预订并查看所有详细信息。
- en: 'In a message View Controller, there are two types of presentation styles: compact
    and expanded.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在消息视图控制器中，有两种展示风格：紧凑和展开。
- en: '![](img/0e3711b0-279d-4a7c-9818-3e81ea6cd7b8.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0e3711b0-279d-4a7c-9818-3e81ea6cd7b8.png)'
- en: Apple recommends that you have two different View Controllers for each style.
    However, since our screen is simple, we will use just one. Keep in mind, however,
    that, if you want to do a more complicated layout, you should use two controllers.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果建议你为每种风格都使用两个不同的视图控制器。然而，由于我们的屏幕很简单，我们将只使用一个。但是，记住，如果你想进行更复杂的布局，你应该使用两个控制器。
- en: Creating our extension
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的扩展
- en: 'Let''s get started by working on the UI now:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过现在开始工作在 UI 上来开始吧：
- en: 'In the Navigator panel, select the Project navigator and, then, your project:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航器面板中，选择项目导航器，然后选择你的项目：
- en: '![](img/bf191e45-2546-4133-b07e-bb4b6da46723.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bf191e45-2546-4133-b07e-bb4b6da46723.png)'
- en: 'In the Standard Editor, locate the TARGETS area and then the + (plus button)
    at the bottom of the TARGETS area. (If your TARGETS area is not displaying, hit
    the icon highlighted in blue to the left of General in the following screenshot):'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在标准编辑器中，找到目标区域，然后是目标区域底部的 +（加号按钮）。（如果你的目标区域没有显示，请点击以下截图左侧蓝色高亮的通用图标）：
- en: '![](img/d18ab2c2-9349-44c6-9e7b-ae6e29d8a6d1.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d18ab2c2-9349-44c6-9e7b-ae6e29d8a6d1.png)'
- en: 'Click the + (plus button) and, then, select iMessage Extension:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 +（加号按钮），然后选择 iMessage 扩展：
- en: '![](img/e38c0f34-8bfa-4e38-852a-82324ec263e7.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e38c0f34-8bfa-4e38-852a-82324ec263e7.png)'
- en: 'Click Next and, then, you will see the following screen:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“下一步”，然后你会看到以下屏幕：
- en: '![](img/49b45f75-def3-4ab9-bce8-0b42579e4220.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/49b45f75-def3-4ab9-bce8-0b42579e4220.png)'
- en: Set the Product Name to `MessageApp` and click Finish.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将产品名称设置为 `MessageApp` 并点击“完成”。
- en: 'You will receive the following message after you click Finish. Select Activate:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你点击“完成”后，你会收到以下消息。选择“激活”：
- en: '![](img/97be1e2d-2fc2-4d9c-b0b1-9dd4fc81bf0e.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/97be1e2d-2fc2-4d9c-b0b1-9dd4fc81bf0e.png)'
- en: By activating the `MessageApp` scheme, we will be able to build and run iMessages
    from the simulator. Now, you will have the choice of running either our *Let's
    Eat* app or our *iMessages* app.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通过激活`MessageApp`方案，我们将能够从模拟器中构建和运行iMessages。现在，您可以选择运行我们的*Let's Eat*应用或我们的*iMessages*应用。
- en: Updating our assets
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新我们的资产
- en: 'Next, we need to add assets that are necessary for our *iMessages* app:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要添加对我们*iMessages*应用必要的资产：
- en: In the `MessageApp` folder in the Navigator panel, select the `Assets.xcassets`
    folder.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航面板中的`MessageApp`文件夹中，选择`Assets.xcassets`文件夹。
- en: Hit the *Delete* button and, then, select Move to Trash in the screen that appears.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击*删除*按钮，然后选择出现的屏幕上的“移动到垃圾箱”。
- en: Then, open the project's `assets` folder downloaded from Packt's website ([https://www.packtpub.com/](https://www.packtpub.com/)).
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，打开从Packt网站下载的项目`assets`文件夹（[https://www.packtpub.com/](https://www.packtpub.com/))。
- en: Open `Chapter24` and drag the `Assets.xcassets` folder into your `MessageApp`
    folder inside the Navigator panel. Do not do this in Xcode; you will need to open
    this up in finder just like we did at the beginning of the book.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Chapter24`，将`Assets.xcassets`文件夹拖动到导航面板中的`MessageApp`文件夹内。不要在Xcode中这样做；您需要像本书开头一样在Finder中打开它。
- en: In the options screen that appears, ensure that Copy items if needed and Create
    groups are both selected and then select Finish.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的选项屏幕上，确保“如需复制项目”和“创建组”两个选项都被选中，然后选择完成。
- en: If you open the `Assets.xcassets` folder, you will see that you now have an
    icon and two other image assets that we will need for our *iMessages* app.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打开`Assets.xcassets`文件夹，您将看到现在有一个图标和两个其他图像资产，我们将需要为我们的*iMessages*应用使用它们。
- en: Implementing our Messages UI
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现我们的消息UI
- en: 'Next, we need to set up our UI. In our *iMessages* app, we will have a single
    screen; in this screen, we will show a list of restaurants using a Collection
    View. When you tap on the restaurant, you will be able to send a reservation message
    to someone else. Let''s get started:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要设置我们的UI。在我们的*iMessages*应用中，我们将有一个单屏；在这个屏幕上，我们将使用集合视图显示餐厅列表。当你点击餐厅时，你将能够向其他人发送预订消息。让我们开始吧：
- en: 'In your `MessageApp` project, select your `MainInterface.storyboard`. You will
    see a single storyboard with a label that says Hello World:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的`MessageApp`项目中，选择您的`MainInterface.storyboard`。您将看到一个带有显示“Hello World”标签的单个故事板：
- en: '![](img/d74bfeac-413f-467b-9524-2cbaf6d51928.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d74bfeac-413f-467b-9524-2cbaf6d51928.png)'
- en: Delete the label that says Hello World by selecting it in the Outline view and,
    then, hitting *Delete*.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在概要视图中选择它并按*删除*键来删除显示“Hello World”的标签。
- en: Select the Messages View Controller and, then, the Attributes inspector in the
    Utilities panel and change the status bar under Simulated Metrics from Inferred
    to None.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择消息视图控制器，然后在实用工具面板中选择属性检查器，并将模拟度量下的状态栏从推断更改为无。
- en: Next, in the Object library of the Utilities panel, type `collectionview` in
    the filter and then drag a Collection View into the View Controller in the scene.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在实用工具面板的对象库中，输入`collectionview`进行筛选，然后将集合视图拖动到场景中的视图控制器中。
- en: 'With the Collection View selected, select the Pin icon and enter the following
    values:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择集合视图，选择固定图标，并输入以下值：
- en: All values under Add New Constraints are set to `0`
  id: totrans-44
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有“添加新约束”下的值都设置为`0`
- en: Constrain to margins is unchecked
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不勾选“约束到边距”。
- en: Update Frames is set to Items of New Constraints
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新框架设置为“新约束的项目”
- en: Click Add 4 Constraints.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击添加4个约束。
- en: Next, with the Collection View still selected, open the Attributes inspector
    in the Utilities panel.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，仍然选择集合视图，在实用工具面板中打开属性检查器。
- en: 'Select Background in the Attributes inspector and, under the Color Sliders
    tab, set the Hex Color # to `ECECEC` under RGB Sliders in the drop-down menu.'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性检查器中选择背景，并在颜色滑块选项卡下，在下拉菜单中的RGB滑块下将十六进制颜色设置为`ECECEC`。
- en: Next, select the Collection View cell and, then, the Size inspector in the Utilities
    panel.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择集合视图单元格，然后是实用工具面板中的大小检查器。
- en: Change the Size from Default to Custom. Then, set the Width to `320` and the
    Height to `78`.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将大小从默认更改为自定义。然后，将宽度设置为`320`，高度设置为`78`。
- en: 'Then, select Background in the Attributes inspector and, under the Color Sliders
    tab, set the Hex Color # to `FFFFF` under RGB Sliders in the drop-down menu.'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在属性检查器中选择背景，并在颜色滑块选项卡下，在下拉菜单中的RGB滑块下将十六进制颜色设置为`FFFFF`。
- en: In the Utilities panel, select the Media Library and type restaurant-list into
    the filter field.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在实用工具面板中，选择媒体库并在过滤器字段中输入 restaurant-list。
- en: Drag a `restaurant-list-img` into your Collection View cell.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `restaurant-list-img` 拖动到你的 Collection View 单元格中。
- en: 'With the image still selected, go to the Size inspector in the Utilities panel
    and update the following values:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在图片仍然被选中的情况下，转到实用工具面板中的大小检查器并更新以下值：
- en: 'X: `8`'
  id: totrans-56
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: X：`8`
- en: 'Y: `9`'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Y：`9`
- en: 'Width: `60`'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宽度：`60`
- en: 'Height: `` `60` ``'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高度：`` `60` ``
- en: Next, select the object library in the Utilities panel and type `label` into
    the filter.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在实用工具面板中选择对象库并在过滤器中输入 `label`。
- en: Drag three labels into the cell.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将三个标签拖动到单元格中。
- en: 'Select the first label and, in the Size inspector, update the following values:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择第一个标签，然后在大小检查器中更新以下值：
- en: 'X: `76`'
  id: totrans-63
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: X：`76`
- en: 'Y: `10`'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Y：`10`
- en: 'Width: `236`'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宽度：`236`
- en: 'Height: `21`'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高度：`21`
- en: Next, select the Attributes inspector; update the Font to Bold and verify that
    the Font size is `17`.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择属性检查器；将字体更新为粗体并验证字体大小为 `17`。
- en: 'Select the second label and, in the Size inspector, update the following values:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择第二个标签，然后在大小检查器中更新以下值：
- en: 'X: `76`'
  id: totrans-69
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: X：`76`
- en: 'Y: `35`'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Y：`35`
- en: 'Width: `236`'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宽度：`236`
- en: 'Height: `16`'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高度：`16`
- en: Then, in the Attributes inspector, update the Font to Light, size `14`.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在属性检查器中，将字体更新为 Light，大小 `14`。
- en: 'Select the last label and, in the Size inspector, update the following values:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择最后一个标签，然后在大小检查器中更新以下值：
- en: 'X: `76`'
  id: totrans-75
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: X：`76`
- en: 'Y: `53`'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Y：`53`
- en: 'Width: `236`'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宽度：`236`
- en: 'Height: `16`'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高度：`16`
- en: Lastly, in the Attributes inspector, update the Font to Light, size `14`.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在属性检查器中，将字体更新为 Light，大小 `14`。
- en: 'When you are done, your cell should look like the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成时，你的单元格应该看起来像以下这样：
- en: '![](img/0710a3eb-886f-44b8-82d9-332b816ad4af.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0710a3eb-886f-44b8-82d9-332b816ad4af.png)'
- en: Now that we have our items in place, we need to add some Auto Layout to our
    elements.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经放置了项目，我们需要为我们的元素添加一些自动布局。
- en: Adding Auto Layout to our  cell
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将自动布局添加到我们的单元格
- en: Let's see how to add Auto Layout to our cell.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何将自动布局添加到我们的单元格中。
- en: 'Auto Layout will allow our layout to adjust to all devices. Let''s get started:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 自动布局将允许我们的布局适应所有设备。让我们开始：
- en: 'Select the image in our cell and then select the Pin icon. Enter the following
    values under the Add New Constraints section:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择单元格中的图片，然后选择固定图标。在“添加新约束”部分下输入以下值：
- en: 'Top: `9`'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶部：`9`
- en: 'Left: `8`'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左侧：`8`
- en: 'Constrain to margins: unchecked'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制到边距：未勾选
- en: 'Width: `60` (checked)'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宽度：`60`（已勾选）
- en: 'Height: `60` (checked)'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高度：`60`（已勾选）
- en: Click Add 4 Constraints.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击添加 4 个约束。
- en: 'Next, select the first label in our cell and, then, the Pin icon. Enter the
    following values under the Add New Constraints section:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择单元格中的第一个标签，然后选择固定图标。在“添加新约束”部分下输入以下值：
- en: 'Top: `10`'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶部：`10`
- en: 'Left: `8`'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左侧：`8`
- en: 'Right: `8`'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右侧：`8`
- en: 'Constrain to margins: unchecked'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制到边距：未勾选
- en: 'Height: `21` (checked)'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高度：`21`（已勾选）
- en: Click Add 4 Constraints.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击添加 4 个约束。
- en: 'Next, select the second label in our cell and, then, the Pin icon. Enter the
    following values under the Add New Constraints section:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择单元格中的第二个标签，然后选择固定图标。在“添加新约束”部分下输入以下值：
- en: 'Top: `4`'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶部：`4`
- en: 'Left: `8`'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左侧：`8`
- en: 'Right: `8`'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右侧：`8`
- en: 'Constrain to margins: unchecked'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制到边距：未勾选
- en: 'Height: `16` (checked)'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高度：`16`（已勾选）
- en: Click Add 4 Constraints.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击添加 4 个约束。
- en: 'Finally, select the last label in our cell and, then, the Pin icon. Enter the
    following values under the Add New Constraints section:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，选择单元格中的最后一个标签，然后选择固定图标。在“添加新约束”部分下输入以下值：
- en: 'Top: `2`'
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶部：`2`
- en: 'Left: `8`'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左侧：`8`
- en: 'Right: `8`'
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右侧：`8`
- en: 'Constrain to margins: unchecked'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制到边距：未勾选
- en: 'Height: `16` (checked)'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高度：`16`（已勾选）
- en: Click Add 4 Constraints.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击添加 4 个约束。
- en: We have completed setting up our UI and can now proceed to get data into our
    app and display it.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了 UI 的设置，现在可以继续将数据放入我们的应用并显示它。
- en: Creating a framework
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个框架
- en: Since all of our code for data is created in our iOS app, it does not make sense
    to rewrite our code for our *iMessages* app. We can create what is known as a
    framework to share our data between our iOS and iMessage apps.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们所有的数据代码都是在我们的 iOS 应用中创建的，因此重写我们的 *iMessages* 应用代码没有意义。我们可以创建一个框架，以便在 iOS
    和 iMessage 应用之间共享数据。
- en: 'Using frameworks along with app extensions allows us to put shared code in
    one place. That means less code and more efficiency, because you will not need
    to update code in multiple places when you have to make a change. Let''s get started
    creating our framework:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 使用框架以及应用扩展允许我们将共享代码放在一个地方。这意味着代码更少，效率更高，因为当你需要做出更改时，你不需要在多个地方更新代码。让我们开始创建我们的框架：
- en: In the Navigator panel, select the Project navigator and, then, your project
    again as we did earlier.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“导航器”面板中，选择“项目导航器”，然后再次选择我们之前所做的项目。
- en: Find the TARGETS area and click on the + button at the bottom of that area.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到“TARGETS”区域，并点击该区域底部的+按钮。
- en: 'Under the iOS tab, scroll to the bottom to Framework & Library, select Cocoa
    Touch Framework, and then hit Next:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“iOS”选项卡下，滚动到最底部，选择“框架和库”，然后选择“Cocoa Touch 框架”，接着点击“下一步”：
- en: '![](img/b100cfc4-5af7-4fa8-9ff3-e0d8c87c4cd6.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b100cfc4-5af7-4fa8-9ff3-e0d8c87c4cd6.png)'
- en: Under Product Name, type `LetsEatDataKit` and then hit Finish.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“产品名称”下，键入`LetsEatDataKit`，然后点击“完成”。
- en: 'You should now see the following folder and files in the `Products` folder
    in your Navigator panel:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该在导航器面板的“产品”文件夹中看到以下文件夹和文件：
- en: '![](img/0f7e6feb-30b5-4397-a297-fa2783d27c2a.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0f7e6feb-30b5-4397-a297-fa2783d27c2a.png)'
- en: 'Select the `LetsEatDataKit` target and ensure that, under Deployment Info,
    your Deployment Target is set to `10.0` and App Extensions is checked:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`LetsEatDataKit`目标，并确保在“部署信息”下，您的部署目标设置为`10.0`，并且已勾选“应用扩展”：
- en: '![](img/19f98c5a-92dd-4e61-b9d2-d39a05385026.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/19f98c5a-92dd-4e61-b9d2-d39a05385026.png)'
- en: Right-click the `LetsEatDataKit` folder in the Navigator panel and create a
    new group named `Restaurant`.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航器面板中，右键单击`LetsEatDataKit`文件夹，创建一个名为“Restaurant”的新组。
- en: Now, from your *Let's Eat* app, please drag the `RestaurantDataManager.swift`
    file from the `Restaurant` folder inside of the `Controllers` folder into the
    newly created `LetsEatDataKit` folder's `Restaurant` folder.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，从您的`Let's Eat`应用中，请将`Restaurant`文件夹内的`Controllers`文件夹中的`RestaurantDataManager.swift`文件拖动到新创建的`LetsEatDataKit`文件夹的`Restaurant`文件夹中。
- en: Next, drag the `RestaurantItem.swift` file from the `Map` folder inside of the
    `Controllers` folder into the `LetsEatDataKit` folder's `Restaurant` folder.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将`Map`文件夹内的`RestaurantItem.swift`文件从`Controllers`文件夹拖动到`LetsEatDataKit`文件夹的`Restaurant`文件夹中。
- en: Then, drag the `RestaurantAPIManager.swift` file from the `Restaurant` folder
    inside of the `Controllers` folder into the `LetsEatDataKit` folder's `Restaurant`
    folder.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将`Restaurant`文件夹内的`Controllers`文件夹中的`RestaurantAPIManager.swift`文件拖动到`LetsEatDataKit`文件夹的`Restaurant`文件夹中。
- en: Finally, drag the entire `JSON` folder from inside of the `Misc` folder into
    the `LetsEatDataKit` folder's `Restaurant` folder.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将整个`JSON`文件夹从`Misc`文件夹中拖动到`LetsEatDataKit`文件夹的`Restaurant`文件夹中。
- en: 'When you have completed these steps, you should have the following files in
    your `LetsEatDataKit` folder:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 当您完成这些步骤后，您应该在`LetsEatDataKit`文件夹中有以下文件：
- en: '![](img/8d6ac127-e58b-42c6-b439-dcc3f52f0ee2.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8d6ac127-e58b-42c6-b439-dcc3f52f0ee2.png)'
- en: Next, open the `API Manager` folder we just moved and, in the `json` subfolder,
    select the `Aspen.json` file.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开我们刚刚移动的`API Manager`文件夹，并在`json`子文件夹中，选择`Aspen.json`文件。
- en: 'In the Utilities panel, select the File inspector and locate the Target Membership
    section:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“实用工具”面板中，选择“文件检查器”，并定位到“目标成员”部分：
- en: '![](img/94379625-408d-4431-9ee9-396b21314b55.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/94379625-408d-4431-9ee9-396b21314b55.png)'
- en: 'To set the target of this file not only to our app but also to our `MessageApp`
    and `LetsEatDataKit`, check MessageApp and LetsEatDataKit under Target Membership.
    Therefore, our *Let''s Eat* app, MessageApp, and LetsEatDataKit should all be
    checked:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将此文件的目标设置为不仅是我们自己的应用，还要设置为我们的`MessageApp`和`LetsEatDataKit`，请在“目标成员”下勾选`MessageApp`和`LetsEatDataKit`。因此，我们的`Let's
    Eat`应用、`MessageApp`和`LetsEatDataKit`都应该被勾选：
- en: '![](img/51353fa9-01bf-40c0-9789-3815ceb8acfe.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/51353fa9-01bf-40c0-9789-3815ceb8acfe.png)'
- en: Next, select each JSON file inside of the `json` folder and update all of the
    files so that they are all targeted to `LetsEat`, `MessageApp`, and `LetsEatDataKit`.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择`json`文件夹内的每个JSON文件，并更新所有文件，使它们的目标都指向`LetsEat`、`MessageApp`和`LetsEatDataKit`。
- en: Then, select each of the remaining three files inside of the `LetsEatDataKit`
    folder's `Restaurant` folder and update them so that each one is targeted to `LetsEatDataKit`
    only.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，选择`LetsEatDataKit`文件夹的`Restaurant`文件夹内的剩余三个文件，并更新它们，使每个文件的目标仅指向`LetsEatDataKit`。
- en: 'Now, change your target from `MessageApp` to `LetsEatDataKit`:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将您的目标从`MessageApp`更改为`LetsEatDataKit`：
- en: '![](img/e9c7afb3-62c0-47d6-86fd-920c10bfe29f.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e9c7afb3-62c0-47d6-86fd-920c10bfe29f.png)'
- en: Hit ⌘ + *B* to build the app without running it and your build should be successful
    as long as you updated the target of all of your files.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 按⌘ + *B*来构建应用而不运行它，只要您更新了所有文件的目标，您的构建应该会成功。
- en: 'Now, switch back to the *Let''s Eat* app and hit ⌘ + *B*. You will notice some
    errors. These errors are expected and are easy to fix:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，切换回`Let's Eat`应用，并按⌘ + *B*。您会注意到一些错误。这些错误是预期的，并且很容易修复：
- en: 'Inside of the `MapViewController.swift` file, add the following `import` at
    the top of the file:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MapViewController.swift`文件中，在文件顶部添加以下`import`：
- en: '[PRE0]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, continue by updating your `RestaurantItem`. We need to make this file
    public so that it is seen by other files. Therefore, inside of the `RestaurantItem.swift`
    file, update our struct declaration to add `public` before the class so that it
    looks like the following:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，继续更新你的`RestaurantItem`。我们需要将此文件设置为`public`，以便其他文件可以看到它。因此，在`RestaurantItem.swift`文件中，更新我们的结构声明，在类之前添加`public`，使其看起来如下所示：
- en: '[PRE1]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Similarly, we need to make each of our variables `public`, since we are using
    them all as data. Update all variables by adding the keyword `public` in front
    of them and then save the file. When you add `public` to the annotation variable,
    you will see another error occur. This error is complaining because we are trying
    to make the variable `public` while the class is not `public`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们需要将每个变量都设置为`public`，因为我们正在将它们全部用作数据。通过在它们前面添加关键字`public`来更新所有变量，然后保存文件。当你将`public`添加到注释变量时，你会看到另一个错误发生。这个错误是因为我们试图在类不是`public`的情况下将变量设置为`public`。
- en: 'Therefore, open your `RestaurantItem` class and update the class, each of the
    following variables, and the `init()` method with `public` access:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，打开你的`RestaurantItem`类，并更新类、以下每个变量和`init()`方法，以`public`访问权限：
- en: '[PRE2]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Save the file and now your `RestaurantItem` errors will disappear.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件，现在你的`RestaurantItem`错误将消失。
- en: 'We still have more minor updates to make. We need to make both our `RestaurantAPIDataManager`
    and `RestaurantDataManager` public as well. Let''s start with the `RestaurantAPIDataManager`
    and update the following `struct` and method with `public` access:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要进行更多的细微更新。我们需要将我们的`RestaurantAPIDataManager`和`RestaurantDataManager`都设置为`public`。让我们从`RestaurantAPIDataManager`开始，并更新以下`struct`和`method`以`public`访问权限：
- en: '[PRE3]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, update the class and each of the following methods inside of `RestaurantDataManager`
    with `public` access:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，更新`RestaurantDataManager`中的类和以下每个方法，以`public`访问权限：
- en: '[PRE4]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We also need to make our `init()` method for our `RestaurantDataManager` class
    `public`; so, after the class declaration, add the following:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要将我们的`RestaurantDataManager`类的`init()`方法设置为`public`；因此，在类声明之后，添加以下内容：
- en: '[PRE5]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Having this `init()` method allows us to write the following:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 有这个`init()`方法允许我们编写以下内容：
- en: '[PRE6]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When we make it `public`, we are calling the `init()` method when we have `RestaurantDataManager()`.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将其设置为`public`时，我们在拥有`RestaurantDataManager()`时调用`init()`方法。
- en: Now, change the target to the `LetsEatDataKit` and build it again by hitting
    ⌘ + *B*. The build should be successful again at this point. If you, open the
    `MapViewController` file, you should see that all of the errors are fixed in this
    file.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将目标改为`LetsEatDataKit`，并通过按⌘ + *B*重新构建。此时，构建应该再次成功。如果你打开`MapViewController`文件，你应该会看到这个文件中的所有错误都已修复。
- en: 'However, we still have more errors to address inside of `MapDataManager`, `LocationViewController`,
    `RestaurantViewController`, `ExploreViewController`, `RestaurantDetailViewController`,
    and `MessagesViewController`. Therefore, inside of each of these three files,
    add the following at the top of each file in the `import` statement section:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们仍然需要在`MapDataManager`、`LocationViewController`、`RestaurantViewController`、`ExploreViewController`、`RestaurantDetailViewController`和`MessagesViewController`内部解决更多的错误。因此，在每个这些三个文件中，在`import`语句部分的最顶部添加以下内容：
- en: '[PRE7]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Next, hit ⌘ + *B* again, and there should be no errors inside of any of these
    three files or in your entire project.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，再次按⌘ + *B*，在这些三个文件或整个项目中不应该有任何错误。
- en: Now, if you switch the target back to our *Let's Eat* app and build and run
    it by hitting the Play button (or using ⌘ + *R*), you should see that everything
    is working as expected. We can now start using this data in our *iMessages* app.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你将目标切换回我们的*Let's Eat*应用，并通过按播放按钮（或使用⌘ + *R*）构建和运行它，你应该会看到一切按预期工作。我们现在可以开始在*iMessages*应用中使用这些数据。
- en: Connecting our message cell
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接我们的消息单元格
- en: 'Now that we have our files in order, we can start connecting everything. Earlier,
    we created our cell and now we need to create a cell class with which to connect
    it:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经整理好了文件，我们可以开始连接一切。之前，我们创建了我们的单元格，现在我们需要创建一个用于连接的单元格类：
- en: Right-click the `MessageApp` folder in the Navigator panel and select New File.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航器面板中右键单击`MessageApp`文件夹，并选择新建文件。
- en: Inside of the Choose a template for your new file screen, select iOS at the
    top and, then, Cocoa Touch Class. Then, hit Next.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择新文件模板的屏幕中，在顶部选择iOS，然后选择Cocoa Touch Class。然后，点击下一步。
- en: 'You will now see an options screen. Please add the following in the new file
    section:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在将看到一个选项屏幕。请在新文件部分添加以下内容：
- en: 'Class: `RestaurantMessageCell`'
  id: totrans-172
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类：`RestaurantMessageCell`
- en: 'Subclass: `UICollectionViewCell`'
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子类：`UICollectionViewCell`
- en: 'Also create XIB: Unchecked'
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还创建XIB：未选中
- en: 'Language: `Swift`'
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语言：`Swift`
- en: Click Next and, then, Create.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下一步，然后创建。
- en: 'In the new file, add the following inside of the class declaration:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新文件中，在类声明内部添加以下内容：
- en: '[PRE8]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Save the file and then open `MainInterface.storyboard` in the `MessageApp` folder
    in the Navigator panel.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件，然后在导航器面板中的`MessageApp`文件夹中打开`MainInterface.storyboard`。
- en: In the Outline view, select the Collection View Cell.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在大纲视图中，选择集合视图单元格。
- en: Then, select the Identity inspector in the Utilities panel; and, under Custom
    Class in the Class drop-down menu, select RestaurantMessageCell and hit *Enter*.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在实用工具面板中选择身份检查器；在类下拉菜单中的自定义类下，选择RestaurantMessageCell并按*Enter*。
- en: Next, switch to the Attributes inspector in the Utilities panel and update the
    identifier to `restaurantCell` and then hit *Enter*.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，切换到实用工具面板中的属性检查器，并将标识符更新为`restaurantCell`，然后按*Enter*。
- en: 'Now, switch to the Connections inspector in the Utilities panel, and click
    and drag from the empty circle next to each outlet listed to the corresponding
    `UILabel` in the screen shown in the following screenshot:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，切换到实用工具面板中的连接检查器，并从每个列表旁边的空圆圈拖动到屏幕上显示的相应`UILabel`。
- en: '[PRE9]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](img/65332a26-2c94-452d-aa8c-22fa4f14f2d8.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/65332a26-2c94-452d-aa8c-22fa4f14f2d8.png)'
- en: We now have our cell set up. Let's continue getting our *iMessages* app working.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经设置了单元格。让我们继续让我们的*iMessages*应用程序工作。
- en: Showing restaurants
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 展示餐厅
- en: We will be showing a list of restaurants just like in our app, but we will not
    be doing the entire interface. Most of this code will be familiar to you as we
    have done it before.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将展示一个餐厅列表，就像在我们的应用程序中一样，但我们不会做整个界面。大部分代码对你来说都很熟悉，因为我们之前已经做过。
- en: 'Open up the `MessagesViewController.swift` file in the Navigator panel and
    add the following code inside of the class declaration:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航器面板中打开`MessagesViewController.swift`文件，并在类声明内部添加以下代码：
- en: '[PRE10]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, we need to set up our Collection View defaults. Add the following method
    inside of a `private` extension:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要设置我们的集合视图默认值。在`private`扩展内部添加以下方法：
- en: '[PRE11]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You will see errors once you add the preceding code. Ignore them for now as
    we will fix them shortly. Now, we will create an `initialize()` method that will
    set up the Collection View and fetch our data.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 添加前面的代码后，你将看到错误。现在忽略它们，因为我们很快就会修复它们。现在，我们将创建一个`initialize()`方法，该方法将设置集合视图并获取我们的数据。
- en: 'Add the following method above the `createMessage()` method:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`createMessage()`方法之上添加以下方法：
- en: '[PRE12]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Since this tab does not contain a location list, we will just pass a city in
    manually. Here, we use Chicago, but you can change it to any city of your choice.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个标签页不包含位置列表，我们只需手动传递一个城市。这里我们使用芝加哥，但你也可以将其更改为你选择的任何城市。
- en: 'Next, call the `initialize()` method inside of the `viewDidLoad()` method,
    so that your `viewDidLoad()` method now looks as follows:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`viewDidLoad()`方法内部调用`initialize()`方法，这样你的`viewDidLoad()`方法现在看起来如下：
- en: '[PRE13]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, let''s create another extension for our Collection View delegates and
    data source. After the last curly brace in the `MessagesViewController.swift`
    file, add the following `extension` declaration:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，让我们为我们的集合视图代理和数据源创建另一个扩展。在`MessagesViewController.swift`文件中的最后一个花括号之后，添加以下`extension`声明：
- en: '[PRE14]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now that we have our `extension` set up, let''s add all of the methods we need
    to get our Collection View showing data. Please add the following inside of our
    extension (which will get rid of our earlier errors):'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经设置了`extension`，让我们添加所有需要的函数来使我们的集合视图显示数据。请在我们的`extension`内部添加以下内容（这将消除我们之前的错误）：
- en: '[PRE15]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You should be very familiar with what we just added. We are setting up our Collection
    View data source as well as making sure our cells have a spacing of 14 pixels
    (7 on each side).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该非常熟悉我们刚刚添加的内容。我们正在设置我们的集合视图数据源，并确保我们的单元格间距为14像素（每边7像素）。
- en: 'Lastly, before we build our app, we need to connect our Collection View in
    the storyboard:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在我们构建应用程序之前，我们需要在故事板中连接我们的集合视图：
- en: Open up `MainInterface.storyboard` in the `MessageApp` folder in the Navigator
    panel.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航器面板中的`MessageApp`文件夹中打开`MainInterface.storyboard`。
- en: Select the Message View Controller and, then, the Connections inspector in the
    Utilities panel.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择消息视图控制器，然后是实用工具面板中的连接检查器。
- en: Then, under Outlets, click and drag from the empty circle next to `collectionView`
    to the Collection View in our scene.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在输出端口下，点击并从 `collectionView` 旁边的空圆圈拖动到我们的场景中的集合视图中。
- en: 'Let''s change the target *Message App* and build and run our *iMessages* app
    by hitting the Play button (or using ⌘ + *R*). Your app should look similar to
    the following after clicking the stickers button:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更改目标 *消息应用* 并通过点击播放按钮（或使用 ⌘ + *R*）构建和运行我们的 *iMessages* 应用。点击贴纸按钮后，您的应用应该看起来类似于以下图片：
- en: '![](img/6cec8c83-ea99-41bc-b8a2-854a81c82eee.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6cec8c83-ea99-41bc-b8a2-854a81c82eee.png)'
- en: Hitting the arrow (highlighted by the red boxes) will expand the screen to expanded
    mode from compact mode and back again. Now that we have our restaurants displaying,
    we need to be able to send the restaurant reservation to other people. Let's add
    that next.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 点击箭头（由红色方框突出显示）将屏幕从紧凑模式扩展到扩展模式，然后再回到紧凑模式。现在我们已经显示了我们的餐厅，我们需要能够将餐厅预订发送给其他人。让我们接下来添加这个功能。
- en: iMessage crashing
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: iMessage 崩溃
- en: If you just tried to launch the app and it crashed, there is a fix for this.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您刚刚尝试启动应用并且它崩溃了，这里有一个修复方法。
- en: In the simulator, open the `Messages` app.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模拟器中，打开 `消息` 应用。
- en: Select Kate.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择凯特。
- en: 'Then click on the icon with the three dots:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后点击带有三个点的图标：
- en: '![](img/4eb7f125-5898-448d-a709-aff84e6b1712.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4eb7f125-5898-448d-a709-aff84e6b1712.png)'
- en: 'Then click Edit:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后点击编辑：
- en: '![](img/35081487-1388-47c4-b0f3-fc89dd841a47.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](img/35081487-1388-47c4-b0f3-fc89dd841a47.png)'
- en: 'Click the switch for `MessageApp`:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `MessageApp` 的开关：
- en: '![](img/41e13e1e-7cae-471b-813f-437fea21e687.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![](img/41e13e1e-7cae-471b-813f-437fea21e687.png)'
- en: Click Done.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击完成。
- en: Build and rerun the app, and you should be fine. This error is an Apple bug
    and performing these steps is the only way to fix this issue. Let's move on to
    sending reservations.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并重新运行应用，应该就没有问题了。这个错误是苹果的 bug，执行这些步骤是修复此问题的唯一方法。让我们继续发送预订。
- en: Sending reservations
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发送预订
- en: 'We need to set up our Collection View so that, when the user taps on a cell,
    it will add the reservation to the conversation in iMessages. When creating a
    message to send, we have the following things we can set:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要设置我们的集合视图，以便当用户点击一个单元格时，它将预订添加到 iMessages 中的对话中。在创建要发送的消息时，我们可以设置以下内容：
- en: '![](img/7ec4f400-dcb4-41cc-962c-5b5f78df5fb9.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7ec4f400-dcb4-41cc-962c-5b5f78df5fb9.png)'
- en: We will use everything but the Trailing Caption and Trailing Subcaption.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用除尾注和尾副标题之外的所有内容。
- en: Open up `MessagesViewController` in the `MessageApp` folder in the Navigator
    panel.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航面板中打开 `MessageApp` 文件夹中的 `MessagesViewController`。
- en: 'Then, in our main class declaration, add the following method after the `setupCollectionView()`
    method in the `private` extension:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在我们的主类声明中，在 `private` 扩展中的 `setupCollectionView()` 方法之后添加以下方法：
- en: '[PRE17]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In this method, we are setting up an `MSMessage`. We check for an active conversation
    first. If `true`, we then set up our layout. Here, we are just using an image
    from our assets to create an image background (we could have also used a video,
    for example). Also, we set the caption `Table for 7, tonight at 10:00PM`. This
    allows the receiver to see all of the relevant information for the reservation.
    Next, we set the restaurant name as the image title and the restaurant's cuisine
    as the image subtitle. Then, we create an instance of the `MSMessage`, pass it
    the layout we created, and give it a URL (which, in our case, is just an empty
    string, since we do not have an URL). Finally, we insert the message into the
    conversation. We need to make sure that, when we want to send a message, we are
    in compact mode; otherwise, the user will think that the app does not work.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个方法中，我们正在设置一个 `MSMessage`。我们首先检查是否有活跃的对话。如果是 `true`，我们然后设置我们的布局。在这里，我们只是使用我们的资源中的一个图片来创建一个图片背景（我们也可以使用视频，例如）。我们还设置了标题
    `Table for 7, tonight at 10:00PM`。这允许接收者看到预订的所有相关信息。接下来，我们将餐厅名称作为图片标题，将餐厅的菜系作为图片副标题。然后，我们创建一个
    `MSMessage` 实例，传递我们创建的布局，并给它一个 URL（在我们的情况下，只是一个空字符串，因为我们没有 URL）。最后，我们将消息插入到对话中。我们需要确保，当我们想要发送消息时，我们处于紧凑模式；否则，用户会认为应用不起作用。
- en: 'Lastly, we just need to add the code that calls our `createMessage()` method.
    Add the following method in our extension, but before the last curly brace:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们只需要添加调用我们的 `createMessage()` 方法的代码。在我们的扩展中添加以下方法，但在最后一个花括号之前：
- en: '[PRE18]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here, we are checking for when the user taps a cell; then, we get `selectedRestaurant`
    and pass it to our `createMessage()` method.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们正在检查用户是否点击了一个单元格；然后，我们获取 `selectedRestaurant` 并将其传递给我们的 `createMessage()`
    方法。
- en: 'Let''s build and run the project by hitting the Play button (or using ⌘ + *R*).
    Select a restaurant and you will now see a message with the selected restaurant
    in the message area:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击播放按钮（或使用 ⌘ + *R*）来构建和运行项目。选择一家餐厅，你将现在在消息区域看到一条包含所选餐厅的消息：
- en: '![](img/9bf8e31f-6c0a-4829-95bb-f5c61c0c1135.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9bf8e31f-6c0a-4829-95bb-f5c61c0c1135.png)'
- en: You can see that, with a little bit of work, you can add a nice *iMessages*
    app to your app.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，只需一点努力，你就可以给你的应用添加一个不错的 *iMessages* 应用。
- en: Summary
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at how to add an *iMessage* app to our app. We also
    created a framework that allowed us to use data in both our apps without having
    to duplicate code. We looked at what is involved with creating an `MSMessage`
    and how we can pass an `MSMessageTemplateLayout` to an `MSMessage`. We now know
    that we can also send embedded videos as well as images when we send messages.
    Also, we can now send reservations through the *iMessages* app with relevant data
    for a reservation.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了如何将 *iMessages* 应用添加到我们的应用中。我们还创建了一个框架，允许我们在两个应用中使用数据而无需重复代码。我们研究了创建
    `MSMessage` 所涉及的内容，以及我们如何将 `MSMessageTemplateLayout` 传递给 `MSMessage`。我们现在知道，在发送消息时，我们也可以发送嵌入的视频以及图片。此外，我们现在可以通过
    *iMessages* 应用发送带有预订相关数据的预订。
- en: In the next chapter, we will go back to our *Let's Eat* app and we will learn
    how to work with notifications in our app.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将回到我们的 *Let's Eat* 应用，我们将学习如何在我们的应用中处理通知。
