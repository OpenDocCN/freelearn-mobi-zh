- en: Chapter 3. Building Blocks on the Android SDK
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章：Android SDK上的构建块
- en: We now know how to create test projects and run the tests. It is now time to
    start digging a bit deeper to find the building blocks available to create the
    tests.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道了如何创建测试项目和运行测试。现在是时候深入挖掘以找到可用于创建测试的构建块了。
- en: 'Thus, in this third chapter, we will be covering:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本章的第三部分，我们将涵盖：
- en: Common assertions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见断言
- en: View assertions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图断言
- en: Other assertion types
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他断言类型
- en: TouchUtils, intended to test User Interfaces
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TouchUtils，用于测试用户界面
- en: Mock objects
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟对象
- en: Instrumentation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仪器化
- en: TestCase class hierarchies
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TestCase 类层次结构
- en: Using external libraries
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用外部库
- en: We will be analyzing these components and showing examples of their use when
    applicable. The examples in this chapter are intentionally split from the original
    Android project containing them to let you concentrate and focus only on the subject
    being presented, although the complete examples can be downloaded as explained
    later. Right now, we are interested in the trees and not the forest.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将分析这些组件，并在适用时展示它们的使用示例。本章中的示例故意从包含它们的原始 Android 项目中分离出来，以便您集中注意力和关注所展示的主题，尽管完整的示例可以按稍后解释的方式下载。目前，我们感兴趣的只是树木，而不是森林。
- en: Along with the examples presented, we will be identifying common, reusable patterns
    that will help you in the creation of tests for your own projects.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 除了提供的示例外，我们还将识别常见的、可重用的模式，这些模式将帮助您为自己的项目创建测试。
- en: The demonstration application
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 演示应用程序
- en: We have created a very simple application to demonstrate the use of some of
    the tests in this chapter. The source for this application can be downloaded from
    [http://www.packtpub.com/support](http://www.packtpub.com/support).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个非常简单的应用程序来演示本章中一些测试的使用。此应用程序的源代码可以从 [http://www.packtpub.com/support](http://www.packtpub.com/support)
    下载。
- en: 'The next screenshot shows this application running:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个截图显示了此应用程序的运行情况：
- en: '![The demonstration application](img/3500_03_01(2).jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![演示应用程序](img/3500_03_01(2).jpg)'
- en: Assertions in depth
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入探讨断言
- en: Assertions are methods that should check for a condition that could be evaluated
    and throw an exception if the condition is not met, thus aborting the execution
    of the test.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 断言是应该检查可能被评估的条件的方法，如果条件不满足，则抛出异常，从而终止测试的执行。
- en: 'The JUnit API includes the class `Assert`, which is the base class all of the
    test case classes. It holds several assertion methods useful for writing tests.
    These inherited methods test for a variety of conditions and are overloaded to
    support different parameter types. They can be grouped together in different sets,
    depending on the condition checked; for example:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: JUnit API 包含名为 `Assert` 的类，它是所有测试用例类的基类。它包含几个对编写测试有用的断言方法。这些继承的方法用于测试各种条件，并且被重载以支持不同的参数类型。它们可以根据检查的条件分组到不同的集合中；例如：
- en: '`assertEquals`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertEquals`'
- en: '`assertFalse`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertFalse`'
- en: '`assertNotNull`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertNotNull`'
- en: '`assertNotSame`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertNotSame`'
- en: '`assertNull`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertNull`'
- en: '`assertSame`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertSame`'
- en: '`assertTrue`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertTrue`'
- en: '`fail`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fail`'
- en: The condition tested is pretty obvious and easily identifiable by the method
    name. Perhaps the ones that deserve some attention are `assertEquals()` and `assertSame()`.
    The former when used on objects asserts that both objects passed as parameters
    are equal, calling the objects' `equals()` method. The latter asserts that both
    objects refer to the same object. If in some case `equals()` is not implemented
    by the class, then `assertEquals()` and `assertSame()` will do the same thing.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 被测试的条件非常明显，可以通过方法名轻松识别。可能值得注意的断言是 `assertEquals()` 和 `assertSame()`。前者在对象上使用时断言传入的两个参数对象相等，调用对象的
    `equals()` 方法。后者断言两个对象引用同一个对象。如果在某些情况下类没有实现 `equals()`，那么 `assertEquals()` 和 `assertSame()`
    将执行相同的事情。
- en: When one of these assertions fails inside a test an `AssertionFailedException`
    is thrown.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当这些断言之一在测试中失败时，会抛出 `AssertionFailedException`。
- en: 'Occasionally, during the development process you may need to create a test
    that you are not implementing at that precise time. However, you want to flag
    that the creation of the test was postponed. We did this in [Chapter 1](ch01.html
    "Chapter 1. Getting Started with Testing"), *Getting Started with Testing* when
    we added just the test method stubs. In those cases you may use the `fail` method
    which always fails and use a custom message indicating the condition:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中，偶尔你可能需要创建一个你当时没有实现测试。然而，你希望标记测试的创建被推迟。我们在 [第 1 章](ch01.html "第 1 章。开始测试")
    的 *开始测试* 中这样做，当时我们只添加了测试方法存根。在这些情况下，你可以使用 `fail` 方法，它总是失败，并使用自定义消息来指示条件：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'There is another common use for `fail()` that is worth mentioning. If we need
    to test if a method throws an exception we can surround the code with a try-catch
    block and force a fail if the exception was not thrown. For example:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，`fail()` 方法还有另一个常见的用途。如果我们需要测试一个方法是否抛出异常，我们可以用 try-catch 块包围代码，并在未抛出异常的情况下强制失败。例如：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Custom messages
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义消息
- en: Speaking about custom messages, it is worth knowing that all `assert` methods
    provide an overloaded version including a custom `String` message. Should the
    assertion fail this custom message will be printed by the test runner instead
    of a default message. This custom message is extremely useful for easily identifying
    the failure once you are looking at the test report, so it is highly recommended
    as a best practice to use this version.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 说到自定义消息，值得知道的是，所有的 `assert` 方法都提供了一个包含自定义 `String` 消息的重载版本。如果断言失败，测试运行器将打印这个自定义消息而不是默认消息。这个自定义消息在查看测试报告时很容易识别失败，因此强烈建议将其作为最佳实践使用。
- en: 'This is an example of a trivial test using this recommendation:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用此建议进行的简单测试示例：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the example we can see another practice that would help you organize and
    understand your tests easily. This is the use of explicit names for variables
    holding the expected and actual values.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例中，我们可以看到另一种有助于你轻松组织和理解测试的实践。这是为存储预期值和实际值的变量使用显式名称的使用。
- en: Static imports
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 静态导入
- en: 'Though basic assertion methods are inherited from the Assert base class, some
    other assertions need specific imports. To improve readability of your tests there
    is a pattern of importing the assert methods statically from the corresponding
    classes. Using this pattern instead of having:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然基本的断言方法是从 Assert 基类继承的，但某些其他断言需要特定的导入。为了提高测试的可读性，有一种模式是从相应的类中静态导入断言方法。使用这种模式而不是有：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can simplify it by adding the static import:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过添加静态导入来简化它：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Eclipse doesn''t usually handle these static imports automatically, so if you
    want content assist (*Ctrl+SPACE*) to add static imports for you when you type
    the beginning of one of these asserts, you should add the classes to the Favorites
    list in Eclipse. To do this, navigate to **Window | Preferences | Java | Editor
    | Content Assist | Favorites | New Type**. Type in: **android.test.ViewAsserts**
    and then add another type: **android.test.MoreAsserts**.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse 通常不会自动处理这些静态导入，所以如果你想当你在输入这些断言的开始时，让内容辅助 (*Ctrl+SPACE*) 为你添加静态导入，你应该将这些类添加到
    Eclipse 的收藏夹列表中。为此，导航到 **窗口 | 首选项 | Java | 编辑器 | 内容辅助 | 收藏夹 | 新类型**。输入：**android.test.ViewAsserts**，然后添加另一个类型：**android.test.MoreAsserts**。
- en: '![Static imports](img/3500_03_02.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![静态导入](img/3500_03_02.jpg)'
- en: View assertions
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 视图断言
- en: The assertions introduced earlier handle a variety of types as parameters but
    they are only intended to test simple conditions or simple objects.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 之前引入的断言可以处理各种类型的参数，但它们仅用于测试简单的条件或简单的对象。
- en: For example, we have `assertEquals(short expected, short actual)` to test `short`
    values, `assertEquals(int expected, int actual)` to test integer values, `assertEquals(Object
    expected, Object actual)` to test any `Object` instance, and so on.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们有 `assertEquals(short expected, short actual)` 来测试 `short` 值，`assertEquals(int
    expected, int actual)` 来测试整数值，`assertEquals(Object expected, Object actual)` 来测试任何
    `Object` 实例，等等。
- en: Usually while testing user interfaces in Android, you will face the necessity
    of more sophisticated methods, mainly related with `Views`. In this respect, Android
    provides a class with plenty of assertions in `android.test.ViewAsserts` (see
    [http://developer.android.com/reference/android/test/ViewAsserts.html](http://developer.android.com/reference/android/test/ViewAsserts.html)
    for details) that test the relationships between Views and their absolute and
    relative positions on the screen.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 通常在测试Android用户界面时，你会面临需要更复杂的方法，主要与`Views`相关。在这方面，Android提供了一个类，在`android.test.ViewAsserts`中提供了大量的断言（有关详细信息，请参阅[http://developer.android.com/reference/android/test/ViewAsserts.html](http://developer.android.com/reference/android/test/ViewAsserts.html)）来测试视图及其在屏幕上的绝对和相对位置之间的关系。
- en: 'These methods are also overloaded to provide different conditions. Among the
    assertions, we can find:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法也被重载以提供不同的条件。在断言中，我们可以找到：
- en: '`assertBaselineAligned:` Asserts that two views are aligned on their baseline,
    that is their baselines are on the same y location.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertBaselineAligned:` 断言两个视图在其基线对齐，即它们的基线位于相同的y位置。'
- en: '`assertBottomAligned:` Asserts that two views are bottom aligned, that is their
    bottom edges are on the same y location.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertBottomAligned:` 断言两个视图底部对齐，即它们的底部边缘位于相同的y位置。'
- en: '`assertGroupContains:` Asserts that the specified group contains a specific
    child once and only once.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertGroupContains:` 断言指定的组包含特定的子视图一次且仅一次。'
- en: '`assertGroupIntegrity:` Asserts the specified group''s integrity. The children
    count should be >= 0 and each child should be non-null.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertGroupIntegrity:` 断言指定组的完整性。子视图的数量应该是 >= 0，并且每个子视图都应该非空。'
- en: '`assertGroupNotContains:` Asserts that the specified group does not contain
    a specific child.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertGroupNotContains:` 断言指定的组不包含特定的子视图。'
- en: '`assertHasScreenCoordinates:` Asserts that a view has a particular x and y
    position on the visible screen.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertHasScreenCoordinates:` 断言一个视图在可见屏幕上有特定的x和y位置。'
- en: '`assertHorizontalCenterAligned:` Asserts that the test view is horizontally
    center aligned with respect to the reference view.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertHorizontalCenterAligned:` 断言测试视图相对于参考视图水平居中对齐。'
- en: '`assertLeftAligned:` Asserts that two views are left aligned, that is their
    left edges are on the same x location. An optional margin can also be provided.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertLeftAligned:` 断言两个视图左对齐，即它们的左边缘位于相同的x位置。也可以提供一个可选的边距。'
- en: '`assertOffScreenAbove:` Asserts that the specified view is above the visible
    screen.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertOffScreenAbove:` 断言指定的视图在可见屏幕上方。'
- en: '`assertOffScreenBelow:` Asserts that the specified view is below the visible
    screen.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertOffScreenBelow:` 断言指定的视图在可见屏幕下方。'
- en: '`assertOnScreen:` Asserts that a view is on the screen.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertOnScreen:` 断言一个视图在屏幕上。'
- en: '`assertRightAligned:` Asserts that two views are right-aligned, that is their
    right edges are on the same x location. An optional margin can also be specified.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertRightAligned:` 断言两个视图右对齐，即它们的右边缘位于相同的x位置。也可以指定一个可选的边距。'
- en: '`assertTopAligned:` Asserts that two views are top-aligned, that is their top
    edges are on the same y location. An optional margin can also be specified.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertTopAligned:` 断言两个视图顶部对齐，即它们的顶部边缘位于相同的y位置。也可以指定一个可选的边距。'
- en: '`assertVerticalCenterAligned:` Asserts that the test view is vertically center
    aligned with respect to the reference view.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertVerticalCenterAligned:` 断言测试视图相对于参考视图垂直居中对齐。'
- en: 'The following example shows how you can use `ViewAsserts` to test the user
    interface layout:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了如何使用`ViewAsserts`来测试用户界面布局：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `assertOnScreen` method uses an origin to start looking for the requested
    `Views`. In this case we are using the top-level window decor View. If for some
    reason you don't need to go that high in the hierarchy or if this approach is
    not suitable for your test, you may use another root `View` in the hierarchy;
    for example `View.getRootView()` which in our concrete example would be `mMessage.getRootView().`
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`assertOnScreen` 方法使用一个原点开始查找请求的`Views`。在这种情况下，我们使用顶级窗口装饰视图。如果由于某种原因你不需要在层次结构中走那么高，或者这种方法不适合你的测试，你可以使用层次结构中的另一个根`View`；例如
    `View.getRootView()`，在我们的具体示例中将是 `mMessage.getRootView()`。'
- en: Even more assertions
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多的断言
- en: If the assertions reviewed previously do not seem to be enough for your tests'
    needs, there is yet another class included in the Android framework that covers
    other cases. This class is `MoreAsserts` ([http://developer.android.com/reference/android/test/MoreAsserts.html](http://developer.android.com/reference/android/test/MoreAsserts.html)).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果之前审查的断言似乎不足以满足测试需求，Android 框架中还包括另一个类来涵盖其他情况。这个类是 `MoreAsserts` ([http://developer.android.com/reference/android/test/MoreAsserts.html](http://developer.android.com/reference/android/test/MoreAsserts.html))。
- en: 'These methods are also overloaded, to support different conditions. Among these
    assertions we can find:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法也是重载的，以支持不同的条件。在这些断言中，我们可以找到：
- en: '`assertAssignableFrom:` Asserts that an object is assignable to a class.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertAssignableFrom:` 断言一个对象可以被分配给一个类。'
- en: '`assertContainsRegex:` Asserts that an expected `Regex` matches any substring
    of the specified `String`. It fails with the specified message if it does not.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertContainsRegex:` 断言预期的 `Regex` 匹配指定的 `String` 的任何子串。如果不匹配，则使用指定的信息失败。'
- en: '`assertContainsInAnyOrder:` Asserts that the specified `Iterable` contains
    precisely the elements expected, but in any order.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertContainsInAnyOrder:` 断言指定的 `Iterable` 包含精确期望的元素，但顺序可以是任意的。'
- en: '`assertContainsInOrder:` Asserts that the specified `Iterable` contains precisely
    the elements expected, in the same order.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertContainsInOrder:` 断言指定的 `Iterable` 包含精确期望的元素，且顺序相同。'
- en: '`assertEmpty:` Asserts that an `Iterable` is empty.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertEmpty:` 断言一个 `Iterable` 是空的。'
- en: '`assertEquals` for some `Collections` not covered in JUnit asserts.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertEquals` 用于一些 JUnit 断言中没有涵盖的 `Collections`。'
- en: '`assertMatchesRegex:` Asserts that the specified `Regex` exactly matches the
    `String` and fails with the provided message if it does not.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertMatchesRegex:` 断言指定的 `Regex` 与 `String` 完全匹配，如果不匹配则使用提供的信息失败。'
- en: '`assertNotContainsRegex:` Asserts that the specified `Regex` does not match
    any substring of the specified String, and fails with the provided message if
    it does.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertNotContainsRegex:` 断言指定的 `Regex` 不匹配指定的 String 的任何子串，如果匹配则使用提供的信息失败。'
- en: '`assertNotEmpty:` Asserts that some `Collections` not covered in JUnit asserts
    are not empty.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertNotEmpty:` 断言一些 JUnit 断言中没有涵盖的 `Collections` 不是空的。'
- en: '`assertNotMatchesRegex:` Asserts that the specified `Regex` does not exactly
    match the specified String, and fails with the provided message if it does.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertNotMatchesRegex:` 断言指定的 `Regex` 与指定的 String 不完全匹配，如果匹配则使用提供的信息失败。'
- en: '`checkEqualsAndHashCodeMethods:` Utility for testing `equals()` and `hashCode()`
    results at once. Tests that `equals()` applied to both objects matches the specified
    result.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`checkEqualsAndHashCodeMethods:` 用于一次性测试 `equals()` 和 `hashCode()` 结果的工具。测试应用于两个对象的
    `equals()` 是否匹配指定的结果。'
- en: This test below checks for an error during the invocation of the capitalization
    method called via a click on the UI button.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下测试检查通过点击 UI 按钮调用的首字母大写方法调用期间是否出现错误。
- en: '[PRE6]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Note that because this is a test that modifies the user interface, we must
    annotate it with `@UiThreadTest`, otherwise it won''t be able to alter the UI
    from a different thread and we will receive the following exception:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，因为这是一个修改用户界面的测试，我们必须用 `@UiThreadTest` 注解它，否则它将无法从不同的线程更改 UI，并且我们会收到以下异常：
- en: '**03-02 23:06:05.826: INFO/TestRunner(610): ----- begin exception -----**'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**03-02 23:06:05.826: INFO/TestRunner(610): ----- 开始异常 -----**'
- en: '**03-02 23:06:05.862: INFO/TestRunner(610): android.view.ViewRoot$CalledFromWrongThreadException:
    Only the original thread that created a view hierarchy can touch its views**.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**03-02 23:06:05.862: INFO/TestRunner(610): android.view.ViewRoot$CalledFromWrongThreadException:
    只能是创建视图层次结构的原始线程才能触摸其视图**。'
- en: '**03-02 23:06:05.862: INFO/TestRunner(610): at android.view.ViewRoot.checkThread(ViewRoot.java:2932)**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**03-02 23:06:05.862: INFO/TestRunner(610): 在 android.view.ViewRoot.java:2932
    的 android.view.ViewRoot.checkThread()**'
- en: '**[...]**'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**[...]**'
- en: '**03-02 23:06:05.862: INFO/TestRunner(610): at android.app.Instrumentation$InstrumentationThread.run(Instrumentation.java:1447)**'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**03-02 23:06:05.862: INFO/TestRunner(610): 在 android.app.Instrumentation$InstrumentationThread.run(Instrumentation.java:1447)**'
- en: '**03-02 23:06:05.892: INFO/TestRunner(610): ----- end exception -----**'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**03-02 23:06:05.892: INFO/TestRunner(610): ----- 结束异常 -----**'
- en: If you are not familiar with regular expressions, invest some time and visit
    [http://developer.android.com/reference/java/util/regex/package-summary.html](http://developer.android.com/reference/java/util/regex/package-summary.html),
    it will be worth it!
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不太熟悉正则表达式，花些时间访问 [http://developer.android.com/reference/java/util/regex/package-summary.html](http://developer.android.com/reference/java/util/regex/package-summary.html)，这将值得。
- en: In this particular case, we are looking for the word "ERROR" contained in the
    result with a case insensitive match (setting the flag 'i' for this purpose).
    That is, if for some reason capitalization didn't work in our application and
    it contains an error message we will detect this condition with the assertion.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个特定的情况下，我们正在寻找结果中包含的单词"ERROR"，进行不区分大小写的匹配（为此设置了标志'i'）。也就是说，如果由于某种原因，大写字母在我们的应用程序中没有起作用，并且它包含错误消息，我们将通过断言检测这种条件。
- en: The TouchUtils class
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TouchUtils类
- en: Sometimes, when testing UIs, it is helpful to simulate different kinds of touch
    events. These touch events can be generated in many different ways but probably
    `android.test.TouchUtils` is the simplest to use. This class provides reusable
    methods for generating touch events in test cases that are derived from `InstrumentationTestCase`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，在测试UI时，模拟不同类型的触摸事件是有帮助的。这些触摸事件可以通过许多不同的方式生成，但可能`android.test.TouchUtils`是最简单的。这个类为从`InstrumentationTestCase`派生的测试用例提供了生成触摸事件的可重用方法。
- en: Featured methods allow simulated interaction with the UI under test. `TouchUtils`
    provides the infrastructure to inject the events using the correct UI or main
    thread, so no special handling is needed and you don't need to annotate the test
    using `@UIThreadTest`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 特色方法允许模拟与正在测试的UI的交互。`TouchUtils`提供了使用正确的UI或主线程注入事件的框架，因此不需要特殊处理，你也不需要使用`@UIThreadTest`注解测试。
- en: 'The mentioned methods support:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 提到的方法支持：
- en: Clicking on a View and releasing it
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击视图并释放
- en: Tapping on a View, that is touching it and quickly releasing
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在视图中轻触，即触摸它然后快速释放
- en: Long clicking on a View
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在视图中长按
- en: Dragging the screen
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拖动屏幕
- en: Dragging Views
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拖动视图
- en: The following test represents a typical usage of `TouchUtils:`
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下测试代表了`TouchUtils`的典型用法：
- en: '[PRE7]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This test does the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试执行以下操作：
- en: Repositions the list at the beginning to start from a known condition.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将列表重新定位到开始位置，以从已知条件开始。
- en: Scroll the list several times.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动列表几次。
- en: Check the first visible position to see that the list was correctly scrolled.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查第一个可见位置，以确认列表已正确滚动。
- en: Check the content of the element to verify that it is correct.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查元素的内容，以验证其是否正确。
- en: Even the most complex UIs can be tested in this way and it will help you detect
    a variety of conditions that could potentially affect the user experience.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是最复杂的UI也可以用这种方式进行测试，这将帮助你检测可能影响用户体验的各种条件。
- en: Mock Objects
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟对象
- en: We visited the Mock Objects provided by the Android testing framework in [Chapter
    1](ch01.html "Chapter 1. Getting Started with Testing"), *Getting Started with
    Testing* and evaluated the concerns regarding not using real objects in order
    to isolate our tests from the surrounding environment.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第1章](ch01.html "第1章。开始测试") *开始测试* 中访问了Android测试框架提供的模拟对象，并评估了不使用真实对象以隔离测试环境的相关问题。
- en: The next chapter deals with Test Driven Development, and if we were Test Driven
    Development purists we may argue about the use of mock objects and be more inclined
    to use real ones. Martin Fowler calls these two styles the *Classical* and *Mockist*
    Test Driven Development dichotomy in his great article *Mocks Aren't Stubs*. It
    can be read online at [http://www.martinfowler.com/articles/mocksArentStubs.html](http://www.martinfowler.com/articles/mocksArentStubs.html).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将讨论测试驱动开发（Test Driven Development），如果我们是测试驱动开发的纯粹主义者，我们可能会争论模拟对象的使用，并更倾向于使用真实对象。马丁·福勒在他的杰出文章《Mock对象不是存根》（Mocks
    Aren't Stubs）中将这两种风格称为*经典*和*模拟主义*测试驱动开发的二分法。这篇文章可以在[http://www.martinfowler.com/articles/mocksArentStubs.html](http://www.martinfowler.com/articles/mocksArentStubs.html)上在线阅读。
- en: Independent of that discussion, we are introducing here the available Mock Objects
    as one of the available building blocks because sometimes introducing mock objects
    in our tests is recommended, desirable, useful, or even unavoidable.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 独立于这次讨论，我们在这里介绍可用的模拟对象作为可用的构建块之一，因为有时在测试中引入模拟对象是推荐的、期望的、有用的，甚至是不可避免的。
- en: 'Android SDK provides some classes in the subpackage `android.test.mock` to
    help us in this quest:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Android SDK在子包`android.test.mock`中提供了一些类，以帮助我们在这个任务中：
- en: '`MockApplication:` A mock implementation of the `Application` class. All methods
    are non-functional and throw `UnsupportedOperationException`.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MockApplication:` `Application`类的模拟实现。所有方法都是非功能的，并抛出`UnsupportedOperationException`。'
- en: '`MockContentProvider:` A mock implementation of `ContentProvider`. All methods
    are non-functional and throw `UnsupportedOperationException`.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MockContentProvider:` `ContentProvider` 的模拟实现。所有方法都是非功能的，并抛出 `UnsupportedOperationException`。'
- en: '`MockContentResolver:` A mock implementation of the `ContentResolver` class
    that isolates the test code from the real content system. All methods are non-functional
    and throw `UnsupportedOperationException`.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MockContentResolver:` 隔离测试代码与真实内容系统的 `ContentResolver` 类的模拟实现。所有方法都是非功能的，并抛出
    `UnsupportedOperationException`。'
- en: '`MockContext:` A mock Context class. This can be used to inject other dependencies.
    All methods are non-functional and throw `UnsupportedOperationException`.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MockContext:` 模拟的 Context 类。这可以用来注入其他依赖。所有方法都是非功能的，并抛出 `UnsupportedOperationException`。'
- en: '`MockCursor:` A mock Cursor class that isolates the test code from real Cursor
    implementation. All methods are non-functional and throw `UnsupportedOperationException`.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MockCursor:` 隔离测试代码与真实 Cursor 实现的模拟 Cursor 类。所有方法都是非功能的，并抛出 `UnsupportedOperationException`。'
- en: '`MockDialogInterface:` A mock implementation of `DialogInterface` class. All
    methods are non-functional and throw `UnsupportedOperationException`.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MockDialogInterface:` `DialogInterface` 类的模拟实现。所有方法都是非功能的，并抛出 `UnsupportedOperationException`。'
- en: '`MockPackageManager:` A mock implementation of `PackageManager` class. All
    methods are non-functional and throw `UnsupportedOperationException`.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MockPackageManager:` `PackageManager` 类的模拟实现。所有方法都是非功能的，并抛出 `UnsupportedOperationException`。'
- en: '`MockResources:` A mock Resources class. All methods are non-functional and
    throw `UnsupportedOperationException`.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MockResources:` 模拟的 Resources 类。所有方法都是非功能的，并抛出 `UnsupportedOperationException`。'
- en: As we mentioned, all of these classes have non-functional methods that throw
    `UnsupportedOperationException` if used. So, if you need to use some of these
    methods or if you detect that your test is failing with this `Exception`, you
    should extend one of these base classes and provide the required functionality.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们提到的，所有这些类都有非功能的方法，如果使用这些方法，将会抛出 `UnsupportedOperationException`。因此，如果你需要使用这些方法之一，或者如果你检测到你的测试因为这个
    `Exception` 而失败，你应该扩展这些基类之一并提供所需的功能。
- en: MockContext overview
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MockContext 概述
- en: The `MockContext` class implements all methods in a non-functional way and throws
    `UnsupportedOperationException`. So, if you forgot to implement one of the needed
    methods for the test case you are handling, this exception will be thrown and
    you can instantly detect the situation.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`MockContext` 类以非功能方式实现所有方法并抛出 `UnsupportedOperationException`。因此，如果你忘记实现你正在处理的测试用例所需的某个方法，这个异常将会被抛出，你可以立即检测到这种情况。'
- en: This mock can be used to inject other dependencies, mocks, or monitors into
    the classes under test. A finer level of control can be obtained by extending
    this class.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模拟可以用来向待测试的类中注入其他依赖、模拟或监视器。通过扩展这个类可以获得更细粒度的控制。
- en: Extend this class to provide your desired behavior, overriding the corresponding
    methods.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展这个类以提供你期望的行为，重写相应的方法。
- en: As we will cover next, the Android SDK provides some pre-built mock `Contexts`
    that are useful in some cases.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们将要介绍的，Android SDK 提供了一些预构建的模拟 `Context`，在某些情况下非常有用。
- en: The IsolatedContext class
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`IsolatedContext` 类'
- en: In your tests you may find the need to isolate the `Activity` under test to
    prevent interaction with other components. This can be a complete isolation, but
    sometimes this isolation avoids interacting with other components and for your
    `Activity` to behave correctly some connection with the system is still required.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的测试中，你可能需要隔离待测试的 `Activity` 以防止与其他组件交互。这可能是一种完全隔离，但有时这种隔离可以避免与其他组件交互，并且为了你的
    `Activity` 正确行为，仍然需要与系统保持一些连接。
- en: For those cases, the Android SDK provides `android.test.IsolatedContext`, a
    mock `Context` that prevents interaction with most of the underlying system but
    also satisfies the needs of interacting with other packages or components like
    `Services` or `ContentProviders.`
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些情况，Android SDK 提供了 `android.test.IsolatedContext`，这是一个模拟的 `Context`，它防止与大多数底层系统交互，同时也满足与其他包或组件（如
    `Services` 或 `ContentProviders`）交互的需求。
- en: Alternate route to file and database operations
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件和数据库操作的替代路径
- en: In some cases, all we need is to be able to provide an alternate route to the
    file and database operations. For example, if we are testing the application on
    a real device, perhaps we don't want to affect existing files during our tests.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，我们需要的只是能够提供文件和数据库操作的替代路径。例如，如果我们正在对真实设备上的应用程序进行测试，可能我们不想在测试期间影响现有的文件。
- en: 'Such cases can take advantage of another class that is not part of the `android.test.mock`
    subpackage but of `android.test` instead: `RenamingDelegatingContext`.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况可以利用另一个类，这个类不属于`android.test.mock`子包，而是属于`android.test`包：`RenamingDelegatingContext`。
- en: This class lets us alter operations on files and databases by having a prefix
    that is specified in the constructor. All other operations are delegated to the
    delegating Context that you must specify in the constructor too.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类允许我们通过在构造函数中指定的前缀来改变对文件和数据库的操作。所有其他操作都委托给构造函数中必须指定的委托上下文。
- en: Suppose our `Activity` under test uses some files we want to control in some
    way, maybe introducing specialized content or a fixture to drive our tests and
    we don't want to or we can't use the real files. In this case we create a `RenamingDelegatingContext`
    specifying a prefix; we add this prefix to the replacement file names and our
    unchanged `Activity` will use them instead.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们要测试的`Activity`使用了我们想要以某种方式控制的文件，可能是在测试中引入特殊内容或固定装置来驱动测试，而我们不想或不能使用真实文件。在这种情况下，我们创建一个指定前缀的`RenamingDelegatingContext`；我们将这个前缀添加到替换文件名中，我们的未更改的`Activity`将使用它们。
- en: For example, if our Activity tries to access a file named `birthdays.txt`, and
    we provide `RenamingDelegatingContext` specifying the prefix "test", then this
    same Activity will access the file `testbirthdays.txt` instead, when it is being
    tested.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们的`Activity`试图访问名为`birthdays.txt`的文件，而我们提供了指定前缀“test”的`RenamingDelegatingContext`，那么当它被测试时，这个相同的`Activity`将访问文件`testbirthdays.txt`。
- en: The MockContentResolver class
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`MockContentResolver`类'
- en: The `MockContentResolver` class implements all methods in a non-functional way
    and throws the exception `UnsupportedOperationException` if you attempt to use
    them. The reason for this class is to isolate tests from the real content.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`MockContentResolver`类以非功能方式实现了所有方法，并在你尝试使用它们时抛出`UnsupportedOperationException`异常。这个类的原因是将测试与真实内容隔离开来。'
- en: Let's say your application uses a `ContentProvider` maybe from more than one
    `Activity`. You can create unit-tests for this `ContentProvider` using `ProviderTestCase2`,
    which we will be looking at shortly, and in some cases implementing a `RenamingDelegatingContext`
    as previously described.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你的应用程序使用了一个`ContentProvider`，可能来自多个`Activity`。你可以使用`ProviderTestCase2`对这个`ContentProvider`创建单元测试，我们很快就会看到它，在某些情况下，还可以实现一个如之前所述的`RenamingDelegatingContext`。
- en: But when we try to produce functional or integration tests of our Activities
    against the `ContentProvider`, it's not so evident what test case to use. The
    most obvious choice is `ActivityInstrumentationTestCase2` if your functional tests
    mainly simulate user experience because you may need `sendKeys()` or similar methods,
    which are readily available in these tests.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 但是当我们尝试对`ContentProvider`进行功能或集成测试时，使用哪个测试案例并不那么明显。如果你的功能测试主要模拟用户体验，最明显的选择是`ActivityInstrumentationTestCase2`，因为你可能需要`sendKeys()`或类似的方法，这些方法在这些测试中是现成的。
- en: The first problem you may encounter then is that it's not clear where to inject
    a `MockContentResolver` in your test to be able to use a test database instance
    or database fixture with your `ContentProvider`. There's no way to inject a `MockContext`
    either.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能遇到的第一问题是，不清楚在哪里注入`MockContentResolver`到你的测试中，以便能够使用测试数据库实例或数据库固定装置与你的`ContentProvider`一起使用。也无法注入`MockContext`。
- en: This problem will be solved in [Chapter 7](ch07.html "Chapter 7. Testing Recipes"),
    *Testing Recipes* where further details are provided.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题将在[第7章](ch07.html "第7章。测试食谱")中解决，*测试食谱*，其中提供了更多详细信息。
- en: The TestCase base class
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`TestCase`基类'
- en: This is the base class of all other test cases in the JUnit framework. It implements
    the basic methods that we were analyzing in previous examples.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这是JUnit框架中所有其他测试案例的基类。它实现了我们在前例中分析的基本方法。
- en: '`TestCase` also implements the `junit.framework.Test` interface.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`TestCase`还实现了`junit.framework.Test`接口。'
- en: This is the UML class diagram of `TestCase` and the `Test` interface.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`TestCase`和`Test`接口的UML类图。
- en: '![The TestCase base class](img/3500_03_03.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![TestCase基类](img/3500_03_03.jpg)'
- en: Test cases should either extend `TestCase` directly or one of its descendants.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 测试案例应该直接扩展`TestCase`或其子类之一。
- en: There are other methods beside the ones explained before.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 除了之前解释的方法之外，还有其他方法。
- en: The no-argument constructor
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无参构造函数
- en: All test cases require a default constructor because sometimes, depending on
    the test runner used, this is the only constructor that is invoked. It is also
    used for serialization.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 所有测试用例都需要默认构造函数，因为有时，根据使用的测试运行器，这可能是唯一被调用的构造函数。它也用于序列化。
- en: According to the documentation, this method is not intended to be used by mere
    mortals without calling `setName(String name)`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 根据文档，这个方法不打算在没有调用 `setName(String name)` 的情况下由普通人使用。
- en: A common pattern is to use a default constant test case name in this constructor
    and invoke the **Given name** constructor afterwards.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的模式是在这个构造函数中使用默认常量测试用例名称，然后调用 **Given name** 构造函数。
- en: '[PRE8]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The given name constructor
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 带名称的构造函数
- en: This constructor takes a name as an argument to give to the test case. It will
    appear in test reports and will be helpful when you try to identify failed tests.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这个构造函数接受一个参数作为测试用例的名称。它将出现在测试报告中，并在尝试识别失败的测试时很有帮助。
- en: The setName() method
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: setName() 方法
- en: There are some classes extending `TestCase` that don't provide a given name
    constructor. In such cases the only alternative is to call `setName(String name)`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 有些扩展自 `TestCase` 的类没有提供带名称的构造函数。在这种情况下，唯一的替代方案是调用 `setName(String name)`。
- en: The AndroidTestCase base class
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AndroidTestCase 基类
- en: This class can be used as a base class for general purpose Android test cases.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类可以用作通用 Android 测试用例的基类。
- en: This is the UML class diagram of `AndroidTestCase` and the closest related classes.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `AndroidTestCase` 及其最相关类的 UML 类图。
- en: '![The AndroidTestCase base class](img/3500_03_04.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![AndroidTestCase 基类](img/3500_03_04.jpg)'
- en: Use this class when you need access to an Activity Context like Resources, databases,
    or files in the filesystem. Context is stored as a field in this class conveniently
    named `mContext` and can be used inside the tests if needed. The `getContext()`
    method can be used too.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要访问 Activity Context（如资源、数据库或文件系统中的文件）时，请使用这个类。Context 作为名为 `mContext` 的字段存储在这个类中，并在需要时可以在测试中使用。也可以使用
    `getContext()` 方法。
- en: Tests based on this class can start more than one `Activity` using `Context.startActivity()`.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 基于这个类的测试可以启动多个 `Activity`，使用 `Context.startActivity()`。
- en: 'There are various test cases in Android SDK that extend this base class:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Android SDK 中有许多扩展这个基类的测试用例：
- en: '`ApplicationTestCase<T extends Application>`'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ApplicationTestCase<T extends Application>`'
- en: '`ProviderTestCase2<T extends ContentProvider>`'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ProviderTestCase2<T extends ContentProvider>`'
- en: '`ServiceTestCase<T extends Service>`'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ServiceTestCase<T extends Service>`'
- en: The assertActivityRequiresPermission() method
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: assertActivityRequiresPermission() 方法
- en: 'The signature for this method is as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法的签名如下：
- en: '[PRE9]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Description
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: 'This assertion method checks that the launching of a particular `Activity`
    is protected by specific permission. It takes three parameters:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这个断言方法检查特定 `Activity` 的启动是否受到特定权限的保护。它接受三个参数：
- en: '`packageName:` A String indicating the package name of the Activity to launch'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`packageName:` 表示要启动的 Activity 的包名的字符串'
- en: '`className:` A String indicating the class of the Activity to launch'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`className:` 表示要启动的 Activity 类的字符串'
- en: '`permission:` A String with the permission to query'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`permission:` 一个表示查询权限的字符串'
- en: The `Activity` is launched and then a `SecurityException` is expected mentioning
    that the required permission is missing in the error message. The Activity is
    not handled by this test and thus an `Instrumentation` is not needed.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`Activity` 被启动，然后预期会抛出一个 `SecurityException`，错误信息中提到所需的权限缺失。该 `Activity` 不由这个测试处理，因此不需要
    `Instrumentation`。'
- en: Example
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: This test checks the requirement of the `android.Manifest.permission.WRITE_EXTERNAL_STORAGE`
    permission, needed to write to external storage, in the Activity `MyContactsActivity:`
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试检查 `MyContactsActivity` 活动中写入外部存储所需的 `android.Manifest.permission.WRITE_EXTERNAL_STORAGE`
    权限的要求。
- en: '[PRE10]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Tip
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Always use the constants describing the permissions from `android.Manifest.permission`,
    not the `Strings`, so if the implementation changes your code will still be valid.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 总是使用来自 `android.Manifest.permission` 的权限描述常量，而不是 `Strings`，这样如果实现发生变化，你的代码仍然有效。
- en: The assertReadingContentUriRequiresPermission method
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: assertReadingContentUriRequiresPermission 方法
- en: 'The signature for this method is as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法的签名如下：
- en: '[PRE11]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Description
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This assertion method checks that reading from a specific URI requires the permission
    provided as a parameter.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这个断言方法检查从特定 URI 读取是否需要作为参数提供的权限。
- en: 'It takes two parameters:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 它接受两个参数：
- en: '`uri:` The URI that requires a permission to query'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uri:` 需要查询权限的 URI'
- en: '`permission:` A String containing the permission to query'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`permission:` 包含查询权限的字符串'
- en: If a `SecurityException` is generated containing the specified permission, this
    assertion is validated.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果生成了包含指定权限的`SecurityException`，则验证此断言。
- en: Example
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: 'This test tries to read contacts and verifies that the correct `SecurityException`
    is generated:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 此测试尝试读取联系人并验证是否生成了正确的`SecurityException`：
- en: '[PRE12]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The assertWritingContentUriRequiresPermission() method
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`assertWritingContentUriRequiresPermission()`方法'
- en: 'The signature for this method is as follows:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法的签名如下：
- en: '[PRE13]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Description
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述
- en: This assertion method checks that inserting into a specific URI requires the
    permission provided as a parameter.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 此断言方法检查将数据插入特定URI是否需要作为参数提供的权限。
- en: 'It takes 2 parameters:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 它接受2个参数：
- en: '`uri:` The URI that requires a permission to query'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uri:` 需要查询权限的URI'
- en: '`permission:` A String containing the permission to query'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`permission:` 包含查询权限的字符串'
- en: If a `SecurityException` containing the specified permission is generated, this
    assertion is validated.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 如果生成了包含指定权限的`SecurityException`，则验证此断言。
- en: Example
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: 'This test tries to write to Contacts and verifies that the correct `SecurityException`
    is generated:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 此测试尝试写入联系人并验证是否生成了正确的`SecurityException`：
- en: '[PRE14]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Instrumentation
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Instrumentation
- en: Instrumentation is instantiated by the system before any of the application
    code is run, allowing it to monitor all of the interaction between the system
    and the application.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行任何应用程序代码之前，系统会实例化Instrumentation，使其能够监控系统与应用程序之间的所有交互。
- en: 'As with many other Android application components, Instrumentation implementations
    are described in the `AndroidManifest.xml` under the tag`<instrumentation>`. For
    example, if you open our tests'' `AndroidManifest.xml` and look inside you will
    find:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 与许多其他Android应用程序组件一样，Instrumentation实现是在`AndroidManifest.xml`文件中的`<instrumentation>`标签下描述的。例如，如果你打开我们测试的`AndroidManifest.xml`文件并查看其中内容，你会找到：
- en: '[PRE15]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This is the Instrumentation declaration.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Instrumentation声明。
- en: The `targetPackage` attribute defines the name of the package under test, `name`
    the name of the test runner, and `label` the text that will be displayed when
    this instrumentation is listed.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`targetPackage`属性定义了测试包的名称，`name`是测试运行器的名称，`label`是当此Instrumentation被列出时显示的文本。'
- en: Please note as mentioned earlier, this declaration belongs to the test project
    and not to the main project.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如前所述，此声明属于测试项目，而不是主项目。
- en: The ActivityMonitor inner class
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`ActivityMonitor`内部类'
- en: As mentioned earlier, the Instrumentation class is used to monitor the interaction
    between the system and the application or Activities under test. The inner class
    `Instrumentation.ActivityMonitor` allows monitoring of a single Activity within
    an application.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Instrumentation类用于监控系统与应用程序或测试中的活动之间的交互。内部类`Instrumentation.ActivityMonitor`允许监控应用程序中的单个活动。
- en: Example
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: 'Let''s pretend that we have a `TextField` in our `Activity` that holds a URL
    and has its auto link property set:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们在`Activity`中有一个`TextField`，它包含一个URL，并且其自动链接属性已设置：
- en: '[PRE16]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If we want to verify that when clicked the hyperlink is correctly followed
    and a Brower is invoked, we can create a test like:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想验证当点击超链接时，是否正确地跟随并调用浏览器，我们可以创建一个类似的测试：
- en: '[PRE17]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here, we:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们：
- en: Get the instrumentation.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取instrumentation。
- en: Add a monitor based on an `IntentFilter`.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加基于`IntentFilter`的监控器。
- en: Wait for the activity.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待活动。
- en: Verify that the monitor hits were incremented.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证监控器命中次数是否增加。
- en: Remove the monitor.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移除监控器。
- en: Using monitors we can test even the most complex interactions with the system
    and other Activities. This is a very powerful tool for creating integration tests.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 使用监控器，我们可以测试与系统和其他活动之间甚至最复杂的交互。这是创建集成测试的非常强大的工具。
- en: The InstrumentationTestCase class
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`InstrumentationTestCase`类'
- en: 'The `InstrumentationTestCase` class is the direct or indirect base class for
    various test cases that have access to Instrumentation. This is the list of the
    most important direct and indirect subclasses:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`InstrumentationTestCase`类是具有访问Instrumentation的各种测试案例的直接或间接基类。以下是直接和间接子类列表中最重要的一些：'
- en: '`ActivityTestCase`'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ActivityTestCase`'
- en: '`ProviderTestCase2<T extends ContentProvider>`'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ProviderTestCase2<T extends ContentProvider>`'
- en: '`SingleLaunchActivityTestCase<T extends Activity>`'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SingleLaunchActivityTestCase<T extends Activity>`'
- en: '`SyncBaseInstrumentation`'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SyncBaseInstrumentation`'
- en: '`ActivityInstrumentationTestCase2<T extends Activity>`'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ActivityInstrumentationTestCase2<T extends Activity>`'
- en: '`ActivityUnitTestCase<T extends Activity>`'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ActivityUnitTestCase<T extends Activity>`'
- en: 'This is the UML class diagram of `InstrumentationTestCase` and the closest
    related classes:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`InstrumentationTestCase`及其最相关类的UML类图：
- en: '![The InstrumentationTestCase class](img/3500_03_05.jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![InstrumentationTestCase类](img/3500_03_05.jpg)'
- en: '`InstrumentationTestCase` is in the `android.test` package, not shown in the
    image, and extends `junit.framework.TestCase` which extends `junit.framework.Assert`.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '`InstrumentationTestCase`位于`android.test`包中，图中未显示，它扩展了`junit.framework.TestCase`，而`junit.framework.TestCase`又扩展了`junit.framework.Assert`。'
- en: The launchActivity and launchActivityWithIntent method
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`launchActivity`和`launchActivityWithIntent`方法'
- en: 'These utility methods are used to launch Activities from the test. If the `Intent`
    is not specified using the second option, a default `Intent` is used:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 这些实用方法用于从测试中启动Activity。如果未使用第二种选项指定`Intent`，则使用默认的`Intent`：
- en: '[PRE18]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the template class parameter `T` is used in `activityCls` and as the
    return type, limiting its use to Activities of that type.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，模板类参数`T`在`activityCls`和返回类型中使用，这限制了其只能用于该类型的Activity。
- en: 'If you need to specify a custom `Intent`, you can use the following code that
    also adds the `intent` parameter:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要指定自定义的`Intent`，可以使用以下代码，它还添加了`intent`参数：
- en: '[PRE19]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The sendKeys and sendRepeatedKeys methods
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`sendKeys`和`sendRepeatedKeys`方法'
- en: When testing Activities' UI you will face the need to simulate the interaction
    with qwerty-based keyboards or DPAD buttons to send keys to complete fields, select
    shortcuts, or navigate throughout the different components.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试Activity的UI时，您将需要模拟与基于qwerty键盘或DPAD按钮的交互，以发送按键来完成字段、选择快捷方式或在不同组件之间导航。
- en: This is what the different `sendKeys` and `sendRepeatedKeys` are for.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是不同的`sendKeys`和`sendRepeatedKeys`的作用。
- en: There is one version of `sendKeys` that accepts integer keys values. They can
    be obtained from constants defined in the `KeyEvent` class.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个版本的`sendKeys`接受整数键值。它们可以从`KeyEvent`类中定义的常量中获得。
- en: 'For example, we can use the `sendKeys` method in this way:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以这样使用`sendKeys`方法：
- en: '[PRE20]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here, we are sending *H, E*, and *Y* letter keys, the exclamation mark, and
    then the *Enter* key using their integer representations to the Activity under
    test.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在使用它们的整数表示法向测试中的Activity发送*H, E*和*Y*字母按键、感叹号，然后是*Enter*键。
- en: 'Alternatively, we can create a String concatenating the keys we desire to send
    discarding the KEYCODE prefix and separating them with spaces that are ultimately
    ignored:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以创建一个字符串，将我们想要发送的按键连接起来，忽略KEYCODE前缀，并用空格分隔，这些空格最终会被忽略：
- en: '[PRE21]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Here, we did exactly the same as the previous test but using a `String`. Note
    that every key in the `String` can be prefixed by a repeating factor followed
    by '*' and the key to be repeated. We used 3*E in our previous example which is
    the same as "E E E", three times the letter *E*.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们与之前的测试完全相同，但使用了一个`String`。请注意，`String`中的每个按键都可以由一个重复因子前缀，后跟`*`和要重复的键来表示。在我们的上一个例子中，我们使用了3*E，这等同于"E
    E E"，即字母*E*重复了三次。
- en: 'If sending repeated keys is what we need in our tests, there is also another
    alternative that is specifically intended for these cases:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在我们的测试中需要发送重复按键，还有一个专门针对这些情况的替代方案：
- en: '[PRE22]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This is the same test implemented in a different manner. Each key is preceded
    by the repetition number.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 这是以不同方式实现的相同测试。每个按键前面都跟着重复次数。
- en: The runTestOnUiThread helper method
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`runTestOnUiThread`辅助方法'
- en: The `runTestOnUiThread` method is a helper method for running portions of a
    test on the UI thread.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`runTestOnUiThread`方法是一个辅助方法，用于在UI线程上运行测试的一部分。'
- en: Alternatively, as we have discussed before, to run a test on the UI thread we
    can annotate it with `@UiThreadTest`.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，正如我们之前讨论过的，要在一个UI线程上运行测试，我们可以使用`@UiThreadTest`注解它。
- en: But sometimes, we need to run only parts of the test on the UI thread because
    other parts of it are not suitable to run on that thread, or are using helper
    methods that provide the infrastructure to use that thread, like `TouchUtils`
    methods.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 但有时，我们只需要在UI线程上运行测试的一部分，因为其他部分不适合在该线程上运行，或者正在使用提供该线程基础设施的辅助方法，如`TouchUtils`方法。
- en: The most common pattern is changing the focus before sending keys, so the keys
    are correctly sent to the objective `View:`
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的模式是在发送按键之前改变焦点，这样按键就能正确地发送到目标`View`：
- en: '[PRE23]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We request the focus for the `mMessage EditText` before waiting for the application
    to be idle, using `Instrumentation.waitForIdleSync()`, and then sending the key
    sequence to it. Afterwards, using `TouchUtils.clickView()`, we click the `Button`
    to finally check the content of the field after the conversion.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在等待应用程序空闲之前，我们使用 `Instrumentation.waitForIdleSync()` 请求 `mMessage EditText`
    的焦点，然后向其发送按键序列。之后，使用 `TouchUtils.clickView()`，我们点击 `Button`，最终检查转换后的字段内容。
- en: The ActivityTestCase class
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ActivityTestCase 类
- en: This is mainly a class holding common code for other test cases that access
    Instrumentation.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个主要持有其他测试用例通用代码的类，这些测试用例访问 Instrumentation。
- en: You may use this class if you are implementing specific behavior for test cases
    and existing alternatives don't fit your requirements.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在实现特定于测试用例的行为，并且现有替代方案不符合您的需求，您可以使用此类。
- en: 'If this is not the case, you may find the following options more suitable for
    your requirements:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不是这样，您可能发现以下选项更适合您的需求：
- en: '`ActivityInstrumentationTestCase2<T extends Activity>`'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ActivityInstrumentationTestCase2<T extends Activity>`'
- en: '`ActivityUnitTestCase<T extends Activity>`'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ActivityUnitTestCase<T extends Activity>`'
- en: 'This is the UML class diagram of `ActivityTestCase` and the closest related
    classes:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `ActivityTestCase` 和最相关类的 UML 类图：
- en: '![The ActivityTestCase class](img/3500_03_06.jpg)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![The ActivityTestCase class](img/3500_03_06.jpg)'
- en: The abstract class `android.testActivityTestCase` extends `android.test.InstrumentationTestCase`
    and serves as a base class for other different test cases, such as `android.test.ActivityInstrumentationTestCase,
    android.test.ActivityInstrumentationTestCase2`, and `android.test.ActivityUnitTestCase`.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象类 `android.test.ActivityTestCase` 扩展 `android.test.InstrumentationTestCase`
    并作为其他不同测试用例的基类，例如 `android.test.ActivityInstrumentationTestCase, android.test.ActivityInstrumentationTestCase2`
    和 `android.test.ActivityUnitTestCase`。
- en: Note
  id: totrans-276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`android.test.ActivityInstrumentationTestCase` is a deprecated class since
    Android API Level 3 (Android 1.5) and should not be used in newer projects.'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`android.test.ActivityInstrumentationTestCase` 自 Android API Level 3 (Android
    1.5) 起已被弃用，不应在新项目中使用。'
- en: The scrubClass method
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: scrubClass 方法
- en: 'This is one of the protected methods in the class:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 这是该类中的一个受保护方法：
- en: '[PRE24]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: It is invoked from the `tearDown()` method in several test cases implementation
    in order to clean up class' variables that may have been instantiated as non-static
    inner classes avoiding the need to hold references to them.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 它在多个测试用例的实现中的 `tearDown()` 方法中被调用，以清理可能作为非静态内部类实例化的类的变量，从而避免需要持有它们的引用。
- en: This is in order to prevent memory leaks for large test suites.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为了防止大型测试套件出现内存泄漏。
- en: '`IllegalAccessException` is thrown if a problem accessing these variables is
    found.'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发现访问这些变量存在问题，将抛出 `IllegalAccessException`。
- en: The ActivityInstrumentationTestCase2 class
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ActivityInstrumentationTestCase2 类
- en: This class will probably be the one you use the most in writing Android test
    cases. It provides functional testing of a single `Activity`.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类可能是您在编写 Android 测试用例时使用最多的类。它提供单个 `Activity` 的功能测试。
- en: This class has access to Instrumentation and will create the `Activity` under
    test using the system infrastructure by calling `InstrumentationTestCase.launchActivity().`
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类可以访问 Instrumentation，并通过调用 `InstrumentationTestCase.launchActivity()` 使用系统基础设施创建受测试的
    `Activity`。
- en: 'This is the UML class diagram showing `ActivityInstrumentationTestCase2` and
    the closest related classes:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 这是显示 `ActivityInstrumentationTestCase2` 和最相关类的 UML 类图：
- en: '![The ActivityInstrumentationTestCase2 class](img/3500_03_07.jpg)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![The ActivityInstrumentationTestCase2 class](img/3500_03_07.jpg)'
- en: The class `android.test.ActivityInstrumentationTestCase2` extends `android.test.ActivityTestCase`.
    This diagram also shows `ActivityUnitTestCase`, which also extends `ActivityTestCase`.
    Class template parameter T represents the Activity's class.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `android.test.ActivityInstrumentationTestCase2` 扩展 `android.test.ActivityTestCase`。此图还显示了
    `ActivityUnitTestCase`，它也扩展了 `ActivityTestCase`。类模板参数 T 代表 Activity 的类。
- en: The `Activity` can then be manipulated and monitored after creation.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 创建后，`Activity` 可以被操作和监控。
- en: If you need to provide a custom Intent to start your `Activity`, before invoking
    `getActivity()` you may inject an Intent with `setActivityIntent(Intent intent).`
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要提供一个自定义 Intent 来启动您的 `Activity`，在调用 `getActivity()` 之前，您可以使用 `setActivityIntent(Intent
    intent)` 注入一个 Intent。
- en: This functional test would be very useful for testing interaction through the
    user interface as events can be injected to simulate user behavior.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 这种功能测试对于通过用户界面测试交互非常有用，因为可以注入事件来模拟用户行为。
- en: The constructor
  id: totrans-293
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构造函数
- en: 'There is only one public, non deprecated constructor for this class. This is:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类只有一个公开的非弃用构造函数。这是：
- en: '[PRE25]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: It should be invoked with an instance of the `Activity` class for the same `Activity`
    used as a class template parameter.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该使用与类模板参数相同的 `Activity` 类的实例来调用。
- en: The setUp method
  id: totrans-297
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: setUp 方法
- en: As we have seen before in [Chapter 1](ch01.html "Chapter 1. Getting Started
    with Testing"), *Getting Started with Testing* the `setUp` method is the best
    place to initialize the test case fields and other fixture components requiring
    initialization.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前在[第1章](ch01.html "第1章。开始测试")中看到的，*开始测试*，`setUp` 方法是初始化测试用例字段和其他需要初始化的固定组件的最佳位置。
- en: 'This is an example showing some of the patterns that you may find repeatedly
    in your test cases:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例，展示了你可能在测试用例中反复找到的一些模式：
- en: '[PRE26]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We performed the following actions:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 我们执行了以下操作：
- en: Invoke the super method. This is a JUnit pattern that should be followed here
    to ensure correct operation.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用超类方法。这是一个 JUnit 模式，在这里应该遵循以确保正确操作。
- en: Disable touch mode. This should be done before the `Activity` is created by
    invoking `getActivity()` to have some effect. It sets the initial touch mode of
    the `Activity` under test to disabled. Touch mode is a fundamental Android UI
    concept and is discussed in [http://developer.android.com/resources/articles/touch-mode.html](http://developer.android.com/resources/articles/touch-mode.html).
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 禁用触摸模式。这应该在通过调用 `getActivity()` 创建 `Activity` 之前完成，以便产生一些效果。它将测试中的 `Activity`
    的初始触摸模式设置为禁用。触摸模式是 Android UI 的一个基本概念，在 [http://developer.android.com/resources/articles/touch-mode.html](http://developer.android.com/resources/articles/touch-mode.html)
    中有讨论。
- en: Start the Activity using `getActivity()`.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `getActivity()` 启动 Activity。
- en: Get the instrumentation. We have access to the Instrumentation because `ActivityInstrumentationTestCase2`
    extends `InstrumentationTestCase`.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取仪器。我们因为 `ActivityInstrumentationTestCase2` 扩展了 `InstrumentationTestCase` 而有权访问仪器。
- en: Find the Views and set fields. In these operations, note that the R class used
    is from the target package, not from the tests.
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找视图并设置字段。在这些操作中，请注意使用的 R 类来自目标包，而不是来自测试。
- en: The tearDown method
  id: totrans-307
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: tearDown 方法
- en: Usually this method cleans up what was initialized in `setUp`.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 通常这个方法会清理在 `setUp` 中初始化的内容。
- en: 'In this example, we are only invoking the super method:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们只调用了超类方法：
- en: '[PRE27]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The testPreconditions method
  id: totrans-311
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: testPreconditions 方法
- en: This method is used to check for some initial conditions to run our tests correctly.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法用于检查一些初始条件以确保我们的测试能够正确运行。
- en: Despite its name, it is not guaranteed that this test is run before other tests.
    However, it is a good practice to collect all of the precondition tests under
    this custom name.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管它的名字如此，但并不能保证这个测试在其它测试之前运行。然而，将所有预置条件测试收集在这个自定义名称下是一个好的实践。
- en: 'This is an example of a `testPrecondition` test:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 `testPrecondition` 测试的示例：
- en: '[PRE28]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We check only for not null values, but in this case asserting this we can also
    be sure that the Views were found using the specific IDs and that their types
    were correct, otherwise they are assigned in `setUp.`
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只检查非空值，但在这个情况下，断言这一点我们也可以确信视图是通过特定的 ID 找到的，并且它们的类型是正确的，否则它们在 `setUp` 中被分配。
- en: The ProviderTestCase2<T> class
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`ProviderTestCase2<T>` 类'
- en: This is a test case designed to test the `ContentProvider` classes.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个设计来测试 `ContentProvider` 类的测试用例。
- en: 'This is the UML class diagram of `ProviderTestCase2` and the closest related
    classes:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `ProviderTestCase2` 及其最相关的类的 UML 类图：
- en: '![The ProviderTestCase2<T> class](img/3500_03_08.jpg)'
  id: totrans-320
  prefs: []
  type: TYPE_IMG
  zh: '![ProviderTestCase2<T> 类](img/3500_03_08.jpg)'
- en: The class `android.test.ProviderTestCase2` also extends `AndroidTestCase`. Class
    template parameter T represents the `ContentProvider` under test. Implementation
    of this test uses an `IsolatedContext` and a `MockContentResolver`, mock objects
    that we described earlier in this chapter.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `android.test.ProviderTestCase2` 也扩展了 `AndroidTestCase`。类模板参数 T 代表正在测试的 `ContentProvider`。此测试的实现使用了一个
    `IsolatedContext` 和一个 `MockContentResolver`，这些是我们在本章中之前描述的模拟对象。
- en: The constructor
  id: totrans-322
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构造函数
- en: 'There is only one public, non deprecated constructor for this class. This is:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类只有一个公开的非弃用构造函数。这是：
- en: '[PRE29]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: It should be invoked with an instance of the `ContentProvider` class for the
    same `ContentProvider` used as a class template parameter.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该使用与类模板参数相同的 `ContentProvider` 类的实例来调用。
- en: The second parameter is the authority for the provider, usually defined as `AUTHORITY`
    constant in the `ContentProvider` class.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个参数是提供者的权限，通常在 `ContentProvider` 类中定义为 `AUTHORITY` 常量。
- en: Example
  id: totrans-327
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例
- en: 'This is a typical example of a `ContentProvider` test:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个典型的`ContentProvider`测试示例：
- en: '[PRE30]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In this test we are expecting the query to return a `Cursor` containing 2 rows.
    This is just an example—use the number of rows that applies for your particular
    case, and asserting this condition.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个测试中，我们期望查询返回一个包含2行的`Cursor`。这只是一个例子——使用适用于您特定情况的行数，并断言这个条件。
- en: Usually in the `setUp` method we obtain a reference to the provider, `mProvider`
    in this example, using `getProvider()`.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 通常在`setUp`方法中，我们使用`getProvider()`获取提供者的引用，在这个例子中是`mProvider`。
- en: 'What is interesting to note is that because these tests are using `MockContentResolver`
    and `IsolatedContext`, the content of the real database is not affected and we
    can also run tests like this one:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，因为这些测试使用了`MockContentResolver`和`IsolatedContext`，所以真实数据库的内容不会受到影响，我们也可以运行这样的测试：
- en: '[PRE31]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This test deletes some content of the database, but the database is restored
    to its initial content so as not to affect other tests.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试删除了数据库的一些内容，但数据库被恢复到其初始内容，这样就不会影响其他测试。
- en: The ServiceTestCase<T>
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: The ServiceTestCase<T>
- en: This is a test case specially created to test Services.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个专门创建来测试服务的测试用例。
- en: 'This class, `ServiceTestCase<T>`, extends `AndroidTestCase` as is shown in
    this UML class diagram:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类，`ServiceTestCase<T>`，正如这个UML类图所示，扩展了`AndroidTestCase`：
- en: '![The ServiceTestCase<T>](img/3500_03_09.jpg)'
  id: totrans-338
  prefs: []
  type: TYPE_IMG
  zh: '![The ServiceTestCase<T>](img/3500_03_09.jpg)'
- en: Methods to exercise the service lifecycle like `setupService, startService,
    bindService`, and `shutDownService` are also included in this class.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 包含了用于练习服务生命周期的方法，如`setupService`、`startService`、`bindService`和`shutDownService`。
- en: The constructor
  id: totrans-340
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构造函数
- en: 'There is only one public, non deprecated constructor for this class. This is:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类只有一个公开的非弃用构造函数。它是：
- en: '[PRE32]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: It should be invoked with an instance of the `Service` class for the same `Service`
    used as a class template parameter.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该使用与用作类模板参数的`Service`类相同的`Service`类的实例来调用。
- en: The TestSuiteBuilder.FailedToCreateTests class
  id: totrans-344
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TestSuiteBuilder.FailedToCreateTests类
- en: The class `TestSuiteBuilder.FailedToCreateTests` is a special `TestCase` used
    to indicate a failure during the `build()` step.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '`TestSuiteBuilder.FailedToCreateTests`类是一个特殊的`TestCase`，用于在`build()`步骤中指示失败。'
- en: 'That is, if during the test suite creation an error is detected, you will be
    receiving an exception like this one indicating the failure to construct the test
    suite:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 即，如果在测试套件创建过程中检测到错误，您将收到一个像这样的异常，表明无法构建测试套件：
- en: '[PRE33]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Using external libraries in test projects
  id: totrans-348
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在测试项目中使用外部库
- en: Your main Android project may require external libraries. Let's pretend that
    in one `Activity` we are creating objects from a class that is part of an external
    library. For the sake of our example, let's say the library is called `libdummy-0.0.1-SNAPSHOT.jar`
    and the mentioned class is `Dummy`. A dummy class that doesn't do anything is
    used here only to not divert your attention from the main objective which is including
    any library you may need, not just a particular one.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 您的主要Android项目可能需要外部库。让我们假设在一个`Activity`中，我们正在从一个外部库中的类创建对象。为了我们的示例，让我们说这个库叫做`libdummy-0.0.1-SNAPSHOT.jar`，提到的类是`Dummy`。这里使用一个不执行任何操作的`Dummy`类，只是为了不分散您对主要目标的注意力，这个目标是包括您可能需要的任何库，而不仅仅是特定的一个。
- en: 'So our `Activity` would look like this:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的`Activity`将看起来像这样：
- en: '[PRE34]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This library should be added to the project's Java Build Path as usual as a
    JAR or external JAR depending on where the file is located.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 这个库应该像通常一样添加到项目的Java构建路径中，作为一个JAR或外部JAR，具体取决于文件的位置。
- en: 'Now, let''s create a simple test. From our previous experience, we know that
    if we need to test an `Activity` we should use `ActivityInstrumentationTestCase2`,
    and this is precisely what we will do. Our simple test will be:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个简单的测试。根据我们之前的经验，我们知道如果我们需要测试一个`Activity`，我们应该使用`ActivityInstrumentationTestCase2`，这正是我们将要做的。我们的简单测试将是：
- en: '[PRE35]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Unfortunately, this test won''t compile. The problem is that we are referencing
    a missing class. Our test project doesn''t know anything about `Dummy` class or
    the `libdummy` library and hence we receive this error:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这个测试无法编译。问题是我们引用了一个缺失的类。我们的测试项目对`Dummy`类或`libdummy`库一无所知，因此我们收到了这个错误：
- en: '**The method getDummy() from the type DummyActivity refers to the missing type
    Dummy**.'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '**从类型DummyActivity引用的getDummy()方法指向缺失的类型Dummy**。'
- en: 'Lets add the `libdummy` library to the test project''s properties using the
    **Add External JARs..**. button:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用**添加外部JARs..**.按钮将`libdummy`库添加到测试项目的属性中：
- en: '![Using external libraries in test projects](img/3500_03_10.jpg)'
  id: totrans-358
  prefs: []
  type: TYPE_IMG
  zh: '![在测试项目中使用外部库](img/3500_03_10.jpg)'
- en: 'However, doing this will lead us to another error. If you run the tests, these
    are the errors you''ll receive:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这样做会导致另一个错误。如果你运行测试，你会收到以下错误：
- en: '**08-10 00:26:11.820: ERROR/AndroidRuntime(510): FATAL EXCEPTION: main**'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '**08-10 00:26:11.820: ERROR/AndroidRuntime(510): FATAL EXCEPTION: main**'
- en: '**08-10 00:26:11.820: ERROR/AndroidRuntime(510): java.lang.IllegalAccessError:
    Class ref in pre-verified class resolved to unexpected implementation**'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '**08-10 00:26:11.820: ERROR/AndroidRuntime(510): java.lang.IllegalAccessError:
    Class ref in pre-verified class resolved to unexpected implementation**'
- en: '**...[lines removed for brevity]**'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '**...[为了简洁而省略的行]**'
- en: '**08-10 00:26:11.820: ERROR/AndroidRuntime(510): at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:868)**'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '**08-10 00:26:11.820: ERROR/AndroidRuntime(510): at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:868)**'
- en: '**08-10 00:26:11.820: ERROR/AndroidRuntime(510): at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:626)**'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '**08-10 00:26:11.820: ERROR/AndroidRuntime(510): at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:626)**'
- en: '**08-10 00:26:11.820: ERROR/AndroidRuntime(510): at dalvik.system.NativeStart.main(Native
    Method)**'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '**08-10 00:26:11.820: ERROR/AndroidRuntime(510): at dalvik.system.NativeStart.main(Native
    Method)**'
- en: The reason for this problem is that adding the library to both projects results
    in the same classes being inserted into both APKs. The tester project, however,
    loads classes from the tested project. The classes in the library will be loaded
    from the tester project but the classes in the tested project will refer to the
    copies in the tested project's APK. Hence the reference error.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题的原因是将库添加到两个项目中会导致相同的类被插入到两个APK中。然而，测试项目会从被测试的项目中加载类。库中的类将从测试项目加载，而被测试项目中的类将引用被测试项目APK中的副本。因此产生了引用错误。
- en: The way to solve this problem is to export the `libdummy` entry to dependent
    projects and remove the JAR from the test project Java Build Path.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 解决此问题的方法是导出 `libdummy` 条目到依赖项目，并从测试项目的Java构建路径中删除JAR文件。
- en: 'The following screenshot shows how to do this in the main project''s properties:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了如何在主项目的属性中进行此操作：
- en: '![Using external libraries in test projects](img/3500_03_11.jpg)'
  id: totrans-369
  prefs: []
  type: TYPE_IMG
  zh: '![在测试项目中使用外部库](img/3500_03_11.jpg)'
- en: Note that `libdummy-0.0.1-SNAPSHOT.jar` is now checked in **Order and Export**.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`libdummy-0.0.1-SNAPSHOT.jar` 现已检查到 **顺序和出口**。
- en: Summary
  id: totrans-371
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'We investigated the most relevant building blocks and reusable patterns for
    creating our tests. Along this journey we:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 我们调查了创建测试最相关的基本构建块和可重用模式。在这段旅程中，我们：
- en: Used several types of assertions from the most common ones found usually in
    JUnit tests to the most specialized assertions found in the Android SDK to exercise
    application UIs
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用了从JUnit测试中通常找到的最常见断言到Android SDK中找到的最专业断言的多种类型的断言来测试应用程序UI
- en: Explained mock objects and their use in Android tests
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释了模拟对象及其在Android测试中的应用
- en: Exemplified the use of the different tests available in the Android SDK from
    unit to functional tests
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 举例说明了从单元测试到功能测试在Android SDK中可用的不同测试的使用
- en: Illustrated the relationships between the most common classes using UML class
    diagrams to clearly understand them
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用UML类图说明了最常见的类之间的关系，以便清晰地理解它们
- en: Dug into Instrumentation and different monitors available for Activities
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深入研究了活动可用的仪器和不同监控器
- en: Now that we have all the building blocks it is time to start creating more and
    more tests to acquire the experience needed to master the technique.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了所有构建块，是时候开始创建更多测试，以获得掌握这项技术所需的经验了。
- en: The next chapter introduces Test Driven Development using a sample project to
    expose all of its advantages.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将使用一个示例项目介绍测试驱动开发，以展示其所有优点。
