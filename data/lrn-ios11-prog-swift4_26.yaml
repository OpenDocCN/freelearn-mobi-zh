- en: Just a Peek
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 只看一眼
- en: In 2015, when the iPhone 6S and 6S Plus were announced, Apple also introduced
    3D Touch. 3D Touch uses a Taptic Engine with haptic feedback, which allows the
    device to sense the pressure of a touch, thereby triggering specific actions.
    For example, pressing hard on an icon will enable us to quickly open an action
    menu.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在2015年，当iPhone 6S和6S Plus发布时，苹果也引入了3D Touch。3D Touch使用带有触觉反馈的Taptic Engine，这使得设备能够感知触摸的压力，从而触发特定操作。例如，用力按图标将使我们能够快速打开操作菜单。
- en: 'This chapter will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Adding 3D Touch quick actions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加3D Touch快捷操作
- en: Understanding the difference between static and dynamic quick actions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解静态和动态快捷操作之间的区别
- en: Adding 3D Touch support inside of a Collection View
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在集合视图中添加3D Touch支持
- en: The first thing we will do for our app is to add quick actions for our app icon.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为我们的应用做的第一件事是为应用图标添加快捷方式。
- en: Adding 3D Touch quick actions
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加3D Touch快捷操作
- en: 'For our app, we are going to add four quick actions (which is the maximum amount
    that you can have). These actions will do the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的应用，我们将添加四个快捷方式（这是你可以拥有的最大数量）。这些操作将执行以下操作：
- en: Launch the map
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动地图
- en: Launch the locations
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动位置
- en: Select Los Angeles as a location
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择洛杉矶作为位置
- en: Select Las Vegas as a location
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择拉斯维加斯作为位置
- en: 'There are two types of quick actions: static and dynamic. Static means that
    they cannot be changed and dynamic means that they can. For example, Apple has
    3D Touch on their *Messages* app. If you press hard on the *Messages* app, you
    will see one static quick action, New Message, and three dynamic quick actions,
    the three most-texted contacts. In our app, we will have two static quick actions,
    launching the Map tab and the locations list, and two dynamic quick actions, launching
    Los Angeles and Las Vegas as locations. Let''s start setting up our quick actions:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种类型的快捷方式：静态和动态。静态意味着它们不能被更改，而动态意味着它们可以被更改。例如，苹果在他们的*消息*应用中使用了3D Touch。如果你在*消息*应用上用力按下，你会看到一个静态快捷方式，新建消息，以及三个动态快捷方式，即三个最常短信的联系人。在我们的应用中，我们将有两个静态快捷方式，启动地图标签和位置列表，以及两个动态快捷方式，启动洛杉矶和拉斯维加斯作为位置。让我们开始设置我们的快捷方式：
- en: Right-click the `Misc` folder and select New File.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`Misc`文件夹并选择新建文件。
- en: Inside of the Choose a template for your new file screen, select iOS at the
    top and then Swift File. Then, hit Next.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择新文件模板的屏幕上，顶部选择iOS，然后选择Swift文件。然后，点击下一步。
- en: Name this file Shortcut and hit Create.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件命名为Shortcut并点击创建。
- en: 'Inside of this file, add the following `enum` after the `import` statement:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在此文件中，在`import`语句之后添加以下`enum`：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This `enum` is used for our quick actions. As we discussed, we will have four
    quick actions for our app.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`enum`用于我们的快速操作。正如我们讨论的，我们将为我们的应用提供四个快速操作。
- en: 'Now, open your `AppDelegate.swift` file. After the `window` variable, add the
    following:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开你的`AppDelegate.swift`文件。在`window`变量之后，添加以下内容：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, we have a variable for our shortcut item and a constant for our user info
    key. When the application launches, we need to check to see if the app was launched
    using a quick action.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们有一个用于快捷方式项的变量和一个用于用户信息键的常量。当应用程序启动时，我们需要检查应用程序是否是通过快捷方式启动的。
- en: 'Next, we need to create a method to handle our shortcuts. Add the following
    after the `checkNotifications()` method:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建一个处理我们快捷方式的方法。在`checkNotifications()`方法之后添加以下内容：
- en: '![](img/bc59d75b-7c95-4c9f-bc82-fdd458bc47ca.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bc59d75b-7c95-4c9f-bc82-fdd458bc47ca.png)'
- en: 'Now, let''s break down our code and have a look at each part:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们分解我们的代码并查看每个部分：
- en: '**Part A**: Here is where we check for a shortcut item. If we have a shortcut
    item, then the rest of the code inside of this `if...let` statement will run:'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**A部分**：这里是检查快捷方式项的地方。如果我们有一个快捷方式项，那么这个`if...let`语句内部的其余代码将执行：'
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Part B**: This is our first dynamic shortcut. This will set our current selected
    location to Los Angeles. We will also set the icon image here to a custom image
    that is in our image assets:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**B部分**：这是我们第一个动态快捷方式。这将设置当前选定的位置为洛杉矶。我们还将在此处设置图标图像为我们的图像资源中的一个自定义图像：'
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Part C**: This is our second dynamic shortcut. This will set our current
    selected location to Las Vegas. We will also set the icon image here to a custom
    image that is in our image assets:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**C部分**：这是我们第二个动态快捷方式。这将设置当前选定的位置为拉斯维加斯。我们还将在此处设置图标图像为我们的图像资源中的一个自定义图像：'
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Part D**: Finally, when we are done, we will return `true` or `false`. `True`
    will be sent if a shortcut icon was not selected, and `false` will be sent if
    one was selected:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部分D**：最后，当我们完成时，我们将返回`true`或`false`。如果没有选择快捷方式图标，将发送`true`，如果选择了快捷方式图标，将发送`false`：'
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now that we have our method created, let''s update our return value inside
    of `didFinishLaunchingWithOptions`. Update the return from the current value of
    `true` to the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了方法，让我们更新`didFinishLaunchingWithOptions`中的返回值。将当前的`true`值更新为以下内容：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, we need to add a few more methods for our application to handle shortcuts.
    Let''s add a method that will handle any shortcut links that are selected. Add
    the following method after the `checkShortCut()` method:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要为我们的应用添加一些更多的方法来处理快捷方式。让我们添加一个处理任何选中的快捷链接的方法。在`checkShortCut()`方法之后添加以下方法：
- en: '![](img/630ab91e-83cc-49cd-8f18-b9d698d56f6d.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/630ab91e-83cc-49cd-8f18-b9d698d56f6d.png)'
- en: 'Let''s break down this code, so that  you can better understand the different
    parts of the code:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解这段代码，以便你更好地理解代码的不同部分：
- en: '**Part A**: Here, we are ensuring  that we have a shortcut item, shortcut type,
    and a Tab Bar controller. If we do not have any of these things, we will return
    `false` and not  go any further:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部分A**：在这里，我们确保有一个快捷项、快捷类型和标签栏控制器。如果我们没有这些中的任何一项，我们将返回`false`并且不会继续进行：'
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Part B**: This shortcut will allow us to launch the location list view. We
    are setting the selected index of the Tab Bar controller and then using the `performSegue`
    to enable the modal to appear:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部分B**：这个快捷方式将允许我们启动带有洛杉矶已选择的探索视图。我们正在设置标签栏控制器的选中索引，然后使用`performSegue`来启用模态窗口出现：'
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Part C**: This shortcut will allow us to go directly to the Map tab:'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部分C**：这个快捷方式将允许我们直接跳转到地图标签页：'
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Part D**: This shortcut will allow us to launch the explore view with Los
    Angeles already selected:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部分D**：这个快捷方式将允许我们启动带有洛杉矶已选择的探索视图：'
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Part E**: This shortcut will allow us to launch the explore view with Las
    Vegas already selected.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部分E**：这个快捷方式将允许我们启动带有拉斯维加斯已选择的探索视图。'
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now that we can have a method for handling any shortcut links, add the following
    method after the `applicationWillTerminate()` method:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个处理任何快捷链接的方法，在`applicationWillTerminate()`方法之后添加以下方法：
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This method gets called every time a shortcut action is performed.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 每当执行快捷方式操作时，都会调用此方法。
- en: 'Finally, we need to add code to check when the app becomes active. Find the
    `applicationDidBecomeActive()` method and add the following inside of the curly
    braces:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要添加代码来检查应用何时变为活动状态。找到`applicationDidBecomeActive()`方法，并在大括号内添加以下代码：
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here, we are handling any shortcut actions. Also, we are checking whether the
    badge icon is set to a number other than `0`, and, if so, we reset it to `0`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们处理任何快捷方式操作。同时，我们检查徽章图标是否设置为除`0`以外的数字，如果是，我们将它重置为`0`。
- en: If you are keeping track, you will see that we have only added two items so
    far—our dynamic items. We still need to add our static items; however, these will
    actually be added to your `Info.plist`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你一直在跟踪，你会看到我们至今只添加了两个项——我们的动态项。我们还需要添加我们的静态项；然而，这些实际上将被添加到你的`Info.plist`中。
- en: 'Open the `Info.plist` in the `Assets` folder of the Navigator panel. Hover
    over Privacy - Camera Usage Description and then click on the + button to add
    the key `UIApplicationShortcutItems`. Make the type an array:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在导航面板的`Assets`文件夹中打开`Info.plist`。将鼠标悬停在`Privacy - Camera Usage Description`上，然后点击+按钮添加键`UIApplicationShortcutItems`。将类型设置为数组：
- en: '![](img/7a3565c3-f1ed-4541-8e5a-6e8080afbe16.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7a3565c3-f1ed-4541-8e5a-6e8080afbe16.png)'
- en: 'Next, hover over `UIApplicationShortcutItems` and click on the + button to
    add an item to this array. Change the type to Dictionary:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将鼠标悬停在`UIApplicationShortcutItems`上，然后点击+按钮向此数组添加一个项。将类型更改为字典：
- en: '![](img/ae8265db-c7a9-4508-b8a8-632c3256973d.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ae8265db-c7a9-4508-b8a8-632c3256973d.png)'
- en: 'Hover over Item 0 and click on the + button three times to add three strings.
    Give the three keys the following names:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 将鼠标悬停在项目0上，然后点击+按钮三次以添加三个字符串。给这三个键以下名称：
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](img/ec0e6de0-71d4-478a-a0ca-fd5c98567805.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ec0e6de0-71d4-478a-a0ca-fd5c98567805.png)'
- en: 'Now, copy Item 0 (⌘ + *C*) and paste it (⌘ + *V*) into `UIApplicationShortcutItems`.
    You should now have Item 0 and Item 1, each with the same three Strings:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，复制项目0（⌘ + *C*）并将其粘贴到`UIApplicationShortcutItems`中。你现在应该有项目0和项目1，每个都有相同的三个字符串：
- en: '![](img/789625c6-dd48-488e-91ac-87186790a661.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/789625c6-dd48-488e-91ac-87186790a661.png)'
- en: 'Next, set their values to the following for Item 0:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将它们的值设置为以下内容，用于项目0：
- en: 'UIApplicationShortcutItemIconFile: `shortcut-map`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'UIApplicationShortcutItemIconFile: `shortcut-map`'
- en: 'UIApplicationShortcutItemTitle: `Map`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'UIApplicationShortcutItemTitle: `地图`'
- en: 'UIApplicationShortcutItemType: `$(PRODUCTBUNDLEIDENTIFIER).openMap`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'UIApplicationShortcutItemType: `$(PRODUCTBUNDLEIDENTIFIER).openMap`'
- en: 'For Item 1, set their values as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 对于项目1，设置其值如下：
- en: 'UIApplicationShortcutItemIconFile: `shortcut-location`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'UIApplicationShortcutItemIconFile: `shortcut-location`'
- en: 'UIApplicationShortcutItemTitle: `Locations`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'UIApplicationShortcutItemTitle: `位置`'
- en: 'UIApplicationShortcutItemType: `$(PRODUCTBUNDLEIDENTIFIER).openLocations`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'UIApplicationShortcutItemType: `$(PRODUCTBUNDLEIDENTIFIER).openLocations`'
- en: 'When you are finished, your file should look like the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当您完成时，您的文件应如下所示：
- en: '![](img/3facc9ac-fd95-4103-a7ca-fae200f86e0a.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3facc9ac-fd95-4103-a7ca-fae200f86e0a.png)'
- en: Save your file, and build and run the project on your device. If you have a
    MacBook or a MacBook Pro with a Force Touch mouse, you can run this in the simulator.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 保存您的文件，并在您的设备上构建和运行项目。如果您有一台带有Force Touch鼠标的MacBook或MacBook Pro，您可以在模拟器中运行此操作。
- en: If you are building your phone, you might encounter errors. These errors occur
    because you have not built the framework for your phone. Just switch to the framework,
    then hit ⌘ + *B*, then switch to your *iMessages* app and do the same again. Then,
    build and run the project on your device.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在构建手机，您可能会遇到错误。这些错误发生是因为您尚未为手机构建框架。只需切换到框架，然后按⌘ + *B*，然后切换到您的*iMessages*应用并重复相同的操作。然后，在您的设备上构建和运行项目。
- en: 'Once your app launches, hit ⌘ + *H* (if you are in a simulator) or the home
    button on your device. 3D Touch  the *Let''s Eat* app icon, and you should now
    see the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的应用启动，在模拟器中按⌘ + *H*（如果您在模拟器中）或按设备上的主页按钮。3D Touch“Let's Eat”应用图标，您现在应该看到以下内容：
- en: '![](img/93d893a3-784e-4b5a-97f2-27a55b383c81.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/93d893a3-784e-4b5a-97f2-27a55b383c81.png)'
- en: If you select Los Angeles or Las Vegas, you will see that the location is now
    set for you at the top. If you select the Map shortcut, you will be taken to the
    Map tab. If you select the Locations shortcut, you will be taken to the Locations
    list. We have now added 3D Touch quick actions to our app. Let's add 3D Touch
    to one more place.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择洛杉矶或拉斯维加斯，您会看到位置现在已为您设置在顶部。如果您选择地图快捷方式，您将被带到地图标签页。如果您选择位置快捷方式，您将被带到位置列表。我们现在已为我们的应用添加了3D
    Touch快速操作。让我们将3D Touch添加到另一个地方。
- en: Adding favorites
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加收藏
- en: 'A nice feature for our app would be to use 3D Touch to allow users to add favorites
    to our restaurant list view. We already have the heart  in our restaurant detail
    page. Therefore, let''s add 3D Touch to the heart  to add favorites. This is how
    we want it to look when we are finished:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用的一个不错特性是使用3D Touch允许用户将收藏添加到我们的餐厅列表视图中。我们已经在餐厅详情页中有了心形图标。因此，让我们将3D Touch添加到心形图标以添加收藏。这是我们完成后的样子：
- en: '![](img/f1783136-e1e6-4b46-81db-61016027e18a.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f1783136-e1e6-4b46-81db-61016027e18a.png)'
- en: The first thing we need to do is add a new model object so that we can save
    our restaurant favorites to Core Data.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是添加一个新的模型对象，以便我们可以将我们的餐厅收藏保存到Core Data。
- en: Creating a new model object
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新的模型对象
- en: 'Let''s look at how to create a new model object:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何创建一个新的模型对象：
- en: In the Navigator panel, open the `LetsEatModel.xcdatamodel` file, which can
    be found in the Core Data folder in the `Common` folder.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航器面板中，打开位于“Common”文件夹中“Core Data”文件夹内的`LetsEatModel.xcdatamodel`文件。
- en: 'Make sure that you have the Graph Style selected:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您已选择了“图形样式”：
- en: '![](img/40ffdddf-2c79-4a27-a430-431dcba585dd.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/40ffdddf-2c79-4a27-a430-431dcba585dd.png)'
- en: 'Click the + button for Add Entity and then double-click on Entity, and update
    it to Favorite:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“+”按钮以添加实体，然后双击“实体”，并将其更新为“收藏”：
- en: '![](img/c6dca44a-1ac3-463d-94d9-7db7b6c75e05.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c6dca44a-1ac3-463d-94d9-7db7b6c75e05.png)'
- en: 'Next, ensure that the Favorite entity is selected and click the + button for
    Add Attribute:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，确保选择了“收藏”实体，然后点击“+”按钮以添加属性：
- en: '![](img/860d240b-e711-4681-b5d8-99795333476d.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/860d240b-e711-4681-b5d8-99795333476d.png)'
- en: 'In the box in the center of the screen, under Attributes, you should now see
    the word attribute. Double-click on Attributes and change it to `restaurantID`:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在屏幕中央的框中，在“属性”下，您现在应该看到单词“属性”。双击“属性”并将其更改为`restaurantID`：
- en: '![](img/9f563382-8fa7-41a2-ae93-c8216f1cb426.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9f563382-8fa7-41a2-ae93-c8216f1cb426.png)'
- en: Next, select the favorite entity again and then the Data Model inspector in
    the Utilities panel.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，再次选择“收藏”实体，然后在实用工具面板中选择数据模型检查器。
- en: 'Under Class, update the following:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“类”下，更新以下内容：
- en: 'Name: `Favorite`'
  id: totrans-97
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '名称: `收藏`'
- en: 'Codegen: `Class definition`'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Codegen: `类定义`'
- en: 'Constraints: `restaurantID` (you add this constraint by hitting the + button
    in Constraints and then replacing the default constraint, which autopopulates,
    with this new constraint)'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 约束：`restaurantID`（通过在约束中点击 + 按钮添加此约束，然后用这个新约束替换自动填充的默认约束）
- en: 'Your entity settings should now look like the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你的实体设置现在应该看起来像以下这样：
- en: '![](img/08935e84-7685-4e92-9ba4-d68533ab91d3.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/08935e84-7685-4e92-9ba4-d68533ab91d3.png)'
- en: 'Finally, select the `restaurantID` attribute, and under the Data Model inspector
    in the Utilities panel, select Integer 32 under Attribute Type. The error regarding
    this attribute should now disappear:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，选择 `restaurantID` 属性，并在实用工具面板中的数据模型检查器下，选择整数 32 作为属性类型。关于此属性的错误现在应该消失了：
- en: '![](img/445c4f82-1fab-471f-819f-7cf4d9478998.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/445c4f82-1fab-471f-819f-7cf4d9478998.png)'
- en: Now, build the project using ⌘ + *B*. This will create our `Favorite` class
    that we created in Core Data. You will not see the file anywhere, but it has been
    created.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用 ⌘ + *B* 构建项目。这将创建我们在 Core Data 中创建的 `Favorite` 类。你不会在任何地方看到这个文件，但它已经被创建了。
- en: Updating our Core Data manager
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新我们的 Core Data 管理器
- en: 'Now that we have our favorite entity created, we need to update our Core Data
    manager to actually save restaurants as favorites. Inside of the `CoreData-Manager.swift`
    file, add the following before the last curly brace:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了我们的收藏实体，我们需要更新我们的 Core Data 管理器，以便实际上将餐厅保存为收藏。在 `CoreData-Manager.swift`
    文件中，在最后一个花括号之前添加以下代码：
- en: '[PRE15]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This method creates a `Favorite` object and then calls the `save()` method.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法创建一个 `Favorite` 对象，然后调用 `save()` 方法。
- en: 'Now, let''s add one more method to this file by adding the following before
    the last curly brace:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过在最后一个花括号之前添加以下代码来向此文件添加一个额外的函数：
- en: '[PRE16]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In this method, we are going to fetch a favorite restaurant by passing a `restaurantID`.
    The method will check Core Data, and if we get data back, that restaurant will
    be set as a favorite. Otherwise, if we get back no data, we return `false`. We
    can now save favorite restaurants.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个方法中，我们将通过传递一个 `restaurantID` 来获取一个收藏餐厅。该方法将检查 Core Data，如果我们得到数据，那么这个餐厅将被设置为收藏。如果没有数据返回，我们返回
    `false`。我们现在可以保存收藏餐厅了。
- en: 'Next, open the `RestaurantViewController.swift` file and define a new extension
    after the extension we created for our Collection View by adding the following
    code:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开 `RestaurantViewController.swift` 文件，并在为我们的 Collection View 创建的扩展之后定义一个新的扩展，添加以下代码：
- en: '![](img/a4852306-ec18-48eb-bf34-737566845e1a.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a4852306-ec18-48eb-bf34-737566845e1a.png)'
- en: 'Let''s discuss what we just added:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论我们刚刚添加的内容：
- en: '**Part A**: First, we are getting an instance of our `RestaurantDetail.storyboard`.
    Then, we are obtaining a current index path. Once we have an index path, we are
    checking that we have a cell. Finally, we are creating an instance to our `RestaurantDetailViewController`:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部分 A**：首先，我们获取我们的 `RestaurantDetail.storyboard` 的实例。然后，我们获取当前的索引路径。一旦我们有了索引路径，我们就检查我们有一个单元格。最后，我们创建一个
    `RestaurantDetailViewController` 的实例：'
- en: '[PRE17]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**Part B**: Here, we are setting our `selectedRestaurant`, and then, we are
    passing the `selectedRestaurant` over to the detail view. We are then setting
    the height that we want and passing the cell frame to the previewing context:'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部分 B**：在这里，我们设置了我们的 `selectedRestaurant`，然后，我们将 `selectedRestaurant` 传递到详细视图。然后，我们设置我们想要的高度，并将单元格框架传递到预览上下文中：'
- en: '[PRE18]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**Part C**: This method is called so that we can prepare the presentation of
    the view controller, which here is the commit view controller. In our case, we
    are preparing the `RestaurantDetailViewController` to be shown (or `popped`):'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部分 C**：此方法被调用是为了我们可以准备视图控制器的展示，在这里是提交视图控制器。在我们的案例中，我们正在准备要显示（或弹出）的 `RestaurantDetailViewController`：'
- en: '[PRE19]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Next, open the `RestaurantDetail.storyboard` and select the `RestaurantDetailViewController`.
    Open the Identity inspector in the Utilities panel and, in storyboard ID under
    Identity, add `RestaurantDetail`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开 `RestaurantDetail.storyboard` 并选择 `RestaurantDetailViewController`。在实用工具面板中打开身份检查器，并在身份下的故事板
    ID 中添加 `RestaurantDetail`。
- en: 'Then, hit *Enter*:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，按 *Enter*：
- en: '![](img/59f150ed-34d7-4aeb-977f-a968185c1339.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/59f150ed-34d7-4aeb-977f-a968185c1339.png)'
- en: 'Now, return to the `RestaurantViewController.swift` file and add the following
    code after the `showRestaurantDetail()` method:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，返回到 `RestaurantViewController.swift` 文件，并在 `showRestaurantDetail()` 方法之后添加以下代码：
- en: '[PRE20]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here, we need to ensure that our `RestaurantViewController` can accept 3D Touch.
    We need to call this inside of the `initialize()` method after our `if` statement.
    We have finished our setup inside of the `RestaurantViewController`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们需要确保我们的`RestaurantViewController`可以接受3D Touch。我们需要在`initialize()`方法中的`if`语句之后调用此方法。我们已经在`RestaurantViewController`中完成了设置。
- en: 'Finally, we need to update our `RestaurantDetailViewController.swift` file.
    Open this file and add the following variable above the `viewDidLoad()` method:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要更新我们的`RestaurantDetailViewController.swift`文件。打开此文件，并在`viewDidLoad()`方法上方添加以下变量：
- en: '[PRE21]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This variable will allow us to have two actions, Favorite and Cancel, when we
    `peek` at a restaurant. If the user taps Favorite, we will get the `restaurantID`
    and save it to Core Data. If the user taps Cancel, we will dismiss the view.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这个变量将允许我们在查看餐厅时执行两个操作，即“收藏”和“取消”。如果用户点击“收藏”，我们将获取`restaurantID`并将其保存到Core Data中。如果用户点击“取消”，我们将关闭视图。
- en: 'Next, add the following code above the `createRating()` method:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`createRating()`方法上方添加以下代码：
- en: '[PRE22]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This method will now be run whenever we go to a detail view. First, we check
    Core Data to see if the current restaurant is a favorite. If it is a favorite,
    we will show a filled-in heart, and if it is not, we will show a heart with just
    an outline. This method will be called after the `createRating()` method inside
    of the `initialize()` method.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将在我们进入详细视图时运行。首先，我们检查Core Data以查看当前餐厅是否被收藏。如果是收藏的，我们将显示一个填充的心形，如果不是，我们将显示一个只有轮廓的心形。此方法将在`initialize()`方法中的`createRating()`方法之后被调用。
- en: 'Build and run the project by hitting the Play button (or use ⌘ + *R*). When
    you get to the restaurant list, touch  one of the restaurant items and you will
    see the following:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击播放按钮（或使用⌘ + *R*）来构建和运行项目。当你到达餐厅列表时，触摸其中一个餐厅项，你会看到以下内容：
- en: '![](img/f5154fe8-5462-42e4-8655-a937625c6aca.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f5154fe8-5462-42e4-8655-a937625c6aca.png)'
- en: 'If you swipe up while touching, you will see that we now have two buttons:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你同时触摸并向上滑动，你会看到我们现在有两个按钮：
- en: '![](img/e491c900-fc78-4026-9ba5-7527ab77f0a1.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e491c900-fc78-4026-9ba5-7527ab77f0a1.png)'
- en: If you tap Cancel, it will dismiss the view. If you tap Favorite and select
    the same restaurant, you will now see that the heart will change to a filled-in
    one.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击“取消”，它将关闭视图。如果你点击“收藏”并选择相同的餐厅，你现在会看到心形会变成一个填充的心形。
- en: Summary
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We are officially done with the building of our app. In this chapter, we learned
    about the two different types of 3D Touch quick actions that we can add to our
    app. We also added 3D Touch support to our Collection View. Our restaurant list
    now has 3D Touch support so that we can add favorite restaurants from the restaurants
     list.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正式完成了应用程序的构建。在本章中，我们学习了可以在应用程序中添加的两种不同类型的3D Touch快速操作。我们还为我们的集合视图添加了3D Touch支持。现在我们的餐厅列表有了3D
    Touch支持，这样我们就可以从餐厅列表中添加收藏的餐厅。
- en: It is now time to move on to the most exciting part of this app, and that is
     getting our app into the App Store. In the next chapter, we will discuss everything
    you will need to know regarding  how to submit your app to the App Store.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候进入这个应用程序最激动人心的部分了，那就是将我们的应用程序提交到App Store。在下一章中，我们将讨论你需要了解的有关如何提交你的应用程序到App
    Store的所有内容。
