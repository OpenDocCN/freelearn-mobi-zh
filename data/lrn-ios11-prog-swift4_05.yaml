- en: Digging into Collections
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入了解集合
- en: 'In the last couple of chapters, we reviewed the basics of Swift to get you
    warmed up. Before we start building our app, we need to look at one more programming
    concept—collections. In Swift, we have three primary collection types, which we
    will cover in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后几章中，我们回顾了Swift的基础知识，以便让你做好准备。在我们开始构建我们的应用程序之前，我们需要查看一个额外的编程概念——集合。在Swift中，我们有三种主要的集合类型，我们将在本章中介绍：
- en: Arrays
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组
- en: Dictionaries
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字典
- en: Sets
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集合
- en: We will dig deeper into each one, but we will start with the most common collection
    type—arrays.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将深入探讨每一个，但我们将从最常见的集合类型——数组——开始。
- en: Arrays
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组
- en: 'Arrays are ordered collections of values and can hold any number of items,
    for example, a list of Strings, Ints, floating-point values, and so on. Arrays
    are stored in an ordered list, starting at `0`. Let''s look at a diagram:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 数组是有序的值集合，可以存储任意数量的项目，例如字符串、整数、浮点值等。数组存储在一个有序列表中，从`0`开始。让我们看看一个图解：
- en: '![](img/ff2059ca-65e0-4487-ae0e-9c1fdd17b085.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ff2059ca-65e0-4487-ae0e-9c1fdd17b085.png)'
- en: Starting from left to right in the preceding examples, we first have an array
    that holds a collection of Strings. In the second example, we have another array
    that holds a collection of Ints. In our third example, we have an array that holds
    a collection of floating-point values.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，从左到右，我们首先有一个包含字符串集合的数组。在第二个例子中，我们有一个包含整数集合的另一个数组。在我们的第三个例子中，我们有一个包含浮点值集合的数组。
- en: 'Now, let''s review the following diagram, which is a mixed array:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回顾以下混合数组的图解：
- en: '![](img/f5f4a9ba-f462-4a49-861f-5f904f343b7c.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f5f4a9ba-f462-4a49-861f-5f904f343b7c.png)'
- en: Since this example contains mixed data types, such as Strings, Ints, and bools,
    we would have to name this an array type of Any. This means that we can have mixed
    data types inside of our array. Until you are really comfortable with arrays,
    I would not recommend using them. Try to stick to arrays with the same data type
    because you know the exact data type of each element.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个例子包含混合数据类型，如字符串、整数和布尔值，我们不得不将这个数组类型命名为Any。这意味着我们可以在数组内部有混合数据类型。在你真正熟悉数组之前，我不建议使用它们。尽量坚持使用相同数据类型的数组，因为你知道每个元素的确切数据类型。
- en: An array can hold any data type, but making the array strongly typed means every
    element in it must be of the same type.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 数组可以存储任何数据类型，但使数组强类型化意味着它里面的每个元素都必须是同一类型。
- en: Creating an empty array
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个空数组
- en: Let's now create a few arrays in Playgrounds.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将在Playgrounds中创建几个数组。
- en: 'Sometimes, you may want to remove your prior entries from your Playground,
    so that it makes it easier for you to see each new `print` statement. Do that
    now and input the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，你可能想要从你的游乐场中删除之前的条目，这样你就能更容易地看到每个新的`print`语句。现在就做吧，并输入以下内容：
- en: '![](img/5af25f5d-ffa4-4baa-a5bf-264c74d81da6.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5af25f5d-ffa4-4baa-a5bf-264c74d81da6.png)'
- en: We just created our first two arrays. The data types within each set of brackets
    tells Swift what type of an array we want to create. The first array (integers)
    we created has a data type of Ints, and our second array (strings) has a data
    type of Strings.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建了我们的前两个数组。每个括号内的数据类型告诉Swift我们想要创建哪种类型的数组。我们创建的第一个数组（整数）的数据类型是Ints，我们的第二个数组（字符串）的数据类型是Strings。
- en: Creating an array with initial values
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建具有初始值的数组
- en: 'Arrays can have initial values when they are created. Let''s see how this would
    look by entering the following in Playgrounds:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当数组被创建时，它们可以具有初始值。让我们通过在Playgrounds中输入以下内容来看看这会是什么样子：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Your code will now look like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码现在看起来是这样的：
- en: '![](img/90e9eb12-1431-4371-909c-48f02898bd86.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/90e9eb12-1431-4371-909c-48f02898bd86.png)'
- en: The array that we just entered uses type inference to declare the data type
    of the array using its initial values. In this case, Swift understands that it
    is an array of Ints, because the values we entered are integers. In addition,
    when we use a constant (`let`) on an array, we are telling Swift that the array
    is an immutable array, which means that the contents or size cannot change once
    it is instantiated.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚才输入的数组使用类型推断来声明数组的类型，使用其初始值。在这种情况下，Swift理解这是一个整数的数组，因为我们输入的值是整数。此外，当我们在一个数组上使用常量（`let`）时，我们是在告诉Swift这个数组是一个不可变数组，这意味着内容或大小一旦实例化后就不能改变。
- en: Creating a mutable array
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个可变数组
- en: 'It is best practice to make all arrays (and for that matter, collections) immutable,
    but there are some cases where you will need to create an array that is mutable.
    Let''s have some fun and create a mutable array:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践是使所有数组（以及类似地，集合）不可变，但在某些情况下，你可能需要创建一个可变的数组。让我们来点乐趣，创建一个可变的数组：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As an aside, when creating a mutable array (or any variable), note that each
    variable must be unique.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 作为旁白，当创建一个可变的数组（或任何变量）时，请注意每个变量必须是唯一的。
- en: One use for a mutable array is so that we can change an array. Let's look at
    some ways we can do this.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 可变数组的一个用途是可以改变数组。让我们看看我们可以如何做到这一点。
- en: Adding items to an array
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向数组中添加项目
- en: Let's add some data to our array. There are a few different convenience methods
    for adding data to an array.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在我们的数组中添加一些数据。添加数据到数组有几个不同的便捷方法。
- en: A convenience method is, just as its name implies, a method that makes things
    convenient. A method is a function that lives inside of a class. We will discuss
    classes later in this book. If this is starting to get overwhelming, it is understandable.
    You do not need to worry about every single detail at this time. We will cover
    this again and things will slowly start to click at some point. Everyone learns
    differently, so there is no reason to worry if someone else understands something
    more quickly. Just go at your own pace.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 便捷方法正如其名所暗示的那样，是一种使事情变得方便的方法。方法是一个存在于类中的函数。我们将在本书的后面讨论类。如果这开始让你感到不知所措，这是可以理解的。你现在不需要担心每一个细节。我们将在适当的时候再次讨论这个问题，事情将逐渐开始变得清晰。每个人的学习方式都不同，所以如果你发现别人理解得更快，没有必要担心。只需按照自己的节奏前进。
- en: 'The first convenience method we will look at is the `append()` method:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要查看的第一个便捷方法是`append()`方法：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Your code and the output window should now look like this:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码和输出窗口现在应该看起来像这样：
- en: '![](img/68f2422e-eeb8-47b4-b3ff-b835e5ec8bc0.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/68f2422e-eeb8-47b4-b3ff-b835e5ec8bc0.png)'
- en: Houston, we have a problem! You will see that we are getting an error. Actually,
    I did this for a couple of reasons. Getting errors is normal and common. Most
    people who start out coding are afraid to make a mistake or get scared about getting
    or seeing errors. Trust me, I have been coding for years and I make mistakes all
    the time. The error is telling us that we tried to add an Int into an array that
    can only hold Strings.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 豪斯顿，我们遇到麻烦了！你会看到我们遇到了错误。实际上，我这样做有几个原因。遇到错误是正常和常见的。大多数刚开始编码的人害怕犯错，或者对看到错误感到害怕。相信我，我已经编码多年，我经常犯错。错误告诉我们，我们试图将一个整数添加到一个只能存储字符串的数组中。
- en: Every developer, from a beginner to an experienced one, will face a time when
    he or she will encounter an error that he or she cannot figure out. This error
    might get you frustrated to the point where you want to throw the computer across
    the room (I have been there a few times). The best advice my boss ever gave me
    was to take a walk for 10-15 minutes or do something to take your mind off of
    it. Sometimes this helps and you will come up with an idea after you walk away.
    Even if you come back and it still takes you hours to figure out what is wrong,
    this is still part of the process. The best errors are the ones that were the
    simplest thing you overlooked and you had to spend hours trying to figure out.
    You might have lost time, but you will have learned a great lesson. Lessons like
    these will stay with you forever and you will never forget the error the next
    time you encounter it. So, if your coding results in an error, even in this book,
    embrace the challenge, because there is no greater feeling than figuring out a
    challenging error.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 每个开发者，无论是初学者还是经验丰富的，都会遇到一个他或她无法解决的错误。这个错误可能会让你沮丧到想要把电脑扔到房间里去（我有过几次这样的经历）。我老板曾经给我的最好建议是散步10-15分钟或者做些事情来转移你的注意力。有时候这会有效，你会在走开后想出主意。即使你回来后仍然需要几个小时才能找出问题所在，这仍然是解决问题的过程的一部分。最好的错误是那些你忽略的最简单的事情，你不得不花几个小时去解决。你可能浪费了时间，但你将学到宝贵的教训。这样的教训将永远伴随着你，你永远不会忘记下次遇到同样的错误。所以，如果你的编码导致了错误，即使是这本书中的错误，也要接受挑战，因为没有什么比解决一个具有挑战性的错误更让人感到满足的了。
- en: 'So, let''s correct what we just did by revising the array to show the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们通过修改数组来纠正我们刚才所做的，以显示以下内容：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is how your code should now look:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你的代码现在应该看起来像这样：
- en: '![](img/dd3cf6c2-1ecf-46b3-9c80-92fbbe99fe04.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dd3cf6c2-1ecf-46b3-9c80-92fbbe99fe04.png)'
- en: In the Results panel, you can actually see the contents of our corrected array.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在结果面板中，你可以实际看到我们修正后的数组内容。
- en: Since an array can hold any number of items, let's add some more. Earlier, I
    mentioned that we have a variety of ways to add items to an array. The `append()`
    method allows us to add only one item at a time. In order to add multiple items,
    we can use the convenience called `append(contentsOf:)`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 由于数组可以容纳任意数量的项目，让我们添加一些。早些时候，我提到我们有很多种方法可以向数组中添加项目。`append()` 方法允许我们一次添加一个项目。为了添加多个项目，我们可以使用便利方法
    `append(contentsOf:)`。
- en: 'Add the following to Playgrounds:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下内容添加到 Playgrounds 中：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, your code should look like this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的代码应该看起来像这样：
- en: '![](img/02254909-89ef-4a4f-900f-22841316295d.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/02254909-89ef-4a4f-900f-22841316295d.png)'
- en: We added two more items into our array, but, so far, every example we have utilized
    has added items at the end of our array. We have two convenience methods that
    allow us to add items at any index position that is available in the array.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们向数组中添加了两个更多项目，但到目前为止，我们利用的每个例子都是将项目添加到数组的末尾。我们有两种便利方法允许我们在数组中的任何可用索引位置添加项目。
- en: 'The first method we can use to do this is called `insert(at:)`, which allows
    us to add a single item at a certain index position. We also have `insert(contentsOf:at:)`,
    which allows us to add multiple items into an array at a certain index position.
    Let''s use them both and add `Ohio` after California and then `North Carolina`,
    `South Carolina`, and `Nevada` after `Ohio`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用的第一种方法叫做 `insert(at:)`，它允许我们在某个索引位置添加一个单独的项目。我们还有 `insert(contentsOf:at:)`，它允许我们在某个索引位置向数组中添加多个项目。让我们同时使用它们，在加利福尼亚州之后添加
    `Ohio`，然后在 `Ohio` 之后添加 `North Carolina`、`South Carolina` 和 `Nevada`：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](img/56af51fa-66ce-4be7-b6c9-b23a66d7a1f2.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/56af51fa-66ce-4be7-b6c9-b23a66d7a1f2.png)'
- en: 'We just added items to our array using `append(contentsOf:)`, but there also
    is a shorthand version of this using the `+=` operator. Let''s add the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚使用 `append(contentsOf:)` 向数组中添加了项目，但还有另一种简写版本可以使用 `+=` 运算符。让我们添加以下内容：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, your code should look like this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的代码应该看起来像这样：
- en: '![](img/69019fef-88ed-4309-9bf2-b662f90d42b9.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/69019fef-88ed-4309-9bf2-b662f90d42b9.png)'
- en: This technique for adding items is much more concise and is my preferred way
    of inserting items into an array. Writing less code is not always better but,
    in this case, using the `+=` operator is my go-to method.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这种添加项目的技术更加简洁，也是我向数组中插入项目时首选的方法。写更少的代码并不总是更好的，但在这个例子中，使用 `+=` 运算符是我的首选方法。
- en: Checking the number of elements in an array
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查数组中的元素数量
- en: 'If you are keeping track, we now have nine items in our array. Luckily, we
    do not have to keep track of how many items are in our array, because we have
    a property called `count`. This property will keep track of the current item count
    and give us the total count of our array when we want to check. Let''s look at
    the count for states:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你一直在跟踪，我们现在数组中有九个项目。幸运的是，我们不需要跟踪数组中有多少个项目，因为我们有一个名为 `count` 的属性。这个属性将跟踪当前的项目计数，并在我们想要检查时给出数组的总计数。让我们看看州的计数：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Your code will now look like this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码现在应该看起来像这样：
- en: '![](img/d69d069c-5a8d-44c3-8b07-08062fa0fb3a.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d69d069c-5a8d-44c3-8b07-08062fa0fb3a.png)'
- en: Checking for an empty array
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查空数组
- en: The `count` property is not the only property we can use to calculate how many
    items are in an array. The most commonly used property for an array is called
    `isEmpty`. This property uses the `count` property by checking to see if the count
    is greater than `0`. This method will return true or false, depending on whether
    there are any items within our array. Since you learned that `if...else` statements
    work well with bools, let's use this `isEmpty` property in an `if...else` statement.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`count` 属性并不是我们用来计算数组中项目数量的唯一属性。数组最常用的属性叫做 `isEmpty`。这个属性通过检查计数是否大于 `0` 来使用
    `count` 属性。这个方法将返回 true 或 false，取决于数组中是否有任何项目。由于你学习了 `if...else` 语句与 bools 一起工作得很好，让我们在
    `if...else` 语句中使用这个 `isEmpty` 属性。'
- en: 'Add the following into Playgrounds:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下内容添加到 Playgrounds 中：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, your code and the output should look like this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的代码和输出应该看起来像这样：
- en: '![](img/d4790540-2a99-4b12-8f38-f78a879b4092.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d4790540-2a99-4b12-8f38-f78a879b4092.png)'
- en: 'Now, our Debug panel prints: `There are currently total nine items in our array`.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的调试面板打印出：`我们的数组中目前总共有九个项目`。
- en: One thing to remember in programming is that sometimes there are multiple ways
    of writing a piece of code. It is not shocking to meet someone who will approach
    the same problem differently than you did. To me, this is why programming is so
    great. Ultimately, all that matters is that it works as expected, especially when
    you are new to programming.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程中有一件事需要记住，那就是有时候编写一段代码可能有多种方式。遇到有人以与你不同的方式处理相同的问题并不令人惊讶。对我来说，这正是编程如此美妙的原因。最终，唯一重要的是它是否按预期工作，尤其是在你刚开始编程的时候。
- en: All programming languages have what is known as a style guide, which is a preferred
    way to write code, and it is no different in Swift. Preferred just means a suggested
    method, but even then, you will notice that most preferred methods vary on certain
    things. For now, you do not need to worry about different style guides, other
    than to know that they exist. In this book, we will follow a style that I have
    adopted into my code.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 所有编程语言都有所谓的样式指南，这是一种编写代码的首选方式，Swift 也不例外。首选只是意味着一个建议的方法，但即便如此，你也会注意到大多数首选方法在某些方面有所不同。现在，你不需要担心不同的样式指南，只需知道它们存在即可。在这本书中，我们将遵循我已将其纳入代码的样式。
- en: Once you get comfortable, I recommend that you start to look at style guides
    and adapt them into your code. Knowing different styles helps you to know your
    options as well as to understand what others are doing with their code, even if
    you do not agree with how they write something. If you write your code with a
    certain structure or style throughout a project, it will make it easier for you
    to come back to your code if you, for instance, had to take a break for some reason,
    such as starting another project or just taking some time off.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你感到舒适，我建议你开始查看样式指南并将它们应用到你的代码中。了解不同的样式可以帮助你了解你的选项，以及理解其他人如何使用他们的代码，即使你不同意他们编写代码的方式。如果你在整个项目中使用某种结构或样式编写代码，这将使你在需要时更容易回到你的代码，比如你不得不因为某些原因休息一下，比如开始另一个项目或只是休息一下。
- en: Retrieving a value from an array
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从数组中检索值
- en: 'We discussed creating arrays as well as adding items into an array. Now, let''s
    turn to retrieving a value from an array. Since arrays are stored by their index,
    we can use their index to retrieve values. Let''s retrieve California:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了创建数组以及向数组中添加项。现在，让我们转向从数组中检索值。由于数组是按索引存储的，我们可以使用它们的索引来检索值。让我们检索加利福尼亚：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, your code should look like this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的代码应该看起来像这样：
- en: '![](img/4240873e-0455-4aaf-8a84-7929ee564baf.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4240873e-0455-4aaf-8a84-7929ee564baf.png)'
- en: 'The Results panels shows North Carolina and not California. Remember, arrays
    start at `0`, not `1`. Therefore, in order for us to get California, we would
    actually need use the index position of `2`. Let''s make that update in Playgrounds:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 结果面板显示的是北卡罗来纳州而不是加利福尼亚。记住，数组从 `0` 开始，而不是 `1`。因此，为了我们能够得到加利福尼亚，我们实际上需要使用索引位置
    `2`。让我们在 Playgrounds 中进行这个更新：
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](img/31b28d9d-8da0-4d26-b1b7-f40178321c3b.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/31b28d9d-8da0-4d26-b1b7-f40178321c3b.png)'
- en: There we go!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！
- en: 'We now have this great list of states, but someone told you that Arizona also
    is amazing. Instead of just adding Arizona to our list, you decide that you''d
    actually prefer to replace South Carolina with Arizona. We could simply look at
    our array and see in which index South Carolina is. This would not be helpful,
    however, if it were to change or if the state for which you were searching did
    not exist. So, the safe way to code this is to check the array for an item, and,
    if that item is found, then Swift will give us its current index position. The
    `index(of:)` method is what we will use to get the index position of South Carolina:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有一个很好的州列表，但有人告诉你亚利桑那州也非常棒。与其只是将亚利桑那州添加到我们的列表中，你决定你实际上更愿意用亚利桑那州替换南卡罗来纳州。我们可以简单地查看我们的数组，看看南卡罗来纳州在哪个索引位置。然而，如果它发生变化，或者你要搜索的州不存在，这就不太有帮助了。因此，安全地编写这段代码的方法是检查数组中的项，如果找到了该项，Swift
    将会告诉我们它的当前索引位置。我们将使用 `index(of:)` 方法来获取南卡罗来纳州的索引位置：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This is how our code and output should now look:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的代码和输出现在应该看起来像这样：
- en: '![](img/fa60b336-11e7-4466-99a6-c926b104fdff.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fa60b336-11e7-4466-99a6-c926b104fdff.png)'
- en: 'Now that we have the position, we can replace South Carolina with Arizona,
    like so:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了位置，我们可以像这样用亚利桑那州替换南卡罗来纳州：
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This is how our code should now look:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的代码现在应该看起来像这样：
- en: '![](img/07d71cb9-686e-4400-acc3-671ffe8820fc.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/07d71cb9-686e-4400-acc3-671ffe8820fc.png)'
- en: Iterating over an array
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 遍历数组
- en: 'It would be nice if we could see a list of the states in our array. Earlier,
    you learned that `for...in` loops work with sequences. Since our array is a sequence,
    we can use `for...in` loops to loop through each element. When working on a project
    that has arrays, it is helpful to use a `print` statement inside of a `for...in`
    loop. This lets us print every item in our array to the Debug panel. So, let''s
    use a `for...in` loop to look at the contents of our array:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们能看到我们数组中各州的一个列表那会很好。之前，你学习了`for...in`循环与序列一起工作。由于我们的数组是一个序列，我们可以使用`for...in`循环遍历每个元素。在处理包含数组的工程项目时，在`for...in`循环中使用`print`语句很有帮助。这让我们能够将数组中的每个项目打印到调试面板。所以，让我们使用`for...in`循环来查看我们数组的内容：
- en: '[PRE13]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This is how our code and output should now look:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的代码和输出现在应该看起来像这样：
- en: '![](img/0a3b6061-2a4d-4181-b74c-4302f3f54dbd.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0a3b6061-2a4d-4181-b74c-4302f3f54dbd.png)'
- en: Removing items from an array
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从数组中移除项目
- en: 'Now, it is time to start deleting items from our array. Let''s delete the first
    item from our list. We have a convenience method for removing items from an array,
    called `removeFirst()`. This method will remove the first item from our array,
    which in our case is Florida. Let''s remove Florida and add this line above our
    `for...in` loop:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候开始从我们的数组中删除项目了。让我们从我们的列表中删除第一个项目。我们有一个方便的方法用于从数组中删除项目，称为`removeFirst()`。此方法将从我们的数组中移除第一个项目，在我们的例子中是佛罗里达州。让我们移除佛罗里达州，并在我们的`for...in`循环上方添加这一行：
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This is how our code and output should now look:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的代码和输出现在应该看起来像这样：
- en: '![](img/d251ad4e-45c0-46c4-be23-8a91e14c0d6e.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d251ad4e-45c0-46c4-be23-8a91e14c0d6e.png)'
- en: 'Since we removed Florida, all of our states'' index positions will be updated
    to move one position closer to the top of the array. But what if we wanted to
    remove an item that was not first? In order to do this, we can use the `remove(at:)`
    convenience. So, let''s remove North Carolina and New York, which are sitting
    at positions `2` and `4`, respectively. We will add the following above our `for...in`
    loop:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们移除了佛罗里达州，我们所有州的索引位置都将更新，以移动一个位置，更接近数组的顶部。但如果我们想移除一个不是第一个的项目呢？为了做到这一点，我们可以使用`remove(at:)`便利方法。所以，让我们移除位于位置`2`和`4`的北卡罗来纳州和纽约州。我们将在我们的`for...in`循环上方添加以下内容：
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This is how our code and output should now look:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的代码和输出现在应该看起来像这样：
- en: '![](img/e4a8fdfa-c471-4fe5-83d4-a20adb2d361e.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e4a8fdfa-c471-4fe5-83d4-a20adb2d361e.png)'
- en: 'Now, both North Carolina and New York have been removed. You will see that
    California and Ohio did not move, but Colorado and Nevada moved up closer to the
    top of the list. To remove the remaining six items, we could use `remove(at:)`
    for each one, but instead we will use the simpler method of `removeAll()`. So,
    let''s use `removeAll()` in Playgrounds:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，北卡罗来纳州和纽约州已经被移除。你会看到加利福尼亚州和俄亥俄州没有移动，但科罗拉多州和内华达州向上移动得更接近列表的顶部。为了移除剩余的六个项目，我们可以为每个项目使用`remove(at:)`，但我们将使用更简单的`removeAll()`方法。所以，让我们在Playgrounds中使用`removeAll()`：
- en: '[PRE16]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, your code should look something like this:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的代码应该看起来像这样：
- en: '![](img/15cfa34d-96ea-4707-936b-b6119894b292.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/15cfa34d-96ea-4707-936b-b6119894b292.png)'
- en: 'Now, we are back to where we started with an empty array. We have only scratched
    the surface for arrays. We will do more with arrays later in this book, but we
    first need to look at the next collection type: dictionaries.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们又回到了起点，数组为空。我们对数组只是刚刚触及表面。我们将在本书的后面部分对数组做更多操作，但首先我们需要看看下一个集合类型：字典。
- en: Dictionaries
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字典
- en: 'A dictionary is an unordered collection of values with each one accessed through
    a unique key. Let''s look at the following diagram:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 字典是一个无序的值集合，每个值通过一个唯一的键来访问。让我们看看以下图表：
- en: '![](img/98e993db-3266-4852-af82-03cb6afc17cd.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/98e993db-3266-4852-af82-03cb6afc17cd.png)'
- en: 'In our diagram, we have a dictionary of pizzas (**keys**) with their prices
    (**values**). In order to find something inside of a dictionary, we must look
    it up by its key. Let''s look at a dictionary syntax:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的图表中，我们有一个披萨（**键**）及其价格（**值**）的字典。为了在字典中找到某个东西，我们必须通过其键来查找。让我们看看字典的语法：
- en: '[PRE17]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Creating a dictionary
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建字典
- en: 'The traditional way of creating a dictionary is to first declare it as a dictionary
    and then, inside angle brackets, declare a type for the key and value. Let''s
    create our first dictionary inside Playgrounds:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 创建字典的传统方式是首先将其声明为字典，然后在尖括号内声明键和值的类型。让我们在Playgrounds中创建我们的第一个字典：
- en: '![](img/b974de7d-7228-4379-931e-e47f73501cf9.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b974de7d-7228-4379-931e-e47f73501cf9.png)'
- en: 'The immutable dictionary we created earlier has a data type of String for both
    its key and value. We have multiple ways to create a dictionary. Let''s look at
    another by adding the following into Playgrounds:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前创建的不可变字典的键和值的数据类型都是String。我们有多种创建字典的方法。让我们在Playgrounds中添加以下内容来查看另一种方法：
- en: '[PRE18]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Your code should now look like this:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码现在应该看起来像这样：
- en: '![](img/d95235ac-7fda-41e9-b65b-774be606d4e5.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d95235ac-7fda-41e9-b65b-774be606d4e5.png)'
- en: In this latest example, we created another immutable dictionary, with its key
    having a data type of String and its value having a data type of Int.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个最新的例子中，我们创建了一个不可变的字典，其键的数据类型为String，其值的数据类型为Int。
- en: 'If we wanted to use our pizza diagram, the key would have a data type of a
    String and the value would have a data type of a Double. Let''s create this dictionary
    in Playgrounds, but, this time, we will make it a mutable dictionary and give
    it an initial value:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想使用我们的披萨图例，键的数据类型将是String，值的数据类型将是Double。让我们在Playgrounds中创建这个字典，但这次，我们将它做成可变的，并给它一个初始值：
- en: '[PRE19]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Your code should now look like this:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码现在应该看起来像这样：
- en: '![](img/7e1c80c4-23b9-47d2-9e27-2cbeb9a0655a.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7e1c80c4-23b9-47d2-9e27-2cbeb9a0655a.png)'
- en: 'The preceding way is just one way of creating a dictionary for our pizza diagram
    example. Let''s look at a much more common way using type inference:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的方法只是为我们的披萨图例创建字典的一种方式。让我们看看使用类型推断的更常见方式：
- en: '[PRE20]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Once you add this to your code, your code should look something like this:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您将此添加到代码中，您的代码应该看起来像这样：
- en: '![](img/536732c0-3348-4d23-bfe5-78e7164bd539.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/536732c0-3348-4d23-bfe5-78e7164bd539.png)'
- en: This is a much simpler way to create a dictionary with an initial value. When
    initializing a dictionary, it can have any number of items. In our case, we are
    starting off with just one.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个创建具有初始值的字典的更简单方法。当初始化字典时，它可以有任意数量的条目。在我们的例子中，我们只从一个条目开始。
- en: Now, let's look at how we can add more pizzas into our dictionary.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看我们如何向字典中添加更多的披萨。
- en: Adding and updating dictionary elements
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加和更新字典元素
- en: 'Let''s add another item to our `dictPizzas` dictionary:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`dictPizzas`字典中添加另一个条目：
- en: '[PRE21]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Once you add this line of code, your code snippet should look like this:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您添加了这一行代码，您的代码片段应该看起来像这样：
- en: '![](img/6d1e5c5a-c17b-4960-97cb-242add0104f3.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6d1e5c5a-c17b-4960-97cb-242add0104f3.png)'
- en: 'This is the shorthand method for adding an item to a dictionary. After the
    dictionary variable, we add the key inside the brackets. Since the key for this
    dictionary is Strings, we must put this key in quotes. Next, we assign a Double
    to our value. Now, our dictionary has two items. This syntax is also used to update
    a dictionary item. Let''s change the price of meat pizza to `16.99`:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这是向字典中添加条目的简写方法。在字典变量之后，我们在括号内添加键。由于这个字典的键是字符串，我们必须将这个键放在引号内。接下来，我们给我们的值赋一个Double。现在，我们的字典有两个条目。这种语法也用于更新字典条目。让我们将肉披萨的价格更改为`16.99`：
- en: '[PRE22]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Have a look at the code, it should look like this:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 看看代码，它应该看起来像这样：
- en: '![](img/2dadf0ca-476a-443c-a183-67477a13e24a.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2dadf0ca-476a-443c-a183-67477a13e24a.png)'
- en: 'Instead of using the shorthand syntax, you can use the `updateValue(_:forKey:)`
    method. This method does almost the same thing as the shorthand syntax. If the
    value does not exist, it creates the item; if it does exist, it will update the
    item. The only difference is that, when using the `updateValue(_:forKey:)`, it
    actually returns the old value after performing the update. Using this method,
    you will get an optional value, because it is possible that no value exists in
    the dictionary. Let''s change the value now from `16.99` to `15.99`:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用简写语法，您还可以使用`updateValue(_:forKey:)`方法。这个方法几乎与简写语法做同样的事情。如果值不存在，它将创建条目；如果存在，它将更新条目。唯一的区别是，当使用`updateValue(_:forKey:)`时，它实际上在更新后会返回旧值。使用这个方法，您将得到一个可选值，因为字典中可能不存在值。现在让我们将值从`16.99`更改为`15.99`：
- en: '[PRE23]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Your code should now look like this:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码现在应该看起来像这样：
- en: '![](img/67b0e755-9bfa-4779-b700-8d2b13ec0fd0.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/67b0e755-9bfa-4779-b700-8d2b13ec0fd0.png)'
- en: 'Since we do not need the old value, we will just use the shorthand syntax to
    add a couple more pizzas:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们不需要旧值，我们将只使用简写语法添加几个披萨：
- en: '[PRE24]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Your code and output should now look like this:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码和输出现在应该看起来像这样：
- en: '![](img/99a290ee-5922-4c9c-82ab-d4d4838a4524.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99a290ee-5922-4c9c-82ab-d4d4838a4524.png)'
- en: Now that we have some data inside our dictionary, let's see how we can access
    that data.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们字典中已经有了一些数据，让我们看看我们如何访问这些数据。
- en: Accessing an item in a dictionary
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问字典中的条目
- en: 'When trying to access an item inside a dictionary, you will always receive
    an optional value. The reason for this is that you could potentially receive a
    nil value if the value does not exist. So, you should always use an `if...let`
    statement in order to safeguard your code:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 当尝试访问字典中的项时，你将始终收到一个可选值。这是因为如果值不存在，你可能会收到一个 nil 值。因此，你应该始终使用 `if...let` 语句来保护你的代码：
- en: '[PRE25]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Your code should now look like this:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码现在应该看起来像这样：
- en: '![](img/c187aee1-e7f0-4bda-97eb-f76fc236077f.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c187aee1-e7f0-4bda-97eb-f76fc236077f.png)'
- en: Iterating over dictionary values
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 遍历字典值
- en: Just like an array, we can iterate through our dictionary; however, there are
    a few differences. Since a dictionary is unordered, each time you loop through,
    the values will never be in the same order. With dictionaries, you can loop through
    both the values and keys.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 就像数组一样，我们可以遍历我们的字典；然而，有一些区别。由于字典是无序的，每次循环时，值将不会按相同的顺序出现。对于字典，你可以遍历值和键。
- en: 'Let''s iterate over a dictionary''s values using a `for...in` loop. Add the
    following into Playgrounds:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 `for...in` 循环遍历字典的值。请在 Playgrounds 中添加以下内容：
- en: '[PRE26]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Your code should now look like this:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码现在应该看起来像这样：
- en: '![](img/c70bfb5c-c786-4731-863d-eb9fb75151a3.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c70bfb5c-c786-4731-863d-eb9fb75151a3.png)'
- en: Iterating over dictionary keys
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 遍历字典键
- en: 'To iterate over a dictionary''s keys using a `for...in` loop, add the following
    into Playgrounds:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `for...in` 循环遍历字典的键，请在 Playgrounds 中添加以下内容：
- en: '[PRE27]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Your code and output should now look like this:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码和输出现在应该看起来像这样：
- en: '![](img/347edcf4-63dd-4124-bbc0-c817ec97d8b2.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/347edcf4-63dd-4124-bbc0-c817ec97d8b2.png)'
- en: Iterating over dictionary keys and values
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 遍历字典键和值
- en: 'When you need to iterate over both dictionary keys and values using a `for...in`
    loop, you use the following:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要使用 `for...in` 循环遍历字典的键和值时，你使用以下方法：
- en: '[PRE28]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Your code and output should now look like this:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码和输出现在应该看起来像这样：
- en: '![](img/7e41dd27-a09c-49ec-81bb-32b1d3dc66e2.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7e41dd27-a09c-49ec-81bb-32b1d3dc66e2.png)'
- en: So, we have now looked at how to loop through a dictionary.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们现在已经了解了如何循环遍历字典。
- en: Checking the number of items in a dictionary
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查字典中的项目数量
- en: 'In addition to keys and values, we have other useful properties. We can see
    the number of items in a dictionary using the `count` property. Let''s try that
    by adding the following:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 除了键和值之外，我们还有其他有用的属性。我们可以使用 `count` 属性来查看字典中的项目数量。让我们通过添加以下内容来尝试一下：
- en: '[PRE29]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now, your code and output should look like this:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的代码和输出应该看起来像这样：
- en: '![](img/b1802f11-74b8-4c9b-81fa-9161e6870a9e.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b1802f11-74b8-4c9b-81fa-9161e6870a9e.png)'
- en: 'Along with count, we can check whether a dictionary `isEmpty` or not. Let''s
    use this in an `if...else` statement by adding the following:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 除了计数，我们还可以检查一个字典是否为 `isEmpty`。让我们在检查字典是否为空的 `if...else` 语句中添加以下内容：
- en: '[PRE30]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, your code and output should look like this:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的代码和输出应该看起来像这样：
- en: '![](img/b480666f-76fb-4b72-a5dc-6746ff5f6e7d.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b480666f-76fb-4b72-a5dc-6746ff5f6e7d.png)'
- en: This kind of logic is helpful when you want to display something back to the
    user or hide a UI.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这种逻辑在你想要向用户显示某些内容或隐藏 UI 时非常有用。
- en: Removing items from a dictionary
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从字典中删除项
- en: 'Next, let''s learn how to remove an item from a dictionary. When deleting items
    from a dictionary, we have two primary ways of doing this. The first uses `removeValue(forKey:)`.
    Let''s add this right above our `if...else` statement that checks if the dictionary
    `isEmpty`:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们学习如何从字典中删除一个项。在从字典中删除项时，我们有两种主要的方法。第一种使用 `removeValue(forKey:)`。让我们在检查字典是否为空的
    `if...else` 语句上方添加这个方法：
- en: '[PRE31]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Your code should now look like this:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码现在应该看起来像这样：
- en: '![](img/efea94bb-7bbb-438e-989e-ed9e836c0ccb.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/efea94bb-7bbb-438e-989e-ed9e836c0ccb.png)'
- en: 'Let''s look at the second way of removing dictionary items, the shorthand syntax.
    Add the following to Playgrounds following the `removeValue(forKey:)`:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看删除字典项的第二种方法，即简写语法。在 `removeValue(forKey:)` 之后将以下内容添加到 Playgrounds 中：
- en: '[PRE32]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Your code should now look like this:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码现在应该看起来像这样：
- en: '![](img/4c188068-eb0f-4558-9cbe-f7c70d472b26.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4c188068-eb0f-4558-9cbe-f7c70d472b26.png)'
- en: Notice that, just like with `updateValue(_:forKey:)`, `removeValue(forKey:)`
    will return you the value before it is removed. If you do not need the value,
    the shorthand syntax is the preferred method.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，就像 `updateValue(_:forKey:)` 一样，`removeValue(forKey:)` 会在删除之前返回值。如果你不需要该值，简写语法是首选方法。
- en: 'So far, we covered arrays and dictionaries, and now we will review one last
    collection: sets.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经介绍了数组和字典，现在我们将回顾最后一个集合：集合。
- en: Sets
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集合
- en: 'A set stores unique values of the same type in a collection without a defined
    order. Let''s look at a diagram:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 一个集合在集合中存储相同类型的唯一值，没有定义的顺序。让我们看看一个图例：
- en: '![](img/626d6661-f395-47b0-981d-1b533e149a75.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/626d6661-f395-47b0-981d-1b533e149a75.png)'
- en: In the preceding diagram, we have two circles, both of which represent a set.
    On the left, we have Craig's favorite movies and on the right, we have Gabe's
    favorite movies.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，我们有两个圆圈，它们都代表一个集合。在左边，我们有克雷格的最爱电影，在右边，我们有Gabe的最爱电影。
- en: Creating an empty set
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个空集合
- en: 'Before we create these sets, let''s just create an empty set and see what that
    looks like:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建这些集合之前，让我们先创建一个空集合，看看它是什么样子：
- en: '![](img/aa760614-256b-4ad3-909f-571b26fcd5cc.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/aa760614-256b-4ad3-909f-571b26fcd5cc.png)'
- en: In this first set, after the equals sign, we create the set and give it a data
    type of String. Then, we use the parentheses to initialize the set.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个第一个集合中，在等号之后，我们创建集合并给它一个String数据类型。然后，我们使用括号来初始化集合。
- en: Creating a set with an array literal
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数组字面量创建集合
- en: 'Our first set was an empty String set, but we can create a set using an array
    literal. Let''s add the following into Playgrounds:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们第一个集合是一个空的String集合，但我们可以使用数组字面量来创建一个集合。让我们将以下内容添加到Playgrounds中：
- en: '[PRE33]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Your code should now look like this:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码现在应该看起来像这样：
- en: '![](img/17c38bd2-4877-4913-96c2-f2b4b8d1fe3b.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/17c38bd2-4877-4913-96c2-f2b4b8d1fe3b.png)'
- en: This preceding immutable set has a data type of Int, but in the parentheses
    we pass an empty array literal when we used the brackets.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这个先前的不可变集合的数据类型是Int，但在我们使用方括号时传递了一个空数组字面量。
- en: Creating a mutable set
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个可变集合
- en: 'Now that we are familiar with the way sets are created, let''s create a mutable
    set for Craig''s favorite movies and one for Gabe''s favorite movies. Add the
    following into Playgrounds:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们熟悉了集合的创建方式，让我们为克雷格的最爱电影和Gabe的最爱电影创建一个可变集合。将以下内容添加到Playgrounds中：
- en: '[PRE34]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now, your code should look like this:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的代码应该看起来像这样：
- en: '![](img/41ee603c-7af3-41a1-a6b8-0d41bde8efb6.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/41ee603c-7af3-41a1-a6b8-0d41bde8efb6.png)'
- en: We now have two mutable sets. The first set is created with an empty array literal
    and the second set is created with some initial values. Let's add some more items
    to both sets.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有两个可变集合。第一个集合是用空数组字面量创建的，第二个集合是用一些初始值创建的。让我们向两个集合中添加更多项目。
- en: Adding items into a set
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将项目添加到集合中
- en: 'In order to add an item into a set, we have to use the `insert()` method. Let''s
    use that to add another movie to Gabe''s favorite movies:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将一个项目添加到集合中，我们必须使用`insert()`方法。让我们用这个方法给Gabe的喜欢的电影列表添加另一部电影：
- en: '[PRE35]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Your code should now look like this:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码现在应该看起来像这样：
- en: '![](img/3c7f29e9-c839-47c0-90ba-b8e7ad3c8cb0.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3c7f29e9-c839-47c0-90ba-b8e7ad3c8cb0.png)'
- en: Now, Gabe has nine movies and Craig still has none. We added the `gabeFaveMovieSet`
    variable again so that we can see the contents update in the Results panel. In
    order to add multiple items into a set, we can use an array literal.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Gabe有9部电影，克雷格仍然一部也没有。我们再次添加了`gabeFaveMovieSet`变量，这样我们就可以在结果面板中看到内容更新。为了将多个项目添加到集合中，我们可以使用数组字面量。
- en: 'Let''s add 10 movies to Craig''s list, as follows:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在克雷格的列表中添加10部电影，如下所示：
- en: '[PRE36]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Your code should now look like this:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码现在应该看起来像这样：
- en: '![](img/c68f1a98-19cd-4984-b883-3cae32580613.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c68f1a98-19cd-4984-b883-3cae32580613.png)'
- en: Craig's set now has 10 movies. Next, let's see how we can work with sets.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 克雷格的集合现在有10部电影。接下来，让我们看看我们如何处理集合。
- en: Checking if a set contains an item
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查集合是否包含一个项目
- en: 'The first thing we can do with sets is to check if a set contains an item.
    Let''s see if Craig''s movie list has the movie Green Mile:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用集合做的第一件事是检查一个集合是否包含一个项目。让我们看看克雷格的电影列表是否有《绿里奇迹》这部电影：
- en: '[PRE37]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Your code should now look like this:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码现在应该看起来像这样：
- en: '![](img/d3ad43e4-048c-45f6-9fd2-2ef85d725c27.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d3ad43e4-048c-45f6-9fd2-2ef85d725c27.png)'
- en: In this preceding example, we used the `contains()` method in order to discover
    whether an item is in the set.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个先前的例子中，我们使用了`contains()`方法来发现一个项目是否在集合中。
- en: Iterating over a set
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 遍历集合
- en: 'If we want a list of all the movies in Gabe''s list, we can use a `for...loop`.
    Let''s see how that works:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要Gabe列表中所有电影的列表，我们可以使用一个`for...loop`。让我们看看它是如何工作的：
- en: '[PRE38]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Your code should now look like this:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码现在应该看起来像这样：
- en: '![](img/6cbad11c-d862-41a6-b17d-748f409a57a9.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6cbad11c-d862-41a6-b17d-748f409a57a9.png)'
- en: 'Now that we have seen a `for...in` loop for all three collections, arrays,
    dictionaries, and sets, you can see that there are a lot of similarities. Remember,
    since sets come unordered, every time we run our `for...in` loop we will get a
    list in a different order. The way around this is to use the `sorted()` method.
    This will ensure that every time we loop through our list, it will always be in
    the same order. Let''s do that on Craig''s movie list:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了所有三种集合（数组、字典和集合）的`for...in`循环，你可以看到它们有很多相似之处。记住，由于集合是无序的，每次我们运行`for...in`循环时，我们都会得到一个不同顺序的列表。解决这个问题的一种方法是用`sorted()`方法。这将确保每次我们遍历列表时，它总是以相同的顺序。让我们在克雷格的电影列表上试试这个方法：
- en: '[PRE39]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Your code should now look like this:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码现在应该看起来像这样：
- en: '![](img/c4f4a587-eb69-41a4-9c0a-f4a137b25c79.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4f4a587-eb69-41a4-9c0a-f4a137b25c79.png)'
- en: Now that we have our set sorted, let's look at the real power of using sets.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对集合进行了排序，让我们看看使用集合的真正威力。
- en: Intersecting two sets
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交集两个集合
- en: 'In the following diagram, we see that, if we intersect both sets together,
    we should get a list of any movies they have in common:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的图中，我们看到，如果我们将两个集合相交，我们应该得到一个包含它们共有的任何电影的列表：
- en: '![](img/d990084c-3e7f-46b3-9780-14d7f4e9bf3b.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d990084c-3e7f-46b3-9780-14d7f4e9bf3b.png)'
- en: 'We can do the same using the `intersection()` method in our code. Let''s intersect
    both movie lists and see what happens:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用代码中的`intersection()`方法做同样的事情。让我们将两个电影列表相交，看看会发生什么：
- en: '[PRE40]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Your code and output should now look like this:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码和输出现在应该看起来像这样：
- en: '![](img/f10ed341-3565-4d64-b332-58f1dcdbff54.png)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f10ed341-3565-4d64-b332-58f1dcdbff54.png)'
- en: We can see that the only two movies these sets have in common are *Winter Solider*
    and *The Illusionist*. In addition to seeing which movies the two sets have in
    common, we also can join the lists to get one consolidated list of the movies
    from both sets.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，这两个集合共有的唯一两部电影是*冬战士*和*魔术师*。除了看到两个集合共有的电影外，我们还可以合并列表，以获得两个集合中电影的合并列表。
- en: Joining two sets
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合并两个集合
- en: 'If you look at the following diagram, you can see the two sets joined together:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看看下面的图，你可以看到两个集合合并在一起：
- en: '![](img/f642f6b6-ccc4-4b55-b6d4-5652dc8053e6.png)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f642f6b6-ccc4-4b55-b6d4-5652dc8053e6.png)'
- en: 'Using the `union()` method, we get a consolidated list of items with no duplicates.
    Let''s try this in Playgrounds:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`union()`方法，我们得到一个没有重复项的合并列表。让我们在Playgrounds中试试这个方法：
- en: '[PRE41]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Your code should now look like this:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码现在应该看起来像这样：
- en: '![](img/65b0ec44-3488-4c33-9c48-a919f7261283.png)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![](img/65b0ec44-3488-4c33-9c48-a919f7261283.png)'
- en: We have a combined list of movies that includes all the movies that the two
    sets did not have in common and the two movies that were in common, but only listed
    once. As you can see, sets are really powerful and you can use them to manipulate
    data. Finally, we need to look at how you can remove items from a set.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个合并的电影列表，它包括两个集合中没有共有的所有电影，以及共有的两部电影，但只列了一次。正如你所看到的，集合真的很强大，你可以使用它们来操作数据。最后，我们需要看看如何从集合中移除项目。
- en: Removing items from a set
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从集合中移除项目
- en: 'In order to remove an item from a set, we can use the `remove()` method. When
    we use this method, we just input the item we want to remove in the parentheses.
    Let''s remove *Winter Solider* from Craig''s movie list:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从一个集合中移除一个项目，我们可以使用`remove()`方法。当我们使用这个方法时，我们只需在括号中输入我们想要移除的项目。让我们从克雷格的电影列表中移除*冬战士*：
- en: '[PRE42]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Your code should now look like this:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码现在应该看起来像这样：
- en: '![](img/8cae9ae0-f4de-45a0-8e93-54a458fa5a61.png)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8cae9ae0-f4de-45a0-8e93-54a458fa5a61.png)'
- en: 'If you wanted to remove more than a single item from a set (for instance, all
    of the items), then you can use the `removeAll()` method or give it an empty array
    literal:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要从一个集合中移除多个项目（例如，所有项目），那么你可以使用`removeAll()`方法或给它一个空数组字面量：
- en: '[PRE43]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Your code should now look like this:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码现在应该看起来像这样：
- en: '![](img/a1e67d5d-c0ad-42ae-ba92-1f05a81eff54.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a1e67d5d-c0ad-42ae-ba92-1f05a81eff54.png)'
- en: Now, both sets are empty.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，两个集合都是空的。
- en: Summary
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We covered a lot in this chapter. We now are comfortable with using collections.
    Now that you are familiar with arrays, dictionaries, and sets, take the time to
    practice and work with them as much as you can. Collections are used a ton in
    programming so getting comfortable is very important.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中涵盖了大量的内容。现在我们对使用集合感到很自在。既然你已经熟悉了数组、字典和集合，请花时间尽可能多地练习和操作它们。集合在编程中被大量使用，因此感到舒适非常重要。
- en: Even though we will touch on these things throughout the creation of the *Let's
    Eat* app, it is best to make sure you are comfortable with what we covered here.
    So, please review as much as you need in order to make sure you feel that you
    are proficient in the topics contained in this chapter.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们将在创建“让我们吃饭”应用的过程中涉及这些内容，但最好确保你对这里所涵盖的内容感到舒适。因此，请根据需要尽可能多地复习，以确保你觉得自己对这一章节包含的主题熟练掌握。
- en: In the next chapter, we will start building our *Let's Eat* app. Over the next
    two chapters, we will work on getting our project set up and then we will start
    working on the visual aspects of our app.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始构建我们的“让我们吃饭”应用。在接下来的两章中，我们将致力于设置我们的项目，然后我们将开始着手处理我们应用的可视化方面。
