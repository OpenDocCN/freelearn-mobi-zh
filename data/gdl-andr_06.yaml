- en: Chapter 6. Running Tests
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章。运行测试
- en: To ensure the quality of any app or library, having automated tests is important.
    For a long time, the Android development tools lacked support for automated tests,
    but recently, Google has put in a lot of effort to make it easier for developers
    to get started with tests. Some old frameworks have been updated, and new frameworks
    have been added to make sure we can thoroughly test apps and libraries. We can
    run them not only from Android Studio, but also directly from the command-line
    interface, using Gradle.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保任何应用程序或库的质量，拥有自动化测试是非常重要的。长期以来，Android 开发工具缺乏对自动化测试的支持，但最近，谷歌投入了大量努力，使开发者更容易开始测试。一些旧框架已经更新，并且添加了新框架，以确保我们可以彻底测试应用程序和库。我们不仅可以从
    Android Studio 运行它们，还可以直接从命令行界面使用 Gradle 运行。
- en: In this chapter, we will explore the different ways to test Android apps and
    libraries. We will also look at how Gradle can help to automate the testing process.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨测试 Android 应用程序和库的不同方法。我们还将探讨 Gradle 如何帮助自动化测试过程。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Unit tests
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试
- en: Functional tests
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能测试
- en: Test coverage
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试覆盖率
- en: Unit tests
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: Having well-written unit tests in your project does not only assure quality,
    it also makes it easy to check if new code breaks any functionality. Android Studio
    and the Gradle Android plugin have native support for unit tests, but you need
    to configure a few things before you can use them.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的项目中拥有编写良好的单元测试不仅保证了质量，还使得检查新代码是否破坏了任何功能变得容易。Android Studio 和 Gradle Android
    插件对单元测试有原生支持，但在使用它们之前，你需要配置一些设置。
- en: JUnit
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JUnit
- en: '**JUnit** is an extremely popular unit testing library that has been around
    for over a decade. It makes it easy to write tests while making sure that they
    are also easy to read. Keep in mind that these particular unit tests are only
    useful for testing business logic and not code that is related to the Android
    SDK.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**JUnit** 是一个极其流行的单元测试库，它已经存在十多年了。它使得编写测试变得容易，同时确保它们也易于阅读。请注意，这些特定的单元测试仅适用于测试业务逻辑，而不是与
    Android SDK 相关的代码。'
- en: 'Before you can start writing JUnit tests for your Android project, you need
    to create a directory for the tests. By convention, this directory is called `test`
    and it should be on the same level as your main directory. The directory structure
    should look like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在你可以开始为你的 Android 项目编写 JUnit 测试之前，你需要为测试创建一个目录。按照惯例，这个目录被称为 `test`，它应该与你的主目录在同一级别。目录结构应该如下所示：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can then create test classes in `src/test/java/com.example.app`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 `src/test/java/com.example.app` 中创建测试类。
- en: 'To make use of the latest features in JUnit, use JUnit version 4\. You can
    ensure this by adding a dependency for the test build:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 JUnit 的最新功能，请使用 JUnit 版本 4。你可以通过添加测试构建的依赖项来确保这一点：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Notice that we are using `testCompile` instead of `compile` here. We use this
    configuration to make sure that the dependency is only built when running the
    tests, and not when packaging the app for distribution. Dependencies added with
    `testCompile` will never be included in the APK releases generated by the regular
    assemble tasks.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们在这里使用的是 `testCompile` 而不是 `compile`。我们使用这种配置来确保依赖项仅在运行测试时构建，而不是在打包应用程序进行分发时构建。使用
    `testCompile` 添加的依赖项永远不会包含在常规的 assemble 任务生成的 APK 发布中。
- en: 'If you have any special conditions in one of your build types or product flavors,
    it is possible to add a test-only dependency to that specific build alone. For
    example, if you only want to add JUnit tests to your paid flavor, you can do that
    as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在一个构建类型或产品风味中有一个特殊条件，你可以为那个特定的构建添加一个仅测试的依赖项。例如，如果你只想将 JUnit 测试添加到你的付费风味中，你可以这样做：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When everything is set up, it is time to start writing some tests. Here is
    a simple example of a class that tests a method adding two numbers:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当一切准备就绪时，就是开始编写测试的时候了。以下是一个测试添加两个数字方法的简单类示例：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: To run all tests with Gradle, just execute `gradlew` test. If you only want
    to run the tests on a certain build variant, simply add the name of the variant.
    If you want to run the tests on only the debug variant, for example, execute `gradlewtestDebug`.
    If a test fails, Gradle prints the error message in the command-line interface.
    If all the tests run smoothly, Gradle shows the regular **BUILD SUCCESSFUL** message.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Gradle运行所有测试，只需执行`gradlew test`。如果你只想在特定的构建变体上运行测试，只需简单地添加变体的名称。如果你想只在调试变体上运行测试，例如，执行`gradlew
    testDebug`。如果测试失败，Gradle将在命令行界面中打印错误消息。如果所有测试都顺利运行，Gradle将显示常规的**BUILD SUCCESSFUL**消息。
- en: 'A single failed test causes the `test` task to fail, halting the entire process
    immediately. This means that not all of your tests are executed in case of a failure.
    If you want to make sure the entire test suite is executed for all build variants,
    use the `continue` flag:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 单个失败的测试会导致`test`任务失败，立即停止整个过程。这意味着在出现失败的情况下，并不是所有测试都会被执行。如果你想确保所有构建变体都执行整个测试套件，请使用`continue`标志：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can also write tests specifically for a certain build variant by storing
    the tests class in the corresponding directory. For example, if you want to test
    specific behavior in the paid version of your app, put the test class in `src/testPaid/java/com.example.app`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过将测试类存储在相应的目录中来为特定的构建变体编写测试。例如，如果你想测试应用程序付费版本中的特定行为，将测试类放在`src/testPaid/java/com.example.app`。
- en: 'If you do not want to run the entire test suite, but only the tests for a particular
    class, you can use the tests flag like this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想运行整个测试套件，只想运行特定类的测试，可以使用测试标志，如下所示：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Executing the test task does not only run all the tests, but also creates a
    test report, which can be found at a`pp/build/reports/tests/debug/index.html`.
    This report makes it easy to find the issues if there are any failures, and is
    particularly useful in situations where tests are executed automatically. Gradle
    will create a report for every build variant that you run the tests on.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 执行测试任务不仅运行所有测试，还会创建一个测试报告，该报告可以在`app/build/reports/tests/debug/index.html`找到。如果出现任何失败，这个报告可以轻松地找到问题，在测试自动执行的情况下尤其有用。Gradle将为你在其上运行测试的每个构建变体创建一个报告。
- en: 'If all your tests run successfully, your unit test report will look like this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有测试都成功运行，你的单元测试报告将看起来像这样：
- en: '![JUnit](img/B01061_06_01.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![JUnit](img/B01061_06_01.jpg)'
- en: 'You can also run the tests within Android Studio. When you do that, you get
    immediate feedback in the IDE, and you can click on failed tests to navigate to
    the corresponding code. If all your tests pass, the **Run** tool window will look
    like this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在Android Studio中运行测试。当你这样做时，你会在IDE中获得即时反馈，并且可以点击失败的测试导航到相应的代码。如果你的所有测试都通过了，**运行**工具窗口将看起来像这样：
- en: '![JUnit](img/B01061_06_02.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![JUnit](img/B01061_06_02.jpg)'
- en: 'If you want to test parts of your code that contain references to Android-specific
    classes or resources, regular unit tests are not ideal. You may have already tried
    and run into the `java.lang.RuntimeException: Stub!` error. To fix this, you would
    need to implement every method in the Android SDK yourself, or use a mocking framework.
    Luckily, several libraries exist that have taken care of the Android SDK. The
    most popular of those libraries is Robolectric, which provides an easy way to
    test Android functionality, without the need for a device or emulator.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你想要测试包含对Android特定类或资源的引用的代码部分，常规单元测试并不是理想的选择。你可能已经尝试过并遇到了`java.lang.RuntimeException:
    Stub!`错误。为了修复这个问题，你需要自己实现Android SDK中的每个方法，或者使用模拟框架。幸运的是，存在几个已经处理了Android SDK的库。其中最受欢迎的库是Robolectric，它提供了一种简单的方式来测试Android功能，而无需设备或模拟器。'
- en: Robolectric
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Robolectric
- en: With Robolectric, you can write tests that make use of the Android SDK and resources,
    while still running tests inside the Java Virtual Machine. This means that you
    do not need a running device or emulator to make use of Android resources in your
    tests, thus making it a lot faster to test the behavior of UI components of an
    app or library.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Robolectric，你可以在Java虚拟机内部运行测试，同时利用Android SDK和资源。这意味着你不需要运行中的设备或模拟器来在测试中使用Android资源，因此可以大大加快测试应用程序或库的UI组件行为。
- en: 'To get started with Robolectric, you need to add a few test dependencies. Besides
    Robolectric itself, you also need to include JUnit, and, if you make use of the
    support library, you also need the Robolectric shadow classes to use it:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 Robolectric，你需要添加一些测试依赖项。除了 Robolectric 本身之外，你还需要包括 JUnit，如果你使用了支持库，还需要
    Robolectric 阴影类来使用它：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Robolectric tests classes should be created in the `src/test/java/com.example.app`
    directory, just like regular unit tests. The difference is that you can now write
    tests that involve Android classes and resources. For example, this test validates
    that the text of a certain `TextView` changes after clicking on a specific `Button`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Robolectric 测试类应该创建在 `src/test/java/com.example.app` 目录下，就像常规单元测试一样。区别在于你现在可以编写涉及
    Android 类和资源的测试。例如，这个测试验证了在点击特定的 `Button` 后，某个 `TextView` 的文本是否发生了变化：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Robolectric has some known issues with Android Lollipop and the compatibility
    library. If you run into errors that mention missing resources related to the
    compatibility library, there is a fix for that.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Robolectric 与 Android Lollipop 和兼容性库存在一些已知问题。如果你遇到提到缺少与兼容性库相关的资源的错误，有一个修复方案。
- en: 'You need to add a file to the module called `project.properties`, and add these
    lines to it:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要向模块中添加一个名为 `project.properties` 的文件，并将以下行添加到其中：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This will help Robolectric find the compatibility library resources.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这将帮助 Robolectric 找到兼容性库资源。
- en: Functional tests
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能测试
- en: '**Functional tests** are used to test whether several components of an app
    work together as expected. For example, you can create a functional test to confirm
    that tapping a certain button opens a new `Activity`. There are several functional
    testing frameworks for Android, but the easiest way to get started with functional
    testing is using the Espresso framework.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**功能测试**用于测试应用中几个组件是否按预期协同工作。例如，你可以创建一个功能测试来确认点击某个按钮是否会打开一个新的 `Activity`。Android
    有几个功能测试框架，但开始功能测试最简单的方法是使用 Espresso 框架。'
- en: Espresso
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Espresso
- en: Google created **Espresso** to make it easier for developers to write functional
    tests. The library is provided through the Android support repository, so you
    can install it using the SDK Manager.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Google 创建了 **Espresso** 以便开发者更容易编写功能测试。该库通过 Android 支持仓库提供，因此你可以使用 SDK 管理器进行安装。
- en: In order to run tests on a device, you need to define a test runner. Through
    the testing support library, Google provides the `AndroidJUnitRunner` test runner,
    which helps you run JUnit test classes on Android devices. The test runner will
    load the app APK and the test APK to a device, run all the tests, and then build
    the reports with the test results.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在设备上运行测试，你需要定义一个测试运行器。通过测试支持库，Google 提供了 `AndroidJUnitRunner` 测试运行器，它可以帮助你在
    Android 设备上运行 JUnit 测试类。测试运行器会将应用 APK 和测试 APK 加载到设备上，运行所有测试，然后根据测试结果生成报告。
- en: 'Provided you have downloaded the testing support library, this is how you should
    set up the test runner:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你已经下载了测试支持库，这是设置测试运行器的方法：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You also need to set up a few dependencies before you can start using Espresso:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用 Espresso 之前，你还需要设置一些依赖项：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You need to reference the testing support library and `espresso-core` to get
    started with Espresso. The last dependency, `espresso-contrib`, is a library with
    features that supplement Espresso, but are not part of the core library.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要引用测试支持库和 `espresso-core` 以开始使用 Espresso。最后一个依赖项 `espresso-contrib` 是一个具有补充
    Espresso 功能但不是核心库一部分的库。
- en: Notice that these dependencies use the `androidTestCompile` configuration, instead
    of the `testCompile` configuration we used earlier. This is to make a distinction
    between unit tests and functional tests.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到这些依赖项使用的是 `androidTestCompile` 配置，而不是我们之前使用的 `testCompile` 配置。这是为了区分单元测试和功能测试。
- en: 'If you were to try to run the test build at this point, you would run into
    this error:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你此时尝试运行测试构建，你会遇到这个错误：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The error itself is very descriptive. Gradle cannot complete the build because
    of a duplicate file. Luckily, it is just a license description, so we can strip
    it out of the build. The error itself contains information on how to do that as
    well:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 错误本身非常详细。Gradle 由于文件重复无法完成构建。幸运的是，这只是一个许可描述，我们可以将其从构建中移除。错误本身还包含了如何做到这一点的信息：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Once the build file is set up, you can start adding tests. Functional tests
    are placed in a different directory than the regular unit tests. Just like with
    the dependency configurations, you need to use `androidTest` instead of just test,
    so the correct directory for functional tests is `src/androidTest/java/com.example.app`.
    Here is an example of a test class that checks whether the text of `TextView`
    in `MainActivity` is correct:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建文件设置完成，你就可以开始添加测试。功能测试放置在与常规单元测试不同的目录中。就像依赖配置一样，你需要使用`androidTest`而不是仅仅`test`，因此功能测试的正确目录是`src/androidTest/java/com.example.app`。以下是一个测试类的示例，该类检查`MainActivity`中`TextView`的文本是否正确：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Before you can run Espresso tests, you need to make sure you have a device
    or emulator. If you forget to connect a device, trying to execute the test task
    will throw this exception:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行 Espresso 测试之前，你需要确保你有一个设备或模拟器。如果你忘记连接设备，尝试执行测试任务将抛出此异常：
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Once you have connected a device or started an emulator, you can run your Espresso
    tests using `gradlewconnectedCheck`. This task will execute both `connectedAndroidTest`
    to run all tests for the debug build on all the connected devices, and `createDebugCoverageReport`
    to create a test report.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你连接了设备或启动了模拟器，你可以使用`gradlewconnectedCheck`来运行你的 Espresso 测试。此任务将执行`connectedAndroidTest`来在所有连接的设备上运行调试构建的所有测试，以及`createDebugCoverageReport`来创建测试报告。
- en: 'You can find the generated test reports in the app directory under `build/outputs/reports/androidTests/connected`.
    Open `index.html` to view the report, which looks like this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在应用目录下的`build/outputs/reports/androidTests/connected`中找到生成的测试报告。打开`index.html`来查看报告，它看起来像这样：
- en: '![Espresso](img/B01061_06_03.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![Espresso](img/B01061_06_03.jpg)'
- en: The functional test report shows which device and Android version the tests
    are run on. You can run these tests on multiple devices at the same time, so the
    device information makes it easier to find device- or version-specific bugs.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 功能测试报告显示测试是在哪个设备和 Android 版本上运行的。你可以同时运行多个设备上的这些测试，因此设备信息使得查找设备或版本特定的错误变得更加容易。
- en: If you want to get feedback on your tests within Android Studio, set up a run/debug
    configuration to run the tests directly from the IDE. A run/debug configuration
    represents a set of run/debug startup properties. The Android Studio toolbar has
    a configuration picker, where you can select the run/debug configuration that
    you want to use.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在 Android Studio 中对你的测试获得反馈，设置一个运行/调试配置来直接从 IDE 中运行测试。运行/调试配置代表一组运行/调试启动属性。Android
    Studio 工具栏有一个配置选择器，你可以从中选择你想要使用的运行/调试配置。
- en: '![Espresso](img/B01061_06_04.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![Espresso](img/B01061_06_04.jpg)'
- en: 'To set up a new configuration, open the configuration editor by clicking on
    **Edit Configurations…** and then create a new Android tests configuration. Select
    the module and specify the instrumentation runner to be `AndroidJUnitRunner`,
    as shown in the following screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置新的配置，通过点击**编辑配置…**来打开配置编辑器，然后创建一个新的 Android 测试配置。选择模块并指定仪器运行器为`AndroidJUnitRunner`，如下面的截图所示：
- en: '![Espresso](img/B01061_06_05.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![Espresso](img/B01061_06_05.jpg)'
- en: Once you save this new configuration, you can select it in the configuration
    picker and click on the **Run** button to run all tests.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 保存此新配置后，你可以在配置选择器中选择它，然后点击**运行**按钮来运行所有测试。
- en: Note
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Running Espresso tests from Android Studio has one caveat: the test report
    is not generated. The reason for this is that Android Studio executes the `connectedAndroidTest`
    task instead of `connectedCheck`, and `connectedCheck` is the task that takes
    care of generating the test report.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Android Studio 运行 Espresso 测试有一个缺点：不会生成测试报告。原因是 Android Studio 执行的是`connectedAndroidTest`任务而不是`connectedCheck`，而`connectedCheck`是负责生成测试报告的任务。
- en: Test coverage
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试覆盖率
- en: Once you start writing tests for your Android projects, it is good to know how
    much of your code base is covered by tests. There are plenty of test coverage
    tools for Java, but **Jacoco** is the most popular one. It is also included by
    default, which makes it easy to get started.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你开始为你的 Android 项目编写测试，了解你的代码库中有多少被测试覆盖是很重要的。Java 有很多测试覆盖率工具，但**Jacoco**是最受欢迎的一个。它默认包含在内，这使得入门变得容易。
- en: Jacoco
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Jacoco
- en: 'Enabling coverage reports is very easy. You just need to set `testCoverageEnabled
    = true` on the build type that you are testing. Enable test coverage for the debug
    build type like this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 启用覆盖率报告非常简单。你只需在你要测试的构建类型上设置`testCoverageEnabled = true`。像这样启用调试构建类型的测试覆盖率：
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: When you enable test coverage, the coverage reports are created when you execute
    `gradlew connectedCheck`. The task that creates the report itself is `createDebugCoverageReport`.
    Even though it is not documented, and it does not appear in the task list when
    you run `gradlew tasks`, it is possible to run it directly. However, because `createCoverageReport`
    depends on `connectedCheck`, you cannot execute them separately. The dependency
    on `connectedCheck` also means that you need a connected device or emulator to
    generate the test coverage report.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当你启用测试覆盖率时，当执行 `gradlew connectedCheck` 命令时将创建覆盖率报告。创建报告的任务本身是 `createDebugCoverageReport`。尽管它没有文档说明，且在运行
    `gradlew tasks` 命令时不会出现在任务列表中，但你可以直接运行它。然而，由于 `createCoverageReport` 依赖于 `connectedCheck`，你不能单独执行它们。对
    `connectedCheck` 的依赖还意味着你需要一个连接的设备或模拟器来生成测试覆盖率报告。
- en: 'After the task is executed, you can find the coverage report in the `app/build/outputs/reports/coverage/debug/index.html`
    directory. Every build variant has its own directory for reports, because each
    variant can have different tests. The test coverage report will look something
    like this:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 任务执行完成后，你可以在 `app/build/outputs/reports/coverage/debug/index.html` 目录中找到覆盖率报告。每个构建变体都有自己的报告目录，因为每个变体都可以有不同的测试。测试覆盖率报告看起来可能像这样：
- en: '![Jacoco](img/B01061_06_06.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![Jacoco](img/B01061_06_06.jpg)'
- en: The report shows a nice overview of the coverage on the class level, and you
    can click through to get more information. In the most detailed view, you can
    see which lines are tested, and which ones are not, in a useful color-coded file
    view.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 报告显示了类级别的覆盖率概览，你可以点击查看更多信息。在最详细的视图中，你可以看到哪些行被测试了，哪些行没有被测试，以及在一个有用的颜色编码的文件视图中。
- en: 'If you want to specify a particular version of Jacoco, simply add a Jacoco
    configuration block to the build type, defining the version:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要指定 Jacoco 的特定版本，只需在构建类型中添加一个 Jacoco 配置块，并定义版本：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: However, explicitly defining a version is not necessary; Jacoco will work regardless.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，明确指定版本不是必要的；Jacoco 仍然可以正常工作。
- en: Summary
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at several options to test Android apps and libraries.
    We started out with simple unit tests, and then looked at more Android-specific
    testing with Robolectric. Then we covered functional tests and getting started
    with Espresso. Finally, we looked at enabling test coverage reports to see where
    the test suite needs to be improved. Now that you know how to run the entire test
    suite with Gradle and Android Studio, and you can generate coverage reports, there
    are no excuses not to write tests. In [Chapter 8](ch08.html "Chapter 8. Setting
    Up Continuous Integration"), *Setting Up Continuous Integration*, we will look
    at more ways to automate tests with continuous integration tools.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了测试 Android 应用和库的几种选项。我们首先从简单的单元测试开始，然后探讨了使用 Robolectric 的更具体的 Android
    测试。接着我们介绍了功能测试和 Espresso 的入门，最后我们探讨了启用测试覆盖率报告以查看测试套件需要改进的地方。现在你已经知道了如何使用 Gradle
    和 Android Studio 运行整个测试套件，并且可以生成覆盖率报告，没有理由不编写测试。在 [第 8 章](ch08.html "第 8 章。设置持续集成")
    中，我们将探讨使用持续集成工具自动化测试的更多方法。
- en: 'The next chapter covers one of the most important aspects of customizing the
    build process: creating custom tasks and plugins. The chapter also includes a
    short introduction to Groovy. This will not only help when creating tasks and
    plugins, but will also make it easier to understand how Gradle works.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将涵盖自定义构建过程最重要的一个方面：创建自定义任务和插件。本章还包括 Groovy 的简要介绍。这不仅有助于创建任务和插件，而且也有助于更容易地理解
    Gradle 的工作原理。
