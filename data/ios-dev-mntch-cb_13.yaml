- en: Chapter 13. Localization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章。本地化
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍：
- en: Creating an application for different languages
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为不同语言创建应用程序
- en: Localizable resources
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可本地化资源
- en: Regional formatting
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区域格式化
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: With the release of the iOS platform and the global software marketplace in
    the form of the application store, Apple has made it easier for developers to
    distribute applications worldwide.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 随着iOS平台和以应用程序商店形式出现的全球软件市场的发布，苹果公司使开发者更容易在全球范围内分发应用程序。
- en: But, users worldwide will not even bother to download and use an application
    that is released in a language they do not understand. To broaden the user base
    for their applications, developers have to localize it. Localization is the process
    of translating text into multiple languages, providing resources specific to multiple
    regions, thus creating an application that will target audiences of different
    cultures.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，全球用户甚至不会费心下载和使用以他们不理解的语言发布的应用程序。为了扩大其应用程序的用户基础，开发者必须对其进行本地化。本地化是将文本翻译成多种语言，提供针对多个区域的具体资源，从而创建面向不同文化受众的应用程序的过程。
- en: In this chapter, we will discuss the best practices to provide translated text
    that will be displayed according to each user's locale preferences. We will also
    see how to provide resources (images, videos) based on these preferences. Finally,
    we will use common .NET practices for formatting dates, currencies, and numbers.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论提供翻译文本的最佳实践，这些文本将根据每个用户的区域设置偏好显示。我们还将了解如何根据这些偏好提供资源（图像、视频）。最后，我们将使用常见的.NET实践来格式化日期、货币和数字。
- en: Creating an application for different languages
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为不同语言创建应用程序
- en: In this recipe, we will create an application that will support two different
    languages.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将创建一个支持两种不同语言的应用程序。
- en: Getting ready
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in MonoDevelop, and name it `MultipleLanguageApp`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在MonoDevelop中创建一个新的项目，并将其命名为`MultipleLanguageApp`。
- en: How to do it...
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Add two labels on the view of `MainController`.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainController`的视图中添加两个标签。
- en: Add two folders to the project. Name them `en.lproj` and `es.lproj` respectively.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向项目添加两个文件夹。分别命名为`en.lproj`和`es.lproj`。
- en: 'Create two text files with a text editor application. Enter the following text
    in the first file:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用文本编辑器应用程序创建两个文本文件。在第一个文件中输入以下文本：
- en: '[PRE0]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Save it as Localizable.strings inside the en.lproj folder.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其保存为en.lproj文件夹中的Localizable.strings。
- en: 'Enter the following text in the second file:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第二个文件中输入以下文本：
- en: '[PRE1]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Save it with the same name, Localizable.strings, inside the es.lproj folder
    this time. Set both files' **Build Action** to **Content.**
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这次将文件以相同的名称，Localizable.strings，保存在`es.lproj`文件夹中。将两个文件的**构建操作**设置为**内容**。
- en: Note
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `Localizable.strings` files must be saved in either `UTF8` or `UTF16` encodings.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Localizable.strings`文件必须以`UTF8`或`UTF16`编码保存。'
- en: 'Enter the following code in the `MainController` class:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainController`类中输入以下代码：
- en: '[PRE2]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Through the **settings** application on the simulator, set the language to **English**
    (if it is not set already), and run the application. The message will be displayed
    in English. Try setting the language of the simulator to **Spanish**, and run
    the application again. The message will be displayed in Spanish.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过模拟器的**设置**应用程序，将语言设置为**英语**（如果尚未设置），然后运行应用程序。消息将以英语显示。尝试将模拟器的语言设置为**西班牙语**，然后再次运行应用程序。消息将以西班牙语显示。
- en: How it works...
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To make it easy for developers to provide support for multiple languages in
    applications, iOS reads text in different languages from the corresponding language
    folder. In this application, we support both English and Spanish. Their corresponding
    folders are `en.lproj` and `es.lproj`, respectively. When we call the `LocalizedString`
    method, it looks for and parses the file `Localizable.strings` to return the appropriate
    text.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使开发者更容易在应用程序中提供对多种语言的支持，iOS从相应的语言文件夹中读取不同语言文本。在本应用程序中，我们支持英语和西班牙语。它们相应的文件夹分别是`en.lproj`和`es.lproj`。当我们调用`LocalizedString`方法时，它会查找并解析`Localizable.strings`文件以返回适当的文本。
- en: 'The contents of the strings files are defined by a set of quoted key/value
    pairs, in a C style syntax, ending each set with a semicolon:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串文件的 内容由一组带引号的键/值对定义，采用C语言风格语法，每个集合以分号结尾：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, we can also provide comments to assist the job of the person
    that will translate the text, even if we do it ourselves.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们还可以提供注释以协助翻译文本的人的工作，即使我们自己翻译。
- en: The `NSLocale.PreferredLanguages` static property returns a string array of
    the user's preferred language identifiers. The first item in this array is the
    currently selected language. If the selected language is **English**, it will
    return `en`; if it is **Spanish**, it will return `es`, and so on.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`NSLocale.PreferredLanguages`静态属性返回一个包含用户首选语言标识符的字符串数组。这个数组中的第一个项目是当前选定的语言。如果选定的语言是**英语**，它将返回`en`；如果是**西班牙语**，它将返回`es`，依此类推。'
- en: 'The `NSBundle.PathForResource` method returns the path of the application bundle
    for the parameters we pass to it. We use this path to get the appropriate `NSBundle`
    instance, according to the selected language:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`NSBundle.PathForResource`方法返回我们传递给它的参数的应用程序包路径。我们使用这个路径来获取适当的`NSBundle`实例，根据选定的语言：'
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We then call the `LocalizedString` method to display the appropriate text:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们调用`LocalizedString`方法来显示适当的文本：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The first parameter's purpose is dual. It is not only the key to look for to
    return the translated text, but also the text that will be displayed in case the
    specified localization path is not found. The second parameter is the comment,
    or any instruction we want to give to the translator. It is not displayed and
    basically not used. We can pass `null` to this parameter and no error will occur.
    It is wise, however, to always include a comment or instruction, since it will
    help avoid confusion when translating multiple strings.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数的目的是双重的。它不仅是查找以返回翻译文本的关键，而且在指定的本地化路径未找到时，它还将显示为文本。第二个参数是注释，或者我们想要提供给翻译者的任何指令。它不会显示并且基本上不会被使用。我们可以传递`null`给这个参数，并且不会发生错误。然而，始终包含注释或指令是明智的，因为它将有助于在翻译多个字符串时避免混淆。
- en: There's more...
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: It is advisable to always provide keys that can act as the fallback text to
    be displayed in **English**, in case the language the user has selected is not
    included in our application.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 建议始终提供可以作为在**英语**中显示的回退文本的键，以防用户选定的语言不包括在我们的应用程序中。
- en: 'However, the `LocalizedString` method is overloaded. The second overload accepts
    three parameters. Consider the following example:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`LocalizedString`方法有多个重载。第二个重载接受三个参数。考虑以下示例：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The first parameter is the key to look for. The second parameter is the fallback
    value, in case the specified localization path is not found. The third parameter
    is the name of the file containing the strings, without the `.strings` extension.
    This overload is more helpful, and we can use different keys for our strings that
    will help us identify where that particular string is used in the code. For example,
    in this case, we could set the key in the strings file to `MainController.lblLocalizedOutput:`
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是查找的关键。第二个参数是回退值，以防指定的本地化路径未找到。第三个参数是包含字符串的文件的名称，不包括`.strings`扩展名。这个重载更有帮助，我们可以为我们的字符串使用不同的键，这有助于我们识别特定字符串在代码中的使用位置。例如，在这种情况下，我们可以在字符串文件中将键设置为`MainController.lblLocalizedOutput:`
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And use it in our code as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的代码中使用它如下：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This overload also helps us separate our strings into multiple `.strings` files,
    passing the corresponding file name as parameter #3.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这个重载还帮助我们将字符串分成多个`.strings`文件，通过将相应的文件名作为参数#3传递。
- en: The last overload contains four parameters. The first three are the same as
    the second overload. The fourth parameter is simply the comment we want the particular
    string to have.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个重载包含四个参数。前三个与第二个重载相同。第四个参数只是我们想要特定字符串拥有的注释。
- en: Localization in real-world application scenarios
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实际应用场景中的本地化
- en: In this example, we use the `PathForResource` method to get an instance of the
    current locale bundle. This is because the values returned from the `LocalizedString`
    method are cached. In real-world application scenarios, where the application
    would be downloaded in a specific language and the user would most likely never
    change the language of the device to use it, just calling `NSBundle.MainBundle.LocalizedString`
    would be enough.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用`PathForResource`方法获取当前区域设置包的实例。这是因为从`LocalizedString`方法返回的值被缓存了。在实际应用场景中，如果应用程序以特定语言下载，并且用户最有可能永远不会更改设备语言来使用它，只需调用`NSBundle.MainBundle.LocalizedString`就足够了。
- en: Localizable resources
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可本地化资源
- en: A localizable resource is content, such as images, sound files, and so on, which
    is specific to a locale. In this recipe, we will learn how to load and display
    resources, based on the user's localization preferences.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 可本地化资源是内容，例如图像、声音文件等，它针对特定区域。在本食谱中，我们将学习如何根据用户的本地化首选项加载和显示资源。
- en: Getting ready
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in MonoDevelop, and name it `LocalizableResourcesApp`.
    Add a label and a `UIImageView` on the view of `MainController.`
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在MonoDevelop中创建一个新的项目，并将其命名为`LocalizableResourcesApp`。在`MainController`的视图中添加一个标签和一个`UIImageView`。
- en: How to do it...
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Add two folders for **English** and **Spanish** locales to the project. Add
    one image in each folder, with the same filename. Set their **Build Action** to
    **Content**.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目中添加两个用于**英语**和**西班牙语**区域的文件夹。在每个文件夹中添加一个具有相同文件名的图像。将它们的**构建操作**设置为**内容**。
- en: 'Enter the following code in the `MainController` class:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainController`类中输入以下代码：
- en: '[PRE9]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Compile and run the application on the simulator with **English** language selected
    in the **settings** application. The result should be similar to the following
    screenshot:![How to do it...](img/1468EXP_13_01.jpg)
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模拟器上编译并运行应用程序，在**设置**应用程序中选择**英语**语言。结果应该类似于以下截图：![如何操作...](img/1468EXP_13_01.jpg)
- en: 'Now, set the simulator''s language to **Spanish**, and run the application
    again. The Spanish flag should be displayed instead:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将模拟器的语言设置为**西班牙语**，并再次运行应用程序。应该显示西班牙国旗：
- en: '![How to do it...](img/1468EXP_13_02.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/1468EXP_13_02.jpg)'
- en: How it works...
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `PathForResource` method automatically searches for the appropriate language
    folder and loads the resource specified through its arguments. In this example,
    we pass the method's result to the `UIImage.FromFile` method to load the image
    and assign it to the image view's `Image` property.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`PathForResource`方法会自动搜索适当的语言文件夹，并通过其参数加载指定的资源。在这个例子中，我们将方法的结果传递给`UIImage.FromFile`方法来加载图像，并将其分配给图像视图的`Image`属性。'
- en: There's more...
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Apart from images, we can use the `PathForResource` method to load videos, PDF
    files, and any other localizable resource we need.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 除了图像外，我们还可以使用`PathForResource`方法来加载视频、PDF文件以及任何其他需要本地化的资源。
- en: More info on localizable resources
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多关于可本地化资源的信息
- en: 'We need to make sure that the resource for the specific language folder exists.
    If it does not, an exception will occur. A way to avoid this is to add one universal
    image file in the project and use a `Localizable.strings` file inside each language
    folder containing the paths to the resources:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要确保特定语言的文件夹中的资源存在。如果不存在，将会抛出异常。避免这种情况的一种方法是，在项目中添加一个通用的图像文件，并在每个语言文件夹中添加一个`Localizable.strings`文件，其中包含资源的路径：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To load the appropriate flag, we load the image with the `LocalizedString`
    method:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了加载适当的国旗，我们使用`LocalizedString`方法加载图像：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This way, the image `image.jpg` is loaded if the corresponding language folder
    is not found.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，如果找不到相应的语言文件夹，将加载图像`image.jpg`。
- en: See also
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: 'In this chapter:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中：
- en: '*Creating an application for different languages*'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为不同语言创建应用程序*'
- en: Regional formatting
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区域格式化
- en: Regional formatting is how various information, such as currency, date and time,
    and so on, is displayed according to different regions of the world. In this recipe,
    we will discuss how to display formatted numbers and dates according to the user's
    regional formatting settings.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 区域格式化是指根据世界各地的不同区域显示各种信息，如货币、日期和时间等。在本食谱中，我们将讨论如何根据用户的区域格式设置显示格式化的数字和日期。
- en: Getting ready
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in MonoDevelop and name it `RegionalFormattingApp`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在MonoDevelop中创建一个新的项目，并将其命名为`RegionalFormattingApp`。
- en: How to do it...
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Add five labels on the view of `MainController`. Enter the following code in
    the `MainController` class:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainController`的视图中添加五个标签。在`MainController`类中输入以下代码：
- en: '[PRE12]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Compile and run the application on the simulator with regional formatting set
    to **United States and Spanish | Spain** under **Settings | General | International
    | Region Format**. The output with the two different regional formats will be
    something like in the following screenshots:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模拟器上编译并运行应用程序，将区域格式设置为**美国和西班牙 | 西班牙**，在**设置 | 通用 | 国际 | 区域格式**下。具有两种不同区域格式的输出将类似于以下截图：
- en: '![How to do it...](img/1468EXP_13_03.jpg)![How to do it...](img/1468EXP_13_04.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/1468EXP_13_03.jpg)![如何操作...](img/1468EXP_13_04.jpg)'
- en: How it works...
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To format dates, currencies, and numbers, we use standard .NET code. For date
    and time, the `DateTime.ToLongDateString` and `DateTime.ToLongTimeString` methods
    return the values according to the locale, respectively.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要格式化日期、货币和数字，我们使用标准的 .NET 代码。对于日期和时间，`DateTime.ToLongDateString` 和 `DateTime.ToLongTimeString`
    方法分别根据区域设置返回值。
- en: 'For currency and numbers, we use C# numerical strings:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 对于货币和数字，我们使用 C# 数值字符串：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: There's more...
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The `System.Globalization` namespace is supported in MonoTouch. To display
    the current locale, consider the following line of code:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`System.Globalization` 命名空间在 MonoTouch 中受支持。要显示当前区域设置，请考虑以下代码行：'
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note that there is one difference between this code and the `NSLocale.CurrentLocale.LocaleIdentifier`.
    The former uses a dash (-), while the latter uses an underscore (_) in the locale
    name.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，此代码与 `NSLocale.CurrentLocale.LocaleIdentifier` 之间有一个区别。前者使用破折号 (-)，而后者在区域名称中使用下划线
    (_)。
