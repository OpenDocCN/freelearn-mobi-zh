- en: Web Services with Kotlin
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Kotlin的Web服务
- en: 'The following recipes will be covered in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下食谱：
- en: How to run the application on Tomcat
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在Tomcat上运行应用程序
- en: Setting up dependencies for building RESTful services
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置构建RESTful服务的依赖项
- en: How to create a REST controller
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建REST控制器
- en: Creating the Application class for Spring boot
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Spring boot创建应用程序类
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Kotlin has been eating up the Java world. It has already become a hit in Android
    Ecosystem which was dominated by Java and is welcomed with open arms everywhere.
    Kotlin is not limited to Android development and can be used to develop server-side,
    client-side web applications. One of the `use` cases that we will address in this
    chapter is creating web-services using Kotlin. Kotlin is 100% compatible with
    the JVM and so you can use any existing frameworks such as Spring Boot, Vert.x,
    or JSF for writing Java applications.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin已经占据了Java世界。它已经成为Android生态系统中的热门，该生态系统曾由Java主导，并且到处都受到热烈欢迎。Kotlin不仅限于Android开发，还可以用于开发服务器端、客户端Web应用程序。在本章中，我们将解决的一个`use`案例是使用Kotlin创建Web服务。Kotlin与JVM
    100%兼容，因此你可以使用任何现有的框架，如Spring Boot、Vert.x或JSF来编写Java应用程序。
- en: How to run the application on Tomcat
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在Tomcat上运行应用程序
- en: In this recipe, we will learn how to install, configure, and run the application
    on Tomcat in IntelliJ IDEA.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将学习如何在IntelliJ IDEA中安装、配置和运行Tomcat上的应用程序。
- en: '**Apache Tomcat**, often referred to as Tomcat Server, is an open source Java
    Servlet Container developed by the Apache Software Foundation (ASF). Tomcat implements
    several Java EE specifications, including Java Servlet, JavaServer Pages (JSP),
    Java EL, and WebSocket, and provides a "pure Java" HTTP web server environment
    in which Java code can run.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**Apache Tomcat**，通常被称为Tomcat服务器，是由Apache软件基金会（ASF）开发的开源Java Servlet容器。Tomcat实现了多个Java
    EE规范，包括Java Servlet、JavaServer Pages（JSP）、Java EL和WebSocket，并提供了一个Java代码可以运行的“纯Java”HTTP
    Web服务器环境。'
- en: 'Source: Wikipedia'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：维基百科
- en: How to do it…
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Now, let''s follow the given steps to run the application on Tomcat:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们按照给定的步骤在Tomcat上运行应用程序：
- en: First, you need to download the Tomcat from [http://tomcat.apache.org/download-80.cgi](http://tomcat.apache.org/download-80.cgi).
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，你需要从[http://tomcat.apache.org/download-80.cgi](http://tomcat.apache.org/download-80.cgi)下载Tomcat。
- en: 'The downloaded file will be a compressed file, and you can extract it with:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载的文件将是一个压缩文件，你可以使用以下方法提取它：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, you need to move it from the downloaded folder to the proper location,
    at:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你需要将其从下载文件夹移动到正确的位置，在：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You also need to check whether you have JDK set up on your system. You can
    do that by typing in the following command:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还需要检查你的系统上是否已设置JDK。你可以通过输入以下命令来完成：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you see The program ''java'' can be found in the following packages:, it
    means you need to install JDK. You can do it with the following:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你看到“The program 'java' can be found in the following packages:”，这意味着你需要安装JDK。你可以使用以下方法完成：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After that, add the following lines to the end of the `.bashrc` file:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将以下行添加到`.bashrc`文件的末尾：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Simply save and exit `.bashrc`, and then make the changes effective by running
    the following command:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 简单保存并退出`.bashrc`，然后通过运行以下命令使更改生效：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Tomcat and Java should now be installed and configured on your server. To activate
    Tomcat, run the following script:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Tomcat和Java现在应该已安装并配置在您的服务器上。要激活Tomcat，请运行以下脚本：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You should get a result similar to the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下类似的结果：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Open `http://127.0.0.1:8080` to check if it's working.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`http://127.0.0.1:8080`以检查它是否正常工作。
- en: Now, you'll need IntelliJ IDEA's ultimate edition to be able to use Tomcat in
    IntelliJ; community edition doesn't provide support for Java EE application.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你需要IntelliJ IDEA的终极版才能在IntelliJ中使用Tomcat；社区版不提供对Java EE应用程序的支持。
- en: 'In order to run the application, we need the corresponding WAR(s) for deploying,
    which you can do just by adding the following lines in the terminal:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了运行应用程序，我们需要相应的WAR文件进行部署，你只需在终端中添加以下行即可完成：
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You need to go to Run | Edit configuration and add Tomcat:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要转到“运行”|“编辑配置”并添加Tomcat：
- en: '![](img/562221b9-414d-417f-902d-ec4116e12eff.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/562221b9-414d-417f-902d-ec4116e12eff.png)'
- en: Now if you move to your localhost server, you can see the application hosted
    there.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果你转到你的localhost服务器，你可以在那里看到托管的应用程序。
- en: For instructions on Windows installation of Tomcat, refer to [https://www.ntu.edu.sg/home/ehchua/programming/howto/Tomcat_HowTo.html](https://www.ntu.edu.sg/home/ehchua/programming/howto/Tomcat_HowTo.html).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Windows上Tomcat安装的说明，请参阅[https://www.ntu.edu.sg/home/ehchua/programming/howto/Tomcat_HowTo.html](https://www.ntu.edu.sg/home/ehchua/programming/howto/Tomcat_HowTo.html)。
- en: Setting up dependencies for building RESTful services
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为构建RESTful服务设置依赖项
- en: In this recipe, we will lay the foundation for developing the RESTful service.
    We will see how to set up dependencies and run our first SpringBoot web application.
    SpringBoot provides great support for Kotlin, which makes it easy to work with
    Kotlin. So let's get started.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将为开发RESTful服务打下基础。我们将了解如何设置依赖关系并运行我们的第一个SpringBoot Web应用程序。SpringBoot为Kotlin提供了极大的支持，这使得使用Kotlin变得容易。所以，让我们开始吧。
- en: Getting ready
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be using IntelliJ IDEA and Gradle build system. If you don't have that,
    you can get it from [https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用IntelliJ IDEA和Gradle构建系统。如果你没有这些，你可以从[https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)获取。
- en: How to do it…
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s follow the given steps to set up the dependencies for building RESTful
    services:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照给定的步骤来设置构建RESTful服务的依赖项：
- en: 'First, we will create a new project in IntelliJ IDE. We will be using the Gradle
    build system for maintaining dependency, so create a `Gradle` project:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将在IntelliJ IDE中创建一个新的项目。我们将使用Gradle构建系统来维护依赖项，因此创建一个`Gradle`项目：
- en: '![](img/bbf0f1fe-e506-4ab6-a92d-ea7ddb335373.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bbf0f1fe-e506-4ab6-a92d-ea7ddb335373.png)'
- en: 'When you have created the project, just add the following lines to your `build.gradle`
    file. These lines of code contain spring-boot dependencies that we will need to
    develop the web app:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你创建了项目后，只需将以下行添加到你的`build.gradle`文件中。这些代码行包含我们将需要来开发Web应用程序的Spring-boot依赖项：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s now create an `App.kt` file in the following directory hierarchy:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们在以下目录结构中创建一个`App.kt`文件：
- en: '![](img/7fcf4fc2-9412-4a69-8a28-938d4ed60ad7.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7fcf4fc2-9412-4a69-8a28-938d4ed60ad7.png)'
- en: 'It is important to keep the `App.kt` file in a package (we''ve used the `college`
    package). Otherwise, you will get an error that says the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要保持`App.kt`文件在一个包中（我们使用了`college`包）。否则，你将得到一个错误，如下所示：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The reason for this error is that if you don't include a package declaration,
    it considers it a "default package," which is discouraged and avoided.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 出现这个错误的原因是，如果你没有包含包声明，它将认为它是一个“默认包”，这是不推荐的，应该避免。
- en: 'Now, let''s try to run the `App.kt` class. We will put the following code to
    test if it''s running:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们尝试运行`App.kt`类。我们将放置以下代码来测试它是否正在运行：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now run the project; if everything goes well, you will see output with the
    following line at the end:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在运行项目；如果一切顺利，你将在最后看到以下行：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We now have our application running on our embedded Tomcat server. If you go
    to `http://localhost:8080`, you will see an error as follows:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在已经在我们的嵌入式Tomcat服务器上运行了我们的应用程序。如果你访问`http://localhost:8080`，你将看到一个如下所示的错误：
- en: '![](img/bd86b250-5fad-4cdc-9d99-b170c8afb2ef.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bd86b250-5fad-4cdc-9d99-b170c8afb2ef.png)'
- en: The preceding error is `404 error` and the reason for that is we haven't told
    our application to do anything when a user is on the `/` path.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前面的错误是`404错误`，原因是我们没有告诉应用程序当用户在`/`路径上时应该做什么。
- en: How to create a REST controller
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何创建REST控制器
- en: In the previous recipe, we learned how to set up dependencies for creating RESTful
    services. Finally, we launched our backend on the `http://localhost:8080` endpoint but
    got `404 error` as our application wasn't configured to handle requests at that
    path (`/`). We will start from that point and learn how to create a REST controller.
    Let's get started!
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的菜谱中，我们学习了如何为创建RESTful服务设置依赖项。最后，我们在`http://localhost:8080`端点上启动了我们的后端，但得到了`404错误`，因为我们的应用程序没有配置为处理该路径（`/`）的请求。我们将从这个点开始，学习如何创建REST控制器。让我们开始吧！
- en: Getting ready
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be using IntelliJ IDE for coding purposes. For setting up of the environment,
    refer to the previous recipe. You can also find the source in the repository at [https://gitlab.com/aanandshekharroy/kotlin-webservices](https://gitlab.com/aanandshekharroy/kotlin-webservices).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用IntelliJ IDE进行编码。关于环境的设置，请参考之前的菜谱。你还可以在[https://gitlab.com/aanandshekharroy/kotlin-webservices](https://gitlab.com/aanandshekharroy/kotlin-webservices)的仓库中找到源代码。
- en: How to do it…
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In this recipe, we will create a REST controller that will fetch us information
    about students in a college. We will be using an in-memory database using a list
    to keep things simple:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个REST控制器，它会为我们提供关于大学学生信息。我们将使用一个内存数据库，用列表来简化事物：
- en: 'Let''s first create a `Student` class having a name and roll number properties:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先创建一个具有姓名和学号属性的`Student`类：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, we will create the `StudentDatabase` endpoint, which will act as a database
    for the application:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建`StudentDatabase`端点，它将作为应用程序的数据库：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note that we have annotated the `StudentDatabase` class with `@Component`, which
    means its lifecycle will be controlled by Spring (because we want it to act as
    a database for our application).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们已经用`@Component`注解了`StudentDatabase`类，这意味着它的生命周期将由Spring控制（因为我们希望它充当我们应用程序的数据库）。
- en: 'We also need a `@PostConstruct` annotation, because it''s an in-memory database
    that is destroyed when the application closes. So we would like to have a filled
    database whenever the application launches. So we will create an `init` method,
    which will add a few items into the "database" at startup time:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要一个`@PostConstruct`注解，因为这是一个内存数据库，当应用程序关闭时会被销毁。因此，我们希望在应用程序启动时有一个填充的数据库。所以我们将创建一个`init`方法，在启动时将一些项目添加到“数据库”中：
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, we will create a few other methods that will help us deal with our database:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将创建一些其他方法，帮助我们处理数据库：
- en: '`getStudent`: Gets the list of students present in our database:'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getStudent`：获取我们数据库中现有学生的列表：'
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`addStudent`: This method will add a student to our database:'
  id: totrans-77
  prefs:
  - PREF_OL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addStudent`：这个方法将学生添加到我们的数据库中：'
- en: '[PRE17]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now let's put this database to use. We will be creating a REST controller that
    will handle the request. We will create a `StudentController` and annotate it
    with `@RestController`. Using `@RestController` is simple, and it's the preferred
    method for creating MVC RESTful web services.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们将这个数据库投入使用。我们将创建一个REST控制器来处理请求。我们将创建一个`StudentController`并使用`@RestController`注解。使用`@RestController`很简单，这是创建MVC
    RESTful Web服务的首选方法。
- en: 'Once created, we need to provide our database using Spring dependency injection,
    for which we will need the `@Autowired` annotation. Here''s how our `StudentController`
    looks:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦创建，我们需要通过Spring依赖注入提供我们的数据库，为此我们需要`@Autowired`注解。以下是我们的`StudentController`的样子：
- en: '[PRE18]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now we will set our response to the `/` path. We will show the list of students
    in our database. For that, we will simply create a method that lists out students.
    We will need to annotate it with `@RequestMapping` and provide parameters such
    as path and request method (GET, POST, and such):'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将设置响应到`/`路径。我们将显示数据库中的学生列表。为此，我们将简单地创建一个列出学生的方法。我们需要用`@RequestMapping`注解它，并提供路径和请求方法（GET、POST等）等参数：
- en: '[PRE19]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This is what our controller looks like now. It is a simple REST controller:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这就是我们现在控制器的样子。它是一个简单的REST控制器：
- en: '[PRE20]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now when you restart the server and go to `http://localhost:8080`, we will
    see the response as follows:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在当你重启服务器并访问`http://localhost:8080`时，我们将看到以下响应：
- en: '![](img/f417be77-a4ee-4c73-ae61-a89f24570f3f.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f417be77-a4ee-4c73-ae61-a89f24570f3f.png)'
- en: As you can see, Spring is intelligent enough to provide the response in the
    JSON format, which makes it easy to design APIs.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，Spring足够智能，能够以JSON格式提供响应，这使得设计API变得容易。
- en: 'Now let''s try to create another endpoint that will fetch a student''s details
    from a roll number:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们尝试创建另一个端点，它将根据学号获取学生的详细信息：
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, if you try the `http://localhost:8080/student/2013001` endpoint, you will
    see the given output:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果你尝试访问`http://localhost:8080/student/2013001`端点，你将看到以下输出：
- en: '[PRE22]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next, we will try to add a student to the database. We will be doing it via
    the `POST` method:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将尝试将学生添加到数据库中。我们将通过`POST`方法来完成：
- en: '[PRE23]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: There's more…
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多……
- en: 'So far, our server has been dependent on IDE. We would definitely want to make
    it independent of IDE. Thanks to Gradle, it is very easy to create a runnable
    JAR just with the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的服务器一直依赖于IDE。我们肯定希望让它独立于IDE。多亏了Gradle，只需以下步骤就可以轻松创建一个可运行的JAR：
- en: '[PRE24]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The preceding command is platform independent and uses the Gradle build system
    to build the application. Now, you just need to type the mentioned command to
    run it:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令是平台无关的，并使用Gradle构建系统构建应用程序。现在，你只需输入提到的命令来运行它：
- en: '[PRE25]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You can then see the following output as before:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像之前一样看到以下输出：
- en: '[PRE26]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This means your server is running successfully.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你的服务器正在成功运行。
- en: Creating the Application class for Spring Boot
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Spring Boot的应用程序类
- en: The `SpringApplication` class is used to bootstrap our application. We've used
    it in the previous recipes; we will see how to create the `Application` class
    for Spring Boot in this recipe.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`SpringApplication`类用于引导我们的应用程序。我们在之前的菜谱中使用了它；我们将在这个菜谱中看到如何为Spring Boot创建`Application`类。'
- en: Getting ready
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be using IntelliJ IDE for coding purposes. To set up the environment,
    read previous recipes, especially the *Setting up dependencies for building RESTful
    services* recipe.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用IntelliJ IDE进行编码。为了设置环境，请阅读之前的菜谱，特别是*设置构建RESTful服务的依赖项*菜谱。
- en: How to do it…
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: If you've used Spring Boot before, you must be familiar with using `@Configuration`,
    `@EnableAutoConfiguration`, and `@ComponentScan` in your main class. These were
    used so frequently that Spring Boot provides a convenient `@SpringBootApplication`
    alternative. The Spring Boot looks for the `public static main` method, and we
    will use a top-level function outside the `Application` class.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你之前使用过Spring Boot，你一定熟悉在主类中使用`@Configuration`、`@EnableAutoConfiguration`和`@ComponentScan`。这些被使用得如此频繁，以至于Spring
    Boot提供了一个方便的`@SpringBootApplication`替代方案。Spring Boot会查找`public static main`方法，我们将使用`Application`类外部的顶级函数。
- en: If you noted, while setting up the dependencies, we used the `kotlin-spring`
    plugin, hence we don't need to make the `Application` class open.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你注意到了，在设置依赖项时，我们使用了`kotlin-spring`插件，因此我们不需要将`Application`类设置为公开。
- en: 'Here''s an example of the Spring Boot application:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个Spring Boot应用程序的示例：
- en: '[PRE27]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The Spring Boot application executes the static `run()` method, which takes
    two parameters and starts a autoconfigured Tomcat web server when Spring application
    is started.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot应用程序执行静态的`run()`方法，它接受两个参数，并在Spring应用程序启动时启动一个自动配置的Tomcat网络服务器。
- en: 'When everything is set, you can start the application by executing the following
    command:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当一切设置完毕后，你可以通过执行以下命令来启动应用程序：
- en: '[PRE28]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'If everything goes well, you will see the following output in the console:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，你将在控制台看到以下输出：
- en: '>![](img/d852f79e-749c-48ab-9873-4996248437f0.png)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '>![](img/d852f79e-749c-48ab-9873-4996248437f0.png)'
- en: This is along with the last message—Started AppKt in xxx seconds. This means
    that your application is up and running.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这与最后一条消息一起——在xxx秒内启动了AppKt。这意味着你的应用程序已经启动并运行。
- en: 'In order to run it as an independent server, you need to create a JAR and then
    you can execute as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将其作为一个独立的服务器运行，你需要创建一个JAR文件，然后你可以按照以下方式执行：
- en: '[PRE29]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now, to run it, you just need to type the following command:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要运行它，你只需输入以下命令：
- en: '[PRE30]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
