- en: ARCore on Unity
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unity上的ARCore
- en: The next platform we will set up is Unity. Unity is a leading cross-platform
    game engine that is exceptionally easy to use for building game and graphic applications
    quickly. As such, it will be the platform we use when we build our final application
    in [Chapter 10](6a8f64fb-080f-47a2-9565-4099269831b1.xhtml), *Mixing in Mixed
    Reality*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要搭建的平台是Unity。Unity是一个领先的跨平台游戏引擎，它特别易于快速构建游戏和图形应用程序。因此，当我们[第10章](6a8f64fb-080f-47a2-9565-4099269831b1.xhtml)“混合现实中的混合”中构建最终应用程序时，它将成为我们使用的平台。
- en: Unity has developed something of a bad reputation in recent years due to its
    overuse in poor-quality games. It isn't because Unity can't produce high-quality
    games, it most certainly can. However, the ability to create games quickly often
    gets abused by developers seeking to release cheap games for profit.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，Unity因其被过度用于低质量游戏而获得了一些坏名声。这不是因为Unity不能制作高质量的游戏，它当然可以。然而，快速创建游戏的能力经常被开发者滥用，他们为了盈利而发布廉价游戏。
- en: 'In this chapter, we will learn how to install, build, and deploy Unity ARCore
    apps for Android. Then, we will set up for remote debugging and, finally, we will
    explore making some changes to the sample app. The following is a summary of the
    topics we will cover in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何为Android安装、构建和部署Unity ARCore应用程序。然后，我们将设置远程调试，最后我们将探索对示例应用程序进行一些修改。以下是本章我们将涵盖的主题摘要：
- en: Installing Unity and ARCore
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Unity和ARCore
- en: Building and deploying to Android
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建和部署到Android
- en: Remote debugging
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远程调试
- en: Exploring the code
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索代码
- en: We have already covered setting up the Android tools in [Chapter 2](c5c4b444-3342-457a-b756-266772b70d06.xhtml),
    *ARCore on Android*. If you omitted that chapter, you will need to go back and
    do the exercises in the first few sections before continuing. If you are an experienced
    Unity developer with an Android environment set up, you should still review this
    chapter as it may have some useful tips or settings.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在[第2章](c5c4b444-3342-457a-b756-266772b70d06.xhtml)“Android上的ARCore”中介绍了设置Android工具。如果您跳过了这一章，您需要回到前面几节去做练习，然后再继续。如果您是一个已经设置了Android环境的经验丰富的Unity开发者，您仍然应该阅读这一章，因为它可能包含一些有用的提示或设置。
- en: Installing Unity and ARCore
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Unity和ARCore
- en: 'Installing the Unity editor is relatively straightforward. However, the version
    of Unity we will be using may still be in beta. Therefore, it is important that
    you pay special attention to the following instructions when installing Unity:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Unity编辑器相对简单。然而，我们将使用的Unity版本可能仍在beta测试中。因此，在安装Unity时，您需要特别注意以下说明：
- en: Navigate a web browser to [https://unity3d.com/unity/beta](https://unity3d.com/unity/beta).
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用网络浏览器导航到[https://unity3d.com/unity/beta](https://unity3d.com/unity/beta)。
- en: At the time of writing, we will use the most recent beta version of Unity since
    ARCore is also still in beta preview. Be sure to note the version you are downloading
    and installing. This will help in the event you have issues working with ARCore.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，我们将使用Unity的最新beta版本，因为ARCore也仍在beta预览中。请务必注意您正在下载和安装的版本。如果您在使用ARCore时遇到问题，这将有所帮助。
- en: Click on the Download installer button. This will download `UnityDownloadAssistant`.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“下载安装程序”按钮。这将下载`UnityDownloadAssistant`。
- en: Launch `UnityDownloadAssistant`.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`UnityDownloadAssistant`。
- en: Click on Next and then agree to the Terms of Service. Click on **Next** again.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“下一步”，然后同意服务条款。再次点击**下一步**。
- en: 'Select the components, as shown:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择组件，如图所示：
- en: '![](img/6c872cf8-3dee-465f-8f9e-33f4e081d75f.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6c872cf8-3dee-465f-8f9e-33f4e081d75f.png)'
- en: Selecting the components to install
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 选择要安装的组件
- en: 'Install Unity in a folder that identifies the version, as follows:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Unity安装在可以识别版本的文件夹中，如下所示：
- en: '![](img/0a7e0c49-98b4-420e-9270-03e966f2465a.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0a7e0c49-98b4-420e-9270-03e966f2465a.png)'
- en: Setting the Unity installation path
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 设置Unity安装路径
- en: Click on Next to download and install Unity. This can take a while, so get up,
    move around, and grab a beverage.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“下一步”下载并安装Unity。这可能需要一些时间，所以请起身活动一下，喝点饮料。
- en: Click on the Finish button and ensure that Unity is set to launch automatically.
    Let Unity launch and leave the window open. We will get back to it shortly.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“完成”按钮，并确保Unity设置为自动启动。让Unity启动并保持窗口打开。我们很快就会回来。
- en: 'Once Unity is installed, we want to download the ARCore SDK for Unity. This
    will be easy now that we have Git installed. Follow the given instructions to
    install the SDK:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Unity安装完成后，我们希望下载Unity的ARCore SDK。由于我们已经安装了Git，现在这会变得容易。按照给定的说明安装SDK：
- en: Open a shell or Command Prompt.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个shell或命令提示符。
- en: 'Navigate to your `Android` folder. On Windows, use this:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的`Android`文件夹。在Windows上，使用以下路径：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Type and execute the following:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入并执行以下命令：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: After the `git` command completes, you will see a new folder called `arcore-unity-sdk`.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`git`命令完成后，您将看到一个名为`arcore-unity-sdk`的新文件夹。
- en: If this is your first time using Unity, you will need to go online to [https://unity3d.com/](https://unity3d.com/)
    and create a Unity user account. The Unity editor will require that you log in
    on first use and from time to time.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是您第一次使用Unity，您需要上网到[https://unity3d.com/](https://unity3d.com/)并创建一个Unity用户账户。Unity编辑器将要求您在首次使用和之后不时登录。
- en: 'Now that we have Unity and ARCore installed, it''s time to open the sample
    project by implementing the following steps:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了Unity和ARCore，是时候通过以下步骤打开示例项目了：
- en: If you closed the Unity window, launch the Unity editor. The path on Windows
    will be `C:\Unity 2017.3.0b8\Editor\Unity.exe`. Feel free to create a shortcut
    with the version number in order to make it easier to launch the specific Unity
    version later.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您关闭了Unity窗口，请启动Unity编辑器。在Windows上的路径将是`C:\Unity 2017.3.0b8\Editor\Unity.exe`。您可以创建一个带有版本号的快捷方式，以便稍后更容易启动特定的Unity版本。
- en: Switch to the Unity project window and click on the Open button.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Unity项目窗口，并点击打开按钮。
- en: 'Select the `Android/arcore-unity-sdk` folder. This is the folder we used the `git` command
    to install the SDK to earlier, as shown in the following dialog:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`Android/arcore-unity-sdk`文件夹。这是我们之前使用`git`命令安装SDK的文件夹，如下面的对话框所示：
- en: '![](img/73ee0401-034c-4218-8640-9184520dbbe3.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/73ee0401-034c-4218-8640-9184520dbbe3.png)'
- en: Opening the sample ARCore Unity project
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 打开示例ARCore Unity项目
- en: Click on the Select Folder button. This will launch the editor and load the
    project.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击选择文件夹按钮。这将启动编辑器并加载项目。
- en: 'Open the `Assets/GoogleARCore/HelloARExample/Scenes` folder in the Project
    window, as shown in the following excerpt:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目窗口中打开`Assets/GoogleARCore/HelloARExample/Scenes`文件夹，如图所示：
- en: '![](img/13f763bf-8f5e-4384-a1ef-85ee250b95b9.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/13f763bf-8f5e-4384-a1ef-85ee250b95b9.png)'
- en: Opening the scenes folder
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 打开场景文件夹
- en: Double-click on the HelloAR scene, as shown in the Project window and in the
    preceding screenshot. This will load our AR scene into Unity.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击HelloAR场景，如图所示在项目窗口和前面的截图。这将把我们的AR场景加载到Unity中。
- en: At any point, if you see red console or error messages in the bottom status
    bar, this likely means you have a version conflict. You will likely need to install
    a different version of Unity. Consult [Chapter 11](e7c0bdd1-e380-4498-af5a-fe9e627eb6cb.xhtml),* Performance
    Tips and Troubleshooting* for more help.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何时候，如果您在底部状态栏看到红色控制台或错误消息，这通常意味着您有一个版本冲突。您可能需要安装Unity的不同版本。有关更多帮助，请参阅[第11章](e7c0bdd1-e380-4498-af5a-fe9e627eb6cb.xhtml)，*性能提示和故障排除*。
- en: Now that we have Unity and ARCore installed, we will build the project and deploy
    the app to an Android device in the next section.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了Unity和ARCore，我们将在下一节构建项目并将应用部署到Android设备。
- en: Building and deploying to Android
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Android上构建和部署
- en: 'With most Unity development, we could just run our scene in the editor for
    testing. Unfortunately, when developing ARCore applications, we need to deploy
    the app to a device for testing. Fortunately, the project we are opening should
    already be configured for the most part. So, let''s get started by following the
    steps in the next exercise:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数Unity开发中，我们只需在编辑器中运行场景进行测试。不幸的是，当开发ARCore应用程序时，我们需要将应用部署到设备进行测试。幸运的是，我们正在打开的项目应该已经大部分配置好了。所以，让我们按照下一个练习中的步骤开始吧：
- en: Open up the Unity editor to the sample ARCore project and open the HelloAR scene.
    If you left Unity open from the last exercise, just ignore this step.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Unity编辑器到示例ARCore项目，并打开HelloAR场景。如果您在上一个练习中留下了Unity打开，请忽略此步骤。
- en: Connect your device via USB.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过USB连接您的设备。
- en: 'From the menu, select File | Build Settings. Confirm that the settings match
    the following dialog:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从菜单中选择文件 | 构建设置。确认设置与以下对话框匹配：
- en: '![](img/aac2543a-3ea2-4f06-a6f0-ecdcc85f437e.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/aac2543a-3ea2-4f06-a6f0-ecdcc85f437e.png)'
- en: Build settings dialog
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 构建设置对话框
- en: Confirm that the HelloAR scene is added to the build. If the scene is missing,
    click on the Add Open Scenes button to add it.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认HelloAR场景已添加到构建中。如果场景缺失，请点击添加打开场景按钮将其添加。
- en: Click on Build and Run. Be patient, first-time builds can take a while.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击构建和运行。请耐心等待，首次构建可能需要一些时间。
- en: After the app gets pushed to the device, feel free to test it, as you did with
    the Android version.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用被推送到设备后，您可以自由地测试它，就像您测试Android版本时那样。
- en: Great! Now we have a Unity version of the sample ARCore project running. In
    the next section, we will look at remotely debugging our app.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！现在我们有一个Unity版本的示例ARCore项目正在运行。在下一节中，我们将探讨如何远程调试我们的应用。
- en: Remote debugging
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 远程调试
- en: 'Having to connect a USB all the time to push an app is inconvenient. Not to
    mention that, if we wanted to do any debugging, we would need to maintain a physical
    USB connection to our development machine at all times. Fortunately, there is
    a way to connect our Android device via Wi-Fi to our development machine. Use
    the following steps to establish a Wi-Fi connection:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 每次都要连接USB来推送应用是不方便的。更不用说，如果我们想进行任何调试，我们就需要始终维护与我们的开发机器的物理USB连接。幸运的是，有一种方法可以通过Wi-Fi将我们的Android设备连接到我们的开发机器。使用以下步骤建立Wi-Fi连接：
- en: Ensure that a device is connected via USB.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保设备通过USB连接。
- en: Open Command Prompt or shell.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符或shell。
- en: On Windows, we will add `C:\Android\sdk\platform-tools` to the path just for
    the prompt we are working on. It is recommended that you add this path to your
    environment variables. Google it if you are unsure of what this means.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，我们将只为我们在工作的提示符添加`C:\Android\sdk\platform-tools`到路径。建议您将此路径添加到您的环境变量中。如果您不确定这是什么意思，请谷歌搜索。
- en: 'Enter the following commands:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令：
- en: '[PRE2]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If it worked, you will see `restarting in TCP mode port: 5555`. If you encounter
    an error, disconnect and reconnect the device.'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果成功了，您将看到`重新启动TCP模式端口：5555`。如果您遇到错误，请断开连接并重新连接设备。
- en: Disconnect your device.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 断开您的设备。
- en: 'Locate the IP address of your device by doing as follows:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下步骤查找您的设备IP地址：
- en: Open your phone and go to Settings and then About phone.
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的手机并转到设置，然后是关于手机。
- en: Tap on Status**. **Note down the IP address.
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击状态**。**注意记录IP地址。
- en: 'Go back to your shell or Command Prompt and enter the following:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回您的shell或命令提示符并输入以下内容：
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Ensure that you use the IP Address you wrote down from your device.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您使用从您的设备记下的IP地址。
- en: You should see `connected to [IP Address]:5555`. If you encounter a problem,
    just run through the steps again.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到`连接到[IP地址]:5555`。如果您遇到问题，只需再次运行这些步骤。
- en: Testing the connection
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试连接
- en: 'Now that we have a remote connection to our device, we should test it to ensure
    that it works. Let''s test our connection by doing the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经与我们的设备建立了远程连接，我们应该测试它以确保它正常工作。让我们通过以下步骤来测试我们的连接：
- en: Open up Unity to the sample AR project.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Unity到示例AR项目。
- en: 'Expand the Canvas object in the Hierarchy window until you see the SearchingText
    object and select it, just as shown in the following excerpt:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构窗口中展开Canvas对象，直到您看到SearchingText对象并选择它，就像以下摘录中所示：
- en: '![](img/d741b850-b1e4-48ae-a454-683a3e60f474.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d741b850-b1e4-48ae-a454-683a3e60f474.png)'
- en: Hierarchy window showing the selected SearchingText object
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 展示已选择SearchingText对象的层次结构窗口
- en: Direct your attention to the Inspector window, on the right-hand side by default.
    Scroll down in the window until you see the text `"Searching for surfaces…"`.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的注意力转向默认位于右侧的检查器窗口。在窗口中向下滚动，直到您看到文本`“正在搜索表面…”`。
- en: Modify the text to read `"Searching for ARCore surfaces…"`, just as we did in
    the last chapter for Android.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文本修改为`“正在搜索ARCore表面…”`，就像我们在上一章中为Android所做的。
- en: From the menu, select File | Build and Run.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从菜单中选择文件 | 构建和运行。
- en: Open your device and test your app.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的设备并测试您的应用。
- en: Remotely debugging a running app
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 远程调试运行中的应用程序
- en: 'Now, building and pushing an app to your device this way will take longer,
    but it is far more convenient. Next, let''s look at how we can debug a running
    app remotely by performing the following steps:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过这种方式构建和推送应用到您的设备将花费更长的时间，但这种方式要方便得多。接下来，让我们看看我们如何可以通过以下步骤远程调试运行中的应用程序：
- en: Go back to your shell or Command Prompt.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回您的shell或命令提示符。
- en: 'Enter the following command:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令：
- en: '[PRE4]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You will see a stream of logs covering the screen, which is not something very
    useful.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到覆盖屏幕的日志流，这不是非常有用的事情。
- en: Enter *Ctrl* + *C* (*command* + *C* on Mac) to kill the process.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Ctrl* + *C* (*command* + *C* 在Mac上)来终止进程。
- en: 'Enter the following command:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令：
- en: '[PRE5]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will open Android Device Monitor. You should see your device on the list
    to the left. Ensure that you select it. You will see the log output start streaming
    in the **LogCat** window. Drag the LogCat window so that it is a tab in the main
    window, as illustrated:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将打开Android设备监控器。您应该在左侧的列表中看到您的设备。确保您选择它。您将在**LogCat**窗口中看到日志输出开始流式传输。将LogCat窗口拖动到主窗口中的一个标签页，如图所示：
- en: '![](img/35d81f86-82a5-4b7f-aa78-f4fe1aa967bc.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/35d81f86-82a5-4b7f-aa78-f4fe1aa967bc.png)'
- en: Android Device Monitor showing the LogCat window
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 显示 LogCat 窗口的 Android 设备监控器
- en: Leave the Android Device Monitor window open and running. We will come back
    to it later.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持 Android 设备监控器窗口打开并运行。我们稍后会回来。
- en: Now we can build, deploy, and debug remotely. This will give us plenty of flexibility
    later when we want to become more mobile. Of course, the remote connection we
    put in place with `adb` will also work with Android Studio. Yet, we still are
    not actually tracking any log output. We will output some log messages in the
    next section.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以远程构建、部署和调试。这将给我们提供足够的灵活性，以便我们想要变得更加移动。当然，我们通过 `adb` 设置的远程连接也将与 Android
    Studio 一起工作。然而，我们实际上还没有跟踪任何日志输出。我们将在下一节输出一些日志消息。
- en: Exploring the code
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索代码
- en: 'Unlike Android, we were able to easily modify our Unity app right in the editor
    without writing code. In fact, given the right Unity extensions, you can make
    a working game in Unity without any code. However, for us, we want to get into
    the nitty-gritty details of ARCore, and that will require writing some code. Jump
    back to the Unity editor, and let''s look at how we can modify some code by implementing
    the following exercise:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Android 不同，我们能够轻松地在编辑器中修改我们的 Unity 应用，而无需编写代码。实际上，给定正确的 Unity 扩展，你可以在 Unity
    中不写任何代码就制作出可工作的游戏。然而，对于我们来说，我们想要深入了解 ARCore 的细节，这需要编写一些代码。回到 Unity 编辑器，让我们看看我们如何通过实现以下练习来修改一些代码：
- en: From the Hierarchy window, select the ExampleController object. This will pull
    up the object in the Inspector window.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从层次窗口中选择 ExampleController 对象。这将使对象在检查器窗口中显示出来。
- en: 'Select the Gear icon beside Hello AR Controller (Script) and from the context
    menu, select Edit Script, as in the following excerpt:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Hello AR Controller (Script) 旁边的齿轮图标上选择，然后从上下文菜单中选择编辑脚本，如下面的摘录所示：
- en: '![](img/a9df4631-92ce-4a17-8b8d-e6457f9c3885.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a9df4631-92ce-4a17-8b8d-e6457f9c3885.png)'
- en: Editing a script in Unity
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Unity 中编辑脚本
- en: This will open your script editor and load the script, by default, `MonoDevelop`.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将打开你的脚本编辑器并加载脚本，默认情况下，`MonoDevelop`。
- en: Unity supports a number of **Integrated Development Environments** (**IDE**s)
    for writing C# scripts. Some popular options are Visual Studio 2015-2017 (Windows),
    VS Code (All), JetBrains Rider (Mac), and even Notepad++(All). Do yourself a favor
    and try one of the options listed for your OS.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 支持许多用于编写 C# 脚本的集成开发环境（IDE）。一些流行的选项是 Visual Studio 2015-2017（Windows）、VS
    Code（所有）、JetBrains Rider（Mac）以及甚至 Notepad++（所有）。为了自己好，尝试为你操作系统列出的选项之一。
- en: 'Scroll down in the script until you see the following block of code:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在脚本中向下滚动，直到你看到以下代码块：
- en: '[PRE6]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After the `_QuitOnConnectionErrors();` line of code, add the following code:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `_QuitOnConnectionErrors();` 代码行之后，添加以下代码：
- en: '[PRE7]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Save the file and then go back to Unity. Unity will automatically recompile
    the file. If you made any errors, you will see red error messages in the status
    bar or console.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件，然后返回 Unity。Unity 将自动重新编译文件。如果你犯了任何错误，你将在状态栏或控制台看到红色错误消息。
- en: From the menu, select File | Build and Run. As long as your device is still
    connected via TCP/IP, this will work. If your connection broke, just go back to
    the previous section and reset it.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从菜单中选择文件 | 构建和运行。只要你的设备仍然通过 TCP/IP 连接，这将有效。如果你的连接中断，只需回到上一节并重置它。
- en: Run the app on the device.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备上运行应用程序。
- en: Direct your attention to Android Device Monitor and see whether you can spot
    those log messages.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将注意力转向 Android 设备监控器，看看你是否能找到那些日志消息。
- en: Unity Update method
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unity 更新方法
- en: 'The Unity `Update` method is a special method that runs before/during a frame
    update or render. For your typical game running at 60 frames per second, this
    means that the `Update` method will be called 60 times per second as well, so
    you should be seeing lots of messages tagged as Unity. You can filter these messages
    by doing the following:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 的 `Update` 方法是一个在帧更新或渲染之前/期间运行的特殊方法。对于你典型的每秒 60 帧的游戏，这意味着 `Update` 方法将每秒被调用
    60 次，所以你应该会看到很多标记为 Unity 的消息。你可以通过以下方式过滤这些消息：
- en: Jump to the Android Device Monitor window.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 跳转到 Android 设备监控器窗口。
- en: 'Click on the green plus button in the Saved Filters panel, as shown in the
    following excerpt:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在已保存的过滤器面板中单击绿色加号按钮，如下面的摘录所示：
- en: '![](img/bff2dc8d-253a-4451-bdb3-b5d399d409bd.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bff2dc8d-253a-4451-bdb3-b5d399d409bd.png)'
- en: Adding a new tag filter
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 添加新的标签过滤器
- en: Create a new filter by entering a Filter Name (use `Unity`) and by Log Tag (use
    `Unity`), as shown in the preceding screenshot.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入过滤器名称（使用 `Unity`）和日志标签（使用 `Unity`），创建一个新的过滤器，如前一张截图所示。
- en: Click on OK to add the filter.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 确定以添加过滤器。
- en: Select the new `Unity` filter. You will now see a list of filtered messages
    specific to Unity platform when the app is running on the device. If you are not
    seeing any messages, check your connection and try to rebuild. Ensure that you
    saved your edited code file in `MonoDevelop` as well.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择新的 `Unity` 过滤器。当应用在设备上运行时，您将看到针对 Unity 平台特定过滤的消息列表。如果您没有看到任何消息，请检查您的连接并尝试重新构建。确保您已在
    `MonoDevelop` 中保存了您编辑的代码文件。
- en: Good job. We now have a working Unity set up with remote build and debug support,
    which will certainly make our job easier going forward. Now that you have everything
    set up, go back to Unity platform and get more familiar with the interface. Try
    not to change any settings as we will use the sample project as our base in later
    chapters.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好。我们现在有一个带有远程构建和调试支持的正常工作的 Unity 设置，这无疑将使我们的工作更加容易。现在您已经设置好了一切，回到 Unity 平台并熟悉界面。尽量不要更改任何设置，因为我们将在后面的章节中使用示例项目作为我们的基础。
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we set up a new platform for our ARCore development, called
    Unity. Unity, as we learned, is a leading, powerful, flexible, and simple game/graphic
    engine we will use extensively in later chapters. For now though, we installed
    Unity and the ARCore SDK for Unity. We then took a slight diversion by setting
    up a remote build and debug connection to our device using TCP/IP over Wi-Fi.
    Next, we tested out our ability to modify the C# script in Unity by adding some
    debug log output. Finally, we tested our code changes using the Android Device
    Monitor tool to filter and track log messages from the Unity app deployed to the
    device.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们为我们的 ARCore 开发设置了一个新的平台，称为 Unity。正如我们所学的，Unity 是一个领先、强大、灵活且简单的游戏/图形引擎，我们将在后面的章节中广泛使用它。然而，我们现在安装了
    Unity 和 ARCore SDK for Unity。然后，我们通过设置使用 TCP/IP 通过 Wi-Fi 到设备的远程构建和调试连接进行了一点点偏离。接下来，我们通过添加一些调试日志输出测试了我们在
    Unity 中修改 C# 脚本的能力。最后，我们使用 Android 设备监控工具测试了我们的代码更改，以过滤和跟踪部署到设备上的 Unity 应用程序的日志消息。
- en: We will continue to grind away in the next chapter and set up our environment
    for web ARCore development. Web ARCore development is substantially different
    from Android and Unity. However, we will still cover some essential setup for
    components we will use in [Chapter 10](6a8f64fb-080f-47a2-9565-4099269831b1.xhtml),
    *Mixing in Mixed Reality*, so don't feel you can bypass the next chapter, even
    if you are not doing web development.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章继续努力，为我们的 Web ARCore 开发设置环境。Web ARCore 开发与 Android 和 Unity 实际上有很大不同。然而，我们仍将涵盖一些我们将用于
    [第 10 章](6a8f64fb-080f-47a2-9565-4099269831b1.xhtml)，*混合现实中的混合* 的基本设置，所以即使您不做
    Web 开发，也不要跳过下一章。
