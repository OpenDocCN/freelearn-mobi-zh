- en: '*Chapter 7*: Building Data Sources'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 7 章*：构建数据源'
- en: In this chapter, we will continue focusing on the data layer by discussing how
    we can implement local and remote data sources and the roles they play in clean
    architecture. First, we will look at how remote data sources can be built and
    how they can fetch data from the internet through calls to Retrofit. Then, we
    will look at implementing local data sources and how they can interact with Room
    and Data Store to persist data locally. In the chapter's exercises, we will continue
    the previous exercises and add the data sources discussed in the chapter, seeing
    how we can connect them to Room and Retrofit.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将继续关注数据层，通过讨论如何实现本地和远程数据源以及它们在整洁架构中的作用来继续关注数据层。首先，我们将探讨如何构建远程数据源以及它们如何通过调用
    Retrofit 从互联网获取数据。然后，我们将探讨实现本地数据源以及它们如何与 Room 和 Data Store 交互以在本地持久化数据。在章节的练习中，我们将继续之前的练习，并添加章节中讨论的数据源，看看我们如何将它们连接到
    Room 和 Retrofit。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Building and using remote data sources
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建和使用远程数据源
- en: Building and integrating local data sources
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建和集成本地数据源
- en: By the end of the chapter, you will have learned the role of data sources, how
    to implement remote and local data sources that use Retrofit, Room, and Data Store
    to manage an application's data, and how we can separate these data sources in
    separate library modules.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将了解数据源的作用，如何实现使用 Retrofit、Room 和 Data Store 管理应用程序数据的远程和本地数据源，以及我们如何将这些数据源分离到单独的库模块中。
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The hardware and software requirements are as follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 硬件和软件要求如下：
- en: Android Studio – Arctic Fox | 2020.3.1 Patch 3
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android Studio – Arctic Fox | 2020.3.1 Patch 3
- en: 'The code files for this chapter can be found here: [https://github.com/PacktPublishing/Clean-Android-Architecture/tree/main/Chapter7](https://github.com/PacktPublishing/Clean-Android-Architecture/tree/main/Chapter7).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在此处找到：[https://github.com/PacktPublishing/Clean-Android-Architecture/tree/main/Chapter7](https://github.com/PacktPublishing/Clean-Android-Architecture/tree/main/Chapter7).
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/3yOa7jE](https://bit.ly/3yOa7jE)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际应用：[https://bit.ly/3yOa7jE](https://bit.ly/3yOa7jE)
- en: Building and using remote data sources
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建和使用远程数据源
- en: In this section, we will look at how we can build remote data sources and how
    we can use them in combination with Retrofit to fetch and manipulate data from
    the internet.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何构建远程数据源以及如何结合 Retrofit 使用它们从互联网获取和操作数据。
- en: 'In the previous chapters, we defined abstractions for data sources that repositories
    depend on to manipulate data. This was because we wanted to avoid the repositories
    having dependencies on the data sources and instead have the data sources depend
    on the repositories. For remote data sources, this looks something like the following
    figure:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们为数据源定义了抽象，这些数据源是存储库依赖以操作数据。这是因为我们想要避免存储库对数据源的依赖，而是让数据源依赖于存储库。对于远程数据源，这看起来像以下图示：
- en: '![Figure 7.1 – A remote data source class diagram'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.1 – 远程数据源类图'
- en: '](img/Figure_7.01_B18320.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.01_B18320.jpg)'
- en: Figure 7.1 – A remote data source class diagram
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – 远程数据源类图
- en: The implementation of the remote data source has two roles. It will invoke the
    networking layer to fetch and manipulate data, and it will convert the data to
    either the domain entity or, if necessary, intermediary data required by the repository.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 远程数据源的实现有两个角色。它将调用网络层来获取和操作数据，并将数据转换为领域实体或，如果需要，存储库所需的中介数据。
- en: 'Let''s look at the entity defined in the previous chapters:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看前几章中定义的实体：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here, we have the same `User` data class that was defined as part of the domain.
    Now let''s assume we are fetching the following data from the internet in JSON
    format:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们有与领域定义相同的 `User` 数据类。现在让我们假设我们从互联网以 JSON 格式获取以下数据：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, we have a `UserApiModel` class in which we define the same fields as the
    `User` class and annotate them with the `@Json` annotation, which is part of the
    Moshi library.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有一个 `UserApiModel` 类，其中我们定义了与 `User` 类相同的字段，并使用 Moshi 库的 `@Json` 注解进行注解。
- en: 'The remote data source abstraction looks like the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 远程数据源抽象看起来如下：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This is the abstraction we defined in the previous chapter. Before we write
    the implementation of this class, we will first need to specify our Retrofit service:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在上一章中定义的抽象。在我们编写此类的实现之前，我们首先需要指定我们的 Retrofit 服务：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is a typical Retrofit service class, which will fetch an `UserApiModel`
    class from the `/users/{userId}` endpoint. We can now create the implementation
    of the data source to fetch the user from `UserService`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个典型的 Retrofit 服务类，它将从 `/users/{userId}` 端点获取 `UserApiModel` 类。我们现在可以创建数据源实现来从
    `UserService` 获取用户：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, we implement the `UserRemoteDataSource` interface, and in the `getUser`
    method, we invoke the `getUser` method from the `UserService` dependency. Once
    `UserApiModel` is obtained, we then convert it to the `User` class.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们实现了 `UserRemoteDataSource` 接口，并在 `getUser` 方法中调用 `UserService` 依赖项中的 `getUser`
    方法。一旦获得 `UserApiModel`，我们将其转换为 `User` 类。
- en: In this section, we looked at how we can build a remote data source with the
    help of the Retrofit library to manipulate data from the internet. In the section
    that follows, we will look at an exercise that shows how we can implement a remote
    data source.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了如何使用 Retrofit 库构建远程数据源来操作来自互联网的数据。在下一节中，我们将查看一个练习，展示如何实现远程数据源。
- en: Exercise 07.01 – Building a remote data source
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 07.01 – 构建远程数据源
- en: Modify *Exercise 06.01 – Creating repositories* so that a new library module
    is created in Android Studio. Name the module `data-remote`. This module will
    depend on `domain` and `data-repository`. The module will be responsible for fetching
    users and posts as JSON from [https://jsonplaceholder.typicode.com/](https://jsonplaceholder.typicode.com/).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 修改 *练习 06.01 – 创建仓库*，以便在 Android Studio 中创建一个新的库模块。模块名称为 `data-remote`。此模块将依赖于
    `domain` 和 `data-repository`。该模块将负责从 [https://jsonplaceholder.typicode.com/](https://jsonplaceholder.typicode.com/)
    获取用户和帖子作为 JSON。
- en: 'The user will have the following JSON representation:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 用户将具有以下 JSON 表示形式：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The post will have the following JSON representation:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 帖子将具有以下 JSON 表示形式：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The module will need to implement the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块需要实现以下功能：
- en: '`UserApiModel` and `PostApiModel`, which will hold the data from the JSON.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UserApiModel` 和 `PostApiModel`，它们将保存来自 JSON 的数据。'
- en: '`UserService`, which will return a list of `UserApiModel` from the `/users`
    URL and `UserApiModel` based on the ID from the `/users/{userId}` URL.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UserService`，它将从 `/users` URL 返回 `UserApiModel` 列表，并根据 `/users/{userId}` URL
    的 ID 返回 `UserApiModel`。'
- en: '`PostService`, which will return a list of `PostApiModel` from the `/posts`
    URL and `PostApiModel` based on the ID from the `/post/{postId}` URL.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PostService`，它将从 `/posts` URL 返回 `PostApiModel` 列表，并根据 `/post/{postId}` URL
    的 ID 返回 `PostApiModel`。'
- en: '`RemoteUserDataSourceImpl`, which will implement `RemoteUserDataSource`, call
    `UserService`, and return `Flow`, which emits a list of `User` objects or `UseCaseException.UserException`
    if there is an error in the call to `UserService`. The same approach will be taken
    for returning `User` based on the ID.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RemoteUserDataSourceImpl`，它将实现 `RemoteUserDataSource`，调用 `UserService`，并返回
    `Flow`，如果调用 `UserService` 时出现错误，则发出 `User` 对象列表或 `UseCaseException.UserException`。基于
    ID 返回 `User` 的相同方法也将被采用。'
- en: '`RemotePostDataSourceImpl` which will implement `RemotePostDataSource`, call
    `PostService`, and return `Flow`, which emits a list of `Post` objects or `UseCaseException.PostException`
    if there is an error in the call to `PostService`. The same approach will be taken
    for returning a post based on the ID.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RemotePostDataSourceImpl` 将实现 `RemotePostDataSource`，调用 `PostService`，并返回
    `Flow`，如果调用 `PostService` 时出现错误，则发出 `Post` 对象列表或 `UseCaseException.PostException`。基于
    ID 返回帖子的相同方法也将被采用。'
- en: 'To complete this exercise, you will need to do the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此练习，您需要执行以下操作：
- en: Create the `data-remote` module.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `data-remote` 模块。
- en: Create the `UserApiModel` and `UserService` classes.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `UserApiModel` 和 `UserService` 类。
- en: Create the `PostApiModel` and `PostService` classes.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `PostApiModel` 和 `PostService` 类。
- en: Create the remote data sources implementations for `RemoteUserDataSource` and
    `RemotePostDataSource`.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 `RemoteUserDataSource` 和 `RemotePostDataSource` 创建远程数据源实现。
- en: 'Follow these steps to complete the exercise:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤完成练习：
- en: Create a new module named `data-remote`, which will be an Android library module.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `data-remote` 的新模块，它将是一个 Android 库模块。
- en: 'Make sure that in the top-level `build.gradle` file, the following dependencies
    are set:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在顶级 `build.gradle` 文件中设置了以下依赖项：
- en: '[PRE7]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the same file, add the networking libraries to the library mappings:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一文件中，将网络库添加到库映射中：
- en: '[PRE8]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the `build.gradle` file of the `data-remote` module, make sure that the
    following plugins are present:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `data-remote` 模块的 `build.gradle` 文件中，确保存在以下插件：
- en: '[PRE9]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the same file, change the configurations to the ones defined in the top-level
    `build.gradle` file:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一文件中，将配置更改为顶级 `build.gradle` 文件中定义的配置：
- en: '[PRE10]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, we are making sure that the new module will use the same configurations
    with regards to compilation and the minimum and maximum Android version as the
    rest of the project, making it easier to change the configuration across all the
    modules.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们确保新的模块将使用与项目其余部分相同的配置，包括编译和最小/最大 Android 版本，以便更容易地在所有模块之间更改配置。
- en: 'In the same file, add the dependencies to the networking libraries and the
    `data-repository` and `domain` modules:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一文件中，添加对网络库和 `data-repository` 以及 `domain` 模块的依赖项：
- en: '[PRE11]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the top-level `gradle.properties`, add the following configuration for `moshi`:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在顶级 `gradle.properties` 文件中，为 `moshi` 添加以下配置：
- en: '[PRE12]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the `AndroidManifest.xml` file in the `data-remote` module, add the internet
    permission:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `data-remote` 模块的 `AndroidManifest.xml` 文件中，添加互联网权限：
- en: '[PRE13]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the `data-remote` module, create a new package called `networking`.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `data-remote` 模块中，创建一个名为 `networking` 的新包。
- en: In the `networking` package, create a new package called `user`.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `networking` 包中，创建一个名为 `user` 的新包。
- en: 'In the `user` package, create a new class called `UserApiModel`:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `user` 包中，创建一个名为 `UserApiModel` 的新类：
- en: '[PRE14]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the same package, create a new interface called `UserService`:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一包中，创建一个名为 `UserService` 的新接口：
- en: '[PRE15]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the `networking` package, create a new package called `post`.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `networking` 包中，创建一个名为 `post` 的新包。
- en: 'In the `post` package, create a new class called `PostApiModel`:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `post` 包中，创建一个名为 `PostApiModel` 的新类：
- en: '[PRE16]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the same package, create a new interface called `PostService`:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一包中，创建一个名为 `PostService` 的新接口：
- en: '[PRE17]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In the `data-remote` module, create a new package called `source`.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `data-remote` 模块中，创建一个名为 `source` 的新包。
- en: 'In the `source` package, create a new class called `RemoteUserDataSourceImpl`:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `source` 包中，创建一个名为 `RemoteUserDataSourceImpl` 的新类：
- en: '[PRE18]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here, we invoke the `getUsers` and `getUser` methods from `UserService` and
    then convert the `UserApiModel` objects to `User` objects to avoid the other layers
    depending on the networking-related data. The same principle applies to error
    handling. If there is a network error, such as an `HTTP 404` code, the exception
    will be `HttpException`, which is part of the Retrofit library.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们调用 `UserService` 中的 `getUsers` 和 `getUser` 方法，然后将 `UserApiModel` 对象转换为
    `User` 对象，以避免其他层依赖于与网络相关的数据。同样的原则也适用于错误处理。如果发生网络错误，例如 `HTTP 404` 状态码，异常将是 `HttpException`，它是
    Retrofit 库的一部分。
- en: 'In the `source` package, create a new class called `RemotePostDataSourceImpl`:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `source` 包中，创建一个名为 `RemotePostDataSourceImpl` 的新类：
- en: '[PRE19]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Here, we follow the same principle as with the `RemoteUserDataSourceImpl` class.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们遵循与 `RemoteUserDataSourceImpl` 类相同的原理。
- en: 'In the `data-remote` module, create a new package called `injection`:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `data-remote` 模块中，创建一个名为 `injection` 的新包。
- en: 'In the `injection` package, create a new class called `NetworkModule`:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `injection` 包中，创建一个名为 `NetworkModule` 的新类：
- en: '[PRE20]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here, we provide the Retrofit and `OkHttp` dependencies required for networking.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们提供了网络所需的 Retrofit 和 `OkHttp` 依赖项。
- en: 'In the `injection` package, create a class named `RemoteDataSourceModule`:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `injection` 包中，创建一个名为 `RemoteDataSourceModule` 的类：
- en: '[PRE21]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Here, we use Hilt to bind the implementations from this module with the abstractions
    defined in the `data-repository` module.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们使用 Hilt 将此模块中的实现与 `data-repository` 模块中定义的抽象绑定。
- en: To unit-test the code, we now need to create a new folder called `resources`
    in the `test` folder of the `data-remote` module.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了单元测试代码，我们现在需要在 `data-remote` 模块的 `test` 文件夹中创建一个名为 `resources` 的新文件夹。
- en: Inside the `resources` folder, create a folder called `mockito-extensions`;
    inside this folder, create a file named `org.mockito.plugins.MockMaker`; and inside
    this file, add the following text – `mock-maker-inline`.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `resources` 文件夹内，创建一个名为 `mockito-extensions` 的文件夹；在这个文件夹内，创建一个名为 `org.mockito.plugins.MockMaker`
    的文件；并在该文件中添加以下文本 – `mock-maker-inline`。
- en: 'Create a test class named `RemoteUserDataSourceImplTest`, which will test the
    success scenarios for the methods inside `RemoteUserDataSourceImpl`:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `RemoteUserDataSourceImplTest` 的测试类，该类将测试 `RemoteUserDataSourceImpl`
    内部方法的成功场景：
- en: '[PRE22]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Here, we are mocking the `UserService` interface and providing mock user data,
    which will then be obtained and converted by `RemoteDataSourceImpl`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们正在模拟 `UserService` 接口并提供模拟用户数据，然后这些数据将被 `RemoteDataSourceImpl` 获取并转换。
- en: 'In the same test class, add the error scenarios:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在相同的测试类中，添加错误场景：
- en: '[PRE23]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Here, we are mocking an error that is thrown by `UserService`, which will then
    be converted by `RemoteUserDataSourceImpl` into `UseCaseException.UserException`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在模拟 `UserService` 抛出的错误，然后由 `RemoteUserDataSourceImpl` 转换为 `UseCaseException.UserException`。
- en: 'Create a test class named `RemotePostDataSourceImplTest`, which will have similar
    test methods as `RemoteUserDataSourceImplTest` for posts:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `RemotePostDataSourceImplTest` 的测试类，它将具有与 `RemoteUserDataSourceImplTest`
    相似的测试方法，用于帖子：
- en: '[PRE24]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Here, we are doing for posts what we did for users in `RemoteUserDataSourceImplTest`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在对帖子做我们在 `RemoteUserDataSourceImplTest` 中对用户所做的事情。
- en: 'Add the error scenarios in `RemotePostDataSourceImplTest`:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `RemotePostDataSourceImplTest` 中添加错误场景：
- en: '[PRE25]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If we run the tests, we should see something like the following figure:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行测试，我们应该看到如下图所示的内容：
- en: '![Figure 7.2 – Output of the remote data source unit tests'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.2 – 远程数据源单元测试输出'
- en: '](img/Figure_7.02_B18320.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.02_B18320.jpg)'
- en: Figure 7.2 – Output of the remote data source unit tests
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2 – 远程数据源单元测试输出
- en: In this exercise, we have added a new module to the application, in which we
    can see how we can add a remote data source to the application. To fetch the data,
    we are using libraries such as OkHttp and Retrofit and combining them with the
    data source implementation for fetch users and posts. In the following section,
    we will expand the application to introduce local data sources, in which we will
    persist the data we are fetching here.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们向应用程序添加了一个新模块，我们可以看到如何将远程数据源添加到应用程序中。为了获取数据，我们使用 OkHttp 和 Retrofit
    等库，并将它们与用于获取用户和帖子的数据源实现相结合。在下一节中，我们将扩展应用程序以介绍本地数据源，我们将在这里持久化我们获取的数据。
- en: Building and integrating local data sources
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建和集成本地数据源
- en: In this section, we will analyze how we can build local data sources and integrate
    them with libraries such as Room and Data Store.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将分析如何构建本地数据源并将它们与 Room 和 Data Store 等库集成。
- en: 'Local data sources have a similar structure to remote data sources. The abstractions
    are provided by the layers sitting above, and the implementations are responsible
    for invoking methods from persistence frameworks and converting data into entities,
    like the following figure:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 本地数据源的结构与远程数据源类似。抽象由上层提供，实现负责调用持久化框架的方法并将数据转换为实体，如下面的图所示：
- en: '![Figure 7.3 – A local data source diagram'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.3 – 本地数据源图'
- en: '](img/Figure_7.03_B18320.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.03_B18320.jpg)'
- en: Figure 7.3 – A local data source diagram
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3 – 本地数据源图
- en: 'Let''s assume we have the same `UserEntity` defined in the previous chapters:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们在前面的章节中定义了相同的 `UserEntity`：
- en: '[PRE26]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Let''s make the same assumption about `UserLocalDataSource`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对 `UserLocalDataSource` 做相同的假设：
- en: '[PRE27]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We now need to provide an implementation for this data source that will manipulate
    the data from Room. First, we need to define a user entity for Room:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要提供一个实现，该实现将操作来自 Room 的数据。首先，我们需要为 Room 定义一个用户实体：
- en: '[PRE28]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now, we can define `UserDao`, which queries a user by an ID and inserts a user:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以定义 `UserDao`，它通过 ID 查询用户并插入用户：
- en: '[PRE29]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Finally, the implementation of the data source looks like this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，数据源的实施看起来像这样：
- en: '[PRE30]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Here, the local data source invokes `UserDao` to insert and retrieve a user
    and converts the domain entity into a Room entity.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，本地数据源调用 `UserDao` 来插入和检索用户，并将域实体转换为 Room 实体。
- en: 'If we want to use Data Store instead of Room with a local data store implementation,
    we can have something like the following example:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想使用 Data Store 而不是 Room 与本地数据存储实现，我们可以有如下示例：
- en: '[PRE31]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Here, we use a key for each of the fields of the `User` object to store the
    data. The `getUser` method doesn't use the ID to search for a user, which shows
    that for this particular use case, Room is the more appropriate method.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用一个键来存储 `User` 对象的每个字段的数据。`getUser` 方法不使用 ID 来搜索用户，这表明对于这个特定的用例，Room
    是更合适的方法。
- en: In this section, we looked at how we can build a local data source with the
    help of the Room and Data Store libraries to be able to query and persist data
    locally on a device. Next, we will look at an exercise to show how we can implement
    a local data store.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了如何使用 Room 和 Data Store 库构建本地数据源，以便能够在设备上本地查询和持久化数据。接下来，我们将查看一个练习，展示我们如何实现本地数据存储。
- en: Exercise 07.02 – Building a local data source
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 07.02 – 构建本地数据源
- en: Modify *Exercise 07.01 – Building a remote data source* so that a new Android
    library module named `data-local` is created. This module will depend on `domain`
    and `data-repository`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 修改*练习07.01 – 构建远程数据源*，以便创建一个名为`data-local`的新Android库模块。此模块将依赖于`domain`和`data-repository`。
- en: 'The module will implement the following:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块将实现以下功能：
- en: '`UserEntity` and `PostEntity`, which will hold data to be persisted from `User`
    and `Post` using Room'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UserEntity`和`PostEntity`，将保存从`User`和`Post`持久化的数据'
- en: '`UserDao` and `PostDao`, which will be responsible for persisting and fetching
    a list of `UserEntity` and `PostEntity`'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UserDao`和`PostDao`，将负责持久化和检索`UserEntity`和`PostEntity`列表'
- en: '`LocalUserDataSourceImpl` and `LocalPostDataSourceImpl`, which will be responsible
    for invoking the `UserDao` and `PostDao` objects to persist data and for converting
    data to `User` and `Post` objects'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LocalUserDataSourceImpl`和`LocalPostDataSourceImpl`，将负责调用`UserDao`和`PostDao`对象以持久化数据，并将数据转换为`User`和`Post`对象'
- en: '`LocalInteractionDataSourceImpl`, which will be responsible for persisting
    the `Interaction` object'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LocalInteractionDataSourceImpl`，将负责持久化`Interaction`对象'
- en: 'To complete this exercise, you will need to do the following:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此练习，您需要执行以下操作：
- en: Create the `data-local` module.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`data-local`模块。
- en: Create the `UserEntity` and `PostEntity` classes.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`UserEntity`和`PostEntity`类。
- en: Create the DAOs for users and posts.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为用户和帖子创建DAO。
- en: Create the data source implementations.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建数据源实现。
- en: 'Follow these steps to complete the exercise:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤完成练习：
- en: Create a new module named `data-local`, which will be an Android library module.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`data-local`的新模块，它将是一个Android库模块。
- en: 'Make sure that in the top-level `build.gradle` file, the following dependencies
    are set:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在顶级`build.gradle`文件中，以下依赖项已设置：
- en: '[PRE32]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In the same file, add the persistence libraries to the library mappings:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一文件中，将持久化库添加到库映射中：
- en: '[PRE33]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In the `build.gradle` file of the `data-local` module, make sure that the following
    plugins are present:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`data-local`模块的`build.gradle`文件中，确保存在以下插件：
- en: '[PRE34]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In the same file, change the configurations to the ones defined in the top-level
    `build.gradle` file:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一文件中，将配置更改为顶级`build.gradle`文件中定义的配置：
- en: '[PRE35]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'In the same file, add the dependencies to the networking libraries and the
    `data-repository` and `domain` modules:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一文件中，添加网络库和`data-repository`以及`domain`模块的依赖项：
- en: '[PRE36]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: In the `data-local` module, create a new package called `db`.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`data-local`模块中，创建一个名为`db`的新包。
- en: In the `db` package, create a new package called `user`.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`db`包中，创建一个名为`user`的新包。
- en: 'In the `user` package, create the `UserEntity` class:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`user`包中，创建`UserEntity`类：
- en: '[PRE37]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In the same package, create the `UserDao` interface:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一包中，创建`UserDao`接口：
- en: '[PRE38]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: In the `db` package, create a new package called `post`.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`db`包中，创建一个名为`post`的新包。
- en: 'In the `post` package, create a new class called `PostEntity`:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`post`包中，创建一个名为`PostEntity`的新类：
- en: '[PRE39]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'In the same package, create a new interface called `PostDao`:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一包中，创建一个名为`PostDao`的新接口：
- en: '[PRE40]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'In the `db` package, create the `AppDatabase` class:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`db`包中，创建`AppDatabase`类：
- en: '[PRE41]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: In the `data-local` module, create a new package called `source`.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`data-local`模块中，创建一个名为`source`的新包。
- en: 'In the `source` package, create a new class called `LocalUserDataSourceImpl`:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`source`包中，创建一个名为`LocalUserDataSourceImpl`的新类：
- en: '[PRE42]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Here, in the `getUsers` method, we retrieve a list of `UserEntity` objects from
    `UserDao` and convert them into `User` objects. In the `addUsers` method, we do
    the opposite, by taking a list of `User` objects to be inserted and converting
    them into `UserEntity` objects.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，在`getUsers`方法中，我们从`UserDao`检索`UserEntity`对象列表并将它们转换为`User`对象。在`addUsers`方法中，我们执行相反的操作，将待插入的`User`对象列表转换为`UserEntity`对象。
- en: 'In the same package, create the `LocalPostDataSourceImpl` class:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一包中，创建`LocalPostDataSourceImpl`类：
- en: '[PRE43]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Here, we follow the same approach we used for `LocalUserDataSourceImpl`.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们遵循与`LocalUserDataSourceImpl`相同的做法。
- en: 'In the same package, create the `LocalInteractionDataSourceImpl` class:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一包中，创建`LocalInteractionDataSourceImpl`类：
- en: '[PRE44]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Here, we use the Preference Data Store library to persist the Interaction object,
    by holding different keys for each field in the `Interaction` class, and in this
    case, it will be just one key for the total clicks.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用偏好数据存储库来持久化交互对象，通过为`Interaction`类中的每个字段保留不同的键，在这种情况下，将只有一个键用于总点击数。
- en: In the `data-local` module, create a new package named `injection`.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`data-local`模块中，创建一个名为`injection`的新包。
- en: 'In the `injection` package, create a new class named `PersistenceModule`:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`injection`包中，创建一个名为`PersistenceModule`的新类：
- en: '[PRE45]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Here, we provide all the Data Store and Room dependencies.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们提供了所有Data Store和Room依赖项。
- en: 'In the same package, create a new class called `LocalDataSourceModule`, in
    which we connect the abstractions to the bindings:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一个包中，创建一个名为`LocalDataSourceModule`的新类，在其中我们将抽象与绑定连接起来：
- en: '[PRE46]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: To unit-test the code, we will now need to create a new folder called `resources`
    in the test folder of the `data-local` module.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了单元测试代码，我们现在需要在`data-local`模块的测试文件夹中创建一个名为`resources`的新文件夹。
- en: Inside the `resources` folder, create a folder called `mockito-extensions`;
    inside this folder, create a file named `org.mockito.plugins.MockMaker`; and inside
    this file, add the following text – `mock-maker-inline`.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`resources`文件夹中，创建一个名为`mockito-extensions`的文件夹；在这个文件夹中，创建一个名为`org.mockito.plugins.MockMaker`的文件；并在该文件中添加以下文本——`mock-maker-inline`。
- en: 'Create the `LocalUserDataSourceImplTest` test class:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`LocalUserDataSourceImplTest`测试类：
- en: '[PRE47]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Here, we are mocking the `UserDao` class and using it to provide mock data to
    `LocalUserDataSourceImpl`, which will then convert the data to and from the `User`
    objects.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们模拟了`UserDao`类，并使用它为`LocalUserDataSourceImpl`提供模拟数据，然后将其转换为`User`对象。
- en: 'Create the `LocalPostDataSourceImplTest` test class:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`LocalPostDataSourceImplTest`测试类：
- en: '[PRE48]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Here, we perform the same type of tests for posts as we did in `LocalUserDataSourceImplTest`
    for users.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们为帖子执行与在`LocalUserDataSourceImplTest`中对用户执行的相同类型的测试。
- en: 'Create the `LocalInteractionDataSourceImplTest` test class:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`LocalInteractionDataSourceImplTest`测试类：
- en: '[PRE49]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Here, in the `testSaveInteraction` method, we need to mock the `updateData`
    method instead of the `edit` method from the `DataStore` class. This is because
    the `edit` method is an extension function that can't be mocked with the current
    libraries we have and instead must rely on the method it invokes, which is `updateData`.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，在`testSaveInteraction`方法中，我们需要模拟`updateData`方法而不是`DataStore`类的`edit`方法。这是因为`edit`方法是一个扩展函数，我们无法使用当前库进行模拟，而必须依赖于它调用的方法，即`updateData`。
- en: 'If we run the tests, we should see something like the following figure:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行测试，我们应该看到如下所示的图：
- en: '![Figure 7.4 – Output of the local data source unit tests'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 7.4 – 本地数据源单元测试输出'
- en: '](img/Figure_7.04_B18320.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.04_B18320.jpg)'
- en: Figure 7.4 – Output of the local data source unit tests
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.4 – 本地数据源单元测试输出
- en: 'If we draw a diagram of the modules in the exercise, we will see something
    like the following figure:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在练习中绘制模块图，我们会看到如下所示的图：
- en: '![Figure 7.5 – The exercise 07.02 module diagram'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 7.5 – 练习07.02模块图'
- en: '](img/Figure_7.05_B18320.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.05_B18320.jpg)'
- en: Figure 7.5 – The exercise 07.02 module diagram
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.5 – 练习07.02模块图
- en: We can see that the `:data-remote` and `:data-local` modules are isolated from
    each other. The two modules have different responsibilities and deal with different
    dependencies. `:data-remote` deals with fetching data from the internet, while
    `:data-local` deals with persisting data locally into SQLite using Room and files
    using Data Store. This gives our code more flexibility because we are able to
    change how we fetch data – for example, without impacting how we persist the data.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`:data-remote`和`:data-local`模块彼此隔离。这两个模块有不同的职责和处理不同的依赖。`:data-remote`处理从互联网获取数据，而`:data-local`处理使用Room将数据持久化到SQLite，并使用Data
    Store处理文件。这使我们的代码更具灵活性，因为我们能够改变我们获取数据的方式——例如，不会影响我们持久化数据的方式。
- en: In this exercise, we have created a new module in the application in which we
    deal with local data sources. To persist data, we have used libraries such as
    Room and Data Store, and we have integrated them with the local data store.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们在应用程序中创建了一个新的模块，其中我们处理本地数据源。为了持久化数据，我们使用了Room和Data Store等库，并将它们与本地数据存储集成。
- en: Summary
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at the concept of data sources and the different
    types of data sources we have available in an Android application. We started
    with remote data sources and saw some examples of how we can build a data source
    and combine it with libraries such as Retrofit and OkHttp. The local data source
    followed similar principles as the remote one, and here, we have used libraries
    such as Room and Data Store to implement this.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了数据源的概念以及我们在Android应用程序中可用的不同类型的数据源。我们从远程数据源开始，看到了一些如何构建数据源并将其与Retrofit和OkHttp等库结合的例子。本地数据源与远程数据源遵循类似的原则，在这里，我们使用了Room和Data
    Store来实现这一点。
- en: In the exercises, we implemented the data sources as part of different modules.
    This was to avoid creating any unnecessary dependencies between the other layers
    of the application and the specific frameworks we have used for the data sources.
    In the next chapter, we will look at how we can build the presentation layer and
    show data to the user. We will also explore how we can split the presentation
    layer into separate modules and navigate from a screen in one module to a screen
    in another module, through the introduction of modules that can be shared by other
    presentation modules.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在练习中，我们将数据源作为不同模块的一部分进行了实现。这样做是为了避免在应用程序的其他层与我们所使用的特定数据源框架之间创建任何不必要的依赖。在下一章中，我们将探讨如何构建表示层并向用户展示数据。我们还将探索如何将表示层拆分为独立的模块，并通过引入可以被其他表示模块共享的模块，从一个模块的屏幕导航到另一个模块的屏幕。
