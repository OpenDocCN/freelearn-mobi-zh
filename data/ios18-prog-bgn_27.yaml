- en: '23'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '23'
- en: Getting Started with SwiftData
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SwiftData入门
- en: During Apple’s **World** **Wide Developer Conference** (**WWDC**) in 2023, they
    introduced **SwiftData**, an all-new framework for saving app data. Previously,
    developers had to use an editor to create data models, but SwiftData allows developers
    to describe data models and manipulate model instances using regular Swift code.
    Features such as relationship management, undo/redo support, iCloud synchronization,
    and more are provided automatically. In 2024, Apple added new APIs that enable
    developers to build custom data stores, work with transaction history, model indices
    and compound uniqueness constraints, and more.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在2023年苹果公司的**全球开发者大会**（**WWDC**）上，他们介绍了全新的框架**SwiftData**，用于保存应用程序数据。之前，开发者必须使用编辑器来创建数据模型，但SwiftData允许开发者使用常规Swift代码描述数据模型并操作模型实例。自动提供的关系管理、撤销/重做支持、iCloud同步等功能。在2024年，苹果公司添加了新的API，使开发者能够构建自定义数据存储、处理事务历史记录、模型索引和复合唯一约束等。
- en: In this chapter, you’re going to modify the *JRNL* app that you completed in
    *Chapter 16*, *Passing Data between View Controllers*, to save journal entries
    using SwiftData. This means that when you add new journal entries to the app,
    they will reappear the next time the app is launched.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将修改在*第16章*，“在视图控制器之间传递数据”中完成的*JRNL*应用程序，以使用SwiftData保存日记条目。这意味着当你向应用程序添加新的日记条目时，它们将在应用程序下次启动时再次出现。
- en: First, you’ll learn about SwiftData and its components. Next, you’ll modify
    the `JournalEntry` class to make it compatible with SwiftData and modify the `JournalListViewController`
    class to work with the modified `JournalEntry` class. After that, you’ll implement
    SwiftData by adding code that will allow you to read, write, and delete journal
    entries; and finally, you’ll modify the `JournalViewController` class to read,
    save, and delete stored journal entries.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你将了解SwiftData及其组件。接下来，你将修改`JournalEntry`类以使其与SwiftData兼容，并修改`JournalListViewController`类以与修改后的`JournalEntry`类协同工作。之后，你将通过添加代码来实现SwiftData，这些代码将允许你读取、写入和删除日记条目；最后，你将修改`JournalViewController`类以读取、保存和删除存储的日记条目。
- en: By the end of this chapter, you’ll have learned how to save app data using SwiftData
    and will be able to implement it in your own apps.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将学会如何使用SwiftData保存应用程序数据，并将能够在自己的应用程序中实现它。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Introducing SwiftData
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍SwiftData
- en: Modifying the `JournalEntry` class
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改`JournalEntry`类
- en: Implementing SwiftData components
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现SwiftData组件
- en: Modifying the `JournalListViewController` class
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改`JournalListViewController`类
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will continue working on the `JRNL` project that you modified in *Chapter
    16*, *Passing Data between View Controllers*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你将继续在*第16章*，“在视图控制器之间传递数据”中修改的`JRNL`项目上工作。
- en: 'The resource files and completed Xcode project for this chapter are in the
    `Chapter23` folder of the code bundle for this book, which can be downloaded here:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本书代码包中的资源文件和完成后的Xcode项目位于`Chapter23`文件夹中，可以在此处下载：
- en: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition%0D)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition%0D)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，了解代码的实际应用：
- en: '[https://youtu.be/VFYb8Yohh6g](https://youtu.be/VFYb8Yohh6g%0D)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://youtu.be/VFYb8Yohh6g](https://youtu.be/VFYb8Yohh6g%0D)'
- en: Let’s start by learning more about SwiftData.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从了解SwiftData开始。
- en: Introducing SwiftData
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍SwiftData
- en: SwiftData is Apple’s all-new framework for saving app data to your device. It
    automatically provides relationship management, undo/redo support, iCloud synchronization,
    and more. You can model your data using regular Swift types, and SwiftData will
    then build a custom schema using your specified model and map its fields to device
    storage. You can query and filter your data using expressions that are type-checked
    by the compiler, resulting in fewer typos or mistakes.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: SwiftData是苹果公司全新的框架，用于将应用程序数据保存到您的设备上。它自动提供关系管理、撤销/重做支持、iCloud同步等功能。您可以使用常规Swift类型来建模数据，然后SwiftData将根据您指定的模型构建自定义模式，并将字段映射到设备存储。您可以使用由编译器进行类型检查的表达式查询和筛选数据，从而减少错误或打字错误。
- en: You can learn more about SwiftData at [https://developer.apple.com/documentation/swiftdata](https://developer.apple.com/documentation/swiftdata).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://developer.apple.com/documentation/swiftdata](https://developer.apple.com/documentation/swiftdata)
    上了解更多关于 SwiftData 的信息。
- en: During WWDC 2024, Apple added new APIs to SwiftData. These enable you to model
    indices and compound unique constraints using macros, build custom data stores
    using your own document format, keep track of transaction history, and more.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在 WWDC 2024 上，Apple 为 SwiftData 添加了新的 API。这些 API 允许您使用宏来建模索引和复合唯一约束，使用您自己的文档格式构建自定义数据存储，跟踪事务历史记录，以及更多。
- en: You can learn more about what’s new in SwiftData at [https://developer.apple.com/videos/play/wwdc2024/10137/](https://developer.apple.com/videos/play/wwdc2024/10137/).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://developer.apple.com/videos/play/wwdc2024/10137/](https://developer.apple.com/videos/play/wwdc2024/10137/)
    上了解更多关于 SwiftData 中的新功能。
- en: Several steps are required to implement SwiftData for an app. First, existing
    classes are turned into models with the `@Model` macro. Primitive types such as
    `Bool`, `Int`, and `String` are supported, as well as complex value types such
    as structures and enumerations. Next, model attributes are customized as required
    using annotations such as `@Attribute(.unique)` to ensure the property’s value
    is unique and `@Attribute(.externalStorage)` to store the property’s value adjacent
    to model storage as binary data. Then, models to be persisted are specified and
    a `ModelContainer` instance is created, which manages an app’s schema and model
    storage configuration.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 实现应用程序的 SwiftData 需要几个步骤。首先，使用 `@Model` 宏将现有类转换为模型。支持基本类型，如 `Bool`、`Int` 和 `String`，以及复杂值类型，如结构和枚举。接下来，根据需要使用注释如
    `@Attribute(.unique)` 来确保属性的值是唯一的，以及 `@Attribute(.externalStorage)` 来将属性的值作为二进制数据存储在模型存储旁边。然后，指定要持久化的模型并创建一个
    `ModelContainer` 实例，该实例管理应用程序的模式和模型存储配置。
- en: After that, a `ModelContext` instance is used to fetch, insert, and delete model
    instances and save any changes to device storage while the app is running. Finally,
    to fetch specific instances from device storage, a `FetchDescriptor` instance
    containing a search predicate and a sort order is used.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，使用 `ModelContext` 实例在应用程序运行时检索、插入和删除模型实例，并将任何更改保存到设备存储。最后，为了从设备存储中检索特定实例，使用包含搜索谓词和排序顺序的
    `FetchDescriptor` 实例。
- en: You can learn more about preserving your app’s model data across launches at
    [https://developer.apple.com/documentation/swiftdata/preserving-your-apps-model-data-across-launches](https://developer.apple.com/documentation/swiftdata/preserving-your-apps-model-data-across-launches).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://developer.apple.com/documentation/swiftdata/preserving-your-apps-model-data-across-launches](https://developer.apple.com/documentation/swiftdata/preserving-your-apps-model-data-across-launches)
    上了解更多关于在应用程序启动之间保留应用程序模型数据的信息。
- en: Before you implement SwiftData for the *JRNL* app, here’s an example to help
    you visualize what you need to do to save journal entries.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在您为 *JRNL* 应用程序实现 SwiftData 之前，这里有一个示例来帮助您可视化您需要执行的操作以保存日记条目。
- en: Imagine you’re saving a journal entry using Microsoft Word. You first create
    a new Word document template with the relevant fields for a journal entry. You
    then create new Word documents based on the templates and fill in the data. You
    make whatever changes are necessary, perhaps changing the text of the journal
    entry, or changing the photo. When you are happy with your document, you save
    it to the hard disk of your computer. The next time you want to view your journal
    entry, you search your hard disk for the relevant document and double-click it
    to open it in Word so you can see it once more.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下您正在使用 Microsoft Word 保存日记条目。您首先创建一个新的 Word 文档模板，其中包含日记条目的相关字段。然后，您根据模板创建新的
    Word 文档并填写数据。您进行必要的更改，比如更改日记条目的文本或更改照片。当您对文档满意时，您将其保存到计算机的硬盘上。下次您想查看日记条目时，您在硬盘上搜索相关文档，双击它以在
    Word 中打开，以便再次查看。
- en: Now that you have an idea of what you need to do, let’s review the steps required
    to implement SwiftData for your app.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了需要执行的操作，让我们回顾一下实现应用程序的 SwiftData 所需的步骤。
- en: First, you turn the existing `JournalEntry` class into a model, which is like
    a Microsoft Word template. You do this by annotating the `JournalEntry` class
    with the `@Model` macro. The properties of the `JournalEntry` class are like fields
    in the Microsoft Word template and you will customize properties with the `@Attribute`
    macro if required.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您将现有的 `JournalEntry` 类转换为模型，这就像是一个 Microsoft Word 模板。您通过使用 `@Model` 宏注释 `JournalEntry`
    类来实现这一点。`JournalEntry` 类的属性就像 Microsoft Word 模板中的字段，如果需要，您将使用 `@Attribute` 宏自定义属性。
- en: Next, you will create a `ModelContainer` instance, which will be used to store
    `JournalEntry` model instances on your device’s storage, and create a `ModelContext`
    instance, which will be used to store `JournalEntry` model instances in memory.
    This is like the way Microsoft Word files created from Microsoft Word templates
    can be stored on your computer’s hard disk or kept in memory as they are being
    edited.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将创建一个`ModelContainer`实例，它将用于在您的设备存储上存储`JournalEntry`模型实例，并创建一个`ModelContext`实例，它将用于在内存中存储`JournalEntry`模型实例。这就像从Microsoft
    Word模板创建的Microsoft Word文件可以存储在您的计算机硬盘上或在编辑时保留在内存中一样。
- en: After that, you will add code so that when you create a new journal entry, a
    `JournalEntry` model instance is created and added to the `ModelContext` instance,
    which then coordinates with the `ModelContainer` instance to save it to device
    storage. This is like saving Word documents to your hard disk when you’re done
    with them.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，您将添加代码，以便在创建新的期刊条目时，创建一个`JournalEntry`模型实例并将其添加到`ModelContext`实例中，然后它将与`ModelContainer`实例协调以将其保存到设备存储。这就像在完成Word文档后将其保存到硬盘上一样。
- en: 'You can learn more about how to build an app with SwiftData by watching the
    following video: [https://developer.apple.com/videos/play/wwdc2023/10154/](https://developer.apple.com/videos/play/wwdc2023/10154/).'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过观看以下视频了解更多关于如何使用SwiftData构建应用程序的信息：[https://developer.apple.com/videos/play/wwdc2023/10154/](https://developer.apple.com/videos/play/wwdc2023/10154/).
- en: Now that you have a basic understanding of how SwiftData works, you’ll use the
    `JournalEntry` class to create the `JournalEntry` model in the next section.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经基本了解了SwiftData的工作原理，您将在下一节中使用`JournalEntry`类创建`JournalEntry`模型。
- en: Modifying the JournalEntry class
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改`JournalEntry`类
- en: 'Currently, when you create a new journal entry using the Add New Journal Entry
    screen and click the **Save** button, the entry will appear on the Journal List
    screen:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，当您使用添加新期刊条目屏幕创建新的期刊条目并点击**保存**按钮时，条目将出现在期刊列表屏幕上：
- en: '![](img/B31371_23_01.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_23_01.png)'
- en: 'Figure 23.1: Simulator showing new entries added to the Journal List screen'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图23.1：模拟器显示添加到期刊列表屏幕的新条目
- en: 'If you quit and restart your app, the newly added entries will disappear:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您退出并重新启动您的应用程序，新添加的条目将消失：
- en: '![](img/B31371_23_02.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_23_02.png)'
- en: 'Figure 23.2: Simulator showing new entries disappearing after the app is relaunched'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图23.2：模拟器显示在应用程序重新启动后新条目消失
- en: This is because the contents of the `journalEntries` array are only kept in
    memory and not saved to device storage when the app is closed. To resolve this,
    you will implement SwiftData for your app. The first step in implementing SwiftData
    is to create model objects from your existing `JournalEntry` class, modifying
    this and other classes in your app as needed.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为`journalEntries`数组的内容仅在内存中保留，当应用程序关闭时并未保存到设备存储。为了解决这个问题，您将为您的应用程序实现SwiftData。实现SwiftData的第一步是从现有的`JournalEntry`类创建模型对象，根据需要修改此和其他类。
- en: 'Follow these steps:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: 'In the Project navigator, click the **JournalEntry** file (located in the **Journal
    List Scene** | **Model** group). Import the `SwiftData` framework and annotate
    the `JournalEntry` class with the `@Model` macro, as shown:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中，点击**JournalEntry**文件（位于**期刊列表场景** | **模型**组）。导入`SwiftData`框架，并使用`@Model`宏注释`JournalEntry`类，如下所示：
- en: '[PRE0]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Choose **Build** from Xcode’s **Product** menu. You will see error messages
    appear in the Navigator area. Click any one of the first three error messages
    to expand the macro and display the error:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Xcode的**产品**菜单中选择**构建**。您将在导航器区域看到错误消息出现。点击前三个错误消息中的任何一个以展开宏并显示错误：
- en: '![](img/B31371_23_03.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_23_03.png)'
- en: 'Figure 23.3: Editor area showing errors'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图23.3：编辑区域显示错误
- en: These errors appear because SwiftData at present does not support the `UIImage`
    class. To fix this, you will need to modify the `JournalEntry` class to use `Data`
    instances in place of `UIImage` instances.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这些错误出现是因为SwiftData目前不支持`UIImage`类。为了修复这个问题，您需要修改`JournalEntry`类，使用`Data`实例代替`UIImage`实例。
- en: 'Replace the `photo` property in the `JournalEntry` class with a `photoData`
    property of type `Data?`, as shown:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`JournalEntry`类中的`photo`属性替换为`photoData`属性，类型为`Data?`，如下所示：
- en: '[PRE1]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `@Attribute(.externalStorage)` annotation will store the data for the photo
    in a binary file adjacent to the model data, which makes it more efficient.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Attribute(.externalStorage)`注释将照片数据存储在模型数据相邻的二进制文件中，这使得它更高效。'
- en: 'Next, you will address the other error messages, which say **Cannot expand
    accessors on variable declared with ‘let’**:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您将解决其他错误消息，这些错误消息说**Cannot expand accessors on variable declared with ‘let’**：
- en: '![](img/B31371_23_04.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_23_04.png)'
- en: 'Figure 23.4: Navigator area showing errors'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图23.4：显示错误的导航器区域
- en: 'To resolve this, replace all the `let` keywords for the `JournalEntry` class
    properties with `var`, as shown:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了解决这个问题，将`JournalEntry`类属性的`let`关键字全部替换为`var`，如下所示：
- en: '[PRE2]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'There will be an error in the initializer for the `JournalEntry` class. To
    fix it, modify the code in the initializer, as shown:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`JournalEntry`类的初始化器中会有一个错误。为了修复它，按照以下方式修改初始化器中的代码：'
- en: '[PRE3]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '****This statement will convert a `UIImage` instance into a `Data` instance
    using JPEG encoding, which can be stored in the `photoData` property.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '****此语句将使用JPEG编码将`UIImage`实例转换为`Data`实例，这可以存储在`photoData`属性中。'
- en: 'If you build the project now, more errors will appear. Click the **JournalEntryDetailViewController**
    file in the Project navigator. Modify the `viewDidLoad()` method as shown:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果现在构建项目，将出现更多错误。在项目导航器中单击**JournalEntryDetailViewController**文件。按照以下方式修改`viewDidLoad()`方法：
- en: '[PRE4]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This code checks to see if the `JournalEntry` instance’s `photoData` property
    has a value. If this is the case, it is converted into a `UIImage` instance and
    assigned to the `photoImageView` instance’s `image` property.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码检查`JournalEntry`实例的`photoData`属性是否有值。如果有，它将转换为`UIImage`实例并分配给`photoImageView`实例的`image`属性。
- en: 'Click the **JournalListViewController** file in the Project navigator. Modify
    the `tableView(_:cellForRowAt:)` method as follows:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中单击**JournalListViewController**文件。按照以下方式修改`tableView(_:cellForRowAt:)`方法：
- en: '[PRE5]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This code checks to see if the `JournalEntry` instance’s `photoData` property
    has a value. If this is the case, it is converted into a `UIImage` instance and
    assigned to `journalCell.photoImageView.image`. Since this process is repeated
    for every row in the table view and decoding JPEG data into a `UIImage` instance
    can be slow, a `Task` block is used to make this process asynchronous.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码检查`JournalEntry`实例的`photoData`属性是否有值。如果有，它将转换为`UIImage`实例并分配给`journalCell.photoImageView.image`。由于此过程在表格视图的每一行都会重复，并且将JPEG数据解码为`UIImage`实例可能很慢，因此使用`Task`块使此过程异步。
- en: All errors should now be resolved. You may need to quit and reopen your project
    before all the errors disappear.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 所有错误现在应该都已解决。您可能需要退出并重新打开项目，才能使所有错误消失。
- en: If you were to build and run your project now, you would get an error because
    the SwiftData `ModelContainer` instance has not been created. You’ll learn how
    to do that in the next section.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果现在构建并运行您的项目，您将得到一个错误，因为SwiftData的`ModelContainer`实例尚未创建。您将在下一节中学习如何创建它。
- en: Implementing SwiftData components
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现SwiftData组件
- en: Now that you have used the `JournalEntry` class to create a `JournalEntry` model,
    you will create a **singleton** class that contains a `ModelContainer` object
    and a `ModelContext` instance. You will then add methods to manipulate instances
    of the `JournalEntry` model stored in `ModelContext`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经使用`JournalEntry`类创建了一个`JournalEntry`模型，您将创建一个包含`ModelContainer`对象和`ModelContext`实例的单例类。然后您将为存储在`ModelContext`中的`JournalEntry`模型实例添加方法。
- en: The term **singleton** means that there is only one instance of this class in
    your app.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 单词**singleton**意味着在您的应用程序中只有一个此类实例。
- en: 'Follow these steps:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: Right-click the `JRNL` folder in the Project navigator and choose **New File
    from Template...** from the pop-up menu.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中右键单击`JRNL`文件夹，并从弹出菜单中选择**New File from Template...**。
- en: '**iOS** should already be selected. Choose **Swift File** and then click **Next**.'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS**应该已经选中。选择**Swift File**然后点击**Next**。'
- en: Name this file `SharedData`. Click **Create**. The `SharedData` file appears
    in the Project navigator. Move the file so that it is under the `SceneDelegate`
    file.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件命名为`SharedData`。点击**Create**。`SharedData`文件出现在项目导航器中。将文件移动到`SceneDelegate`文件下。
- en: 'Add the following code after the `import` statement:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`import`语句之后添加以下代码：
- en: '[PRE6]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This lets you use the SwiftData framework.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许您使用SwiftData框架。
- en: 'Add the following code after the `import` statements to declare and define
    the `SharedData` class:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`import`语句之后添加以下代码以声明和定义`SharedData`类：
- en: '[PRE7]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This class creates a singleton instance that will be available throughout your
    app and assigns it to the `shared` static variable. It also creates and initializes
    `ModelContainer` and `ModelContext` instances and assigns them to the `container`
    and `context` properties, respectively.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 此类创建了一个单例实例，该实例将在你的整个应用程序中可用，并将其分配给 `shared` 静态变量。它还创建并初始化 `ModelContainer`
    和 `ModelContext` 实例，并将它们分别分配给 `container` 和 `context` 属性。
- en: 'Next, you’ll add methods for loading, adding, and deleting `JournalEntry` model
    instances. Follow these steps:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将添加用于加载、添加和删除 `JournalEntry` 模型实例的方法。按照以下步骤操作：
- en: 'Add the following code after the initializer to implement the `loadJournalEntries()`
    method:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在初始化器之后添加以下代码以实现 `loadJournalEntries()` 方法：
- en: '[PRE8]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let’s break this down:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下：
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This method returns an array of `JournalEntry` instances.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法返回一个 `JournalEntry` 实例数组。
- en: '[PRE10]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This statement creates a `FetchDescriptor` instance that specifies that all
    `JournalEntry` model instances stored in the `ModelContext` instance are to be
    fetched and sorted by date, from newest to oldest.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 该语句创建了一个 `FetchDescriptor` 实例，指定从 `ModelContext` 实例中检索并按日期排序（从新到旧）存储的所有 `JournalEntry`
    模型实例。
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This block of code gets all the `JournalEntry` model instances specified by
    the `FetchDescriptor` instance from the `ModelContext` instance and assigns them
    to `journalEntries`, a constant of type `[JournalEntry]`, which is then returned.
    If the operation fails, an empty array will be returned.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码从 `ModelContext` 实例中获取由 `FetchDescriptor` 实例指定的所有 `JournalEntry` 模型实例，并将它们分配给
    `journalEntries`，这是一个类型为 `[JournalEntry]` 的常量，然后返回。如果操作失败，将返回一个空数组。
- en: 'Implement the `saveJournalEntry(_:)` method by adding the following code before
    the final curly brace:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在最后的括号之前添加以下代码来实现 `saveJournalEntry(_:)` 方法：
- en: '[PRE12]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This method inserts the `journalEntry` instance passed to it into the `ModelContext`
    instance as a `JournalEntry` model instance.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将传递给它的 `journalEntry` 实例作为 `JournalEntry` 模型实例插入到 `ModelContext` 实例中。
- en: 'Implement the `deleteJournalEntry(_:)` method by adding the following code
    before the final curly brace:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在最后的括号之前添加以下代码来实现 `deleteJournalEntry(_:)` 方法：
- en: '[PRE13]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This method removes the corresponding `JournalEntry` model instance from the
    `ModelContext` instance.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将从 `ModelContext` 实例中删除相应的 `JournalEntry` 模型实例。
- en: You’ve created a `SharedData` class that creates a `ModelContainer` instance
    and implemented methods to fetch, add, and delete `JournalEntry` model instances
    from a `ModelContext` object. You can build your app to test for errors, but you
    can’t run it yet.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经创建了一个 `SharedData` 类，该类创建了一个 `ModelContainer` 实例，并实现了从 `ModelContext` 对象中检索、添加和删除
    `JournalEntry` 模型实例的方法。你可以构建你的应用程序以测试错误，但你还不能运行它。
- en: At this point, you’ve implemented all the required SwiftData components in your
    app. In the next section, you’ll configure the `JournalListViewController` class
    to fetch all journal entries stored in the `ModelContainer` instance when the
    app is run, add new `JournalEntry` model instances to the `ModelContext` instance
    when you add a new journal entry, and remove `JournalEntry` model instances from
    the `ModelContext` instance when you delete a journal entry.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经在你的应用程序中实现了所有必需的 SwiftData 组件。在下一节中，你将配置 `JournalListViewController`
    类，以便在应用程序运行时从 `ModelContainer` 实例中检索所有存储的日记条目，在你添加新的日记条目时将新的 `JournalEntry` 模型实例添加到
    `ModelContext` 实例中，以及在你删除日记条目时从 `ModelContext` 实例中删除 `JournalEntry` 模型实例。
- en: Modifying the JournalListViewController class
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改 `JournalListViewController` 类
- en: Previously, when you added or removed journal entries from your app, the changes
    made would be gone when you stopped and ran the app again because the code in
    the `JournalListViewController` class had no way to save app data to your device.
    You will add code to the `JournalListViewController` class to save app data using
    SwiftData in this section.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前，当你从你的应用程序中添加或删除日记条目时，当你停止并再次运行应用程序时所做的更改将会消失，因为 `JournalListViewController`
    类中的代码没有将应用程序数据保存到你的设备上的方法。在本节中，你将向 `JournalListViewController` 类中添加代码以使用 SwiftData
    保存应用程序数据。
- en: 'You will update the `viewDidLoad()` method to fetch all journal entries from
    device storage when you run the app, update the `unwindNewEntrySave(segue:)` method
    to add a new journal entry to the `ModelContext` instance, and update the `tableView(_:commit:forRowAt:)`
    method to remove the specified journal entry from the `ModelContext` instance.
    Follow these steps:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行应用程序时，你将更新 `viewDidLoad()` 方法以从设备存储中检索所有日记条目，更新 `unwindNewEntrySave(segue:)`
    方法以将新的日记条目添加到 `ModelContext` 实例中，并更新 `tableView(_:commit:forRowAt:)` 方法以从 `ModelContext`
    实例中删除指定的日记条目。按照以下步骤操作：
- en: 'Click the `JournalListViewController` file in the Project navigator and add
    a method to fetch all journal entries from device storage before the closing curly
    brace:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击`JournalListViewController`文件，并在闭合花括号之前添加一个方法以从设备存储中检索所有日记条目：
- en: '[PRE14]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This method calls the `loadJournalEntries()` method in the `SharedData` singleton,
    which returns an array of `JournalEntry` instances. This array is then assigned
    to the `journalEntries` array, and the table view is reloaded.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法调用`SharedData`单例中的`loadJournalEntries()`方法，该方法返回一个`JournalEntry`实例数组。然后此数组被分配给`journalEntries`数组，表格视图被重新加载。
- en: 'Modify the `viewDidLoad()` method as follows to call the `fetchJournalEntries()`
    method:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式修改`viewDidLoad()`方法以调用`fetchJournalEntries()`方法：
- en: '[PRE15]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Since the journal entries you add to the app will now be persistent, you no
    longer need to call the method used to create sample data for your app.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您添加到应用中的日记条目现在将持久化，因此您不再需要调用用于创建应用示例数据的方法。
- en: 'Modify the `unwindNewEntrySave(segue:)` method to add the new journal entry
    to device storage and update the table view:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`unwindNewEntrySave(segue:)`方法，以便将新的日记条目添加到设备存储并更新表格视图：
- en: '[PRE16]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The new `JournalEntry` instance is passed to the `saveJournalEntry` method in
    the `SharedData` singleton, where it is inserted into the `ModelContext` instance
    as a `JournalEntry` model instance. The `fetchJournalEntries()` method then updates
    the `journalEntries` array and reloads the table view.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 新的`JournalEntry`实例被传递到`SharedData`单例中的`saveJournalEntry`方法，在那里它作为`JournalEntry`模型实例插入到`ModelContext`实例中。然后`fetchJournalEntries()`方法更新`journalEntries`数组并重新加载表格视图。
- en: 'Modify the `tableView(_:commit:forRowAt:)` method to delete the specified journal
    entry from device storage and update the table view:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`tableView(_:commit:forRowAt:)`方法，以便从设备存储中删除指定的日记条目并更新表格视图：
- en: '[PRE17]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `JournalEntry` instance to be removed is passed to the `deleteJournalEntry`
    method in the `SharedData` singleton, where the corresponding `JournalEntry` model
    instance is removed from the `ModelContext` instance. The `fetchJournalEntries()`
    method then updates the `journalEntries` array and reloads the table view.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除的`JournalEntry`实例被传递到`SharedData`单例中的`deleteJournalEntry`方法，在那里相应的`JournalEntry`模型实例从`ModelContext`实例中删除。然后`fetchJournalEntries()`方法更新`journalEntries`数组并重新加载表格视图。
- en: 'You have made all the changes required for the `JournalListViewController`
    class. Build and run your app, and you should see a blank table view on the Journal
    List screen. Add a few journal entries using the Add New Journal Entry screen,
    and they will appear on the Journal List screen. Stop and run your app again.
    The journal entries you added will still be there:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您已为`JournalListViewController`类完成所有必要的更改。构建并运行您的应用，您应该在日记列表屏幕上看到一个空白的表格视图。使用“添加新日记条目”屏幕添加几个日记条目，它们将出现在日记列表屏幕上。停止并再次运行您的应用。您添加的日记条目仍然会保留：
- en: '![](img/B31371_23_05.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_23_05.png)'
- en: 'Figure 23.5: Simulator showing that new entries are still present after your
    app has been relaunched'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图23.5：模拟器显示在您的应用重新启动后，新条目仍然存在
- en: Swipe a row to delete a journal entry. Stop and run your app again. The journal
    entry you removed will still be gone.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滑动一行以删除日记条目。停止并再次运行您的应用。您删除的日记条目仍然会消失。
- en: '![](img/Image15494.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Image15494.png)'
- en: 'Figure 23.6: Simulator showing that deleted entries do not reappear after your
    app has been relaunched'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图23.6：模拟器显示在您的应用重新启动后，已删除的条目不会重新出现
- en: You have successfully implemented SwiftData in your app, and now journal entries
    added to your app will still be there when your app is relaunched. Congratulations!
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您已成功在您的应用中实现了SwiftData，现在当您的应用重新启动时，添加到您的应用中的日记条目仍然会保留。恭喜您！
- en: Summary
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you modified the *JRNL* app that you completed in *Chapter
    16*, *Passing Data between View Controllers*, to use SwiftData to save journal
    entries to your device storage, so that any changes you make will still be there
    when you next launch the app. First, you learned about SwiftData and its different
    components. Next, you modified the `JournalEntry` class to make it work with SwiftData
    and modified your `JournalListViewController` class to work with the modified
    `JournalEntry` class. After that, you added code that allowed you to fetch, add,
    and delete journal entries from a SwiftData model container, and finally, you
    modified the `JournalViewController` class so it can read, save, and delete stored
    journal entries.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你修改了你在 *第16章*，*在视图控制器之间传递数据* 中完成的 *JRNL* 应用程序，使其使用 SwiftData 将日记条目保存到设备存储中，这样你下次启动应用程序时所做的任何更改都会保留。首先，你了解了
    SwiftData 及其不同的组件。接下来，你修改了 `JournalEntry` 类以使其与 SwiftData 一起工作，并修改了你的 `JournalListViewController`
    类以与修改后的 `JournalEntry` 类一起工作。之后，你添加了代码，允许你从 SwiftData 模型容器中检索、添加和删除日记条目，最后，你修改了
    `JournalViewController` 类，使其能够读取、保存和删除存储的日记条目。
- en: You now have a basic understanding of how SwiftData works, and you will now
    be able to write your own apps that use SwiftData to save app data. Great job!
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在对 SwiftData 的工作原理有了基本的了解，你将能够编写自己的应用程序，使用 SwiftData 来保存应用程序数据。做得好！
- en: In the next chapter, you’ll learn about the latest developments in **SwiftUI**.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将了解 **SwiftUI** 的最新发展。
- en: Join us on Discord!
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 社区！
- en: Read this book alongside other users, experts, and the author himself. Ask questions,
    provide solutions to other readers, chat with the author via Ask Me Anything sessions,
    and much more. Scan the QR code or visit the link to join the community.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他用户、专家和作者本人一起阅读这本书。提出问题，为其他读者提供解决方案，通过 Ask Me Anything 会话与作者聊天，等等。扫描二维码或访问链接加入社区。
- en: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift%0D)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift%0D)'
- en: '[![](img/QR_Code2370024260177612484.png)](https://packt.link/ios-Swift%0D)****'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/QR_Code2370024260177612484.png)](https://packt.link/ios-Swift%0D)'
