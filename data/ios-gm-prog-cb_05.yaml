- en: Chapter 5. Adding Music to iOS Games and an Introduction to iCloud
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章. 为iOS游戏添加音乐及iCloud简介
- en: 'In this chapter, we will be focusing on the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将关注以下食谱：
- en: Adding music to games
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为游戏添加音乐
- en: Adding background and sound effects
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加背景和声音效果
- en: Introduction to iCloud
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iCloud简介
- en: Integration of iCloud with iOS games
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iCloud与iOS游戏的集成
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In [Chapter 4](part0031_split_000.html#page "Chapter 4. Particle System and
    Game Performance"), *Particle System and Game Performance*, we created a full
    game of collecting coins by FlyingSpaceship containing sprites, scenes, parallax
    infinite scrolling background, particle effects, and many more except music. Now
    we are moving forward to add the most interesting part to the game, which is music.
    Music and sound effects brings a sense of engagement and fun to the game; no game
    exists without music. So we will be integrating some cool and awesome background
    music and sound effects into the FlyingSpaceship game built in the previous chapters.
    Moreover, we will be enlightening a new technology called iCloud and its framework
    recently released by Apple. Using iCloud, we can easily and securely store and
    retrieve the app data like a database from the iCloud, which is provided by Apple.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](part0031_split_000.html#page "第4章. 粒子系统与游戏性能")中，我们创建了一个完整的游戏，通过FlyingSpaceship收集金币，包含精灵、场景、透视无限滚动背景、粒子效果等，除了音乐。现在我们继续前进，添加游戏中最有趣的部分，即音乐。音乐和声音效果为游戏带来了参与感和乐趣；没有音乐的游戏是不存在的。因此，我们将集成一些酷炫和令人惊叹的背景音乐和声音效果到之前章节中构建的FlyingSpaceship游戏中。此外，我们还将介绍苹果最近发布的新技术iCloud及其框架。使用iCloud，我们可以轻松且安全地将应用数据（如数据库）存储和检索到iCloud，这是苹果提供的。
- en: Adding music to games
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为游戏添加音乐
- en: No video or movie is complete without music and neither is a game. Our end goal
    in this topic is to integrate some smoothing and awesome sound effects to make
    it look like a complete game that can be enjoyed by the user. So, in iOS development,
    there are many ways to integrate and play audio in an app or in a game. Some are
    system sound services, AVAudioPlayer, audio queue services, and OpenAL. All are
    used for some or the other purpose and utility in an app.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 没有音乐或电影的完整，游戏也是如此。在这个主题中，我们的最终目标是集成一些平滑和令人惊叹的声音效果，使其看起来像一款完整的游戏，用户可以享受。因此，在iOS开发中，有许多方法可以将音频集成到应用或游戏中。有些是系统声音服务，AVAudioPlayer，音频队列服务和OpenAL。所有这些都在应用中用于某些目的和效用。
- en: In this recipe, we will be discussing different ways of integrating music and
    sound effects provided by iOS. And in the upcoming section, we will integrate
    background music and some sound effects at specific events happening in our FlyingSpaceship
    game, which will be the starter kit for this chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将讨论iOS提供的不同方式集成音乐和声音效果。在接下来的部分中，我们将集成背景音乐和一些在FlyingSpaceship游戏中特定事件发生时的声音效果，这将是本章的入门套件。
- en: Getting ready
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Before starting with the technical ways of integrating music and sound effects
    in the game, we should have an understanding of how audio is added in videos,
    movies, or wherever audio is required. In a game, there has to be background music
    and some sound effects at the events that need the attention of the user. All
    these music and sound effects are to be decided on the basis of the theme of the
    game. So the prerequisite for this section is to have a common sense of music
    and sound effects.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始介绍在游戏中集成音乐和声音效果的技术方法之前，我们应该了解音频是如何添加到视频、电影或需要音频的任何地方的。在游戏中，必须有背景音乐和一些在需要用户注意的事件中的声音效果。所有这些音乐和声音效果都应根据游戏的主题来决定。因此，本节的前提是具备音乐和声音效果的常识。
- en: How to do it...
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Now we will look at some of the ways to implement sound services in our app.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将探讨在我们的应用中实现声音服务的一些方法。
- en: System Sound Services
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 系统声音服务
- en: 'This is an easy way of playing audio files. For playing an audio sound using
    System Sound Services and to see how it works, the following are the steps involved:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个播放音频文件简单的方法。为了使用系统声音服务播放音频声音并了解其工作原理，以下是一些涉及步骤：
- en: 'Add an audio file to the project, and using `mainBundle` get the path of the
    audio file:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将音频文件添加到项目中，并使用`mainBundle`获取音频文件的路径：
- en: '[PRE0]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here we have used the `.caf` format for the audio files. This is the recommended
    Apple format.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们使用了`.caf`格式的音频文件。这是推荐的苹果格式。
- en: 'Using the path, form a `NSURL`, which will be used to create a `SystemSoundID`:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用路径，形成一个 `NSURL`，它将被用来创建一个 `SystemSoundID`：
- en: '[PRE1]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then create a `systemSoundID` using the `NSURL` formed earlier and a property
    declared as `SystemSoundID` named `sampleSound` in the code:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后使用之前形成的`NSURL`和代码中声明的名为`sampleSound`的`SystemSoundID`属性创建一个`systemSoundID`：
- en: '[PRE2]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Finally, using the `systemSoundID` that is, `self.sampleSound`, play the audio
    file.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用`systemSoundID`，即`self.sampleSound`，播放音频文件。
- en: '[PRE3]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For playing an audio sound using AVAudioPlayer AVFoundation framework is needed
    so it has to be imported and then add an audio file to the project and using `mainBundle`
    get the path of the audio file. To import the framework add the following line
    of code:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用`AVAudioPlayer`播放音频声音，需要AVFoundation框架，因此必须导入该框架，并将音频文件添加到项目中，然后使用`mainBundle`获取音频文件的路径。要导入框架，请添加以下代码行：
- en: '[PRE4]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now create an instance of AVAudioPlayer with content as the `NSURL` of the file
    to be played with error.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建一个`AVAudioPlayer`实例，内容为要播放的文件的`NSURL`，并带有错误。
- en: '[PRE5]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: After that call a `prepareToPlay` method on the `AVAudioPlayer` object so that
    it prepares the audio file to be played.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`AVAudioPlayer`对象上调用`prepareToPlay`方法，以便准备播放音频文件。
- en: '[PRE6]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Before playing the audio file, we can set the `volume` and `numberOfLoops` and
    lastly we can play the audio file.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在播放音频文件之前，我们可以设置`volume`和`numberOfLoops`，最后我们可以播放音频文件。
- en: '[PRE7]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: AVAudioPlayer
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AVAudioPlayer
- en: Audio Queue Services
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 音频队列服务
- en: Audio Queue Services is high-level audio stuff as it is a way to record and
    play audios. It lets your app use hardware recording and playback using microphones
    and loudspeakers without the knowledge of the hardware interface. It provides
    fine-grained timing control for scheduling playback and synchronization. For further
    information on Audio Queue Services see the *There's more* section.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 音频队列服务是高级音频功能，因为它是一种记录和播放音频的方法。它允许您的应用程序使用麦克风和扬声器进行硬件录制和播放，而无需了解硬件接口。它提供了精细的时间控制，用于安排播放和同步。有关音频队列服务的更多信息，请参阅*更多内容*部分。
- en: Above all are not suitable where there is a need for fine-grained control of
    audio with low latency; in such cases, only OpenAL is appropriate to be used,
    which is a cross-platform audio library supported by iOS. Learning OpenAL is a
    steep learning curve. So, to understand and implement it see, the *There's more*
    section.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在需要低延迟精细控制音频的情况下，以上方法并不适用；在这种情况下，仅适合使用OpenAL，这是一个由iOS支持的跨平台音频库。学习OpenAL具有陡峭的学习曲线。因此，要理解和实现它，请参阅*更多内容*部分。
- en: How it works…
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'System Sound Services is particularly used for playing audio alerts and simple
    game sound effects such as click sound for moving a character in the game. Every
    sound that is played using this is assigned a `systemSoundID`. All of the tracking
    is based on this ID, such as stopping, pausing, and different actions that can
    be applied on an audio. All we have to do is add this set of lines to play a sound:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 系统声音服务特别用于播放音频警报和简单的游戏音效，例如游戏中移动角色的点击声。使用此方法播放的每个声音都会分配一个`systemSoundID`。所有跟踪都基于此ID，例如停止、暂停以及可以对音频应用的不同操作。我们只需添加以下几行代码即可播放声音：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `sampleSound` is declared as a `SystemSoundID` property so that the sound
    can be disposed later in the `dealloc` method. If the sound is disposed immediately
    after the `AudioServicesPlaySystemSound` method, then the sound will never play.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`sampleSound`被声明为一个`SystemSoundID`属性，以便可以在`dealloc`方法中稍后处理声音。如果在`AudioServicesPlaySystemSound`方法之后立即处理声音，则声音将永远不会播放。'
- en: There are some disadvantages of System Sound Services, such as only `.caf`,
    `.aif`, and `.wav` audio file formats are supported, sounds cannot be more than
    30 seconds, and only one sound can be played at a time.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 系统声音服务有一些缺点，例如仅支持`.caf`、`.aif`和`.wav`音频文件格式，声音长度不能超过30秒，并且一次只能播放一个声音。
- en: There's more…
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: Other than System Sound Services and AVAudioPlayer, there are two more advanced
    ways of playing audio which are Audio Queue Services used for playback and recording
    and OpenAL for fine-grained control of timing. You can explore Apple's docs for
    Core Audio overview and Audio Session Programming Guide.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 除了系统声音服务和`AVAudioPlayer`之外，还有两种更高级的音频播放方式：用于播放和记录的音频队列服务以及用于精细控制时序的OpenAL。您可以探索Apple的Core
    Audio概述和音频会话编程指南。
- en: See also
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'For better understanding and learning of Audio Queue Services and OpenAL, you
    can visit the following links:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解和学习音频队列服务和OpenAL，您可以访问以下链接：
- en: '[https://developer.apple.com/library/mac/documentation/MusicAudio/Conceptual/AudioQueueProgrammingGuide/Introduction/Introduction.html](https://developer.apple.com/library/mac/documentation/MusicAudio/Conceptual/AudioQueueProgrammingGuide/Introduction/Introduction.html)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://developer.apple.com/library/mac/documentation/MusicAudio/Conceptual/AudioQueueProgrammingGuide/Introduction/Introduction.html](https://developer.apple.com/library/mac/documentation/MusicAudio/Conceptual/AudioQueueProgrammingGuide/Introduction/Introduction.html)'
- en: '[https://developer.apple.com/library/ios/documentation/audiovideo/conceptual/multimediapg/usingaudio/usingaudio.html](https://developer.apple.com/library/ios/documentation/audiovideo/conceptual/multimediapg/usingaudio/usingaudio.html)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://developer.apple.com/library/ios/documentation/audiovideo/conceptual/multimediapg/usingaudio/usingaudio.html](https://developer.apple.com/library/ios/documentation/audiovideo/conceptual/multimediapg/usingaudio/usingaudio.html)'
- en: Adding background and sound effects
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加背景和音效
- en: After understanding some ways of integrating audio in the app, the most commonly
    used and easiest way is AVAudioPlayer. Basically, in this recipe, we will be adding
    background music, which will be running forever, and some sound effects on specific
    events where the user's attention is required or where the user has to be notified
    of some change. This adding of background music and sound effects will be done
    in our game FlyingSpaceship built in the previous chapters.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解了一些在应用程序中集成音频的方法之后，最常用且最简单的方法是 AVAudioPlayer。基本上，在本菜谱中，我们将添加将永远运行的背景音乐，以及在需要用户注意或用户需要被告知某些变化的具体事件上的音效。添加背景音乐和音效将在前几章中构建的
    FlyingSpaceship 游戏中完成。
- en: Getting ready
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Before starting with the addition of background music and sound effects on some
    events, we should have a good understanding of the `AVAudioPlayer` class and the
    `AVFoundation` framework. So the prerequisite for this section is to have knowledge
    of how to play audio using the AVAudioPlayer class as discussed in the preceding
    recipe.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始添加背景音乐和某些事件上的音效之前，我们应该对 `AVAudioPlayer` 类和 `AVFoundation` 框架有一个很好的理解。因此，本节的前提是了解如何使用
    AVAudioPlayer 类播放音频，如前一道菜谱中讨论的那样。
- en: How to do it…
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We have the full game FlyingSpaceship built in which the addition of background
    music and sound effects will be done as discussed in the upcoming steps. To accomplish
    both, add two audio files `background-music.caf` and `coin-collected-sound.caf`
    to the resources folder of the project. Now perform the following steps:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经构建了完整的游戏 FlyingSpaceship，其中将在接下来的步骤中添加背景音乐和音效。为了完成这两项任务，将两个音频文件 `background-music.caf`
    和 `coin-collected-sound.caf` 添加到项目的资源文件夹中。现在执行以下步骤：
- en: Now we will add background music to make it a complete game. First of all import
    the module `AVFoundation` in the `FSMyScene` file of FlyingSpaceship.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将为游戏添加背景音乐，使其成为一个完整的游戏。首先，在 FlyingSpaceship 的 `FSMyScene` 文件中导入模块 `AVFoundation`。
- en: '[PRE9]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Declare a property named `backgroundAudioPlayer` as an object of `AVAudioPlayer`.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个名为 `backgroundAudioPlayer` 的属性，作为 `AVAudioPlayer` 对象。
- en: '[PRE10]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As explained in the code snippet of the *AVAudioPlayer* section, create a path
    and `NSURL` file using the `background-music.caf` file.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如 *AVAudioPlayer* 部分的代码片段中所述，使用 `background-music.caf` 文件创建路径和 `NSURL` 文件。
- en: '[PRE11]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Just initialize the property `self.backgroundAudioPlayer` with the new `AVAudioPlayerobject`.
    This will also need an error object and the audio file, which we created earlier.
    All the errors will be logged in the object that we have passed in the parameter..
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只需将属性 `self.backgroundAudioPlayer` 初始化为新的 `AVAudioPlayerobject`。这还需要一个错误对象和之前创建的音频文件。所有错误都将记录在我们传递的参数中对应的对象里。
- en: '[PRE12]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: After this, call `prepareToPlay` on that object, set some volume such as 1.0,
    and in order to play it infinitely set `numberOfLoops` to `-1`.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此之后，调用该对象的 `prepareToPlay`，设置一些音量，例如 1.0，为了无限播放，将 `numberOfLoops` 设置为 `-1`。
- en: '[PRE13]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Finally, after all of this, play the background music that never ends.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在这之后，播放永不结束的背景音乐。
- en: '[PRE14]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: After this, gather the code in a function called `startBackgroundMusic` and
    it will look like this:![How to do it…](img/00079.jpeg)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将代码收集到一个名为 `startBackgroundMusic` 的函数中，其代码如下：![如何做到这一点…](img/00079.jpeg)
- en: To make it play the background music, call the `startBackgroundMusic` function
    in the `initWithSize` method of `FSMyScene`.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要播放背景音乐，请在 `FSMyScene` 的 `initWithSize` 方法中调用 `startBackgroundMusic` 函数。
- en: Now, compile and run the project; you should be able to listen to the background
    music in the game.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，编译并运行项目；你应该能够听到游戏中的背景音乐。
- en: Now we will add a sound effect in the game when a coin is collected. For this,
    declare a property named `coinCollectedAudioPlayer` as an object of AVAudioPlayer.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将在游戏中添加一个收集硬币时的音效。为此，声明一个名为 `coinCollectedAudioPlayer` 的属性，作为 AVAudioPlayer
    对象。
- en: '[PRE15]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As explained in the code snippet in the *AVAudioPlayer* section, create a path
    and a `NSURL` file using `coin-collected-sound.caf` file.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如 *AVAudioPlayer* 部分的代码片段中所述，创建一个路径和一个 `NSURL` 文件，使用 `coin-collected-sound.caf`
    文件。
- en: '[PRE16]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Assign an `AVAudioPlayer` object with the preceding sound effect file with the
    error as the parameter to the `self.coinCollectedAudioPlayer` property. And after
    creating this, check for errors, if any, print an error message, and return from
    there.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将带有错误参数的前一个音效文件分配给 `self.coinCollectedAudioPlayer` 属性的 `AVAudioPlayer` 对象。创建此对象后，检查是否有错误，如果有，打印错误消息，然后从那里返回。
- en: '[PRE17]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: After that, call `prepareToPlay` on that object, set some volume such as 1.0
    and play it once you set `numberOfLoops` to `1`.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，调用该对象的 `prepareToPlay`，设置一些音量，例如 1.0，一旦将 `numberOfLoops` 设置为 `1`，就播放一次。
- en: '[PRE18]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Finally, after all of this, play the sound effect that has to be played when
    the coin is collected by the spaceship.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在完成所有这些之后，播放当太空船收集到硬币时必须播放的音效。
- en: '[PRE19]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: After all of this, gather the code in a function called `playCoinCollectedSoundEffect`
    and it will look like this:![How to do it…](img/00080.jpeg)
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在完成所有这些之后，将代码收集到一个名为 `playCoinCollectedSoundEffect` 的函数中，它看起来像这样：![如何操作…](img/00080.jpeg)
- en: To make it play when the coin collides with the spaceship, call the `playCoinCollectedSoundEffect`
    function when `spaceShipCollidedWithCoin` is called by the detection of a collision.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使硬币与太空船碰撞时播放，当检测到碰撞时调用 `spaceShipCollidedWithCoin` 函数时，调用 `playCoinCollectedSoundEffect`
    函数。
- en: After all the integration of background music and sound effects, our starter
    kit for this chapter is ready.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在所有背景音乐和音效集成之后，我们这一章的入门套件就准备好了。
- en: How it works…
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: How the AVAudioPlayer works and how the background music and sound effects are
    played has been explained in the preceding topic. Here the difference between
    background music and sound effect was the `numberOfLoops` property of AVAudioPlayer
    object. It was `-1` for the background music and `1` for sound effect of collecting
    the coin by the spaceship.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: AVAudioPlayer 的工作原理以及背景音乐和音效的播放已在前面的话题中解释。这里背景音乐和音效之间的区别是 AVAudioPlayer 对象的
    `numberOfLoops` 属性。对于背景音乐是 `-1`，对于太空船收集硬币的音效是 `1`。
- en: There's more…
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: Using the same AVAudioPlayer, we can play multiple sound effects together such
    as playing a sound of movement when the spaceship moves and the coin is collected.
    So for further enhancement in music and sound effects, there is no limit.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用相同的 AVAudioPlayer，我们可以一起播放多个音效，例如当太空船移动并且收集到硬币时播放移动的声音。所以，在音乐和音效的进一步增强上，没有限制。
- en: See also
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For better understanding and learning of Core Audio in iOS, visit the link [https://developer.apple.com/library/mac/documentation/MusicAudio/Conceptual/CoreAudioOverview/CoreAudioEssentials/CoreAudioEssentials.html](https://developer.apple.com/library/mac/documentation/MusicAudio/Conceptual/CoreAudioOverview/CoreAudioEssentials/CoreAudioEssentials.html).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要更好地理解和学习 iOS 中的 Core Audio，请访问链接 [https://developer.apple.com/library/mac/documentation/MusicAudio/Conceptual/CoreAudioOverview/CoreAudioEssentials/CoreAudioEssentials.html](https://developer.apple.com/library/mac/documentation/MusicAudio/Conceptual/CoreAudioOverview/CoreAudioEssentials/CoreAudioEssentials.html)。
- en: Introduction to iCloud
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: iCloud 简介
- en: Apple has introduced a technology called iCloud that leverages the power of
    building apps using the new CloudKit framework. Using iCloud, we can easily and
    securely store and retrieve our app data in the form of a database in the cloud
    built by Apple. The CloudKit framework provides a way for users to anonymously
    sign into the apps with their iCloud Apple IDs without sharing their personal
    information. The most important part is that CloudKit makes the developer focus
    on the client-side app development and does the server-side application logic
    by iCloud itself. It also provides an authenticated, private, and public database
    storage services, which are for free with very high limits of storage.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果推出了一种名为 iCloud 的技术，该技术利用了使用新的 CloudKit 框架构建应用程序的能力。使用 iCloud，我们可以轻松且安全地将我们的应用程序数据以数据库的形式存储和检索在苹果构建的云中。CloudKit
    框架为用户提供了一种使用他们的 iCloud Apple ID 匿名登录应用程序的方法，而无需共享他们的个人信息。最重要的是，CloudKit 让开发者专注于客户端应用程序开发，而
    iCloud 本身则处理服务器端应用程序逻辑。它还提供了认证的、私有的和公共数据库存储服务，这些服务免费提供，存储限制非常高。
- en: In this recipe, we will be doing an introduction of iCloud and its framework
    CloudKit. We will understand how the iCloud services are enabled in Xcode, iTunes
    Connect, playing with provisioning profiles for development devices to integrate
    iCloud for apps. Later in this next section, we will integrate the iCloud service
    with our game FlyingSpaceship.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将介绍iCloud及其框架CloudKit。我们将了解如何在Xcode、iTunes Connect中启用iCloud服务，以及如何通过开发设备的配置文件来集成iCloud。在下一节中，我们将将iCloud服务集成到我们的游戏FlyingSpaceship中。
- en: Getting ready…
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作…
- en: Before starting to make a setup with iCloud and the CloudKit framework, we should
    know about some features of Xcode capabilities, iTunes Connect, and provisioning
    profiles. Also, we must have an understanding of core data, storing, and retrieving
    data in iOS for a smooth use and integration of the CloudKit framework. These
    are the prerequisites for starting to use the new technology iCloud and its framework.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用iCloud和CloudKit框架进行设置之前，我们应该了解一些Xcode功能、iTunes Connect和配置文件的特性。此外，我们还必须了解iOS中的核心数据、存储和检索数据，以便顺利使用和集成CloudKit框架。这些都是开始使用新技术iCloud及其框架的先决条件。
- en: 'To integrate iCloud in any app, the following steps are a must before starting
    with the setup to be done in Xcode:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要将iCloud集成到任何应用程序中，在Xcode中进行设置之前，以下步骤是必须的：
- en: A Mac computer with Xcode 6 or later installed
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装了Xcode 6或更高版本的Mac计算机
- en: Membership in either iOS or Mac Developer Program
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iOS或Mac开发者计划的会员资格
- en: Permission to create the code signing identities and provisioning profiles in
    Member Center
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在会员中心创建代码签名标识和配置文件的权限
- en: Lastly, after all this, our Xcode project should be built without errors
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，在所有这些之后，我们的Xcode项目应该可以无错误地构建
- en: How to do it…
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'In this recipe, we will learn about the steps to enable CloudKit in our app.
    CloudKit is an app service provided by Apple. It is only available for the apps
    distributed by the App Store or the Mac App Store. CloudKit requires some additional
    configuration to be done from our Xcode Project. Our app must be provisioned and
    code signed to access the CloudKit service. So we will enable CloudKit for our
    FlyingSpaceship game. Perform the following steps to enable CloudKit in the Xcode
    project for our game:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何在我们的应用程序中启用CloudKit的步骤。CloudKit是由苹果公司提供的一个应用程序服务。它仅适用于通过App Store或Mac
    App Store分发的应用程序。CloudKit需要从我们的Xcode项目中执行一些额外的配置。我们的应用程序必须经过配置和代码签名才能访问CloudKit服务。因此，我们将为我们的FlyingSpaceship游戏启用CloudKit。按照以下步骤在Xcode项目中为我们的游戏启用CloudKit：
- en: Open the Xcode Project (FlyingSpaceship) in which we want to enable and use
    CloudKit services.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们想要启用和使用CloudKit服务的Xcode项目（FlyingSpaceship）。
- en: Click on the **Project** in the Project Navigator and we can see the **General**
    section selected.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击**项目**，我们可以看到已选中**常规**部分。
- en: Select the **FlyingSpaceship** target and then select the next section **Capabilities**.![How
    to do it…](img/00081.jpeg)
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**FlyingSpaceship**目标，然后选择下一部分**功能**。![如何操作…](img/00081.jpeg)
- en: Now, click on the first row, that is, **iCloud** and a section similar to this
    will open:![How to do it…](img/00082.jpeg)
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击第一行，即**iCloud**，将打开一个类似的部分：![如何操作…](img/00082.jpeg)
- en: Now, on the right-hand side, switch to iCloud and some loading will occur.![How
    to do it…](img/00083.jpeg)
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在右侧，切换到iCloud，将发生一些加载。![如何操作…](img/00083.jpeg)
- en: Once the loading has finished, the iCloud will be enabled and giving options
    as shown in the following screenshot:![How to do it…](img/00084.jpeg)
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦加载完成，iCloud将被启用，并显示如下截图所示选项：![如何操作…](img/00084.jpeg)
- en: As we can see, there are are three services by iCloud; enable them as needed
    by the app. For now, we will enable CloudKit.![How to do it…](img/00085.jpeg)
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如我们所见，iCloud提供了三个服务；根据应用程序的需要启用它们。目前，我们将启用CloudKit。![如何操作…](img/00085.jpeg)
- en: Also, a button called **CloudKit Dashboard** is visible. On clicking this button,
    we will be redirected to the CloudKit dashboard of the app FlyingSpaceship in
    Apple's iTunes Connect. The sidebar, record types to be added, and the container
    section of CloudKit dashboard look like this.![How to do it…](img/00086.jpeg)
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，还有一个名为**CloudKit仪表板**的按钮可见。点击此按钮，我们将被重定向到苹果iTunes Connect中应用程序FlyingSpaceship的CloudKit仪表板。CloudKit仪表板的侧边栏、要添加的记录类型和容器部分看起来如下。![如何操作…](img/00086.jpeg)
- en: The dashboard is used to perform many database management tasks such as modifying
    schemas and records as shown in the preceding screenshot. A container's databases
    for an app exist both in the development and the production environment. Using
    the dashboard, we can play with the records creating, deleting, modifying, and
    so on.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仪表板用于执行许多数据库管理任务，例如修改模式和记录，如前一个屏幕截图所示。一个应用程序的容器数据库存在于开发和生产环境中。使用仪表板，我们可以对记录进行创建、删除、修改等操作。
- en: To explore sign in to the dashboard and click on the options in the left column,
    which has many operations to do as depicted in the following screenshot:![How
    to do it…](img/00087.jpeg)
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要探索登录仪表板并点击左侧列中的选项，该列有许多操作，如以下屏幕截图所示：![如何操作…](img/00087.jpeg)
- en: How it works…
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作…
- en: The iCloud technology provides an easy and secure way of creating an app that
    stores a structured app and user data in a server called iCloud. Using the CloudKit
    framework, instances of an iCloud-enabled app, which is launched by different
    users on different devices, can access the assets stored in the app's database.
    After enabling iCloud for any app, we can make model objects for our app, which
    persist and are shared between multiple apps running on a large range of devices.
    These data or model objects are stored as records in the database and can be accessed
    by the authorized users.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: iCloud技术提供了一种简单且安全的方式来创建一个应用程序，该应用程序将结构化应用程序和用户数据存储在称为iCloud的服务器上。使用CloudKit框架，不同设备上由不同用户启动的iCloud应用程序实例可以访问应用程序数据库中存储的资产。在为任何应用程序启用iCloud之后，我们可以为我们的应用程序创建模型对象，这些对象在多个设备上运行的应用程序之间持久存在并共享。这些数据或模型对象以记录的形式存储在数据库中，并且可以被授权用户访问。
- en: iCloud is a free service provided by Apple that lets users access their personal
    data on all their devices by their Apple ID. It does all this by combining network-based
    storage dedicated APIs with full support of OS. Apple encourages building iCloud-enabled
    apps by providing server infrastructure, backups, and user accounts.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: iCloud是苹果公司提供的一项免费服务，允许用户通过Apple ID在其所有设备上访问其个人数据。它通过结合基于网络的专用API和OS的全面支持来实现这一切。苹果公司通过提供服务器基础设施、备份和用户账户来鼓励构建启用iCloud的应用程序。
- en: The following is a pictorial representation of iCloud's core idea, which addresses
    the problem of synchronization between multiple devices. A user using an iCloud
    app need not think about syncing his/her devices. When the user adopts iCloud
    storage, as depicted in the following diagram, all the changes appear automatically
    on all the devices that are attached to that iCloud account.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 下图是iCloud核心思想的图示，它解决了多个设备之间同步的问题。使用iCloud应用程序的用户无需考虑其设备的同步。当用户采用iCloud存储时，如以下图所示，所有更改都会自动出现在连接到该iCloud账户的所有设备上。
- en: '![How it works…](img/00088.jpeg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/00088.jpeg)'
- en: There's more…
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'iCloud supports many kinds of storage. The storage types are:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: iCloud支持许多种类的存储。存储类型包括：
- en: Key-value storage such as user preferences, settings, and simple app state data
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如用户偏好、设置和简单的应用程序状态数据之类的键值存储
- en: iCloud document storage such as word-processing documents and drawings
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如文字处理文档和绘图之类的iCloud文档存储
- en: Core data storage for multidevice database solutions for structured content
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构化内容的多种设备数据库解决方案的核心数据存储
- en: CloudKit storage for managing structured data ourselves and sharing among ourselves
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudKit存储用于我们自行管理和共享结构化数据
- en: To store data on iCloud, we can use any of these depending upon our requirement
    and capabilities. Moving forward, we can pick these storage types and make an
    iCloud app for sharing the storage on multiple devices.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 要在iCloud上存储数据，我们可以根据我们的需求和能力使用这些方法中的任何一种。继续前进，我们可以选择这些存储类型并创建一个iCloud应用程序，以在多台设备上共享存储。
- en: See also…
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考以下内容…
- en: For more information on storage types, visit the link [https://developer.apple.com/library/ios/documentation/DataManagement/Conceptual/CloudKitQuickStart/Introduction/Introduction.html#//apple_ref/doc/uid/TP40014987-CH1-SW1](https://developer.apple.com/library/ios/documentation/DataManagement/Conceptual/CloudKitQuickStart/Introduction/Introduction.html#//apple_ref/doc/uid/TP40014987-CH1-SW1).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如需了解更多关于存储类型的信息，请访问链接 [https://developer.apple.com/library/ios/documentation/DataManagement/Conceptual/CloudKitQuickStart/Introduction/Introduction.html#//apple_ref/doc/uid/TP40014987-CH1-SW1](https://developer.apple.com/library/ios/documentation/DataManagement/Conceptual/CloudKitQuickStart/Introduction/Introduction.html#//apple_ref/doc/uid/TP40014987-CH1-SW1)。
- en: Integration of iCloud with iOS games
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将iCloud与iOS游戏集成
- en: In this recipe, you will learn the steps to integrate the iCloud with iOS games.
    iCloud integration plays an important role in the development of the application
    as it helps us to support various features and enhance interdevice synchronization.
    In this recipe, we will explore and integrate a few features of the iCloud in
    our game.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，您将学习将iCloud与iOS游戏集成的步骤。iCloud集成在应用开发中扮演着重要角色，因为它帮助我们支持各种功能并增强跨设备同步。在这个菜谱中，我们将探索并集成游戏中的几个iCloud功能。
- en: Getting ready
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'As of now, we have finished the initial setup for playing with iCloud. As a
    prerequisite to integrate iCloud in any app, we must be enrolled in membership
    for iOS or the Mac Developer Program, and have the device provisioning profile
    and AppID. To accomplish this and start with the integration part, we must take
    a look at these two links:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经完成了与iCloud玩耍的初始设置。为了将iCloud集成到任何应用中，我们必须注册iOS或Mac开发者计划的会员资格，并拥有设备配置文件和AppID。为了完成这项工作并开始集成部分，我们必须查看这两个链接：
- en: '[https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/AddingCapabilities/AddingCapabilities.html#//apple_ref/doc/uid/TP40012582-CH26](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/AddingCapabilities/AddingCapabilities.html#//apple_ref/doc/uid/TP40012582-CH26)'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/AddingCapabilities/AddingCapabilities.html#//apple_ref/doc/uid/TP40012582-CH26](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/AddingCapabilities/AddingCapabilities.html#//apple_ref/doc/uid/TP40012582-CH26)'
- en: '[https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40012582](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40012582)'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40012582](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40012582)'
- en: After all the configuration part is done, we can start with the integration
    of iCloud by CloudKit in our game FlyingSpaceship.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成所有配置部分后，我们可以在游戏FlyingSpaceship中开始通过CloudKit集成iCloud。
- en: How to do it…
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: iCloud allows you to store and retrieve data easily from its secured server.
    This also provides an additional facility of sharing saved data among multiple
    applications. To save this data, our iCloud app places the data in a special local
    filesystem called the iCloud containers. It is also called **ubiquity container**,
    and serves as the local representation of the corresponding iCloud storage. This
    data is totally separate from the rest of our app data; it is kept by the operating
    system.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: iCloud允许您轻松地从其安全服务器存储和检索数据。这也提供了在多个应用程序之间共享保存数据的附加功能。为了保存这些数据，我们的iCloud应用将这些数据放置在一个特殊的本地文件系统，称为iCloud容器。它也被称为**ubiquity
    container**，作为相应iCloud存储的本地表示。这些数据完全独立于我们应用的其他数据；由操作系统保存。
- en: 'For some iCloud services, our app does not communicate directly to the iCloud
    servers, instead, the operating system manages all this uploading and downloading
    of data for the devices attached to the iCloud account. However, CloudKit provides
    the facility to manage these activities. The following are the steps required
    for using these services:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 对于某些iCloud服务，我们的应用并不直接与iCloud服务器通信，相反，操作系统管理所有这些数据上传和下载，为连接到iCloud账户的设备。然而，CloudKit提供了管理这些活动的功能。以下是为使用这些服务所需的步骤：
- en: Configure the access to our app's iCloud containers. It involves requesting
    entitlements and programmatically initializing these containers.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置对应用iCloud容器的访问。这涉及到请求权限并程序化初始化这些容器。
- en: Design the app to handle the responses of iCloud services accordingly, such
    as when the user signs out of iCloud and instances of our app on other devices
    can edit the data.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设计应用以相应地处理iCloud服务的响应，例如当用户从iCloud注销，以及在其他设备上的我们应用实例可以编辑数据时。
- en: Read/write using the proper iCloud API.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用适当的iCloud API进行读写操作。
- en: The operating system coordinates the transition of data to and from iCloud when
    needed as per the design of the app.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当需要时，操作系统根据应用的设计协调数据到iCloud和从iCloud的过渡。
- en: 'We have briefly discussed the iCloud containers already, so this is the time
    to implement the iCloud containers in our app. To implement them, we will open
    the **Capabilities** tab of our Xcode project, which manages the entitlements
    and containers of our app. When we enable iCloud in the same tab, then Xcode configures
    our app to the default iCloud container whose name is based on the app''s bundle
    ID. This default container is used by most apps as shown in the following screenshot:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经简要讨论了 iCloud 容器，现在是时候在我们的应用程序中实现 iCloud 容器了。要实现它们，我们将打开 Xcode 项目的 **能力**
    选项卡，该选项卡管理我们应用程序的权限和容器。当我们在这个选项卡中启用 iCloud 时，Xcode 将我们的应用程序配置为默认的 iCloud 容器，其名称基于应用程序的包标识符。这个默认容器被大多数应用程序使用，如下面的截图所示：
- en: '![How to do it…](img/00089.jpeg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/00089.jpeg)'
- en: 'If we want to build some app with data to be shared among each other, then
    we can enable the **Specify custom containers** option and it can be done using
    the following steps:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要构建一些需要相互共享数据的应用程序，那么我们可以启用 **指定自定义容器** 选项，并且可以通过以下步骤完成：
- en: First of all, open [https://developer.apple.com/](https://developer.apple.com/)
    in the browser, and click on **Member Center**.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在浏览器中打开 [https://developer.apple.com/](https://developer.apple.com/)，然后点击
    **会员中心**。
- en: Out of the six sections in the member center, go to the **Certificates**, **Identifiers**,
    and **Profiles** sections and then in the **iOS** section, go to **Identifiers**
    where a list of identifier types is present.![How to do it…](img/00090.jpeg)
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在会员中心的六个部分中，转到 **证书**、**标识符** 和 **配置文件** 部分，然后在 **iOS** 部分转到 **标识符**，那里有一个标识符类型的列表。[如何操作…](img/00090.jpeg)
- en: Click on the **iCloud containers** tab and we can see a default container there.![How
    to do it…](img/00091.jpeg)
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **iCloud 容器** 选项卡，我们可以在那里看到一个默认容器。[如何操作…](img/00091.jpeg)
- en: Now, to add another specific iCloud Container, click on the plus button at the
    top right of the page and then enter the ID `iCloud.com.mb.FlyingSpaceshipShared`.
    Add some description for the container.![How to do it…](img/00092.jpeg)
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，要添加另一个特定的 iCloud 容器，点击页面右上角的加号按钮，然后输入 ID `iCloud.com.mb.FlyingSpaceshipShared`。为容器添加一些描述。[如何操作…](img/00092.jpeg)
- en: After executing all the preceding steps, we can find our custom AppIDs in the
    member center.![How to do it…](img/00093.jpeg)
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行完所有前面的步骤后，我们可以在会员中心找到我们的自定义 AppID。[如何操作…](img/00093.jpeg)
- en: As the specific container is created, now go to the **Capabilities** tab of
    our app Xcode project. We can see an extra container visible in the **iCloud**
    section.![How to do it…](img/00094.jpeg)
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当特定的容器创建后，现在转到我们应用程序 Xcode 项目的 **能力** 选项卡。我们可以在 **iCloud** 部分看到一个额外的容器。[如何操作…](img/00094.jpeg)
- en: Now to use the specific container, select the **Specify custom containers**
    radio button then select the `iCloud.com.mb.FlyingSpaceshipShared` container.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在要使用特定的容器，选择 **指定自定义容器** 单选按钮，然后选择 `iCloud.com.mb.FlyingSpaceshipShared` 容器。
- en: 'Now we will prepare our code for iCloud. We will be incorporating some initial
    setup in the code for iCloud services to be used by the app. Firstly, when the
    user launches an iCloud-enabled FlyingSpaceship game for the first time, we should
    invite them to use iCloud. The choice should be all or none. Hence, to invite
    the user to use iCloud, the following are the steps of the initial setup:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将为 iCloud 准备我们的代码。我们将把一些初始设置合并到代码中，以便应用程序使用 iCloud 服务。首先，当用户第一次启动启用 iCloud
    的 FlyingSpaceship 游戏时，我们应该邀请他们使用 iCloud。选择应该是全部或无。因此，为了邀请用户使用 iCloud，以下是一些初始设置的步骤：
- en: In our app launch in the `application:didFinishLauchingWithOptions` method,
    get `ubiquityIdentityToken` from `NSFileManager`.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的应用程序启动的 `application:didFinishLaunchingWithOptions` 方法中，从 `NSFileManager`
    获取 `ubiquityIdentityToken`。
- en: '[PRE20]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Then archive the iCloud availability in the user defaults database by the `ubiquityIdentityToken`
    property fetched using `NSFileManager`.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过使用 `NSFileManager` 获取的 `ubiquityIdentityToken` 属性在用户默认数据库中存档 iCloud 可用性。
- en: '[PRE21]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now the `currentiCloudToken` function saved is the unique token representing
    the currently active iCloud account. Using this we can compare to detect whether
    the current account is different from the previous one.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，保存的 `currentiCloudToken` 函数是代表当前活动 iCloud 账户的唯一令牌。使用这个令牌，我们可以比较检测当前账户是否与上一个账户不同。
- en: When the user will enables airplane mode, iCloud will itself become inaccessible,
    but the current iCloud account will remain signed in and `ubiquityIdentityToken`
    contains the token of the current iCloud account.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户启用飞行模式时，iCloud 将无法访问，但当前 iCloud 账户将保持登录状态，并且 `ubiquityIdentityToken` 包含当前
    iCloud 账户的令牌。
- en: For the user who signs out of iCloud, the value of `ubiquityIdentityToken` sets
    to `nil`. So to receive notification, we should register as an observer of the
    `NSUbiquityIdentityDidChangeNotification` notification where the token is received.
    This is a notification for iCloud availability change and we can handle it accordingly
    in the notification selector `iCloudAccountAvailabilityChanged`.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于从iCloud注销的用户，`ubiquityIdentityToken`的值设置为`nil`。因此，为了接收通知，我们应该注册为`NSUbiquityIdentityDidChangeNotification`通知的观察者，其中接收令牌。这是一个关于iCloud可用性变化的通知，我们可以在通知选择器`iCloudAccountAvailabilityChanged`中相应地处理它。
- en: '[PRE22]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'After archiving the iCloud token and registering the iCloud notification, our
    app is ready to show an alert view in order to show invites to the user iCloud
    with two options: local only and use iCloud. For this, first of all save a Boolean
    variable for `FirstLaunchWithiCloudAvailable` when the token is retrieved:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在存档iCloud令牌并注册iCloud通知后，我们的应用程序就准备好显示一个警报视图，以向用户展示使用iCloud的邀请，并提供两个选项：仅本地和使用iCloud。为此，首先在检索令牌时保存一个布尔变量`FirstLaunchWithiCloudAvailable`：
- en: '[PRE23]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Also, call a method `showiCloudInviteAlertView` always in `didFinishLauchingWithOptions`
    . In this method, show the alert view to invite the user to use iCloud if a current
    token exists (it will exist only if the user is logged in to the iCloud Account,
    otherwise `NIL` will be returned) and also if the `FirstLaunchWithiCloudAvailable`
    bool is YES.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，始终在`didFinishLauchingWithOptions`中调用`showiCloudInviteAlertView`方法。在此方法中，如果当前存在令牌（只有在用户登录到iCloud账户时才会存在，否则返回`NIL`）并且`FirstLaunchWithiCloudAvailable`布尔值为YES，则向用户显示警报视图以邀请其使用iCloud。
- en: '[PRE24]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'After all these changes, the `didFinishLauchingWithOptions:` method will look
    like this:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行所有这些更改后，`didFinishLauchingWithOptions:`方法将看起来像这样：
- en: '![How to do it…](img/00095.jpeg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/00095.jpeg)'
- en: How it works…
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: If we start exploring iCloud Containers, then we will notice that depending
    on the design of the app in respect to iCloud integration, either the default
    container is selected or a custom container is created; the iCloud services are
    to be configured accordingly. If we do not make any custom container, then the
    default container will be configured, whose name will be based on the app's bundle
    ID.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们开始探索iCloud容器，那么我们会注意到，根据应用程序对iCloud集成的设计，要么选择默认容器，要么创建自定义容器；iCloud服务应相应配置。如果我们不创建任何自定义容器，则将配置默认容器，其名称将基于应用程序的包ID。
- en: And in order to share the data, the **Specify custom container identifiers**
    checkbox in the **Capabilities** tab of iCloud is used to add one or more container
    IDs. We need to specify the ID for the custom container created. For multiple
    container IDs, the first ID is the app's primary iCloud container.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 并且为了共享数据，我们使用iCloud的**能力**标签页中的**指定自定义容器标识符**复选框来添加一个或多个容器ID。我们需要指定为自定义容器创建的ID。对于多个容器ID，第一个ID是应用程序的主要iCloud容器。
- en: With respect to custom iCloud containers, the sharing will be available on devices
    that are signed in to the iCloud account of the same app.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 关于自定义iCloud容器，当设备登录到同一应用程序的iCloud账户时，将提供共享功能。
- en: Now we will discuss the ways to prepare the code for iCloud. If the user is
    logged in to the iCloud account for the app, then only `ubiquityIdentityToken`
    will be returned; otherwise `nil` will be returned. And this token is retrieved
    using the `NSFileManager` object. It is also saved if it exists for further use
    in the app according to the design of the app with respect to iCloud integration.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将讨论为iCloud准备代码的方法。如果用户已登录到应用程序的iCloud账户，则仅返回`ubiquityIdentityToken`；否则返回`nil`。此令牌是通过`NSFileManager`对象检索的。如果存在，它还会根据应用程序对iCloud集成的设计保存下来，以供应用程序进一步使用。
- en: We are subscribing to notifications using `NSUbiquityIdentityDidChangeNotification`
    to get a callback of all the changes in `ubiquityIdentityToken`. For example,
    it will give a callback whenever the user is logged out.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用`NSUbiquityIdentityDidChangeNotification`订阅通知，以获取`ubiquityIdentityToken`中所有更改的回调。例如，每当用户注销时，它都会提供回调。
- en: Sometimes iCloud may not be available to our app; at that time, the account
    becomes unavailable while the app is running in the background. So the app must
    remove all the references to user-specific iCloud storage and refresh the user
    interface that is dependent on the iCloud Storage.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 有时iCloud可能无法供我们的应用程序使用；在这种情况下，当应用程序在后台运行时，账户将不可用。因此，应用程序必须删除所有指向用户特定iCloud存储的引用，并刷新依赖于iCloud存储的用户界面。
- en: After the token is saved and the notification for `UbiquityIdentityChange` is
    registered, the app becomes ready to show an alert to use iCloud. According to
    the selection of the user, the relevant iCloud APIs such as key-value storage,
    iCloud document storage, and CloudKit storage are used in the code for further
    handling of iCloud data.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在令牌保存并注册了`UbiquityIdentityChange`的通知后，应用就准备好显示一个使用iCloud的警告。根据用户的选取，代码中会使用相关的iCloud
    API，例如键值存储、iCloud文档存储和CloudKit存储，以进一步处理iCloud数据。
- en: There's more…
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: As described in preceding sections, there are many iCloud Storage APIs available
    in iCloud technology such as key-value storage, iCloud document storage, and CloudKit
    storage. From all of these, the proper selection of APIs depends upon the purpose
    that has to be accomplished. Hence, as a trial, the user data of the FlyingSpaceship
    game can be used to store in the iCloud servers and share it by using any suitable
    APIs mentioned previously.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如前文所述，iCloud技术中提供了许多iCloud存储API，例如键值存储、iCloud文档存储和CloudKit存储。从所有这些中，正确的API选择取决于需要完成的目的。因此，作为一个试验，可以将飞行飞船游戏的用户数据存储在iCloud服务器上，并使用之前提到的任何合适的API进行共享。
- en: 'To study more and for proper decision making, we can take a look at the link:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 为了学习更多并做出适当的决策，我们可以查看以下链接：
- en: '[https://developer.apple.com/library/ios/documentation/General/Conceptual/iCloudDesignGuide/Chapters/iCloudFundametals.html#//apple_ref/doc/uid/TP40012094-CH6-SW28](https://developer.apple.com/library/ios/documentation/General/Conceptual/iCloudDesignGuide/Chapters/iCloudFundametals.html#//apple_ref/doc/uid/TP40012094-CH6-SW28).'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.apple.com/library/ios/documentation/General/Conceptual/iCloudDesignGuide/Chapters/iCloudFundametals.html#//apple_ref/doc/uid/TP40012094-CH6-SW28](https://developer.apple.com/library/ios/documentation/General/Conceptual/iCloudDesignGuide/Chapters/iCloudFundametals.html#//apple_ref/doc/uid/TP40012094-CH6-SW28).'
- en: See also
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'For more information and integration of iCloud in any app, we can visit the
    link:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取更多信息以及将iCloud集成到任何应用中，我们可以访问以下链接：
- en: '[https://developer.apple.com/library/ios/documentation/General/Conceptual/iCloudDesignGuide/Chapters/Introduction.html#//apple_ref/doc/uid/TP40012094-CH1-SW1](https://developer.apple.com/library/ios/documentation/General/Conceptual/iCloudDesignGuide/Chapters/Introduction.html#//apple_ref/doc/uid/TP40012094-CH1-SW1).'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.apple.com/library/ios/documentation/General/Conceptual/iCloudDesignGuide/Chapters/Introduction.html#//apple_ref/doc/uid/TP40012094-CH1-SW1](https://developer.apple.com/library/ios/documentation/General/Conceptual/iCloudDesignGuide/Chapters/Introduction.html#//apple_ref/doc/uid/TP40012094-CH1-SW1).'
