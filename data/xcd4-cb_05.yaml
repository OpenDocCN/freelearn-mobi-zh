- en: Chapter 5. Working with the Location Services and the MapKit Frameworks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章：使用位置服务和MapKit框架
- en: 'In this chapter we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Adding the CoreLocation and MapKit frameworks
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加CoreLocation和MapKit框架
- en: Building a simple CoreLocation application
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建简单的CoreLocation应用程序
- en: Determining the current GPS location
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定当前GPS位置
- en: Adding and working with the MapView control
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加和使用MapView控件
- en: Adding overlay regions to the map
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向地图添加叠加区域
- en: Adding annotation placeholders to the map
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向地图添加注释占位符
- en: Reversing geocode address information
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反向地理编码地址信息
- en: Working with the different map types
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用不同的地图类型
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter we will be taking a closer look at how we can use the CoreLocation
    and MapKit frameworks to determine the location of the user. The MapKit framework
    is based on both the Google Earth and Google Maps data, as well as the APIs that
    provide developers with a simple mechanism of integrating detailed and interactive
    mapping capabilities into their own applications.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将更深入地探讨如何使用CoreLocation和MapKit框架来确定用户的位置。MapKit框架基于Google Earth和Google
    Maps数据，以及为开发者提供简单机制将详细和交互式地图功能集成到他们自己的应用程序的API。
- en: The core element of the MapKit framework is the `MKMapView` class. This class
    is a subclass of `UIView` that provides a canvas onto which map and/or satellite
    information is presented to the user. We will also learn how we can add placeholders
    directly onto the map and create annotations for these.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: MapKit框架的核心元素是`MKMapView`类。这个类是`UIView`的子类，它提供了一个画布，用于向用户展示地图和/或卫星信息。我们还将学习如何直接在地图上添加占位符并为这些占位符创建注释。
- en: Finally, we will learn how we can use the `CLGeoLocation` class to apply reverse
    geocoding of the map coordinates to display location information, as well as applying
    the different types of map views.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将学习如何使用`CLGeoLocation`类来应用地图坐标的反地理编码以显示位置信息，以及应用不同类型的地图视图。
- en: Adding the CoreLocation and MapKit frameworks
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加CoreLocation和MapKit框架
- en: In this recipe we will learn how to include the CoreLocation and MapKit frameworks
    to our project.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，我们将学习如何将CoreLocation和MapKit框架包含到我们的项目中。
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this section we will learn how to create a new application and add the frameworks
    to our project.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何创建一个新的应用程序并将框架添加到我们的项目中。
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To begin, follow these simple steps as outlined in the following order:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请按照以下顺序遵循以下简单步骤：
- en: Launch Xcode from the `/Xcode4/Applications` folder.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`/Xcode4/Applications`文件夹启动Xcode。
- en: Choose **Create a new Xcode project**, or go to **File** | **New Project**.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**创建新的Xcode项目**，或转到**文件** | **新建项目**。
- en: Select the **Single View Application** template from the list of available templates.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从可用模板列表中选择**单视图应用程序**模板。
- en: Click on the **Next** button to proceed to the next step in the wizard.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**按钮，继续向导的下一步。
- en: Next, enter in `CoreLocation` as the name for your project.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，输入`CoreLocation`作为您项目的名称。
- en: Choose **iPhone** from under the **Devices** drop-down list.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**设备**下拉列表中选择**iPhone**。
- en: Ensure that the **Use Storyboards** checkbox has not been selected.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保未选中**使用故事板**复选框。
- en: Ensure that the **Use Automatic Reference Counting** checkbox is selected.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保选中**使用自动引用计数**复选框。
- en: Ensure that the **Include Unit Tests** checkbox has not been ticked.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保未勾选**包含单元测试**复选框。
- en: Click on the **Next** button to proceed to the next step in the wizard.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**按钮，继续向导的下一步。
- en: Specify the location where you would like to save your project.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定您希望保存项目的位置。
- en: Then, click on the **Create** button to continue and display the Xcode workspace.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击**创建**按钮继续并显示Xcode工作空间。
- en: 'Our next step is to add the CoreLocation framework to our project. This can
    be achieved by performing these simple steps outlined as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们下一步是向项目中添加CoreLocation框架。这可以通过执行以下简单步骤实现：
- en: Select the **CoreLocation** project from the **Project Navigator** section.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**项目导航器**部分选择**CoreLocation**项目。
- en: Then, select your project from under the **TARGETS** group.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，从**TARGETS**组下选择您的项目。
- en: Select the **Build Phases** tab and expand the **Link Binaries With Libraries**
    disclosure triangle.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**构建阶段**标签并展开**链接二进制与库**展开箭头。
- en: Click on the **+** button and select the **CoreLocation.framework** from the
    list.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**+**按钮，并从列表中选择**CoreLocation.framework**。
- en: Then, click on the **Add** button to add the framework to your project as shown
    in the following screenshot:![How to do it...](img/3349_05_01.jpg)
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击 **Add** 按钮将框架添加到您的项目中，如图所示：![如何操作...](img/3349_05_01.jpg)
- en: Repeat steps 4 and 5 to add the `MapKit.framework` to your project.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复步骤 4 和 5，将 `MapKit.framework` 添加到您的项目中。
- en: Note
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you cant find the framework you are looking for, there is also the added
    ability to search for this directly right from within the list of available frameworks.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您找不到所需的框架，还可以直接从可用的框架列表中搜索此框架。
- en: How it works...
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe we learned how to add both the CoreLocation and MapKit frameworks
    to our project so that we can use these to determine our current location and
    handle geocoding information to add placeholders to the map.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们学习了如何将 CoreLocation 和 MapKit 框架添加到我们的项目中，以便我们可以使用这些来确定我们的当前位置并处理地理编码信息以向地图添加占位符。
- en: See also
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Building a simple CoreLocation application* recipe
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*构建 CoreLocation 简单应用程序* 食谱'
- en: Building a simple CoreLocation application
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 CoreLocation 简单应用程序
- en: In this recipe we will learn how to build the user interface for our Core Location
    project.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将学习如何构建我们的 Core Location 项目的用户界面。
- en: Getting ready
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this section we will start by building the components that will comprise
    of our user interface for our CoreLocation application.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将首先构建将构成我们 CoreLocation 应用程序用户界面的组件。
- en: How to do it...
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To begin, follow these simple steps as outlined in the following order:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，按照以下顺序遵循以下简单步骤：
- en: Select `ViewController.xib` file from the **Project Navigator** section.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **Project Navigator** 部分选择 `ViewController.xib` 文件。
- en: From **Object Library**, select and drag a (**UIToolbar**) toolbar control,
    and add this to the top of the view and select the **Item** button located within
    our toolbar that we previously added.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **Object Library** 中选择并拖动一个 (**UIToolbar**) 工具栏控件，并将其添加到视图的顶部，并选择我们之前添加的工具栏中的
    **Item** 按钮。
- en: From the **Attributes Inspector** section, change the value of **Title** to
    **Change Map**.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **Attributes Inspector** 部分更改 **Title** 的值为 **Change Map**。
- en: Next, from **Object Library**, select and drag a (**MKMapView**) map view control
    to the center of our **View Controller**, and adjust the size of the **Map View**
    section to fill the entire area of the screen:![How to do it...](img/3349_05_02.jpg)
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从 **Object Library** 中选择并拖动一个 (**MKMapView**) 地图视图控件到 **View Controller**
    的中心，并调整 **Map View** 部分的尺寸以填充整个屏幕：![如何操作...](img/3349_05_02.jpg)
- en: 'The following screenshot shows the completed user interface with the added
    UIToolbar and button, as well as the `MapView` control:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了添加了 UIToolbar 和按钮以及 `MapView` 控件的完成用户界面：
- en: '![How to do it...](img/3349_05_03.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/3349_05_03.jpg)'
- en: 'Our next step is to create the `Outlet` and `property` events for the **Change
    Map** button and **MKMapView** control. Creating these will allow us to access
    the associated methods and control properties directly within our code. To create
    an `Outlet` event, follow these simple steps:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一步是创建 **Change Map** 按钮 和 **MKMapView** 控件的 `Outlet` 和 `property` 事件。创建这些将允许我们在代码中直接访问相关方法和控制属性。要创建
    `Outlet` 事件，请按照以下简单步骤操作：
- en: Open the **Assistant Editor** by choosing **Navigate** | **Open in Assistant
    Editor**, or by pressing the *Option* + *Command* buttons.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择 **Navigate** | **Open in Assistant Editor** 或按住 *Option* + *Command* 键来打开
    **Assistant Editor**。
- en: Ensure that the `ViewController.h` interface file is displayed within the **Assistant
    Editor** window.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在 **Assistant Editor** 窗口中显示 `ViewController.h` 接口文件。
- en: Select the **Change Map** (`UIBarButtonItem`) control, hold down the *Ctrl*
    key, and drag it into the `ViewController.h` interface file.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **Change Map** (`UIBarButtonItem`) 控件，按住 *Ctrl* 键，并将其拖入 `ViewController.h`
    接口文件。
- en: Note
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In order to create the `IBOutlet` outlets, these will need to be created inside
    the curly braces under the `@interface` directive as these are not created by
    default.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了创建 `IBOutlet` 连接，这些需要在 `@interface` 指令下的花括号内创建，因为这些不是默认创建的。
- en: Choose **Outlet** from the **Connection** drop-down menu for the connection
    to be created.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **Connection** 下拉菜单中选择 **Outlet** 以创建连接。
- en: Enter in `changeMap` for the name of the **Outlet** event to create.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `changeMap` 作为要创建的 **Outlet** 事件的名称。
- en: Choose **Strong** from the **Storage** drop-down menu.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **Storage** 下拉菜单中选择 **Strong**。
- en: Repeat steps 4 to 6 to create the `Outlet` property for the `MKMapView` control,
    using the name `mapView`.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复步骤 4 到 6，为 `MKMapView` 控件创建 `Outlet` 属性，使用名称 `mapView`。
- en: 'Now that we have created the instance variable outlets for our controls, we
    need to create the associated actions for the `changeMap` button. Creating these
    actions allows an event to be fired when the button is pressed. To create an action,
    follow these simple steps:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为我们的控件创建了实例变量出口，我们需要为`changeMap`按钮创建关联的动作。创建这些动作允许在按钮按下时触发事件。要创建一个动作，请按照以下简单步骤操作：
- en: With the `ViewController.h` interface file still displayed within the **Assistant
    Editor** window, select the **Change Map** (`UIBarButtonItem`) control, and hold
    down the *Ctrl* key and drag it into the `ViewController.h` interface file.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**辅助编辑器**窗口中仍然显示`ViewController.h`接口文件的情况下，选择**更改地图**（`UIBarButtonItem`）控件，并按住*Ctrl*键将其拖入`ViewController.h`接口文件。
- en: Choose **Action** from the **Connection** drop-down list for the connection
    to be created.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**连接**下拉列表中选择**动作**以创建连接。
- en: Enter in `changeMapType` for the **Name** of the method to be created.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**名称**中输入`changeMapType`以创建方法。
- en: In order to make our application correctly display the map to our view, we will
    need to import the `<MapKit/MapKit.h>` interface header file so that we can utilize
    its methods.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了使我们的应用程序正确地在视图中显示地图，我们需要导入`<MapKit/MapKit.h>`接口头文件，以便我们可以利用其方法。
- en: 'Open the `ViewController.h` interface file located within the `Classes` folder,
    and add the following highlighted code:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开位于`Classes`文件夹中的`ViewController.h`接口文件，并添加以下突出显示的代码：
- en: '[PRE0]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following code snippet shows the completed `ViewController.h` interface
    file, as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了完成的`ViewController.h`接口文件，如下所示：
- en: '[PRE1]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe we started by building our user interface by adding a `UIToolbar`
    and `MKMapView` control to our view controller. We then created the necessary
    outlets and actions event methods that need to be executed when the `changeMapType`
    button is pressed. We then imported the `MapKit.h` interface files into our `ViewController.h`
    interface file so that we can access their class methods for the `MKMapView` class.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们首先通过向视图控制器添加`UIToolbar`和`MKMapView`控件来构建用户界面。然后，我们创建了在按下`changeMapType`按钮时需要执行必要的出口和动作事件方法。然后，我们将`MapKit.h`接口文件导入到`ViewController.h`接口文件中，以便我们可以访问`MKMapView`类的类方法。
- en: In our next recipe we will look at how we can use the `MKMapView` class to determine
    our current geographic GPS location using the `CLLocationManager` class.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的下一个菜谱中，我们将探讨如何使用`MKMapView`类和`CLLocationManager`类来确定我们的当前地理GPS位置。
- en: See also
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Determining the current GPS location* recipe
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*确定当前GPS位置*菜谱'
- en: The *Displaying and using maps* recipe
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*显示和使用地图*菜谱'
- en: The *Using Xcode to create an iOS project* and *Creating outlets to Interface
    Builder objects* recipes in [Chapter 1](ch01.html "Chapter 1. Getting and Installing
    the iOS SDK Development Tools"), *Getting and Installing the iOS SDK Development
    Tools*
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。获取和安装iOS SDK开发工具")的*使用Xcode创建iOS项目*和*创建到Interface Builder对象的出口*菜谱中，*获取和安装iOS
    SDK开发工具*
- en: Determining the current GPS location
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定当前GPS位置
- en: In this recipe we will learn how to determine the current GPS location of our
    iOS device.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何确定我们iOS设备的当前GPS位置。
- en: Getting ready
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this section we will see how we can use the CoreLocation framework to determine
    our latitude and longitude GPS location and output this information within an
    `alertView` dialog.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何使用CoreLocation框架确定我们的纬度和经度GPS位置，并在`alertView`对话框中输出此信息。
- en: How to do it...
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To begin, follow these simple steps as outlined in the following order:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，按照以下顺序遵循以下简单步骤：
- en: Open the `ViewController.h` interface file from the **Project Navigator** section.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目导航器**部分打开`ViewController.h`接口文件。
- en: 'Next, modify the interface file as shown by the highlighted code sections in
    the following code snippet:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改接口文件，如下面的代码片段中突出显示的代码部分所示：
- en: '[PRE2]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Open the `ViewController.m` implementation file from the **Project Navigator**
    section, and add the following highlighted code statement underneath the `@implementation`
    directive statement:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目导航器**部分打开`ViewController.m`实现文件，并在`@implementation`指令语句下添加以下突出显示的代码语句：
- en: '[PRE3]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, modify the `viewDidLoad` method as shown by the highlighted code sections
    in the following code snippet:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改`viewDidLoad`方法，如下面的代码片段中突出显示的代码部分所示：
- en: '[PRE4]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, create the `didUpdateToLocation:` method as shown in the following code
    snippet:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建`didUpdateToLocation:`方法，如下面的代码片段所示：
- en: '[PRE5]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Then, build and run the application by choosing **Product** | **Run** from the
    **Product** menu, or alternatively pressing *Command* + *R*.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过选择**产品** | **运行**从**产品**菜单，或者按*Command* + *R*来构建和运行应用程序。
- en: You will notice that once the program executes, core location will communicate
    with the iOS device to make a determination where you are located, and display
    this information within a `UIAlertview` dialog.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到一旦程序执行，核心位置将与iOS设备通信以确定您的位置，并在`UIAlertview`对话框中显示此信息。
- en: How it works...
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe we imported the `MapView.h` header file information for our `CoreLocation.h`
    interface file so that we can access its class methods. We then need to extend
    our class to include the class protocol for the `CLLocationManagerDelegate` so
    that we can access the protocol's respective methods. We then initialized our
    superclass's inherited members and then set the `foundLocation` to `NO` the first
    time round and set the view controller to be the `mapView` delegate so we can
    pass on the notifications whenever the map moves.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们导入了`MapView.h`头文件信息到我们的`CoreLocation.h`接口文件，以便我们可以访问其类方法。然后我们需要扩展我们的类以包含`CLLocationManagerDelegate`的类协议，这样我们就可以访问协议的相关方法。然后初始化我们超类的继承成员，并将`foundLocation`设置为`NO`第一次运行，并将视图控制器设置为`mapView`的代理，这样我们就可以在地图移动时传递通知。
- en: Next, we instantiate the `locationManager` class and set its delegate property
    to our `mapView`, and set the `desiredAccuracy` property of the object of the
    `locationManager` class to `kCLLocationAccuracyBest`, which specifies the location
    and heading information provided by the `loctionManager` class should be as accurate
    as the iOS device's hardware can provide, and as a test, it would be better to
    test this on an actual iOS device.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们实例化`locationManager`类，并将其代理属性设置为我们的`mapView`，并将`locationManager`类对象的`desiredAccuracy`属性设置为`kCLLocationAccuracyBest`，这指定了`locationManager`类提供的位置和航向信息应尽可能精确，作为一个测试，最好在实际的iOS设备上进行测试。
- en: Finally, we declare the `didUpdateToLocation` method to handle whenever the
    `CLLocationManger` class changes the current location of the iOS device. From
    here, we then obtain the current latitude and longitude coordinates and display
    this within an `UIAlertview` dialog, before finally setting the `foundLocation`
    variable to `YES`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们声明了`didUpdateToLocation`方法来处理`CLLocationManger`类更改iOS设备当前位置的情况。从这里，我们然后获取当前的纬度和经度坐标，并在`UIAlertview`对话框中显示这些信息，最后将`foundLocation`变量设置为`YES`。
- en: Note
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information on the `CLLocationManager` class, you can refer to the
    Apple Developer Documentation located at the following URL:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`CLLocationManager`类的更多信息，您可以参考以下URL的Apple开发者文档：
- en: '[https://developer.apple.com/library/ios/#documentation/CoreLocation/Reference/CLLocationManager_Class/CLLocationManager/CLLocationManager.html](https://developer.apple.com/library/ios/#documentation/CoreLocation/Reference/CLLocationManager_Class/CLLocationManager/CLLocationManager.html)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.apple.com/library/ios/#documentation/CoreLocation/Reference/CLLocationManager_Class/CLLocationManager/CLLocationManager.html](https://developer.apple.com/library/ios/#documentation/CoreLocation/Reference/CLLocationManager_Class/CLLocationManager/CLLocationManager.html)'
- en: There's more…
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We implemented the `locationManager:didFailWithError` class, which gets called,
    whenever the use of location services is unavailable or unable to retrieve a location
    straight away. We use the `error` property to determine the type of error that
    occurred and then call the `stopUpdatingLocation` method of the `locationManager`
    object.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实现了`locationManager:didFailWithError`类，该类在无法使用位置服务或无法立即检索位置时会被调用。我们使用`error`属性来确定发生的错误类型，然后调用`locationManager`对象的`stopUpdatingLocation`方法。
- en: 'The following table shows each of the valid error codes and their descriptions,
    as returned by the `locationManager:didFailWithError` method:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了每个有效的错误代码及其描述，这些描述由`locationManager:didFailWithError`方法返回：
- en: '| Core location error code | Location manager error description |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| 核心位置错误代码 | 位置管理器错误描述 |'
- en: '| --- | --- |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `kCLErrorLocationUnknown` | This error tells you that the location manager
    was unable to obtain a location at the moment. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| `kCLErrorLocationUnknown` | 此错误告诉您位置管理器目前无法获取位置。 |'
- en: '| `kCLErrorDenied` | This error lets you know that the user denied the access
    to the location service. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `kCLErrorDenied` | 此错误通知您用户拒绝了位置服务的访问。 |'
- en: '| `kCLErrorNetwork` | This error tells you that the network was unavailable
    or a network error occurred. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `kCLErrorNetwork` | 此错误告诉您网络不可用或发生了网络错误。|'
- en: '| `kCLErrorHeadingFailure` | This error tells you that the heading location
    travelled could not be determined. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `kCLErrorHeadingFailure` | 此错误告诉您无法确定航向位置。|'
- en: '| `kCLErrorRegionMonitoringDenied` | This error tells you that the user denied
    the access to the region monitoring service. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| `kCLErrorRegionMonitoringDenied` | 此错误告诉您用户拒绝了区域监控服务的访问。|'
- en: '| `kCLErrorRegionMonitoringFailure` | This error tells you that a registered
    region could not be monitored. |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| `kCLErrorRegionMonitoringFailure` | 此错误告诉您无法监控已注册的区域。|'
- en: '| `kCLErrorRegionMonitoringSetupDelayed` | This error tells you that core location
    could not initialize the region monitoring service immediately. |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| `kCLErrorRegionMonitoringSetupDelayed` | 此错误告诉您核心位置无法立即初始化区域监控服务。|'
- en: Note
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on the `didFailWithError` error codes of the core location
    class, you can refer to the Apple Developer Documentation located at [https://developer.apple.com/library/ios/#documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/CLLocationManagerDelegate/CLLocationManagerDelegate.html](https://developer.apple.com/library/ios/#documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/CLLocationManagerDelegate/CLLocationManagerDelegate.html)
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 关于核心位置类`didFailWithError`错误代码的更多信息，您可以参考位于[https://developer.apple.com/library/ios/#documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/CLLocationManagerDelegate/CLLocationManagerDelegate.html](https://developer.apple.com/library/ios/#documentation/CoreLocation/Reference/CLLocationManagerDelegate_Protocol/CLLocationManagerDelegate/CLLocationManagerDelegate.html)的Apple开发者文档。
- en: See also
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Adding and working with the MapView control* recipe
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加和使用MapView控件*配方'
- en: The *Reversing geocode address information* recipe
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*反转地理编码地址信息*配方'
- en: Adding and working with the MapView control
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加和使用MapView控件
- en: In this recipe we will learn how to use the location simulator to provide you
    with the ability to test your location-based features in your application without
    leaving your desk.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将学习如何使用位置模拟器来提供您在应用程序中测试基于位置的功能的能力，而无需离开您的办公桌。
- en: Getting ready
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this section we will see how we can use the location simulator to allow you
    to select from preset locations and routes within the iOS Simulator and pick a
    custom latitude and longitude with accuracy.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解如何使用位置模拟器让您在iOS模拟器中选择预设的位置和路线，并选择具有精度的自定义纬度和经度。
- en: How to do it...
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To begin, follow these simple steps as outlined in the following order:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请按照以下顺序遵循以下简单步骤：
- en: Open the `ViewController.m` implementation file from the **Project Navigator**
    section.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目导航**部分打开`ViewController.m`实现文件。
- en: 'Next, modify the `viewDidLoad` method as shown by the highlighted code sections
    in the following code snippet:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改如下代码片段中突出显示的`viewDidLoad`方法：
- en: '[PRE6]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Then, build and run the application by choosing **Product** | **Run** from the
    **Product** menu, or alternatively pressing *Command* + *R*.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过从**产品**菜单选择**运行**或按*Command* + *R*来构建并运行应用程序。
- en: You will notice that once the program executes, core location communicates with
    the iOS device to make a determination where you are located, and displays this
    using a blue flashing marker.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到，一旦程序执行，核心位置会与iOS设备通信以确定您的位置，并使用蓝色闪烁标记显示此信息。
- en: 'You can also choose to navigate to a different location using Xcode while the
    application is being run on the iOS device. To do this, follow these simple steps:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以选择在iOS设备上运行应用程序时使用Xcode导航到不同的位置。为此，请按照以下简单步骤操作：
- en: From the Xcode debug console, click on the **Simulate Location** icon as shown
    in the following screenshot. This will display a list of available locations:![How
    to do it...](img/3349_05_04.jpg)
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Xcode调试控制台，点击如下截图所示的**模拟位置**图标。这将显示一个可用位置的列表：![如何操作...](img/3349_05_04.jpg)
- en: Select **Hong Kong, China**, or a similar option from the list of displayed
    locations.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从显示的位置列表中选择**中国香港**或类似选项。
- en: The iOS device will then be updated to reflect the chosen location. You will
    need to zoom out and manually scroll to the location to see the change, as shown
    in the following screenshot:![How to do it...](img/3349_05_05.jpg)
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，iOS设备将更新以反映所选位置。您需要放大并手动滚动到该位置以查看更改，如下截图所示：![如何操作...](img/3349_05_05.jpg)
- en: How it works...
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe we learned how we can set the `MapView` control to show our current
    location on the map by using the `setShowsUserLocation` property of the map view
    control, as well as how we can use Xcode to allow our iOS device to simulate the
    different locations, using the **Simulate Location** feature.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们学习了如何通过使用地图视图控制器的 `setShowsUserLocation` 属性来设置 `MapView` 控制器以在地图上显示我们的当前位置，以及如何使用
    Xcode 允许我们的 iOS 设备通过使用 **模拟位置** 功能来模拟不同的位置。
- en: See also
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Determining the current GPS location* recipe
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*确定当前 GPS 位置* 食谱'
- en: The *Adding overlay regions to maps* recipe
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加覆盖区域到地图* 食谱'
- en: Adding overlay regions to maps
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加覆盖区域到地图
- en: In this recipe we will learn how to create an overlay to mark an area on our
    map view control object. These overlay objects are essentially data objects that
    contain the geographic data needed to represent the map area. For example, overlays
    can take the form of common shapes such as rectangles and circles.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将学习如何创建一个覆盖物来标记我们的地图视图控制器对象上的一个区域。这些覆盖对象基本上是包含表示地图区域所需地理数据的对象。例如，覆盖物可以采用常见的形状，如矩形和圆形。
- en: Getting ready
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this section we will see how we can use the `MKOverlayView` class and the
    `MKOverlay` protocol to allow us to represent both a point and an area on the
    map.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解如何使用 `MKOverlayView` 类和 `MKOverlay` 协议来允许我们在地图上表示一个点和一个区域。
- en: How to do it...
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To begin, follow these simple steps as outlined in the following order:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，按照以下顺序遵循以下简单步骤：
- en: Open the `ViewController.m` implementation file from the **Project Navigator**
    section.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **项目导航器** 部分打开 `ViewController.m` 实现文件。
- en: 'Next, create the `overlayCurrentUserLocation` function as shown in the following
    code snippet:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建如以下代码片段所示的 `overlayCurrentUserLocation` 函数：
- en: '[PRE7]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, create the `mapView:viewForOverlay:` method as shown in the following
    code snippet:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建如以下代码片段所示的 `mapView:viewForOverlay:` 方法：
- en: '[PRE8]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Modify the `locationManager:didUpdateToLocation:` method and enter in the following
    highlighted code sections as shown in the code snippet:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `locationManager:didUpdateToLocation:` 方法，并输入以下突出显示的代码部分，如代码片段所示：
- en: '[PRE9]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Then, build and run the application by choosing **Product** | **Run** from the
    **Product** menu, or alternatively pressing *Command* + *R*.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过从 **产品** 菜单中选择 **产品** | **运行** 或按 *Command* + *R* 键来构建和运行应用程序。
- en: 'You will notice that once the program executes, core location communicates
    with the iOS device to determine where you are located and then zooms in and displays
    a circle showing the radius of the area to which we specified:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到一旦程序执行，核心位置服务会与 iOS 设备通信以确定你的位置，然后放大并显示一个圆圈，显示我们指定的区域的半径：
- en: '![How to do it...](img/3349_05_06.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/3349_05_06.jpg)'
- en: How it works...
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe we created a function called `createOverlayArea` which created
    a circle with a 100 km. radius based on the current user location, and then created
    a title for this location using the title property of the `MKCircle` class and
    used the `addOverlay` method to overlay and add our circle to our `mapView` control.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们创建了一个名为 `createOverlayArea` 的函数，该函数基于当前用户位置创建了一个半径为 100 公里的圆圈，然后使用 `MKCircle`
    类的标题属性为该位置创建了一个标题，并使用 `addOverlay` 方法将我们的圆覆盖并添加到 `mapView` 控制器中。
- en: In our next step, we used `MKCoordinateRegion` to create a 2 km. area span and
    then zoom in to the area allocated by the radius using the `setRegion` setter
    method. We then created the `mapView:viewForOverlay:` method which gets called
    whenever a object gets overlaid onto the map view control and fills the circle
    for the overlaid region using the `MKCircleView` class and then setting the look
    and feel of the circle, by setting the `strokeColor`, `lineWidth`, and `fillColor`
    properties of the circle. In our final section, we modified the `locationManager:didUpdateToLocation:`
    method to include a call to our `ceateOverlayArea` function.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的下一步中，我们使用 `MKCoordinateRegion` 创建了一个 2 公里的区域范围，然后使用 `setRegion` 设置器方法放大到由半径分配的区域。然后我们创建了
    `mapView:viewForOverlay:` 方法，该方法在对象被覆盖到地图视图控制器上时被调用，并使用 `MKCircleView` 类填充覆盖区域的圆圈，然后通过设置圆的
    `strokeColor`、`lineWidth` 和 `fillColor` 属性来设置圆的外观和感觉。在我们的最后部分，我们修改了 `locationManager:didUpdateToLocation:`
    方法，以包含对 `ceateOverlayArea` 函数的调用。
- en: Note
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information on the `MKOverlayView` class, you can refer to the Apple
    Developer Documentation located at the following URL:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 `MKOverlayView` 类的更多信息，你可以参考位于以下 URL 的 Apple 开发者文档：
- en: '[https://developer.apple.com/library/ios/documentation/MapKit/Reference/MKOverlayView_class/Reference/Reference.html](https://developer.apple.com/library/ios/documentation/MapKit/Reference/MKOverlayView_class/Reference/Reference.html)'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.apple.com/library/ios/documentation/MapKit/Reference/MKOverlayView_class/Reference/Reference.html](https://developer.apple.com/library/ios/documentation/MapKit/Reference/MKOverlayView_class/Reference/Reference.html)'
- en: See also
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Adding annotation placeholders to the map* recipe
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*向地图添加注释占位符*配方'
- en: The *Reversing geocode address information* recipe
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*反转地理编码地址信息*配方'
- en: Adding annotation placeholders to the map
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向地图添加注释占位符
- en: In this recipe we will learn how to create our own custom class that will enable
    us to add annotations to our map view control.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将学习如何创建我们自己的自定义类，这将使我们能够向地图视图控制添加注释。
- en: Getting ready
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this section we will see how we can use the `MKAnnotation` and `MKAnnotationView`
    classes to enable us to apply a series of annotation pins based on the geographic
    latitude and longitude values to our `mapView` control.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解如何使用`MKAnnotation`和`MKAnnotationView`类，使我们能够根据地理纬度和经度值应用一系列基于地理的注释标记到我们的`mapView`控制。
- en: How to do it…
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'To begin, follow these simple steps as outlined in the following order:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请按照以下顺序遵循以下简单步骤：
- en: Select the **CoreLocation** group, choose **File** | **New** | **File…** or
    press *Command* + *N*.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**CoreLocation**组，选择**文件** | **新建** | **文件…**或按*Command* + *N*。
- en: Select the `Objective-C` class template from the list of available templates.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从可用模板列表中选择`Objective-C`类模板。
- en: Click on the **Next** button to proceed to the next step in the wizard.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**按钮继续向导的下一步。
- en: Enter in `MapViewAnnotation` as the name of the class to be created.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`MapViewAnnotation`作为要创建的类的名称。
- en: Ensure that you have selected **NSObject** as the type of subclass to create
    from the **Subclass of** drop-down list:![How to do it…](img/3349_05_07.jpg)
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您已从**子类为**下拉列表中选择**NSObject**作为要创建的子类的类型：![如何做到这一点…](img/3349_05_07.jpg)
- en: Click on the **Next** button to proceed with the next step of the wizard.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**按钮继续向导的下一步。
- en: Then, click on the **Create** button to save the file to the folder location
    specified.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击**创建**按钮将文件保存到指定的文件夹位置。
- en: Our next step is to implement the functionality and methods used by this class.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们下一步是实现此类使用的功能和方法。
- en: 'Open the `MapViewAnnotation.h` interface file from the **Project Navigator**
    section, and enter in the following code snippet:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目导航器**部分打开`MapViewAnnotation.h`接口文件，并输入以下代码片段：
- en: '[PRE10]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Open the `MapViewAnnotation.m` implementation file from the **Project Navigator**
    section, and enter in the following code snippet:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目导航器**部分打开`MapViewAnnotation.m`实现文件，并输入以下代码片段：
- en: '[PRE11]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, open the `ViewController.m` implementation file from the **Project Navigator**
    section, and enter in the highlighted code sections in the following code snippet:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从**项目导航器**部分打开`ViewController.m`实现文件，并输入以下代码片段中的高亮代码部分：
- en: '[PRE12]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, create the `plotGeographicalData` method as shown in the following code
    snippet:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建如以下代码片段所示的`plotGeographicalData`方法：
- en: '[PRE13]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, create the `mapView:viewForAnnotation:` method as shown in the following
    code snippet:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建如以下代码片段所示的`mapView:viewForAnnotation:`方法：
- en: '[PRE14]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Then, build and run the application by choosing **Product** | **Run** from the
    **Product** menu, or alternatively pressing *Command* + *R*.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过选择**产品** | **运行**从**产品**菜单或按*Command* + *R*来构建和运行应用程序。
- en: How it works...
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe we created a new custom `MapViewAnnotation` class and then extend
    this class to make use of the `MKAnnotation` protocol so that we can access its
    associated class methods. Next, we created a method `initWithTitle:` within our
    `MapViewAnnotation.m` implementation file that will be used to store our header
    and coordinates for the pin placement.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们创建了一个新的自定义`MapViewAnnotation`类，然后扩展此类以使用`MKAnnotation`协议，这样我们就可以访问其关联的类方法。接下来，我们在`MapViewAnnotation.m`实现文件中创建了一个名为`initWithTitle:`的方法，用于存储我们的标题和坐标以放置标记。
- en: In our next step, we modified our `ViewController.m` implementation file and
    created a new function called `plotGeographicalData` that is used to create a
    number of different geographic locations using `CLLocationCoordinate2DMake` to
    create the latitude and longitude values for each geographic location in the array.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，我们修改了`ViewController.m`实现文件，并创建了一个名为`plotGeographicalData`的新函数，该函数用于使用`CLLocationCoordinate2DMake`创建数组中每个地理位置的纬度和经度值，以创建多个不同的地理位置。
- en: We then pass the geographic locations to the `addAnnotation` method of the `MapViewAnnotation`
    class to add the annotation to the map. Finally, we create the `mapView:viewForAnnotation`
    method to place the annotation object onto the map by using our `MapViewAnnotation`
    class instance.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将地理坐标传递给`MapViewAnnotation`类的`addAnnotation`方法，以将注释添加到地图上。最后，我们通过使用我们的`MapViewAnnotation`类实例创建`mapView:viewForAnnotation`方法，将注释对象放置到地图上。
- en: Note
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information on the `MKAnnotationView` class, you can refer to the
    Apple Developer Documentation located at the following URL:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 想要了解更多关于`MKAnnotationView`类的信息，您可以参考以下网址的Apple开发者文档：
- en: '[https://developer.apple.com/library/ios/#documentation/MapKit/Reference/MKAnnotationView_Class/Reference/Reference.html](https://developer.apple.com/library/ios/#documentation/MapKit/Reference/MKAnnotationView_Class/Reference/Reference.html)`#//apple_ref/occ/cl/MKAnnotationView`'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.apple.com/library/ios/#documentation/MapKit/Reference/MKAnnotationView_Class/Reference/Reference.html](https://developer.apple.com/library/ios/#documentation/MapKit/Reference/MKAnnotationView_Class/Reference/Reference.html)`#//apple_ref/occ/cl/MKAnnotationView`'
- en: There's more…
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: In order to ensure that the map annotations happen, we need to modify the `locationManager:didUpdateToLocation`
    method. This method is called after the iOS device has found the users' current
    location on the map or whenever the map location changes.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保地图注释发生，我们需要修改`locationManager:didUpdateToLocation`方法。该方法在iOS设备在地图上找到用户的当前位置或地图位置发生变化后调用。
- en: 'Modify the `locationManager:didUpdateToLocation:` method and enter in the following
    highlighted code sections as shown in the code snippet:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`locationManager:didUpdateToLocation:`方法，并输入以下高亮显示的代码部分，如代码片段所示：
- en: '[PRE15]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, create the `zoomToFitMapAnnotations` function as shown in the following
    code snippet:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建`zoomToFitMapAnnotations`函数，如以下代码片段所示：
- en: '[PRE16]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the previous code snippet, the `zoomToFitMapAnnotations` method is used to
    create a scrollable area around the visible region that the user can move around
    in. This is accomplished by using the `MKPolygon` class to create a series of
    points around each of the annotations on the map.
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在之前的代码片段中，使用`zoomToFitMapAnnotations`方法创建了一个围绕可见区域的可滚动区域，用户可以在其中移动。这是通过使用`MKPolygon`类创建围绕地图上每个注释的一系列点来实现的。
- en: Then, build and run the application by choosing **Product** | **Run** from the
    **Product** menu, or alternatively pressing *Command* + *R*.![There's more…](img/3349_05_08.jpg)
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过从**产品**菜单中选择**产品** | **运行**，或通过按*Command* + *R*来构建和运行应用程序。![还有更多…](img/3349_05_08.jpg)
- en: Note
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information on the `MKPolygon` class, you can refer to the Apple Developer
    Documentation located at the following URL:'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 想要了解更多关于`MKPolygon`类的信息，您可以参考以下网址的Apple开发者文档：
- en: '[https://developer.apple.com/library/ios/#documentation/MapKit/Reference/MKPolygon_class/Reference/Reference.html](https://developer.apple.com/library/ios/#documentation/MapKit/Reference/MKPolygon_class/Reference/Reference.html)'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://developer.apple.com/library/ios/#documentation/MapKit/Reference/MKPolygon_class/Reference/Reference.html](https://developer.apple.com/library/ios/#documentation/MapKit/Reference/MKPolygon_class/Reference/Reference.html)'
- en: See also
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考信息
- en: The *Adding overlay regions to the map* recipe
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*向地图添加覆盖区域*教程'
- en: The *Reversing geocode address information* recipe
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*反向地理编码地址信息*教程'
- en: Reversing geocode address information
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反向地理编码地址信息
- en: In this recipe we will learn about reverse geocoding address information into
    human readable information.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何将地址信息反向地理编码成可读信息。
- en: Getting ready
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this section we will gain an understanding of the phrase reverse geocoding,
    and how this can be used to transform latitude and longitude information into
    human-recognizable address information.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解“反向地理编码”这个短语，以及如何将经纬度信息转换为人类可识别的地址信息。
- en: How to do it...
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To begin, follow these simple steps as outlined in the following order:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，按照以下顺序遵循以下简单步骤：
- en: Open the `ViewController.m` implementation file from the **Project Navigator**
    section.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目导航器**部分打开`ViewController.m`实现文件。
- en: 'Modify the `viewDidLoad` method as shown by the highlighted code sections in
    the following code snippet:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`viewDidLoad`方法，如以下代码片段中高亮显示的代码部分所示：
- en: '[PRE17]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, create the `getGeocodingInformation` method as shown in the following
    code snippet:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建`getGeocodingInformation`方法，如以下代码片段所示：
- en: '[PRE18]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Then, build and run the application by choosing **Product** | **Run** from the
    **Product** menu, or alternatively pressing *Command* + *R*.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过从**产品**菜单中选择**产品** | **运行**，或通过按*Command* + *R*来构建和运行应用程序。
- en: You will notice that once the program executes, the provided latitude and longitude
    information has been transformed into human recognizable address information.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到一旦程序执行，提供的纬度和经度信息已经被转换成人类可识别的地址信息。
- en: '![How to do it...](img/3349_05_09.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/3349_05_09.jpg)'
- en: How it works...
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe we added a new method call, `getGeocodingInformation`, to our
    `viewDidLoad` method that will be responsible for displaying our geographical
    location information within an `UIAlertView` dialog window. We then create a new
    object variable `geoCoder` of the `CLGeoCoder` class and then pass a set of latitude
    and longitude values to the `CLLocation` class, which then gets passed to the
    `reverseGeocodeLocation` method of the `CLGeoCode` class to work out the geographic
    location details of the coordinates.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们在`viewDidLoad`方法中添加了一个新的方法调用，`getGeocodingInformation`，它将负责在`UIAlertView`对话框窗口中显示我们的地理位置信息。然后我们创建了一个新的对象变量`geoCoder`，它是`CLGeoCoder`类，然后传递一组纬度和经度值到`CLLocation`类，然后它被传递到`CLGeoCode`类的`reverseGeocodeLocation`方法以确定坐标的地理位置细节。
- en: Once a determination has been made by the `reverseGeocodeLocation` method, the
    result is returned into an NSArray object `placemarks` that hold the actual data.
    Finally, we make a call to the `CLPlacemark` class to retrieve the location information
    using the `addressDictionary` of the `placemark` object.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`reverseGeocodeLocation`方法做出判断，结果将返回到`placemarks`数组对象中，该对象包含实际数据。最后，我们调用`CLPlacemark`类，使用`placemark`对象的`addressDictionary`检索位置信息。
- en: 'The following table provides a brief description of some of the different types
    of information returned by the `CLPlacemark` class:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的表格简要描述了`CLPlacemark`类返回的一些不同类型的信息：
- en: '| Placemark properties | Description |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| 地标属性 | 描述 |'
- en: '| --- | --- |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Name` | This property contains the name of the placemark. |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| `Name` | 这个属性包含地标的名称。|'
- en: '| `Country` | This property is self-explanatory and simply stores the country''s
    name. |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| `Country` | 这个属性是自解释的，只是简单地存储国家名称。|'
- en: '| `CountryCode` | This property provides you with the abbreviated country name.
    |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| `CountryCode` | 这个属性为你提供了国家缩写名称。|'
- en: '| `Thoroughfare` | This contains the street address associated with the placemark.
    |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| `Thoroughfare` | 这包含与地标相关的街道地址。|'
- en: '| `Sublocality` | This property provides you with additional city-level information
    for the placemark. |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| `Sublocality` | 这个属性为你提供了地标的城市级别额外信息。|'
- en: '| `SubAdministrativeArea` | This property provides you with additional information
    for the landmark. |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| `SubAdministrativeArea` | 这个属性为你提供了地标额外的信息。|'
- en: '| `ZIP` | This is typically the postal code for the placemark. |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| `ZIP` | 这通常是地标的邮政编码。|'
- en: In addition to these properties shown previously, the address dictionary provides
    you with a `FormattedAddressLines` entry that stores an array of preformatted
    strings for the address in question.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 除了之前显示的这些属性之外，地址字典为你提供了一个`FormattedAddressLines`条目，它存储了有关地址的预格式化字符串数组。
- en: 'You can use these strings to display an address, for example: "Taman Batu Metropolitan,
    Jalan Damansara, 50470 Kuala Lumpur KL, Malaysia", the following code snippet
    shows you how this can be achieved:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用这些字符串来显示地址，例如：“Taman Batu Metropolitan, Jalan Damansara, 50470 Kuala Lumpur
    KL, Malaysia”，下面的代码片段展示了如何实现这一点：
- en: '[PRE19]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: There's more…
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: A `CLPlacemark` object stores information relating to the placemark data for
    a given latitude and longitude and contains information such as the country, state,
    city, as well as the street address information that is associated with the specified
    coordinates. This class also includes points of interest and geographically related
    data. Placemarks are typically generated using the `CLGeocoder` object.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`CLPlacemark`对象存储了与给定纬度和经度相关的地标数据，并包含国家、州、城市以及与指定坐标相关的街道地址信息。此类还包括兴趣点和地理相关数据。地标通常是通过`CLGeocoder`对象生成的。
- en: Note
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information on the `CLGeoCoderand CLPlacemark` class, you can refer
    to the Apple Developer Documentation located at the following URLs:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`CLGeoCoder`和`CLPlacemark`类的更多信息，你可以参考位于以下URL的Apple开发者文档：
- en: '[https://developer.apple.com/library/ios/#documentation/CoreLocation/Reference/CLGeocoder_class/Reference/Reference.html](https://developer.apple.com/library/ios/#documentation/CoreLocation/Reference/CLGeocoder_class/Reference/Reference.html)'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://developer.apple.com/library/ios/#documentation/CoreLocation/Reference/CLGeocoder_class/Reference/Reference.html](https://developer.apple.com/library/ios/#documentation/CoreLocation/Reference/CLGeocoder_class/Reference/Reference.html)'
- en: '[https://developer.apple.com/library/ios/#documentation/CoreLocation/Reference/CLPlacemark_class/Reference/Reference.html](https://developer.apple.com/library/ios/#documentation/CoreLocation/Reference/CLPlacemark_class/Reference/Reference.html)`#//apple_ref/occ/cl/CLPlacemark`'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://developer.apple.com/library/ios/#documentation/CoreLocation/Reference/CLPlacemark_class/Reference/Reference.html](https://developer.apple.com/library/ios/#documentation/CoreLocation/Reference/CLPlacemark_class/Reference/Reference.html)`#//apple_ref/occ/cl/CLPlacemark`'
- en: See also
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Determining the current GPS location* recipe
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*确定当前GPS位置*配方'
- en: Working with the different map types
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用不同的地图类型
- en: In this recipe we will learn how to change between the different map views.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将学习如何在不同的地图视图之间切换。
- en: Getting ready
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this section we will start by implementing the method that will be responsible
    for handling changing of the different map views that the MapKit framework provides.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将开始实现一个方法，该方法将负责处理MapKit框架提供的不同地图视图的更改。
- en: How to do it...
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To begin, follow these simple steps as outlined in the following order:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请按照以下顺序遵循以下简单步骤：
- en: Open the `ViewController.h` interface file from the **Project Navigator** section.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目导航器**部分打开`ViewController.h`接口文件。
- en: 'Next, modify the interface file as shown by the highlighted code sections in
    the following code snippet:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改接口文件，如下面的代码片段中突出显示的代码部分所示：
- en: '[PRE20]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Open the `ViewController.m` implementation file from the **Project Navigator**
    section.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目导航器**部分打开`ViewController.m`实现文件。
- en: 'Next, modify the `changeMapType:` method as shown in the following code snippet:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改`changeMapType:`方法，如下面的代码片段所示：
- en: '[PRE21]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, create the following `clickedButtonAtIndex:` method as shown in the following
    code snippet:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建以下`clickedButtonAtIndex:`方法，如下面的代码片段所示：
- en: '[PRE22]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Build and run the application by choosing **Product** | **Run** from the **Product**
    menu, or alternatively pressing *Command* + *R*.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择**产品**菜单中的**运行**或按*Command* + *R*来构建和运行应用程序。
- en: How it works...
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe we started by extending our interface file class so that we can
    include the protocol for our `UIActionSheetDelegate` so that we can gain access
    to the respective methods. We then declared and instantiated an `actionSheet`
    object that is based on the `UIActionSheet` class, and then initialized our `actionSheet`
    object to display the different map types to choose from. We then proceed to set
    the style for `actionSheet` using the `actionSheetStyle` property of the `UIActionSheet`
    class, and then display the `actionSheet` into the current view using the `showInView:self.view`
    method.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们首先扩展了我们的接口文件类，以便我们可以包含我们的`UIActionSheetDelegate`协议，这样我们就可以访问相应的方法。然后我们声明并实例化了一个基于`UIActionSheet`类的`actionSheet`对象，然后初始化我们的`actionSheet`对象以显示可选择的不同的地图类型。然后我们使用`UIActionSheet`类的`actionSheetStyle`属性设置`actionSheet`的样式，然后使用`showInView:self.view`方法将`actionSheet`显示在当前视图中。
- en: In our next part, we declared a delegate method to determine the button that
    was pressed from the `actionSheet` object, using the `clickedButtonIndex` method
    of the `acionSheet` property. Finally, we check the value of the `buttonIndex`
    variable to determine the index of the button that was pressed. When using the
    `buttonIndex` variable, keep in mind that the starting value is always 0.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分中，我们声明了一个代理方法，用于从`actionSheet`对象中确定被按下的按钮，使用`acionSheet`属性的`clickedButtonIndex`方法。最后，我们检查`buttonIndex`变量的值以确定被按下的按钮索引。在使用`buttonIndex`变量时，请注意，起始值始终为0。
- en: 'The following table provides a brief description of each of the different map
    views:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 下表简要描述了每种不同的地图视图：
- en: '| Map type | Description |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
  zh: '| 地图类型 | 描述 |'
- en: '| --- | --- |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `MKMapTypeStandard` | This is the default map type to be displayed, if none
    is specified. This setting will display a normal map containing the street and
    road names. |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
  zh: '| `MKMapTypeStandard` | 这是默认的地图类型，如果没有指定，则显示。此设置将显示包含街道和道路名称的正常地图。 |'
- en: '| `MKMapTypeSatellite` | This type of map will display the satellite view information.
    |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| `MKMapTypeSatellite` | 此类型的地图将显示卫星视图信息。 |'
- en: '| `MKMapTypeHybrid` | This type of map will show a combination of a satellite
    view with road and street information that is overlaid onto the map. |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| `MKMapTypeHybrid` | 此类型的地图将显示卫星视图与叠加在地图上的道路和街道信息的组合。|'
- en: The following screenshot shows the CoreLocation application running on an iOS
    device, showing the current location and the different geographic locations plotted
    to the map, as well as the selection of map types available when the **Map Type**
    button is pressed.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在iOS设备上运行的CoreLocation应用程序，显示了当前的位置以及绘制到地图上的不同地理位置，以及当按下**地图类型**按钮时可选的地图类型。
- en: '![How it works...](img/3349_05_10.jpg)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/3349_05_10.jpg)'
- en: Note
  id: totrans-279
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information on the `MapKit` class, you can refer to the Apple Developer
    Documentation located at the following URL:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`MapKit`类的更多信息，您可以参考以下URL处的Apple开发者文档：
- en: '[https://developer.apple.com/library/ios/#documentation/MapKit/Reference/MKMapView_Class/MKMapView/MKMapView.html](https://developer.apple.com/library/ios/#documentation/MapKit/Reference/MKMapView_Class/MKMapView/MKMapView.html)'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.apple.com/library/ios/#documentation/MapKit/Reference/MKMapView_Class/MKMapView/MKMapView.html](https://developer.apple.com/library/ios/#documentation/MapKit/Reference/MKMapView_Class/MKMapView/MKMapView.html)'
- en: See also
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Adding annotation placeholders to the map* recipe
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将注释占位符添加到地图中的配方
- en: The *Determining the current GPS location* recipe
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定当前GPS位置的配方
