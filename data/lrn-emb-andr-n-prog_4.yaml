- en: Chapter 4\. Moving to Real-World Hardware
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章\. 移动到真实硬件
- en: In the previous chapter, you learned how to set up the necessary environment
    configurations and how to build your first vanilla system, targeting the emulator.
    In this chapter, we will have a quick overview of the fundamental tools of every
    expert Android user and we will complete our first system for a real device—configure,
    build, flash, and test.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了如何设置必要的环境配置以及如何构建你的第一个纯系统，针对模拟器。在本章中，我们将快速概述每个专家 Android 用户的基本工具，并将完成我们的第一个针对真实设备的系统——配置、构建、烧录和测试。
- en: Debugging tools
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试工具
- en: Debugging tools are some of the tools that no developer can live without. With
    embedded systems such as Android systems they are even more important. Android
    provides lots of debugging tools to facilitate complex or boring tasks. The two
    most important tools are definitely `adb` and `fastboot`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 调试工具是每个开发者都无法离开的工具之一。在嵌入式系统（如 Android 系统）中，它们甚至更为重要。Android 提供了大量的调试工具，以简化复杂或无聊的任务。其中两个最重要的工具无疑是
    `adb` 和 `fastboot`。
- en: Introducing ADB
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 介绍 ADB
- en: 'ADB stands for Android Debug Bridge and it''s a toolkit made of two crucial
    parts:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ADB 代表 Android Debug Bridge，它是由两个关键部分组成的工具包：
- en: Adb server running on the device
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在设备上运行的 Adb 服务器
- en: Adb client running on the PC
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 PC 上运行的 Adb 客户端
- en: Usually, `adb` is considered a command-line tool, but you can find a few graphical
    frontends online if you prefer to use it in a more graphical way. Android Studio,
    the official IDE by Google for Android development, uses `adb` to communicate
    with every device and provide cool tools such as `Android Device Monitor`. Using
    the graphical interface, we can analyze logs coming from the device or even take
    a screenshot for debugging purposes.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，`adb` 被认为是命令行工具，但如果你更喜欢以图形化的方式使用它，你可以在网上找到一些图形前端。Android Studio，谷歌为 Android
    开发提供的官方 IDE，使用 `adb` 与每个设备通信并提供如 `Android 设备监控器` 这样的酷炫工具。使用图形界面，我们可以分析来自设备的日志，甚至为了调试目的进行截图。
- en: 'The following screenshot shows how the **Android Device Monitor** can be used
    to retrieve huge amounts of information from devices and apps running on the devices:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了如何使用 **Android 设备监控器** 从运行在设备上的设备和应用中检索大量信息：
- en: '![](img/epub_36702041_48.jpeg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/epub_36702041_48.jpeg)'
- en: During our journey, we will use `adb` mostly on the command line, due to the
    embedded nature of our work. As we know, the emulator behaves like a hardware
    device, so we can easily use `adb` to communicate with it. Let's see a couple
    of useful commands to interact with our running emulator.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的旅程中，我们将主要在命令行中使用 `adb`，因为我们的工作具有嵌入式特性。正如我们所知，模拟器表现得像硬件设备，因此我们可以轻松使用 `adb`
    与之通信。让我们看看一些与运行中的模拟器交互的有用命令。
- en: 'First of all, we need a handy list of all the available commands. That''s easily
    achievable with the following command:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要一个所有可用命令的便捷列表。这可以通过以下命令轻松实现：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, we need to detect the connected devices. On our trusty Terminal, run the
    following command:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要检测连接的设备。在我们的可靠终端上运行以下命令：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](img/epub_36702041_49.jpeg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/epub_36702041_49.jpeg)'
- en: 'The previous command will scan for every attached device and will list them.
    The previous screenshot shows that our emulator is attached and ready to communicate.
    In a multidevice scenario, we could have some issue when properly detecting our
    devices. Adb gives us a further option, `-l`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令将扫描所有连接的设备并将它们列出。之前的截图显示我们的模拟器已连接并准备好通信。在多设备场景中，我们可能会在正确检测设备时遇到一些问题。Adb
    给我们提供了另一个选项 `-l`：
- en: '![](img/epub_36702041_50.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/epub_36702041_50.jpeg)'
- en: Using the `–l` option, `adb` will show more details about the devices, and this
    will help us to identify them properly, as shown in the previous screenshot.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `-l` 选项，`adb` 将显示有关设备的更多详细信息，这有助于我们正确识别它们，如之前的截图所示。
- en: 'Once we have detected the device, we can communicate with it in a few ways.
    One of the most common way is connecting it to the device''s internal shell. Every
    Android device comes with a system shell: it''s a common tool for embedded or
    remote systems. To connect the the internal shell, we simply need to run the following
    command:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们检测到设备，我们可以通过几种方式与之通信。最常见的方式之一是将它连接到设备的内部 shell。每个 Android 设备都自带一个系统 shell：它是嵌入式或远程系统的常用工具。要连接到内部
    shell，我们只需运行以下命令：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If we have more then one device, we will need to specify which device we want
    to connect to, like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有多台设备，我们需要指定我们想要连接到哪台设备，如下所示：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once we are connected to the internal shell, we can treat the system like a
    common `*nix` system. We can run an `ls` command:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们连接到内部shell，我们可以将系统当作一个普通的 `*nix` 系统来处理。我们可以运行一个 `ls` 命令：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As shown in the next screenshot, we obtain the directory listing:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如下一个截图所示，我们获得了目录列表：
- en: '![](img/epub_36702041_51.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/epub_36702041_51.jpeg)'
- en: We suggest you explore the filesystem and play around. You will find that you
    can do almost whatever you want, from manipulating files to manipulating applications.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议您探索文件系统并进行实验。您会发现您几乎可以做到任何事情，从操作文件到操作应用程序。
- en: Pushing files to devices
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 将文件推送到设备
- en: 'Adb gives us dozens of useful commands to manage our devices:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Adb 给我们提供了数十个有用的命令来管理我们的设备：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `adb push` command is certainly one of the most useful. It allows us to
    copy files from our computer to our Android device. The next screenshot shows
    how to upload a single file to our device:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`adb push` 命令无疑是其中最有用的一个。它允许我们从我们的电脑复制文件到我们的 Android 设备。下一个截图显示了如何将单个文件上传到我们的设备：'
- en: '![](img/epub_36702041_52.jpeg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/epub_36702041_52.jpeg)'
- en: We have created a new file, `pippo.txt`, containing a single line, `hello pippo`,
    then we uploaded this file to our connected device, into the `/sdcard/` folder.
    As you can see, the first argument is the filename and the second one is the destination
    we want to copy the file to.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个新的文件，`pippo.txt`，其中包含一行，`hello pippo`，然后我们将这个文件上传到我们的连接设备，到 `/sdcard/`
    文件夹中。正如你所见，第一个参数是文件名，第二个参数是我们想要复制文件到的目标位置。
- en: 'The next screenshot shows `pippo.txt` successfully uploaded to the device''s
    `/sdcard/` folder:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个截图显示了 `pippo.txt` 已成功上传到设备的 `/sdcard/` 文件夹：
- en: '![](img/epub_36702041_53.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/epub_36702041_53.jpeg)'
- en: Pulling files from devices
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从设备中拉取文件
- en: 'During development, we could need to retrieve a file from the device. To achieve
    this, `adb` gives us the opposite of `push`, which is `pull`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中，我们可能需要从设备中检索一个文件。为了实现这一点，`adb` 给我们提供了 `push` 的对立面，即 `pull`：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The preceding command is able to retrieve a file from a connected device and
    copy it to our computer. The syntax is fairly similar to `push`, simply with an
    inverse outcome. The next screenshot shows how to `pull` our `pippo.txt` from
    the device and copy it to the current directory:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令能够从连接的设备中检索文件并将其复制到我们的电脑。语法与 `push` 类似，只是结果相反。下一个截图显示了如何从设备中 `pull` 我们的
    `pippo.txt` 并将其复制到当前目录：
- en: '![](img/epub_36702041_54.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/epub_36702041_54.jpeg)'
- en: We have deleted our original file from the current folder, pulled the one on
    the device to the current folder, using `.` as the destination, and checked that
    the copied `pippo.txt` file contains the expected line, `hello pippo`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经从当前文件夹中删除了原始文件，使用 `.` 作为目标将设备上的文件拉到当前文件夹，并检查复制的 `pippo.txt` 文件是否包含预期的行，`hello
    pippo`。
- en: Installing Android APK files
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装 Android APK 文件
- en: 'As we know, any Android application is contained in an APK file. Usually, users
    don''t see this file, because they install all their apps using the Google Play
    Store. As advanced users, we often deal with unreleased applications, for debugging
    and testing. These apps aren''t available on Google Play Store yet, so `adb` gives
    us the opportunity to manually install them with the following command:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所知，任何 Android 应用都包含在一个 APK 文件中。通常，用户看不到这个文件，因为他们都是通过 Google Play 商店安装所有应用的。作为高级用户，我们经常处理尚未发布的应用，用于调试和测试。这些应用在
    Google Play 商店上还没有提供，所以 `adb` 给我们提供了手动安装它们的机会，使用以下命令：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The next screenshot shows how the APK file has been successfully installed
    on our device number ZX1B226467:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个截图显示了 APK 文件已成功安装到我们的设备 ZX1B226467 上：
- en: '![](img/epub_36702041_55.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/epub_36702041_55.jpeg)'
- en: Logcat
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Logcat
- en: 'Every complex system such as Android needs a logging system. Android provides
    logging capabilities via `logcat` to help users with development and monitoring.
    Using the following command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 任何复杂的系统，如 Android，都需要一个日志系统。Android 通过 `logcat` 提供日志功能，以帮助用户进行开发和监控。使用以下命令：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can instruct `adb` to connect to the Android logging system, select the
    default buffer, and start printing every single system logging message, in real-time,
    to our terminal. Android provides other two logging buffers for advanced use:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以指示 `adb` 连接到 Android 日志系统，选择默认缓冲区，并开始实时将每个系统日志消息打印到我们的终端。Android 为高级使用提供了其他两个日志缓冲区：
- en: '`radio`: This contains all the relevant logging messages related to the radio
    communication system'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`radio`：这包含与无线电通信系统相关的所有相关日志消息'
- en: '`events`: This contains messages related to the system events'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`events`：这包含与系统事件相关的消息'
- en: 'We can select a buffer different from the default using the `–b` option. For
    instance, if we want all the logs related to events, we can use the following
    command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `–b` 选项选择一个不同于默认的缓冲区。例如，如果我们想查看所有与事件相关的日志，我们可以使用以下命令：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Adb `logcat` comes with a few interesting output modes. We can select them
    using the `–v` option and the mode name:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Adb `logcat` 随附几种有趣的输出模式。我们可以使用 `–v` 选项和模式名称来选择它们：
- en: brief
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简短
- en: color
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 颜色
- en: long
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 长度
- en: printable
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可打印
- en: process
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进程
- en: raw
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原始
- en: tag
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签
- en: thread
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程
- en: threadtime
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程时间
- en: time
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间
- en: usec
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微秒
- en: 'The next screenshot shows `logcat` output when we choose the `color` mode:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 下一张截图显示了选择 `color` 模式时的 `logcat` 输出：
- en: '![](img/epub_36702041_56.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/epub_36702041_56.jpeg)'
- en: 'As you can see, `logcat` will use a different color for every different logging
    level. We can even filter according to the logging level itself, using the following
    command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`logcat` 将为每个不同的日志级别使用不同的颜色。我们甚至可以使用以下命令根据日志级别本身进行过滤：
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In this case, we are only displaying error messages. The next screenshot shows
    every available filtering argument we can use:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们只显示错误信息。下一张截图显示了我们可以使用的每个可用过滤参数：
- en: '![](img/epub_36702041_57.jpeg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/epub_36702041_57.jpeg)'
- en: 'For a complete list of all the possible options available with `logcat`, you
    can access the `logcat` command help using the following command:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取 `logcat` 所有可能选项的完整列表，您可以使用以下命令访问 `logcat` 命令的帮助：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following screenshot shows the full list of all the available options with
    their description:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了所有可用选项及其描述的完整列表：
- en: '![](img/epub_36702041_58.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/epub_36702041_58.jpeg)'
- en: Fastboot
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Fastboot
- en: 'Fastboot is the tool that Android gives us to manipulate the device Flash Memory
    and its partitions, using a computer and an USB connection. Fastboot does not
    communicate with the Android system. It communicates with a specific firmware
    able to interact in a minimal system environment: `bootloader mode`.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Fastboot 是 Android 提供给我们使用计算机和 USB 连接来操作设备闪存及其分区的工具。Fastboot 不与 Android 系统通信。它与能够在一个最小系统环境中交互的特定固件通信：`引导加载程序模式`。
- en: 'In the bootloader mode, the system initializes only the minimal amount of hardware
    and software to accomplish the most critical operations of all:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在引导加载程序模式下，系统只初始化完成所有最关键操作所需的最小硬件和软件：
- en: '`flash`: This option is used to deploy a new binary system image from the host
    computer to the device partitions'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flash`：此选项用于从主机计算机部署新的二进制系统镜像到设备分区'
- en: '`erase`: This option is used to delete a specific partition'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`erase`：此选项用于删除特定的分区'
- en: '`reboot`: This option is used to reboot the device in one of the available
    booting modes: recovery, bootloader, or standard'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reboot`：此选项用于将设备重新启动到可用的引导模式之一：恢复模式、引导加载程序或标准模式'
- en: '`format`: This option is used to format a specific partition'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`format`：此选项用于格式化特定的分区'
- en: 'The next screenshot shows the output of the following command, the full list
    of all the available options of `fastboot`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 下一张截图显示了以下命令的输出，列出了所有可用的 `fastboot` 选项：
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As you can easily imagine, `fastboot` will be a big player in the future, when
    we will start building and testing our custom Android system:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所想象的那样，`fastboot` 将在未来扮演重要角色，当我们开始构建和测试我们的自定义 Android 系统时：
- en: '![](img/epub_36702041_59.jpeg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/epub_36702041_59.jpeg)'
- en: Choosing our hardware
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择我们的硬件
- en: In the previous chapters, we learned how to obtain the source code, how the
    build system works, and how to build our first custom Android system for the emulator.
    The only things we know about real hardware are that Android is primarily used
    on smartphones and tablets and that we can certify our hardware according to the
    Android **Compatibility Definition Document (CDD)**, with all its constraints
    and rules. The truth is that Android CDD aims to provide guidelines to bring to
    the market devices that are compliant with Google Mobile Services requirements.
    This is crucial information because it gives us the freedom to choose different
    hardware if our goal is not to develop a smartphone or a tablet for the main consumer
    market.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们学习了如何获取源代码，构建系统是如何工作的，以及如何为模拟器构建我们的第一个自定义 Android 系统。我们对真实硬件的了解只有：Android
    主要用于智能手机和平板电脑，并且我们可以根据 Android **兼容性定义文档 (CDD)** 以及其所有约束和规则来认证我们的硬件。事实是，Android
    CDD 的目的是提供指导，以便将符合 Google 移动服务要求的设备推向市场。这是关键信息，因为它给了我们在目标不是为大众消费市场开发智能手机或平板电脑时选择不同硬件的自由。
- en: In the last two years, the amount of devices not being a smartphone or a tablet,
    but being able to run Android has increased enormously. There is a whole new ecosystem
    of te so-called development boards that can run Android or Ubuntu Linux, for instance.
    Most of these boards are not CDD compliant—they don't have apps such as Google
    Play Store, YouTube, Google Maps, and so on, but they still run Android and they
    can still be tested against Android CTS. This is a great opportunity for manufactures
    or advanced users who want to experiment.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去两年中，非智能手机或平板电脑，但能够运行Android的设备数量急剧增加。出现了一个全新的生态系统，即所谓的开发板，可以运行Android或Ubuntu
    Linux等。这些板中的大多数不符合CDD规范——它们没有Google Play Store、YouTube、Google Maps等应用程序，但它们仍然运行Android，并且可以针对Android
    CTS进行测试。这对想要进行实验的制造商或高级用户来说是一个巨大的机会。
- en: This scenario is now possible because the actual hardware requirements to boot
    Android are getting very minimal nowadays. Keep in mind that Android is based
    on the Linux Kernel and the system itself has a few similarities if we strip away
    the Google apps ecosystem. Nowadays, most of the boards that are equipped with
    enough hardware to run Linux have a good chance of running Android as well.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况现在成为可能，因为启动Android的实际硬件要求现在变得越来越低。记住，Android基于Linux内核，如果剥离Google应用生态系统，系统本身也有一些相似之处。如今，大多数配备足够硬件以运行Linux的板都有很好的机会运行Android。
- en: Hardware architectures
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 硬件架构
- en: The most popular hardware architecture we find in the Android market is definitely
    the ARM family, with its ARMv7 and ARMv8-A. Over time, the x86 and MIPS platforms
    received official support and they have gained market shares in recent months.
    As a further note, Android 5 Lollipop introduced support for 64-bit architectures.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在Android市场上找到的最受欢迎的硬件架构无疑是ARM系列，包括ARMv7和ARMv8-A。随着时间的推移，x86和MIPS平台获得了官方支持，并在最近几个月中获得了市场份额。另外，Android
    5 Lollipop引入了对64位架构的支持。
- en: Minimum requirements
  id: totrans-95
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 最小要求
- en: In a fashion that reminds us of minimal requirements just for playing games,
    even Android as its own. For instance, Android 5.1 requires at least 512 MB RAM
    if it is going to be installed on a device with a standard display density device.
    Otherwise, you will need at least 1.8GB RAM if you are planning to port it to
    a device with a high density display.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 就像仅仅为了玩游戏而设定的最小要求一样，即使是Android本身也是如此。例如，Android 5.1要求在标准显示密度设备上安装时至少有512 MB
    RAM。否则，如果你计划将其移植到高密度显示设备上，你将至少需要1.8GB RAM。
- en: The previous versions are less demanding when it comes to RAM. Android 4.4 KitKat,
    for instance, requires only 512 MB RAM. Unfortunately, KitKat comes with other
    constraints—there is no support for 64-bit architectures and a OpenGL ES 2.0 GPU
    is necessary.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 早期版本对RAM的要求较低。例如，Android 4.4 KitKat只需要512 MB RAM。不幸的是，KitKat还有一些其他限制——不支持64位架构，并且需要OpenGL
    ES 2.0 GPU。
- en: Lots of other hardware components, such as cameras, GPS sensors, accelerometers,
    gyroscopes, touchscreens, and so on, are very common, but they are absolutely
    optional—if your device does not need a camera, you can just save money. You can
    tailor your system, starting from a very minimal system, up to what is specifically
    needed for your use cases.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 许多其他硬件组件，如摄像头、GPS传感器、加速度计、陀螺仪、触摸屏等，非常常见，但它们绝对是可选的——如果你的设备不需要摄像头，你可以节省一些钱。你可以根据你的使用案例，从非常基础的系统开始，定制到具体所需。
- en: System on Chip – SoC
  id: totrans-99
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 系统芯片 – SoC
- en: The coming of advanced embedded systems, such as smartphones and tablets, created
    a huge demand for new embedded chips—more and more small and powerful. When you
    think about a computer, you think about CPUs, motherboards, video cards, and lots
    of external devices. In the embedded world, you think about SoC.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 先进嵌入式系统的出现，如智能手机和平板电脑，对新型嵌入式芯片产生了巨大需求——越来越多的小型且功能强大的芯片。当你想到计算机时，你会想到CPU、主板、显卡以及大量的外部设备。在嵌入式领域，你会想到SoC。
- en: 'SoC stands for System on Chip and it goes beyond the simple concept of a CPU.
    Most of the current SoC solutions embed a multicore CPU, RAM controller, ROMs,
    EEPROMs or Flash memories, USB support, Ethernet support, USART, SPI, and even
    a power management system. Everything is contained in one single chip, as shown
    in the next screenshot of an example SoC architecture:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: SoC代表系统芯片，它超越了CPU的简单概念。大多数当前的SoC解决方案集成了多核CPU、RAM控制器、ROMs、EEPROMs或闪存、USB支持、以太网支持、USART、SPI，甚至电源管理系统。所有这些都在一个单独的芯片中，如下一张示例SoC架构的截图所示：
- en: '![](img/epub_36702041_60.jpeg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/epub_36702041_60.jpeg)'
- en: As you can imagine, the immediate advantage of this approach is the small size
    of the system. We can now have powerful, more and more feature complete and complex
    systems, with smaller and smaller power consumption in a smaller and smaller package,
    to satisfy every need that the market has.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所想，这种方法的直接优势是系统的小型化。我们现在可以拥有强大、功能更完整、更复杂的系统，在更小、更小的封装中拥有更小的功耗，以满足市场的每一个需求。
- en: 'The biggest players here are as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这里最大的玩家如下：
- en: Samsung
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三星
- en: Qualcomm
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高通
- en: Huawei
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 华为
- en: Mediatek
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 美达科
- en: Nvidia
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 英伟达
- en: Intel
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 英特尔
- en: Freescale
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 飞思卡尔
- en: Texas Instrument
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 德州仪器
- en: Broadcom
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 博通
- en: The baseband processor
  id: totrans-114
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 基带处理器
- en: If you are planning to develop a smartphone or a radio-enabled device, you are
    going to deal with some kind of **baseband processor (BP)**. A baseband processor
    is a separated component; most of the time it is outside the SoC that is in charge
    of everything related to radio communications.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你计划开发智能手机或带有无线电功能的设备，你将需要处理某种**基带处理器（BP）**。基带处理器是一个独立的组件；大多数时候它位于负责所有与无线电通信相关的SoC之外。
- en: The BP is a critical component and it's kept separate for security reasons.
    Governments have strict policies about radio component certifications and basically,
    every Government requires that these components are equipped with read-only firmwares.
    Due to its nature, a BP is usually equipped with a specific real-time operating
    system and communicates with the external world via an AT commands-based serial
    bus.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: BP是一个关键组件，出于安全原因被单独保留。各国政府对无线电组件认证有严格的政策，基本上，每个政府都要求这些组件配备只读固件。由于其性质，BP通常配备特定的实时操作系统，并通过基于AT命令的串行总线与外部世界通信。
- en: Our hardware choice
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们硬件的选择
- en: The goal of this book in mainly to teach how to create a custom system for an
    existing device and how to approach the creation of a working Android system for
    a device that can be turned into an Android device with a fair amount of will
    and effort.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书的主要目标是教授如何为现有设备创建一个自定义系统，以及如何为可以转变为Android设备的设备创建一个可工作的Android系统。
- en: 'We are going to use two popular devices in this journey:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这次旅程中使用两个流行的设备：
- en: Google Nexus 6 by Motorola
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 摩托罗拉的谷歌Nexus 6
- en: UDOO by Aidilab and SECO
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Aidilab和SECO的UDOO
- en: Motorola Nexus 6
  id: totrans-122
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 摩托罗拉Nexus 6
- en: In the second chapter, we learned about Google devices—smartphones, tablets,
    and so on. In this chapter, we will work with their latest smartphone currently
    available—the Nexus 6.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二章中，我们学习了关于谷歌设备——智能手机、平板电脑等。在这一章中，我们将使用他们目前可用的最新智能手机——Nexus 6。
- en: '![](img/epub_36702041_61.jpeg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/epub_36702041_61.jpeg)'
- en: 'Nexus 6, codename Shamu, is currently the top device available by Google. Its
    technical specifics are impressive:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Nexus 6，代号Shamu，目前是谷歌提供的顶级设备。其技术规格令人印象深刻：
- en: Qualcomm® Snapdragon™ 805 with quad-core 2.7 GHz CPU
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高通®骁龙™ 805，四核2.7 GHz CPU
- en: Display QHD AMOLED, 5.96" 2,560 x 1,440 (493 ppi), 16:9
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示QHD AMOLED，5.96英寸 2,560 x 1,440 (493 ppi)，16:9
- en: 'Back camera: 13 MP, Led flash, f/2.0'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后置摄像头：13 MP，LED闪光灯，f/2.0
- en: 'Front camera: 2 MP'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前置摄像头：2 MP
- en: 'GPU: Adreno 420'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GPU：Adreno 420
- en: 'Wireless: 802.11ac 2x2 (MIMO)'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无线：802.11ac 2x2 (MIMO)
- en: 'Bluetooth: 4.1'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蓝牙：4.1
- en: NFC
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NFC
- en: 'RAM: 3 GB'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RAM：3 GB
- en: 'Storage: 32 GB or 64 GB'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储：32 GB或64 GB
- en: 'Sensors: GPS, gyroscope, accelerometer, light sensor, barometer'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传感器：GPS、陀螺仪、加速度计、光传感器、气压计
- en: 'Networking:'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络连接：
- en: 'GSM: 850/900/1,800/1,900 MHz'
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: GSM：850/900/1,800/1,900 MHz
- en: 'Band WCDMA: 1/2/4/5/6/8/9/19'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Band WCDMA：1/2/4/5/6/8/9/19
- en: 'Band LTE: 1/3/5/7/8/9/19/20/28/41'
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Band LTE：1/3/5/7/8/9/19/20/28/41
- en: 'CA DL: B3-B5, B3-B8'
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: CA DL：B3-B5，B3-B8
- en: 'Battery: 3,220 mAh, wireless charging systems'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电池：3,220 mAh，无线充电系统
- en: 'The following screenshot shows the internal structure—SoCs, battery, display
    panel:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了内部结构——SoC、电池、显示屏：
- en: '![](img/epub_36702041_62.jpeg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/epub_36702041_62.jpeg)'
- en: Nexus 6 is obviously a fully CDD and CTS-compliant platform. It's shipped with
    the full Google Apps package and will be our reference as a certified device.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Nexus 6显然是一个完全符合CDD和CTS的平台。它配备了完整的谷歌应用包，并将作为我们的参考认证设备。
- en: UDOO Quad
  id: totrans-146
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: UDOO Quad
- en: Completely different compare to the Nexus 6, UDOO is not a smartphone or a Google
    certified device—there are no Google Apps here. It's a so-called Single Board
    Computer—a development and experimentation board that can be equipped with Android
    or Ubuntu Linux. UDOO will be our reference board to prove that we can create
    a working Android system out of hardware that's pretty different from a smartphone.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Nexus 6 完全不同，UDOO 不是一个智能手机或 Google 认证设备——这里没有 Google 应用。它是一个所谓的单板计算机——一个可以配备
    Android 或 Ubuntu Linux 的开发和实验板。UDOO 将成为我们的参考板，以证明我们可以从与智能手机相当不同的硬件中创建一个可工作的 Android
    系统。
- en: 'Let''s have a look at its technical specifics:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它的技术规格：
- en: Freescale ARM i.MX6 Cortex A9 Quad core 1GHz CPU
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Freescale ARM i.MX6 Cortex A9 四核 1GHz CPU
- en: GPU Vivante GC 2000 + Vivante GC 355 + Vivante GC 320
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GPU Vivante GC 2000 + Vivante GC 355 + Vivante GC 320
- en: Atmel SAM3X8E ARM Cortex-M3 CPU (same as Arduino Due)
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Atmel SAM3X8E ARM Cortex-M3 CPU（与 Arduino Due 相同）
- en: '76 fully available GPIO: 62 digital + 14 digital/analog'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 76 个完全可用的 GPIO：62 个数字 + 14 个数字/模拟
- en: 'RAM: DDR3 1GB'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RAM：DDR3 1GB
- en: Ethernet up to 1,000Mbit/s
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太网最高 1,000Mbit/s
- en: On board micro SD card as primary storage
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 板载 micro SD 卡作为主要存储
- en: HDMI port
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HDMI 端口
- en: LVDS port
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LVDS 端口
- en: Wi-Fi module
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wi-Fi 模块
- en: SATA interface
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SATA 接口
- en: RTC module
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RTC 模块
- en: CSI camera connection
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSI 摄像头连接
- en: 2 USB ports
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2 个 USB 端口
- en: 2 x 3.5" ports for mic and speakers![](img/epub_36702041_63.jpeg)
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2 个 3.5" 端口用于麦克风和扬声器！[](img/epub_36702041_63.jpeg)
- en: As you can see, there are no sensors—there is no fancy light sensor or gyroscope,
    no accelerometer, and no GPS. There is no Baseband Processor either—we can't make
    phone calls, but we have more than enough to run Android on it!
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，没有传感器——没有花哨的光传感器或陀螺仪，没有加速度计，也没有 GPS。也没有基带处理器——我们无法打电话，但足以在上面运行 Android
    了！
- en: Note
  id: totrans-165
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: You have surely spotted the Atmel microprocessor. Basically, UDOO comes with
    an embedded Arduino microprocessor that can be used to push your experimentations
    even further—go for it!
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 你肯定注意到了 Atmel 微处理器。基本上，UDOO 配备了一个嵌入式 Arduino 微处理器，可以用来进一步推动你的实验——去做吧！
- en: Compiling Android for a real-world device
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为实际设备编译 Android
- en: By now, you know everything you need to know about the build system and how
    to retrieve the source code. Retrieving the proper source code for Google official
    devices is no big deal, but life isn't always so easy. Working with many different
    devices, you will certainly come across a manufacturer who is not willing to give
    the source code away. They are not legally forced to release it. This is an unfortunate
    scenario that, hopefully, will be considered bad marketing and will disappear
    in the future.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你已经知道了关于构建系统和如何检索源代码所需的一切。检索 Google 官方设备的正确源代码并不是什么大问题，但生活并不总是这么简单。与许多不同的设备一起工作，你肯定会遇到一个不愿意提供源代码的制造商。他们没有法律义务发布它。这是一个不幸的情况，希望将来会被视为不良营销并消失。
- en: For our example, instead, we are going to play with two devices that offer great
    support and that will magnificently serve the purpose.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，我们将要玩两个提供良好支持且将完美服务于目的的设备。
- en: Nexus 6
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Nexus 6
- en: 'The first device we are going to explore is the official Google Nexus 6 by
    Motorola. We have already had an overview of the device. If you want to push it
    even further, you can refer to the official Motorola Nexus 6 web page:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要探索的第一台设备是摩托罗拉官方的 Google Nexus 6。我们已经对该设备有了概述。如果你想进一步推动它，可以参考官方摩托罗拉 Nexus
    6 网页：
- en: '[http://www.motorola.in/consumers/View-all-Mobile-Phones/Nexus-6-by-Motorola/nexus-6-in.html](http://www.motorola.in/consumers/View-all-Mobile-Phones/Nexus-6-by-Motorola/nexus-6-in.html)'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.motorola.in/consumers/View-all-Mobile-Phones/Nexus-6-by-Motorola/nexus-6-in.html](http://www.motorola.in/consumers/View-all-Mobile-Phones/Nexus-6-by-Motorola/nexus-6-in.html)'
- en: 'In the second chapter, we learned how to retrieve the source code for Google
    official devices. The only thing we need to know now is the specific tag to refer:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二章中，我们学习了如何检索 Google 官方设备的源代码。我们现在需要知道的是特定的标签来引用：
- en: '[PRE13]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The moment we have the source code, we can set up the environment with the
    setup script and run the `lunch` command to specifically target our Nexus 6\.
    The next screenshot shows how we are choosing device number 16, Nexus 6— codename
    Shamu:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有了源代码，我们可以使用设置脚本设置环境，并运行 `lunch` 命令来特别针对我们的 Nexus 6。下一张截图显示了我们是怎样选择设备编号 16，Nexus
    6——代号 Shamu：
- en: '[PRE14]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here is the output:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是输出：
- en: '![](img/epub_36702041_64.jpeg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/epub_36702041_64.jpeg)'
- en: 'For security and copyright reasons, the source base we acquired does not contain
    everything we need to build the system. Real-world devices, unlike the emulator,
    come with proprietary software components that must be downloaded separately.
    For instance, our Nexus 6 has proprietary software by three of its component manufacturers:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 由于安全和版权原因，我们获取的源代码库并不包含构建系统所需的所有内容。现实世界的设备，与模拟器不同，包含必须单独下载的专有软件组件。例如，我们的 Nexus
    6 有其三个组件制造商的专有软件：
- en: '**Broadcom**: NFC, Bluetooth, and Wi-Fi'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Broadcom**: NFC、蓝牙和 Wi-Fi'
- en: '**Motorola**: Media, audio, thermal, touchscreen, and sensors'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Motorola**: 媒体、音频、热管理、触摸屏和传感器'
- en: '**Qualcomm**: GPS, audio, camera, gesture, Graphics, DRM, video, and sensors'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qualcomm**: GPS、音频、摄像头、手势、图形、DRM、视频和传感器'
- en: 'The software components are distributed as binary files and can be downloaded
    at [https://developers.google.com/android/nexus/drivers](https://developers.google.com/android/nexus/drivers),
    by looking for Nexus 6, build codename LMY48M. Download the three files and extract
    them into your `WORKING_DIRECTORY`. The next screenshot shows the content of your
    download folder, with the three downloaded files:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 软件组件以二进制文件的形式分发，可以在 [https://developers.google.com/android/nexus/drivers](https://developers.google.com/android/nexus/drivers)
    下载，查找 Nexus 6，构建代号 LMY48M。下载三个文件并将它们提取到您的 `WORKING_DIRECTORY` 中。下一个截图显示了您的下载文件夹内容，包括三个下载的文件：
- en: '![](img/epub_36702041_65.jpeg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/epub_36702041_65.jpeg)'
- en: 'Every one of the downloaded packages contains a script, once you extract the
    content. The moment you run this script, it will show you a license you need to
    accept in order to continue. The next screenshot shows you the process for the
    `extract-broadcom-shamu.sh` file:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 每个下载的包在提取内容后都包含一个脚本，一旦您运行这个脚本，它将显示您需要接受才能继续的许可协议。下一个截图显示了 `extract-broadcom-shamu.sh`
    文件的流程：
- en: '[PRE15]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](img/epub_36702041_66.jpeg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/epub_36702041_66.jpeg)'
- en: These three scripts are the final configuration step before launching the actual
    build process. After we have accepted all the three licenses, we can run our trusted
    `make` command and, patiently, wait for the build process to complete.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个脚本是在启动实际构建过程之前的最终配置步骤。在我们接受所有三个许可协议后，我们可以运行我们信任的 `make` 命令，并耐心等待构建过程完成。
- en: When the build process is over, the `out/target/product/shamu/` folder will
    contain your first Android build for the Google Nexus 6.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 构建过程完成后，`out/target/product/shamu/` 文件夹将包含您为 Google Nexus 6 的第一个 Android 构建。
- en: UDOO Quad
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: UDOO Quad
- en: UDOO is one of the most popular development boards on the market. The hardware
    is top notch, the user community is great, it's well documented and it's the perfect
    workbench for an infinite number of experiments.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: UDOO 是市场上最受欢迎的开发板之一。硬件一流，用户社区良好，文档详尽，是无数实验的理想工作台。
- en: 'UDOO is not a Google device, so there is no chance we could use the source
    code we already have to create out custom Android system. We must stick to the
    source code that UDOO manufacturers provide the advanced users with. You can download
    the source code from the following link:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: UDOO 不是 Google 设备，所以我们没有机会使用我们已有的源代码来创建我们定制的 Android 系统。我们必须坚持使用 UDOO 制造商提供给高级用户的源代码。您可以从以下链接下载源代码：
- en: '[http://download.udoo.org/files/Sources/UDOO_Android_4.4.2_Source_v1.0.tar.gz](http://download.udoo.org/files/Sources/UDOO_Android_4.4.2_Source_v1.0.tar.gz)'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://download.udoo.org/files/Sources/UDOO_Android_4.4.2_Source_v1.0.tar.gz](http://download.udoo.org/files/Sources/UDOO_Android_4.4.2_Source_v1.0.tar.gz)'
- en: 'Once you have downloaded the file, you can extract it using your terminal and
    the following command:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 下载文件后，您可以使用终端和以下命令提取它：
- en: '[PRE16]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note
  id: totrans-196
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: As you have already figured out, the last available version of the UDOO Android
    source base is KitKat. When our adventure is over, you could try to port Lollipop
    to this platform as a new challenging Android project.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所已了解，目前可用的最后版本的 UDOO Android 源代码库是 KitKat。当我们的冒险结束时，您可以尝试将 Lollipop 移植到这个平台，作为一个新的具有挑战性的
    Android 项目。
- en: The extracted files and folders look exactly like the official Android folder
    structure we saw for the Nexus 6\. The only real difference is that UDOO provides
    us with the source code for almost every component—you will find the bootloader
    source code and even the Linux kernel source code. Both bootloader and kernel
    will be compiled during the building process, unlike the Nexus 6 scenario, where
    we got them as precompiled files. The Android system, bootloader, and kernel will
    be combined to create the final image set we will need to deploy to our UDOO.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 提取的文件和文件夹看起来与我们在Nexus 6中看到的官方Android文件夹结构完全一样。唯一的真正区别是UDOO为我们提供了几乎所有组件的源代码——您将找到引导加载程序源代码甚至Linux内核源代码。引导加载程序和内核将在构建过程中编译，与Nexus
    6的情况不同，那时我们得到了预编译的文件。Android系统、引导加载程序和内核将被组合，以创建我们需要部署到UDOO的最终镜像集。
- en: Setup
  id: totrans-199
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 设置
- en: 'Before launching the `envsetup` script, we need to configure the environment
    to be able to build the bootloader. We will learn a lot about the bootloader in
    the next sections. For now, you just need to open up your Terminal and run these
    commands:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动`envsetup`脚本之前，我们需要配置环境，以便能够构建引导加载程序。我们将在下一节中学习很多关于引导加载程序的知识。现在，您只需打开您的终端并运行以下命令：
- en: '[PRE17]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As the last configuration step, we need to set up the build system to properly
    generate the system image for our UDOO:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最后的配置步骤，我们需要设置构建系统，以便正确生成适用于我们的UDOO的系统镜像：
- en: '[PRE18]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Bootloader
  id: totrans-204
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 引导加载程序
- en: 'Everything is in place. We can now compile the bootloader. Open a Terminal
    and navigate to the `bootloader` folder:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 一切就绪。我们现在可以编译引导加载程序了。打开终端并导航到`bootloader`文件夹：
- en: '[PRE19]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This folder contains the executable to perform the bootloader compilation.
    Run it like this:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件夹包含执行引导加载程序编译的可执行文件。按照以下方式运行它：
- en: '[PRE20]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The previous command will show a configuration dialog, like the one in the
    next screenshot. You will select the hardware configuration you are targeting—CPU,
    RAM, and so on. When everything is properly configured, the compilation process
    will be performed and it will generate the bootloader binary images:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令将显示一个配置对话框，就像下一个截图中的那样。您将选择您要针对的硬件配置——CPU、RAM等等。当一切配置妥当后，编译过程将被执行，并将生成引导加载程序二进制镜像：
- en: '![](img/epub_36702041_67.jpeg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/epub_36702041_67.jpeg)'
- en: System
  id: totrans-211
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 系统
- en: 'Once we have the bootloader images, we can go back to the source code root
    folder and launch the main system image build process, using the following command:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了引导加载程序镜像，我们就可以回到源代码根目录，并使用以下命令启动主系统镜像构建过程：
- en: '[PRE21]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This could take a while, so be patient. As usual, when the compilation is over,
    you will find all the binary images you will need in the `out/` folder, ready
    to be installed to our hardware and bring it to live.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能需要一些时间，所以请耐心等待。像往常一样，当编译完成后，您将在`out/`文件夹中找到所有需要的二进制镜像，准备安装到我们的硬件上并使其活跃起来。
- en: Kernel
  id: totrans-215
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 内核
- en: 'The Linux kernel will be compiled automatically during the Android system building
    process. If you want, you can also build the kernel by yourself, using the following
    commands:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: Linux内核将在Android系统构建过程中自动编译。如果您愿意，也可以使用以下命令自行编译内核：
- en: '[PRE22]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The process will generate a brand new `boot.img` in the `out/` folder. You can
    find the specific kernel file in `kernel_imx/arch/arm/boot`.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程将在`out/`文件夹中生成一个新的`boot.img`。您可以在`kernel_imx/arch/arm/boot`中找到特定的内核文件。
- en: Bootloader mode
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引导加载程序模式
- en: The previous sections guided you to your first system images, ready to be flashed
    to your hardware. These images will be deployed to the device memory. The Nexus
    6 has an internal Nand memory. The UDOO has a pretty standard SD card. The first
    step of the deployment is switching the device into the bootloader mode.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 上一节指导您创建了第一个系统镜像，准备将其烧录到您的硬件上。这些镜像将被部署到设备内存中。Nexus 6有一个内置的Nand内存。UDOO有一个相当标准的SD卡。部署的第一步是将设备切换到引导加载程序模式。
- en: Bootloader mode is a particular state of the device that allows us to transfer
    and deploy a system image to the device itself, using the `fastboot` utility.
    Every device running Android has this mode, but not every device will let us access
    it. Some devices come with a locked bootloader, for security reasons or simply
    because of a short-sighted manufacturer.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 引导加载程序模式是设备的一种特定状态，允许我们使用`fastboot`实用程序将系统镜像传输和部署到设备本身。每个运行Android的设备都有这种模式，但并非每个设备都允许我们访问它。一些设备配备了锁定的引导加载程序，出于安全原因或仅仅是因为制造商的短视。
- en: 'Obviously, we will be able to access the bootloader on our devices: Google
    is a generous manufacturer and every Nexus device comes with an unlocked or unlockable
    bootloader; UDOO, as a development board, is designed to be developer friendly,
    as well.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们将能够访问我们设备上的引导加载程序：Google 是一个慷慨的制造商，每个 Nexus 设备都配备了未锁定或可解锁的引导加载程序；UDOO 作为开发板，旨在对开发者友好。
- en: Nexus devices
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Nexus 设备
- en: 'Every Nexus device will let us to access bootloader mode, but every device
    will do it in its own way. According to the model, we will need a specific sequence
    of steps to boot the device in bootloader mode. The following table shows how
    to do it for every Nexus device. Be sure to turn off your device and unplug the
    USB cable, pick the model from the table, and press the right buttons:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Nexus设备都会让我们访问引导加载程序模式，但每个设备都会以自己的方式完成。根据型号，我们需要一系列特定的步骤来在引导加载程序模式下启动设备。以下表格显示了如何为每个Nexus设备执行此操作。请确保关闭您的设备并拔掉USB线缆，从表格中选择型号，并按下正确的按钮：
- en: '![](img/epub_36702041_68.jpeg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](img/epub_36702041_68.jpeg)'
- en: 'For our Nexus 6, we need to press *Volume Down* then also press *Power* and
    keep both pressed. The smartphone will boot and you will land on a screen like
    the one in the following screenshot:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的 Nexus 6，我们需要按下 *音量下* 然后也按下 *电源* 并保持两者按下。智能手机将启动，您将看到如下截图所示的屏幕：
- en: '![](img/epub_36702041_69.jpeg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](img/epub_36702041_69.jpeg)'
- en: Here we are in `Bootloader Mode`!
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在处于 `Bootloader Mode`！
- en: 'The first thing you will notice is the quite explicit:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 您首先会注意到的是相当明确的：
- en: '*Device is LOCKED*'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '*设备已锁定*'
- en: 'As we said, Nexus devices come with an unlockable bootloader. We just need
    to connect the device to our computer with a standard USB cable, open a terminal
    and run the following command:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所说，Nexus 设备配备了可解锁的引导加载程序。我们只需将设备通过标准 USB 线缆连接到我们的电脑，打开终端并运行以下命令：
- en: '[PRE23]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You will see a notice message that will warn you that unlocking the bootloader
    will erase everything on your device. Yes, it will. That's unfortunate, but, from
    a security and system point of view, it's necessary.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到一个警告消息，它会警告您解锁引导加载程序将擦除设备上的所有内容。是的，它会。这很不幸，但从安全和系统角度来看，这是必要的。
- en: Note
  id: totrans-234
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: This is the right moment to think about a data backup. You can still abort the
    process, restart your smartphone, save your data and try again. We will wait for
    you!
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是考虑数据备份的合适时机。您仍然可以中止进程，重新启动您的智能手机，保存您的数据，然后再次尝试。我们将等待您！
- en: 'If you are brave enough and you just don''t need all those pictures of little
    kitties on your phone anymore, just select `YES` and the bootloader will unlock
    smoothly. If for any reason you''d like the bootloader to lock again, you can
    use the following command:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您足够勇敢，而且您不再需要手机上的所有小猫图片，只需选择 `YES`，引导加载程序将顺利解锁。如果出于任何原因您希望引导加载程序再次锁定，可以使用以下命令：
- en: '[PRE24]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The moment we unlocked the bootloader, we gained full control of the Nand memory—we
    can erase partitions or flash the system images we have created. Unfortunately,
    Google does not release the source code of the bootloader, so we wouldn't know
    how they implement the whole fastboot protocol. Luckily for us, we are going to
    figure it out thanks to UDOO. The UDOO manufacturer provides us with the full
    source base, even the one for the bootloader.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们解锁引导加载程序后，我们获得了对 Nand 存储器的完全控制权——我们可以擦除分区或刷入我们创建的系统镜像。不幸的是，Google 没有发布引导加载程序源代码，所以我们不知道他们是如何实现整个
    fastboot 协议的。幸运的是，我们将借助 UDOO 来解决这个问题。UDOO 制造商为我们提供了完整的源代码库，包括引导加载程序的源代码。
- en: UDOO family boards
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: UDOO 家族板
- en: 'UDOO comes as an open book. We can access every partition on its memory, with
    basically zero effort. There is no such thing as a "button ninja combination"
    to switch to bootloader mode. We can use a serial connection to analyze the whole
    boot process, stop it, and interact with it using the control console:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: UDOO 就像一本打开的书。我们可以几乎不费吹灰之力访问其内存上的每个分区。没有“按钮忍者组合”来切换到引导加载程序模式。我们可以使用串行连接来分析整个引导过程，停止它，并使用控制台与之交互：
- en: Connect the serial interface
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接串行接口
- en: Stop the boot sequence
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止引导序列
- en: Access the uboot console
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 u-boot 控制台
- en: Run fastboot
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 fastboot
- en: We now have the `fastboot server` ready to go. With the server in place, we
    will be able to connect to fastboot from our computer, using the `fastboot client`
    we already know.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已准备好 `fastboot 服务器`。有了服务器，我们将能够从我们的电脑连接到 fastboot，使用我们已知的 `fastboot 客户端`。
- en: This process could seem a bit harder than the one from Nexus. That's true. The
    fact is that UDOO does not ship with a default secret bootloader like the Nexus
    or any other mainstream smartphone on the market does. UDOO is mainly a development
    board and, as with lots of such devices, gives you the freedom and power to choose
    the bootloader you prefer. However, in an effort to be more developer friendly,
    UDOO can perfectly work with the most popular open source bootloader solution—`uboot`.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程可能看起来比 Nexus 的过程要难一些。这是真的。事实是，UDOO 并没有像 Nexus 或市场上任何其他主流智能手机那样配备默认的保密引导加载程序。UDOO
    主要是一块开发板，就像很多这样的设备一样，它给你提供了选择你喜欢的引导加载程序的自由和权力。然而，为了更加友好地对待开发者，UDOO 可以与最流行的开源引导加载程序解决方案——`uboot`
    完美地协同工作。
- en: The `uboot` solution is fully compliant with the standard requirements for a
    bootloader to properly launch an operating system—hardware initialization, memory
    test, and so on. It also implements the fastboot protocol and the extraction of
    the kernel contained in the `boot.img`, generated by the build system. These last
    two features make it fully compatible with Android.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '`uboot` 解决方案完全符合引导加载程序正确启动操作系统的标准要求——硬件初始化、内存测试等等。它还实现了 fastboot 协议和从构建系统生成的
    `boot.img` 中提取内核。这两个特性使得它与 Android 完全兼容。'
- en: Flashing Android images
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刷 Android 系统镜像
- en: Here we are. Every piece of the puzzle is in place—you can finally move forward
    to installing your brand new custom Android version onto your device.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 到这里了。拼图的每一块都到位了——你终于可以开始将你全新的自定义 Android 版本安装到你的设备上了。
- en: Note
  id: totrans-250
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: 'As a reminder, we built the so-called stock version of the Android system:
    you won''t find any of the Google apps in here—no YouTube, no Google Play Store.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 作为提醒，我们构建了所谓的库存版本的 Android 系统：你在这里找不到任何 Google 应用程序——没有 YouTube，没有 Google Play
    Store。
- en: Nexus 6
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Nexus 6
- en: 'After the build process is complete, you will find all the system images you
    need in the **out/target/product/shamu** folder:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 构建过程完成后，你将在 **out/target/product/shamu** 文件夹中找到你需要的所有系统镜像：
- en: '`system.img`: This is, well, the system image. It contains the whole operating
    system—Android Framework, system native libraries, and the system utility app,
    such as Calc or Clock.'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`system.img`：这个是，嗯，系统镜像。它包含整个操作系统——Android 框架、系统本地库以及系统实用应用程序，例如计算器或时钟。'
- en: '`recovery.img`: This image contains what we are going to place in the *Recovery*
    partition. It contains a kernel and the recovery software itself.'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recovery.img`：这个镜像包含我们将放置在 *Recovery* 分区中的内容。它包含一个内核和恢复软件本身。'
- en: '`boot.img`: This image contains the Linux Kernel and a small RamDisk. This
    image will be placed in the boot partition and will contain all the files needed
    to initialize the system: `init.rc`, for instance, and every other component needed
    to start the system.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boot.img`：这个镜像包含 Linux 内核和一个小型的 RamDisk。这个镜像将被放置在引导分区中，并将包含初始化系统所需的所有文件：例如
    `init.rc`，以及启动系统所需的每一个组件。'
- en: 'Every partition can be flashed using a specific partition image and an appropriate
    command. Switch your Nexus into bootloader mode, plug the USB cable, and let''s
    flash a few partitions. Launch your Terminal, navigate to `out/target/product/shamu`,
    and execute these commands:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 每个分区都可以使用特定的分区镜像和适当的命令进行刷写。将你的 Nexus 切换到引导加载程序模式，插入 USB 线，然后刷写几个分区。启动你的终端，导航到
    `out/target/product/shamu`，并执行以下命令：
- en: '[PRE25]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The last command will reboot your device and your brand new custom Android version
    will come to life! This first version of the system will definitely look bare
    without Google Play Store. With no possibility of installing applications, there
    is very little we can do with a device, indeed. No sad faces, please! In the next
    chapters, we will learn how to acquire and install the Google apps we need and
    how to customize our system.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一条命令将重新启动你的设备，你全新的自定义 Android 版本将开始运行！这个系统的第一个版本肯定看起来会很简陋，没有 Google Play Store。没有安装应用程序的可能性，实际上我们几乎无法使用这个设备。请不要露出悲伤的表情！在接下来的章节中，我们将学习如何获取和安装我们需要的
    Google 应用程序以及如何定制我们的系统。
- en: As a final note, in this first run, we used the Linux Kernel provided by Google—we
    didn't compile it from sources. In the next chapters, we will learn how to do
    it and take full control.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最后的说明，在这个第一次运行中，我们使用了 Google 提供的 Linux 内核——我们没有从源代码编译它。在接下来的章节中，我们将学习如何进行编译并完全控制。
- en: UDOO
  id: totrans-261
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: UDOO
- en: As usual, UDOO is slightly different. We have a few possible paths to achieve
    our goal, but first things first—partitions. The first step is to prepare the
    SD card with the proper partitions set. Unlike the Nexus and its pre-partitioned
    Nand memory, ready to be flashed, with UDOO we have full control of the system,
    even of the memory partitioning.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 如往常一样，UDOO略有不同。我们有几种可能的路径来实现我们的目标，但首先的事情是分区。第一步是准备带有适当分区的SD卡。与Nexus及其预分区Nand内存不同，Nexus可以直接烧录，UDOO我们完全控制系统，包括内存分区。
- en: 'Freedom and power come with responsibility—we need to create the proper partitions
    before being able to install the system. Being developer friendly, the UDOO development
    team provides a handy script to speed up the job. The root folder of your UDOO
    working directory contains a `make_sd.sh` file. Insert the UDOO SD card in your
    computer and detect the disk number:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 自由和力量伴随着责任——我们需要在安装系统之前创建适当的分区。为了方便开发者，UDOO开发团队提供了一个方便的脚本来加快这项工作。你的UDOO工作目录的根目录中包含一个`make_sd.sh`文件。将UDOO
    SD卡插入你的电脑并检测磁盘号：
- en: On Linux, using `df –f`, you should look for something like `/dev/mmcblkX`
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Linux上，使用`df –f`，你应该寻找类似`/dev/mmcblkX`的东西。
- en: On OS X, using `diskutil list` you should look for something like `/dev/rdisksX`
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在OS X上，使用`diskutil list`，你应该寻找类似`/dev/rdisksX`的东西。
- en: 'A super easy trick is to insert the SD card and note down all the disk numbers.
    Extract the SD card and figure out the one that is now missing! Once you have
    detected the disk number, you can run the script like this by specifying the proper
    disk name:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 一个超级简单的技巧是将SD卡插入并记下所有的磁盘号。取出SD卡，找出现在缺失的那个！一旦你检测到磁盘号，你可以像这样运行脚本，指定正确的磁盘名称：
- en: '[PRE26]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The script will automatically erase the SD card, create the partition structure,
    and copy all the files the build system generated and deployed in `out/`. This
    could take a while, depending on the speed of your SD card.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本将自动擦除SD卡，创建分区结构，并复制构建系统在`out/`中生成和部署的所有文件。这可能需要一段时间，具体取决于你的SD卡速度。
- en: 'As we saw, developing for a Google device is pretty straightforward: we download
    the source code and start configuring the system to achieve our built images.
    We end up with a stock version of the system we can later decide to customize
    as we like. Developing or porting Android to a new hardware is a totally different
    matter: it is quite different and requires a bit of effort and commitment.'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，为谷歌设备开发相当直接：我们下载源代码并开始配置系统以生成我们的构建镜像。最终我们得到一个可以稍后决定按需定制的系统版本。将Android开发或移植到新硬件则完全是另一回事：这相当不同，需要一些努力和承诺。
- en: When you decide to set out for a journey like this, the first crucial step is
    choosing the proper hardware platform. The market offers a large collection of
    vendors and every vendor offers his own particular solutions—different SoC, different
    on-board sensors, cheap low-end boards, or hyper-fast expensive boards. There
    is no place in this book for discussion about choosing an expensive board or not.
    We focus on the developer and their world and, as a professional, 99% of the time
    they will find themselves working with a so-called reference board*.*
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 当你决定开始这样的旅程时，第一步是选择合适的硬件平台。市场提供了大量的供应商，每个供应商都提供他自己的特定解决方案——不同的SoC、不同的板载传感器、便宜的低端板或超快的昂贵板。这本书中没有讨论选择昂贵板或不选择昂贵板的讨论空间。我们专注于开发者和他们的世界，作为一个专业人士，99%的时间他们都会发现自己在与所谓的参考板打交道*。
- en: 'A **reference board** is a particular kind of development board that every
    vendor offers to its potential clients. Usually, a reference board ships with
    everything possible on-board—tons of sensors, tons of external devices, tons of
    connectors, and possible purposes. The final goal is to provide developers with
    a board that can truly show off the full potential of the SoC and the whole hardware
    solution. Everything is tailored to make developers'' life easy: the Linux Kernel
    source code is provided, the hardware components specifications are provided,
    and the documentation is provided.'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '**参考板**是一种特殊类型的发展板，每个供应商都向其潜在客户提供。通常，参考板会配备尽可能多的板载组件——大量的传感器、大量的外部设备、大量的连接器以及可能的应用目的。最终目标是向开发者提供一个能够真正展示SoC和整个硬件解决方案全部潜力的板子。一切都是为了使开发者的生活更轻松：提供了Linux内核源代码，提供了硬件组件规格，并提供了文档。'
- en: The UDOO board we played with in the chapter can be considered close to a reference
    board. It does not have every possible sensor, but it's easily expandable with
    external sensors and we know how to communicate with those sensors because the
    platform is open and easy to debug. An easy way to debug our software and hardware
    is crucial to make our developing time effective.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用的 UDOO 板可以被认为是参考板。它没有每个可能传感器，但它很容易通过外部传感器进行扩展，并且我们知道如何与这些传感器通信，因为平台是开放的且易于调试。一种调试我们软件和硬件的简单方法是至关重要的，这有助于使我们的开发时间更有效。
- en: 'UDOO comes with a handy micro-USB connection that is also a Serial-to-USB converter.
    Using this connection, we can interact with the board at one of the lowest level
    monitors and manipulate the boot sequence. To properly connect to the board console,
    we need to install a specific software on our computer: a modem control and terminal
    emulator named `minicom`.'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: UDOO 配备了一个方便的 micro-USB 连接，它也是一个串行到 USB 转换器。使用此连接，我们可以在最低级别的监视器之一与板子交互并操作启动序列。为了正确连接到板子控制台，我们需要在计算机上安装特定的软件：一个名为
    `minicom` 的调制解调器控制和终端仿真器。
- en: 'You can install it on Ubuntu using `apt-get`:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `apt-get` 在 Ubuntu 上安装它：
- en: '[PRE27]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You can install it on OS X using `brew`:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `brew` 在 OS X 上安装它：
- en: '[PRE28]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'When we have `minicom`, we can connect the turned-off UDOO to the USB port
    and run the following command on our Terminal:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有了 `minicom`，我们可以将关闭的 UDOO 连接到 USB 端口，并在我们的终端上运行以下命令：
- en: '[PRE29]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '`ttyUSB0` is the system device that the operating system associated to the
    UDOO connection. It could be different on your system, that is `ttyUSB1`, `ttyUSB2`,
    according to the hardware configuration, other connected USB devices, and so on.
    A bit of trial and error could be necessary.'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '`ttyUSB0` 是操作系统与 UDOO 连接关联的系统设备。在您的系统中，它可能不同，例如 `ttyUSB1`、`ttyUSB2`，这取决于硬件配置、其他连接的
    USB 设备等因素。可能需要进行一些尝试和错误。'
- en: 'We can now plug the power cable in and turn on the board. If the connection
    is properly configured, you will see the boot sequence as shown in the following
    screenshot:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以插入电源线并打开板子。如果连接配置正确，您将看到以下截图所示的启动序列：
- en: '![](img/epub_36702041_70.jpeg)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/epub_36702041_70.jpeg)'
- en: We can monitor the boot sequence and interact with the system in a few interesting
    ways. The one we are interested in now is stopping the boot sequence and switching
    to bootloader mode.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过几种有趣的方式监控启动序列并与系统交互。我们现在感兴趣的是停止启动序列并切换到引导加载程序模式。
- en: 'During the boot sequence, you will see a message suggesting how to stop the
    boot sequence itself and access `uboot`. Once you are in, run `fastboot` as shown
    in the following screenshot:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动序列过程中，您将看到一条消息，提示如何停止启动序列本身并访问 `uboot`。一旦进入，按照以下截图所示运行 `fastboot`：
- en: '![](img/epub_36702041_71.jpeg)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/epub_36702041_71.jpeg)'
- en: 'We can now flash the system images we have:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以刷写我们拥有的系统镜像：
- en: '[PRE30]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Having the serial connection still on, when the system reboots, we can enjoy
    all the system messages that the boot sequence provides: system initialization
    and Linux kernel loading, until we reach Android loading and finish to Android
    system console prompt. This is the beauty and the power of having deep access
    to and knowledge about your system and your hardware. The following screenshot
    shows a part of the boot sequence in the precise moment of kernel deployment:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在保持串行连接的情况下，当系统重启时，我们可以享受启动序列提供的所有系统消息：系统初始化和 Linux 内核加载，直到我们达到 Android 加载并完成
    Android 系统控制台提示。这正是深入访问和了解您的系统和硬件的美丽与力量。以下截图显示了内核部署精确时刻的启动序列的一部分：
- en: '![](img/epub_36702041_72.jpeg)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/epub_36702041_72.jpeg)'
- en: Summary
  id: totrans-290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you have built and installed your first Android system for
    a real-world device. You now know a lot more about Google Nexus 6 and UDOO board.
    You have learned how to use ADB and Fastboot. You have learned how to interact
    with a development board using a serial connection and tools such as minicom,
    monitoring, and manipulating the boot sequence.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您为实际设备构建并安装了您的第一个 Android 系统。您现在对 Google Nexus 6 和 UDOO 板了解得更多。您已经学习了如何使用
    ADB 和 Fastboot。您已经学习了如何通过串行连接和 minicom、监控以及操作启动序列等工具与开发板交互。
- en: In the next chapter, we will dig into the Linux kernel building and customization.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入了解 Linux 内核的构建和定制。
