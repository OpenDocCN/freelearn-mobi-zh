- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: iPhone Project – Tax Calculator Design
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: iPhone项目 – 税收计算器设计
- en: In the previous chapter, we did a recap of Swift and SwiftUI. We looked at the
    requirements, the coding standards used, and the basics of SwiftUI components.
    We will use these in the following chapters.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们对Swift和SwiftUI进行了回顾。我们研究了要求、使用的编码标准和SwiftUI组件的基础。我们将在以下章节中使用这些内容。
- en: 'In this chapter, we will work on the design of our first project, a tax calculator.
    We will assess the requirements for designing such an application and discuss
    the design specifications, allowing us to get a better understanding of what is
    required and how it will all fit together. Then, we will start our application’s
    coding process to build out the UI, which will be connected together allowing
    the application to fully function in the next chapter. This project will teach
    us the foundations of SwiftUI components and how to interact with external code
    bases. We will discuss all of this in the following sections:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将着手设计我们的第一个项目，一个税收计算器。我们将评估设计此类应用程序的要求，并讨论设计规格，以便我们更好地理解所需的内容以及它们如何相互配合。然后，我们将开始我们的应用程序编码过程，构建UI，这将连接在一起，使应用程序在下一章中完全运行。这个项目将教会我们SwiftUI组件的基础以及如何与外部代码库交互。我们将在以下章节中讨论所有这些内容：
- en: Technical Requirements
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技术要求
- en: Understanding the Design Specifications
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解设计规格
- en: Building the Calculator UI
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建“计算器”UI
- en: By the end of this chapter, you will have a better understanding of what is
    required and the design of our application. You will also have a skeleton UI that
    will be used as the foundation for making the calculator work in the next chapter.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将更好地理解所需的内容和我们的应用程序设计。您还将拥有一个骨架UI，它将作为下一章使计算器工作的基础。
- en: In the next section, we will provide clarity on the specifications of our application’s
    design and look at mockups of what the app will look like.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将提供我们应用程序设计规格的详细说明，并查看应用程序的外观原型。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter requires you to download Xcode version 14 or above from Apple’s
    App Store.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章要求您从Apple的App Store下载Xcode版本14或更高版本。
- en: To install Xcode, just search for `Xcode` in the App Store, then select and
    download the latest version. Open Xcode and follow any additional installation
    instructions. Once Xcode has opened and launched, you’re ready to go.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Xcode，只需在App Store中搜索`Xcode`，然后选择并下载最新版本。打开Xcode并遵循任何额外的安装说明。一旦Xcode打开并启动，你就可以开始了。
- en: 'Version 14 of Xcode has the following features/requirements:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode 14版本具有以下功能/要求：
- en: Includes SDKs for iOS 16, iPadOS 16, macOS 12.3, tvOS 16, and watchOS 9.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含适用于iOS 16、iPadOS 16、macOS 12.3、tvOS 16和watchOS 9的SDK。
- en: Supports on-device debugging in iOS 11 or later, tvOS 11 or later, and watchOS
    4 or later.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持iOS 11或更高版本、tvOS 11或更高版本和watchOS 4或更高版本的设备调试。
- en: Requires a Mac running macOS Monterey 12.5 or later.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要运行macOS Monterey 12.5或更高版本的Mac。
- en: 'Download the sample code from the following GitHub link:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 从以下GitHub链接下载示例代码：
- en: '[https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects](https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects](https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects)'
- en: In the next section, we will provide clarity on the specifications of our application’s
    design and look at mockups of what the app will look like.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将提供我们应用程序设计规格的详细说明，并查看应用程序的外观原型。
- en: Understanding the Design Specifications
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解设计规格
- en: In this section, we will look at the design specifications of our tax calculator
    application. This section describes the features we are going to implement in
    our tax calculator app. The best method for figuring out the features required
    is to put yourself in the user’s shoes to determine how they will use the app
    and break it into individual steps.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将查看我们的税收计算器应用程序的设计规格。本节描述了我们将实现的功能。确定所需功能的最佳方法是站在用户的角度，确定他们将如何使用应用程序，并将其分解为单独的步骤。
- en: 'The features of our app are as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的功能如下：
- en: Income entry – the ability to enter an income.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收入录入 – 输入收入的能力。
- en: Salary summary – a summary of how much is going to be taxed and how much is
    left as income.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工资摘要 – 将被征税的金额摘要以及剩余的收入。
- en: Tax breakdown – a breakdown of how much tax is paid on a given salary, that
    is, tax brackets.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 税收分解 – 指定工资所缴纳的税额分解，即税率。
- en: Different taxes – the ability to calculate a breakdown for different types of
    taxes, such as income, property flipping, inheritance, and stamp duty.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同类型的税收 – 能够计算不同类型税收的分解，例如收入、房地产交易、遗产和印花税。
- en: Tax geography – the ability to calculate a breakdown for taxes in different
    geographies, including countries and states.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 税收地理区域 – 能够计算不同地理区域（包括国家和州）的税收分解。
- en: Combination of the previous two – the ability to calculate a breakdown for different
    taxes in different geographies.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前两个的结合 – 在不同地理区域计算不同税种的分解能力。
- en: User system – allows users to create an account to store tax calculations, see
    how the tax has changed over time relative to new tax laws, and so on.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户系统 – 允许用户创建账户以存储税收计算，查看税收如何随着新税法的变化而变化，等等。
- en: 'Now that we have listed the ideal features we would like, next, it is important
    for us to determine which features are absolutely crucial. To do this, we must
    understand the end use of our product. For me, the purpose of creating this tax
    calculator is not to release it and have it serve millions of people but to be
    a personal project for our use. It is to demonstrate a basic implementation of
    SwiftUI within the context of this book. Based on that, I know that all the features
    are not required; actually, it would be useful if some were omitted and assigned
    as extra tasks for you as the developer to undertake. Based on all of this, the
    following are the core features we will be implementing:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经列出了我们希望的理想功能，接下来，对我们来说，确定哪些功能是绝对必要的非常重要。为了做到这一点，我们必须了解我们产品的最终用途。对我来说，创建这个税收计算器的目的不是为了发布它并使其服务于数百万的人，而是作为一个个人项目供我们使用。这是为了展示在本书的背景下SwiftUI的基本实现。基于这一点，我知道并不是所有功能都是必需的；实际上，如果某些功能被省略并分配给你作为开发者的额外任务，那将是有用的。基于所有这些，以下是我们将实现的核心功能：
- en: Income entry
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收入输入
- en: Salary summary
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工资摘要
- en: Tax breakdown
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 税收分解
- en: The rest of the features will be left for you to implement as an exercise once
    you have completed this and the next chapter. The next section will cover the
    acceptance criteria for our application.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 其余的功能将留给你在完成这一章和下一章后作为练习来实现。下一节将涵盖我们应用程序的验收标准。
- en: Acceptance criteria
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验收标准
- en: 'We will discuss the mandatory requirements for our application that we absolutely
    want to see in the end product at the end of the next chapter. If possible, we
    should try to make them measurable. Let’s do this right now:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章的末尾讨论我们应用程序的强制性要求，我们绝对希望在最终产品中看到这些要求。如果可能的话，我们应该尝试使它们可衡量。让我们现在就来做这件事：
- en: 'Error detection:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误检测：
- en: '**Not a Number** (**NaN**) values'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**非数字**（**NaN**）值'
- en: Values that are equal to or less than 0
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等于或小于 0 的值
- en: Provides the before- and after-tax salaries
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供税前和税后的工资
- en: A pie chart to illustrate the breakdown visually
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个饼图来直观地展示分解
- en: Progress bars to further expand upon the breakdown
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进度条来进一步扩展分解
- en: Navigation to allow users to switch between the pages effortlessly
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航，使用户能够轻松地在页面之间切换
- en: Develop test cases in which the application’s acceptance criteria will be tested.
    Using this method allows you to see the conditions in which the application will
    be used by the end user and the level of functionality that needs to be attained
    for it to be considered successful.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 开发测试用例，以测试应用程序的验收标准。使用这种方法可以让你看到最终用户将使用应用程序的条件以及需要达到的功能水平，以便被认为是成功的。
- en: Wireframe
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 线框
- en: 'One of the most useful tools for designing layouts is wireframing. A wireframe
    is an overview of how the layout will look. The following figure shows what the
    front page of our app would look like using a wireframe:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 设计布局最有用的工具之一是线框。线框是布局外观的概述。以下图显示了我们的应用程序首页使用线框将看起来是什么样子：
- en: '![Figure 2.1 – Front page wireframe preview](img/Figure_2.01_B18783.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.1 – 封面线框预览](img/Figure_2.01_B18783.jpg)'
- en: Figure 2.1 – Front page wireframe preview
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1 – 封面线框预览
- en: 'The following figure shows the wireframe of what our results page would look
    like:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了我们的结果页面将如何看起来：
- en: '![Figure 2.2 – Results page wireframe preview](img/Figure_2.02_B18783.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.2 – 结果页面线框预览](img/Figure_2.02_B18783.jpg)'
- en: Figure 2.2 – Results page wireframe preview
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2 – 结果页面线框预览
- en: In the next section, we will build the interface for our application and make
    sure it looks the way we designed it in the wireframes. Though we will build it
    the same way, there can be small differences. This will serve as the foundation
    for connecting it all together in the next chapter.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将构建我们应用程序的界面，并确保它看起来与我们在线框图中设计的一样。虽然我们将以相同的方式构建它，但可能会有一些小的差异。这将为下一章中将其全部连接在一起奠定基础。
- en: Building the calculator UI
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建计算器 UI
- en: 'We will now build the UI for the calculator app. There are two main parts to
    the calculator, the first being the front page, which is loaded on launch. Once
    the user inputs an income and hits **Calculate Tax**, they are taken to the results
    page, which is the second part. On this page, the results of the tax calculation
    and a breakdown of it will be displayed. Naturally, we will start off with the
    first part, the front page, but before even that, we will create our project.
    Follow these steps:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将构建计算器应用程序的 UI。计算器有两个主要部分，第一部分是封面页，在启动时加载。一旦用户输入收入并点击**计算税**，他们将被带到结果页，这是第二部分。在这个页面上，将显示税计算的结果及其分解。自然地，我们将从第一部分，封面页开始，但在那之前，我们将创建我们的项目。按照以下步骤操作：
- en: 'Open Xcode and select **Create a new** **Xcode project**:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Xcode 并选择**创建新的** **Xcode 项目**：
- en: '![Figure 2.3 – Create a new Xcode project](img/Figure_2.03_B18783.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.3 – 创建新的 Xcode 项目](img/Figure_2.03_B18783.jpg)'
- en: Figure 2.3 – Create a new Xcode project
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3 – 创建新的 Xcode 项目
- en: 'Now, we will choose the template for our application. As we are creating an
    iPhone application, we will select **iOS** from the top and then select **App**
    and click **Next**:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将为我们的应用程序选择模板。由于我们正在创建一个 iPhone 应用程序，我们将从顶部选择**iOS**，然后选择**App**并点击**下一步**：
- en: '![Figure 2.4 – Xcode project template selection](img/Figure_2.04_B18783.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.4 – Xcode 项目模板选择](img/Figure_2.04_B18783.jpg)'
- en: Figure 2.4 – Xcode project template selection
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4 – Xcode 项目模板选择
- en: 'We will now choose the options for our project. Here, there are only two crucial
    things to select/set. Make sure **Interface** is set to **SwiftUI**; this will
    be the UI our system will use. Set **Language** to **Swift**; this is the programming
    language used for our application:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将选择我们的项目选项。在这里，只有两个关键的事情需要选择/设置。确保**界面**设置为**SwiftUI**；这将是我们系统使用的 UI。将**语言**设置为**Swift**；这是我们应用程序使用的编程语言：
- en: '![Figure 2.5 – Xcode project options](img/B18783_02_5.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.5 – Xcode 项目选项](img/B18783_02_5.jpg)'
- en: Figure 2.5 – Xcode project options
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5 – Xcode 项目选项
- en: 'Once you press **Next**, you can choose where to create your project, as seen
    in the following screenshot:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你按下**下一步**，你可以选择在哪里创建你的项目，如下截图所示：
- en: '![Figure 2.6 – Xcode project save directory](img/B18783_02_6.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.6 – Xcode 项目保存目录](img/B18783_02_6.jpg)'
- en: Figure 2.6 – Xcode project save directory
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.6 – Xcode 项目保存目录
- en: 'Once you have found the location you would like to create the project in, click
    on **Create** at the bottom right. Xcode shows your project in all its glory,
    as seen in the following screenshot:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你找到了你想要创建项目的位置，点击右下角的**创建**。Xcode 会以如下截图所示的方式展示你的项目：
- en: '![Figure 2.7 – New Xcode project overview](img/B18783_02_7.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.7 – 新 Xcode 项目概览](img/B18783_02_7.jpg)'
- en: Figure 2.7 – New Xcode project overview
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7 – 新 Xcode 项目概览
- en: In the next section, we will implement the front page of our application using
    SwiftUI and further look at the Xcode IDE as we do so.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将使用 SwiftUI 实现我们的应用程序的封面页，并在实现过程中进一步了解 Xcode IDE。
- en: Front page
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 封面页
- en: 'In this section, we will implement the front page’s UI. As a reminder, here
    is what it will look like:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将实现封面页的 UI。作为一个提醒，以下是它的样子：
- en: "![Figure 2.8 – Front page wireframe p\uFEFFreview](img/B18783_02_8.jpg)"
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.8 – 封面页线框预览](img/B18783_02_8.jpg)'
- en: Figure 2.8 – Front page wireframe preview
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.8 – 封面页线框预览
- en: There are three main elements on the front page. As a little task, see whether
    you can figure out what they are. Don’t worry if you don’t know the exact UI component
    names; we will look at these components in the following sections.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 封面页上有三个主要元素。作为一个小任务，看看你是否能找出它们是什么。如果你不知道确切的 UI 组件名称，不用担心；我们将在接下来的章节中查看这些组件。
- en: Text
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文本
- en: 'A Text component is one of the simplest components offered by SwiftUI. It allows
    you to display a string of characters/numbers, which is very useful for headings
    and providing information. We will use it to provide context to the next component,
    which is `TextField`. Without the Text component, the user doesn’t know the purpose
    of the `TextField`. The following figure shows the label on the front page, telling
    the user what the following text input field is used for:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 文本组件是SwiftUI提供的最简单的组件之一。它允许你显示一串字符/数字，这对于标题和信息提供非常有用。我们将使用它为下一个组件`TextField`提供上下文。如果没有文本组件，用户不知道`TextField`的用途。以下图显示了首页上的标签，告诉用户以下文本输入字段用于什么：
- en: "![Figure 2.9 – Front \uFEFFpage label](img/Figure_2.09_B18783.jpg)"
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图2.9 – 首页标签](img/Figure_2.09_B18783.jpg)'
- en: Figure 2.9 – Front page label
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.9 – 首页标签
- en: TextField
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文本字段
- en: 'TextFields allow the user to input text that can consist of numbers and any
    character. Our TextField will be used to input a number, hence it will only accept
    numbers. This is a feature we will configure. Some applications put background
    text in the text field providing context to the purpose of the `TextField`; however,
    we have opted for a label component to provide context and do not require this.
    The following figure shows the `TextField` that the user can use to input their
    salary:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 文本字段允许用户输入可以由数字和任何字符组成的文本。我们的文本字段将用于输入一个数字，因此它只会接受数字。这是一个我们将配置的功能。一些应用程序在文本字段中放置背景文本，为`TextField`的用途提供上下文；然而，我们选择使用标签组件来提供上下文，因此不需要这个。以下图显示了用户可以使用它来输入他们的薪水的`TextField`：
- en: "![Figure 2.10 – Front pag\uFEFFe TextField](img/Figure_2.10_B18783.jpg)"
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图2.10 – 首页TextField](img/Figure_2.10_B18783.jpg)'
- en: Figure 2.10 – Front page TextField
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.10 – 首页TextField
- en: Button
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 按钮
- en: 'Buttons are used when you want the user to explicitly trigger some functionality.
    In our case, we want the user to press the button when they are ready to calculate
    their tax calculation. Naturally, we as developers must error-check this to check
    whether the button can be pressed when the `TextField` is empty or if the wrong
    type of data has been inputted in the `TextField`. We will handle that with an
    error message instead of displaying the tax calculation. If you take a look at
    the following screenshot, you will see what this button looks like:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想让用户明确触发某些功能时，会使用按钮。在我们的案例中，我们希望用户在准备好计算他们的税计算时按下按钮。自然地，作为开发者，我们必须进行错误检查，以检查按钮是否可以在`TextField`为空或输入了错误类型的数据时被按下。我们将通过错误消息来处理这个问题，而不是显示税计算。如果你查看以下截图，你会看到这个按钮的样子：
- en: '![Figure 2.11 – Front page button](img/Figure_2.11_B18783.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图2.11 – 首页按钮](img/Figure_2.11_B18783.jpg)'
- en: Figure 2.11 – Front page button
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.11 – 首页按钮
- en: In the next section, we will add the elements we discussed previously using
    SwiftUI into our application.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将把之前讨论的元素使用SwiftUI添加到我们的应用程序中。
- en: Adding Front Page Components
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加首页组件
- en: 'In this section, we will add the components we listed previously to create
    our front page. Look for the `ContentView` file, which can be found in the **Project
    navigator**, usually on the left, as shown in the following screenshot:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将把之前列出的组件添加到我们的首页中。寻找`ContentView`文件，它通常可以在**项目导航器**中找到，通常在左侧，如下面的截图所示：
- en: '![Figure 2.12 – Project navigator](img/B18783_02_12.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图2.12 – 项目导航器](img/B18783_02_12.jpg)'
- en: Figure 2.12 – Project navigator
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.12 – 项目导航器
- en: 'See the following code and add it to the `ContentView` file:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下代码并将其添加到`ContentView`文件中：
- en: '[PRE0]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Using the preceding code, we are able to render a `Text`, `TextField`, and
    `Button`. This will form the basis of allowing the user to enter their salary
    and click the button to calculate the tax breakdown. We use a variable called
    `salary` to store TextField’s data. Let’s take a look at the end result:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面的代码，我们能够渲染一个`Text`、`TextField`和`Button`。这将形成允许用户输入他们的薪水并点击按钮来计算税项分解的基础。我们使用一个名为`salary`的变量来存储`TextField`的数据。让我们看看最终的结果：
- en: '![Figure 2.13 – Elements without styling preview](img/B18783_02_13.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图2.13 – 未添加样式的元素预览](img/B18783_02_13.jpg)'
- en: Figure 2.13 – Elements without styling preview
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.13 – 未添加样式的元素预览
- en: 'As you can see, the `Text` component looks pretty good, but the `TextField`
    has no obvious boundaries. I put a placeholder inside it as without it, the user
    wouldn’t even know where the `TextField` is. Next, the `Button` has the wrong
    styling. Let’s fix both of these with the following updated code:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`Text`组件看起来相当不错，但`TextField`没有明显的边界。我在里面放了一个占位符，因为没有它，用户甚至不知道`TextField`在哪里。接下来，`Button`的样式不正确。让我们通过以下更新的代码修复这两个问题：
- en: '[PRE1]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Using the preceding code, we added a black border with a width of `1` to the
    `TextField` and removed the placeholder text. Next, we added a button style to
    the `Text` component of the button. We used the `borderedProminent` style, which
    is exactly what we need. All these changes result in the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面的代码，我们在`TextField`上添加了一个宽度为`1`的黑色边框，并移除了占位符文本。接下来，我们为按钮的`Text`组件添加了按钮样式。我们使用了`borderedProminent`样式，这正是我们需要的。所有这些更改导致以下结果：
- en: '![Figure 2.14 – Updated code preview](img/B18783_02_14.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图2.14 – 更新后的代码预览](img/B18783_02_14.jpg)'
- en: Figure 2.14 – Updated code preview
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.14 – 更新后的代码预览
- en: 'The preview shows we are very close. For the type of data we are inserting
    into `TextField`, it doesn’t need to be this wide. Let’s make it smaller. Modify
    `TextField` as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 预览显示我们非常接近了。对于我们插入到`TextField`中的数据类型，它不需要这么宽。让我们将其缩小。按照以下方式修改`TextField`：
- en: '[PRE2]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We have added a width of `200` to make the `TextField` look better suited for
    what we need. Thus far, we have changed the properties of our app’s components
    programmatically. However, you can use the Xcode UI to tweak the properties as
    well. Doing this is simple: select a component in the code by hovering the mouse
    cursor over it and clicking the code as if you are going to edit it. Now, on the
    right, a pane including the **Attributes Inspector** will appear.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为`TextField`添加了宽度`200`，使其更适合我们的需求。到目前为止，我们已经以编程方式更改了应用组件的属性。然而，您也可以使用Xcode
    UI调整属性。这样做很简单：通过将鼠标光标悬停在代码中的组件上并单击代码（就像您要编辑它一样）来在代码中选择一个组件。现在，在右侧，将出现一个包括**属性检查器**的面板。
- en: '![Figure 2.15 – Attributes Inspector](img/B18783_02_15.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图2.15 – 属性检查器](img/B18783_02_15.jpg)'
- en: Figure 2.15 – Attributes Inspector
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.15 – 属性检查器
- en: If the **Attributes Inspector** pane doesn’t appear, go to **View** | **Inspectors**
    | **Attributes**.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果**属性检查器**面板没有出现，请转到**视图** | **检查器** | **属性**。
- en: '![Figure 2.16 – Opening Attributes Inspector manually](img/B18783_02_16.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图2.16 – 手动打开属性检查器](img/B18783_02_16.jpg)'
- en: Figure 2.16 – Opening Attributes Inspector manually
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.16 – 手动打开属性检查器
- en: 'We are almost done; we only have three UI components. The interface is currently
    quite compact. Let’s spread out the components to make it look nicer. Add the
    following code to space out the components:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎完成了；我们只剩下三个UI组件。界面目前相当紧凑。让我们将组件展开，使其看起来更美观。添加以下代码以分散组件：
- en: '[PRE3]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding code, we added padding at the bottom of the `Text` and `TextField`
    components to evenly spread all three items out. Feel free to experiment with
    the padding values to get the UI to feel like what you are looking for.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们在`Text`和`TextField`组件的底部添加了填充，以便均匀分布所有三个项目。请随意尝试填充值，以使UI看起来符合您的需求。
- en: Important note
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you have four components and want to add padding to the top three, the formula
    would be `n - 1` in terms of the number of components that need padding to be
    evenly spread out. `n` is the total number of components.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有四个组件，并且想要为前三个添加填充，那么在均匀分布需要填充的组件数量方面，公式将是`n - 1`。`n`是组件的总数。
- en: 'Our front page now looks like the following:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的前页现在看起来如下：
- en: '![Figure 2.17 – Preview with padding](img/B18783_02_17.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图2.17 – 带填充的预览](img/B18783_02_17.jpg)'
- en: Figure 2.17 – Preview with padding
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.17 – 带填充的预览
- en: 'Right now, if we launch our app and click the `TextField`, a regular keyboard
    appears, as shown in the following screenshot:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，如果我们启动我们的应用并点击`TextField`，将出现一个常规键盘，如下面的截图所示：
- en: '![Figure 2.18 – Front page of the regular keyboard preview](img/B18783_02_18.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图2.18 – 常规键盘预览的首页](img/B18783_02_18.jpg)'
- en: Figure 2.18 – Front page of the regular keyboard preview
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.18 – 常规键盘预览的首页
- en: 'This is fine for a field that requires text input for names or addresses, but
    this field only requires a salary and therefore only needs numerical input. Let’s
    update our code to set the keyboard type to `decimalPad`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 对于需要输入姓名或地址的文本字段来说，这没问题，但这个字段只需要输入薪资，因此只需要数字输入。让我们更新我们的代码，将键盘类型设置为`decimalPad`：
- en: '[PRE4]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Important note
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: There is a `numberPad` option but it doesn’t allow the input of decimal numbers,
    so we will go ahead and use the `decimalPad` type.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个 `numberPad` 选项，但它不允许输入小数，所以我们将继续使用 `decimalPad` 类型。
- en: 'If you run the app now, it will show the following:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在运行这个应用，它会显示以下内容：
- en: '![Figure 2.19 – Front page decimal pad preview](img/B18783_02_19.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图2.19 – 前页面小数键盘预览](img/B18783_02_19.jpg)'
- en: Figure 2.19 – Front page decimal pad preview
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.19 – 前页面小数键盘预览
- en: 'The keyboard type can also be changed in the **Attributes Inspector**. This
    is a great place to quickly see all the available keyboard types:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 键盘类型也可以在 **属性检查器** 中更改。这是一个快速查看所有可用键盘类型的好地方：
- en: '![Figure 2.20 – Keyboard Type](img/B18783_02_20.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图2.20 – 键盘类型](img/B18783_02_20.jpg)'
- en: Figure 2.20 – Keyboard Type
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.20 – 键盘类型
- en: Important note
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: For more information on keyboard types, check out [https://developer.apple.com/documentation/swiftui/view/keyboardtype(_:)](https://developer.apple.com/documentation/swiftui/view/keyboardtype(_:)).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 想了解更多关于键盘类型的信息，请查看[https://developer.apple.com/documentation/swiftui/view/keyboardtype(_)](https://developer.apple.com/documentation/swiftui/view/keyboardtype(_))。
- en: "If the keyboard doesn’t show in the simulator, this is due to the fact your\
    \ Mac already has a keyboard and the simulator decides you don’t need it displayed.\
    \ But this can be overridden. Either use the\L ** *+ K* keyboard shortcut to\
    \ open and ***+* ** *+ K* to close it, or go to **I/O** | **Keyboard** | **Toggle**\
    \ **Software Keyboard**:"
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果键盘在模拟器中没有显示，这是因为你的Mac已经有一个键盘，模拟器决定你不需要显示它。但这是可以覆盖的。你可以使用 ** + *K* 键盘快捷键来打开，或者
    ***+* ** + *K* 来关闭它，或者前往 **I/O** | **键盘** | **切换** **软件键盘**：
- en: '![Figure 2.21 – Toggle Software Keyboard](img/B18783_02_21.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图2.21 – 切换软件键盘](img/B18783_02_21.jpg)'
- en: Figure 2.21 – Toggle Software Keyboard
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.21 – 切换软件键盘
- en: Now the software keyboard in the simulator will appear. This should only need
    to be done once. We have now completed the design for the front page. Currently,
    there is no functionality, but this will be implemented in the following chapter.
    But we are not done with the design. We will now implement the design for the
    results page.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在模拟器中的软件键盘将出现。这应该只需要做一次。我们已经完成了主页面的设计。目前，这里没有功能，但将在下一章中实现。但我们还没有完成设计。我们现在将实现结果页面的设计。
- en: Implementing the results page
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现结果页面
- en: 'In this section, we will implement the results page’s UI. As a reminder, here
    is what it will look like:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将实现结果页面的UI。作为提醒，这里是这样看的：
- en: '![Figure 2.22 – Results page wireframe preview](img/B18783_02_22.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图2.22 – 结果页面线框预览](img/B18783_02_22.jpg)'
- en: Figure 2.22 – Results page wireframe preview
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.22 – 结果页面线框预览
- en: There are three main sections on the results page. Each section is composed
    of two or more components. As a little task, see whether you can figure out what
    they are. Don’t worry if you don’t know the exact UI component names as we will
    take a look at them in the following sections.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 结果页面有三个主要部分。每个部分由两个或更多组件组成。作为一个小任务，看看你是否能弄清楚它们是什么。如果你不知道确切的UI组件名称，不要担心，我们将在下一节中查看它们。
- en: Graph Summary Section
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 图表摘要部分
- en: 'The graph summary section comprises two main components, a Text component and
    a pie chart. SwiftUI doesn’t provide a pie chart, so we will use an external library.
    We will use the `ChartView` library created by *Andras Samu*, which can be found
    here: [https://github.com/AppPear/ChartView](https://github.com/AppPear/ChartView).'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图表摘要部分由两个主要组件组成，一个文本组件和一个饼图。SwiftUI不提供饼图，所以我们将使用外部库。我们将使用由 *Andras Samu* 创建的
    `ChartView` 库，可以在以下位置找到：[https://github.com/AppPear/ChartView](https://github.com/AppPear/ChartView)。
- en: This section will visually showcase a simple breakdown of the tax calculation.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将直观展示税收计算的简单分解。
- en: "![Figure \uFEFF2.23 – Graph summary wireframe](img/B18783_02_23.jpg)"
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图2.23 – 图表摘要线框](img/B18783_02_23.jpg)'
- en: Figure 2.23 – Graph summary wireframe
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.23 – 图表摘要线框
- en: Text Summary Section
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文本摘要部分
- en: 'In the text summary section, there are four text components. The first component
    informs the user that the following `Text` component is used to display the **Before
    Tax** salary title. The second component tells the user that the following text
    component is used to display the **After Tax** salary title. This does not include
    a breakdown of how the tax is split. This will come in the next section:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本摘要部分，有四个文本组件。第一个组件通知用户以下 `Text` 组件用于显示 **税前** 薪资标题。第二个组件告诉用户以下文本组件用于显示 **税后**
    薪资标题。这并不包括税收如何分割的分解。这将在下一节中介绍：
- en: "![Figure\uFEFF 2.24 – Text summary wireframe](img/B18783_02_24.jpg)"
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.24 – 文本摘要线框](img/B18783_02_24.jpg)'
- en: Figure 2.24 – Text summary wireframe
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.24 – 文本摘要线框
- en: Individual breakdown section
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单个分解部分
- en: 'The individual breakdown section displays how the tax and salary are broken
    down. There are six components, three `Text` components and three `ProgressView`
    components. Each is paired together to make three subsections, **Base Salary**,
    **Tax**, and **National Insurance**. This design is simple but extendible. Once
    it is created, I give you the task of adding further breakdowns of the tax, such
    as student loans and pension:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 单个分解部分显示税和工资的分解情况。有六个组成部分，三个 `Text` 组成部分和三个 `ProgressView` 组成部分。每个部分配对在一起形成三个子部分，**基本工资**、**税**和**国家保险**。这种设计简单但可扩展。一旦创建，我给你一个任务，添加税的进一步分解，例如学生贷款和养老金：
- en: '![Figure 2.25 – Individual breakdown wireframe](img/B18783_02_25.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.25 – 单个分解线框](img/B18783_02_25.jpg)'
- en: Figure 2.25 – Individual breakdown wireframe
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.25 – 单个分解线框
- en: In the next section, we will add the elements that make up the results page
    before wrapping up this chapter.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将添加构成结果页面的元素，然后结束本章。
- en: Adding results page components
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加结果页面组件
- en: 'In this section, we will add the previously discussed components to our results
    page. However, firstly we must integrate the `ChartView` framework by *Andras
    Samu*. Follow these steps:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将添加之前讨论的组件到我们的结果页面。然而，首先我们必须通过 *Andras Samu* 集成 `ChartView` 框架。按照以下步骤操作：
- en: 'Go to **File |** **Add Packages…**:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 **文件 |** **添加包…**：
- en: '![Figure 2.26 – Xcode Add Packages… option](img/B18783_02_26.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.26 – Xcode 添加包…选项](img/B18783_02_26.jpg)'
- en: Figure 2.26 – Xcode Add Packages… option
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.26 – Xcode 添加包…选项
- en: 'Search for the `ChartView` framework using the following URL: [https://github.com/AppPear/ChartView](https://github.com/AppPear/ChartView).'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下网址搜索 `ChartView` 框架：[https://github.com/AppPear/ChartView](https://github.com/AppPear/ChartView)。
- en: 'Select `2.0.0-beta.2`, or whatever the latest version is for you. Then, click
    **Add Package** at the bottom right. It is grayed out in mine as I have already
    added it:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 `2.0.0-beta.2`，或您最新的版本。然后，点击右下角的 **添加包**。在我的例子中，它被灰色显示，因为我已经添加了它：
- en: '![Figure 2.27 – Search for the ChartView package](img/B18783_02_27.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.27 – 搜索 ChartView 包](img/B18783_02_27.jpg)'
- en: Figure 2.27 – Search for the ChartView package
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.27 – 搜索 ChartView 包
- en: Clicking on **Add Package** will add the package to the project successfully.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **添加包** 将成功将包添加到项目中。
- en: 'We will now create a new SwiftUI View for the results page. Right-click the
    calculator folder inside of your **Project Navigator** pane and select **New File…**:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将为结果页面创建一个新的 SwiftUI 视图。在您的 **项目导航器** 面板内右键点击计算器文件夹，并选择 **新建文件…**：
- en: '![Figure 2.28 – New File…](img/B18783_02_28.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.28 – 新文件…](img/B18783_02_28.jpg)'
- en: Figure 2.28 – New File…
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.28 – 新文件…
- en: 'Next, we will select the type of file we want to add, which for us is a SwiftUI
    View (selecting this provides a SwiftUI template, which saves us time and effort
    retyping the SwiftUI file structure every time), under the **User** **Interface**
    section:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将选择我们想要添加的文件类型，对我们来说是一个 SwiftUI 视图（选择此选项提供了一个 SwiftUI 模板，这节省了我们每次重新输入
    SwiftUI 文件结构的时间和精力），在 **用户界面** 部分：
- en: '![Figure 2.29 – SwiftUI View selection](img/B18783_02_29.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.29 – SwiftUI 视图选择](img/B18783_02_29.jpg)'
- en: Figure 2.29 – SwiftUI View selection
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.29 – SwiftUI 视图选择
- en: 'Finally, we must rename our `ResultsView` and press **Create**:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们必须重命名我们的 `ResultsView` 并点击 **创建**：
- en: '![Figure 2.30 – View naming](img/B18783_02_30.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.30 – 视图命名](img/B18783_02_30.jpg)'
- en: Figure 2.30 – View naming
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.30 – 视图命名
- en: 'Open the `ResultsView` file and import the `SwiftUICharts` framework by adding
    the following code to the top of the file:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `ResultsView` 文件，通过在文件顶部添加以下代码来导入 `SwiftUICharts` 框架：
- en: '[PRE5]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, we need to create the chart itself. Doing so is very simple, thanks to
    the `ChartView` library. First, add the data the chart will be using. For now,
    we will add some dummy hardcoded data for testing:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建图表本身。这样做非常简单，多亏了 `ChartView` 库。首先，添加图表将使用的数据。目前，我们将添加一些硬编码的测试数据：
- en: '[PRE6]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The values in the array will represent the base salary, tax, and national insurance.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 数组中的值将代表基本工资、税和国家保险。
- en: 'Next, we will implement our pie chart using `ChartView`:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用 `ChartView` 实现我们的饼图：
- en: '[PRE7]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The preceding code will result in the following:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将产生以下结果：
- en: '![Figure 2.31 – Pie chart added](img/B18783_02_31.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.31 – 添加饼图](img/B18783_02_31.jpg)'
- en: Figure 2.31 – Pie chart added
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.31 – 添加饼图
- en: 'To view the `ResultsView`, you will need to use the **Live Preview Window**.
    By default, it should appear. If it doesn’t, use the following keyboard shortcut:
    *+ + Return*. Now, Xcode will look like the following screenshot:![](img/03.jpg)![](img/01.jpg)'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看`ResultsView`，您需要使用**实时预览窗口**。默认情况下，它应该出现。如果它没有出现，请使用以下键盘快捷键：*+ + Return*。现在，Xcode将看起来像以下截图：![](img/03.jpg)![](img/01.jpg)
- en: '![Figure 2.32 – Live preview window location](img/B18783_02_32.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![图2.32 – 实时预览窗口位置](img/B18783_02_32.jpg)'
- en: Figure 2.32 – Live preview window location
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.32 – 实时预览窗口位置
- en: 'Right now, the pie chart goes up to the edges. Let’s put the pie chart inside
    a VStack with padding. Edit the code as follows:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目前，饼图延伸到边缘。让我们将饼图放入一个带有填充的`VStack`中。按照以下方式编辑代码：
- en: '[PRE8]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The changes in the preceding code will now make the chart look like the following:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码中的更改现在将使图表看起来像以下这样：
- en: '![Figure 2.33 – Pie chart with padding](img/B18783_02_33.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![图2.33 – 带填充的饼图](img/B18783_02_33.jpg)'
- en: Figure 2.33 – Pie chart with padding
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.33 – 带填充的饼图
- en: 'Let’s add a `Text` component that says `36`. Add the following code to the
    body:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们添加一个显示“36”的`Text`组件。将以下代码添加到主体中：
- en: '[PRE9]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The following output shows the new summary text above the pie chart that we
    added previously.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出显示了我们在饼图上方添加的新摘要文本。
- en: '![Figure 2.34 – Summary header](img/B18783_02_34.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![图2.34 – 摘要标题](img/B18783_02_34.jpg)'
- en: Figure 2.34 – Summary header
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.34 – 摘要标题
- en: 'Below the pie chart, we will add four more text components, for **Before Tax**
    and **After Tax**: one for the heading of each subsection and one for the actual
    figure. For now, we will hardcode the values. Update the code as follows:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在饼图下方，我们将添加四个更多的文本组件，用于**税前**和**税后**：每个子部分的标题和一个实际的数字。目前，我们将使用硬编码的值。按照以下方式更新代码：
- en: '[PRE10]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The preceding code will display the following:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将显示以下内容：
- en: '![Figure 2.35 – Before Tax and After Tax text](img/B18783_02_35.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![图2.35 – 税前和税后文本](img/B18783_02_35.jpg)'
- en: Figure 2.35 – Before Tax and After Tax text
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.35 – 税前和税后文本
- en: 'Right now, the text components on the bottom of the page are crammed together.
    Let’s add padding to the top and bottom of each text component to spread them
    out. You can obviously use the **Attributes Inspector** to do this, but we will
    do it programmatically:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目前，页面底部的文本组件挤在一起。让我们在每个文本组件的顶部和底部添加填充以分散它们。显然，您可以使用**属性检查器**来完成此操作，但我们将以编程方式完成：
- en: '[PRE11]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After adding the padding in the preceding code, we will have a results page
    that looks like this:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中添加填充后，我们将有一个看起来像这样的结果页面：
- en: '![Figure 2.36 – Results after padding](img/B18783_02_36.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![图2.36 – 填充后的结果](img/B18783_02_36.jpg)'
- en: Figure 2.36 – Results after padding
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.36 – 填充后的结果
- en: 'Next, we need to add the progress bars, which will represent the salary, tax,
    and national insurance. We will use the `ProgressView` component combined with
    a `Text` component to display the tax breakdown. After the previously added `Text`
    components, add the following code:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要添加进度条，这些进度条将代表工资、税收和国民保险。我们将使用`ProgressView`组件与一个`Text`组件结合来显示税收分解。在之前添加的`Text`组件之后，添加以下代码：
- en: '[PRE12]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The preceding code adds the two `ProgressView` and `Text` component pairs,
    which shows the post-tax salary and tax. This will result in the following:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码添加了两个`ProgressView`和`Text`组件对，显示了税后工资和税收。这将导致以下结果：
- en: '![Figure 2.37 – Breakdown components added](img/B18783_02_37.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![图2.37 – 添加的分解组件](img/B18783_02_37.jpg)'
- en: Figure 2.37 – Breakdown components added
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.37 – 添加的分解组件
- en: 'You have probably noticed that we only added two of the three `ProgressView`
    components. The reason for this is to showcase an error that occurs. So, now add
    the following code after the previously added code:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可能已经注意到我们只添加了三个`ProgressView`组件中的两个。这样做的原因是为了展示一个错误。所以，现在在之前添加的代码之后添加以下代码：
- en: '[PRE13]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This will result in the following error: `Group` component, which will make
    the view detect it as one.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致以下错误：`Group`组件，这将使视图将其检测为一个整体。
- en: 'We will group the three `ProgressView` and `Text` components as follows:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将按照以下方式将三个`ProgressView`和`Text`组件分组：
- en: '[PRE14]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This will solve the annoying 10-limit error and result in the following:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这将解决令人烦恼的10限制错误，并导致以下结果：
- en: '![Figure 2.38 – Components grouped](img/B18783_02_38.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![图2.38 – 分组的组件](img/B18783_02_38.jpg)'
- en: Figure 2.38 – Components grouped
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.38 – 分组的组件
- en: 'Here is a look at the whole code now that we are finished with this section:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们完成这个部分后，来看看整个代码：
- en: '[PRE15]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We have covered a lot in this vast section. We started off by adding an external
    framework, which we saw is very easy to integrate and extremely powerful. The
    framework allowed us to easily implement a pie chart. This is very useful as not
    all basic features are provided by Apple in Swift and SwiftUI, so being able to
    add external code bases makes the development process less painful. After that,
    we implemented the pie chart, text summaries, and progress views to further illustrate
    the tax breakdown.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个庞大的章节中，我们涵盖了大量的内容。我们首先添加了一个外部框架，我们发现它非常容易集成且功能强大。这个框架使我们能够轻松实现饼图。这非常有用，因为苹果在
    Swift 和 SwiftUI 中并没有提供所有基本功能，因此能够添加外部代码库使得开发过程更加轻松。之后，我们实现了饼图、文本摘要和进度视图，以进一步说明税收分解。
- en: Summary
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered the design of our tax calculator application. We
    looked at wireframes and broke down each element into SwiftUI components. We then
    implemented the SwiftUI components to match the design from the wireframes. We
    also took a look at the requirements for building this application, and the design
    specifications, which looked at the features a tax calculator app can have. Then,
    we simplified it to the core features our app will provide. We further advanced
    in the design specifications with acceptance criteria for what we would like our
    app to do. We also looked at how external libraries can be integrated to provide
    additional functionality.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了我们的税收计算器应用程序的设计。我们研究了线框图，并将每个元素分解为 SwiftUI 组件。然后，我们将 SwiftUI 组件实现以匹配线框图中的设计。我们还审视了构建此应用程序的要求以及设计规范，这些规范探讨了税收计算器应用程序可能具有的功能。然后，我们将这些功能简化为我们应用程序将提供的核心功能。我们在设计规范中进一步推进，以确定我们希望应用程序执行的操作的验收标准。我们还探讨了如何集成外部库以提供额外的功能。
- en: In the next chapter, we’ll take a look at implementing the tax calculation backend
    functionality and tying the two views together.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨实现税收计算后端功能并将两个视图结合起来的方法。
