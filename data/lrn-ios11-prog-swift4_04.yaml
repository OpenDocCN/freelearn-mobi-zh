- en: Digging Deeper
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入挖掘
- en: When I first started programming, I was in my mid-twenties. I started a lot
    older than most, but I will say that grasping the basics took me a bit longer
    than most. I remember when I bought my first programming book and I read and reread
    chapters over and over again until the concepts made sense to me. I found that
    a lot of books talked to me like I had majored in computer science. As you progress
    through this book, take your time-and, if you need to go back, it is okay to do
    so. No one is going to care that it took you an extra day to understand a concept.
    It is more important that you fully understand that concept.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当我刚开始编程时，我二十多岁。我比大多数人开始得都要晚，但我要说的是，掌握基础知识比我大多数人都要花更长的时间。我记得当我买了我的第一本编程书，我一遍又一遍地阅读和重读章节，直到概念对我有意义。我发现很多书都像我对计算机科学有专业背景一样和我说话。随着你在这本书中的进步，请慢慢来——如果你需要回顾，那也是可以的。没有人会介意你多花了一天来理解一个概念。更重要的是，你完全理解了这个概念。
- en: One tip I would give you is not to copy and paste code. No matter where you
    find the code and no matter how long it takes, it benefits you to type it out.
    Doing this really helped me as I eventually started to remember the code and it
    became second nature to me.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我要给你的一条建议是不要复制粘贴代码。无论你在哪里找到代码，无论需要多长时间，亲自敲打出来对你都有好处。这样做真的帮助了我，因为我最终开始记住代码，它变得像第二本能一样自然。
- en: 'In the last chapter, we went over the basics of Swift to get you warmed up.
    Now, we will dig deeper and learn some more programming concepts. These concepts
    will build on what you have already learned. In this chapter, we will cover:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们介绍了Swift的基础知识，让你热身。现在，我们将深入挖掘，学习一些更多的编程概念。这些概念将建立在您已经学到的知识之上。在本章中，我们将涵盖：
- en: Ranges
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 范围
- en: Control flow
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制流程
- en: Let's begin by creating a new Playground project.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个新的游乐场项目开始。
- en: Creating a Playground project
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个游乐场项目
- en: 'As you learned earlier, launch Xcode and click on **Get started with a playground**:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如您之前所学的，启动Xcode并点击**使用游乐场开始**：
- en: '![](img/beb3fd88-173f-45fe-b372-b856ced4f013.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/beb3fd88-173f-45fe-b372-b856ced4f013.png)'
- en: The Playground template screen will appear. Make sure that you select iOS and
    then choose Blank and hit Next. You will be asked to give your project a name
    and a location to save the file; name your new Playground `iOS11-Programming-for-Beginners-Ch4`.
    You can save the file anywhere you like. Now, with the project saved, we can explore
    Playgrounds a bit.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 游乐场模板屏幕将出现。请确保您选择iOS，然后选择空白并点击下一步。您将被要求为项目命名并指定保存文件的位置；将您的新游乐场命名为`iOS11-Programming-for-Beginners-Ch4`。您可以将文件保存在任何您喜欢的地方。现在，随着项目的保存，我们可以探索一下游乐场。
- en: Next, delete everything inside of your file and toggle on the Debug panel using
    the toggle button (*cmd* + *Shift* + *Y*). You should now have a blank screen
    with the Results panel on the right and the Debug panel on the bottom opened.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，删除文件中的所有内容，并使用切换按钮（*cmd* + *Shift* + *Y*）打开调试面板。你现在应该有一个带有结果面板在右侧和调试面板在底部的空白屏幕。
- en: We focused on the basics earlier and now we will build upon those skills. Ranges
    are one such data type that we should learn and are very useful and can come in
    handy for a variety of reasons. Let's take a look at what Ranges are and then
    start to understand the difference between a *closed Range*, a *half-closed Range,*
    and a *one-sided Range*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前关注了基础知识，现在我们将在此基础上建立技能。范围就是这样一种我们应该学习的数据类型，它非常有用，并且可以出于各种原因派上用场。让我们看看范围是什么，然后开始理解**闭包范围**、**半开范围**和**单侧范围**之间的区别。
- en: Ranges
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 范围
- en: 'Ranges are generic data types that represent a sequence of numbers. Let''s
    look at the following image to understand:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 范围是泛型数据类型，表示一系列数字。让我们看看以下图片来理解：
- en: '![](img/68cf5ed7-5afe-437b-b76d-50d08e0806d0.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/68cf5ed7-5afe-437b-b76d-50d08e0806d0.png)'
- en: Closed range
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 闭包范围
- en: 'Notice that, in the preceding image, we have numbers ranging from **10** to
    **20**. Rather than having to write each value, we can use Ranges to represent
    all of these numbers in shorthand form. In order to do this, let''s remove all
    of the numbers in the image except for **10** and **20**:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在前面的图片中，我们有从**10**到**20**的数字。我们不需要逐一写出每个值，我们可以使用范围来用简短的形式表示所有这些数字。为了做到这一点，让我们从图片中移除除了**10**和**20**之外的所有数字：
- en: '![](img/1bd76f58-907a-431d-9b1a-5494fe77b1fc.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1bd76f58-907a-431d-9b1a-5494fe77b1fc.png)'
- en: 'Now that we have removed those numbers, we need a way to tell Swift that we
    want to include all of the numbers that we just deleted. This is where the range
    operator (...) comes into play. Therefore, in Playgrounds, let''s create a constant
    called range and set it equal to `10...20`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经删除了那些数字，我们需要一种方法来告诉Swift我们想要包含我们刚刚删除的所有数字。这就是范围运算符(...)发挥作用的地方。因此，在Playgrounds中，让我们创建一个名为range的常量，并将其设置为`10...20`：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](img/8e0c51e4-2d6a-483b-9f88-37eb5f3ce8c0.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8e0c51e4-2d6a-483b-9f88-37eb5f3ce8c0.png)'
- en: The range that we just entered says that we want the numbers between `10` and
    `20` as well as both `10` and `20` themselves. This type of Range is known as
    a closed Range.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚输入的范围表示我们想要`10`到`20`之间的数字，以及`10`和`20`本身。这种范围被称为闭区间。
- en: 'Inside of Playground, in the result you will see a Show Result icon:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在Playground内部，在结果中你会看到一个显示结果图标：
- en: '![](img/6611882e-79f0-4f58-b708-d59e9ca41fa0.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6611882e-79f0-4f58-b708-d59e9ca41fa0.png)'
- en: 'If you hover over the result you will also see Quick Look:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你悬停在结果上，你也会看到快速查看：
- en: '![](img/a99f3956-e41f-4f84-9e81-0df3b3c5d480.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a99f3956-e41f-4f84-9e81-0df3b3c5d480.png)'
- en: 'Select the Show Result icon so that you can see the result:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 选择显示结果图标，以便你可以看到结果：
- en: '![](img/a594a9c0-209e-49af-ad06-66f9856aedc7.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a594a9c0-209e-49af-ad06-66f9856aedc7.png)'
- en: Next, we also have what is called a half-closed Range.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们还有所谓的半开区间。
- en: Half-closed range
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 半开区间
- en: 'Let''s make another constant that is known as a half-closed Range and set it
    equal to `10 < 20`. Add the following into Playgrounds:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再创建一个称为半开区间的常量，并将其设置为`10 < 20`。在Playgrounds中添加以下内容：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Your code should now look like this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码现在应该看起来像这样：
- en: '![](img/03d7f2d2-cb7a-428e-b867-a2f5c2870845.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/03d7f2d2-cb7a-428e-b867-a2f5c2870845.png)'
- en: A half-closed Range is the same as a closed Range, except that the end value
    will not be included. In this example, that means that 10 through 19 will be included
    and 20 will be excluded.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 半开区间与闭区间相同，区别在于端点值不会被包含。在这个例子中，这意味着10到19将被包含，而20将被排除。
- en: At this point, you will notice that your Results panel shows you `CountableClosedRange(10...20)`
    and `CountableRange(10..<20)`. We cannot see all the numbers within the Range.
    In order to see all the numbers, we need to use a loop.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，你会注意到你的结果面板显示了`CountableClosedRange(10...20)`和`CountableRange(10..<20)`。我们无法看到范围内的所有数字。为了看到所有数字，我们需要使用循环。
- en: Control flow
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制流
- en: In programming, control flow is the order in which your code is executed. When
    working with Swift, we can use a variety of control statements. Loops, in particular,
    are useful for when you want to repeat a task multiple times. Let's take a look
    at a few different types of loop.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程中，控制流是代码执行的顺序。当使用Swift时，我们可以使用各种控制语句。特别是循环对于当你想要多次重复任务时非常有用。让我们看看几种不同类型的循环。
- en: The for...in loop
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: for...in循环
- en: 'One of the most common control statements is a `for...in` loop. It allows you
    to iterate over each element in a sequence. Let''s see what a `for...in` loop
    looks like:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的控制语句之一是`for...in`循环。它允许你遍历序列中的每个元素。让我们看看`for...in`循环的样子：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We start the `for...in` loop with for, which is proceeded by `<value>`. This
    is actually a local constant (only the `for...in` loop can access it) and can
    be any name you like. Typically, you will want to give this value an expressive
    name. Next, we have in, which is followed by `<sequence>`. This is where we want
    to give it our sequence of numbers. Let''s write the following into Playgrounds:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`for...in`循环的`for`关键字开始，它后面跟着`<value>`。这实际上是一个局部常量（只有`for...in`循环可以访问它），可以是任何你喜欢的名字。通常，你将想要给这个值一个有表达力的名字。接下来，我们有`in`，它后面跟着`<sequence>`。这是我们想要给出我们的数字序列的地方。让我们将以下内容写入Playgrounds：
- en: '![](img/da8d9242-c296-4e2f-b0ed-d306dffc8ab2.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/da8d9242-c296-4e2f-b0ed-d306dffc8ab2.png)'
- en: Notice that, in our Debug panel, we see all of the numbers we wanted in our
    range.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在我们的调试面板中，我们看到了我们想要范围内的所有数字。
- en: 'Let''s do the same for our `halfClosedRange` variable, by adding the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对`halfClosedRange`变量做同样的事情，添加以下内容：
- en: '![](img/927410ae-369f-43f7-a372-24a3bb4b1f47.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/927410ae-369f-43f7-a372-24a3bb4b1f47.png)'
- en: In our Debug panel, we see that we get the numbers 10 through 19\. One thing
    to note is that these two `for...in` loops have different variables. In the first
    loop, we used value, and in the second one, we used index. You can make these
    whatever you choose them to be.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的调试面板中，我们看到我们得到了10到19的数字。需要注意的是，这两个`for...in`循环有不同的变量。在第一个循环中，我们使用了value，在第二个循环中，我们使用了index。你可以将它们设置为任何你选择的名称。
- en: 'In addition, in the two preceding examples, we used constants, but we could
    actually just use the Ranges within the loop. Add the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在前两个示例中，我们使用了常量，但实际上我们可以在循环中使用范围。添加以下内容：
- en: '![](img/03c9b4e1-542e-44d9-90d6-f3c2292c7eec.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/03c9b4e1-542e-44d9-90d6-f3c2292c7eec.png)'
- en: Now, you see 0 to 3 print inside of the Debug panel.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以在调试面板中看到从 0 到 3 的打印输出。
- en: 'What if you wanted the numbers to go in reverse order? Let''s input the following
    `for...in` loop:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想让数字以相反的顺序排列呢？让我们输入以下 `for...in` 循环：
- en: '![](img/f943f934-cd94-4c3d-82fb-44568be56c2a.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f943f934-cd94-4c3d-82fb-44568be56c2a.png)'
- en: We now have the numbers in descending order in our Debug panel. When we add
    Ranges into a `for...in` loop, we have to wrap our range inside parentheses so
    that Swift recognizes that our period before `reversed()` is not a decimal. Now
    that we are familiar with loops, there is one more range we need to look at.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们在调试面板中有了降序排列的数字。当我们把范围添加到 `for...in` 循环中时，我们必须将我们的范围放在括号内，这样 Swift 才能识别出我们
    `reversed()` 前的点不是小数点。现在我们已经熟悉了循环，还有一个范围我们需要看看。
- en: One-sided range
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单侧范围
- en: 'A one-sided Range operator allows you to use ranges that continue as far as
    possible in one direction. If you wanted to have the range just continue then
    this is what you would use. Let''s look at a one sided range:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 单侧范围操作符允许你使用尽可能远的一侧范围。如果你想使范围仅继续，这就是你会使用的。让我们看看单侧范围：
- en: '![](img/0a3e787c-b69a-423a-bea0-153b9a0a2a4d.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0a3e787c-b69a-423a-bea0-153b9a0a2a4d.png)'
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](img/38582f87-6dcc-4736-85e0-8608c8a75d91.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/38582f87-6dcc-4736-85e0-8608c8a75d91.png)'
- en: Another useful loop is the `while` loop. Let's take a look at how the `while`
    loop is used.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的循环是 `while` 循环。让我们看看 `while` 循环是如何使用的。
- en: The while loop
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`while` 循环'
- en: 'A `while` loop executes a bool expression at the start of the loop and the
    set of statements run until a condition becomes false. It is important to note
    that `while` loops can be executed zero or more times. Here is the basic syntax
    of a while loop:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`while` 循环在循环开始时执行布尔表达式，并运行一组语句，直到条件变为假。重要的是要注意 `while` 循环可以执行零次或多次。以下是 `while`
    循环的基本语法：'
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s write a `while` loop in Playgrounds and see how it works. Add the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 Playgrounds 中编写一个 `while` 循环并看看它是如何工作的。添加以下内容：
- en: '![](img/94f70a96-18a6-46aa-bca0-ae5354b91f99.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/94f70a96-18a6-46aa-bca0-ae5354b91f99.png)'
- en: 'So, this `while` loop starts with a variable that begins at zero. Before the
    `while` loop executes, it checks to see if `y` is less than `50`-and, if so, it
    continues into the loop. Using the `+=` operator, which we covered earlier, we
    increment `y` by five each time. Our `while` loop will continue to do this until
    `y` is no longer less than `50`. Now, let''s add the same `while` loop after the
    one we created and see what happens:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这个 `while` 循环从一个开始为零的变量开始。在 `while` 循环执行之前，它检查 `y` 是否小于 `50`，如果是，它将继续进入循环。使用我们之前提到的
    `+=` 操作符，每次将 `y` 增加 `5`。我们的 `while` 循环将继续这样做，直到 `y` 不再小于 `50`。现在，让我们在创建的循环之后添加相同的
    `while` 循环，看看会发生什么：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](img/f6ee09f3-7a86-4f59-b789-d3ddc32bc874.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f6ee09f3-7a86-4f59-b789-d3ddc32bc874.png)'
- en: You will notice that the second `while` loop never runs. This may not seem like
    it is important until we look at our next type of loop.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到第二个 `while` 循环从未运行。这看起来可能并不重要，直到我们看看我们接下来要讨论的循环类型。
- en: The repeat...while loop
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`repeat...while` 循环'
- en: 'The `repeat...while` loop is pretty similar to a `while` loop, in that it continues
    to execute the set of statements until a condition becomes false. The main difference
    is that the `repeat...while` loop does not evaluate its bool condition until the
    end of the loop. Here is the basic syntax of a `repeat...while` loop:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`repeat...while` 循环与 `while` 循环非常相似，因为它会继续执行一组语句，直到条件变为假。主要区别在于 `repeat...while`
    循环不会在循环的末尾评估其布尔条件。以下是 `repeat...while` 循环的基本语法：'
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s write a `repeat...while` loop in Playgrounds and see how it works. Add
    the following into Playgrounds:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 Playgrounds 中编写一个 `repeat...while` 循环并看看它是如何工作的。在 Playgrounds 中添加以下内容：
- en: '![](img/1e5631fc-126c-4b5c-ad76-57e75a519191.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1e5631fc-126c-4b5c-ad76-57e75a519191.png)'
- en: You will notice that our `repeat...while` loop executes first and increments
    `x` by `5`, and after (as opposed to checking the condition before, as with a
    `while` loop), it checks to see if `x` is less than `100`. This means that our
    `repeat...while` loop will continue until the condition hits `100`. Here is where
    it gets interesting.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到我们的 `repeat...while` 循环首先执行，并将 `x` 增加 `5`，然后（与在 `while` 循环中检查条件之前相反），它检查
    `x` 是否小于 `100`。这意味着我们的 `repeat...while` 循环将继续，直到条件达到 `100`。这里就变得有趣了。
- en: 'Let''s add another `repeat...while` loop after the one we just created:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在刚刚创建的循环之后添加另一个 `repeat...while` 循环：
- en: '![](img/e0be44c8-611d-49f7-9685-07b1a39b3091.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e0be44c8-611d-49f7-9685-07b1a39b3091.png)'
- en: Now, you can see that our `repeat...while` loop incremented to `105` instead
    of `100`, like the previous `repeat...while` loop. This happens because the bool
    expression does not get evaluated until after it is incremented by `5`. Knowing
    this behavior will help you pick the right loop for your situation.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以看到我们的 `repeat...while` 循环增加到了 `105` 而不是 `100`，就像之前的 `repeat...while` 循环一样。这是因为布尔表达式只有在增加
    `5` 之后才会被评估。了解这种行为将帮助你选择适合你情况的正确循环。
- en: Summary
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'So far, we have looked at three loops: the `for...in` loop, the `while` loop,
    and the `repeat-while` loop. We will use the `for...in` loop again, but first
    we need to talk about collections. In the next chapter, we will focus on what
    collections are and how to use them when working with data. Make sure you fully
    understand loops, because we will build on them in the next chapter and throughout
    the book. Therefore, review as much as you need in order to make sure you feel
    that you are proficient in the topics contained in this chapter.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经探讨了三种循环：`for...in` 循环、`while` 循环和 `repeat-while` 循环。我们还将再次使用 `for...in`
    循环，但首先我们需要谈谈集合。在下一章中，我们将专注于集合是什么以及如何在处理数据时使用它们。确保你完全理解循环，因为我们在下一章以及整本书中都会在此基础上构建。因此，你需要尽可能多地复习，以确保你对本章包含的主题感到熟练。
