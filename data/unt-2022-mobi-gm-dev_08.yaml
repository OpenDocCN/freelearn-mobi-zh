- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Integrating Social Media into Our Project
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将社交媒体整合到我们的项目中
- en: We now have all of the foundational things needed to get our game out into the
    world; it’s mechanically working and we’ve set up all of the monetization. Having
    all of the features that we have added to our project is great, but if no one
    is playing your game, there’s no reason to have them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经拥有了将我们的游戏推向世界所需的所有基础要素；它在机械上运作良好，并且我们已经设置了所有盈利方式。我们为项目添加的所有功能都很好，但如果没有人玩你的游戏，就没有理由保留它们。
- en: Word-of-mouth marketing is the most reliable way to get others to try your game.
    Providing people with opportunities to share the game helps others discover the
    project, and it’s something that we should really try to do because marketing
    and getting your game out there is one of the hardest things to do as an indie
    developer.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 口碑营销是让其他人尝试您的游戏最可靠的方式。为人们提供分享游戏的机会有助于其他人发现项目，这是我们真的应该尝试去做的事情，因为作为独立开发者，营销和推广您的游戏是最难做的事情之一。
- en: In this chapter, you will learn some of the different ways to integrate social
    media into your projects. We will start off by adding something to share – a score.
    Afterward, we will see how we can share the score on Twitter. Then, we will see
    how we can connect our game to Facebook and use content from Facebook within our
    game itself.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习一些将社交媒体整合到您项目中的不同方法。我们将从添加一些可以分享的内容开始——一个分数。之后，我们将看到如何将分数分享到Twitter。然后，我们将看到如何将我们的游戏与Facebook连接，并在游戏本身中使用Facebook的内容。
- en: 'This chapter will be split into a number of topics. It will contain a simple
    step-by-step process from beginning to end. The following is the outline of our
    tasks:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将分为多个主题。它将包含从开始到结束的简单分步过程。以下是我们任务的概述：
- en: Adding a scoring system
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加评分系统
- en: Sharing high scores via Twitter
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Twitter分享高分
- en: Downloading and installing Facebook’s SDK
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载和安装Facebook的SDK
- en: Logging in to our game via Facebook
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Facebook登录我们的游戏
- en: Displaying a Facebook name and profile picture
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示Facebook的名称和头像
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This book utilizes Unity 2022.1.0b16 and Unity Hub 3.3.1, but the steps should
    work with minimal changes in future versions of the editor. If you would like
    to download the exact version used in this book and there is a new version out,
    you can visit Unity’s download archive at [https://unity3d.com/get-unity/download/archive](https://unity3d.com/get-unity/download/archive).
    You can also find the system requirements for Unity at [https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html](https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html)
    in the **Unity Editor system requirements** section. To deploy your project, you
    will need an Android or iOS device.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用Unity 2022.1.0b16和Unity Hub 3.3.1，但步骤应该在未来版本的编辑器中只需进行最小改动即可。如果您想下载本书中使用的确切版本，并且有新版本发布，您可以访问Unity的下载存档[https://unity3d.com/get-unity/download/archive](https://unity3d.com/get-unity/download/archive)。您还可以在**Unity编辑器系统要求**部分找到Unity的系统要求[https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html](https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html)。要部署您的项目，您需要一个Android或iOS设备。
- en: Unlike previous chapters, the use of the Facebook SDK requires both iOS and
    Android build support for your Unity version installed, so make sure that both
    are added before importing the package or you will have errors.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 与前几章不同，使用Facebook SDK需要为您的Unity版本安装iOS和Android构建支持，所以在导入包之前，请确保两者都已添加，否则您将遇到错误。
- en: You can find the code files present in this chapter on GitHub at [https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter08](https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter08).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上找到本章中提供的代码文件[https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter08](https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter08)。
- en: Adding a scoring system
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加评分系统
- en: 'In order to provide an incentive for players to share our game with others,
    we need to provide a compelling reason to do so. Some people are very competitive
    and wish to be the best at playing a game, challenging others to do better than
    them. To help with that, we can allow our players to share a score value via social
    media. However, to do that, we’ll first need to have a scoring system. Thankfully,
    it’s not too difficult to do that, so let’s add that real quick using the following
    steps:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了给玩家提供与他人分享我们游戏的动力，我们需要提供一个令人信服的理由。有些人非常具有竞争性，希望成为游戏中的最佳玩家，挑战他人做得更好。为了帮助这一点，我们可以允许玩家通过社交媒体分享得分值。然而，为了做到这一点，我们首先需要一个评分系统。幸运的是，这并不太难，所以让我们快速添加以下步骤：
- en: Start off by opening the `Gameplay.scene` file located in the `Assets/Scenes`
    folder of the project. To show our players what their score is, we’ll need to
    have some way to display it on the screen. In our case, the easiest way would
    be with a text object.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，打开位于项目`Assets/Scenes`文件夹中的`Gameplay.scene`文件。为了显示玩家的得分，我们需要一种方法在屏幕上显示它。在我们的例子中，最简单的方法是使用文本对象。
- en: 'From the **Hierarchy** window, select the **On Screen Controls** object that
    is the child of the **Canvas** object. Afterward, right-click on the **On Screen
    Controls** object and select **UI** | **Text – Text Mesh Pro**, as shown in the
    following screenshot:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**层次结构**窗口中选择**On Screen Controls**对象，它是**Canvas**对象的子对象。之后，右键单击**On Screen
    Controls**对象，选择**UI** | **Text – Text Mesh Pro**，如图下所示：
- en: '![Figure 8.1– Adding a text object to the screen](img/B18868_08_01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图8.1– 在屏幕上添加文本对象](img/B18868_08_01.jpg)'
- en: Figure 8.1– Adding a text object to the screen
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1– 在屏幕上添加文本对象
- en: This will make the **Text** object a child of the **Panel** object, which in
    turn will automatically resize itself to fit within a notch if there is one in
    the devices.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使**Text**对象成为**Panel**对象的子对象，从而在设备中如果有凹槽的情况下，它会自动调整大小以适应凹槽。
- en: Rename this object `Score Text` and use the **Anchors Preset** menu at the top,
    holding down *Shift + Alt* to set the pivot and position as well.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此对象重命名为`Score Text`，并使用顶部的**锚点预设**菜单，按住*Shift + Alt*来设置中心点和位置。
- en: Afterward, let’s set the `60` to ensure that we have space to hold the score
    when we increase the size.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，让我们将`60`设置为确保我们有空间容纳增加的大小。
- en: Next, in `0` and set `45` so that it’s easy to see.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`0`处设置`45`，以便更容易看到。
- en: To improve its readability, change **Material Preset** to **LiberationSans SDF
    – Outline** and let’s change **Vertex Color** to black.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了提高其可读性，将**材质预设**更改为**LiberationSans SDF – Outline**，并将**顶点颜色**更改为黑色。
- en: Afterward, scroll down to the text material section (`1`. Notice that it seems
    to fill both the inside and outside of the text. To fix this, in the `1`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，滚动到文本材质部分（`1`）。注意它似乎填充了文本的内外部。为了修复这个问题，在`1`。
- en: "![\uFEFFFigure 8.2: Adjusting the properties of the text outline](img/B18868_08_02.jpg)"
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图8.2：调整文本轮廓的属性](img/B18868_08_02.jpg)'
- en: 'Figure 8.2: Adjusting the properties of the text outline'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2：调整文本轮廓的属性
- en: 'Next, open up the `PlayerBehaviour` script and add the following line at the
    top of the file:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开`PlayerBehaviour`脚本，并在文件顶部添加以下行：
- en: '[PRE0]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, add the following code inside the class:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在类内部添加以下代码：
- en: '[PRE1]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We first have a reference to the `scoreText` object, which we will need to set
    in the `TextMeshProUGUI` class, which contains properties relating to the text
    displayed on the object.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先有一个对`scoreText`对象的引用，我们将在`TextMeshProUGUI`类中设置它，该类包含与对象上显示的文本相关的属性。
- en: This makes use of C#’s `get`/`set` functions, which are implicit getters and
    setters. Basically, any time we get or set the `Score` variable, we will execute
    whatever is located between `{}`. In our case, any time we set the `Score` variable,
    it will update our text for us.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这利用了C#的`get`/`set`函数，它们是隐式获取器和设置器。基本上，每次我们获取或设置`Score`变量时，都会执行`{}`之间所包含的内容。在我们的例子中，每次我们设置`Score`变量时，它都会自动更新我们的文本。
- en: Tip
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: For more info on TextMeshPro, check out [https://docs.unity3d.com/Packages/com.unity.textmeshpro@3.0/manual/index.html#support--api-documentation](https://docs.unity3d.com/Packages/com.unity.textmeshpro@3.0/manual/index.html#support--api-documentation).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 想要了解更多关于TextMeshPro的信息，请查看[https://docs.unity3d.com/Packages/com.unity.textmeshpro@3.0/manual/index.html#support--api-documentation](https://docs.unity3d.com/Packages/com.unity.textmeshpro@3.0/manual/index.html#support--api-documentation)。
- en: This has an advantage over what a number of my students do, which is to update
    the value of the text every frame, which doesn’t need to happen. We only need
    to update the text when the value changes, which makes it perfect for us to use
    in this situation.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这比我的许多学生所做的方法有优势，他们是在每一帧更新文本的值，这其实是不必要的。我们只需要在值改变时更新文本，这使得它非常适合我们在这个情况下使用。
- en: Note
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on the `get`/`set` accessors, check out [https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/using-properties](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/using-properties).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`get`/`set`访问器的更多信息，请查看[https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/using-properties](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/using-properties)。
- en: 'Then, update the `PlayerBehaviour` class to have the following highlighted
    changes:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，更新`PlayerBehaviour`类，使其具有以下突出显示的更改：
- en: '[PRE2]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: What we are doing here is resetting our score whenever the player is created
    and increasing the value while the game isn’t paused.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里做的是在玩家创建时重置分数，在游戏未暂停时增加值。
- en: Save the script and dive back into Unity.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存脚本并返回Unity。
- en: 'Select the **Player** object and drag and drop our **Score Text** object into
    the **Score Text** variable on the **Player** **Behaviour** component:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Player**对象，将我们的**Score Text**对象拖放到**Player** **组件**上的**Score Text**变量：
- en: '![Figure 8.3: Assigning the Score Text property](img/B18868_08_03.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图8.3：分配分数文本属性](img/B18868_08_03.jpg)'
- en: 'Figure 8.3: Assigning the Score Text property'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3：分配分数文本属性
- en: 'Once the variable has been assigned, go ahead and play the game. The game’s
    interface is shown in the following screenshot:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦变量已被分配，继续玩游戏。游戏界面如下截图所示：
- en: '![Figure 8.4: The score added to the game](img/B18868_08_04.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图8.4：游戏中添加的分数](img/B18868_08_04.jpg)'
- en: 'Figure 8.4: The score added to the game'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.4：游戏中添加的分数
- en: Now, as you can see, we have a score for our game, which updates as we play.
    This will allow players to easily know what their competency with the game is
    and give them some information that they can share with others. Now that we have
    a scoring system, let’s take a look at how we can share a high score using Twitter.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，正如你所看到的，我们的游戏有了分数，并且在我们玩游戏时更新。这将使玩家能够轻松了解他们对游戏的掌握程度，并给他们一些可以与他人分享的信息。现在我们有了评分系统，让我们看看我们如何使用Twitter分享高分。
- en: Sharing high scores via Twitter
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过Twitter分享高分
- en: Twitter is an online news and social networking service where users post and
    interact with each other through messages that they call *tweets*, which are limited
    to 280 characters. Many indie game developers use Twitter as a way to attract
    others to play their games.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Twitter是一个在线新闻和社交网络服务，用户通过称为*tweets*的消息进行互动，这些消息限制在280个字符以内。许多独立游戏开发者使用Twitter作为吸引他人玩他们游戏的方式。
- en: 'Twitter is a great option to start off with because we can add it very easily
    to our project by simply opening a specific URL. Let’s look at the steps to do
    just that:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Twitter是一个很好的起点，因为我们可以通过简单地打开一个特定的URL非常容易地将它添加到我们的项目中。让我们看看如何做到这一点：
- en: 'Open the `PauseScreenBehaviour` script. Once inside, we will add the following
    code inside the `PlayerScreenBehaviour` class:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`PauseScreenBehaviour`脚本。一旦进入，我们将在`PlayerScreenBehaviour`类中添加以下代码：
- en: '[PRE3]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: First of all, we will use a number of new things. You’ll note that the preceding
    block of code starts and ends with `#region` and `#endregion`, respectively. What
    this does is allow us to expand and collapse this portion of code inside Visual
    Studio. When we introduce longer code files, it can be convenient to be able to
    collapse or hide certain parts of your script so that you can focus only on the
    part of the file you’re working on. Since this portion of code has nothing to
    do with the rest of the script, this is a good place for us to use it.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用一些新事物。你会注意到前面的代码块以`#region`开始，以`#endregion`结束。这样做的作用是允许我们在Visual Studio中展开和折叠这部分代码。当我们引入较长的代码文件时，能够折叠或隐藏脚本中的某些部分，以便我们只关注正在工作的文件部分，这会非常方便。由于这部分代码与脚本的其他部分无关，这是一个我们使用它的好地方。
- en: To open URLs inside Unity, we will need to make use of the `Application.OpenURL`
    function and the `UnityWebRequest` class.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中打开URL，我们需要使用`Application.OpenURL`函数和`UnityWebRequest`类。
- en: Note
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on Twitter’s Web Intents and the ways you can use them,
    check out [https://dev.twitter.com/web/intents](https://dev.twitter.com/web/intents).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Twitter的Web Intents及其使用方式，请查看[https://dev.twitter.com/web/intents](https://dev.twitter.com/web/intents)。
- en: The `UnityWebRequest` class is typically used to load content at runtime, but
    it also has the `EscapeURL` function, which will convert a string into a format
    that web browsers are comfortable with. For instance, the newline character will
    not be displayed by itself.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`UnityWebRequest`类通常用于在运行时加载内容，但它也有`EscapeURL`函数，该函数将字符串转换为网络浏览器舒适的格式。例如，换行符将不会单独显示。'
- en: Note
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on the `EscapeURL` function, check out [https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest.EscapeURL.html](https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest.EscapeURL.html).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`EscapeURL`函数的更多信息，请查看[https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest.EscapeURL.html](https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest.EscapeURL.html)。
- en: 'Save the script and dive back into Unity. From the `Player` object by dragging
    and dropping the **Player** game object from the **Hierarchy** window onto the
    **Player** property in the **Inspector** window:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 保存脚本并返回Unity。通过将**层次结构**窗口中的**Player**游戏对象拖放到**检查器**窗口中的**Player**属性上：
- en: '![Figure 8.5: Assigning the Player property](img/B18868_08_05.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图8.5：分配Player属性](img/B18868_08_05.jpg)'
- en: 'Figure 8.5: Assigning the Player property'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.5：分配Player属性
- en: Now, we need to have a button for our **Game Over** screen to allow us to share
    our score.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要在我们的**Game Over**屏幕上有一个按钮，以便我们可以分享我们的分数。
- en: Open up the **Canvas** object and toggle the **Game Over** object to **ON**
    by clicking on the checkmark beside its name in the **Inspector** window.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**画布**对象，通过在**检查器**窗口中点击其名称旁边的勾选标记来切换**Game Over**对象为**开启**。
- en: From there, expand the two `Tweet Score Button` and also update the text in
    the child object to display `Tweet Score` as well.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从那里，展开两个**Tweet Score Button**，并更新子对象中的文本以显示`Tweet Score`。
- en: 'Afterward, select the **Tweet Score** button object and scroll down to the
    **Button** component. From there, change the function we are calling to the **PauseScreenBehaviour**
    | **TweetScore** function:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，选择**Tweet Score**按钮对象，并滚动到**按钮**组件。从那里，将我们调用的函数更改为**PauseScreenBehaviour**
    | **TweetScore**函数：
- en: '![Figure 8.6: Calling the TweetScore function](img/B18868_08_06.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图8.6：调用TweetScore函数](img/B18868_08_06.jpg)'
- en: 'Figure 8.6: Calling the TweetScore function'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.6：调用TweetScore函数
- en: Select the **Game Over** object in the **Hierarchy** and disable it again. Next,
    save your scene and start the game.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次结构**中选择**Game Over**对象，并再次禁用它。接下来，保存你的场景并开始游戏。
- en: 'Now when we fail the game, we can click on the **Tweet Score** button and our
    browser will open on our PC:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们失败游戏时，我们可以点击**Tweet Score**按钮，我们的浏览器将在我们的PC上打开：
- en: "![Fi\uFEFFgure 8.7: Result on PC](img/B18868_08_07.jpg)"
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图8.7：PC上的结果](img/B18868_08_07.jpg)'
- en: 'Figure 8.7: Result on PC'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.7：PC上的结果
- en: 'However, on our mobile devices, it will open up the Twitter app if it is installed:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们的移动设备上，如果已安装，它将打开Twitter应用：
- en: '![Figure 8.8: Tweeting our score via the Twitter mobile app](img/B18868_08_08.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图8.8：通过Twitter移动应用发布我们的分数](img/B18868_08_08.jpg)'
- en: 'Figure 8.8: Tweeting our score via the Twitter mobile app'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.8：通过Twitter移动应用发布我们的分数
- en: With that, you learned just how easy it is to share something using Twitter.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，你学会了如何轻松地使用Twitter分享东西。
- en: Note
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For those who are interested in doing more than this with Twitter, it does have
    its own API for Unity, which will allow you to let users log in to your game using
    Twitter if you’d like to do that instead of Facebook, which we will do later on.
    If you’re interested in looking into this, you can find more information at [https://dev.twitter.com/twitterkit/unity/overview](https://dev.twitter.com/twitterkit/unity/overview).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些对Twitter有更多兴趣的人来说，它确实有自己的Unity API，这允许你让用户使用Twitter登录到你的游戏，如果你愿意这样做而不是Facebook，我们稍后会这样做。如果你对此感兴趣，你可以在[https://dev.twitter.com/twitterkit/unity/overview](https://dev.twitter.com/twitterkit/unity/overview)找到更多信息。
- en: Of course, other social networks exist as well, some of which have their very
    own **software development kit** (**SDK**), which allows you to access the information
    that they have. In the next section, we will explore how to utilize this.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，还有其他社交网络存在，其中一些有自己的**软件开发工具包**（**SDK**），这允许你访问它们拥有的信息。在下一节中，我们将探讨如何利用这一点。
- en: Downloading and installing Facebook’s SDK
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载并安装Facebook的SDK
- en: 'We couldn’t have a chapter on social networking without mentioning Facebook.
    Facebook has its own SDK that can be used with Unity. This can allow us to use
    the information that Facebook already has, including the user’s name and profile
    image, within our game experience. Let’s look at the steps to incorporate them:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有提到 Facebook 的情况下讨论社交网络章节是不可能的。Facebook 有自己的 SDK，可以与 Unity 一起使用。这可以让我们在我们的游戏体验中使用
    Facebook 已经拥有的信息，包括用户的姓名和头像。让我们看看如何整合这些步骤：
- en: 'Open up your web browser and visit [https://developers.facebook.com/docs/unity/](https://developers.facebook.com/docs/unity/):'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的网络浏览器并访问 [https://developers.facebook.com/docs/unity/](https://developers.facebook.com/docs/unity/)：
- en: '![Figure 8.9: Facebook SDK for Unity page](img/B18868_08_09.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.9：Unity 的 Facebook SDK 页面](img/B18868_08_09.jpg)'
- en: 'Figure 8.9: Facebook SDK for Unity page'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.9：Unity 的 Facebook SDK 页面
- en: Click on the `facebook-unity-sdk-15.1.0` folder. Then, open up the `FacebookSDK`
    folder and you’ll see a single file, `facebook-unity-sdk-15.1.0.unitypackage`.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `facebook-unity-sdk-15.1.0` 文件夹。然后，打开 `FacebookSDK` 文件夹，你会看到一个单独的文件，`facebook-unity-sdk-15.1.0.unitypackage`。
- en: Unlike previous chapters, the use of the Facebook SDK requires both iOS and
    Android build support for your Unity version installed, so make sure that both
    are added before importing the package or you will have errors. To do so, in Unity
    Hub, go to the **Installs** section and, from the gear icon, select **Add Modules**
    and add the relevant items that weren’t included before (if there are any).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的章节不同，使用 Facebook SDK 需要为安装的 Unity 版本添加 iOS 和 Android 构建支持，所以在导入包之前确保两者都已添加，否则你会遇到错误。要做到这一点，在
    Unity Hub 中，转到 **安装** 部分，从齿轮图标中选择 **添加模块** 并添加之前未包含的相关项目（如果有）。
- en: 'Double-click on the `unitypackage` file, and you should have a window pop up,
    as shown here:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击 `unitypackage` 文件，你应该会弹出一个窗口，如图所示：
- en: '![Figure 8.10: Unity package import dialog](img/B18868_08_10.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.10：Unity 包导入对话框](img/B18868_08_10.jpg)'
- en: 'Figure 8.10: Unity package import dialog'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.10：Unity 包导入对话框
- en: If this does not work, you can also go to **Assets** | **Import Package** |
    **Custom Package** and then find the folder that you unzipped the file to and
    open it that way.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这不起作用，你也可以转到 **资产** | **导入包** | **自定义包**，然后找到你解压文件的文件夹，并以此方式打开它。
- en: Click on the **Import** button and wait for it to finish loading. From here,
    you’ll get a popup noting the project may contain obsolete APIs. Go ahead and
    click on the **I Made a Backup. Go Ahead!** button and wait for it to finish.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **导入** 按钮，等待它加载完成。从这里，你会看到一个弹出窗口提示项目可能包含过时的 API。继续点击 **我已经备份，继续** 按钮，等待它完成。
- en: Now, in order to use the Facebook API, we will first need to have a Facebook
    App ID, so let’s do that next.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，为了使用 Facebook API，我们首先需要一个 Facebook App ID，所以让我们接下来做这件事。
- en: 'Go back to your web browser and go to [https://developers.facebook.com/](https://developers.facebook.com/)
    and click on the **Log In** button in the top-right corner of the screen. Once
    you log in to your Facebook account, you should see something similar to the following
    screenshot:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回你的网络浏览器并转到 [https://developers.facebook.com/](https://developers.facebook.com/)，点击屏幕右上角的
    **登录** 按钮。一旦你登录到你的 Facebook 账户，你应该会看到以下截图类似的内容：
- en: '![Figure 8.11: Meta for Developers menu](img/B18868_08_11.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.11：开发者 Meta 菜单](img/B18868_08_11.jpg)'
- en: 'Figure 8.11: Meta for Developers menu'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.11：开发者 Meta 菜单
- en: From the preceding page, click on the **Get Started** button in the top-right
    corner of the screen. From there, you’ll be brought to a screen where you need
    to click **Next**, and then you’ll be asked your role. Click on **Developer**
    and, on the next screen, click on the **Create First** **App** button.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从前面的页面，点击屏幕右上角的 **开始** 按钮。从那里，你会被带到需要点击 **下一步** 的屏幕，然后你会被要求选择你的角色。点击 **开发者**，然后在下一个屏幕上点击
    **创建第一个** **应用** 按钮。
- en: Afterward, add a `Endless Roller`) and your **Contact E-mail**, and then select
    **Create** **App** **ID**.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，添加 `Endless Roller`) 和你的 **联系邮箱**，然后选择 **创建** **应用** **ID**。
- en: Once you’re brought to your app’s page, click on the **Dashboard** option to
    the left of the default info for your game. Note the **App ID** and copy it by
    clicking on it or by highlighting it and then pressing *Ctrl +* *C*.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你被带到你的应用页面，点击左侧默认游戏信息的 **仪表板** 选项。注意 **App ID** 并通过点击它或突出显示它然后按 *Ctrl + C*
    来复制它。
- en: If you instead see a `Endless Roller`) and your contact e-mail, and then select
    **Create app**.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你看到的是 `Endless Roller`) 和你的联系邮箱，然后选择 **创建应用**。
- en: '![Figure 8.12: Getting the App ID](img/B18868_08_12.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.12：获取 App ID](img/B18868_08_12.jpg)'
- en: 'Figure 8.12: Getting the App ID'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.12：获取应用ID
- en: Return to Unity, and you may be asked to share some info with Google. Answer
    as you wish. Then, you’ll have the option to enable Android auto-resolution. I
    set **Enable** and had to wait for it to resolve Android dependencies.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回Unity，您可能需要与Google分享一些信息。按您的意愿回答。然后，您将可以选择启用Android自动解析。我设置了**启用**并等待它解析Android依赖项。
- en: 'Afterward, you will note a new Facebook option in the top bar. Select it and
    then select **Edit Settings**. Once you’re there, click on **Inspector** if you
    need to and you’ll see several options. Set **Facebook App Id** to our created
    app’s ID and then set the name to our game’s name:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，您会在顶部栏注意到一个新的Facebook选项。选择它，然后选择**编辑设置**。一旦到了那里，如果您需要，点击**检查器**，您将看到几个选项。将**Facebook
    App Id**设置为创建的应用的ID，然后将名称设置为游戏名称：
- en: "![Figure 8.13: Adding \uFEFFthe App Id to Facebook Settings](img/B18868_08_13.jpg)"
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图8.13：将应用ID添加到Facebook设置](img/B18868_08_13.jpg)'
- en: 'Figure 8.13: Adding the App Id to Facebook Settings'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.13：将应用ID添加到Facebook设置
- en: Tip
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: There is a possibility that you may get an error the next time that you try
    to export your game to Android due to changing the SDK location. If this is the
    case, close your Unity project and then go to the project folder and delete the
    `Temp` folder. Upon restarting the project, the error should go away.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 有可能您在尝试将游戏导出到Android时可能会因为更改SDK位置而遇到错误。如果是这种情况，请关闭您的Unity项目，然后转到项目文件夹并删除`Temp`文件夹。重新启动项目后，错误应该会消失。
- en: Return to the Facebook Settings menu by going to **Facebook** | **Edit Settings...**.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问**Facebook** | **编辑设置...**返回Facebook设置菜单。
- en: Now, you’ll notice that under **Android Build Facebook Settings**, there is
    a new error stating that OpenSSL is not found.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您会注意到在**Android构建Facebook设置**下出现了一个新的错误，指出未找到OpenSSL。
- en: 'To fix this, we will first need to download OpenSSL by going to [http://slproweb.com/products/Win32OpenSSL.html](http://slproweb.com/products/Win32OpenSSL.html).
    From there, select the **EXE** link below the **Win64 OpenSSL v1.1.1u** option,
    as shown here:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们首先需要通过访问[http://slproweb.com/products/Win32OpenSSL.html](http://slproweb.com/products/Win32OpenSSL.html)下载OpenSSL。从那里，选择**Win64
    OpenSSL v1.1.1u**选项下的**EXE**链接，如图所示：
- en: Important note
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'For those on a Mac, you can follow the instructions given here in order to
    install OpenSSL and add it to your path: [https://developers.facebook.com/docs/facebook-login/android/advanced](https://developers.facebook.com/docs/facebook-login/android/advanced).'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用Mac的用户，您可以按照以下说明安装OpenSSL并将其添加到您的路径：[https://developers.facebook.com/docs/facebook-login/android/advanced](https://developers.facebook.com/docs/facebook-login/android/advanced)。
- en: '![Figure 8.14: OpenSSL download link](img/B18868_08_14.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图8.14：OpenSSL下载链接](img/B18868_08_14.jpg)'
- en: 'Figure 8.14: OpenSSL download link'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.14：OpenSSL下载链接
- en: 'Once it’s downloaded, install the program with the default options, as shown
    in the following screenshot:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完成后，使用默认选项安装程序，如图所示：
- en: "![Figure 8.15\uFEFF: Installing OpenSSL](img/B18868_08_15.jpg)"
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图8.15：安装OpenSSL](img/B18868_08_15.jpg)'
- en: 'Figure 8.15: Installing OpenSSL'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.15：安装OpenSSL
- en: Once the installation is complete, you may uncheck the donation option and click
    on the **Finish** button.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，您可以取消勾选捐赠选项，然后点击**完成**按钮。
- en: We then need to add the location of OpenSSL to the path. To do this, press the
    Windows key on your
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们接下来需要将OpenSSL的位置添加到路径中。为此，按下您的Windows键：
- en: keyboard and start typing in `env`, and then select the **Edit the system**
    **environment variables**
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下键盘并开始输入`env`，然后选择**编辑系统环境变量**
- en: 'option, as shown in the following screenshot:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选项，如图所示：
- en: "![Figure 8.16\uFEFF: Se\uFEFFlecting the \uFEFFEdit the system environment\
    \ variables option](img/B18868_08_16.jpg)"
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图8.16：选择编辑系统环境变量选项](img/B18868_08_16.jpg)'
- en: 'Figure 8.16: Selecting the Edit the system environment variables option'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.16：选择编辑系统环境变量选项
- en: 'In the window that pops up, click the `C:\Program Files\OpenSSL-Win64\bin`:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出的窗口中，点击`C:\Program Files\OpenSSL-Win64\bin`：
- en: "![Figure 8.17\uFEFF: Editing the environmental variable for the path](img/B18868_08_17.jpg)"
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图8.17：编辑路径的环境变量](img/B18868_08_17.jpg)'
- en: 'Figure 8.17: Editing the environmental variable for the path'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.17：编辑路径的环境变量
- en: Then, click on `C:\Program Files\Unity\Hub\Editor\2022.1.0b16\Editor\Data\PlaybackEngines\AndroidPlayer\OpenJDK\bin`.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击`C:\Program Files\Unity\Hub\Editor\2022.1.0b16\Editor\Data\PlaybackEngines\AndroidPlayer\OpenJDK\bin`。
- en: Click on the **OK** button and then the **OK** button in the **Environmental**
    **Variables** window.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**按钮，然后在**环境变量**窗口中的**确定**按钮。
- en: 'Once both options have been added, close your Unity project and restart your
    computer. Once Unity reopens, you may have to wait for the **Resolving Android
    Dependencies** menu to complete, but once it finishes, you should be able to see
    the **Facebook Settings** (**Facebook | Edit Settings**) menu working correctly
    and giving us a value under **Debug Android Key** **Hash** **[?]**:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦添加了这两个选项，请关闭您的Unity项目并重新启动计算机。Unity重新打开后，您可能需要等待**解决Android依赖项**菜单完成，但一旦完成，您应该能够正确看到**Facebook设置**（**Facebook
    | 编辑设置**）菜单，并在**调试Android密钥** **哈希** **[?]**下获得值：
- en: "![Figure 8.18\uFEFF: Debug Android Key Hash](img/B18868_08_18.jpg)"
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![图8.18：调试Android密钥哈希](img/B18868_08_18.jpg)'
- en: 'Figure 8.18: Debug Android Key Hash'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.18：调试Android密钥哈希
- en: It is also required for calls to certain APIs to utilize a client token, so
    we will also get one of them. To do so, go back to your project’s dashboard by
    going to **Facebook |** **Developers Page**.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于某些API的调用，也需要使用客户端令牌，因此我们也将获取一个。为此，请通过转到**Facebook | 开发者页面**返回您项目的仪表板。
- en: Once the dashboard has loaded, go to **Settings | Advanced | Security | Client
    Token**. Copy the **Client token** value and then go back to the Unity Editor
    and paste it back into **Facebook Settings** in **Inspector**.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦仪表板加载完成，转到**设置 | 高级 | 安全 | 客户端令牌**。复制**客户端令牌**值，然后返回Unity编辑器，将其粘贴到**检查器**中的**Facebook设置**。
- en: This means that our setup of the Facebook SDK is complete!
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们的Facebook SDK设置已经完成！
- en: 'Depending on the platform you wish to deploy to, go to the following websites
    and complete the tasks listed:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据您希望部署的平台，访问以下网站并完成列出的任务：
- en: For Android, check out [https://developers.facebook.com/docs/unity/getting-started/android](https://developers.facebook.com/docs/unity/getting-started/android)
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Android，请参阅[https://developers.facebook.com/docs/unity/getting-started/android](https://developers.facebook.com/docs/unity/getting-started/android)
- en: For iOS, check out [https://developers.facebook.com/docs/unity/getting-started/ios](https://developers.facebook.com/docs/unity/getting-started/ios)
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于iOS，请参阅[https://developers.facebook.com/docs/unity/getting-started/ios](https://developers.facebook.com/docs/unity/getting-started/ios)
- en: Now that we have set that up, we can start adding to it by first allowing our
    game to be logged in to using Facebook.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了这些，我们可以通过首先允许我们的游戏通过Facebook登录来添加内容。
- en: Logging in to our game via Facebook
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过Facebook登录到我们的游戏
- en: 'One of the things we can do when using the Facebook API is to allow our users
    to log in to the game using their Facebook account. Then, we can use their name
    and image automatically within our project. The following steps show us how to
    achieve this:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用Facebook API时，我们可以做的一件事是允许我们的用户使用他们的Facebook账户登录到游戏。然后，我们可以在项目中自动使用他们的姓名和图像。以下步骤展示了我们如何实现这一点：
- en: Let’s first open up our `Assets/Scenes` folder, and then double-clicking on
    the `MainMenu` file.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们先打开`Assets/Scenes`文件夹，然后双击`MainMenu`文件。
- en: From there, let’s click on the **2D** button to go into 2D mode if you haven’t
    done so previously. What we will do is replace the original menu and instead have
    a button for players to log in via Facebook, or play as a guest when the game
    starts.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从那里，让我们点击**2D**按钮进入2D模式，如果您之前还没有这样做。我们将替换原始菜单，并为玩家提供一个通过Facebook登录或游戏开始时作为访客游玩的按钮。
- en: Go to the `Menu Options`.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往**菜单选项**。
- en: 'Then, select the `Facebook Login` object. Select the **Menu Options** game
    object again and then disable it by going to the **Inspector** tab and clicking
    on the checkmark beside its name:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，选择`Facebook登录`对象。再次选择**菜单选项**游戏对象，然后通过转到**检查器**选项卡并点击其名称旁边的勾选标记来禁用它：
- en: '![Figure 8.19: Creating the Facebook Login menu](img/B18868_08_19.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图8.19：创建Facebook登录菜单](img/B18868_08_19.jpg)'
- en: 'Figure 8.19: Creating the Facebook Login menu'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.19：创建Facebook登录菜单
- en: We will have the **Facebook Login** object turn the menu on when needed.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使**Facebook登录**对象在需要时打开菜单。
- en: Next, open the `225`, then right-click on the **Button** component, and then
    select the **Reset** option to remove its original **On Click ()** functionality.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开`225`，然后右键单击**按钮**组件，并选择**重置**选项以移除其原始的**On Click ()**功能。
- en: 'Duplicate the `Facebook Login Button` and `Continue as Guest Button`. Also,
    change the `Facebook Login` and `Continue` `as Guest`:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制`Facebook登录按钮`和`继续作为访客按钮`。同时，更改`Facebook登录`和`继续作为访客`：
- en: '![Figure 8.20: Facebook Login Button setup](img/B18868_08_20.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图8.20：Facebook登录按钮设置](img/B18868_08_20.jpg)'
- en: 'Figure 8.20: Facebook Login Button setup'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.20：Facebook登录按钮设置
- en: Now that we have the buttons working correctly, we need to write the script
    that will allow us to log in. Go to the `Scripts` folder and open our `MainMenuBehaviour`
    script. We will use the `List` class to hold the permissions we want in order
    to access Facebook and the content of the `FB` class in the Facebook SDK.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经正确地使按钮工作，我们需要编写一个脚本，以便我们可以登录。转到`Scripts`文件夹并打开我们的`MainMenuBehaviour`脚本。我们将使用`List`类来保存我们想要访问Facebook和Facebook
    SDK中`FB`类内容的权限。
- en: 'So, to do that, we’ll first add the following to the top of the `MainMenuBehaviour`
    script:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，为了做到这一点，我们首先将在`MainMenuBehaviour`脚本顶部添加以下内容：
- en: '[PRE4]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, add the following variables to the `MainMenuBehaviour` class:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将以下变量添加到`MainMenuBehaviour`类中：
- en: '[PRE5]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, add the following code within the `MainMenuBehaviour` class:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`MainMenuBehaviour`类中添加以下代码：
- en: '[PRE6]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Inside this region, we are going to add several different methods, starting
    with some methods dealing with initializing the Facebook APIs:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个区域内，我们将添加几个不同的方法，首先是处理初始化Facebook API的一些方法：
- en: '[PRE7]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In this case, the `Awake` method calls the `FB.Init` function, which takes
    in two parameters, both of which are delegates, or functions to call whenever
    the initialization is complete and whenever the app is hidden or no longer the
    currently focused one. The definition of both those functions is as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`Awake`方法调用`FB.Init`函数，它接受两个参数，这两个参数都是委托，或者是在初始化完成以及应用隐藏或不再当前焦点时调用的函数。这两个函数的定义如下：
- en: '[PRE8]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this case, we are going to print a message to the screen if we are logged
    in to Facebook and we will display the main menu. Likewise, if we ever lose focus
    of Unity, we are going to pause the game.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，如果我们登录到Facebook，我们将向屏幕打印一条消息，并显示主菜单。同样，如果我们失去Unity的焦点，我们将暂停游戏。
- en: 'We have some other final functions that we need to add for our final implementation,
    which we will add next:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要添加一些其他最终函数来完成我们的最终实现，我们将在下面添加：
- en: '[PRE9]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this case, we are accessing the player’s public profile, which contains information
    such as their name and their profile picture.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们正在访问玩家的公共资料，其中包含诸如他们的姓名和他们的个人资料图片等信息。
- en: Note
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For all of the properties that we can get access to, check out [https://developers.facebook.com/docs/facebook-login/permissions#reference-public_profile](https://developers.facebook.com/docs/facebook-login/permissions#reference-public_profile).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们可以访问的所有属性，请查看[https://developers.facebook.com/docs/facebook-login/permissions#reference-public_profile](https://developers.facebook.com/docs/facebook-login/permissions#reference-public_profile)。
- en: 'Save your script and go to the **Facebook Login** button and change the button’s
    **OnClick()** action to now call your function by clicking on the + button and
    then dragging and dropping the **Main Menu** object in and then selecting **Main
    Menu Behaviour** | **Facebook** **Login** instead:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的脚本，转到**Facebook登录**按钮，并将按钮的**OnClick()**动作更改为现在通过点击+按钮并将**主菜单**对象拖放到其中，然后选择**主菜单行为**
    | **Facebook** **登录**来调用你的函数：
- en: '![Figure 8.21: Calling the FacebookLogin function](img/B18868_08_21.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![图8.21：调用FacebookLogin函数](img/B18868_08_21.jpg)'
- en: 'Figure 8.21: Calling the FacebookLogin function'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.21：调用FacebookLogin函数
- en: Then, on the `MainMenuBehaviour.ShowMainMenu` function.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`MainMenuBehaviour.ShowMainMenu`函数中。
- en: "![Figure 8.22: Setup for Continue \uFEFFas Guest Button](img/B18868_08_22.jpg)"
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图8.22：设置“继续作为访客”按钮的界面](img/B18868_08_22.jpg)'
- en: 'Figure 8.22: Setup for Continue as Guest Button'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.22：设置“继续作为访客”按钮的界面
- en: 'Finally, we will need to set the variables we have created. Select the **Main
    Menu** object in the **Hierarchy** window and then set the **Main Menu** and **Facebook**
    **Login** properties:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要设置我们创建的变量。在**层次结构**窗口中选择**主菜单**对象，然后设置**主菜单**和**Facebook** **登录**属性：
- en: "![Figure 8.23: Settin\uFEFFg the Main Menu Behaviour properties](img/B18868_08_23.jpg)"
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![图8.23：设置主菜单行为属性](img/B18868_08_23.jpg)'
- en: 'Figure 8.23: Setting the Main Menu Behaviour properties'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.23：设置主菜单行为属性
- en: Ensure that the **Facebook Login** is set to the **panel** object holding both
    buttons.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 确保将**Facebook登录**设置为包含两个按钮的**面板**对象。
- en: 'Save your scene, start the game, and then click on the **Facebook** **Login**
    button:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的场景，开始游戏，然后点击**Facebook** **登录**按钮：
- en: '![Figure 8.24: User Access Token Request Screen](img/B18868_08_24.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![图8.24：用户访问令牌请求屏幕](img/B18868_08_24.jpg)'
- en: 'Figure 8.24: User Access Token Request Screen'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.24：用户访问令牌请求屏幕
- en: Important note
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: To see everything properly within the editor, it’s a good idea to maximize the
    **Game** tab, which you can do by right-clicking on the **Game** tab and selecting
    **Maximize** or by checking the **Maximize On Play** option on the toolbar.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在编辑器中正确查看所有内容，最好最大化**游戏**标签页，您可以通过右键点击**游戏**标签页并选择**最大化**，或者通过在工具栏上勾选**播放时最大化**选项来实现。
- en: Now, you should see a menu asking for a user access token, a value that every
    profile has and we can associate it with. We’ll need to go to Facebook to get
    that, so that’s what we’ll do next.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该会看到一个要求用户访问令牌的菜单，这是一个每个资料都有的值，我们可以将其关联起来。我们需要去Facebook获取这个令牌，所以这就是我们接下来要做的。
- en: 'Click on the **Find Access Token** page, and a web browser will open with a
    new page:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**查找访问令牌**页面，浏览器将打开一个新页面：
- en: '![Figure 8.25: Access Token Tool page](img/B18868_08_25.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![图8.25：访问令牌工具页面](img/B18868_08_25.jpg)'
- en: 'Figure 8.25: Access Token Tool page'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.25：访问令牌工具页面
- en: You’ll then need to click on the **need to grant permissions** link and then,
    on **Generate Access Token**, click **Continue** and you’ll see a string of characters
    under **User Token**. Copy the string, paste it into the **User Access Token**
    property in Unity, and then click on the **Send** **Success** button.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您需要点击**需要授予权限**链接，然后，在**生成访问令牌**中点击**继续**，您将在**用户令牌**下看到一个字符序列。复制该字符串，将其粘贴到Unity中的**用户访问令牌**属性中，然后点击**发送****成功**按钮。
- en: Note
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you get an error when granting permissions stating **Future off- Facebook
    activity for this app is off**, that means that your Facebook settings do not
    allow your Facebook profile to be used outside of Facebook. In order to use Facebook
    to log in, your account must have Off-Facebook tracking enabled. To do so, you
    can go to [https://www.facebook.com/off_facebook_activity](https://www.facebook.com/off_facebook_activity)
    and ensure the **Future off- Facebook Activity** value is set to ON to be able
    to log in. We will be allowing users to log in as a guest if you’d prefer not
    to be tracked.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在授予权限时出现错误，提示**此应用的未来Facebook活动已关闭**，这意味着您的Facebook设置不允许您的Facebook资料在Facebook之外使用。为了使用Facebook进行登录，您的账户必须启用Off-Facebook跟踪。为此，您可以访问[https://www.facebook.com/off_facebook_activity](https://www.facebook.com/off_facebook_activity)，并确保**未来的Off-Facebook活动**值设置为开启，以便能够登录。如果您不想被跟踪，我们将允许用户以访客身份登录。
- en: 'Now, you’ll note that the Console has printed that we’ve logged in to Facebook
    and that the menu closes when we’ve sent the key:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您会注意到控制台已经打印出我们已登录Facebook，并且当我们发送密钥时菜单会关闭：
- en: "![Figure 8.26: Logged in\uFEFF to Faceb\uFEFFook](img/B18868_08_26.jpg)"
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![图8.26：已登录Facebook](img/B18868_08_26.jpg)'
- en: 'Figure 8.26: Logged in to Facebook'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.26：已登录Facebook
- en: Note
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on user access tokens, check out [https://developers.facebook.com/docs/facebook-login/access-tokens/#usertokens](https://developers.facebook.com/docs/facebook-login/access-tokens/#usertokens).
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 有关用户访问令牌的更多信息，请参阅[https://developers.facebook.com/docs/facebook-login/access-tokens/#usertokens](https://developers.facebook.com/docs/facebook-login/access-tokens/#usertokens)。
- en: Now that we have the ability to log in to Facebook, we can now use the information
    that we get from Facebook in order to customize our game, which is what we will
    do next.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了登录Facebook的能力，我们可以使用从Facebook获取的信息来定制我们的游戏，这就是我们接下来要做的。
- en: Displaying a Facebook name and profile picture
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示Facebook名称和资料图片
- en: 'A good thing to do is to personalize our game to fit our players. So, with
    that, once the player logs in, we will welcome them and display their image on
    the screen by following these steps:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 做一件好事就是让我们的游戏适应我们的玩家。因此，一旦玩家登录，我们将欢迎他们，并按照以下步骤在屏幕上显示他们的图像：
- en: 'Go to the `MainMenuBehaviour` script once again. From there, we’ll need to
    add a new `using` statement to display an image and change the text we need in
    order to use Unity’s UI system and TextMeshPro:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次前往`MainMenuBehaviour`脚本。从那里，我们需要添加一个新的`using`语句来显示图像，并更改我们需要更改的文本，以便使用Unity的UI系统和TextMeshPro：
- en: '[PRE10]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We will then need to add two new variables:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要添加两个新的变量：
- en: '[PRE11]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: These variables will hold the information that we wish to display once we get
    it from Facebook.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这些变量将保存我们从Facebook获取的信息，以便我们显示。
- en: 'Afterward, we will update the `ShowMainMenu` function and add some new functions
    to use:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们将更新`ShowMainMenu`函数并添加一些新函数来使用：
- en: '[PRE12]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `FB.API` function makes a call to Facebook’s Graph API to get data or take
    an action on the user’s behalf and allows us to get the information that we have
    permission to as defined earlier. In our case, we are looking for the name and
    the profile picture of the user and calling the `SetName` and `SetProfilePic`
    functions, respectively, once we have obtained that data.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`FB.API`函数调用Facebook的Graph API以获取数据或代表用户执行操作，并允许我们获取之前定义的我们有权限获取的信息。在我们的案例中，我们正在寻找用户的姓名和头像，并在获取到这些数据后分别调用`SetName`和`SetProfilePic`函数。'
- en: However, we currently do not have `SetName` and `SetProfilePic` functions, so
    we will go ahead and add them now.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们目前没有`SetName`和`SetProfilePic`函数，所以我们将继续添加它们。
- en: 'Add the following additional code within the `Facebook` region of the script:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在脚本的`Facebook`区域添加以下附加代码：
- en: '[PRE13]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: After getting the data, we will modify the image or string to display the new
    data that we retrieved.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 获取数据后，我们将修改图像或字符串以显示我们检索的新数据。
- en: Important note
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: For more information on the `FB.API` function, check out [https://developers.facebook.com/docs/unity/reference/current/FB.API](https://developers.facebook.com/docs/unity/reference/current/FB.API).
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于`FB.API`函数的信息，请查看[https://developers.facebook.com/docs/unity/reference/current/FB.API](https://developers.facebook.com/docs/unity/reference/current/FB.API)。
- en: 'Now, we will need to actually create the text and image we want to display.
    Open up the `Safe Area Holder`. Then, right-click on the `Welcome Profile`:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要实际创建我们想要显示的文本和图像。打开`Safe Area Holder`。然后，在`Welcome Profile`上右键点击：
- en: "![Figure 8.27: Creating \uFEFFWelcome Profile](img/B18868_08_27.jpg)"
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![图8.27：创建欢迎配置文件](img/B18868_08_27.jpg)'
- en: 'Figure 8.27: Creating Welcome Profile'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.27：创建欢迎配置文件
- en: This will act as a container for all of our information for the player.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这将作为玩家所有信息的容器。
- en: With the `10`. From there, change **Child Alignment** to **Lower Center** and
    then check **Width** and **Height** under the **Control Child Size** property.
    Then, add a **Content Size Fitter** component and change the **Horizontal Fit**
    and **Vertical Fit** size to **Preferred Size**. Finally, in the **Anchor Presets**
    menu, hold down *Alt + Shift* and select **Bottom-center**.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`10`。从那里，将**子对齐**更改为**底部居中**，然后在**控制子大小**属性下检查**宽度**和**高度**。然后，添加一个**内容大小适配器**组件，并将**水平适配**和**垂直适配**大小更改为**首选大小**。最后，在**锚点预设**菜单中，按住*Alt
    + Shift*并选择**底部居中**。
- en: Now, select the **Welcome Profile** object in the **Hierarchy** tab, right-click
    on it, and select **UI** | **Text -** **TextMeshPro**.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在**层次结构**选项卡中选择**Welcome Profile**对象，右键点击它，然后选择**UI** | **Text -** **TextMeshPro**。
- en: Rename the next `Greeting`.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重命名下一个`Greeting`。
- en: 'Then, adjust `Welcome` and the size to something larger, such as `50`, change
    the **Vertex Color** to black, and then adjust **Alignment** to be centered vertically
    and horizontally:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，调整`Welcome`的大小到更大一些，例如`50`，将**顶点颜色**更改为黑色，然后调整**对齐**使其垂直和水平居中：
- en: '![Figure 8.28: Greeting Text setup](img/B18868_08_28.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![图8.28：问候文本设置](img/B18868_08_28.jpg)'
- en: 'Figure 8.28: Greeting Text setup'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.28：问候文本设置
- en: Likewise, let’s next right-click on `256`. Afterward, check the `256` as well,
    because Facebook may give us images larger than this, and this will keep the images
    smaller. The **Layout Element (Script)** component is great for allowing you to
    override things that **LayoutGroups** will do by default and can be useful if
    you’re not getting exactly what you want from the default behavior.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，接下来我们右键点击`256`。之后，也要检查`256`，因为Facebook可能会给我们提供比这更大的图片，这将保持图片的大小。**布局元素（脚本）**组件非常适合允许你覆盖**布局组**默认执行的操作，如果你没有从默认行为中获得你想要的结果，这可能很有用。
- en: Note
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on the **Layout Element (Script)** compon[ent, ch](https://developers.facebook.com/docs/unity/)eck
    out [https://docs.unity3d.com/Manual/script-LayoutElement.html](https://docs.unity3d.com/Manual/script-LayoutElement.html).
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于**布局元素（脚本）**组件的信息，请查看[https://developers.facebook.com/docs/unity/](https://developers.facebook.com/docs/unity/)，或[https://docs.unity3d.com/Manual/script-LayoutElement.html](https://docs.unity3d.com/Manual/script-LayoutElement.html)。
- en: 'Next, change the name of the `Profile Pic` and then reorder it so it is above
    the **Greeting** object in the **Hierarchy**:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，更改`Profile Pic`的名称，然后重新排列它，使其在**层次结构**中位于**Greeting**对象之上：
- en: '![Figure 8.29: Profile Pic setup](img/B18868_08_29.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![图8.29：头像设置](img/B18868_08_29.jpg)'
- en: 'Figure 8.29: Profile Pic setup'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.29：头像设置
- en: Reordering objects with a **Horizontal Layout Group** modifies their placement
    order.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**水平布局组**重新排列对象会改变它们的放置顺序。
- en: If you change the resolution to a much smaller size, the image is drawn on top
    of our menu. This is possible due to both canvases being told that they have the
    same priority in being drawn, similar to how Z-fighting works for 2D games. To
    fix potential problems in the future, we will instead put the scaling canvas as
    the background element.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将分辨率更改为一个非常小的尺寸，图像将绘制在我们的菜单上方。这是由于两个画布都被告知它们在绘制时的优先级相同，类似于2D游戏中的Z冲突工作方式。为了解决未来可能的问题，我们将把缩放画布作为背景元素。
- en: To do this, we will select `1`.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要这样做，我们将选择`1`。
- en: Now, dive back into the **Main Menu** object and set the **Greeting** and **Profile
    Pic** properties in the **MainMenuBehaviour** component.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，回到**主菜单**对象，并在**MainMenuBehaviour**组件中设置**问候语**和**个人资料图片**属性。
- en: Finally, since we don’t want them visible when the game starts, let’s turn off
    **Greeting** and our **Profile Pic** object as well.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，由于我们不想在游戏开始时显示它们，让我们关闭**问候语**以及我们的**个人资料图片**对象。
- en: 'Save our game, and then start it up again by going through the appropriate
    login information:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存我们的游戏，然后通过适当的登录信息再次启动它：
- en: '![Figure 8.30: Logged into Facebook](img/B18868_08_30.jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![图8.30：登录到Facebook](img/B18868_08_30.jpg)'
- en: 'Figure 8.30: Logged into Facebook'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.30：登录到Facebook
- en: 'As you can see, we are logged in and you can see my name, but I have a profile
    pic that isn’t quite my actual profile pic. This is because it is using my gaming
    profile. If we want to use my actual Facebook profile pic, we have to add another
    permission to our app:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们已经登录，你可以看到我的名字，但我有一个并非我实际个人资料的图片。这是因为它正在使用我的游戏资料。如果我们想使用我的实际Facebook个人资料图片，我们必须向我们的应用程序添加另一个权限：
- en: Back in Graph API Explorer, go back to the **Permissions** section and, under
    **Add a Permission**, click on the dropdown and select **gaming_user_picture**.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Graph API探索器中，回到**权限**部分，在**添加权限**下，点击下拉菜单并选择**gaming_user_picture**。
- en: '![Figure 8.31: Adding the user picture option](img/B18868_08_31.jpg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![图8.31：添加用户图片选项](img/B18868_08_31.jpg)'
- en: 'Figure 8.31: Adding the user picture option'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.31：添加用户图片选项
- en: From there, click on **Generate Access Token** again and get a new access token
    that share your actual profile information. Note that the user will have to choose
    to share this info with you.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从那里，再次点击**生成访问令牌**并获取一个新的访问令牌，该令牌会共享你的实际配置文件信息。请注意，用户必须选择是否与你共享此信息。
- en: '![Figure 8.32: Choose how you log in to Facebook](img/B18868_08_32.jpg)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![图8.32：选择如何登录到Facebook](img/B18868_08_32.jpg)'
- en: 'Figure 8.32: Choose how you log in to Facebook'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.32：选择如何登录Facebook
- en: Now use your new access token and try to run the game.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 现在使用你的新访问令牌尝试运行游戏。
- en: "![Figure 8.33: Logged in\uFEFF to actual Facebook account](img/B18868_08_33.jpg)"
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![图8.33：登录到实际Facebook账户](img/B18868_08_33.jpg)'
- en: 'Figure 8.33: Logged in to actual Facebook account'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.33：登录到实际Facebook账户
- en: As you can see in the preceding screenshot, I retrieved my actual Facebook info
    once I logged in.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述截图所示，我登录后检索了我的实际Facebook信息。
- en: Facebook is still an incredibly useful platform for game developers and can
    help personalize a user’s gameplay experience. This can be easily expanded to
    utilize several other pieces of data that Facebook has and share content with
    all of your user’s friends.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: Facebook仍然是一个对游戏开发者来说极其有用的平台，可以帮助个性化用户的游戏体验。这可以很容易地扩展到利用Facebook拥有的其他数据，并与所有用户的亲朋好友分享内容。
- en: For those that are just looking for the ability to have the ability to sign
    in to your game to authenticate players for specific platforms, there are several
    other options available that you can use. For details on that, check out [https://docs.unity.com/authentication/SettingupExternalIdentityProviders.html](https://docs.unity.com/authentication/SettingupExternalIdentityProviders.html).
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些只想拥有登录游戏以验证特定平台玩家的能力的人来说，还有其他几个可用的选项供你使用。有关详细信息，请参阅[https://docs.unity.com/authentication/SettingUpExternalIdentityProviders.html](https://docs.unity.com/authentication/SettingUpExternalIdentityProviders.html)。
- en: Summary
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we were introduced to some of the potential ways that we can
    share our game with others, as well as personalizing our game experiences and
    utilizing the functionality that social media provides us with. We started off
    by adding a simple score system and then allowed users to share their scores via
    Twitter. We then set up the Facebook SDK, making it so that we can log in to it
    to play our game and retrieve information about our users, which we can use to
    customize their gameplay experience.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了一些我们可以与他人分享我们的游戏的方法，以及个性化我们的游戏体验和利用社交媒体为我们提供的功能。我们首先添加了一个简单的评分系统，然后允许用户通过Twitter分享他们的分数。然后我们设置了Facebook
    SDK，使得我们可以登录并玩游戏，同时检索有关我们用户的信息，我们可以使用这些信息来定制他们的游戏体验。
- en: Now that we have people playing our game, we want them to keep coming back and
    playing over time. One of the easiest ways to do this is through the use of notifications,
    which we will look at in the next chapter.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们的游戏有人玩，我们就希望他们能够持续回来并长时间地玩。实现这一目标的最简单方法之一是通过使用通知，我们将在下一章中探讨这一点。
- en: 'Part 3: Game Feel/Polish'
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3部分：游戏感觉/润色
- en: In this part of the book, we will focus on adding polish to your game to enhance
    the overall player experience. By the end of this part, you will have all the
    tools and knowledge necessary to take your game to the next level by polishing
    it and the player experience.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的这一部分，我们将专注于为您的游戏添加润色，以增强整体玩家体验。到本部分结束时，您将拥有所有必要的工具和知识，通过润色游戏和玩家体验，将您的游戏提升到下一个水平。
- en: 'This part has the following chapters:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 9*](B18868_09.xhtml#_idTextAnchor290), *Keeping Players Involved
    with Notifications*'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第9章*](B18868_09.xhtml#_idTextAnchor290), *通过通知保持玩家参与度*'
- en: '[*Chapter 10*](B18868_10.xhtml#_idTextAnchor313), *Using Unity Analytics*'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第10章*](B18868_10.xhtml#_idTextAnchor313), *使用Unity分析工具*'
- en: '[*Chapter 11*](B18868_11.xhtml#_idTextAnchor339), *Remote Config*'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第11章*](B18868_11.xhtml#_idTextAnchor339), *远程配置*'
- en: '[*Chapter 12*](B18868_12.xhtml#_idTextAnchor347), *Improving Game Feel*'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第12章*](B18868_12.xhtml#_idTextAnchor347), *提升游戏感觉*'
- en: '[*Chapter 13*](B18868_13.xhtml#_idTextAnchor369), *Building a Release Copy
    of Our Game*'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第13章*](B18868_13.xhtml#_idTextAnchor369), *构建我们的游戏发布版本*'
- en: '[*Chapter 14*](B18868_14.xhtml#_idTextAnchor410), *Submitting Games to App
    Stores*'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第14章*](B18868_14.xhtml#_idTextAnchor410), *将游戏提交到应用商店*'
- en: '[*Chapter 15*](B18868_15.xhtml#_idTextAnchor453), *Augmented Reality*'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第15章*](B18868_15.xhtml#_idTextAnchor453), *增强现实*'
