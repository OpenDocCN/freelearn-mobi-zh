- en: Chapter 4. Using Storyboards
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章 使用故事板
- en: Starting with the release of Xcode 4.2, developers and designers now have the
    ability to layout the workflow of their applications, using the new **Storyboards**
    feature that has been incorporated as part of Interface Builder. Storyboards can
    be used to build an in-game menu system for moving between different screens,
    or they can be used to build business applications that use the navigation and
    tab bars controls to transition between each of the different views, as they manage
    the view controllers created by the developer.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 从Xcode 4.2的发布开始，开发者和设计师现在可以使用新加入Interface Builder的**故事板**功能来布局他们应用程序的工作流程。故事板可以用来构建游戏菜单系统，在屏幕之间切换，或者它们可以用来构建使用导航栏和标签栏控件在不同视图之间切换的商业应用程序，因为它们管理由开发者创建的视图控制器。
- en: Previously, instead of creating numerous interface files, you can now start
    dragging and editing all your views in one place, with the ability to specify
    transitions between screens and the associated actions that trigger them. Storyboards
    also include a design pattern that can be implemented to send and receive data
    between controllers. In the previous instances, you would have had to implement
    protocols, delegates, notifications, or some other custom way to maintain state
    between screens.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，您不是创建多个界面文件，现在您可以在一个地方开始拖放并编辑所有视图，同时能够指定屏幕之间的过渡以及触发它们的关联操作。故事板还包括一种可以实施的设计模式，用于在控制器之间发送和接收数据。在之前的实例中，您将不得不实现协议、代理、通知或某种其他自定义方式来维护屏幕之间的状态。
- en: In this chapter, we will be gaining an understanding into what Storyboards actually
    are, as well as familiarizing ourselves with the new workflow that has been implemented
    within Interface Builder. We will look at the steps involved to create storyboards
    and how to apply different transition techniques between each view, to create
    a Twitter application to post messages and photos.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入了解故事板实际上是什么，以及熟悉在Interface Builder中实施的新工作流程。我们将查看创建故事板的步骤以及如何在不同视图之间应用不同的过渡技术，以创建一个用于发布消息和照片的Twitter应用程序。
- en: 'In this chapter, we will:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Gain an understanding into what Storyboards are
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解故事板是什么
- en: Learn how to use Storyboards to create and configure transitions to scenes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用故事板创建和配置场景之间的过渡
- en: Create a simple storyboard application with Twitter integration
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个简单的具有Twitter集成的故事板应用程序
- en: Learn about the process involved to create storyboard files
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习创建故事板文件的过程
- en: Post a tweet message and add a photo
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布推文消息并添加照片
- en: Programmatically transition to a new storyboard view-controller
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以编程方式过渡到新的故事板视图控制器
- en: We have some fantastic stuff to cover in this chapter, so let's get started.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖一些精彩的内容，让我们开始吧。
- en: Understanding Storyboards
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解故事板
- en: In the past, when you needed to create a new view for your application, you
    would have had to create a new xib file for each of the views. This became very
    cumbersome when dealing with complex applications, as they contained a number
    of different views and became hard transitioning from one view controller to the
    next.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，当您需要为您的应用程序创建一个新视图时，您将不得不为每个视图创建一个新的xib文件。当处理复杂的应用程序时，这变得非常繁琐，因为它们包含了许多不同的视图，并且从视图控制器切换到下一个视图变得困难。
- en: Apple decided to improve this in a big way, by substantially making improvements
    in this area regarding the user interface design process, by introducing a technique
    called **Storyboarding**.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果决定大幅改进这一领域，通过在用户界面设计过程中引入一种称为**故事板**的技术，在用户界面设计方面进行了实质性的改进。
- en: Storyboarding is a feature that is built into Xcode 4.2, and later that allows
    both the various screens that comprise an iOS application and the navigation path
    through those screens to be visually assembled. When you use Storyboards, they
    enable you to design the application workflow of your screens, similarly to the
    way a movie director prepares storyboard sketches for every scene of a shoot.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 故事板是Xcode 4.2及其后续版本中内置的功能，它允许将iOS应用程序的各个屏幕以及通过这些屏幕的导航路径进行视觉组装。当您使用故事板时，它们使您能够设计屏幕的应用程序工作流程，类似于电影导演为每个拍摄场景准备故事板草图的方式。
- en: You can then use Interface Builder to layout the parts for each of the screens
    graphically, as well as the transitions between them, and the controls used to
    trigger the transitions.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用Interface Builder图形化地布局每个屏幕的各个部分，以及它们之间的过渡，以及触发过渡的控制。
- en: The following screenshot shows a simple storyboard application containing two
    view controllers with linkage between them.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了一个简单的Storyboard应用程序，其中包含两个视图控制器，它们之间存在链接。
- en: '![Understanding Storyboards](img/2267EXP_04_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![理解Storyboard](img/2267EXP_04_01.jpg)'
- en: Transitions
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过渡
- en: Xcode provides the option to change the visual appearance of the transition
    that takes place from one scene to another within a storyboard, referred to as
    a **segue**. Using transitions enables you to apply a variety of different styles
    to each of your view controllers that are to be rendered and displayed to the
    view, and are represented by arrows between each of the view controllers. By default,
    a **Cover Vertical** transition is performed whereby the new scene slides vertically
    upwards from the bottom of the view to cover the currently displayed scene.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode提供了更改在Storyboard中从一个场景到另一个场景发生的过渡视觉外观的选项，这被称为**segue**。使用过渡可以使你为每个要渲染和显示到视图中的视图控制器应用各种不同的样式，这些样式由视图控制器之间的箭头表示。默认情况下，执行**垂直覆盖**过渡，其中新场景从视图底部垂直向上滑动以覆盖当前显示的场景。
- en: You may have seen such transitions in applications, such as the Photos app that
    comes part of the iPhone and iPad, where you can apply a transition and start
    a slideshow.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经在应用程序中看到过这样的过渡，例如iPhone和iPad中包含的Photos应用程序，在那里你可以应用过渡并开始幻灯片放映。
- en: You also have the ability to define custom transitions that enable you to provide
    a custom segue class method to handle the transition. This can be achieved by
    selecting **Custom** for the style of the segue, and fill in the name of the custom
    segue class to use. To use any of the standard segue classes, these are located
    within the `UIKit` class.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以定义自定义过渡，这使你能够提供一个自定义segue类方法来处理过渡。这可以通过将segue的样式选择为**自定义**，并填写要使用的自定义segue类名称来实现。要使用任何标准segue类，这些类位于`UIKit`类中。
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For information relating to the standard segue classes, refer to the `UIKit`
    framework reference, located at the Apple developer connection website, using
    the following link: [http://developer.apple.com/library/ios/#documentation/uikit/reference/UIKit_Framework/_index.html](http://developer.apple.com/library/ios/#documentation/uikit/reference/UIKit_Framework/_index.html).'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有关标准segue类的信息，请参阅位于Apple开发者连接网站上的`UIKit`框架参考，使用以下链接：[http://developer.apple.com/library/ios/#documentation/uikit/reference/UIKit_Framework/_index.html](http://developer.apple.com/library/ios/#documentation/uikit/reference/UIKit_Framework/_index.html)。
- en: 'In order to configure a segue to specify a kind of transition to use between
    the different scenes, click on the segue and open the **Attributes** inspector,
    as shown in the following screenshot:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了配置segue以指定在场景之间使用的一种过渡，请单击segue并打开**属性**检查器，如图下所示：
- en: '![Transitions](img/2267EXP_04_02.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![过渡](img/2267EXP_04_02.jpg)'
- en: 'You have the ability to choose from the various transition types that are only
    applicable to the **Modal** style; these are explained within the following table:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择仅适用于**模态**样式的各种过渡类型；这些类型在以下表中解释：
- en: '| **Transition name** | **Description** |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| **过渡名称** | **描述** |'
- en: '| --- | --- |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **Default** | When this transition is selected, it uses the **Cover Vertical**
    transition style. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| **默认** | 当选择此过渡时，它使用**垂直覆盖**过渡样式。 |'
- en: '| **Cover Vertical** | When the view controller is presented, its view slides
    up from the bottom of the screen. When the view is dismissed, it slides back down.
    |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| **垂直覆盖** | 当呈现视图控制器时，其视图从屏幕底部滑动向上。当视图消失时，它滑动回原位。 |'
- en: '| **Flip Horizontal** | When the view controller is presented, the current
    view initiates a horizontal 3D flip from right-to-left, resulting in the revealing
    of the new view as if it were on the back of the previous view. When this view
    is dismissed, the flip occurs from left-to-right, returning to the original view.
    |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| **水平翻转** | 当呈现视图控制器时，当前视图从右到左开始一个水平3D翻转，从而像在先前视图的背面一样揭示新视图。当此视图消失时，翻转从左到右发生，返回到原始视图。
    |'
- en: '| **Cross Dissolve** | When the view controller is presented, the current view
    fades-out while the new view fades-in at the same time. When the view is dismissed,
    a similar type of cross-fade is used to return to the original view. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| **交叉溶解** | 当视图控制器被展示时，当前视图淡出，同时新视图淡入。当视图被关闭时，使用类似类型的交叉溶解来返回到原始视图。|'
- en: '| **Partial Curl** | When the view controller is presented, one corner of the
    current view curls up to reveal the modal view underneath. When the view is dismissed,
    the curled up page uncurls itself back on top of the modal view. A modal view
    presented using this transition is itself prevented from presenting any additional
    modal views.This transition style is supported only if the parent view controller
    is presenting a full-screen view and you use the `UIModalPresentationFullScreen`
    modal presentation style. Attempting to use a different form factor for the parent
    view or a different presentation style triggers an exception. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| **部分卷曲** | 当视图控制器被展示时，当前视图的一个角落卷曲起来以显示下面的模态视图。当视图被关闭时，卷曲的页面会自动展开回到模态视图的顶部。使用这种转换方式展示的模态视图本身被阻止展示任何额外的模态视图。这种转换样式仅在父视图控制器展示全屏视图且你使用`UIModalPresentationFullScreen`模态展示样式时才受支持。尝试使用不同的父视图形式因子或不同的展示样式将触发异常。|'
- en: Note
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information on the above transition types, refer to the `UIViewController`
    framework reference located on the Apple developer website, using the following
    link: [http://developer.apple.com/library/ios/#documentation/uikit/reference/UIViewController_Class/Reference/Reference.html](http://developer.apple.com/library/ios/#documentation/uikit/reference/UIViewController_Class/Reference/Reference.html).'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 关于上述转换类型的更多信息，请参考位于苹果开发者网站上的`UIViewController`框架参考，使用以下链接：[http://developer.apple.com/library/ios/#documentation/uikit/reference/UIViewController_Class/Reference/Reference.html](http://developer.apple.com/library/ios/#documentation/uikit/reference/UIViewController_Class/Reference/Reference.html)。
- en: Now that we have an understanding of how to go about creating transitions for
    a view, our next step is to take a look at how we can create storyboards and how
    to configure scenes for our storyboard application.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何为视图创建转换，我们的下一步是看看我们如何创建Storyboard以及如何为Storyboard应用程序配置场景。
- en: How to go about creating Storyboard files
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何创建Storyboard文件
- en: In the next section, we will take a look at how to go about creating a storyboard
    application. When you create a new storyboard file, this will give you a view
    controller object that represents your scene, which is the initial view controller.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨如何创建Storyboard应用程序。当你创建一个新的Storyboard文件时，这将为你提供一个代表场景的视图控制器对象，这是初始视图控制器。
- en: Each view controller represents the contents of a single screen. When creating
    applications for the iPad, a screen can be composed of the contents of more than
    one scene and you link each object that is contained within a view controller,
    to another view controller that implements another scene.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 每个视图控制器代表单个屏幕的内容。当为iPad创建应用程序时，一个屏幕可以由多个场景的内容组成，并且你需要将包含在视图控制器中的每个对象链接到实现另一个场景的另一个视图控制器。
- en: '![How to go about creating Storyboard files](img/2267EXP_04_03.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![如何创建Storyboard文件](img/2267EXP_04_03.jpg)'
- en: As you can see from this screenshot, the initial view controller contains a
    green outline. You link the various view controllers using Interface Builder by
    *Control* + dragging between controls and view controllers. You have the ability
    to add controls and views to each view controller's view, just as you would add
    objects to a window or a view in an XIB file.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如从这张截图中所见，初始视图控制器包含一个绿色轮廓。你可以通过Interface Builder使用*Control* + 拖动在控件和视图控制器之间来链接各种视图控制器。你可以在每个视图控制器的视图中添加控件和视图，就像你向窗口或XIB文件中的视图添加对象一样。
- en: Creating a simple Storyboard (Twitter) application
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个简单的Storyboard（Twitter）应用程序
- en: Before we can proceed, we first need to create our `TwitterExample` project.
    To refresh your memory, you can refer to the section that we covered in [Chapter
    2](ch02.html "Chapter 2. Using iCloud and the Storage APIs"),
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，我们首先需要创建我们的`TwitterExample`项目。为了唤起你的记忆，你可以参考我们在[第二章](ch02.html "第二章。使用iCloud和存储API")中介绍的部分。
- en: Launch Xcode from the `/Developer/Applications` folder.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`/Developer/Applications`文件夹中启动Xcode。
- en: Choose **Create a new Xcode project**, or **File | New Project**.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**创建一个新的Xcode项目**，或**文件 | 新项目**。
- en: Select the **Single View Application** template from the **Project template**
    dialog box.![Creating a simple Storyboard (Twitter) application](img/2267EXP_04_04.jpg)
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目模板**对话框中选择**单视图应用程序**模板。![创建简单的Storyboard（Twitter）应用程序](img/2267EXP_04_04.jpg)
- en: Then, click on the **Next** button to proceed to the next step in the Wizard.
    This will allow you to enter in the **Product Name** and your **Company Identifier**.![Creating
    a simple Storyboard (Twitter) application](img/2267EXP_04_05.jpg)
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击**下一步**按钮继续向导的下一步。这将允许您输入**产品名称**和您的**公司标识符**。![创建简单的Storyboard（Twitter）应用程序](img/2267EXP_04_05.jpg)
- en: Enter in `TwitterExample` for the **Product Name**, and ensure that you have
    selected **iPhone** from the **Device Family** drop-down box, and that you have
    checked the **Use Storyboard** option.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**产品名称**中输入`TwitterExample`，并确保您已从**设备家族**下拉框中选择**iPhone**，并且已勾选**使用故事板**选项。
- en: Next, click on the **Next** button to proceed to the final step in the wizard.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击**下一步**按钮继续向导的最终步骤。
- en: Choose the folder location where you would like to save your project.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您希望保存项目的文件夹位置。
- en: Then, click on the **Create** button to save your project at the location specified.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击**创建**按钮以在指定位置保存您的项目。
- en: Once your project has been created, you will be presented with the Xcode development
    interface, along with the project files that the template created for you within
    the **Project Navigator** window. Our next step is to start building the user
    interface for our Twitter application.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的项目创建完成，您将看到Xcode开发界面，以及模板在**项目导航器**窗口中为您创建的项目文件。我们的下一步是开始构建我们的Twitter应用程序的用户界面。
- en: Creating scenes
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建场景
- en: The process of creating scenes involves adding a new view controller to the
    storyboard, which is referred to as a **scene**. Each view controller is responsible
    for managing a single scene. A better way to describe scenes would be to think
    of the collection of scenes as a movie, where each frame that is being displayed
    is the actual scene that connects onto the next part.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 创建场景的过程涉及将一个新的视图控制器添加到故事板中，这被称为**场景**。每个视图控制器负责管理单个场景。更好地描述场景的方式是将场景集合想象成一部电影，其中正在显示的每一帧都是实际连接到下一部分的场景。
- en: When adding scenes to your storyboard file, you can add controls and views to
    the view controller's view, just as you would do for an XIB file, and have the
    ability to configure outlets and actions between your view controllers and its
    views.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当向您的故事板文件添加场景时，您可以在视图控制器视图中添加控件和视图，就像您为XIB文件做的那样，并且能够在视图控制器及其视图之间配置出口和动作。
- en: 'To add a new scene into your storyboard file, follow these simple steps:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要将新场景添加到您的故事板文件中，请按照以下简单步骤操作：
- en: From the **Project Navigator**, select the file named `MainStoryboard.storyboard`.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**项目导航器**中，选择名为`MainStoryboard.storyboard`的文件。
- en: From the **Object** library, select and drag a new view-controller on to the
    storyboard canvas. This is shown in the following screenshot:![Creating scenes](img/2267EXP_04_06.jpg)
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**对象库**中选择并拖动一个新的视图控制器到故事板画布上。这在上面的屏幕截图中显示：![创建场景](img/2267EXP_04_06.jpg)
- en: Next, drag a `UIButton` control on to the view that we will use in a later section
    to call the calling view. In the button's attributes, change the text to read
    `Go Back`.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将一个`UIButton`控件拖动到我们将在后续部分使用的视图中。在按钮的属性中，将文本更改为读取`返回`。
- en: Finally, on the first view controller, drag a `UIButton` control on to the view,
    just above the **Tweet Message** button. In the button's attributes, change the
    text to read `About App`. This will be used to call the new view that we added
    in the previous step.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在第一个视图控制器上，将一个`UIButton`控件拖动到视图上，位于**推文消息**按钮上方。在按钮的属性中，将文本更改为读取`关于应用`。这将用于调用我们在上一步中添加的新视图。
- en: Once you have added the controls to each of the views, your final interface
    should look something like what is shown in the following screenshot.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦您已将控件添加到每个视图中，您的最终界面应类似于以下屏幕截图所示。
- en: '![Creating scenes](img/2267EXP_04_07.jpg)'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![创建场景](img/2267EXP_04_07.jpg)'
- en: Next, create the action event for the **About App** button; hold down the control
    key on your keyboard and drag the mouse from the **About App** button to the `ViewController.h`
    interface file.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为**关于应用**按钮创建动作事件；在键盘上按住控制键，并将鼠标从**关于应用**按钮拖动到`ViewController.h`接口文件。
- en: 'Select **Action** from the **Connection** type drop-down, then enter in `showAbout`
    for the name of the `IBAction` method to create, and then click on the **Connect**
    button to accept the changes, as shown in the following screenshot:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**连接类型**下拉菜单中选择**动作（Action**），然后输入`showAbout`作为要创建的`IBAction`方法的名称，然后点击**连接（Connect**）按钮以接受更改，如图所示：
- en: '![Creating scenes](img/2267EXP_04_08.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![创建场景](img/2267EXP_04_08.jpg)'
- en: Now that we have created our scene, buttons, and actions, our next step is to
    configure the scene, which is shown in the next section.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了场景、按钮和动作，我们的下一步是配置场景，这将在下一节中展示。
- en: Configuring scenes
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置场景
- en: When you want to transition from one view controller to another, you can hold
    down the *Control* key and click a button, table view cell, or any other object
    from one view controller, and then drag it to the new view controller for a different
    scene. This technique of dragging between view controllers creates what is known
    as a **Segue**.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想从一个视图控制器切换到另一个视图控制器时，你可以按住**控制**键并点击一个按钮、表格视图单元格或任何其他来自一个视图控制器的对象，然后将其拖动到新的视图控制器以创建不同的场景。这种在视图控制器之间拖动的技术被称为**转场（Segue**）。
- en: A segue is a configurable object that supports all of the same types of transitions
    made available to you within the `UIKit` class reference, such as modal transitions
    and navigation transitions.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 转场是一个可配置的对象，支持`UIKit`类参考中提供的所有类型的转换，例如模态转换和导航转换。
- en: 'You also have the ability to define custom transitions that replace one view
    controller with another. To create a segue and configure a scene, follow these
    simple steps:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以定义自定义转换，用另一个视图控制器替换一个视图控制器。要创建转场并配置场景，请按照以下简单步骤操作：
- en: Select the **About App** button with your mouse, and hold down the *Control*
    key while dragging it to the view controller for the scene that you would like
    to load when the button is selected.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用鼠标选择**关于应用**按钮，并按住**控制**键将其拖动到当按钮被选中时要加载的场景视图控制器。
- en: Release the mouse button, and then choose the **Modal** option from the pop-up
    menu selection.![Configuring scenes](img/2267EXP_04_09.jpg)
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 释放鼠标按钮，然后从弹出菜单选择**模态（Modal**）选项。[配置场景](img/2267EXP_04_09.jpg)
- en: You will notice that a gray arrow connects both of your view controllers. When
    the **About App** button is pressed, it will display the page containing the **Go
    Back** button.
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你会注意到一个灰色箭头连接了两个视图控制器。当按下**关于应用**按钮时，它将显示包含**返回**按钮的页面。
- en: Next, we need to do the same for our second view, so that when the **Go Back**
    button is pressed, it will return back to our first view.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要为我们的第二个视图做同样的事情，以便当按下**返回**按钮时，它将返回到我们的第一个视图。
- en: Repeat *steps 1* to *2*, but substitute the **Go Back** button for the **About
    App** button.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复**步骤 1**到**步骤 2**，但将**返回**按钮替换为**关于应用**按钮。
- en: 'Explanations of the Storyboard Segues that come part of Xcode 4 are included
    in the following table:'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Xcode 4中包含的Storyboard转场解释如下表所示：
- en: '| **Segue name** | **Description** |'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **转场名称** | **描述** |'
- en: '| --- | --- |'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **Modal** | A modal view controller is not a specific subclass of the `UIViewController`
    class, as any type of view controller can be presented modally by your application.
    However, like the tab bar and navigation view controllers, you can present your
    view controllers modally when you want to convey a specific meaning about the
    relationship between the previous view hierarchy and the newly presented view
    hierarchy. |'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **模态（Modal**） | 模态视图控制器不是`UIViewController`类的特定子类，因为任何类型的视图控制器都可以通过你的应用程序以模态方式呈现。然而，就像标签栏和导航视图控制器一样，当你想要传达前一个视图层次结构和新呈现的视图层次结构之间的特定关系时，你可以以模态方式呈现你的视图控制器。
    |'
- en: '| **Push** | **Push** segues allow you to push a new view controller onto the
    navigation stack, just as if you were stacking plates. The view at the top of
    the stack being the one that gets rendered. |'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **推送（Push**） | **推送（Push**）转场允许你将新的视图控制器推送到导航堆栈中，就像堆叠盘子一样。堆栈顶部的视图是渲染的视图。
    |'
- en: '| **Custom** | These allow you to customize and call a view controller from
    code using the `prepareForSegue` method, and are what you use to present the content
    of your application.The job of the view controller is to manage the presentation
    of some content and coordinate the update and the synchronization of that content
    with the application''s underlying data objects.In the case of a custom view controller,
    this involves creating a view to present the content and implementing the infrastructure
    needed to synchronize the contents of that view with your application''s data
    structures. |'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **自定义** | 这些允许你使用`prepareForSegue`方法从代码中自定义和调用视图控制器，并且是你用来展示应用程序内容的方式。视图控制器的工作是管理某些内容的展示，并协调内容的更新以及与应用程序底层数据对象的同步。在自定义视图控制器的情况下，这涉及到创建一个视图来展示内容，并实现将视图内容与你的应用程序数据结构同步所需的基础设施。
    |'
- en: Once you have done this, your view controllers should look like something shown
    in the next screenshot. You can apply a number of transitions to each of your
    view controllers, so that they can perform animation when they get displayed to
    the view.
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成这些操作后，你的视图控制器应该看起来像下一张截图所示的那样。你可以为每个视图控制器应用多种过渡效果，以便它们在显示到视图时执行动画。
- en: '![Configuring scenes](img/2267EXP_04_10.jpg)'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![配置场景](img/2267EXP_04_10.jpg)'
- en: To learn how to apply transitions to your view controller, please refer to the
    section on *Transitions* in this chapter.
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解如何将过渡效果应用到你的视图控制器上，请参阅本章中关于*过渡*的部分。
- en: Now that you have applied each of the segues to both view controller, our final
    step is to compile, build, and run our application.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你已经将每个segues应用到视图控制器上，我们的最后一步是编译、构建并运行我们的应用程序。
- en: From the **Product** menu, select **Run**. Alternatively, press the **Command
    | R** keys to compile, build, and run the application.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建Twitter应用程序
- en: The following screenshot shows our application running within the iOS simulator,
    with each of their associated screens displayed.
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了我们的应用程序在iOS模拟器中运行，以及它们各自关联的屏幕显示。
- en: '![Configuring scenes](img/2267EXP_04_11.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: 接下来，将一个`UITextView`拖到你的视图中，并调整大小以适应合理数量的文本输入，并确保删除此控件中显示的默认文本。
- en: So there you have it. In this section, we have learned how to create and add
    new scenes into our main storyboard, as well as the process on how we are able
    to link-up and configure each scene when a button has been pressed.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这就是全部内容。在本节中，我们学习了如何创建和添加新场景到我们的主故事板中，以及当按钮被按下时如何链接和配置每个场景的过程。
- en: There is also another way in which we can transition to scenes within our storyboard
    through a programmatic approach. We will be taking a closer look into this, when
    we embark on the section *Presenting storyboard view-controllers programmatically*,
    in this chapter.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '![配置场景](img/2267EXP_04_11.jpg)'
- en: Building a Twitter application
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们还可以通过编程方法过渡到故事板中的场景。当我们开始本章的*以编程方式展示故事板视图控制器*部分时，我们将更详细地探讨这一点。
- en: Twitter has provided us with some very simple API's to follow, making it a snap
    to interact with them. In this section, we will look at how we can use these to
    post a tweet message and add an image.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Twitter为我们提供了一些非常简单的API来关注，这使得与它们交互变得轻而易举。在本节中，我们将探讨如何使用这些API发布推文消息并添加图片。
- en: Open the `MainStoryboard.storyboard` file that is located inside the `TwitterExample`
    folder from the **Project Navigator**.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**产品**菜单中选择**运行**。或者，按**Command | R**键编译、构建并运行应用程序。
- en: Next, drag a `UITextView` onto your view, and resize it to accommodate a reasonable
    amount of text to be entered, and make sure to delete the default text that is
    displayed within this control.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**产品**菜单中选择**运行**。或者，按**Command | R**键编译、构建并运行应用程序。
- en: Lastly, we need to drag a `UIButton` on to the view to handle the posting of
    the message. In the button's attributes, change the text to read `Tweet Message`.
    Your final interface should look like this:![Building a Twitter application](img/2267EXP_04_12.jpg)
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要将一个`UIButton`拖到视图中以处理消息的发布。在按钮的属性中，将文本更改为“推文消息”。你的最终界面应该看起来像这样：![构建Twitter应用程序](img/2267EXP_04_12.jpg)
- en: 'Next, open the `ViewController.h` interface file, and create the following
    highlighted entries as shown in the following code snippet:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开`ViewController.h`接口文件，并创建以下突出显示的条目，如下面的代码片段所示：
- en: '[PRE0]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next, we need to connect up our **Tweet Message** button control, and create
    the `IBAction` event that will be used to post our tweet message. We will need
    to ensure that the type of event to use is the `TouchUpInside` method of the `UIButton`.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要连接我们的**Tweet Message**按钮控件，并创建用于发布推文的`IBAction`事件。我们需要确保使用的事件类型是`UIButton`的`TouchUpInside`方法。
- en: To create an action event, hold down the *Control* key on your keyboard, and
    drag the mouse to the `ViewController.h` interface file, as shown in the following
    screenshot.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建一个动作事件，请按住键盘上的**Control**键，然后将鼠标拖动到以下截图所示的`ViewController.h`接口文件。
- en: Enter in `postTweet` for the name of the `IBAction` method to create, and then
    click on the `Connect` button to accept the changes.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将要创建的`IBAction`方法的名称输入为`postTweet`，然后点击`Connect`按钮以接受更改。
- en: '![Building a Twitter application](img/2267EXP_04_13.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![构建Twitter应用程序](img/2267EXP_04_13.jpg)'
- en: Now that we have connected up our `IBAction` event to our method call that will
    be used to post the tweet, our next step is to add the Twitter framework to our
    project before we can take a look at how to implement the code to do this.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将`IBAction`事件连接到用于发布推文的调用方法，我们的下一步是在查看如何实现此代码之前，将Twitter框架添加到我们的项目中。
- en: 'To add the Twitter framework to your project, select the **Project Navigator
    Group**, and then follow these simple steps:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要将Twitter框架添加到你的项目中，请选择**Project Navigator Group**，然后按照以下简单步骤操作：
- en: Select your project from within the **Project Navigator**.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Project Navigator**中选择你的项目。
- en: Then, select your project target from under the **TARGETS** group.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，从**TARGETS**组下选择你的项目目标。
- en: Select the **Build Phases** tab.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Build Phases**标签。
- en: Expand the **Link binary with Libraries** disclosure triangle.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开链接二进制与库的展开三角形。
- en: Finally, use the **+** to add the library that you want. You can also search
    if you can't find the Twitter framework within the list.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用**+**来添加你想要的库。如果你在列表中找不到Twitter框架，也可以进行搜索。
- en: 'If you are still confused as to how to go about adding the frameworks, follow
    this screenshot, which highlights the areas that you need to select:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仍然不清楚如何添加框架，请参考以下截图，它突出显示了你需要选择的区域：
- en: '![Building a Twitter application](img/2267EXP_04_14.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![构建Twitter应用程序](img/2267EXP_04_14.jpg)'
- en: Now that we have added our `Twitter.framework` into our project, we can take
    a look at how to implement the code to post a tweet message using this framework.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将`Twitter.framework`添加到我们的项目中，我们可以看看如何实现使用此框架发布推文消息的代码。
- en: Composing a Tweet message
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写推文消息
- en: Whenever you want to compose a Twitter message for submission, you will need
    to use the `TWTweetComposeViewController` class instance. This class handles everything
    required, and presents us with a tweet composition sheet, so that we can begin
    to type in our tweet message. This class also enables you to set the initial twitter
    text information to use, as well as how to go about adding images and URLs.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你想要提交Twitter消息时，你都需要使用`TWTweetComposeViewController`类实例。这个类处理所需的一切，并为我们提供一个推文编辑表单，以便我们可以开始输入推文消息。此类还允许你设置要使用的初始Twitter文本信息，以及如何添加图片和URL。
- en: Note
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information on the `TWTweetComposeViewController` class, you can refer
    to the Twitter framework reference documentation located at the following location:
    `http://developer.apple.com/library/ios/#documentation/Twitter/Reference/TWTweetSheetViewControllerClassRef/Reference/Reference.html`.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`TWTweetComposeViewController`类的更多信息，你可以参考位于以下位置的Twitter框架参考文档：`http://developer.apple.com/library/ios/#documentation/Twitter/Reference/TWTweetSheetViewControllerClassRef/Reference/Reference.html`。
- en: In the following code snippet, we look at how we can compose a Twitter message
    using the `TWTweetComposeViewController` class.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码片段中，我们看看如何使用`TWTweetComposeViewController`类来编写推文。
- en: Before we can use the features of Twitter in our application, we need to include
    the Twitter framework header files.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够在应用程序中使用Twitter的功能之前，我们需要包含Twitter框架的头文件。
- en: 'From the **Project Navigator**, open the `ViewController.m` implementation
    file, and enter in the following `import` statements as shown:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Project Navigator**中打开`ViewController.m`实现文件，并输入以下`import`语句，如下所示：
- en: '[PRE1]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, we need to implement the code to display the Twitter tweet sheet to which
    we can compose, and then post our message. Open the `ViewController.m` implementation
    file, and enter in the following code snippet:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要实现代码以显示Twitter推文表单，我们可以在这里编辑，然后发布我们的消息。打开位于`TwitterExample`文件夹中的`ViewController.m`实现文件，并输入以下代码片段：
- en: '[PRE2]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this code snippet, we declared a variable `myTwitter` to be an instance of
    our `TWTweetComposeViewController` class. We then assigned some text to appear
    on our composition sheet, by setting the `setInitialText` method, and then displaying
    this to the view. We then set up a handler, using the `completionHandler` method,
    to notify us when the user has done composing the tweet, and we displayed the
    relevant alert based on the outcome that is returned by the method.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个代码片段中，我们声明了一个变量`myTwitter`，并将其赋值为我们的`TWTweetComposeViewController`类的一个实例。然后我们通过设置`setInitialText`方法，给我们的编辑表单设置了一些文本，并将其显示到视图中。然后我们设置了一个处理程序，使用`completionHandler`方法来通知我们用户已经完成了推文的编辑，并根据方法返回的结果显示了相关的警告。
- en: 'Optionally, you can use the `canSendTweet` class method to check if Twitter
    has been set up and is reachable, before presenting the view to the user. This
    is shown in the following code snippet:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，你可以在向用户展示视图之前，使用`canSendTweet`类方法检查Twitter是否已设置并可达，如下面的代码片段所示：
- en: '[PRE3]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: What we have accomplished in this above code snippet is using the `canSendTweet`
    class method of the `TWTweetComposeViewController` class. This method then checks
    to see if the user has correctly installed and set up Twitter properly. If this
    has not been done, this statement will fail, and a value of `NO` (or `FALSE)`
    will be returned to the `isSuccess` variable.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码片段中，我们使用了`TWTweetComposeViewController`类的`canSendTweet`类方法。这个方法会检查用户是否正确安装并正确设置了Twitter。如果没有这样做，这个语句将失败，并将返回一个`NO`（或`FALSE`）值给`isSuccess`变量。
- en: Adding photos to a Tweet
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向推文添加照片
- en: Whenever you want to add images to a twitter message for submission, you will
    need to use the `TWTweetComposeViewController` class instance. This class handles
    everything required, and presents us with a tweet composition sheet, so that we
    can add images and URLs.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你想要向推文消息中添加图片以提交时，你需要使用`TWTweetComposeViewController`类实例。这个类处理所有必需的操作，并展示给我们一个推文编辑表单，以便我们可以添加图片和URL。
- en: In the next code snippet, we look at how simple it is to add images to an existing
    Twitter message using the `TWTweetComposeViewController` class.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个代码片段中，我们看看如何使用`TWTweetComposeViewController`类轻松地向现有的Twitter消息添加图片。
- en: 'Open the `ViewController.m` implementation file located within the `TwitterExample`
    folder within the **Project Navigator**, locate the `postTweet` method, and enter
    in the following piece of highlighted code, shown as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 打开位于**项目导航器**中的`TwitterExample`文件夹内的`ViewController.m`实现文件，找到`postTweet`方法，并输入以下高亮显示的代码，如下所示：
- en: '[PRE4]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this code snippet, we declare a variable `myTwitter` to an instance of our
    `TWTweetComposeViewController` class. We then use the `addImageinstance` method
    to add an image to the tweet message, and then present the view along with the
    image to the user.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个代码片段中，我们声明了一个变量`myTwitter`，并将其赋值为我们的`TWTweetComposeViewController`类的一个实例。然后我们使用`addImageinstance`方法向推文消息中添加一张图片，并将带有图片的视图展示给用户。
- en: Now that we have added in the final piece of code to our `TwitterExample` application,
    we need to first configure our Twitter account information prior to building and
    running the application. Follow these steps to set up and configure Twitter.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将最后一部分代码添加到`TwitterExample`应用中，我们需要在构建和运行应用之前首先配置我们的Twitter账户信息。按照以下步骤设置和配置Twitter。
- en: Open the **Settings** application from the iOS home screen.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从iOS主屏幕打开**设置**应用。
- en: Select the **Twitter** option from the **Settings** menu.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**设置**菜单中选择**Twitter**选项。
- en: Enter in your **User Name** and **Password** credential information, and click
    on the **Sign In** button. If you do not have a Twitter account, you can create
    one from this screen by selecting the **Create New Account** option.![Adding photos
    to a Tweet](img/2267EXP_04_15.jpg)
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入你的**用户名**和**密码**凭证信息，然后点击**登录**按钮。如果你没有Twitter账户，你可以通过选择**创建新账户**选项在此屏幕上创建一个。
- en: Our final step is to compile, build, and run our `TwitterExample` application,
    by either clicking on the **Play** button within the Xcode IDE or *Command* +
    *R*.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的最后一步是编译、构建并运行我们的`TwitterExample`应用，可以通过在Xcode IDE中点击**播放**按钮，或者使用*Command*
    + *R*快捷键。
- en: The following screenshot shows our TwitterExample application when it is run
    on the iOS simulator.
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了当TwitterExample应用程序在iOS模拟器上运行时的样子。
- en: '![Adding photos to a Tweet](img/2267EXP_04_16.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![向推文添加照片](img/2267EXP_04_16.jpg)'
- en: When you start composing your tweet message, you can choose to have your current
    geographical location added to your message. This feature basically uses the Google
    Maps API to map the tweets and gives Twitter users the option of tweeting their
    location on [http://twitter.com/](http://twitter.com/), and then allowing others
    to view the precise location on Google Maps.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始编写推文消息时，你可以选择将你的当前地理位置添加到消息中。此功能基本上使用Google Maps API来映射推文，并给Twitter用户提供在[http://twitter.com/](http://twitter.com/)上推文位置并允许他人查看Google
    Maps上精确位置的选择。
- en: Attachments can also be added to the composed message, and this can be any valid
    image (PNG, JPG, and so on). Clicking on the **Send** button will submit the message
    to your Twitter account, and you will receive a message stating that the Tweet
    has been successfully posted.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以将附件添加到已编写的消息中，这可以是任何有效的图像（PNG、JPG等）。点击**发送**按钮将消息提交到你的Twitter账户，你将收到一条消息，说明推文已成功发布。
- en: The following screenshot displays the posted Twitter entry that was submitted
    by the previous screenshot, as it would look like when displayed on [http://twitter.com/:](http://twitter.com/)
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了由前一个截图提交的推文条目，它将显示在[http://twitter.com/:](http://twitter.com/)上的样子。
- en: '![Adding photos to a Tweet](img/2267EXP_04_17.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![向推文添加照片](img/2267EXP_04_17.jpg)'
- en: In this section, we looked at how we can integrate Twitter-like functionality
    into our applications. There are many ways in which applications can be more social,
    by including Twitter. For example, you could make the application auto-tweet,
    when you unlock a special item within your game, or when you finish the game,
    or just want to upload your high-score achievements.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了如何将类似Twitter的功能集成到我们的应用程序中。通过包含Twitter，应用程序可以以多种方式变得更加社交。例如，你可以在解锁游戏中的特殊物品、完成游戏或只想上传你的高分成就时自动推文。
- en: This lets all of their friends know they are playing your game, which in turn,
    gets you more exposure. Another example could be a business application, which
    could allow the user to tweet the number of successful projects that they have
    completed. With Twitter getting so much attention lately, you would be crazy to
    not include some sort of Twitter integration into your own iOS applications.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这让他们的所有朋友都知道他们正在玩你的游戏，这反过来又让你获得更多的曝光。另一个例子可能是一个商业应用程序，它可能允许用户推文他们已完成的项目数量。鉴于Twitter最近受到如此多的关注，不将某种Twitter集成到自己的iOS应用程序中简直是疯了。
- en: Preparing to transition to a new view-controller
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备过渡到新的视图控制器
- en: Whenever a user triggers a segue in the current scene, the storyboard runtime
    calls the `prepareForSegue:sender:` method for the current view controller. This
    method gives the current view controller an opportunity to pass any needed data
    to the view controller that is about to be displayed.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在当前场景中触发segue时，故事板运行时会调用当前视图控制器的`prepareForSegue:sender:`方法。此方法给当前视图控制器一个机会，将任何所需的数据传递给即将显示的视图控制器。
- en: 'In order to programmatically perform a segue, follow these simple steps:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 为了以编程方式执行segue，请按照以下简单步骤操作：
- en: Ensure that you have drawn a segue between two the `UIViewControllers`.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你已经在两个`UIViewControllers`之间绘制了一个segue。
- en: Next, click on the segue and fill in the identifier field by using a unique
    name, as shown in the following screenshot:![Preparing to transition to a new
    view-controller](img/2267EXP_04_18.jpg)
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击segue并填写标识符字段，使用一个唯一的名称，如以下截图所示：![准备过渡到新的视图控制器](img/2267EXP_04_18.jpg)
- en: 'Now, run the `prepareForSegue:segue:sender:` method call from the `IBActionlevel`
    of the `UIButton`, as shown in the following code snippet:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，从`UIButton`的`IBAction`级别运行`prepareForSegue:segue:sender:`方法调用，如下面的代码片段所示：
- en: '[PRE5]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this code snippet, we perform a segue call associated with a control using
    its identifier. We first check to ensure that we are processing the correct segue,
    before displaying an alert when the view is displayed.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码片段中，我们使用控制器的标识符执行与控制器关联的segue调用。在显示警报之前，我们首先检查确保我们正在处理正确的segue。
- en: Handling it this way allows us to customize segues, and applies any transition
    to the scene that is located within your storyboard as long as the identifier
    is unique.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式处理可以让我们自定义转场，并且只要标识符是唯一的，就会将任何过渡应用到你的故事板中位于场景内的场景。
- en: Note
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For information on how to implement the methods of the `UIViewController` class,
    you can refer to the `UIViewController` class reference at the following location:
    `http://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIViewController_Class/Reference/Reference.html#//apple_ref/occ/cl/UIViewController`.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何实现`UIViewController`类的方法的信息，你可以参考以下位置的`UIViewController`类参考：`http://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIViewController_Class/Reference/Reference.html#//apple_ref/occ/cl/UIViewController`。
- en: Presenting storyboard view-controllers programmatically
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以编程方式呈现故事板视图控制器
- en: Although the storyboard runtime usually handles transitions between view controllers,
    you can also trigger segues programmatically, directly from within your code.
    You may choose to do this when setting up the segue from within Interface Builder,
    or you may want to use the accelerometer events to trigger a transition and display
    a graphic animation.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然故事板运行时通常处理视图控制器之间的过渡，但你也可以通过编程方式直接在代码中触发转场。你可能选择在Interface Builder中设置转场时这样做，或者你可能想使用加速度计事件来触发过渡并显示图形动画。
- en: If you take a look at the following example code snippet, you will be able to
    see that we first load the view controller programmatically using the `instantiateViewControllerWithIdentifier`
    method of the `UIStoryboard`. Finally, we then present the view controller by
    pushing it onto the navigation stack.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看以下示例代码片段，你将能够看到我们首先使用`UIStoryboard`的`instantiateViewControllerWithIdentifier`方法编程地加载视图控制器。最后，我们通过将其推入导航堆栈来呈现视图控制器。
- en: '[PRE6]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this example, we will look at how we can add an additional view controller
    subclass to our storyboard, and programmatically determine what view we are in
    by using the `performSegueWithIdentifier` method call. So, lets get started.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将探讨如何将额外的视图控制器子类添加到我们的故事板中，并使用`performSegueWithIdentifier`方法调用编程地确定我们处于哪个视图。那么，让我们开始吧。
- en: 'We need to create a new `UIViewController` subclass file that will be used
    for our second view controller. To create a `UIViewController` subclass file,
    follow these simple steps:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个新的`UIViewController`子类文件，该文件将用于我们的第二个视图控制器。要创建`UIViewController`子类文件，请按照以下简单步骤操作：
- en: From the **Xcode IDE** menu, select **File | New | New File**.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Xcode IDE**菜单中选择**文件 | 新建 | 新文件**。
- en: Next, select the **UIViewController subclass** template to use from the list
    of available templates, as shown in the following screenshot.![Presenting storyboard
    view-controllers programmatically](img/2267EXP_04_19.jpg)
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从可用模板列表中选择要使用的**UIViewController子类**模板，如图所示。![以编程方式呈现故事板视图控制器](img/2267EXP_04_19.jpg)
- en: Enter in `secondViewController` as the name of the class to create, as shown
    in the following screenshot:![Presenting storyboard view-controllers programmatically](img/2267EXP_04_20.jpg)
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下屏幕截图中输入`secondViewController`作为要创建的类的名称：![以编程方式呈现故事板视图控制器](img/2267EXP_04_20.jpg)
- en: Ensure that you choose `UIViewController` as the name of the subclass to create.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你选择`UIViewController`作为要创建的子类名称。
- en: Ensure that you have unchecked both the **Targeted for iPad** and **With XIB
    for user interface** checkboxes.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你没有勾选**针对iPad**和**带有XIB用户界面**两个复选框。
- en: Specify the location to save the class file, and then click on the **Create**
    button.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定保存类文件的路径，然后点击**创建**按钮。
- en: Once you have done that, you will be returned back to the Xcode IDE. Both of
    your interface and implementation files for the `secondViewController` will appear
    within the **Project Navigator** window.
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完成后，你将返回到Xcode IDE。你的`secondViewController`的接口和实现文件将出现在**项目导航器**窗口中。
- en: Open the **ViewController.h** interface file, located under the `TwitterExample`
    folder, from within the **Project Navigator**.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**项目导航器**中，从**TwitterExample**文件夹下打开**ViewController.h**接口文件。
- en: 'Modify the file and include the highlighted code sections, as specified in
    the following code snippet:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改文件并包含以下代码片段中指定的突出显示的代码部分：
- en: '[PRE7]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this code snippet, we are setting up our delegate objects in order to pass
    information to and from the view controller.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此代码片段中，我们正在设置我们的代理对象，以便在视图控制器之间传递信息。
- en: Open the `ViewController.m` implementation file located under the `TwitterExample`
    folder, from within the **Project Navigator**.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Project Navigator**中，从`TwitterExample`文件夹中打开位于`ViewController.m`实现文件。
- en: 'Modify the file, and include the highlighted code sections, as specified in
    the following code snippet:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改文件，并包含以下代码片段中指定的突出显示的代码部分：
- en: '[PRE8]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: What we are doing in this code snippet, is determining the current view of our
    view controller and ensuring that we are in our `firstViewController`. We do this
    by checking the `segue` property, and obtaining the identifier value that we declared
    previously. If we are in the correct view, a pop-up alert is then displayed to
    the current view.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码片段中，我们所做的是确定我们视图控制器的当前视图，并确保我们处于`firstViewController`中。我们通过检查`segue`属性，并获取我们之前声明的标识符值来实现这一点。如果我们处于正确的视图，则会在当前视图中显示一个弹出警告。
- en: Open the `secondViewController.h` interface file located under the `TwitterExample`
    folder, from within the **Project Navigator**.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Project Navigator**中，从`TwitterExample`文件夹中打开位于`secondViewController.h`接口文件。
- en: 'Modify the file and include the highlighted code sections as specified in the
    following code snippet:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改文件，并包含以下代码片段中指定的突出显示的代码部分：
- en: '[PRE9]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: What we are doing in this code snippet, is setting up our delegate objects in
    order to pass information to and from the view controller.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此代码片段中，我们所做的是设置我们的代理对象，以便在视图控制器之间传递信息。
- en: Open the `secondViewController.m` implementation file located under the `TwitterExample`
    folder, from within the **Project Navigator**.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Project Navigator**中，从`TwitterExample`文件夹中打开位于`secondViewController.m`实现文件。
- en: 'Modify the file, and include the highlighted code sections as specified in
    the following code snippet:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改文件，并包含以下代码片段中指定的突出显示的代码部分：
- en: '[PRE10]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here we are determining the current view of our view controller, and ensuring
    that we are in our `secondViewController`. We do this by checking the segue property
    and obtain the identifier value that we declared previously. If we are in the
    correct view, a pop-up alert is then displayed to the current view.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们正在确定我们视图控制器的当前视图，并确保我们处于`secondViewController`中。我们通过检查`segue`属性并获取我们之前声明的标识符值来实现这一点。如果我们处于正确的视图，则会在当前视图中显示一个弹出警告。
- en: Select the second view controller we just created, then under the identity inspector
    section, click on the **Custom Class** title bar, and change the **Class** to
    read `secondViewController` as shown in the following screenshot:![Presenting
    storyboard view-controllers programmatically](img/2267EXP_04_21.jpg)
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们刚刚创建的第二个视图控制器，然后在身份检查器部分中，点击**Custom Class**标题栏，并将**Class**更改为`secondViewController`，如图所示：![以程序方式呈现故事板视图控制器](img/2267EXP_04_21.jpg)
- en: Under the attributes **Inspector** section, under the **Storyboard Segue** section,
    enter in `secondViewController` as the identifier to use when moving between views,
    as shown in the following screenshot:![Presenting storyboard view-controllers
    programmatically](img/2267EXP_04_22.jpg)
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Inspector**属性部分下，在**Storyboard Segue**部分中，输入`secondViewController`作为在视图之间移动时要使用的标识符，如图所示：![以程序方式呈现故事板视图控制器](img/2267EXP_04_22.jpg)
- en: Next, we need to apply the same Storyboard Segues for our first view controller.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要为我们的第一个视图控制器应用相同的Storyboard Segues。
- en: Select the attributes **Inspector** section, and then under the **Storyboard
    Segue** section, enter in `firstViewController` as the unique identifier to use.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Inspector**属性部分，然后在**Storyboard Segue**部分中，输入`firstViewController`作为要使用的唯一标识符。
- en: Repeat the same steps as we did for the `secondViewController`.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要重复与`secondViewController`相同的步骤。
- en: Our final step is to compile, build, and run our `TwitterExample` application,
    by either clicking on the **Play** button within the Xcode IDE or *Command* +
    *R*.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的最后一步是通过在Xcode IDE中点击**Play**按钮或按*Command* + *R*来编译、构建和运行我们的`TwitterExample`应用程序。
- en: The following screenshot shows our `TwitterExample` application running within
    the iOS simulator, showing the programmatic transitions between each of the view
    controllers that are defined within our storyboard.
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了在iOS模拟器中运行的`TwitterExample`应用程序，显示了在故事板中定义的每个视图控制器之间的程序性转换。
- en: '![Presenting storyboard view-controllers programmatically](img/2267EXP_04_23.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![以程序方式呈现故事板视图控制器](img/2267EXP_04_23.jpg)'
- en: When you click on the **About App** button, it transitions over to the second
    view controller and then displays the message based on the `prepareForSegue:(UIStoryboardSegue*)segue`
    method call, determining the identifier of the current view controller that is
    being displayed within the view.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击**关于应用**按钮时，它将过渡到第二个视图控制器，然后根据`prepareForSegue:(UIStoryboardSegue*)segue`方法调用显示消息，确定当前在视图中显示的当前视图控制器的标识符。
- en: When you click on the **Go Back** button, this will transfer control over to
    the first view controller, a call is made to the `prepareForSegue` method, to
    determine the current identifier of the current view.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击**返回**按钮时，这将控制权转移到第一个视图控制器，会调用`prepareForSegue`方法，以确定当前视图的当前标识符。
- en: Summary
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned the fundamentals of what storyboards actually are,
    how they work, how to go about adding scenes and configure these within the storyboard,
    and how to apply the different types of transition methods available.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了故事板实际上是什么，它们是如何工作的，如何添加场景并在故事板中配置这些场景，以及如何应用不同的过渡方法。
- en: We learnt about the Twitter framework and how we can use the collection of Twitter
    APIs available to successfully post a message and image to a twitter account.
    To end the chapter, we looked at how we can use the various methods to transition
    between each view controller within the main storyboard, programmatically, and
    using the storyboard transitions.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了Twitter框架以及我们如何使用可用的Twitter API集合成功发布消息和图片到Twitter账户。为了结束本章，我们探讨了如何使用各种方法在主故事板中的每个视图控制器之间进行过渡，无论是通过编程还是使用故事板过渡。
- en: In the next chapter, we will learn about the **AirPlay** and **Core Image**
    frameworks, and look at how we use and implement these into our applications.
    We will learn about the different image filter effects and how to present these
    within our application to output this to an external device, such as Apple TV.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习**AirPlay**和**Core Image**框架，并探讨我们如何使用和实现这些框架到我们的应用中。我们将了解不同的图像过滤效果，以及如何在我们的应用中展示这些效果并将输出发送到外部设备，例如Apple
    TV。
