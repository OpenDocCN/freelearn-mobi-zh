- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: Getting Data into Table Views
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将数据放入表格视图中
- en: In the previous chapter, you learned about the **Model-View-Controller** (**MVC**)
    design pattern and table views. You also reviewed the table view in the Journal
    List screen. At this point, the Journal List screen displays cells that do not
    contain any data. As shown in the app tour in *Chapter 10*, *Setting Up the User
    Interface*, it should display a list of journal entries.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了**模型-视图-控制器**（**MVC**）设计模式和表格视图。你还回顾了期刊列表屏幕中的表格视图。此时，期刊列表屏幕显示的单元格不包含任何数据。如图10章“设置用户界面”中的应用游览所示，它应该显示期刊条目的列表。
- en: In this chapter, you’re going to implement the model objects for the Journal
    List screen to make it display a list of journal entries. You’ll start by learning
    about the model objects that you will use. Then, you’ll create a Swift class that
    can store journal entry instances. After that, you’ll create a static method that
    can return sample journal entry instances. This array will then be used as the
    data source for the table view on the Journal List screen.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将实现期刊列表屏幕的模型对象，使其显示期刊条目的列表。你将从了解你将使用的模型对象开始。然后，你将创建一个Swift类，可以存储期刊条目实例。之后，你将创建一个静态方法，可以返回样本期刊条目实例。然后，这个数组将用作期刊列表屏幕上表格视图的数据源。
- en: By the end of this chapter, you’ll have learned how to create model objects,
    how to create sample data, and how to configure view controllers to populate table
    views.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将学会如何创建模型对象，如何创建样本数据，以及如何配置视图控制器以填充表格视图。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Understanding model objects
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解模型对象
- en: Creating a class to represent a journal entry
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个表示期刊条目的类
- en: Creating sample data
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建样本数据
- en: Displaying data in a collection view
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在集合视图中显示数据
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You will continue working on the `JRNL` project that you modified in *Chapter
    13*, *Modifying App Screens*. The resource files and completed Xcode project for
    this chapter are in the `Chapter15` folder of the code bundle for this book, which
    can be downloaded here:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你将继续在*第13章“修改应用屏幕”*中修改的`JRNL`项目上工作。本章的资源文件和完成的Xcode项目位于本书代码包的`Chapter15`文件夹中，可以在此处下载：
- en: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition%0D)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition%0D)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，以查看代码的实际运行情况：
- en: '[https://youtu.be/TmQOr3Qy954](https://youtu.be/TmQOr3Qy954%0D)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://youtu.be/TmQOr3Qy954](https://youtu.be/TmQOr3Qy954%0D)'
- en: Let’s start by examining the model objects required to store journal entry data
    in the next section.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从下一节中需要存储期刊条目数据的模型对象开始分析。
- en: Understanding model objects
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解模型对象
- en: 'As you learned in *Chapter 14*, *Getting Started with MVC and Table Views*,
    a common design pattern for iOS apps is Model-View-Controller, or MVC. To recap,
    MVC divides an app into three different parts:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在第14章“开始使用MVC和表格视图”中所学，iOS应用的一个常见设计模式是模型-视图-控制器（Model-View-Controller），或简称MVC。为了回顾，MVC将应用分为三个不同的部分：
- en: '**Model**: This handles data storage, representation, and data processing tasks.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型**：这处理数据存储、表示和数据处理任务。'
- en: '**View**: This is anything that is on the screen that the user can interact
    with.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**：这是用户可以与之交互的屏幕上的任何内容。'
- en: '**Controller**: This manages the flow of information between the model and
    the view.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器**：这管理模型和视图之间信息流的流动。'
- en: 'Let’s revisit the design of the Journal List screen that you saw during the
    app tour, which looks like this:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下你在应用游览中看到的期刊列表屏幕的设计，它看起来像这样：
- en: '![](img/B31371_15_01.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_15_01.png)'
- en: 'Figure 15.1: Simulator showing the Journal List screen from the app tour'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.1：模拟器显示应用游览中的期刊列表屏幕
- en: 'Build and run your app, and the Journal List screen will look like this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行你的应用，期刊列表屏幕将看起来像这样：
- en: '![](img/B31371_15_02.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_15_02.png)'
- en: 'Figure 15.2: Simulator showing the Journal List screen from your app'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.2：模拟器显示你的应用中的期刊列表屏幕
- en: As you can see, all the cells currently display placeholders. Based on the MVC
    design pattern, you have partly completed the implementation of the views required
    (the table view) and the controller (the `JournalListViewController` class). You
    will need to create a custom `UITableViewCell` instance to manage what your table
    view cell will display, and you need to add model objects that will provide the
    journal entry data.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，所有单元格当前都显示占位符。根据MVC设计模式，您已部分完成所需视图（表格视图）和控制器（`JournalListViewController`类）的实现。您需要创建一个自定义的`UITableViewCell`实例来管理表格视图单元格将显示的内容，并且您需要添加模型对象，这些对象将提供日记条目数据。
- en: 'Each journal entry will store the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 每个日记条目将存储以下内容：
- en: The date the entry was made
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条目创建的日期
- en: A rating value
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个评分值
- en: Title text
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标题文本
- en: Body text
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正文文本
- en: An optional photo
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个可选的照片
- en: An optional geographical location
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个可选的地理位置
- en: In *Chapter 14*, *Getting Started with MVC and Table Views*, you used an array
    of `String` arrays to represent journal entries. However, a `String` array can
    only store strings, and you must be able to store data types other than `String`.
    To resolve this, you will create a class named `JournalEntry` to store all the
    data required by a journal entry. Next, you will create a static method that returns
    sample data stored in `JournalEntry` instances. After that, you will create a
    custom `UITableView` class to manage the data displayed by the table view cells.
    Finally, you will modify the `JournalListViewController` class so that it can
    provide data for the table view to display.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第14章*，*使用MVC和表格视图入门*中，您使用了一个`String`数组的数组来表示日记条目。然而，`String`数组只能存储字符串，并且您必须能够存储除`String`之外的数据类型。为了解决这个问题，您将创建一个名为`JournalEntry`的类来存储日记条目所需的所有数据。接下来，您将创建一个静态方法，该方法返回存储在`JournalEntry`实例中的示例数据。之后，您将创建一个自定义的`UITableView`类来管理表格视图单元格显示的数据。最后，您将修改`JournalListViewController`类，使其能够为表格视图提供显示数据。
- en: Creating a class to represent a journal entry
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个表示日记条目的类
- en: 'To create a model object that can represent a journal entry in your app, you
    will add a new file to your project, `JournalEntry.swift`, and declare a `JournalEntry`
    class that has the required properties for a journal entry. Before you do so,
    you’ll configure your project to use Swift 6 and change the main project folder
    to a group. Follow these steps:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个可以在您的应用中表示日记条目的模型对象，您需要在项目中添加一个新文件，`JournalEntry.swift`，并声明一个具有日记条目所需属性的`JournalEntry`类。在这样做之前，您需要配置项目以使用Swift
    6并将主项目文件夹更改为组。请按照以下步骤操作：
- en: 'In the Project navigator, click the **JRNL** icon. Click the **JRNL** target
    and click **Build Settings**. Scroll down to **Swift Compiler – Language** and
    set **Swift Language Version** to **Swift 6**:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中，单击**JRNL**图标。单击**JRNL**目标并单击**构建设置**。向下滚动到**Swift编译器 - 语言**并将**Swift语言版本**设置为**Swift
    6**：
- en: '![](img/B31371_15_03.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_15_03.png)'
- en: 'Figure 15.3: Editor area showing Build Settings with Swift 6 set'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.3：编辑区域显示已设置Swift 6的构建设置
- en: 'Right-click on the blue **JRNL** project folder under the **JRNL** icon and
    choose **Convert to Group**:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**JRNL**图标下的蓝色**JRNL**项目文件夹上右键单击并选择**转换为组**：
- en: '![](img/B31371_15_04.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_15_04.png)'
- en: 'Figure 15.4: Pop-up menu with Convert to Group selected'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.4：已选择“转换为组”的弹出菜单
- en: The folder color will change from blue to dark gray. Making the folder a group
    will allow you to rearrange the order of the files in it.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 文件夹颜色将从蓝色变为深灰色。将文件夹转换为组将允许您重新排列其中的文件顺序。
- en: 'To learn more about the differences between folders and groups in Xcode, visit:
    [https://developer.apple.com/documentation/xcode/managing-files-and-folders-in-your-xcode-project](https://developer.apple.com/documentation/xcode/managing-files-and-folders-in-your-xcode-project).'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于Xcode中文件夹和组之间差异的信息，请访问：[https://developer.apple.com/documentation/xcode/managing-files-and-folders-in-your-xcode-project](https://developer.apple.com/documentation/xcode/managing-files-and-folders-in-your-xcode-project)。
- en: 'Reorder the files in the group until they look like the screenshot below:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组中重新排序文件，直到它们看起来像下面的截图：
- en: '![](img/B31371_15_05.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_15_05.png)'
- en: 'Figure 15.5: Project navigator showing reordered files'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.5：项目导航器显示重新排序的文件
- en: 'Right-click on the **JournalListViewController** file in the Project navigator
    and select **New Group from Selection**:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中右键单击**JournalListViewController**文件，然后选择**从选择新建组**：
- en: '![](img/B31371_15_06.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_15_06.png)'
- en: 'Figure 15.6: Pop-up menu with New Group from Selection selected'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.6：已选择“从选择新建组”的弹出菜单
- en: This will create a new group containing the `JournalListViewController` file.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个包含`JournalListViewController`文件的新组。
- en: 'Replace the placeholder text for the group name with `Journal List Screen`
    and press *Return*:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将组名的占位文本替换为`Journal List Screen`并按*回车*：
- en: '![](img/B31371_15_07.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_15_07.png)'
- en: 'Figure 15.7: Project navigator showing the Journal List Screen group'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.7：项目导航器显示日记列表屏幕组
- en: 'You will now create groups for the model and view objects used in the Journal
    List screen. Right-click the **Journal List Screen** group and choose **New Group**:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将为用于日记列表屏幕的模型和视图对象创建组。右键单击**日记列表屏幕**组并选择**新建组**：
- en: '![](img/B31371_15_08.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_15_08.png)'
- en: 'Figure 15.8: Pop-up menu with New Group selected'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.8：弹出菜单，选中“新建组”
- en: 'Replace the placeholder text with `Model` and press *Return*:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将占位文本替换为`Model`并按*回车*：
- en: '![](img/B31371_15_09.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_15_09.png)'
- en: 'Figure 15.9: Project navigator showing the Model group'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.9：项目导航器显示模型组
- en: 'Create another folder by repeating *Step 3* and replacing the placeholder text
    with `View`. The Project navigator should look like the following screenshot:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过重复*步骤 3*并替换占位文本为`View`来创建另一个文件夹。项目导航器应该看起来像以下截图：
- en: '![](img/B31371_15_10.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_15_10.png)'
- en: 'Figure 15.10: Project navigator showing the View and Model groups'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.10：项目导航器显示视图和模型组
- en: 'You’ll now create a file that will contain the implementation of the `JournalEntry`
    class. Right-click the **Model** folder and choose **New File from Template...**:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在将创建一个包含`JournalEntry`类实现的文件。右键单击**模型**文件夹并选择**从模板新建文件...**：
- en: '![](img/B31371_15_11.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_15_11.png)'
- en: 'Figure 15.11: Pop-up menu with New File from Template… selected'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.11：弹出菜单，选中“从模板新建文件…”
- en: '**iOS** should already be selected. Choose **Swift File** and click **Next**:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS**应该已经选中。选择**Swift 文件**并点击**下一步**：'
- en: '![](img/B31371_15_12.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_15_12.png)'
- en: 'Figure 15.12: Choose a template for your new file: screen with Swift File selected'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.12：选择新文件的模板：选中 Swift 文件
- en: 'Name the file `JournalEntry` and then click **Create**. The file will appear
    in the Project navigator and its contents will appear in the **Editor** area:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件命名为`JournalEntry`然后点击**创建**。文件将出现在项目导航器中，其内容将出现在**编辑器**区域：
- en: '![](img/B31371_15_13.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_15_13.png)'
- en: 'Figure 15.13: Editor area showing the contents of the JournalEntry file'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.13：编辑区域显示 JournalEntry 文件的内容
- en: The only line in this file is an `import` statement.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件中只有一行是`import`语句。
- en: 'The `import` statement allows you to import other code libraries into your
    project, giving you the ability to use classes, properties, and methods from them.
    Foundation is one of Apple’s core frameworks, and you can learn more about it
    here: [https://developer.apple.com/documentation/foundation](https://developer.apple.com/documentation/foundation).'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`import`语句允许您将其他代码库导入到项目中，从而让您能够使用它们中的类、属性和方法。Foundation 是苹果的核心框架之一，您可以在这里了解更多信息：[https://developer.apple.com/documentation/foundation](https://developer.apple.com/documentation/foundation)。'
- en: 'Modify the `import` statement to import `UIKit`:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`import`语句以导入`UIKit`：
- en: '[PRE0]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`UIKit` provides the infrastructure required for iOS apps. You can read more
    about it here: [https://developer.apple.com/documentation/uikit](https://developer.apple.com/documentation/uikit).'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`UIKit`提供了 iOS 应用所需的基础设施。您可以在这里了解更多信息：[https://developer.apple.com/documentation/uikit](https://developer.apple.com/documentation/uikit)。'
- en: 'Add the following code after the `import` statement to declare a class named
    `JournalEntry`:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`import`语句后添加以下代码以声明一个名为`JournalEntry`的类：
- en: '[PRE1]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add the following code after the opening curly brace of the `JournalEntry`
    class to add the desired properties for this class:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`JournalEntry`类的开头花括号后添加以下代码以添加此类的所需属性：
- en: '[PRE2]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let’s break this down:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下：
- en: The `date` property is of type `Date` and will store the date the journal entry
    was made.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`date`属性的类型是`Date`，将存储日记条目创建的日期。'
- en: The `rating` property is of type `Int` and will store the number of stars for
    the journal entry.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rating`属性的类型是`Int`，将存储日记条目的星级数量。'
- en: The `title` property is of type `String` and will store the title text of the
    journal entry.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`title`属性的类型是`String`，将存储日记条目的标题文本。'
- en: The `body` property is of type `String` and will store the body text of the
    journal entry.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`body`属性的类型是`String`，将存储日记条目的正文文本。'
- en: The `photo` property is of type `UIImage?` and will store a photo. This is an
    optional property because not all journal entries require a photo.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`photo`属性的类型是`UIImage?`，将存储照片。这是一个可选属性，因为并非所有日记条目都需要照片。'
- en: The `lat` and `long` properties are of type `Double?` and will store the location
    where the journal entry was made. These are optional properties because not all
    journal entries require a location.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lat` 和 `long` 属性的类型为 `Double?`，并将存储日记条目创建的位置。这些是可选属性，因为并非所有日记条目都需要位置信息。'
- en: An error will appear because your class does not have an initializer.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 将出现错误，因为你的类没有初始化器。
- en: 'Add the following code to implement an initializer after the `longitude` property:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `longitude` 属性之后添加以下代码以实现初始化器：
- en: '[PRE3]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Classes are covered in *Chapter 7*, *Classes, Structures, and Enumerations*.
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类在 *第 7 章*，*类、结构和枚举* 中有所介绍。
- en: 'Let’s break this down:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下：
- en: '[PRE4]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The initializer for the `JournalEntry` class has arguments for an `Int` value,
    two `String` values, an optional `UIImage` value, and two optional `Double` values.
    The default value for all the optional values is `nil`. The question mark after
    the `init` keyword means that this is a **failable initializer**; it will not
    create a `JournalEntry` instance if certain conditions are not met.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`JournalEntry` 类的初始化器有 `Int` 类型的值、两个 `String` 类型的值、一个可选的 `UIImage` 类型的值和两个可选的
    `Double` 类型的值作为参数。所有可选值的默认值都是 `nil`。`init` 关键字后面的问号表示这是一个 **可失败初始化器**；如果某些条件不满足，它将不会创建
    `JournalEntry` 实例。'
- en: '[PRE5]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The initializer will fail to create a `JournalEntry` instance if any or all
    of the following conditions return `true`; `title` is empty, `body` is empty,
    `rating` is less than `0`, and `rating` is greater than `5`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果以下任一条件返回 `true`，初始化器将无法创建 `JournalEntry` 实例：`title` 为空，`body` 为空，`rating`
    小于 `0`，以及 `rating` 大于 `5`。
- en: '[PRE6]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The current date is assigned to the `date` property when the `JournalEntry`
    instance is created.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建 `JournalEntry` 实例时，将当前日期分配给 `date` 属性。
- en: '[PRE7]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This assigns the argument values to the corresponding properties of the `JournalEntry`
    instance. Note the use of `self` to differentiate properties from arguments having
    the same name.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把参数值赋给 `JournalEntry` 实例的相应属性。注意使用 `self` 来区分具有相同名称的属性和参数。
- en: 'The `MARK: -` statements make it easy to navigate through your code. Click
    the last part of the path that is visible under the toolbar, and you will see
    both **Properties** and **Initialization** sections displayed in a menu. This
    enables you to easily go to these sections:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`MARK: -` 语句使代码导航变得容易。点击工具栏下可见的路径的最后一部分，你将看到 **属性** 和 **初始化** 两个部分在菜单中显示。这使得你可以轻松地进入这些部分：'
- en: '![](img/B31371_15_14.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_15_14.png)'
- en: 'Figure 15.14: Menu showing the Properties and Initialization sections'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.14：显示属性和初始化部分的菜单
- en: At this point, you have a class, `JournalEntry`, that can store all the details
    of a single journal entry. In the next section, you’ll create a static method
    that returns sample `JournalEntry` instances.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你有一个名为 `JournalEntry` 的类，它可以存储单个日记条目的所有详细信息。在下一节中，你将创建一个返回示例 `JournalEntry`
    实例的静态方法。
- en: Creating sample data
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建示例数据
- en: As you saw in *Chapter 14*, *Getting Started with MVC and Table Views*, you
    can use an array as the data source for a table view. You will now create an extension
    containing a static method that will return an array containing three sample journal
    entries.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在 *第 14 章*，*MVC 和表格视图入门* 中所见，你可以使用数组作为表格视图的数据源。现在，你将创建一个包含静态方法的扩展，该方法将返回包含三个示例日记条目的数组。
- en: 'Click the `JournalEntry` file in the Project navigator, and type in the following
    after all other code in the file:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目导航器中点击 `JournalEntry` 文件，并在文件中所有其他代码之后输入以下内容：
- en: '[PRE8]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This extension contains a `createSampleJournalEntryData()` method that creates
    three `UIImage` instances using the symbols from Apple’s `SFSymbols` library,
    creates three `JournalEntry` instances, adds them to an array, and returns the
    array. The `static` keyword means that it is a method on the `JournalEntry` type
    instead of a `JournalEntry` instance method.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 此扩展包含一个 `createSampleJournalEntryData()` 方法，该方法使用来自 Apple 的 `SFSymbols` 库的符号创建三个
    `UIImage` 实例，创建三个 `JournalEntry` 实例，将它们添加到数组中，并返回该数组。`static` 关键字表示这是一个 `JournalEntry`
    类的方法，而不是 `JournalEntry` 实例方法。
- en: 'To learn more about type and instance methods, see this link: [https://docs.swift.org/swift-book/documentation/the-swift-programming-language/methods/](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/methods/)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于类型和实例方法的信息，请参阅此链接：[https://docs.swift.org/swift-book/documentation/the-swift-programming-language/methods/](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/methods/)
- en: You have now completed the implementation of the `JournalEntry` class. You have
    also added a static method that will generate three sample journal entries. In
    the next section, you’ll modify the `JournalListViewController` class to use the
    array returned by this method to populate the table view.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经完成了`JournalEntry`类的实现。你还添加了一个静态方法，该方法将生成三个示例日记条目。在下一节中，你将修改`JournalListViewController`类，以便使用此方法返回的数组来填充表格视图。
- en: Displaying data in a table view
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在表格视图中显示数据
- en: In *Chapter 14*, *Getting Started with MVC and Table Views*, you used a table
    view cell configuration to set the data to be displayed by the table view cells.
    You will not be able to do the same here because you are using a custom table
    view cell that you implemented in *Chapter 13*, *Modifying App Screens*.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第14章*，*开始使用MVC和表格视图*中，你使用了表格视图单元格配置来设置表格视图单元格要显示的数据。在这里你将无法做到这一点，因为你正在使用你在*第13章*，*修改应用屏幕*中实现的自定义表格视图单元格。
- en: 'So far in this chapter, you’ve implemented a static method that returns an
    array containing three `JournalEntry` instances. You will now modify the `JournalListViewController`
    class to use that array as the data source for the table view on the Journal List
    screen. To do so, you will do the following:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本章中，你已经实现了一个返回包含三个`JournalEntry`实例的数组的静态方法。现在，你将修改`JournalListViewController`类，使其使用该数组作为“日记列表”屏幕上表格视图的数据源。为此，你需要执行以下操作：
- en: Create a custom `UITableViewCell` instance and assign it as the identity for
    the `journalCell` table view cells.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个自定义`UITableViewCell`实例，并将其分配为`journalCell`表格视图单元格的标识。
- en: Modify the `JournalListViewController` class to get sample data from the `createSampleJourneyEntryData`
    static method and assign it to a `journalEntries` array.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改`JournalListViewController`类，从`createSampleJourneyEntryData`静态方法获取示例数据，并将其分配给`journalEntries`数组。
- en: Modify the data source methods in the `JournalListViewController` class to populate
    the table view cells using data from the `journalEntries` array.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改`JournalListViewController`类中的数据源方法，使用`journalEntries`数组中的数据来填充表格视图单元格。
- en: You’ll begin by creating a custom `UITableViewCell` instance in the next section.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在下一节中开始创建一个自定义`UITableViewCell`实例。
- en: Creating a custom UITableViewCell subclass
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建自定义`UITableViewCell`子类
- en: 'At present, the table view on the Journal List screen displays 10 table view
    cells that do not contain any data. You need a way to set the values for the image
    view and the labels in the table view cells, so you will create a new `UITableViewCell`
    subclass, `JournalEntryTableViewCell`, for this purpose. You will assign this
    class as the identity of the table view cells in the Journal List screen. Follow
    these steps:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，在“日记列表”屏幕上的表格视图显示了10个不包含任何数据的表格视图单元格。你需要一种方法来设置表格视图单元格中图像视图和标签的值，因此你将创建一个新的`UITableViewCell`子类`JournalEntryTableViewCell`来达到这个目的。你将把这个类作为“日记列表”屏幕上表格视图单元格的标识。按照以下步骤操作：
- en: In the Project navigator, right-click on the **View** folder and select **New
    File from Template...**.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中，右键单击**视图**文件夹，然后选择**从模板新建文件...**。
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class**, then click
    **Next**:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS**应该已经选中。选择**Cocoa Touch类**，然后点击**下一步**：'
- en: '![](img/B31371_15_15.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_15_15.png)'
- en: 'Figure 15.15: Choose a template for your new file screen'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.15：为你的新文件选择一个模板
- en: Using the **Cocoa Touch Class** template will allow you to set the superclass
    and automatically insert boilerplate code for the class that you will create.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**Cocoa Touch类**模板将允许你设置你将要创建的类的超类，并自动插入为你创建的类插入样板代码。
- en: 'The **Choose options for your new file** screen will appear:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**选择你的新文件选项**屏幕将出现：'
- en: '![](img/B31371_15_16.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_15_16.png)'
- en: 'Figure 15.16: Choose options for your new file screen'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.16：选择你的新文件选项屏幕
- en: 'Configure the class as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式配置类：
- en: '**Class**: `JournalListTableViewCell`'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类**：`JournalListTableViewCell`'
- en: '**Subclass**: `UITableViewCell`'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**子类**：`UITableViewCell`'
- en: '**Also create XIB**: Unchecked'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**也创建XIB**：未勾选'
- en: '**Language**: `Swift`'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语言**：`Swift`'
- en: Click **Next** when you’re done.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后点击**下一步**。
- en: 'Click **Create**, and a new file, `JournalListTableViewCell`, will be added
    to the **View** group in your project. Inside it you will see the following code:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**，一个新的文件`JournalListTableViewCell`将被添加到项目中的**视图**组。在里面你会看到以下代码：
- en: '[PRE9]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Remove all the code from the `JournalListTableViewCell` class declaration as
    shown below:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从如下所示的`JournalListTableViewCell`类声明中删除所有代码：
- en: '[PRE10]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To create three properties corresponding to the subviews of the `journalCell`
    table view cell, type in the following code between the curly braces of the `JournalEntry`
    class declaration:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建与`journalCell`表格视图单元格的子视图对应的三个属性，请在`JournalEntry`类声明的大括号之间输入以下代码：
- en: '[PRE11]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The implementation of the `JournalListTableViewCell` class is complete. You’ll
    now assign this class as the identity of the `journalCell` table view cell. Click
    the **Main** storyboard file in the Project navigator and click **journalCell**
    under the **Journal Scene** in the document outline:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`JournalListTableViewCell`类的实现已完成。现在您将此类分配为`journalCell`表格视图单元格的标识。在项目导航器中单击**Main**故事板文件，然后在文档大纲中单击**Journal
    Scene**下的**journalCell**：'
- en: '![](img/B31371_15_17.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_15_17.png)'
- en: 'Figure 15.17: Document outline showing journalCell selected'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.17：文档大纲显示已选择的journalCell
- en: 'Click the Identity inspector button. In the **Custom Class** section, set **Class**
    to `JournalListTableViewCell`. This sets a `JournalListTableViewCell` instance
    as the custom table view subclass for `journalCell`. Press *Return* when this
    is done:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击身份检查器按钮。在**自定义类**部分，将**类**设置为`JournalListTableViewCell`。这会将`JournalListTableViewCell`实例设置为`journalCell`的自定义表格视图子类。完成此操作后按*Return*键：
- en: '![](img/B31371_15_18.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_15_18.png)'
- en: 'Figure 15.18: Identity inspector showing Class settings for journalCell'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.18：身份检查器显示journalCell的类设置
- en: You’ve just declared and defined the `JournalListTableViewCell` class and assigned
    it as the custom table view cell subclass for the `journalCell` table view cell.
    In the next section, you’ll connect this class to the image view and the labels
    in the `journalCell` table view cell, so you can control what they display.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 您刚刚声明并定义了`JournalListTableViewCell`类，并将其分配为`journalCell`表格视图单元格的自定义表格视图子类。在下一节中，您将连接此类到`journalCell`表格视图单元格中的图像视图和标签，以便您可以控制它们显示的内容。
- en: Connecting the outlets in journalCell
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接journalCell中的出口
- en: 'To manage what is being displayed by the table view cells in the Journal List
    screen, you’ll use the Connections inspector to connect the image view and labels
    in the `journalCell` table view cell to outlets in the `JournalListTableViewCell`
    class. Follow these steps:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要管理在“期刊列表”屏幕中表格视图单元格显示的内容，您将使用连接检查器将`journalCell`表格视图单元格中的图像视图和标签连接到`JournalListTableViewCell`类的出口。按照以下步骤操作：
- en: With **journalCell** selected in the document outline, click the Connections
    inspector to display its outlets.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文档大纲中选择**journalCell**后，单击连接检查器以显示其出口。
- en: '![](img/B31371_15_19.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_15_19.png)'
- en: 'Figure 15.19: Connections inspector showing outlets for journalCell'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.19：连接检查器显示journalCell的出口
- en: 'Drag from the **photoImageView** outlet to the image view in the table view
    cell:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**photoImageView**出口拖动到表格视图单元格中的图像视图：
- en: '![](img/B31371_15_20.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_15_20.png)'
- en: 'Figure 15.20: Connections inspector showing photoImageView outlet'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.20：连接检查器显示photoImageView出口
- en: Drag from the **dateLabel** outlet to the top label in the table view cell.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**dateLabel**出口拖动到表格视图单元格的顶部标签。
- en: '![](img/B31371_15_21.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_15_21.png)'
- en: 'Figure 15.21: Connections inspector showing dateLabel outlet'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.21：连接检查器显示dateLabel出口
- en: 'Drag from the **titleLabel** outlet to the bottom label in the table view cell:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**titleLabel**出口拖动到底部标签在表格视图单元格：
- en: '![](img/B31371_15_22.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_15_22.png)'
- en: 'Figure 15.22: Connections inspector showing titleLabel outlet'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.22：连接检查器显示titleLabel出口
- en: Remember that if you make a mistake, you can click the **x** to break the connection
    and drag from the outlet to the UI element once more.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，如果您出错，可以单击**x**断开连接，然后再次从出口拖动到UI元素。
- en: The `journalCell` table view cell in the `Main` storyboard file has now been
    set up with a custom table view subclass, `JournalListTableViewCell`. The outlets
    for the table view cell’s image view and labels have also been created and assigned.
    Now you will be able to set the `photoImageView`, `dateLabel`, and `titleLabel`
    outlets to display a photo, a date, and a title in each cell when the app is run.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`Main`故事板文件中的`journalCell`表格视图单元格现在已设置了一个自定义表格视图子类，`JournalListTableViewCell`。表格视图单元格的图像视图和标签的出口也已创建并分配。现在您将能够设置`photoImageView`、`dateLabel`和`titleLabel`出口，以便在应用运行时在每个单元格中显示照片、日期和标题。'
- en: In the next section, you’ll update the table view data source methods in the
    `JournalListViewController` class to provide the number of table view cells to
    be displayed in the table view, as well as to provide the journal entry photo,
    date, and title for each cell.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将更新`JournalListViewController`类中的表格视图数据源方法，以提供表格视图中要显示的表格视图单元格数量，以及为每个单元格提供日记条目的照片、日期和标题。
- en: Updating the data source methods in JournalListViewController
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新`JournalListViewController`中的数据源方法
- en: 'The data source methods in the `JournalListViewController` class are currently
    set to display 10 table view cells, with each cell containing an image view displaying
    a smiley face and two labels. You’ll update them to get the number of cells to
    display, and the data to put in each cell, from the `SampleJournalEntryData` instance.
    Follow these steps:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`JournalListViewController`类中的数据源方法目前设置为显示10个表格视图单元格，每个单元格包含一个显示笑脸的图像视图和两个标签。你将更新它们以从`SampleJournalEntryData`实例中获取要显示的单元格数量以及每个单元格中的数据。按照以下步骤操作：'
- en: Click the **JournalListViewController** file in the Project navigator.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击**JournalListViewController**文件。
- en: 'Rearrange the code in the `JournalListViewController` class so that the `tableView`
    outlet and the `viewDidLoad()` method are located before the table view delegate
    methods:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`JournalListViewController`类中的代码重新排列，以便`tableView`出口和`viewDidLoad()`方法位于表格视图委托方法之前：
- en: '[PRE12]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add a `MARK` statement before the property declarations as follows:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性声明之前添加一个`MARK`语句，如下所示：
- en: '[PRE13]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add a `MARK` statement before the `viewDidLoad()` method as follows:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`viewDidLoad()`方法之前添加一个`MARK`语句，如下所示：
- en: '[PRE14]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add a `MARK` statement before the table view data source methods as follows:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在表格视图数据源方法之前添加一个`MARK`语句，如下所示：
- en: '[PRE15]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Add a `MARK` statement before `UnwindNewEntryCancel(segue:)` as follows:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`UnwindNewEntryCancel(segue:)`之前添加一个`MARK`语句，如下所示：
- en: '[PRE16]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Verify that the code in `JournalListViewController` appears as follows:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认`JournalListViewController`中的代码如下所示：
- en: '[PRE17]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Type the following code after the `tableView` outlet declaration to create
    a `journalEntries` property, which will contain an array of `JournalEntry` instances:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`tableView`出口声明之后输入以下代码以创建一个`journalEntries`属性，该属性将包含`JournalEntry`实例的数组：
- en: '[PRE18]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `private` keyword restricts the use of the `journalEntries` array to the
    `JournalListViewController` class.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`private`关键字限制了`journalEntries`数组在`JournalListViewController`类中的使用。'
- en: 'You can learn more about Access Control in Swift at this link: [https://docs.swift.org/swift-book/documentation/the-swift-programming-language/accesscontrol/](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/accesscontrol/).'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下链接中了解更多关于Swift中的访问控制的信息：[https://docs.swift.org/swift-book/documentation/the-swift-programming-language/accesscontrol/](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/accesscontrol/)。
- en: 'Modify the `viewDidLoad()` method as shown to populate the `journalEntries`
    array when the app is launched:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下示例修改`viewDidLoad()`方法，以便在应用启动时填充`journalEntries`数组：
- en: '[PRE19]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `createSampleJournalEntryData()` method will create three `JournalEntry`
    instances and assign them to the `journalEntries` array.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`createSampleJournalEntryData()`方法将创建三个`JournalEntry`实例并将它们分配给`journalEntries`数组。'
- en: 'Update `tableView(_:numberOfRowsInSection:)` as shown here. This will make
    the table view display a `journalCell` for each element in the `journalEntries`
    array:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下示例更新`tableView(_:numberOfRowsInSection:)`方法。这将使表格视图为`journalEntries`数组中的每个元素显示一个`journalCell`：
- en: '[PRE20]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Update `tableView(_:cellForRowAt:)` as shown to set the image view and labels
    for each cell using data from the corresponding element in the `journalEntries`
    array:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下示例更新`tableView(_:cellForRowAt:)`方法，使用来自`journalEntries`数组中相应元素的数据来设置每个单元格的图像视图和标签：
- en: '[PRE21]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Let’s break this down:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下：
- en: '[PRE22]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This statement specifies the cell that is dequeued is cast as an instance of
    `JournalListTableViewCell`.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 此语句指定从队列中检索的单元格被转换为`JournalListTableViewCell`实例。
- en: 'You can learn more about the `as!` operator at this link: [https://developer.apple.com/swift/blog/?id=23](https://developer.apple.com/swift/blog/?id=23).'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下链接中了解更多关于`as!`运算符的信息：[https://developer.apple.com/swift/blog/?id=23](https://developer.apple.com/swift/blog/?id=23)。
- en: '[PRE23]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This statement gets the `JournalEntry` instance that corresponds to the current
    cell in the table view. In other words, the first table view cell in the table
    view corresponds to the first `JournalEntry` instance in the `journalEntries`
    array, the second table view cell corresponds to the second `JournalEntry` instance,
    and so on.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 此语句获取与表格视图中当前单元格对应的`JournalEntry`实例。换句话说，表格视图中的第一个单元格对应于`journalEntries`数组中的第一个`JournalEntry`实例，第二个表格视图单元格对应于第二个`JournalEntry`实例，依此类推。
- en: '[PRE24]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This statement gets the photo from the `JournalEntry` instance and assigns it
    to the image of the `journalCell` instance’s `photoImageView` property.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 此语句从`JournalEntry`实例获取照片，并将其分配给`journalCell`实例的`photoImageView`属性。
- en: '[PRE25]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This statement gets the date from the `JournalEntry` instance, formats it into
    a string, and assigns it to the text for the `journalCell` instance’s `dateLabel`
    property.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 此语句从`JournalEntry`实例获取日期，将其格式化为字符串，并将其分配给`journalCell`实例的`dateLabel`属性。
- en: '[PRE26]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This statement gets the string stored in `title` from the `JournalEntry` instance
    and assigns it to the text for the `journalCell` instance’s `titleLabel` property.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 此语句从`JournalEntry`实例中获取存储在`title`中的字符串，并将其分配给`journalCell`实例的`titleLabel`属性的文本。
- en: '[PRE27]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This statement returns the populated `journalCell` instance for display in the
    table view.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 此语句返回用于在表格视图中显示的已填充的`journalCell`实例。
- en: 'Build and run the app. You’ll see the table view in the Journal List screen
    display text and images for each `JournalEntry` instance in the `journalEntries`
    array:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建并运行应用程序。您将在“期刊列表”屏幕的表格视图中看到为`journalEntries`数组中的每个`JournalEntry`实例显示的文本和图像：
- en: '![](img/B31371_15_23.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_15_23.png)'
- en: 'Figure 15.23: Simulator showing the Journal List screen'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.23：模拟器显示“期刊列表”屏幕
- en: Tapping on a row displays the Journal Entry Detail screen, but this screen does
    not display any data from the selected journal entry yet. You will address this
    in the next chapter.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 点击行会显示“期刊条目详情”屏幕，但此屏幕尚未显示所选期刊条目的任何数据。您将在下一章中解决这个问题。
- en: Congratulations! At this point, the Journal List screen displays text and images
    from the `journalEntries` array. But you can’t add or remove journal entries from
    the `journalEntries` array yet. You will learn how to do this in the next chapter.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！到目前为止，“期刊列表”屏幕已显示`journalEntries`数组中的文本和图像。但您还不能从`journalEntries`数组中添加或删除期刊条目。您将在下一章中学习如何做到这一点。
- en: Summary
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you implemented the model objects for the Journal List screen
    to make it display a list of journal entries. You learned about the model objects
    that you will use, created a Swift class that can be used to store journal entry
    instances, and created a static method returning sample journal entries. You then
    created a custom instance of `UITableViewCell` for your table view and used the
    method returning sample journal entries to populate an array. This array is then
    used as the data source for the table view in the Journal List screen.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您实现了用于“期刊列表”屏幕的模型对象，以便显示期刊条目列表。您了解了将要使用的模型对象，创建了一个可以用于存储期刊条目实例的Swift类，并创建了一个返回示例期刊条目的静态方法。然后，您为表格视图创建了一个自定义的`UITableViewCell`实例，并使用返回示例期刊条目的方法填充了一个数组。然后，此数组被用作“期刊列表”屏幕表格视图的数据源。
- en: You now know how to create model objects, how to create sample data, and how
    to configure view controllers to populate table views using that sample data.
    This will be useful should you wish to create your own apps that use table views.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在知道如何创建模型对象，如何创建示例数据，以及如何配置视图控制器以使用该示例数据填充表格视图。如果您希望创建使用表格视图的自己的应用程序，这将很有用。
- en: In the next chapter, you’ll learn how to add and remove journal entries from
    the Journal List screen. You’ll also learn how to pass data between view controllers.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何在“期刊列表”屏幕中添加和删除期刊条目。您还将学习如何在视图控制器之间传递数据。
- en: Join us on Discord!
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的Discord！
- en: Read this book alongside other users, experts, and the author himself. Ask questions,
    provide solutions to other readers, chat with the author via Ask Me Anything sessions,
    and much more. Scan the QR code or visit the link to join the community.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他用户、专家以及作者本人一起阅读此书。提出问题，为其他读者提供解决方案，通过“问我任何问题”会议与作者聊天，等等。扫描二维码或访问链接加入社区。
- en: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift%0D)'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift%0D)'
- en: '[![](img/QR_Code2370024260177612484.png)](https://packt.link/ios-Swift%0D)'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '![二维码](img/QR_Code2370024260177612484.png)(https://packt.link/ios-Swift%0D)'
