- en: Testing an Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试应用程序
- en: To make an application more usable and attractive, we always concentrate on
    the logos, contents, UI, experiences, and so on, besides we also take care of
    the coding style. We use the latest architectures and frameworks to reduce code
    lines and boiler codes in order to make a robust, simple, and fast application.
    However, many developers forget about the testing phase. Some might not realize
    there's an issue until a crash report generates during application use, because
    they didn't adequately test during the project. Generally, some developers skip testing,
    as they don't want to spend some extra time on writing test cases that are not
    directly used in the project. This is a common mistake and results in falling
    quality.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 要使应用程序更易于使用和吸引人，我们总是专注于标志、内容、UI、体验等方面，此外，我们还注意代码风格。我们使用最新的架构和框架来减少代码行数和样板代码，以创建一个健壮、简单和快速的应用程序。然而，许多开发者忘记了测试阶段。有些人可能直到应用程序使用过程中生成崩溃报告时才意识到有问题，因为他们没有在项目中进行充分的测试。通常，一些开发者会跳过测试，因为他们不想花费额外的时间编写在项目中没有直接使用的测试用例。这是一个常见的错误，会导致质量下降。
- en: Applications that randomly crash will always be disliked by the user, which
    is why the most successful Android apps always undergo thorough testing. In-depth
    testing can iron out an app's bugs, and optimize memory use, as well as allowing
    you to improve the condition of an app in regards to functional behavior, usabilities,
    and correctness.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 随机崩溃的应用程序总是不受用户欢迎，这就是为什么最成功的 Android 应用程序总是经过彻底的测试。深入测试可以消除应用程序的缺陷，优化内存使用，同时还能让你改善应用程序的功能行为、可用性和正确性。
- en: 'In this chapter, we will walk through testing and its use in both Spring and
    Android. This chapter covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍测试及其在 Spring 和 Android 中的应用。本章涵盖了以下主题：
- en: Software testing
  id: totrans-4
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件测试
- en: Fundamental of testing
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试基础
- en: Unit testing on Spring Boot
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Boot 的单元测试
- en: Creating a project
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建项目
- en: JUnit
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: JUnit
- en: UI testing on Android
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android 的 UI 测试
- en: Espresso
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Espresso
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will need to import some dependencies for both Spring and Android. Here
    are the dependencies.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要导入 Spring 和 Android 的依赖项。以下是依赖项。
- en: '**Spring**'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spring**'
- en: 'To implement the dependency for testing, you need to add the testing dependency
    in the `pom.xml` file:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现测试的依赖，你需要在 `pom.xml` 文件中添加测试依赖：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Android**'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Android**'
- en: 'To test an Android project, we need to implement the testing dependencies in
    the `gradle` file. To add the dependencies, we need to implement in the dependencies
    `{...}` of `build.gradle` (app module) file. Here is a snippet code of this `build.gradle`
    file:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试 Android 项目，我们需要在 `gradle` 文件中实现测试依赖。要添加依赖，我们需要在 `build.gradle` (app 模块)
    文件的 `dependencies {...}` 中实现。以下是这个 `build.gradle` 文件的代码片段：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The source code with an example for this chapter is available on GitHub at the
    following link: [https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter10](https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter10).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的示例源代码可在 GitHub 上找到，链接如下：[https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter10](https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter10)。
- en: Software testing
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件测试
- en: Software testing is one of the most essential parts of any project. Testing evaluates
    the stability, usability, quality assurance, functionality of components, and ensures
    that the software is ready to publish in the market. It also helps to find out
    the errors, missing requirements of a project, and so on. Testing uses techniques
    to execute some processes in an application or program with the intent to find
    bugs.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 软件测试是任何项目中最基本的部分之一。测试评估稳定性、可用性、质量保证、组件的功能，并确保软件可以发布到市场。它还有助于找出项目的错误、缺失的需求等。测试使用技术来执行应用程序或程序中的某些过程，目的是找出错误。
- en: In [Chapter 6](1f77948f-747b-42f1-b15b-fec3910d97d6.xhtml), *Accessing the Database*
    and [Chapter 9](7f273ca8-ce1d-4577-b24c-26d0957f1c74.xhtml), *Creating an Application*,
    we created Spring applications and implemented REST APIs. Then we tested with
    a third-party tool called Insomnia. After this, we mentioned the URL path with
    the HTTP CRUD request functions and checked the output. This system was fine and
    we could see the output directly. However, it can often be difficult to find the
    errors and bugs, as it can't show you the errors or any abnormal behavior. Though
    this project is running, it's not necessarily safe to release to the market. Therefore,
    we need to further test its stability. Let's run through two popular testing tools
    and frameworks, JUnit and Espresso.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](1f77948f-747b-42f1-b15b-fec3910d97d6.xhtml)“访问数据库”和[第9章](7f273ca8-ce1d-4577-b24c-26d0957f1c74.xhtml)“创建应用”中，我们创建了Spring应用并实现了REST
    API。然后我们使用一个名为Insomnia的第三方工具进行测试。之后，我们提到了使用HTTP CRUD请求函数的URL路径并检查了输出。这个系统运行良好，我们可以直接看到输出。然而，通常很难找到错误和bug，因为它不能显示错误或任何异常行为。尽管这个项目正在运行，但并不一定安全地发布到市场上。因此，我们需要进一步测试其稳定性。让我们运行两个流行的测试工具和框架，JUnit和Espresso。
- en: JUnit
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JUnit
- en: JUnit is the most popular testing framework, built for Java, and is open source.
    It has almost all the features and modules necessary to test a Java-based application
    in a test-driven development environment. JUnit mainly focuses on writing tests
    that are automated for a certain class or function. It helps to call a function
    and check for the expected output. Before seeing some examples of JUnit in use,
    let's learn about its advantages.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: JUnit是最受欢迎的Java测试框架，它是开源的，几乎拥有测试基于Java的应用程序所需的全部功能和模块，适用于测试驱动开发环境。JUnit主要关注编写针对特定类或函数的自动化测试。它有助于调用函数并检查预期的输出。在看到JUnit的一些使用示例之前，让我们了解一下它的优势。
- en: Advantages of JUnit
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JUnit的优势
- en: 'JUnit is widely used for testing Java applications because of its user-friendly
    functionalities. It has some powerful advantages, such as the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: JUnit因其用户友好的功能而广泛用于测试Java应用。它具有一些强大的优势，如下所示：
- en: The JUnit framework is open source
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JUnit框架是开源的
- en: It provides text-based command lines as well as AWT-based and Swing-based graphical
    test mechanisms
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供基于文本的命令行以及基于AWT和Swing的图形测试机制
- en: It has some annotations to utilize test functions
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有一些注解来利用测试函数
- en: It has a test runner to test running applications
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有一个测试运行器来测试运行中的应用
- en: It allows you to write code
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许你编写代码
- en: It can test automatically and provide feedback
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以自动测试并提供反馈
- en: Basic annotations of JUnit
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JUnit的基本注解
- en: 'JUnit has some basic and important annotations, such as the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: JUnit有一些基本且重要的注解，如下所示：
- en: 'The `@BeforeClass`: This runs once before any test functions in the class.
    In this function, you can connect the database or connection pool. This function
    has to be a static method.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@BeforeClass`: 这个方法在类中的任何测试函数之前运行一次。在这个函数中，你可以连接数据库或连接池。这个方法必须是静态方法。'
- en: 'The `@AfterClass`: This runs once after any test functions in the class. In
    this function, you can close the database connection and cleanup.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@AfterClass`: 这个方法在类中的任何测试函数之后运行一次。在这个函数中，你可以关闭数据库连接并进行清理。'
- en: 'The `@Before`: This can run before `@Test` annotated functions. Here you create
    some objects and share to all `@Test` annotated testing functions.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Before`: 这个方法可以在`@Test`注解的函数之前运行。在这里，你可以创建一些对象，并将它们共享给所有`@Test`注解的测试函数。'
- en: The `@After`: This can run after `@Test` annotated functions. Here, you modify
    or clean the objects and share to all `@Test` annotated testing functions.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@After`: 这个方法可以在`@Test`注解的函数之后运行。在这里，你可以修改或清理对象，并将它们共享给所有`@Test`注解的测试函数。'
- en: 'The `@Test`: This annotated function is the test function.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Test`: 这个被注解的函数是测试函数。'
- en: Now we'll look at an example of how to test a project with JUnit. Here, you
    can learn about the life cycle of the testing annotations and the use of these
    annotations.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看看如何使用JUnit测试一个项目的示例。在这里，你可以了解测试注解的生命周期以及这些注解的使用。
- en: Creating a project
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个项目
- en: Let's create a project where we will create REST APIs using a database for users,
    and show a list of the user details. In this project, we will use JDBC, MySQL,
    and Spring Boot.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个项目，在这个项目中，我们将使用数据库创建REST API，并展示用户详情列表。在这个项目中，我们将使用JDBC、MySQL和Spring
    Boot。
- en: 'To create a project, go to [https://start.spring.io](https://start.spring.io) and
    create a Kotlin-based project with the following given dependencies:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建项目，请访问 [https://start.spring.io](https://start.spring.io) 并创建一个基于 Kotlin
    的项目，包含以下给定的依赖项：
- en: Web
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web
- en: JDBC
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JDBC
- en: MySQL
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL
- en: DevTools
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevTools
- en: Now we'll create some demo code, and we can test them.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建一些示例代码，并可以测试它们。
- en: Test a project using JUnit
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 JUnit 测试项目
- en: 'Open your project that we generated previously and follow these steps:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 打开我们之前生成的项目，按照以下步骤操作：
- en: 'Go to the test | kotlin | com.packtpub.sunnat629.testing_application, as in
    this screenshot:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往测试 | kotlin | com.packtpub.sunnat629.testing_application，如下截图所示：
- en: '![](img/e8a5f4af-5037-4b0e-bddc-ee636f5bea7a.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e8a5f4af-5037-4b0e-bddc-ee636f5bea7a.png)'
- en: 'Now create a class named `JUnitTestClass.kt` where we will create some test
    cases using the annotations. Here is the sample code:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建一个名为 `JUnitTestClass.kt` 的类，我们将使用注解创建一些测试用例。以下是一个示例代码：
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can see that we have written the `@BeforeClass` and `@AfterClass` annotated
    function in the `companion object {}`, which means these functions are static.
    In Kotlin, you have to write the static variables and functions in the `companion
    object {}`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到我们在 `companion object {}` 中编写了 `@BeforeClass` 和 `@AfterClass` 注解的函数，这意味着这些函数是静态的。在
    Kotlin 中，你必须将静态变量和函数写入 `companion object {}`。
- en: We have used the `@JvmStatic` annotation. This is especially used in Kotlin
    to specify that this function is static and needs to be generated in the element
    of this function.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了 `@JvmStatic` 注解。这在 Kotlin 中特别用于指定这个函数是静态的，并且需要在这个函数的元素中生成。
- en: 'Now run this test by clicking the Run Test icon beside the function name, as
    in the following screenshot:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在通过点击函数名旁边的运行测试图标来运行这个测试，如下截图所示：
- en: '![](img/b7e204dd-d59f-4bf6-9c6f-adf2eae5a0ee.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b7e204dd-d59f-4bf6-9c6f-adf2eae5a0ee.png)'
- en: 'After running the test on all the test cases, it will show the results; namely,
    pass or fail. Here is the output:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行所有测试用例后，它将显示结果；即，通过或失败。以下是输出：
- en: '![](img/7ee2aa2c-2ecd-4cc8-95ab-d5b7bb8dc177.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7ee2aa2c-2ecd-4cc8-95ab-d5b7bb8dc177.png)'
- en: Here you can see that we had two test cases named `runTest1` and `runTest2`
    that have passed the test.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这里你可以看到我们有两个测试用例名为 `runTest1` 和 `runTest2` 已经通过了测试。
- en: 'Now modify our `runTest1` function and write logic:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在修改我们的 `runTest1` 函数并编写逻辑：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, we have done a very simple equation to check the testing function. We
    have used a method of `Assert` class. The `assertEquals()` is a method of assert,
    and mainly checks the equality with the two inputs. Here, for example, we provide
    `6` and (*2+3*), which is not true and it will show an error.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们做了一个非常简单的方程来检查测试函数。我们使用了 `Assert` 类的方法。`assertEquals()` 是断言的一个方法，主要检查两个输入的相等性。在这里，例如，我们提供了
    `6` 和 (*2+3*)，这不是真的，它将显示一个错误。
- en: 'If the equation is correct, then you will see the test is passed or it will
    show an error with the expected result. Here is what the result looks like:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果方程式正确，那么你将看到测试通过，或者它将显示一个带有预期结果的错误。以下是结果的样子：
- en: '![](img/e7dd4a81-706e-4d43-af97-f6f34fb2af9e.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e7dd4a81-706e-4d43-af97-f6f34fb2af9e.png)'
- en: 'There are a lot of Assert methods. Here are some of them:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多断言方法。以下是一些例子：
- en: 'The `assertArrayEquals`: This will return the equality of two array types input'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertArrayEquals`：这将返回两个数组类型输入的相等性'
- en: The `assertEquals`: This will return the equality of two same types of input
    such as `int`, `long`, `double`, `String`, and so on
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertEquals`：这将返回两个相同类型输入（如 `int`、`long`、`double`、`String` 等）的相等性'
- en: 'The `assertTrue`: This will assert that the given condition is `true`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertTrue`：这将断言给定的条件为 `true`'
- en: The `assertFalse`: This will assert that the given condition is `false`
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertFalse`：这将断言给定的条件为 `false`'
- en: 'The `assertNotNull`: This will assert that the given object is not null'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertNotNull`：这将断言给定的对象不为空'
- en: 'The `assertNull`: This will assert that the given object is null'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertNull`：这将断言给定的对象为空'
- en: Creating a test case for a Rest API
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 Rest API 创建测试用例
- en: 'Now we will see how to test the database using the JPA and Hibernate of a Spring
    project. Here are the steps of how to test the database using JPA:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看到如何使用 Spring 项目的 JPA 和 Hibernate 测试数据库。以下是使用 JPA 测试数据库的步骤：
- en: Open the social_network project. The link is here: [https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter09/social_network](https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter09/social_network).
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`social_network`项目。链接在这里：[https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter09/social_network](https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter09/social_network)。
- en: Now go to the test | kotlin | com.packtpub.sunnat629.social_network package
    and create a file named `ProfileRepositoryTest.kt` with two annotations named `@RunWith(SpringRunner::class)`
    and `@DataJpaTest`.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在转到`test | kotlin | com.packtpub.sunnat629.social_network`包，并创建一个名为`ProfileRepositoryTest.kt`的文件，带有名为`@RunWith(SpringRunner::class)`和`@DataJpaTest`的两个注解。
- en: 'Here is the code of the `ProfileRepositoryTest.kt`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是`ProfileRepositoryTest.kt`的代码：
- en: '[PRE4]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following is an explanation of the preceding code:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对前面代码的解释：
- en: The `@RunWith(SpringRunner::class)` is the annotation in the connector between
    the Spring and JUnit. It uses the Spring's testing support to run JUnit.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@RunWith(SpringRunner::class)`是Spring和JUnit之间的连接器中的注解。它使用Spring的测试支持来运行JUnit。'
- en: The `@DataJpaTest` enables the JPA testing features.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@DataJpaTest`启用了JPA测试功能。'
- en: We autowired the TestEntityManager, which is mainly designed for JPA testing
    and JPA EntityManager's alternative.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们自动装配了`TestEntityManager`，它主要是为JPA测试和JPA EntityManager的替代品设计的。
- en: The `getUserTesting()`, which has the `@Test` annotation and is the main testing
    function.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getUserTesting()`，它带有`@Test`注解，是主要的测试函数。'
- en: Now, we will insert a demo `Profile` object and check if the insertion is working
    or not. To begin with, we have to create a Profile object using the `getNewProfile()`
    function.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将插入一个演示`Profile`对象并检查插入是否正常工作。首先，我们必须使用`getNewProfile()`函数创建一个配置文件对象。
- en: 'After this we save this profile as a new variable, such as this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，我们将此配置文件保存为一个新的变量，例如这样：
- en: '[PRE5]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, we used the `entityManager.merge()`, which will insert the profile in
    the database.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们使用了`entityManager.merge()`，这将把配置文件插入到数据库中。
- en: 'We also autowired the `profileRepository` now use this line to fetch the inserted
    profile by the ID:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还自动装配了`profileRepository`，现在使用此行通过ID获取插入的配置文件：
- en: '[PRE6]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now we have used the `assertThat()` to check the given logic is correct or
    not. In this function, we have checked the created profile and the fetched profile:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们使用了`assertThat()`来检查给定的逻辑是否正确。在这个函数中，我们检查了创建的配置文件和获取的配置文件：
- en: '[PRE7]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, if there are any errors regarding insertion or communication with the database,
    it will return an error.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果有关插入或与数据库通信的错误，它将返回一个错误。
- en: 'Here is the output of our test:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们测试的输出：
- en: '![](img/e02ffe30-dff8-4fc9-a22e-b8bdb0977567.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e02ffe30-dff8-4fc9-a22e-b8bdb0977567.png)'
- en: 'If you provide something as a false value, or the test encounters an error,
    it will output the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你提供一个错误的值，或者测试遇到错误，它将输出以下内容：
- en: '![](img/fb440c59-99f4-4255-8f6a-19da81ca5a58.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb440c59-99f4-4255-8f6a-19da81ca5a58.png)'
- en: We have entered a profile name as `naruto`, but we tested the name `Uzumak`,
    which is why it didn't match. The result subsequently failed.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们输入了一个配置文件名称为`naruto`，但我们测试了名称`Uzumak`，这就是为什么它不匹配。结果随后失败。
- en: UI testing on Android
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android上的UI测试
- en: Nowadays, people are more dependent on mobile than desktop. If we consider Android,
    millions of applications are on the Play Store and other app stores. So, it is
    very important to test the UI to make a UI bug free and stable product in the
    app store. You need to be very careful during testing as there are myriad devices
    with various display sizes. For the backend, you can test with the JUnit and the
    system is same. But now our test will be UI-based and so we will use Espresso.
    This is the most popular framework for UI testing.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，人们比桌面更依赖手机。如果我们考虑Android，数百万个应用程序都在Play Store和其他应用商店中。因此，测试UI以在应用商店中制作无UI错误且稳定的产品的非常重要。在测试过程中需要非常小心，因为存在各种显示尺寸的无数设备。对于后端，你可以使用JUnit进行测试，系统相同。但现在我们的测试将是基于UI的，因此我们将使用Espresso。这是最流行的UI测试框架。
- en: Espresso
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Espresso
- en: Espresso is an open source framework and an instrumentation-based API, designed
    by Google. It is good practice to create some test cases of various scenarios
    of the project. It helps to find out the unexpected results or bugs of the UI,
    as well as the use case. It automatically syncs the actions of the test with the
    UI of the application. It allows you to test on both real devices and emulators.
    But there is a disadvantage of the use in a real device due to its high price
    to test various size of displays and manufacturers. So an emulator is the best
    solution to reduce the cost and time for testing. According to the Espresso testers,
    almost 99% of bugs on an Android application can be detected by this framework.
    The APIs of Espresso are very small, predictable, and easy to learn. You can also
    customize these APIs if you want.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Espresso是一个开源框架，也是一个基于工具的API，由Google设计。创建项目各种场景的测试用例是一种良好的实践。它有助于发现UI的意外结果或错误，以及用例。它自动同步测试动作与应用程序的UI。它允许你在真实设备和模拟器上测试。但由于测试各种尺寸的显示和制造商的成本较高，因此在真实设备上的使用存在缺点。因此，模拟器是降低测试成本和时间的最佳解决方案。根据Espresso测试人员，几乎99%的Android应用程序错误都可以通过这个框架检测到。Espresso的API非常小，可预测，易于学习。如果你愿意，也可以自定义这些API。
- en: Let's create a project and test it with Espresso.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个项目并使用Espresso进行测试。
- en: Creating an application
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建应用程序
- en: 'Let''s create a simple Android app as a client that will retrieve the REST
    API using the GitHub API:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的Android应用程序作为客户端，该客户端将使用GitHub API检索REST API：
- en: 'First of all, we need to create an app from Android Studio and put down your
    project and the company domain. Don''t forget to check Include Kotlin support.
    The following screenshot shows the Create Android Project window:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要从Android Studio创建一个应用程序，并写下你的项目和公司域名。别忘了勾选“包含Kotlin支持”。以下截图显示了“创建Android项目”窗口：
- en: '![](img/ab3e546a-93a9-4d6d-a0f5-b5e02688e207.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ab3e546a-93a9-4d6d-a0f5-b5e02688e207.png)'
- en: Then select the minimum API version from the Phone and Tablet option. There
    is no need to add other options for this project. After clicking Next, in the **add
    an Activity to mobile** field, you can select Empty Activity and then, after renaming
    the activity name and layout, click Finish. After the build, you will be ready
    to start creating an Android app.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后从“手机和平板”选项中选择最小API版本。对于这个项目，不需要添加其他选项。点击“下一步”后，在“添加活动到移动”字段中，你可以选择“空活动”，然后重命名活动名称和布局，点击“完成”。构建完成后，你就可以开始创建Android应用程序了。
- en: After creating the project, we need to implement the dependencies to test.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 创建项目后，我们需要实现测试的依赖项。
- en: Injecting dependencies
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注入依赖项
- en: 'This project is mainly to test UI the application and so we need to implement
    Espresso. Write down the given lines to implement Espresso in the `dependencies{}`
    block of `build.gradle` (Module—app):'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 此项目主要是为了测试UI应用程序，因此我们需要实现Espresso。在`build.gradle`（模块—app）的`dependencies{}`块中写下以下行以实现Espresso：
- en: '[PRE8]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then in the same file, add the code to implement the JUnit3 and JUnit4 tests
    against an Android package in the `android{}` block:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在同一文件中，在`android{}`块中添加代码以实现针对Android包的JUnit3和JUnit4测试：
- en: '[PRE9]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`AndroidJUnitRunner` is the instrumentation runner. It mainly controls the
    test APK, the environment, and all of the test launches.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`AndroidJUnitRunner`是工具运行器。它主要控制测试APK、环境和所有测试启动。'
- en: Now sync the project to download and add the dependencies to the project.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在同步项目以下载并将依赖项添加到项目中。
- en: Modifying the application
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改应用程序
- en: We have learned how to create an app based on `RecyclerView` in [Chapter 9](7f273ca8-ce1d-4577-b24c-26d0957f1c74.xhtml),
    *Creating an Application*, so we can just run through the concept of this app.
    We have a user data class with the ID and username. We will insert 100 users in
    the database and show in a custom `RecyclerView`. We also use a `UserItemAdapter`
    to customize the `RecyclerView`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在[第9章](7f273ca8-ce1d-4577-b24c-26d0957f1c74.xhtml)“创建应用程序”中学习了如何基于`RecyclerView`创建应用程序，因此我们可以简单地回顾一下这个应用程序的概念。我们有一个包含ID和用户名的用户数据类。我们将向数据库中插入100个用户并在自定义的`RecyclerView`中显示。我们还使用`UserItemAdapter`来自定义`RecyclerView`。
- en: Clone this project if you want: [https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter10/TestingWithEspresso](https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter10/TestingWithEspresso).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想克隆此项目，请访问：[https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter10/TestingWithEspresso](https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter10/TestingWithEspresso)。
- en: 'In this project, you find the `MainActivity.kt` where you can find a list view.
    Here is a piece of code from this class:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你可以找到`MainActivity.kt`，在那里你可以找到一个列表视图。这里是这个类中的一段代码：
- en: '[PRE10]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here, the `userLists` is the RecyclerView and we have the `UserItemAdapter`
    custom adapter of a `UserModel`. Here, the `UserModel` code is where we take the
    ID and name of a user:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`userLists`是RecyclerView，我们有一个`UserItemAdapter`自定义适配器，它是`UserModel`的适配器。在这里，`UserModel`代码是我们获取用户ID和名称的地方：
- en: '[PRE11]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now, we will test this list view using Espresso with some major functions that
    are frequently used in our projects.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用Espresso测试这个列表视图，并使用我们在项目中经常使用的几个主要功能。
- en: Creating testing files
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建测试文件
- en: 'Let''s write some test cases. To write this code, we need to create new files
    in the androidTest package. To do this, follow the steps:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一些测试用例。要编写此代码，我们需要在androidTest包中创建新文件。为此，请按照以下步骤操作：
- en: 'Now go to src | androidTest | java | `module_name` of the project. Here is
    a screenshot of this directory:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在转到src | androidTest | java | 项目的`module_name`。这是这个目录的截图：
- en: '![](img/4197e394-9bc9-4bfb-9484-24e771e8a1aa.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4197e394-9bc9-4bfb-9484-24e771e8a1aa.png)'
- en: Create a class named `MainActivityTest.kt` with `@RunWith(AndroidJUnit4::class)`
    annotation. This annotation will link the test and the app features.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`MainActivityTest.kt`的类，并带有`@RunWith(AndroidJUnit4::class)`注解。这个注解将测试与应用程序功能链接。
- en: 'Let''s create our very first Espresso test:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建我们的第一个Espresso测试：
- en: First of all, we need to connect our `MainActivity` class. To do this, we will
    initialize a variable of `ActivityTestRule<MainActivity>` and it will provide
    all the functionalities for the `MainActivity`. It has an annotation of `@Rule`,
    which means testing for a single activity and here it is `MainActivity`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要连接我们的`MainActivity`类。为此，我们将初始化一个`ActivityTestRule<MainActivity>`变量的实例，它将为`MainActivity`提供所有功能。它有一个`@Rule`注解，这意味着对单个活动的测试，这里是指`MainActivity`。
- en: 'This `getCountUser()` function is for checking the number of your list:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`getCountUser()`函数是用来检查你的列表中用户数量的：
- en: '[PRE12]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the previous code, we do the following:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们做了以下操作：
- en: '`ViewMatchers.onView()` means it will take a matcher logic.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ViewMatchers.onView()`意味着它将采用匹配器逻辑。'
- en: '`ViewMatchers.withId()` uses to connect the component of your activity''s layout.
    In our `main_activity.xml`, the ID name of the `RecyclerView` is `userLists`,
    so we connect it here.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ViewMatchers.withId()`用于连接你的活动布局的组件。在我们的`main_activity.xml`中，`RecyclerView`的ID名称是`userLists`，所以我们在这里连接它。'
- en: '`check(..)` will return a Boolean.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`check(..)`将返回一个布尔值。'
- en: The `matches(itemCount(20)` means it will match the given number with your user
    list number.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`matches(itemCount(20)`意味着它将匹配给定的数字与你的用户列表数量。'
- en: 'We need to create the `itemCount()` manually. To do this, create a class named `CustomUserMatchers.kt`.
    Here, is the code of this class:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要手动创建`itemCount()`。为此，创建一个名为`CustomUserMatchers.kt`的类。在这里，是这个类的代码：
- en: '[PRE13]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here, we create a `CustomUserMatchers.kt` class where we create a static function
    and return a `Matcher<View>`.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们创建了一个`CustomUserMatchers.kt`类，在其中创建了一个静态函数并返回一个`Matcher<View>`。
- en: '`BoundedMatcher<View, RecyclerView>(RecyclerView::class.java)` have two functions
    named `describeTo(description: Description?)` and `matchesSafely(item: RecyclerView?)`
    and we have overriden these classes.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`BoundedMatcher<View, RecyclerView>(RecyclerView::class.java)`有两个函数名为`describeTo(description:
    Description?)`和`matchesSafely(item: RecyclerView?)`，并且我们已经重写了这些类。'
- en: In the `matchesSafely`, we will check the equality of the list number with the
    given number.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在`matchesSafely`中，我们将检查列表数量与给定数量的相等性。
- en: 'In our output list, we have `100` users but here the given number is `20`.
    So when you run the test, it will fail, as in this screenshot:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的输出列表中，我们有`100`个用户，但这里给出的数字是`20`。所以当你运行测试时，它将失败，就像这个截图所示：
- en: '![](img/9d6919af-7300-40b2-8172-497f75c3a35b.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9d6919af-7300-40b2-8172-497f75c3a35b.png)'
- en: 'If you provide `100` and run then you can see that the test is passed, as in
    this screenshot:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你提供`100`并运行，你可以看到测试通过了，就像这个截图所示：
- en: '`![](img/34ea9ddd-d353-4a8c-8d6c-67af3492cc9a.png)`'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`![](img/34ea9ddd-d353-4a8c-8d6c-67af3492cc9a.png)`'
- en: 'Now create a test case named `getUserPosition()` to get a specific position
    and click it:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建一个名为`getUserPosition()`的测试用例来获取特定位置并点击它：
- en: '[PRE14]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `actionOnItemAtPosition<RecyclerView.ViewHolder>` is to select a position
    of the `RecyclerView` list using the `RecyclerView`. `ViewHolder` and then we
    use a `click()` of row 34 of the list. That means this test will go to your given
    position and then it will click that item. You can see in the following screenshot
    that it has clicked and showed the Toast that the test case has clicked the row
    34 of the list:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`actionOnItemAtPosition<RecyclerView.ViewHolder>` 的作用是使用 `RecyclerView` 和 `ViewHolder`
    选择 `RecyclerView` 列表中的某个位置，然后我们使用列表的第 34 行的 `click()`。这意味着这个测试将会跳转到指定的位置并点击那个项目。你可以在下面的屏幕截图看到它已经点击并显示了一个
    Toast，表明测试用例已经点击了列表的第 34 行：'
- en: '![](img/79b3d81c-9da2-49ae-b71f-d69e4d2cb1ab.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/79b3d81c-9da2-49ae-b71f-d69e4d2cb1ab.png)'
- en: 'If you look at the logcat, you will also notice that the test has been passed.
    Here is the output of the logcat of Android Studio:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看日志输出，你也会注意到测试已经通过。以下是 Android Studio 的日志输出：
- en: '![](img/3fbe8da7-1310-492f-adde-758ed53e12a4.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3fbe8da7-1310-492f-adde-758ed53e12a4.png)'
- en: Create a `getIsDisplayed()` function to test whether the given list is displaying
    or not.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个 `getIsDisplayed()` 函数来测试给定的列表是否正在显示。
- en: The `withId(R.id.userLists)` will get the listview of the `MainActivity`.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`withId(R.id.userLists)` 将获取 `MainActivity` 的列表视图。'
- en: 'The `check(matches(isDisplayed()))` checks whether the list is displaying in
    the device or not:'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`check(matches(isDisplayed()))` 检查列表是否在设备上显示：'
- en: '[PRE15]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create a `getIsClickable()` function to test whether the given list is displaying
    or not. The `withId(R.id.userRoot)` will get the `ConstraintLayout` and `check(matches(isClickable()))`
    will match layout''s clickability status of the list:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 `getIsClickable()` 函数来测试给定的列表是否正在显示。`withId(R.id.userRoot)` 将获取 `ConstraintLayout`，而
    `check(matches(isClickable()))` 将匹配列表的点击状态：
- en: '[PRE16]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create a `getScrollToBottom()` function to check how to scroll to the specific
    position. The `withId(R.id.userLists)` will get the list view and `perform(scrollToPosition<RecyclerView.ViewHolder>(activityTestRule.activity.userLists.adapter!!.itemCount
    - 1))` will scroll to the bottom of the list. Using this test case, you can see
    whether the list is smooth or not:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 `getScrollToBottom()` 函数来检查如何滚动到特定位置。`withId(R.id.userLists)` 将获取列表视图，`perform(scrollToPosition<RecyclerView.ViewHolder>(activityTestRule.activity.userLists.adapter!!.itemCount
    - 1))` 将滚动到列表底部。使用这个测试用例，你可以看到列表是否滚动顺畅：
- en: '[PRE17]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: There are even more functions of Espresso. You can check this cheat sheet ([https://developer.android.com/training/testing/espresso/cheat-sheet](https://developer.android.com/training/testing/espresso/cheat-sheet)),
    which is provided by Google.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: Espresso 还有很多其他功能。你可以查看这个作弊表（[https://developer.android.com/training/testing/espresso/cheat-sheet](https://developer.android.com/training/testing/espresso/cheat-sheet)），这是由
    Google 提供的。
- en: Summary
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Testing is always a good way to discover errors in the UI, backend code, or
    logic. It helps to understand the reason for crashes. Here, we have learned about
    two powerful frameworks. One is JUnit and another is Espresso. In this chapter,
    we have seen how to add the dependencies for testing. We have learned how to implement
    the JUnit into a project. We saw how to use the logic in our test case and how
    to check to see the pass or fail result of a test case. Additionally, we have
    seen how to connect the database for testing. Then, we saw how to insert a demo
    object into a database, and subsequently, fetch it from the database, after which
    we have matched the object.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 测试是发现 UI、后端代码或逻辑中错误的好方法。它有助于理解崩溃的原因。在这里，我们学习了两个强大的框架。一个是 JUnit，另一个是 Espresso。在本章中，我们看到了如何添加测试的依赖项。我们学习了如何将
    JUnit 实现到项目中。我们看到了如何在测试用例中使用逻辑，以及如何检查测试用例的通过或失败结果。此外，我们还看到了如何连接数据库进行测试。然后，我们看到了如何将演示对象插入数据库，并随后从数据库中检索它，之后我们进行了对象匹配。
- en: In Android testing, we have used the Espresso framework to test the UI. Finally,
    we have seen some uses of the Espresso APIs and how to handle and connect them
    with a specific activity. This chapter gave you a brief idea of testing so that
    you can use test cases to perfect your project. If you want to learn more, please
    see our reference book under the *Further reading* section.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android 测试中，我们使用了 Espresso 框架来测试 UI。最后，我们看到了一些 Espresso API 的用法以及如何处理和将它们与特定的活动连接。本章为你提供了一个关于测试的简要概述，以便你可以使用测试用例来完善你的项目。如果你想要了解更多，请参阅
    *进一步阅读* 部分下的参考书籍。
- en: If you are reading this paragraph, that means you have finished this book and
    are ready to build a server-based and client-based projects alone. Now you are
    a one-man army, able to create a server and mobile application with security,
    databases, and testing. I hope you enjoyed reading this book and that it will
    be a reference point in your upcoming projects.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在阅读这个段落，这意味着你已经完成了这本书，并准备好独立构建基于服务器和客户端的项目。现在你是一支孤胆英雄，能够创建具有安全性、数据库和测试的服务器和移动应用程序。我希望你喜欢阅读这本书，并且它将成为你即将到来的项目的参考点。
- en: Questions
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What types of code does JUnit support?
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JUnit支持哪些类型的代码？
- en: Who designed Espresso?
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 谁设计了Espresso？
- en: In which platform, JUnit uses?
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JUnit在哪个平台上使用？
- en: Why is the Espresso used in the Andriod application?
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么在Android应用中使用Espresso？
- en: What is the Android testing strategy?
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Android测试策略是什么？
- en: What is the standard ratio of testing?
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试的标准比例是多少？
- en: How do you test different screen sizes on devices?
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何在设备上测试不同的屏幕尺寸？
- en: Further reading
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*Android Application Testing Guide* ([https://www.packtpub.com/application-development/android-application-testing-guide](https://www.packtpub.com/application-development/android-application-testing-guide)) by
    Diego Torres Milano'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《Android应用测试指南》* ([https://www.packtpub.com/application-development/android-application-testing-guide](https://www.packtpub.com/application-development/android-application-testing-guide))
    由Diego Torres Milano著'
- en: '*Learning Android Application Testing* ([https://www.packtpub.com/application-development/learning-android-application-testing](https://www.packtpub.com/application-development/learning-android-application-testing))
    by Paul Blundell, Diego Torres Milano'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《学习Android应用测试》* ([https://www.packtpub.com/application-development/learning-android-application-testing](https://www.packtpub.com/application-development/learning-android-application-testing))
    由Paul Blundell和Diego Torres Milano著'
- en: '*Spring Framework Master Class - Beginner to Expert [Video]* ([https://www.packtpub.com/application-development/spring-framework-master-class-beginner-expert-video](https://www.packtpub.com/application-development/spring-framework-master-class-beginner-expert-video))
    by Ranga Karanam'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《Spring框架大师课 - 从入门到精通 [视频]》* ([https://www.packtpub.com/application-development/spring-framework-master-class-beginner-expert-video](https://www.packtpub.com/application-development/spring-framework-master-class-beginner-expert-video))
    由Ranga Karanam著'
