- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Swift Documentation and Installing Swift
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Swift 文档和安装 Swift
- en: I spent a lot of my career working as a Linux System Administrator and Network
    Security Administrator. These positions required me to compile and install packages
    from source. There are a lot of advantages to building packages from source rather
    than downloading prebuilt binaries. The biggest advantage, in my opinion, is that
    you can get the latest version without having to wait for someone else to build
    it. This allows me to patch my systems with the latest security updates without
    delay. With Swift, we are also able to download the latest code and compile ourselves
    without having to wait for someone else to build it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我在职业生涯中大部分时间都在担任 Linux 系统管理员和网络安全管理员。这些职位要求我从源代码编译和安装软件包。与下载预构建的二进制文件相比，从源代码构建软件包有很多优点。在我看来，最大的优点是你可以获取最新版本，而无需等待其他人构建它。这使我能够及时对我的系统进行最新的安全更新。使用
    Swift，我们也能够下载最新的代码并自行编译，而无需等待其他人构建它。
- en: 'In this chapter, you will learn:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习：
- en: About the swift.org website and what it offers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 swift.org 网站及其提供的内容
- en: How to find the latest documentation on Swift
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何找到 Swift 的最新文档
- en: Ways to install Swift
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Swift 的方法
- en: How to build Swift from source with its full toolchain and package manager
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何从源代码构建 Swift，包括其完整的工具链和包管理器
- en: In the previous chapter, we mentioned that Apple has released Swift as an open
    source project with the [swift.org](http://swift.org) site dedicated to the Swift
    community. This means we can download the source code for the Swift language,
    examine it, and build Swift ourselves. Before we really dive into the Swift language
    and develop with it, let's look at how we can build Swift from source and the
    resources that Apple has made available to us. We will start by looking at the
    [swift.org](http://swift.org) site.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们提到苹果公司已将 Swift 作为开源项目发布，并设立了 [swift.org](http://swift.org) 网站专门服务于 Swift
    社区。这意味着我们可以下载 Swift 语言的源代码，检查它，并自行构建 Swift。在我们真正深入 Swift 语言并使用它进行开发之前，让我们看看如何从源代码构建
    Swift 以及苹果为我们提供的资源。我们将首先查看 [swift.org](http://swift.org) 网站。
- en: Swift.org
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Swift.org
- en: On December 3, 2015, Apple officially released the Swift language, supporting
    libraries, the debugger, and the package manager to the open source community
    under the Apache 2.0 license. At that time, the [swift.org](http://swift.org)
    site was created as the community's gateway to the project. This site has a wealth
    of information and should be your primary site to find out what is happening in
    the Swift community and the language itself. The blog posts will keep you up to
    date with new releases of Swift, new Swift open source libraries, changes to the
    standard library, and other Swift news.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 2015年12月3日，苹果公司正式发布了 Swift 语言，包括支持库、调试器和包管理器，并将其以 Apache 2.0 许可证的形式开源给社区。当时，创建了
    [swift.org](http://swift.org) 网站，作为社区进入项目的门户。这个网站拥有丰富的信息，应该是你了解 Swift 社区和语言本身发生情况的首选网站。博客文章会更新
    Swift 的新版本发布、新的 Swift 开源库、标准库的变更以及其他 Swift 新闻。
- en: You can also download pre-built binaries for several flavors of Linux. At the
    time this book is being written, we can download pre-built binaries for Ubuntu
    16.04, Ubuntu 18.04, Ubuntu 20.04, CentOS 8, and Amazon Linux 2\. The getting
    started page provides a list of dependencies for the previously mentioned flavors
    of Linux and instructions on how to install the binaries.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以下载适用于多种 Linux 版本的预构建二进制文件。在本书编写时，我们可以下载适用于 Ubuntu 16.04、Ubuntu 18.04、Ubuntu
    20.04、CentOS 8 和 Amazon Linux 2 的预构建二进制文件。入门页面提供了之前提到的 Linux 版本的依赖项列表以及如何安装二进制文件的说明。
- en: The website also includes the official Swift documentation, which includes things
    like the language guide, a Swift introduction, and an API design guideline. Understanding
    the API design guideline is essential to ensuring that your code meets the recommended
    coding standards. In *Chapter 18*, *Swift Formatting and Style Guide*, we provide
    recommendations for coding standards in Swift, which go hand in hand with Apple's
    recommendations.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 网站还包括官方的 Swift 文档，其中包括语言指南、Swift 简介以及 API 设计指南。理解 API 设计指南对于确保你的代码符合推荐的编码标准至关重要。在
    *第18章*，*Swift 格式化和风格指南* 中，我们提供了 Swift 编码标准的建议，这些建议与苹果公司的建议相辅相成。
- en: You will also find information on how to contribute to the Swift community,
    where the Swift source code can be downloaded, and there is even a section on
    recommended Google Summer of Code projects with Swift. If you really want to get into
    Swift development, whether it be server-side, Mac, or iOS development, I would
    recommend making regular visits to the [swift.org](http://swift.org) site to keep
    up to date with what is happening in the Swift community.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以找到有关如何为 Swift 社区做出贡献的信息，Swift 源代码的下载位置，甚至还有一个关于推荐 Google Summer of Code
    项目的部分。如果你真的想深入研究 Swift 开发，无论是服务器端、Mac 还是 iOS 开发，我建议定期访问 [swift.org](http://swift.org)
    网站，以了解 Swift 社区正在发生的事情。
- en: Apple and the Swift community also have a number of documentation resources
    that you can use for reference.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果和 Swift 社区也提供了一些你可以用作参考的文档资源。
- en: Swift documentation
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Swift 文档
- en: Apple and the Swift community, as a whole, have released a number of resources
    to help developers program in Swift. Apple's official documentation, which can
    be found at [https://developer.apple.com/documentation/](https://developer.apple.com/documentation/),
    includes API documentation for Swift as well as all of Apple's frameworks. Only
    a small portion of Apple's frameworks are open source and work across all platforms;
    however if you are looking to get started on one of Apple's frameworks this is
    definitely the place to start. However it can be hard to find documentation on
    specific Swift APIs.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果和 Swift 社区作为一个整体，已经发布了许多资源来帮助开发者用 Swift 编程。可以在 [https://developer.apple.com/documentation/](https://developer.apple.com/documentation/)
    找到的苹果官方文档，包括 Swift 的 API 文档以及苹果的所有框架。苹果的框架中只有一小部分是开源的，并且可以在所有平台上工作；然而，如果你想要开始使用苹果的某个框架，这绝对是一个开始的地方。然而，找到特定
    Swift API 的文档可能有些困难。
- en: 'To quickly find documentation on Swift''s API, my favorite site is [https://swiftdoc.org](https://swiftdoc.org).
    This site is incredibly easy to navigate and has autogenerated documentation for
    all types, protocols, operators, and global functions that make up the Swift language.
    I have noticed that this site does not always stay up to date; however, it is
    a great reference for any Swift developer. The code that generates this site is
    open source as well and can be found on GitHub here: [https://github.com/SwiftDocOrg/swift-doc](https://github.com/SwiftDocOrg/swift-doc).
    The GitHub page gives directions on how you can generate your own offline documentation.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要快速找到 Swift API 的文档，我最喜欢的网站是 [https://swiftdoc.org](https://swiftdoc.org)。这个网站导航起来非常方便，并为所有类型、协议、运算符和组成
    Swift 语言的全局函数自动生成了文档。我注意到这个网站并不总是保持最新；然而，它对于任何 Swift 开发者来说都是一个极好的参考资料。生成这个网站的代码也是开源的，可以在
    GitHub 上找到：[https://github.com/SwiftDocOrg/swift-doc](https://github.com/SwiftDocOrg/swift-doc)。GitHub
    页面提供了如何生成你自己的离线文档的说明。
- en: 'The final site that I am going to mention here is one that I recently discovered
    on one of my favorite Swift sites. It is the Swift knowledge base on the Hacking
    with Swift site located here: [https://www.hackingwithswift.com/example-code/](https://www.hackingwithswift.com/example-code/).
    Once you learn Swift and need to know how to do something like parsing JSON, extracting
    a PDF, or any other specific function, there is a good chance you can find what
    you need here.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我接下来要提到的最后一个网站是我最近在我最喜欢的 Swift 网站上发现的。它是位于 [https://www.hackingwithswift.com/example-code/](https://www.hackingwithswift.com/example-code/)
    的 Hacking with Swift 网站上的 Swift 知识库。一旦你学会了 Swift，需要知道如何进行 JSON 解析、提取 PDF 或任何其他特定功能，你在这里很可能找到你需要的东西。
- en: Now that we know where to look for documentation on Swift, let's see the different
    ways that we can install Swift.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了在哪里查找 Swift 的文档，让我们看看我们可以用哪些不同的方式来安装 Swift。
- en: Installing Swift from swift.org
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 swift.org 安装 Swift
- en: If you are developing on and for the Apple platform, I strongly suggest that
    you stick with the version of Swift that comes with Xcode. Apple will not approve
    an app that was compiled using a version of Swift that is different than the one
    that came with the version of Xcode that you are using. This may seem a little
    extreme, but it ensures that the apps are compiled with a stable version of Swift
    and one that has been fully vetted to work with your version of Xcode.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在为 Apple 平台开发和编程，我强烈建议你使用 Xcode 中的 Swift 版本。苹果不会批准使用与 Xcode 版本不同的 Swift
    版本编译的应用程序。这听起来可能有些极端，但它确保了应用程序是用稳定的 Swift 版本编译的，并且这个版本已经经过全面审查，可以与你的 Xcode 版本一起工作。
- en: If you are using one of the flavors of Linux that has pre-built binaries on
    the [swift.org](http://swift.org) site, it is recommended that you use those.
    They are the easiest and quickest path to getting Swift up and running. You can
    also find complete installation instructions with a list of dependencies on the
    [swift.org](http://swift.org) site under the *Getting Started* section.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是在 [swift.org](http://swift.org) 网站上有预构建二进制文件的 Linux 发行版，建议你使用这些二进制文件。它们是让
    Swift 运行起来最快、最简单的方法。你还可以在 [swift.org](http://swift.org) 网站的“入门”部分找到完整的安装说明和依赖项列表。
- en: If pre-built binaries are not provided for your flavor of Linux, if you want
    to try the latest version of Swift, or if you just want to see what it is like
    to build Swift from source, you can do that as well.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的 Linux 发行版没有提供预构建的二进制文件，如果你想尝试 Swift 的最新版本，或者你只是想看看从源代码构建 Swift 是什么样的体验，你也可以这样做。
- en: Building Swift and the Swift toolchain from source
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从源代码构建 Swift 和 Swift 工具链
- en: There are a number of sites that show you how to build Swift from source, but
    unfortunately most of these sites give directions for building just the Swift
    language itself without the toolchain. I find that not very useful, unless you
    are only writing very simple applications. In my opinion, building Swift for Linux
    without the entire toolchain and the package manager is more of an exercise of
    *"Can I do it"* rather than building something you can use long term.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多网站展示了如何从源代码构建 Swift，但遗憾的是，这些网站中的大多数只提供了构建 Swift 语言本身的说明，而没有工具链。我发现这并不太有用，除非你只编写非常简单的应用程序。在我看来，在没有整个工具链和包管理器的情况下为
    Linux 构建 Swift 更多的是一种“我能做到吗”的练习，而不是构建可以长期使用的软件。
- en: While using the latest build of Swift is not recommended for production systems,
    it does enable us to use the latest features of the language and also verify that
    changes introduced in our application are compatible with future versions of the
    Swift language.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不建议在生产系统中使用 Swift 的最新构建版本，但它确实使我们能够使用语言的最新功能，并验证引入到我们的应用程序中的更改与 Swift 语言的未来版本兼容。
- en: In this chapter, we will look at how we can build Swift, its entire toolchain,
    and the Swift package manager from source. Since each flavor of Linux and macOS
    are somewhat different, I need to pick one platform to write these instructions
    on; therefore I am using Ubuntu 18.04 and the current Swift 5.3 development release
    at the time of writing this book. For other flavors or versions of Linux, you
    may have to make changes to the dependencies that are installed or how they are
    installed. The command to build Swift itself will be the same across all platforms.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何从源代码构建 Swift、其整个工具链以及 Swift 包管理器。由于每个 Linux 发行版和 macOS 都有所不同，我需要选择一个平台来编写这些说明；因此，我使用了
    Ubuntu 18.04 和本书编写时的当前 Swift 5.3 开发版本。对于其他发行版或版本，你可能需要更改已安装的依赖项或它们的安装方式。构建 Swift
    本身的命令将在所有平台上都是相同的。
- en: Some of these commands can be quite large to type. All of the commands are in
    text files that you can cut and paste from in the downloadable code for this book.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令中的一些可能相当长，难以手动输入。所有的命令都包含在本书可下载的代码中的文本文件里，你可以从中剪切和粘贴。
- en: Now let's start building Swift by installing the dependencies.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始构建 Swift，通过安装依赖项来启动这个过程。
- en: Installing dependencies
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装依赖项
- en: The first thing we need to do is to make sure we have all of the dependencies
    required. The following command includes dependencies I have needed to install
    on different flavors of Linux.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要确保我们拥有所有必需的依赖项。以下命令包括了我在不同Linux发行版上需要安装的依赖项。
- en: 'You may find that your distribution already has some of these preinstalled
    but to make sure you have everything, run the following command:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会发现你的发行版已经预装了一些这些依赖项，但为了确保你拥有所有内容，请运行以下命令：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: One thing to note is dependencies can change and if you attempt to compile from
    source and you receive an error that something is missing, add it with the `apt-get
    install` command or the package manager on your system. Now that we have all of the
    dependencies installed, we need to download the Swift source code.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一点是依赖项可能会发生变化，如果你尝试从源代码编译并且收到一个错误信息，表明某些东西缺失，你可以使用 `apt-get install` 命令或系统上的包管理器来添加它。现在我们已经安装了所有依赖项，我们需要下载
    Swift 源代码。
- en: Swift source
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Swift 源代码
- en: 'To download the Swift source code, we will want to create a new directory that
    we can download the code to, change to that directory, and then run the `git`
    command to retrieve the source. The following commands will download the Swift
    source to a directory named `swift-source`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载 Swift 源代码，我们需要创建一个新的目录，将代码下载到该目录，然后运行 `git` 命令来检索源代码。以下命令将 Swift 源代码下载到名为
    `swift-source` 的目录：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now that we have the source and have cloned what we need, let's build Swift.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经获取了源代码并克隆了我们需要的部分，接下来让我们构建 Swift。
- en: Building Swift
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建 Swift
- en: 'Before you begin building Swift, you will need to understand that this will
    take hours to build depending on your system or virtual machine setup. If you
    are using a virtual machine, like VirtualBox, I would strongly recommend that
    you allocate multiple cores to your virtual machine; it will dramatically shorten
    the build time. The following command will build Swift, its toolchain, and the
    package manager:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在您开始构建 Swift 之前，您需要了解这取决于您的系统或虚拟机设置，可能需要数小时才能构建完成。如果您正在使用虚拟机，例如 VirtualBox，我强烈建议您为虚拟机分配多个核心；这将显著缩短构建时间。以下命令将构建
    Swift、其工具链和包管理器：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Once this has built everything, we need to install it somewhere and put the
    binaries in our path.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建完成所有内容，我们需要将其安装到某个位置，并将二进制文件放入我们的路径中。
- en: Installing Swift
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Swift
- en: Now that we have built Swift and its toolchain, we are ready to install it.
    I like to install Swift under the `/opt` directory, others prefer installing it
    under the `/usr/local/share` directory. What directory you put it under is totally
    up to you. I will walk you through installing it under the `/opt` directory, if
    you would like to put it someplace else then simply replace the `/opt` in the
    paths with the directory that you wish to install it to.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经构建了 Swift 和其工具链，我们已准备好安装它。我喜欢在 `/opt` 目录下安装 Swift，其他人更喜欢在 `/usr/local/share`
    目录下安装。您将其放在哪个目录下完全取决于您。如果您想将其安装在其他位置，只需将路径中的 `/opt` 替换为您希望安装到的目录即可。
- en: 'Let''s start the installation by changing to the /opt directory and creating
    a new directory named `swift`. We need to change the permissions for this directory
    so that we can read, write, and execute files. The following commands will do
    this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从更改到 `/opt` 目录并创建一个名为 `swift` 的新目录开始安装过程。我们需要更改此目录的权限，以便我们可以读取、写入和执行文件。以下命令将执行此操作：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The command `chmod 777 swift` adds read, write, and execute permissions for
    all users of this computer. I like to use this mode because then any user on the
    system can use Swift; however, this can be considered a security issue because
    it also means anyone can modify the files. Use this at your own risk and for production
    systems, I would really look at who needs permissions for this directly and lock
    it down more.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 命令 `chmod 777 swift` 为此计算机的所有用户添加了读取、写入和执行权限。我喜欢使用这种模式，因为这样任何系统用户都可以使用 Swift；然而，这也可以被认为是一个安全问题，因为它也意味着任何人都可以修改文件。使用此模式时请自行承担风险，对于生产系统，我强烈建议您查看直接需要此权限的用户，并对其进行更严格的限制。
- en: 'Next we need to move the Swift binaries that we built to the `swift` directory.
    To do this we will change to the `swift` directory, create a new directory for
    our build, change to the directory, and copy the files over. The following commands
    will do this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要将构建的 Swift 二进制文件移动到 `swift` 目录。为此，我们将更改到 `swift` 目录，为我们的构建创建一个新的目录，更改到该目录，并复制文件。以下命令将执行此操作：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now we want to make a symlink to this directory called `swift-current`. The
    reason for this is it enables us to add an entry to our `PATH` environmental variable
    so that the operating system can find the Swift executables without us needing
    to enter the full path. If we set up this entry using the `swift-current` path
    rather than the `swift.5.3-dev` path, it enables us, when we install new versions
    of Swift, to simply change where the `swift-current` symlink points to and have
    everything work. We can do this with the following command from the `/opt/swift`
    directory:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们想要创建一个指向此目录的符号链接，名为 `swift-current`。这样做的原因是它允许我们向我们的 `PATH` 环境变量中添加一个条目，这样操作系统就可以在不需要我们输入完整路径的情况下找到
    Swift 可执行文件。如果我们使用 `swift-current` 路径而不是 `swift.5.3-dev` 路径来设置此条目，那么在安装新的 Swift
    版本时，我们可以简单地更改 `swift-current` 符号链接指向的位置，从而使一切正常工作。我们可以使用以下命令从 `/opt/swift` 目录中执行此操作：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now we need to create the entry in our `PATH` variable. To do this we add the
    `/opt/swift/swift-current/usr/bin/` directory to the `PATH` variable in our `.profile`
    file located in your home directory. Then update the environment. The following
    commands do this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要在我们的 `PATH` 变量中创建条目。为此，我们将 `/opt/swift/swift-current/usr/bin/` 目录添加到位于你主目录中的
    `.profile` 文件中的 `PATH` 变量中。然后更新环境。以下命令会这样做：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We should now have Swift installed and ready to go. The last thing we want to
    do is to test our installation.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在应该已经安装了 Swift 并准备好使用。我们最后想要做的是测试我们的安装。
- en: Testing the installation
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试安装
- en: 'The last thing we need to do is to verify that Swift has been successfully
    installed. To do this, we can run the following command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最后需要做的是验证 Swift 是否已成功安装。为此，我们可以运行以下命令：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output should look something like this but with the version of Swift that
    you installed:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该看起来像这样，但带有你安装的 Swift 版本：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If the output looks similar to this, then congratulations, Swift has been successfully
    installed on your system. If there is an issue, and your system is unable to find
    the `swift` command, then the issue probably lies within the path. The first thing
    you will want to do is to echo your `PATH` variable to verify that `/opt/swift/swift-current/usr/bin/`
    is in your path. The following command will do this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果输出看起来像这样，那么恭喜你，Swift 已经成功安装到你的系统中。如果存在问题，并且你的系统无法找到 `swift` 命令，那么问题可能出在路径上。你首先想要做的是打印出你的
    `PATH` 变量来验证 `/opt/swift/swift-current/usr/bin/` 是否在你的路径中。以下命令会这样做：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If `/opt/swift/swift-current/usr/bin/` is not in your path, you can attempt
    to run the `PATH=$PATH:/opt/swift/swift-current/usr/bin/` command manually rather
    than adding it to your `.profile` file.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `/opt/swift/swift-current/usr/bin/` 不在你的路径中，你可以尝试手动运行 `PATH=$PATH:/opt/swift/swift-current/usr/bin/`
    命令，而不是将其添加到你的 `.profile` 文件中。
- en: 'Finally let''s verify that the package manager was also properly installed.
    To do this, we want to create a `swift-code` directory under your home directory
    and create a new package as the following commands show:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们验证包管理器是否也正确安装。为此，我们想在你的主目录下创建一个 `swift-code` 目录，并创建一个新的包，如下面的命令所示：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output should look something like this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该看起来像这样：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We are now ready to use Swift and the package manager.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经准备好使用 Swift 和包管理器。
- en: Using the Swift package manager
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Swift 包管理器
- en: There is a lot that you can do with the package manager that makes it a necessity
    for creating complex applications on the Linux platform. It helps with adding
    dependencies to projects and enables us to break our code up into multiple files
    and create library projects. You can use the package manager on the Mac platform
    as well, but I do find it easier to use Xcode.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用包管理器做很多事情，这使得它在 Linux 平台上创建复杂的应用程序成为必需品。它帮助向项目中添加依赖项，并使我们能够将代码拆分成多个文件并创建库项目。你同样可以在
    Mac 平台上使用包管理器，但我发现使用 Xcode 更容易。
- en: 'For the examples in this book, we will not need to add dependencies or use
    multiple files. Let''s see how we can simply build and run an executable project
    in the package manager so you can use it to run the examples from this book if
    you would like. Keep in mind you are able to use the package manager on the Apple
    platform as well. When the package manager created `main.swift` in the `Sources/test/`
    directory it added the following code to it:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这本书中的示例，我们不需要添加依赖项或使用多个文件。让我们看看我们如何在包管理器中简单地构建和运行一个可执行项目，这样你就可以使用它来运行这本书中的示例。记住，你同样可以在
    Apple 平台上使用包管理器。当包管理器在 `Sources/test/` 目录中创建 `main.swift` 文件时，它向其中添加了以下代码：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This code gives us the basic `Hello World` application. You can replace this
    code with examples from this book as you are going through it. To see how we would
    build and run an application using the package manager, let''s leave the code
    as is for now and run the following commands:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码给我们提供了一个基本的 `Hello World` 应用程序。当你阅读这本书时，你可以用这本书中的示例替换这段代码。为了了解我们如何使用包管理器构建和运行应用程序，让我们现在保持代码不变，并运行以下命令：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You should see the following output:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `swift build` command compiled our application, and the `swift run` command
    ran the executable that was built with the previous command. Most of the code
    in this book doesn't need the package manager to run, and it may be easier to
    simply use the compiler. Just keep in mind that for anything larger than a simple
    example, you will want to use the package manager or Xcode.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`swift build` 命令编译了我们的应用程序，而 `swift run` 命令运行了由前一个命令构建的可执行文件。本书中的大部分代码不需要包管理器来运行，可能直接使用编译器会更简单。但请记住，对于比简单示例更大的项目，你将希望使用包管理器或
    Xcode。'
- en: Next, let's see how to use the Swift compiler.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看如何使用 Swift 编译器。
- en: Using the Swift compiler
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Swift 编译器
- en: 'The Swift compiler is the basic utility to build Swift code and it is used
    by the package manager, Xcode, and any other utility that builds Swift code into
    executables. We can also call it ourselves. To see how to call it ourselves, create
    a file named `hello.swift` and add the `print("Hello, world!")` code to it as
    shown with the following code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 编译器是构建 Swift 代码的基本实用工具，它被包管理器、Xcode 和任何其他将 Swift 代码构建为可执行文件的工具使用。我们也可以自己调用它。要了解如何自己调用它，创建一个名为
    `hello.swift` 的文件，并添加如下所示的 `print("Hello, world!")` 代码：
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now we can compile this code with the following command, which calls the Swift
    compiler:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用以下命令编译此代码，该命令调用 Swift 编译器：
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally we can execute the newly created application like we would any other
    executable:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以像运行其他任何可执行文件一样执行新创建的应用程序：
- en: '[PRE17]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: And we will be greeted with our `Hello, world!` message.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到我们的 `Hello, world!` 消息。
- en: Summary
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we looked at some of the different documentation that Apple
    and the Swift community offer. This documentation can be essential as you are
    learning Swift and also for reference once you have mastered the language itself.
    We also looked at how we can build and install Swift and its full toolchain. While
    using the latest build of Swift is not recommended for production systems, I usually
    keep a virtual machine or my desktop setup with a recent build. This enables me
    to use the latest features of the language and also run my code against it to
    make sure I am not introducing changes that are not compatible with future versions
    of the language.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了苹果公司和 Swift 社区提供的一些不同文档。当你学习 Swift 时，这些文档可能是必不可少的，而且在你掌握了这门语言之后，它们也可以作为参考。我们还探讨了如何构建和安装
    Swift 及其完整的工具链。虽然不建议在生产系统中使用 Swift 的最新构建版本，但我通常会在虚拟机或我的桌面设置中保留一个最近的构建版本。这使我能够使用语言的最新功能，并且可以运行我的代码以检查我是否引入了与语言未来版本不兼容的更改。
- en: In the next chapter, we will start to get into the language itself and we will
    see how to use variables and constants in Swift. We will also look at the various
    data types and how to use operators in Swift.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始深入了解这门语言本身，我们将看到如何在 Swift 中使用变量和常量。我们还将探讨各种数据类型以及如何在 Swift 中使用运算符。
