- en: Chapter 7. Continuous Integration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章. 持续集成
- en: Continuous Integration is one of the most used terminologies in today's software
    world. Wherever you go in the software world, everybody talks about continuous
    integration. So what is continuous integration?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成是当今软件世界中使用的术语之一。无论您在软件世界的哪个角落，每个人都在谈论持续集成。那么，什么是持续集成呢？
- en: Continuous Integration is the practice of integrating all of the software code
    in a shared repository; prepare an automated build for every commit, and run the
    automated tests without any manual effort. It helps developers to detect problems
    early in fail fast mode. Here, early means as soon as a developer commits the
    code; within a couple of seconds or minutes (as per the project size), continuous
    integration process will notify about the success or failure of the build. Since
    errors are caught in the early stages, it saves a lot of effort while performing
    integration and functional testing of the application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成是将共享仓库中的所有软件代码进行集成的实践；为每次提交准备自动构建，并运行自动测试而无需任何人工操作。它帮助开发者能够在快速失败模式下尽早发现问题。在这里，“尽早”意味着开发者提交代码后；根据项目规模，几秒钟或几分钟内，持续集成过程将通知构建的成功或失败。由于错误在早期阶段就被捕获，因此在执行应用程序的集成和功能测试时可以节省大量精力。
- en: In this chapter, we will explore the popular Continuous Integration tools, Jenkins
    and TeamCity. As this is a Gradle book, we will limit our discussion to basic
    setup and configuration for these tools. We will also introduce a new topic, code
    quality management with Gradle. We will learn how **Checkstyle**, **PMD**, and
    **Sonar Runner** plugins can be integrated with Gradle, and how it can be integrated
    with Continuous Integration tools.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨流行的持续集成工具Jenkins和TeamCity。由于这是一本Gradle书籍，我们将限制我们的讨论范围仅限于这些工具的基本设置和配置。我们还将介绍一个新主题，即使用Gradle进行代码质量管理。我们将学习如何将**Checkstyle**、**PMD**和**Sonar
    Runner**插件集成到Gradle中，以及如何将其与持续集成工具集成。
- en: Jenkins walk-through
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins快速入门
- en: Jenkins is one of the most popular open source continuous integration tools
    which helps to automate software build and the deployment process. It can work
    with build tools such as Maven, Gradle, and Ant. It supports various source code
    management systems such as CVS, Git, Subversion, and Perforce. Even simple shell
    or batch script execution is supported. The main advantage of Jenkins lies in
    its plugin support. There are more than 1000+ plugins for different functionalities,
    and if needed, it can be extended to support new requirements.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins是最受欢迎的开源持续集成工具之一，它有助于自动化软件构建和部署过程。它可以与Maven、Gradle和Ant等构建工具一起工作。它支持各种源代码管理系统，如CVS、Git、Subversion和Perforce。甚至支持简单的shell或批处理脚本执行。Jenkins的主要优势在于其插件支持。有超过1000多个插件用于不同的功能，如果需要，它可以扩展以支持新的需求。
- en: 'Some of the main features of Jenkins are:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins的一些主要特性包括：
- en: Easy to install and configure. Simple web-based UI for managing the server
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 易于安装和配置。简单的基于Web的UI用于管理服务器
- en: Support for a variety of plugins for different builds and deployment related
    tasks
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持各种插件，用于不同的构建和部署相关任务
- en: A very large community forum
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个非常大的社区论坛
- en: Support for different repositories like SVN, Git, CVS, and Perforce etc.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持SVN、Git、CVS、Perforce等不同存储库
- en: Support for post build hook
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持构建后钩子
- en: Jenkins installation
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Jenkins安装
- en: Jenkins installation is just a two-step process. You need to download `jenkins.war`
    from [http://jenkins-ci.org/](http://jenkins-ci.org/). You will always get the
    latest version from this URL. For any previous releases, click on the **past releases**
    option and decide which version you want.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins安装只需两个步骤。您需要从[http://jenkins-ci.org/](http://jenkins-ci.org/)下载`jenkins.war`文件。您将始终从这个URL获取最新版本。对于任何之前的版本，点击**过往版本**选项，并决定您想要哪个版本。
- en: 'Once the war file is downloaded, it can be deployed in a container such as
    Tomcat, or it can be executed using the following command:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 下载war文件后，它可以在Tomcat等容器中部署，或者可以使用以下命令执行：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, Jenkins started with an inbuilt Jetty container at 8080 port. Default
    Jenkins home directory will be set to `<USER_HOME>/.jenkins`. By setting the `JENKINS_HOME`
    environment variable, you can set it to any other location. This directory stores
    all the Jenkins related information such as job information, user account details,
    plugin information, and Jenkins general settings.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，Jenkins从内置的Jetty容器开始，端口为8080。默认的Jenkins主目录将被设置为`<USER_HOME>/.jenkins`。通过设置`JENKINS_HOME`环境变量，您可以将其设置为任何其他位置。此目录存储所有与Jenkins相关的信息，例如作业信息、用户账户详情、插件信息和Jenkins的一般设置。
- en: 'Now open a browser and type the following: `http://localhost:8080` and the
    Jenkins welcome page will be displayed. That is all. Jenkins is ready for you:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开浏览器并输入以下内容：`http://localhost:8080`，Jenkins欢迎页面将显示。这就完成了。Jenkins已为您准备好：
- en: '![Jenkins installation](img/B02000_07_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![Jenkins安装](img/B02000_07_01.jpg)'
- en: Figure 7.1
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1
- en: Since this is not a Jenkins user guide, we will not be covering Jenkins functionalities
    in detail. You can go through the tutorials available on Jenkins main website.
    We will be mostly covering the topics that will be helpful to automate the build
    process with Gradle.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这不是Jenkins用户指南，我们不会详细涵盖Jenkins的功能。您可以在Jenkins官方网站上查看可用的教程。我们将主要涵盖有助于使用Gradle自动化构建过程的主题。
- en: Jenkins configuration
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Jenkins配置
- en: Only installation is not enough for Jenkins to get started with the Gradle build
    process. We need to configure some plugins before we start with our first job
    in Jenkins. Like `task` in Gradle, the unit of execution in Jenkins is job. A
    build job can perform compilation, run automated tests, package or even deployment
    related tasks. But before we start working with jobs, we will configure the following
    plugins for Jenkins.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 仅安装不足以让Jenkins开始使用Gradle构建过程。在我们开始使用Jenkins的第一个作业之前，我们需要配置一些插件。在Gradle中像`task`一样，Jenkins的执行单元是作业。构建作业可以执行编译、运行自动化测试、打包甚至与部署相关的任务。但在我们开始处理作业之前，我们将为Jenkins配置以下插件。
- en: Gradle Plugin
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gradle插件
- en: Git Plugin (required if you are using Git as a repository)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git插件（如果您使用Git作为存储库，则必需）
- en: 'Click on the **Manage Jenkins** on the left-hand side vertical menu. You will
    find a list of different categories available. Click on **Manage Plugins**. You
    will find the following four tabs:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧垂直菜单中点击**管理Jenkins**。您将看到一个不同类别的列表。点击**管理插件**。您将找到以下四个标签页：
- en: '![Jenkins configuration](img/B02000_07_02.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![Jenkins配置](img/B02000_07_02.jpg)'
- en: Figure 7.2
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2
- en: 'Go to the **Available** tab and filter (top right) for `Gradle Plugin`. You
    will find Gradle Plugin with the following details:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 前往**可用**标签页，并筛选（右上角）为`Gradle插件`。您将找到具有以下详细信息的Gradle插件：
- en: '**Gradle Plugin**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**Gradle插件**'
- en: '**This plugin makes it possible to invoke Gradle build script as the main build
    step.**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**此插件使得能够将Gradle构建脚本作为主要构建步骤调用。**'
- en: Select the plugin and click on **Download now and Install after restart**. It
    is better to restart Jenkins after an installation, in order to avoid any issues.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 选择插件并点击**现在下载并在重启后安装**。在安装后重启Jenkins是一个好习惯，以避免任何问题。
- en: This will add Gradle build execution capability to the Jenkins server. You will
    be able to see a success message once installation is successful. You might get
    an error if the system is firewall protected, which can restrict the system when
    connecting to the internet. In such cases, manually download the plugin (`*.hpi`
    files) and copy it to `<Jenkins_home>/plugins` directory. Jenkins plugins can
    be downloaded from [https://updates.jenkins-ci.org/download/plugins/](https://updates.jenkins-ci.org/download/plugins/).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为Jenkins服务器添加Gradle构建执行能力。一旦安装成功，您将能够看到成功消息。如果系统受到防火墙保护，可能会出现错误，这可能会在连接到互联网时限制系统。在这种情况下，请手动下载插件（`*.hpi`文件）并将其复制到`<Jenkins_home>/plugins`目录。Jenkins插件可以从[https://updates.jenkins-ci.org/download/plugins/](https://updates.jenkins-ci.org/download/plugins/)下载。
- en: For the examples in this chapter, we are using GitHub as a repository. To work
    with GitHub, we will add the GitHub plugin to the Jenkins server. We can add it
    in the same way we added the Gradle plugin. If the plugin is dependent on other
    plugins, then Jenkins will automatically download the required plugins. You can
    observe this when we install the GitHub plugin. Jenkins automatically installs
    the other required plugins such as the Git client plugin, and the Git API Plugin.
    As mentioned earlier, some plugins might require the Jenkins server to be restarted.
    In such cases, stop the current process and restart the Jenkins server in order
    to make the plugin effective.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章的示例，我们使用GitHub作为仓库。要使用GitHub，我们将向Jenkins服务器添加GitHub插件。我们可以以添加Gradle插件相同的方式添加它。如果插件依赖于其他插件，那么Jenkins将自动下载所需的插件。当安装GitHub插件时，你可以观察到这一点。Jenkins自动安装其他所需的插件，如Git客户端插件和Git
    API插件。如前所述，某些插件可能需要重启Jenkins服务器。在这种情况下，停止当前进程并重启Jenkins服务器以使插件生效。
- en: The next important step is to configure JDK, Gradle, and Git with Jenkins. To
    configure these settings, open Jenkins URL and click on **Manage Jenkins**, and
    then **Configure System**.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个重要步骤是使用Jenkins配置JDK、Gradle和Git。要配置这些设置，打开Jenkins URL并点击**管理Jenkins**，然后**配置系统**。
- en: 'Enter the correct path to the JDK and save the settings. Jenkins also has an
    option to install the software automatically from the internet. Take a look at
    the following screenshot:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 输入JDK的正确路径并保存设置。Jenkins还有一个选项可以从互联网自动安装软件。请看以下截图：
- en: '![Jenkins configuration](img/B02000_07_03.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![Jenkins配置](img/B02000_07_03.jpg)'
- en: Figure 7.3
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.3
- en: 'Figure 7.4 shows how to configure Gradle in Jenkins:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.4显示了如何在Jenkins中配置Gradle：
- en: '![Jenkins configuration](img/B02000_07_04.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![Jenkins配置](img/B02000_07_04.jpg)'
- en: Figure 7.4
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.4
- en: Create job
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建任务
- en: After the Gradle plugin has been successfully installed, we will create the
    first Gradle build job. Go to Jenkins home page and click on **create new jobs**.
    There are different categories of jobs that can be created in Jenkins. We will
    create a **Freestyle project** in this example. For simplicity, we will build
    the plugin project that we created in [Chapter 4](ch04.html "Chapter 4. Plugin
    Management"), *Plugin Management*. A project can be created by simply giving it
    a name, such as `PluginProject`, as shown in Figure 7.5\. Also, try to avoid spaces
    in job names, as it is considered as a bad practice.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在Gradle插件成功安装后，我们将创建第一个Gradle构建任务。转到Jenkins主页并点击**创建新任务**。在Jenkins中可以创建不同类别的任务。在本例中，我们将创建一个**自由风格项目**。为了简单起见，我们将构建我们在[第4章](ch04.html
    "第4章。插件管理")中创建的插件项目，*插件管理*。只需给它一个名称，例如`PluginProject`，如图7.5所示。此外，尽量避免在任务名称中使用空格，因为这被认为是不良的做法。
- en: 'If you want words to be separated, you can use underscore(`_`):'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想单词之间有分隔，可以使用下划线（`_`）：
- en: '![Create job](img/B02000_07_05.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![创建任务](img/B02000_07_05.jpg)'
- en: Figure 7.5
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.5
- en: 'Once you click on **OK**, in the next page you will have to configure the job.
    You will have to configure a few details as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**确定**后，在下一页你将需要配置任务。你需要配置以下一些细节：
- en: Source code management location to download the project
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载项目的源代码管理位置
- en: Build step for the project
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目构建步骤
- en: Schedule the Build task (daily, hourly, after every commit etc.)
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安排构建任务（每日、每小时、每次提交后等）
- en: Put in any post build action to perform
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加任何构建后的操作以执行
- en: First, we will configure the repository under **Source Code Management**. As
    we are using the GitHub repository, we need to select the **Git** option.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在**源代码管理**下配置仓库。由于我们使用的是GitHub仓库，因此需要选择**Git**选项。
- en: '![Create job](img/B02000_07_06.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![创建任务](img/B02000_07_06.jpg)'
- en: Figure 7.6
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.6
- en: Provide the repository URL and add the authentication (username/password) using
    the **Credentials** option as configured in Figure 7.6.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**凭据**选项提供仓库URL，并添加认证（用户名/密码），如图7.6所示进行配置。
- en: 'Git executable must be set in the Jenkins system configuration, otherwise you
    will not be able to execute Git commands. If there is any issue with connecting
    to the URL, Jenkins will show you a proper error message. This helps to debug
    and resolve the issues. If the URL is validated to be successful, the next step
    is to choose the build options from one of the options displayed in the following
    figure:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Git可执行文件必须在Jenkins系统配置中设置，否则您将无法执行Git命令。如果连接到URL存在问题，Jenkins将显示适当的错误消息。这有助于调试和解决问题。如果验证URL成功，下一步是选择以下图中显示的选项之一中的构建选项：
- en: '![Create job](img/B02000_07_07.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![创建工作](img/B02000_07_07.jpg)'
- en: Figure 7.7
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.7
- en: For our project we have selected the option **Build when a change is pushed
    to GitHub**, which helps to validate every commit by running a build script. You
    can set any other option as per the build requirement.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的项目，我们选择了**当将更改推送到GitHub时构建**的选项，这有助于通过运行构建脚本来验证每个提交。您可以按照构建需求设置任何其他选项。
- en: 'The next step is to select a build tool for the project. From the options available,
    such as shell, Ant, and batch, we will select Gradle as the build tool for this
    project. This option is highlighted in the next figure:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是选择项目的构建工具。从可用的选项，如shell、Ant和批处理中，我们将选择Gradle作为此项目的构建工具。此选项在下图中突出显示：
- en: '![Create job](img/B02000_07_08.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![创建工作](img/B02000_07_08.jpg)'
- en: Figure 7.8
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.8
- en: 'Select the option **Invoke Gradle script** and configure a few basic parameters:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**调用Gradle脚本**选项并配置一些基本参数：
- en: '![Create job](img/B02000_07_09.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![创建工作](img/B02000_07_09.jpg)'
- en: Figure 7.9
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.9
- en: We have configured the installed Gradle on the system `gradle-2.4` as the working
    Gradle version. To build the `PluginProject`, tasks can be set as `clean build`
    in the **Tasks** text box. If the `build.gradle` file is in the home/root folder
    of the project, then you can leave the **Root Build Script** textbox empty. However,
    if it is in another directory, you will have to mention the path relative to the
    workspace location. Our `build.gradle` file is in the `Chapter7/PluginProject`
    folder. So we can enter the Root Build script as `${workspace}/Chapter7/PluginProject`.
    As we are using the build file name as `build.gradle`, which is the default naming
    convention in Gradle, we do not need to specify the file name in the **Build File**
    text box. If you are using any other build file name, it has to be mentioned in
    the **Build file** text box.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已将系统上安装的Gradle `gradle-2.4`配置为工作Gradle版本。要构建`PluginProject`，可以在**任务**文本框中将任务设置为`clean
    build`。如果`build.gradle`文件位于项目的home/root文件夹中，则可以保留**根构建脚本**文本框为空。然而，如果它在另一个目录中，您必须提及相对于工作区位置的路径。我们的`build.gradle`文件位于`Chapter7/PluginProject`文件夹中。因此，我们可以输入根构建脚本为`${workspace}/Chapter7/PluginProject`。由于我们使用的是构建文件名`build.gradle`，这是Gradle中的默认命名约定，因此我们不需要在**构建文件**文本框中指定文件名。如果您使用任何其他构建文件名，它必须在**构建文件**文本框中提及。
- en: You can also add **Post-build Actions** such as publish Java doc, send email
    notifications, build other projects as per the project requirements.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以添加**构建后操作**，例如发布Java文档、发送电子邮件通知、根据项目要求构建其他项目。
- en: 'Now, save the configurations and you will be able to see the project on the
    dashboard:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，保存配置，您将能够在仪表板上看到项目：
- en: '![Create job](img/B02000_07_10.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![创建工作](img/B02000_07_10.jpg)'
- en: Figure 7.10
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.10
- en: Execute job
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行工作
- en: Although we configured the build to be executed when a change is pushed to the
    source code management system, build can always be executed manually if you do
    not want to wait for changes to happen in the repository. Click on the **PluginProject**
    job on the Jenkins home page, which you had created earlier. You will be navigated
    to the job console at `http://localhost:8080/job/PluginProject/`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们已配置构建在将更改推送到源代码管理系统时执行，但如果您不想等待存储库中的更改发生，构建始终可以手动执行。点击Jenkins主页上您之前创建的**PluginProject**工作。您将被导航到`http://localhost:8080/job/PluginProject/`的工作控制台。
- en: '![Execute job](img/B02000_07_11.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![执行工作](img/B02000_07_11.jpg)'
- en: Figure 7.11
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.11
- en: 'On the job console, you will find the **Build Now** option on the left-hand
    side. Click on the option to execute the job manually. In the console page, you
    can configure the job at any time by selecting the **Configure** option. Once
    the job has been executed successfully, you will find similar output as displayed
    in Figure 7.12 by clicking the **build no** link in the **Build History** section:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在作业控制台，你将在左侧找到**构建现在**选项。点击此选项以手动执行作业。在控制台页面，你可以通过选择**配置**选项在任何时候配置作业。一旦作业成功执行，你将找到在**构建历史**部分的**构建编号**链接中显示的类似输出，如图7.12所示：
- en: '![Execute job](img/B02000_07_12.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![执行作业](img/B02000_07_12.jpg)'
- en: Figure 7.12
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.12
- en: 'Build history is displayed in the UI with the latest job execution status on
    top. Figure 7.13 shows that the 1st and 2nd execution failed with some error,
    but the 3rd execution was successful. In the **Build History** section, if a job
    has failed, it will be marked in red. For success, it is blue, and aborted jobs
    can be identified in gray:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 构建历史在UI中以最新的作业执行状态显示在顶部。图7.13显示第1次和第2次执行失败并出现某些错误，但第3次执行成功。在**构建历史**部分，如果作业失败，将以红色标记。对于成功，它是蓝色，而取消的作业可以以灰色识别：
- en: '![Execute job](img/B02000_07_13.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![执行作业](img/B02000_07_13.jpg)'
- en: Figure 7.13
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.13
- en: The default location for this job is `<USER_HOME>/.jenkins/jobs/<JOB_NAME>/workspace`.
    If you browse to `<USER_HOME>/.jenkins/jobs` location, you will find a directory
    created with a job name, that is `PluginProject`, which further contains `config.xml`
    for job configuration. The job directory has two further sub-directories, builds
    for executed jobs and workspace where the build actually runs. If you go inside
    the `builds` directory, you will find the build execution details for each run.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 此作业的默认位置是`<USER_HOME>/.jenkins/jobs/<JOB_NAME>/workspace`。如果你浏览到`<USER_HOME>/.jenkins/jobs`位置，你将找到一个以作业名称创建的目录，即`PluginProject`，它进一步包含用于作业配置的`config.xml`。作业目录有两个更进一步的子目录，`builds`用于已执行的作业，`workspace`是构建实际运行的地方。如果你进入`builds`目录，你将找到每次运行的构建执行详情。
- en: '![Execute job](img/B02000_07_14.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![执行作业](img/B02000_07_14.jpg)'
- en: Figure 7.14
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.14
- en: 'The workspace directory contains the project that we have configured for the
    job. Earlier in the build configuration, we specified the `Build Root` as `${workspace}/Chapter7/PluginProject`.
    Now if we go to this location, we will find the build folder created for this
    project:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 工作空间目录包含我们为作业配置的项目。在早期构建配置中，我们指定了`Build Root`为`${workspace}/Chapter7/PluginProject`。现在如果我们去这个位置，我们将找到为该项目创建的构建文件夹：
- en: '[PRE1]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is just a brief overview of Jenkins configuration. More details can be
    found at [https://jenkins-ci.org/](https://jenkins-ci.org/). In the next two sections,
    we will explore Checkstyle, PMD, and Sonar Runner plugins.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是Jenkins配置的简要概述。更多详细信息可以在[https://jenkins-ci.org/](https://jenkins-ci.org/)找到。在接下来的两个部分中，我们将探索Checkstyle、PMD和Sonar
    Runner插件。
- en: Checkstyle and PMD plugins
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Checkstyle和PMD插件
- en: We have seen how simple it is to create a Gradle build job in Jenkins. We will
    now add **Checkstyle** and **PMD** plugins to our project for quality checking
    purposes. There are different approaches that we can follow in order to use these
    plugins. We can directly add these plugins to Jenkins and run it for our project,
    or we can use Gradle Checkstyle and PMD plugins and evaluate the project.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到在Jenkins中创建Gradle构建作业是多么简单。现在我们将为质量检查目的向我们的项目添加**Checkstyle**和**PMD**插件。我们可以遵循不同的方法来使用这些插件。我们可以直接将这些插件添加到Jenkins并为其项目运行，或者我们可以使用Gradle
    Checkstyle和PMD插件并评估项目。
- en: 'We will use the Gradle approach to add Checkstyle and PMD plugins for code
    quality check, and execute this using Jenkins. Let''s create two Gradle files,
    one for Checkstyle and the other for PMD:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Gradle方法添加Checkstyle和PMD插件以进行代码质量检查，并使用Jenkins执行此操作。让我们创建两个Gradle文件，一个用于Checkstyle，另一个用于PMD：
- en: '`build_checkstyle.gradle`'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`build_checkstyle.gradle`'
- en: '[PRE2]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the build file, we have added additional configuration in the closure `checkstyle
    { … }`. If the source code does not pass the CheckStyle rules, it results in build
    failure. To ignore any build failure due to Checkstyle rule violation; we need
    to add the `ignoreFailures=true` property in the `checkstyle` closure.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建文件中，我们在`checkstyle { … }`闭包中添加了额外的配置。如果源代码未通过CheckStyle规则，将导致构建失败。为了忽略由于CheckStyle规则违反导致的任何构建失败，我们需要在`checkstyle`闭包中添加`ignoreFailures=true`属性。
- en: 'Checkstyle plugin provides the following tasks:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Checkstyle插件提供以下任务：
- en: '`checkstyleMain`: This executes Checkstyle against the Java source files'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`checkstyleMain`：这将对Java源文件执行Checkstyle'
- en: '`checkstyleTest`: This executes Checkstyle against the Java test source files'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`checkstyleTest`：这个任务会对 Java 测试源文件执行 Checkstyle。'
- en: '`checkstyleSourceSet`: This executes Checkstyle against the given source set''s
    Java source files'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`checkstyleSourceSet`：这个任务会对给定源集的 Java 源文件执行 Checkstyle。'
- en: 'For Checkstyle plugin, we need a `checkstyle.xml` file in the `<Project>/config/checkstyle/`
    directory. This is the default location. You can find a sample `checkstyle.xml`
    at: [https://github.com/google/google-api-java-client/blob/dev/checkstyle.xml](
    https://github.com/google/google-api-java-client/blob/dev/checkstyle.xml).'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Checkstyle 插件，我们需要在 `<Project>/config/checkstyle/` 目录中有一个 `checkstyle.xml`
    文件。这是默认位置。你可以在以下位置找到示例 `checkstyle.xml`：[https://github.com/google/google-api-java-client/blob/dev/checkstyle.xml](https://github.com/google/google-api-java-client/blob/dev/checkstyle.xml)。
- en: It provides a standard quality checks for projects. You can write customized
    `checkstyle.xml` for your requirements as well.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 它为项目提供了标准的质量检查。你也可以根据需求编写定制的 `checkstyle.xml`。
- en: 'To use PMD plugin, you can copy the above file and replace `checkstyle` closure
    with `pmd` closure and remove the `toolVersion` property. If you don''t specify
    a version, Gradle downloads PMD version 5.1.1 by default. You will also need to
    add apply plugin: `pmd`.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '要使用 PMD 插件，你可以复制上面的文件，并将 `checkstyle` 闭包替换为 `pmd` 闭包，并删除 `toolVersion` 属性。如果你没有指定版本，Gradle
    默认下载 PMD 版本 5.1.1。你还需要添加 `apply plugin: `pmd`。'
- en: '`build_pmd.gradle`'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`build_pmd.gradle`'
- en: '[PRE3]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'PMD plugin provides the following tasks:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: PMD 插件提供了以下任务：
- en: '`pmdMain`: This executes PMD against the Java source files.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pmdMain`：这个任务会对 Java 源文件执行 PMD。'
- en: '`pmdTest`: This executes PMD against the Java test source files.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pmdTest`：这个任务会对 Java 测试源文件执行 PMD。'
- en: '`pmdSourceSet`: This executes PMD against the given source set''s Java source
    files'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pmdSourceSet`：这个任务会对给定源集的 Java 源文件执行 PMD。'
- en: Both the Checkstyle and PMD plugins can be executed using `check` task.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Checkstyle 和 PMD 插件都可以使用 `check` 任务执行。
- en: If you add Checkstyle plugin and execute `check` task, it will call all checkstyle
    tasks
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你添加了 Checkstyle 插件并执行 `check` 任务，它将调用所有 Checkstyle 任务
- en: If you add PMD plugin and execute `check` tasks, it will execute `pmd` tasks
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你添加了 PMD 插件并执行 `check` 任务，它将执行 `pmd` 任务
- en: 'We will create a new project `QualityCheck` and add the following files to
    the project:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个新的项目 `QualityCheck` 并将以下文件添加到项目中：
- en: '`build_checkstyle.gradle`'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build_checkstyle.gradle`'
- en: '`build_pmd.gradle`'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build_pmd.gradle`'
- en: '`config/checkstyle/checkstyle.xml`'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config/checkstyle/checkstyle.xml`'
- en: Checkstyle and PMD plugin are executed in Java code, so we will add some sample
    Java files under the `src/main/java/` directory. To create a build step in Jenkins,
    we will create a build step to execute a Checkstyle task (`check` task), as shown
    in Figure 7.15\. You can repeat the same steps for PMD plugin.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Checkstyle 和 PMD 插件在 Java 代码中执行，因此我们将在 `src/main/java/` 目录下添加一些示例 Java 文件。为了在
    Jenkins 中创建构建步骤，我们将创建一个执行 Checkstyle 任务（`check` 任务）的构建步骤，如图 7.15 所示。你也可以为 PMD
    插件重复相同的步骤。
- en: For a new configuration, `Root Build script` is set to `${workspace}/Chapter7/QualityCheck`.
    Also, we added the **Build file** name in the text box as `build_checkstyle.gradle`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 对于新的配置，`Root Build script` 设置为 `${workspace}/Chapter7/QualityCheck`。同时，我们在文本框中添加了
    **Build file** 名称，为 `build_checkstyle.gradle`。
- en: '![Checkstyle and PMD plugins](img/B02000_07_15.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![Checkstyle 和 PMD 插件](img/B02000_07_15.jpg)'
- en: Figure 7.15
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.15
- en: Save this configuration and execute the job again. As configured, `build_checkstyle.gradle`
    file executed on java source code and generated CheckStyle reports for it. You
    can find the reports under `${workspace}\Chapter7\QualityCheck\build\reports\checkstyle\main.xml`
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 保存此配置并再次执行作业。按照配置，`build_checkstyle.gradle` 文件在 Java 源代码上执行，并为其生成了 CheckStyle
    报告。你可以在 `${workspace}\Chapter7\QualityCheck\build\reports\checkstyle\main.xml`
    下找到这些报告。
- en: The Sonar Runner plugin
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Sonar Runner 插件
- en: Sonar is one of the most popular quality management tools which gives complete
    analysis of a project in terms of lines of code, documentation, test coverage,
    issues and complexities. Gradle provides seamless integration with Sonar. The
    only prerequisite is that sonar server should be installed and running. Details
    on Sonar can be found at [http://www.sonarqube.org/](http://www.sonarqube.org/).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Sonar 是最受欢迎的质量管理工具之一，它从代码行数、文档、测试覆盖率、问题和复杂性等方面对项目进行全面的分析。Gradle 提供了与 Sonar 的无缝集成。唯一的前提是
    Sonar 服务器应该已安装并运行。有关 Sonar 的详细信息，请参阅 [http://www.sonarqube.org/](http://www.sonarqube.org/)。
- en: To run sonar runner plugin, we just need to apply plugin `sonar-runner` and
    configure it to connect to the sonar server.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行 Sonar Runner 插件，我们只需应用插件 `sonar-runner` 并将其配置为连接到 Sonar 服务器。
- en: 'Create build file `build_sonar.gradle` for your project with the following
    contents:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 为您的项目创建名为`build_sonar.gradle`的构建文件，内容如下：
- en: '[PRE4]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The preceding configuration is self-explanatory. You need to add configurations
    such as Sonar URL, DB URL, JDBC driver details. Our build file is ready. The next
    step is to configure a job in the Jenkins server. To configure `sonarRunner` task
    in Jenkins, we can add a few basic steps as shown in Figure 7.16:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置是自我解释的。您需要添加诸如Sonar URL、DB URL、JDBC驱动程序详细信息之类的配置。我们的构建文件已准备就绪。下一步是在Jenkins服务器上配置一个作业。要在Jenkins中配置`sonarRunner`任务，我们可以添加几个基本步骤，如图7.16所示：
- en: '![The Sonar Runner plugin](img/B02000_07_16.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![The Sonar Runner plugin](img/B02000_07_16.jpg)'
- en: Figure 7.16
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.16
- en: 'Here, the task name is `sonarRunner` and the build file name is `build_sonar.gradle`.
    Now, execute this job in Jenkins and you will find the output in the console.
    The output contains a link to the Sonar server. You can follow the link, which
    will redirect you to the Sonar report, as displayed in Figure 7.17:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，任务名称是`sonarRunner`，构建文件名称是`build_sonar.gradle`。现在，在Jenkins中执行此作业，您将在控制台找到输出。输出包含一个指向Sonar服务器的链接。您可以点击链接，它将重定向到如图7.17所示的Sonar报告：
- en: '![The Sonar Runner plugin](img/B02000_07_17.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![The Sonar Runner plugin](img/B02000_07_17.jpg)'
- en: Figure 7.17
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.17
- en: As mentioned preceding, Sonar gives an analysis of the project in different
    areas and you can find the details in the Sonar UI.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Sonar对项目在不同区域进行分析，您可以在Sonar UI中找到详细信息。
- en: TeamCity walk-through
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TeamCity walk-through
- en: 'In the previous section, we learned how to configure a Gradle project in Jenkins
    and how to integrate quality plugins. In this section, we will explore one more
    popular continuous integration tool, TeamCity. We are assuming that TeamCity is
    already installed and running on your machine. Therefore, we will skip the TeamCity
    installation and configuration details. Actually, the installation process is
    very simple and it can be completed in a few minutes. You can download TeamCity
    from the following URL: [https://www.jetbrains.com/teamcity/download/](https://www.jetbrains.com/teamcity/download/)
    and installation instructions are available at [https://confluence.jetbrains.com/display/TCD9/Installation](https://confluence.jetbrains.com/display/TCD9/Installation).'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们学习了如何在Jenkins中配置Gradle项目以及如何集成质量插件。在本节中，我们将探索另一个流行的持续集成工具，TeamCity。我们假设TeamCity已经安装并运行在您的机器上。因此，我们将跳过TeamCity的安装和配置细节。实际上，安装过程非常简单，可以在几分钟内完成。您可以从以下URL下载TeamCity：[https://www.jetbrains.com/teamcity/download/](https://www.jetbrains.com/teamcity/download/)，安装说明可在[https://confluence.jetbrains.com/display/TCD9/Installation](https://confluence.jetbrains.com/display/TCD9/Installation)找到。
- en: By default, TeamCity runs on `http://localhost:8111/` and it has one build agent
    that runs on the server. We will build the same plugin project using TeamCity.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，TeamCity在`http://localhost:8111/`上运行，并且有一个在服务器上运行的构建代理。我们将使用TeamCity构建相同的插件项目。
- en: 'Log in to TeamCtiy and click on Create a project. Provide a project name and
    description:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 登录TeamCtiy并点击创建项目。提供项目名称和描述：
- en: '![TeamCity walk-through](img/B02000_07_18.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![TeamCity walk-through](img/B02000_07_18.jpg)'
- en: Figure 7.18
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.18
- en: 'Save and then click on the **Create Build Configuration** button. You will
    need to provide general settings for the project. After general settings, proceed
    to **Version Control Settings**:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 保存后，然后点击**创建构建配置**按钮。您需要为项目提供常规设置。在常规设置之后，继续到**版本控制设置**：
- en: '![TeamCity walk-through](img/B02000_07_19.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![TeamCity walk-through](img/B02000_07_19.jpg)'
- en: Figure 7.19
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.19
- en: 'The next step is to configure **Create and attach new VCS root**. Choose Git
    from the drop down, since we are using Git as a repository, as shown in Figure
    7.20:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是配置**创建和附加新的VCS根**。从下拉菜单中选择Git，因为我们使用Git作为存储库，如图7.20所示：
- en: '![TeamCity walk-through](img/B02000_07_20.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![TeamCity walk-through](img/B02000_07_20.jpg)'
- en: Figure 7.20
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.20
- en: Provide **General settings** and the **Fetch URL** of the plugin project, also
    provide authentication, such as username/password and the Git exe location in
    **Path To Git**.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 提供插件项目的**常规设置**和**获取URL**，也提供认证，如用户名/密码和Git可执行文件的位置在**Git路径**中。
- en: At the end of the screen, click on **Test Connection**. If the connection is
    successful, click on **Save**. The next step is **Add Build Step**.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在屏幕末尾，点击**测试连接**。如果连接成功，点击**保存**。下一步是**添加构建步骤**。
- en: 'In the build step, you need to configure the **PluginProject** build file details
    and build tasks details. For example, we need to provide some basic information
    such as `clean build` for task, working directory as `Chapter7/PluginProject`,
    and Gradle and JDK home directory:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建步骤中，您需要配置**PluginProject**构建文件细节和构建任务细节。例如，我们需要提供一些基本信息，如任务的`clean build`，工作目录为`Chapter7/PluginProject`，以及Gradle和JDK的主目录：
- en: '![TeamCity walk-through](img/B02000_07_21.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![TeamCity 演示](img/B02000_07_21.jpg)'
- en: Figure 7.21
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.21
- en: 'Save this configuration and the project will then be ready. The details of
    the build step can be reviewed in the build configuration screen, as shown in
    the following screenshot:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 保存此配置，然后项目将准备就绪。构建步骤的详细信息可以在构建配置屏幕中查看，如下面的截图所示：
- en: '![TeamCity walk-through](img/B02000_07_22.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![TeamCity 演示](img/B02000_07_22.jpg)'
- en: Figure 7.22
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.22
- en: TeamCity executes the project through TeamCity Agents. TeamCity server installs
    an agent with the server. You can use this agent to execute the job. Otherwise,
    you can configure more agents through the **Agents** tab.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: TeamCity通过TeamCity代理执行项目。TeamCity服务器与服务器一起安装了一个代理。您可以使用此代理来执行作业。否则，您可以通过**代理**选项卡配置更多代理。
- en: '![TeamCity walk-through](img/B02000_07_23.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![TeamCity 演示](img/B02000_07_23.jpg)'
- en: Figure 7.23
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.23
- en: Once the agent is configured and connected, you can map the project with the
    build agent and you are ready to run the build job.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦配置并连接了代理，您就可以将项目与构建代理映射，然后您就可以运行构建作业了。
- en: '![TeamCity walk-through](img/B02000_07_24.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![TeamCity 演示](img/B02000_07_24.jpg)'
- en: Figure 7.24
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.24
- en: On clicking on the **Run** button, TeamCity server will execute the build job
    on mapped agent, and you can see the output of the build job as a success or failure.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**运行**按钮后，TeamCity服务器将在映射的代理上执行构建作业，您可以看到构建作业的成功或失败输出。
- en: 'In the **Build Log** console, you can also analyze the complete log, as shown
    in the following screenshot:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在**构建日志**控制台中，您还可以分析完整的日志，如下面的截图所示：
- en: '![TeamCity walk-through](img/B02000_07_25.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![TeamCity 演示](img/B02000_07_25.jpg)'
- en: Figure 7.25
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.25
- en: Summary
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we discussed briefly the need for continuous integration in
    the software development world, and looked into the two most popular continuous
    integration tools, Jenkins and TeamCity. In this chapter, we learned how easy
    it is to configure these tools and how we can integrate Gradle with these CI tools.
    We also learned three different quality plugins of Gradle: Checkstyle, PMD and
    Sonar Runner. And we executed these quality tasks with the help of Jenkins. There
    are so many topics to learn in Continuous Integration, Jenkins or TeamCity. Unfortunately,
    we won''t be able to take up those topics in this book. We strongly recommend
    readers to do further reading in every area left uncovered.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们简要讨论了软件开发世界中持续集成的需求，并探讨了两个最受欢迎的持续集成工具：Jenkins和TeamCity。在本章中，我们学习了如何轻松配置这些工具以及如何将Gradle与这些CI工具集成。我们还学习了Gradle的三个不同质量插件：Checkstyle、PMD和Sonar
    Runner。我们借助Jenkins执行了这些质量任务。在持续集成、Jenkins或TeamCity中还有许多主题需要学习。不幸的是，我们无法在本书中涵盖所有这些主题。我们强烈建议读者在每个未覆盖的领域进行进一步阅读。
- en: In the next chapter, we will discuss different migration strategies from Ant
    and Maven to Gradle. This will help to migrate existing Ant or Maven scripts to
    Gradle.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论从Ant和Maven到Gradle的不同迁移策略。这将有助于将现有的Ant或Maven脚本迁移到Gradle。
