- en: Chapter 3. Navigating the App Inventor Platform
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。导航App Inventor平台
- en: 'Now that you have created a new project and set up connectivity, you are ready
    to begin learning how to make mobile apps! This chapter will provide a step-by-step
    guide to navigate the App Inventor web application through the process of building
    a game app called Fling. You will be using:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了一个新项目并设置了连接，你准备好开始学习如何制作移动应用了！本章将提供一步一步的指南，通过构建一个名为Fling的游戏应用的过程来导航App
    Inventor网络应用。你将使用：
- en: The Projects View
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目视图
- en: The Designer (a graphical user interface)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计师（一个图形用户界面）
- en: Palette
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面板
- en: Viewer
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看器
- en: Components
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件
- en: Properties
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性
- en: The Blocks Editor (a visual programming language)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 块编辑器（一种可视化编程语言）
- en: The Integrated Development Environment (IDE)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成开发环境（IDE）
- en: The projects view
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目视图
- en: In [Chapter 2](part0017_split_000.html#G6PI2-9c0b907946184095a315b26c8a9b12bc
    "Chapter 2. Setting Up MIT App Inventor 2"), *Setting Up MIT App Inventor 2*,
    you logged into App Inventor for the first time, created a new project, and named
    it, so at the moment, you only have one App Inventor project. Once you start building
    more apps, all of the projects associated with your Google Account will be listed
    under My Projects. Every time you log into App Inventor, the platform will automatically
    open the most recent project that you worked on. To pick a different project,
    click on **My Projects** in the top menu bar, or to start a new project, click
    on **Start new project** in the upper left corner.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](part0017_split_000.html#G6PI2-9c0b907946184095a315b26c8a9b12bc "第2章。设置MIT
    App Inventor 2")中，*设置MIT App Inventor 2*，你第一次登录App Inventor，创建了一个新项目，并为其命名，因此目前你只有一个App
    Inventor项目。一旦你开始构建更多应用程序，所有与你的Google账户关联的项目都将列在“我的项目”下。每次你登录App Inventor，平台都会自动打开你最近工作的项目。要选择不同的项目，请点击顶部菜单栏中的**我的项目**，或者要开始一个新项目，请点击屏幕左上角的**开始新项目**。
- en: '![The projects view](img/00047.jpeg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![项目视图](img/00047.jpeg)'
- en: Creating a new project
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建新项目
- en: We're going to build a game in this chapter. It will be similar to Pong, but
    instead of a paddle, you will use your finger to fling the ball. Let's create
    a new project called `Fling`. Note that project names containing no spaces must
    start with a letter. Use only letters, underscores, and numbers. Click on **Start
    new project** in the upper-left corner of the screen. A pop-up window will appear,
    as shown in the following screenshot. Type in the word **Fling**. Once you click
    on **OK**, you will be taken into the Designer.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中构建一个游戏。它将与Pong类似，但你会用手指来弹球而不是使用球拍。让我们创建一个名为`Fling`的新项目。请注意，不包含空格的项目名称必须以字母开头。只能使用字母、下划线和数字。点击屏幕左上角的**开始新项目**。会出现一个弹出窗口，如下面的截图所示。输入单词**Fling**。一旦你点击**确定**，你将被带到设计师界面。
- en: '![Creating a new project](img/00048.jpeg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![创建新项目](img/00048.jpeg)'
- en: 'If you happen to have a previous project open in the Designer, you can still
    start a new project in this view by clicking on **Start new project** listed under
    **Projects** in the top menu bar, as shown in the following screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你恰好已经在设计师中打开了一个项目，你仍然可以通过点击顶部菜单栏中列出的**项目**下的**开始新项目**来在这个视图中开始一个新项目，如下面的截图所示：
- en: '![Creating a new project](img/00049.jpeg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![创建新项目](img/00049.jpeg)'
- en: The Designer
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计师
- en: 'When you open a project or start a new project, App Inventor will take you
    to the Designer. This window is a graphical editor where you can create the look
    and feel of your mobile app by choosing components (buttons, labels, images, and
    so on), layouts (horizontal/vertical alignments), colors, fonts, and more. The
    next screenshot is a layout of the Designer (with some helpful navigation hints):'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当你打开一个项目或开始一个新项目时，App Inventor会带你进入设计师。这个窗口是一个图形编辑器，你可以通过选择组件（按钮、标签、图片等）、布局（水平/垂直对齐）、颜色、字体等方式来创建你的移动应用的外观和感觉。下一张截图是设计师的布局（包含一些有用的导航提示）：
- en: '![The Designer](img/00050.jpeg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![设计师](img/00050.jpeg)'
- en: The name of the open project is displayed in the upper-left corner. In the upper-right
    corner, you will see toggle buttons for the **Designer** and **Blocks** Editor
    (the **Designer** button is disabled at the moment, since we are currently in
    the Designer view). The Designer consists of five panels, which are explained
    as follows.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 打开项目的名称显示在左上角。在右上角，你会看到**设计师**和**块编辑器**（**设计师**按钮目前处于禁用状态，因为我们目前处于设计师视图）的切换按钮。设计师由五个面板组成，以下将逐一解释。
- en: Palette
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 面板
- en: The **Palette** (found in the left-hand column of the previous Designer image)
    contains drawers that hold sets of tools called **Components**. Drawers group
    **Components** by type such as **User Interface**, **Layout**, **Media**, **Drawing
    and Animation**, **Sensors**, **Social**, **Storage**, **Connectivity**, and **LEGO
    MINDSTORMS**. It will take a little bit of time to remember which drawer houses
    which Components and what functions they have. More on Components later!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**调色板**（位于前一个设计师图像的左侧列）包含一些抽屉，这些抽屉中存放着称为**组件**的工具集。抽屉根据类型如**用户界面**、**布局**、**媒体**、**绘图和动画**、**传感器**、**社交**、**存储**、**连接性**和**乐高Mindstorms**对**组件**进行分组。记住哪个抽屉存放哪些组件以及它们的功能需要一点时间。关于组件的更多内容将在后面介绍！'
- en: Viewer
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看器
- en: The **Viewer** (found in the middle of the preceding Designer image) is the
    white workspace in the middle of the Designer window. When you first create a
    project, the default workspace name is **Screen1**. You cannot change the name
    of Screen1, although you can change the title of the screen name. This can be
    done in the **Properties** panel (as follows). The new screen name will be displayed
    in the Viewer and be seen by app users. Later, you may want to add more screens
    to your app and you can rename the subsequent screens. To build your app, you
    will drag Components from the Palette drawers onto the Viewer. We will be using
    visual components in our Fling app, so these will remain visible when dragged
    into the Viewer. In the subsequent chapters, we will demonstrate the use of non-visible
    components, which will not remain in the Viewer when added. Instead, they will
    be housed underneath the Viewer.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**查看器**（位于前一个设计师图像的中间）是设计师窗口中间的白色工作区。当你首次创建项目时，默认的工作区名称是**Screen1**。你不能更改Screen1的名称，尽管你可以更改屏幕标题。这可以在**属性**面板中完成（如下所示）。新的屏幕名称将在查看器中显示，并被应用程序用户看到。稍后，你可能想要向你的应用程序添加更多屏幕，并且你可以重命名后续的屏幕。要构建你的应用程序，你需要将组件从调色板抽屉拖动到查看器中。在我们的Fling应用程序中，我们将使用视觉组件，因此当它们被拖动到查看器中时，它们将保持可见。在随后的章节中，我们将演示非可视组件的使用，这些组件在添加时不会保留在查看器中，而是位于查看器下方。'
- en: Components
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组件
- en: Components are the tools located in the **Palette** drawers on the left-hand
    side of the Designer window (we will demonstrate what different components do
    once we start building apps). Once Components are dragged into the Viewer, they
    will also appear in the Components panel (found in the middle right of the Designer
    image). The Components panel lists Components and organizes them by screens. You
    can collapse and expand the screen Component contents for convenience. Components
    are listed in columns so that it is easy to see whether they exist on their own
    or within other Components.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 组件位于设计师窗口左侧的**调色板**抽屉中（一旦我们开始构建应用程序，我们将演示不同组件的功能）。一旦组件被拖动到查看器中，它们也会出现在组件面板中（位于设计师图像的中间右侧）。组件面板列出组件，并按屏幕组织它们。你可以根据需要折叠和展开屏幕组件内容。组件按列列出，这样就可以很容易地看出它们是否独立存在或包含在其他组件中。
- en: To illustrate that some Components are inside other Components, the Components
    panel will display them in a nested (indented) list. Note that when you click
    on a Component in the Viewer, it will be highlighted in both the Viewer and the
    Components panel and display editable options in the **Properties** panel (described
    in the following section). And conversely, if you click on a Component in the
    Components panel, it will also be highlighted in the Viewer. Once a Component
    is clicked and it becomes active, you can either rename or delete it by clicking
    the **Rename** or **Delete** button or you can view or edit its settings in the
    Properties panel.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明一些组件位于其他组件内部，组件面板将以嵌套（缩进）列表的形式显示它们。请注意，当你点击查看器中的组件时，它将在查看器和组件面板中突出显示，并在**属性**面板（在下一节中描述）中显示可编辑选项。相反，如果你在组件面板中点击一个组件，它也会在查看器中突出显示。一旦点击组件并使其变为活动状态，你可以通过点击**重命名**或**删除**按钮来重命名或删除它，或者你可以在属性面板中查看或编辑其设置。
- en: Properties
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性
- en: The **Properties** panel (found in the right-hand side column of the preceding
    Designer image) displays a set of configurable settings (such as size, color,
    and alignments) for each **Screen** and **Component** added to the **Viewer**.
    In the subsequent chapters, you will be adding more and more Components (and Screens),
    so make certain that the correct item is highlighted before you change its settings.
    The name of the active Component (or Screen) appears at the top of the Properties
    pane (in the earlier Designer screenshot, the active **Property** is **Screen1**
    as indicated at the top of the **Properties** panel).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**属性**面板（位于前面设计师图像的右侧列中）显示了一组可配置的设置（例如大小、颜色和对齐方式），用于**查看器**中添加的每个**屏幕**和**组件**。在随后的章节中，你将添加越来越多的组件（和屏幕），所以在更改其设置之前，请确保正确地突出显示了项目。活动组件（或屏幕）的名称出现在属性面板的顶部（在早期设计师截图的属性面板顶部，活动**属性**是**Screen1**，如属性面板顶部所示）。'
- en: Media
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 媒体
- en: The **Media** panel is located underneath the Components panel (see the Designer
    screenshot). This feature enables you to upload images, sound files, or other
    media files from your computer to your project. If you find a *creative commons*
    (freely shared, uncopyrighted) photo online that you'd like to use in your app,
    you must first download it and then click on the **Upload** File button in the
    media panel (you cannot download an image from the Internet directly into the
    App Inventor). Once the file is uploaded, it will be listed in both the **Media**
    panel and the Properties panel (to delete media files, click on the media file
    name and a popup will appear to delete the file). Note that even though the media
    files can also be added to the Properties panel, they cannot be deleted from the
    Properties panel. How to use an image, sound, or video file in your app will be
    explained in the future chapters.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**媒体**面板位于**组件**面板下方（见设计师截图）。此功能允许你从你的电脑上传图片、声音文件或其他媒体文件到你的项目中。如果你在网上找到一个你想要在应用中使用但属于*创意共享*（免费共享，无版权）的图片，你必须首先下载它，然后点击媒体面板中的**上传**文件按钮（你不能直接从互联网下载图片到App
    Inventor）。一旦文件上传，它将同时在**媒体**面板和**属性**面板中列出（要删除媒体文件，点击媒体文件名，将出现一个弹出窗口以删除文件）。请注意，尽管媒体文件也可以添加到属性面板，但它们不能从属性面板中删除。如何在应用中使用图片、声音或视频文件将在未来的章节中解释。'
- en: Creating a game app
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建游戏应用
- en: You've already logged into App Inventor with your Google Account, created a
    new project, named it Fling, and learned how to navigate the Designer screen.
    It's time to create your first mobile app!
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经使用你的谷歌账户登录了App Inventor，创建了一个新的项目，将其命名为Fling，并学习了如何导航设计师屏幕。是时候创建你的第一个移动应用了！
- en: Tip
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Since this is a tutorial, we will explain the way to play our game. But, if
    you were starting from scratch to create your own game, you would want to make
    sure that you've put in the time, effort, and energy to figure out what you want
    it to do and what you want it to look like. We outlined the design process for
    mobile app creation in [Chapter 1](part0014_split_000.html#DB7S2-9c0b907946184095a315b26c8a9b12bc
    "Chapter 1. Unleashing Creativity with MIT App Inventor 2"), *Unleashing Creativity
    with MIT App Inventor 2*. This may be a good time to review it.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个教程，我们将解释如何玩我们的游戏。但是，如果你是从零开始创建自己的游戏，你想要确保你已经投入了时间、精力和努力来弄清楚你想要它做什么以及你想要它看起来像什么。我们在[第1章](part0014_split_000.html#DB7S2-9c0b907946184095a315b26c8a9b12bc
    "第1章. 使用MIT App Inventor 2释放创造力")中概述了移动应用创建的设计过程，*使用MIT App Inventor 2释放创造力*。现在可能是复习它的好时机。
- en: 'The object of the Fling game app is to fling a moving ball with your finger
    to prevent it from hitting the bottom edge of the screen and ending the game.
    When the Play button is clicked, the ball will start moving from top to bottom.
    If it hits the bottom edge of the screen before the user flings it away, the game
    will stop and a **Game Over** notice will appear on the screen. The **Reset**
    button resets the ball to the top of the screen and the **Play** button starts
    another round. In this game, you will learn to design the user interface using
    these Components: a ball, a canvas (the game board), a horizontal layout, buttons,
    and a label. You will learn to program:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Fling 游戏应用的目标是使用手指将移动的球体抛出，以防止它撞击屏幕底部并结束游戏。当点击播放按钮时，球体将从顶部开始向下移动。如果用户在将其抛出之前，球体撞击到屏幕底部边缘，游戏将停止，屏幕上会出现**游戏结束**通知。**重置**按钮将球体重置到屏幕顶部，**播放**按钮开始新一轮游戏。在这个游戏中，你将学习使用以下组件来设计用户界面：球体、画布（游戏板）、水平布局、按钮和标签。你将学习编程：
- en: An animated object (ball) that moves randomly
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个随机移动的动画对象（球体）
- en: Conditions where the ball will respond to a screen touch
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 球体对屏幕触摸做出响应的条件
- en: An end-game mechanism when the ball touches the bottom of the screen
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当球体触摸屏幕底部时，游戏结束的机制
- en: A game over display when the game ends
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏结束时显示游戏结束信息
- en: A button that starts the game by moving the ball downward
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个按钮，通过将球体向下移动来开始游戏
- en: A button that resets the game by repositioning the ball at the top of the screen
    and erases the "game over" display
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个按钮，通过将球体重新定位到屏幕顶部并擦除“游戏结束”显示来重置游戏
- en: As you build your app, you will see your progress unfold on your mobile device
    or emulator in real time using the **IDE** (**Integrated Development Environment**).
    Let's get started!
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当你构建你的应用时，你将实时在你的移动设备或模拟器上看到你的进度展开，使用**IDE**（**集成开发环境**）。让我们开始吧！
- en: Creating the UI in designer
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在设计师中创建 UI
- en: 'The first thing you will notice in a new project is that Screen1 automatically
    exists in the Viewer. As shown in the following screenshot, the name Screen1 appears
    in three places: in the **Viewer**, the **Components** panel, and the Properties
    panel. Note that this is also true for any component added to the Viewer. When
    a component is highlighted (as shown with a light green box) in the Components
    panel, you will see the corresponding properties for it in the Properties panel.
    While the name Screen1 is not editable, the properties associated with Screen1
    are such as the title, although we won''t be changing the Screen1 Properties in
    Fling.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个新项目中，你首先会注意到 Screen1 自动存在于查看器中。如图下所示，Screen1 的名称出现在三个地方：在**查看器**中、**组件**面板和**属性**面板中。请注意，这也适用于任何添加到查看器的组件。当一个组件在组件面板中被突出显示（如图中用浅绿色框所示）时，你将在属性面板中看到与之对应的属性。虽然
    Screen1 的名称不可编辑，但与 Screen1 相关的属性，如标题，尽管我们不会在 Fling 中更改 Screen1 的属性。
- en: '![Creating the UI in designer](img/00051.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![在设计师中创建 UI](img/00051.jpeg)'
- en: 'To create a game interface for the Fling app, we will:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要为 Fling 应用创建游戏界面，我们将：
- en: Add the canvas Component to **Screen1**.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将画布组件添加到**Screen1**。
- en: 'Click on the Palette drawer: **Drawing and Animation**. It will open to reveal
    three components: **Canvas**, **ImageSprite**, and **Ball**.'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击调色板抽屉：**绘图和动画**。它将展开以显示三个组件：**画布**、**ImageSprite**和**球体**。
- en: Click on **Canvas** and drag it to the **Viewer**, as shown in the following
    screenshot:![Creating the UI in designer](img/00052.jpeg)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**画布**并将其拖动到**查看器**中，如图下所示：![在设计师中创建 UI](img/00052.jpeg)
- en: Your Designer window will look like the following screenshot. The Canvas component
    will automatically be named **Canvas1** in the Components panel. If you were to
    add another Canvas, it would automatically be named Canvas2\. It is possible to
    rename Canvas1, although we are not going to for this tutorial, since it is aptly
    named. You can see that it is active (as it is highlighted with a light green
    box) in both the **Viewer** and the **Components** panel. Being active means that
    you are able to see and edit its properties in the **Properties** panel.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你的设计师窗口将看起来像以下截图。画布组件将自动在组件面板中命名为**Canvas1**。如果你要添加另一个画布，它将自动命名为 Canvas2。虽然我们不会在这个教程中重命名
    Canvas1，因为它已经有一个合适的名字。你可以看到它在**查看器**和**组件**面板中都是活动的（因为它被浅绿色框突出显示）。活动意味着你能够在属性面板中看到并编辑其属性。
- en: '![Creating the UI in designer](img/00053.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![在设计师中创建 UI](img/00053.jpeg)'
- en: The Canvas is going to hold our Ball component, so we need to make it fill the
    whole screen not just a tiny part of the screen like it is now. To change the
    size of the Canvas, go to the **Properties** panel and click on the white text
    box below the **Height** element (currently filled with the word Automatic). A
    pop-up box will offer choices with radio buttons, as shown in the following screenshot.
    Click on the radio button next to **Fill Parent**. Click on the **OK** button.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 画布将容纳我们的球体组件，因此我们需要将其大小调整为整个屏幕，而不仅仅是现在这样的一小部分屏幕。要更改画布的大小，转到**属性**面板并点击**高度**元素下方的白色文本框（目前填写着单词自动）。将弹出一个带有单选按钮的选择框，如图所示。点击**填充父级**旁边的单选按钮。点击**确定**按钮。
- en: '![Creating the UI in designer](img/00054.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![在设计师中创建UI](img/00054.jpeg)'
- en: Repeat these steps for the **Width**. You will see that the Canvas now fills
    the entire Viewer. Next we will change the color. At the top of the **Properties**
    panel, click on the word **White** underneath **BackgroundColor**. A drop-down
    list of colors will appear (not shown); select **Gray**. The Designer window should
    now look like the following screenshot with the gray canvas filling up the entire
    Viewer.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 重复这些步骤来设置**宽度**。你会看到画布现在填满了整个查看器。接下来我们将更改颜色。在**属性**面板的顶部，点击**背景颜色**下方的单词**白色**。将出现一个颜色下拉列表（未显示）；选择**灰色**。设计师窗口现在应该看起来像以下截图，灰色画布填满了整个查看器。
- en: '![Creating the UI in designer](img/00055.jpeg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![在设计师中创建UI](img/00055.jpeg)'
- en: 'Next, we will add a ball. Go back to the **Drawing and Animation** Capitalize
    Palette drawer, click on **Ball**, and drag it to the **Canvas** in the Viewer,
    as shown in the following screenshot:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加一个球体。回到**绘图和动画**资本调色板抽屉，点击**球体**，并将其拖动到查看器中的**画布**上，如图所示：
- en: '![Creating the UI in designer](img/00056.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![在设计师中创建UI](img/00056.jpeg)'
- en: The Ball will end up on the Canvas wherever you drop it. It is named Ball1 in
    the Components panel. Notice how Ball1 appears nested (indented) in the Components
    panel list. This is because you placed it within another component, the Canvas1.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 球体将落在画布上的任何位置，你在组件面板中可以看到它被命名为Ball1。注意Ball1如何在组件面板列表中嵌套（缩进）。这是因为你将其放置在另一个组件内部，即Canvas1。
- en: You can position the ball's starting location, size, and color in the Properties
    panel. Since **Ball1** is already active, you can begin editing the options in
    the **Properties** panel. Change the settings to match those shown in the following
    screenshot. We will actually end up changing the ball's starting position once
    we start programming, but this is just to get you familiar with the features available
    in the Properties panel.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在属性面板中定位球体的起始位置、大小和颜色。由于**Ball1**已经处于活动状态，你可以开始编辑**属性**面板中的选项。将设置更改为与以下截图所示匹配。实际上，一旦我们开始编程，我们将改变球体的起始位置，但这只是为了让你熟悉属性面板中可用的功能。
- en: '![Creating the UI in designer](img/00057.jpeg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![在设计师中创建UI](img/00057.jpeg)'
- en: 'Next, you will create a menu bar at the bottom of the screen. Since we want
    the buttons to be horizontal across the bottom of the screen, we will open the
    **Layout** palette drawer. Drag **HorizontalArrangement** to the bottom of the
    **Viewer** so that it sits underneath the **Canvas** and not inside the **Canvas**.
    It should look like the following screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将在屏幕底部创建一个菜单栏。由于我们希望按钮在屏幕底部水平排列，我们将打开**布局**调色板抽屉。将**水平排列**拖动到**查看器**的底部，使其位于**画布**下方而不是内部。它应该看起来像以下截图：
- en: '![Creating the UI in designer](img/00058.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![在设计师中创建UI](img/00058.jpeg)'
- en: You will know you did this correctly by looking at the Components panel. HorizontalArrangement
    should be listed in the same column under Canvas1 and not be indented like Ball1\.
    If it is indented, it means that the HorizontalArrangement Component is inside
    the Canvas. We don't want that so, if it is, go to the **Viewer** and drag the
    **HorizontalArrangement** component out of the **Canvas** and position it below
    the **Canvas**. To shrink the size of **HorizontalArrangement**, edit the **Height**
    and **Width** options in the **Properties** panel to match the ones below. There
    are two ways to check whether you did this correctly. In the Viewer, HorizontalArrangement
    will create white space below the gray Canvas, as shown in the preceding screenshot.
    And, in the Components panel, HorizontalArrangement will align with Canvas1, as
    shown in the following screenshot. If you accidentally did this incorrectly and
    dropped HorizontalArrangement inside the Canvas, there would be no white space
    below the gray Canvas in the Viewer and the HorizontalArrangement component would
    be indented and aligned directly under Ball1.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过查看组件面板来了解您是否正确执行了此操作。HorizontalArrangement应该在Canvas1所在的同一列中列出，而不是像Ball1那样缩进。如果它缩进了，这意味着HorizontalArrangement组件位于Canvas内部。我们不希望这样，所以如果它缩进了，请转到**查看器**，将**HorizontalArrangement**组件从**Canvas**中拖出，并将其放置在**Canvas**下方。要缩小HorizontalArrangement的大小，请在**属性**面板中编辑**高度**和**宽度**选项，使其与下面的匹配。有两种方法可以检查您是否正确执行了此操作。在查看器中，HorizontalArrangement将在灰色Canvas下方创建空白区域，如图中所示。此外，在组件面板中，HorizontalArrangement将与Canvas1对齐，如图中所示。如果您不小心将HorizontalArrangement放在Canvas内部，查看器中灰色Canvas下方将没有空白区域，并且HorizontalArrangement组件将缩进，并直接对齐在Ball1下方。
- en: 'To resize **HorizontalArrangement**, edit the **Height** and **Width** options
    in the **Properties** panel to match the following screenshot:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要调整**HorizontalArrangement**的大小，请在**属性**面板中编辑**高度**和**宽度**选项，使其与以下截图匹配：
- en: '![Creating the UI in designer](img/00059.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![在设计师中创建UI](img/00059.jpeg)'
- en: 'Next, drag a **Button** from the **User Interface** palette drawer into the
    **HorizontalArrangement** component at the bottom of **Screen1**. The button will
    say **Text for Button1**, as shown in the following screenshot:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将**按钮**从**用户界面**调色板抽屉拖动到**Screen1**底部的**HorizontalArrangement**组件中。按钮将显示为**Button1的文本**，如图中所示：
- en: '![Creating the UI in designer](img/00060.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![在设计师中创建UI](img/00060.jpeg)'
- en: Note
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can verify that you did this correctly by seeing whether your screen matches
    the **Viewer** in the preceding screenshot. Also, in the **Components** panel,
    you will see that **Button1** will be nested underneath **HorizontalArrangement**
    and will therefore be indented.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过查看您的屏幕是否与前面截图中的**查看器**相匹配来验证您是否正确执行了此操作。此外，在**组件**面板中，您将看到**Button1**将嵌套在**HorizontalArrangement**之下，因此将缩进。
- en: IDE
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IDE
- en: At any point during the app building process, you can see your progress live
    on your mobile device or on the emulator. You'll want to use this feature while
    building your app, so you can see updates as soon as you make changes in the Designer
    to track your progress, and see how your app looks on your device. Since we've
    made some changes, let's connect now, so you can get familiar with the process.
    As you've already done the technical setup in [Chapter 2](part0017_split_000.html#G6PI2-9c0b907946184095a315b26c8a9b12bc
    "Chapter 2. Setting Up MIT App Inventor 2"), *Setting Up MIT App Inventor 2*,
    you can easily start using the Integrated Development Environment (IDE).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建应用程序的任何阶段，您都可以在您的移动设备或模拟器上实时查看您的进度。您在构建应用程序时将想要使用此功能，这样您就可以在设计师中更改更改后立即看到更新，以跟踪您的进度，并查看您的应用程序在设备上的外观。由于我们已经做了一些更改，让我们现在连接，这样您就可以熟悉这个过程。由于您已经在[第2章](part0017_split_000.html#G6PI2-9c0b907946184095a315b26c8a9b12bc
    "第2章。设置MIT App Inventor 2")中完成了技术设置，即*设置MIT App Inventor 2*，您可以轻松开始使用集成开发环境（IDE）。
- en: '**For users with mobile devices**: on your computer in the Designer window,
    go to the top menu bar, click on Connect, and from the drop-down menu, select
    **AI Companion**, as shown in the following screenshot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**对于拥有移动设备的用户**：在设计师窗口的计算机上，转到顶部菜单栏，单击连接，然后从下拉菜单中选择**AI Companion**，如图中所示：'
- en: '![IDE](img/00061.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![IDE](img/00061.jpeg)'
- en: A pop-up window will appear on your computer screen with a QR code and a six-character
    code. Launch the AI2 Companion app on your mobile device and either scan the QR
    code or type in the six-character code. Note that to scan the QR code, you need
    to press the blue button on your mobile device that says **scan QR code** and
    then hold the mobile device up to the computer screen to capture the image. Scanning
    the QR code with your mobile device will automatically launch your Fling app after
    a few moments. To connect with the code, type the six-character code shown on
    your computer screen into the white text box on your mobile device and then click
    on the orange button **Connect with code** to display the Fling app on your mobile
    device.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的计算机屏幕上会出现一个带有二维码和六位字符码的弹出窗口。在您的移动设备上启动AI2伴侣应用程序，并扫描二维码或输入六位字符码。请注意，要扫描二维码，您需要在您的移动设备上按蓝色按钮**扫描二维码**，然后将移动设备举到计算机屏幕上以捕获图像。使用您的移动设备扫描二维码后，几秒钟后会自动启动您的Fling应用程序。要使用代码连接，请在您的移动设备上的白色文本框中输入计算机屏幕上显示的六位字符码，然后点击橙色按钮**使用代码连接**以在您的移动设备上显示Fling应用程序。
- en: '**For users** **without mobile devices**: On your computer in the Designer
    window, go to the top menu bar, click on **Connect** and, from the drop-down menu,
    select **Emulator**, as shown in the following screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**对于没有移动设备的用户**：在设计师窗口的计算机上，转到顶部菜单栏，点击**连接**，然后从下拉菜单中选择**模拟器**，如图所示：'
- en: '![IDE](img/00062.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![IDE](img/00062.jpeg)'
- en: The emulator will take a few minutes to launch. You will see pop-up messages
    about the progress and the status of the emulator (to review connecting with the
    emulator, please see [Chapter 2](part0017_split_000.html#G6PI2-9c0b907946184095a315b26c8a9b12bc
    "Chapter 2. Setting Up MIT App Inventor 2"), *Setting Up MIT App Inventor 2*).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟器将需要几分钟才能启动。您将看到有关进度和模拟器状态的弹出消息（要了解如何与模拟器连接，请参阅[第2章](part0017_split_000.html#G6PI2-9c0b907946184095a315b26c8a9b12bc
    "第2章。设置MIT App Inventor 2")，*设置MIT App Inventor 2*）。
- en: 'Note that at any point throughout the app building process, if you have trouble
    connecting or if the modes of connection are grayed out, you may need to choose
    **Reset Connection** from the drop-down menu, as shown in the next screenshot:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在整个应用程序构建过程中，如果您遇到连接问题或连接模式变为灰色，您可能需要从下拉菜单中选择**重置连接**，如图所示：
- en: '![IDE](img/00063.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![IDE](img/00063.jpeg)'
- en: 'After clicking on Reset Connection, the choices for connecting will become
    clickable again. Choose the method you previously used: **AI Companion** or **Emulator**
    (remember, for WiFi connection to work, your computer and mobile device must be
    on the same WiFi network). For connecting via USB, please review the instructions
    in [Chapter 2](part0017_split_000.html#G6PI2-9c0b907946184095a315b26c8a9b12bc
    "Chapter 2. Setting Up MIT App Inventor 2"), *Setting Up MIT App Inventor 2*.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 点击重置连接后，连接选项将再次变为可点击。选择您之前使用的方法：**AI伴侣**或**模拟器**（记住，为了WiFi连接工作，您的计算机和移动设备必须在同一WiFi网络上）。通过USB连接，请参阅[第2章](part0017_split_000.html#G6PI2-9c0b907946184095a315b26c8a9b12bc
    "第2章。设置MIT App Inventor 2")中的说明，*设置MIT App Inventor 2*。
- en: 'Wait a few seconds after connecting and you will see one of the following images
    (the screenshot of a mobile device on the left-hand side and an emulator on the
    right-hand side):'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 连接后等待几秒钟，您将看到以下图像之一（左侧是移动设备的截图，右侧是模拟器的截图）：
- en: '![IDE](img/00064.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![IDE](img/00064.jpeg)'
- en: Now that you've connected your project to your mobile device or emulator, all
    the changes you make on your computer will automatically be updated on your device
    or emulator. This is particularly helpful because a component on your computer
    screen could be displayed somewhat differently on your mobile device or emulator.
    It is always a good idea to check periodically to see how your app is taking shape
    on your mobile device or emulator.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经将项目连接到您的移动设备或模拟器，您在计算机上所做的所有更改将自动更新到您的设备或模拟器上。这特别有用，因为您计算机屏幕上的组件在您的移动设备或模拟器上可能显示得略有不同。定期检查您的应用程序在移动设备或模拟器上的形状总是一个好主意。
- en: 'Let''s go back to the Designer. You can change the look and the text of **Button1**
    by editing the **Properties**. Change the options to reflect the following screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到设计师界面。您可以通过编辑**属性**来更改**Button1**的外观和文本。将选项更改为反映以下截图：
- en: '![IDE](img/00065.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![IDE](img/00065.jpeg)'
- en: 'Notice how your mobile device or emulator also updates in real time and displays
    the changes you just made to Button1, as shown in the following images (the screenshot
    of a mobile device on the left-hand side and an emulator on the right-hand side):'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 注意你的移动设备或模拟器也会实时更新，并显示你刚刚对Button1所做的更改，如下面的图片所示（左侧为移动设备的截图，右侧为模拟器的截图）：
- en: '![IDE](img/00066.jpeg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![IDE](img/00066.jpeg)'
- en: You are now going to add another **Button** to the **HorizontalArrangement**
    component.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在将要向**HorizontalArrangement**组件中添加另一个**Button**。
- en: 'When you drag the Button from the **User Interface** palette drawer, App Inventor
    will name this button as **Button2**, as shown in the next screenshot:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当你从**用户界面**调色板抽屉中拖动**Button**时，App Inventor会将此按钮命名为**Button2**，如下面的截图所示：
- en: '![IDE](img/00067.jpeg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![IDE](img/00067.jpeg)'
- en: 'Notice how your mobile device or emulator also updates in real time, as shown
    in the next images (the screenshot of a mobile device on the left-hand side and
    an emulator on the right-hand side):'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 注意你的移动设备或模拟器也会实时更新，如下面的图片所示（左侧为移动设备的截图，右侧为模拟器的截图）：
- en: '![IDE](img/00068.jpeg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![IDE](img/00068.jpeg)'
- en: 'It is always a good practice to rename your components when you have more than
    one of a kind, or to reflect what they will do. Soon your apps will have multiple
    buttons, screens, and more. So, it''s helpful to use specific names. **Button1**
    is the **Play** button, so let''s rename it accordingly. Click on **Button1**,
    so it is highlighted in the **Components** panel. Then, click on **Rename** at
    the bottom of the panel. A pop-up window will give you the option to type in a
    new name, as shown in the next screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当你拥有多个同类型组件时，或者要反映它们的功能时，始终重命名你的组件是一个好习惯。不久你的应用将会有多个按钮、屏幕等。所以，使用特定的名称是有帮助的。**Button1**是**Play**按钮，所以让我们相应地重命名它。点击**Button1**，使其在**组件**面板中高亮显示。然后，点击面板底部的**重命名**。一个弹出窗口将给你输入新名称的选项，如下面的截图所示：
- en: '![IDE](img/00069.jpeg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![IDE](img/00069.jpeg)'
- en: You will see the new name listed in the Components panel. Note that App Inventor
    converted the space between the two words into an underscore.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在组件面板中看到新的名称。注意，App Inventor将两个单词之间的空格转换成了下划线。
- en: '![IDE](img/00070.jpeg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![IDE](img/00070.jpeg)'
- en: Note that if we had changed the name of Button1 to Play_Button before adding
    the second button, when you dragged out the second button, it would've been named
    as Button1\. This can be confusing, so it's always a good idea to rename your
    components rather than keeping track of the order you added them, especially because
    in this case, Button1 would not have been the first button you added, but the
    second one.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果我们之前在添加第二个按钮之前将Button1的名称更改为Play_Button，当你拖出第二个按钮时，它将被命名为Button1。这可能会造成混淆，所以始终将组件重命名而不是追踪它们的添加顺序是一个好主意，尤其是在这个例子中，Button1并不是你第一个添加的按钮，而是第二个。
- en: 'Repeat the steps listed earlier to rename **Button2** to **Reset** button.
    Then, edit the **Properties** of **Reset_Button** as shown in the following screenshot:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 重复之前列出的步骤，将**Button2**重命名为**Reset**按钮。然后，根据以下截图编辑**Reset_Button**的**属性**：
- en: Note
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Note that while we changed the names of the **Button** components to **Play_Button**
    and **Reset_Button**, the text on the buttons remains what we typed in the text
    fields: **Play** and **Reset**, respectively.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，虽然我们将**Button**组件的名称更改为**Play_Button**和**Reset_Button**，但按钮上的文本仍然是我们在文本字段中输入的内容：**Play**和**Reset**。
- en: '![IDE](img/00071.jpeg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![IDE](img/00071.jpeg)'
- en: Notice how your mobile device or emulator also updates in real time. Here is
    a good example of why you would want to take advantage of the Integrated Development
    Environment. As you can see in the previous screenshot, a space appears between
    the two buttons in the designer, but on the mobile device (in this case, a tablet)
    and on the emulator, there is no space, as shown in the following screenshot.
    By continuously monitoring how your app looks (and later functions) on your device
    as you build it, you are ensuring at each step of the way that your app will appear
    and work as you intended.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 注意你的移动设备或模拟器也会实时更新。这是一个很好的例子，说明了为什么你想利用集成开发环境。正如你在之前的截图中所见，设计器中两个按钮之间出现了一个空格，但在移动设备（在这种情况下，是一个平板电脑）和模拟器上，没有空格，如下面的截图所示。通过在构建过程中持续监控你的应用在设备上的外观（以及后来的功能），你确保了在每一步都能让你的应用以你期望的方式显示和运行。
- en: '![IDE](img/00072.jpeg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![IDE](img/00072.jpeg)'
- en: Now, we are going to add a Label to display some text (and ultimately the score).
    Go to the Palette **User** **Interface** drawer and drag out a **Label** onto
    **HorizontalArrangement**. You can place it anywhere you want in the menu bar,
    but for the purpose of this tutorial, we will drag it in between the **Play**
    and **Replay** buttons. Adjust the label properties to reflect this in the next
    screenshot and rename the Label Component to **Score** (note that underneath the
    **Text** property, we have deleted **Text for Label1**, so it appears empty).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将添加一个标签来显示一些文本（最终是得分）。转到**用户** **界面**抽屉，并将一个**标签**拖放到**水平排列**上。您可以在菜单栏的任何位置放置它，但为了本教程的目的，我们将将其拖放到**播放**和**重播**按钮之间。调整标签属性，以便在下一张截图中反映出来，并将标签组件重命名为**得分**（注意，在**文本**属性下方，我们已经删除了**标签1的文本**，因此它看起来是空的）。
- en: '![IDE](img/00073.jpeg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![IDE](img/00073.jpeg)'
- en: Congratulations! You have completed designing the UI of the Fling app! Notice
    how nothing happens to the ball when either of the buttons is pushed. This is
    because we haven't programmed the behavior of the Components yet. Next, we will
    switch to the Blocks Editor to start coding.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已经完成了Fling应用程序的用户界面设计！请注意，当按下任一按钮时，球体都没有发生任何变化。这是因为我们还没有编程组件的行为。接下来，我们将切换到积木编辑器开始编码。
- en: The Blocks editor
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 积木编辑器
- en: To switch to the Blocks editor, click on the **Blocks** button in the upper-right
    corner of the menu bar.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要切换到积木编辑器，请点击菜单栏右上角的**积木**按钮。
- en: '![The Blocks editor](img/00074.jpeg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![The Blocks editor](img/00074.jpeg)'
- en: The Blocks window has a Blocks panel (left), a Viewer (the large white workspace),
    and a Media panel (in the lower-left corner). The Media panel operates in the
    same manner as the designer, although we won't be using it for this app.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 积木窗口有一个积木面板（左侧）、一个查看器（大型白色工作区）和一个媒体面板（在左下角）。媒体面板的操作方式与设计师相同，尽管我们不会在这个应用程序中使用它。
- en: '![The Blocks editor](img/00075.jpeg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![The Blocks editor](img/00075.jpeg)'
- en: All the tools you need to program your app are in the Blocks panel on the left-hand
    side of the window. The first set of Blocks shown with small colored boxes is
    called Built-in (you will learn about these as we build our app). Below the Built-in
    blocks are the blocks relating to the Components you just added in the Designer.
    Below the Component blocks is a list of Any Component blocks. We will not be using
    these in this chapter.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您在窗口左侧的积木面板中可以找到所有用于编程应用程序的工具。显示的小色块组成的第一个积木集称为内置（您将在构建我们的应用程序时了解这些）。在内置积木下方是关于您在设计师中刚刚添加的组件的积木。在组件积木下方是任何组件积木的列表。在本章中，我们将不会使用这些积木。
- en: Navigating the Blocks editor is similar to the Designer. When you click on a
    block in the Blocks panel, a pop-up drawer will appear to reveal many colored
    puzzle-like blocks. The block you click on will automatically appear in the white
    workspace called the Viewer. To program your app, you need to drag one block into
    another, and hear and see it snap into place.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在积木编辑器中导航与设计师类似。当您点击积木面板中的任何积木时，会出现一个弹出抽屉，显示许多彩色的拼图状积木。您点击的积木将自动出现在称为查看器的白色工作区中。要编程您的应用程序，您需要将一个积木拖放到另一个积木上，并听到和看到它“咔哒”一声到位。
- en: 'Once you start filling up the Viewer with blocks, it can get crowded. There
    are two ways to use more of the workspace: by using the bottom and side gray scroll
    bars or by clicking and dragging on the white space itself. This will become evident
    once the blocks are in place.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您开始在查看器中填充积木，它可能会变得拥挤。有两种方法可以更有效地使用工作空间：使用底部和侧面的灰色滚动条，或者点击并拖动白色空间本身。一旦积木就位，这一点就会变得明显。
- en: The Blocks drawer
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 积木抽屉
- en: 'When you click on any of the blocks'' categories in the Blocks panel, a pop-up
    drawer of available blocks will appear. The following screenshot shows some of
    the available blocks for the Play_Button component (the gray scroll bar indicates
    that there are more blocks than what is shown on the screen. You can see the rest
    of the blocks by scrolling down):'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 当您点击积木面板中的任何积木类别时，会出现一个包含可用积木的弹出抽屉。以下截图显示了用于Play_Button组件的一些可用积木（灰色滚动条表示屏幕上显示的积木数量多于实际数量。您可以通过向下滚动查看其余的积木）：
- en: '![The Blocks drawer](img/00076.jpeg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![The Blocks drawer](img/00076.jpeg)'
- en: Types of Blocks
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 积木类型
- en: 'Component Blocks are made up of different kinds of blocks. For this app, we
    will be using three kinds of blocks: **event**, **setters**, and **getters**.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 组件积木由不同类型的积木组成。对于这个应用程序，我们将使用三种类型的积木：**事件**、**设置器**和**获取器**。
- en: '**Event Blocks**: They are gold, and if they exist for a certain component,
    they will appear at the top of any pop-up Blocks drawer. They launch an event,
    such as **when Play_Button.Click**. To program what happens when the **Play**
    button is clicked, you can snap together other puzzle piece blocks called setters
    and getters.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件块**：它们是金色的，如果某个组件存在，它们将出现在任何弹出块抽屉的顶部。它们启动一个事件，例如**when Play_Button.Click**。要编程点击**播放**按钮时发生的事情，你可以拼接其他称为设置器和获取器的拼图块。'
- en: '**Setters**: They are dark green or orange puzzle piece blocks that say set
    because they set a property''s value. Notice that setters have an opening at the
    end. Another type of block, a getter, fits into that space and so the setter can
    get a value.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设置器**：它们是深绿色或橙色的拼图块，上面写着“设置”，因为它们设置属性值。请注意，设置器在末端有一个开口。另一种类型的块，获取器，可以放入那个空间，因此设置器可以获取值。'
- en: '**Getters**: They are colored puzzle piece blocks that fit at the end of the
    setters. They give a property value to the setters.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**获取器**：它们是拼图块，可以放在设置器的末端。它们为设置器提供属性值。'
- en: '**Built-in** blocks have a variety of different colors and purposes. We will
    explain them as we use them.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**内置**块有多种不同的颜色和用途。我们将在使用时解释它们。'
- en: Using Blocks to program Fling
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用块编程Fling
- en: We will now begin using blocks to code our app.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将开始使用块来编写我们的应用程序。
- en: The Play button
  id: totrans-128
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 播放按钮
- en: Click on **Play_Button** in the **Blocks** panel to open its drawer. Then, click
    on the top gold **when Play_Button.Click** event block as shown in the next screenshot.
    It will now appear in the **Viewer**.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在**块**面板中点击**Play_Button**以打开其抽屉。然后，点击下一张截图所示的最上面的金色**when Play_Button.Click**事件块。现在它将出现在**查看器**中。
- en: '![The Play button](img/00077.jpeg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![播放按钮](img/00077.jpeg)'
- en: When a user clicks on the app's **Play** button, we want the game to begin and
    the ball to start moving. So, we need to program these steps.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击应用程序的**播放**按钮时，我们希望游戏开始，球开始移动。因此，我们需要编写这些步骤。
- en: First of all, we are going to position the ball at the top of the screen and
    have it move down toward the bottom of the screen. But we don't want to set it
    all the way at the top of the screen because, in the next chapter, we are going
    to program our app, so that, every time the ball hits the top edge, the user will
    score a point. To avoid scoring points by merely pressing Play or Reset, we must
    position the ball a little below the top edge. To do this, we need to set a pair
    of the (x, y) values for the Canvas. The x value is where the ball will be horizontally
    on the screen and the y value will be the ball's vertical position. The x value
    is defined as the number of pixels from the left edge of the Canvas and y is defined
    as the number of pixels from the top edge of the Canvas. We decided that we don't
    want y to be 0, as the ball would be touching the edge, so we can set the y value
    to something close to 0, such as 2\. We can set the x value to any value along
    the width of the Canvas. To make the game more unpredictable, we will program
    the app to pick a random value for x. Then, each time the user hits Play or Reset,
    the ball will start at a different location horizontally on the screen (although
    it will always start 2 pixels from the top, since we are setting y = 2). To set
    the ball's starting location, we will select a block from the Ball1 drawer.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将把球放在屏幕顶部，并让它向下移动到屏幕底部。但我们不想把它完全放在屏幕顶部，因为在下一章中，我们将编写我们的应用程序，这样每次球击中顶部边缘时，用户都会得一分。为了避免仅通过按下播放或重置来得分，我们必须将球放置在顶部边缘稍低的位置。为此，我们需要设置一对(x,
    y)值。x值是球在屏幕上的水平位置，y值是球的垂直位置。x值定义为从Canvas左边缘的像素数，y定义为从Canvas顶部边缘的像素数。我们决定不希望y为0，因为球会接触到边缘，所以我们可以将y值设置为接近0的值，例如2。我们可以将x值设置为Canvas宽度上的任何值。为了使游戏更具不可预测性，我们将编写应用程序以随机选择x值。然后，每次用户点击播放或重置时，球将在屏幕上的不同水平位置开始（尽管它始终从顶部开始2像素，因为我们设置了y
    = 2）。为了设置球的起始位置，我们将从Ball1抽屉中选择一个块。
- en: 'Click on **Ball1** in the **Blocks** panel. A drawer will open with all the
    available blocks for **Ball1**. Use the gray scroll bar to the right of the pop-up
    drawer to scroll down past the gold event blocks. Click on the purple procedure
    block: **call Ball1.MoveTo x, y**, as shown in the next screenshot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在**块**面板中点击**Ball1**。将打开一个包含**Ball1**所有可用块的抽屉。使用弹出抽屉右侧的灰色滚动条向下滚动，以跳过金色事件块。点击下一张截图所示的紫色过程块：**call
    Ball1.MoveTo x, y**：
- en: '![The Play button](img/00078.jpeg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![播放按钮](img/00078.jpeg)'
- en: 'The purple procedure block will now appear next to the **when Play_Button.Click**
    gold event block in the **Viewer**. Notice how the shape of this purple block
    fits inside the gold block. Go ahead and place it into the gold block (by clicking
    on it with your mouse and dragging it). The gold block will expand to accommodate
    the purple block. You will hear and see it snap into place, as shown in the following
    screenshot on the right-hand side:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 紫色过程块现在将出现在 **查看器** 中 **when Play_Button.Click** 金色事件块的旁边。注意这个紫色块的形状如何适合在金色块内。继续将紫色块放入金色块中（通过用鼠标点击并拖动它）。金色块会扩展以容纳紫色块。你会听到并看到它“咔哒”一声到位，如以下右侧的截图所示：
- en: '![The Play button](img/00079.jpeg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![播放按钮](img/00079.jpeg)'
- en: 'We know that we want the value of **y** to be equal to 2, so we will find a
    block (a getter) to get this value. Click on the **Math** block in the **Built-in**
    section. The **Built-in Math** blocks have a little blue box next to it. A drawer
    will open up with the available blue **Math** getter blocks. Click on the first
    one with the value of **0**, as shown in the next screenshot:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道我们希望 **y** 的值等于 2，所以我们将找到一个块（一个获取器）来获取这个值。点击 **内置** 部分的 **数学** 块。**内置数学**
    块旁边有一个小蓝色方块。一个抽屉会打开，显示可用的蓝色 **数学** 获取器块。点击下一个带有 **0** 值的块，如下一个截图所示：
- en: '![The Play button](img/00080.jpeg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![播放按钮](img/00080.jpeg)'
- en: 'The **0** block will appear in the **Viewer**, and you can drag it and snap
    it to the *y* value. Click on **0** to highlight it. You can type in the number
    `2` to change the value to `2`, as shown in the following screenshot. Next, we
    are going to set the *x* value to a random integer. Go back to the **Math** blocks
    and click on the last block shown in the preceding screenshot: **random integer
    from 1 to 100**. Drag this block to the *x* value, as shown next:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**0** 块将出现在 **查看器** 中，你可以将其拖动并吸附到 *y* 值上。点击 **0** 以突出显示它。你可以输入数字 `2` 将值更改为
    `2`，如以下截图所示。接下来，我们将设置 *x* 值为随机整数。回到 **数学** 块，点击前面截图显示的最后一个块：**1 到 100 的随机整数**。将此块拖动到
    *x* 值，如以下所示：'
- en: '![The Play button](img/00081.jpeg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![播放按钮](img/00081.jpeg)'
- en: 'Since users will have mobile devices with different screen sizes, we won''t
    know whether the width will be 100 pixels or 350 pixels. So, to enable the game
    to be played on different size screens, we can remove the **Math** block with
    the value of **100** and insert a getter block instead that will get the screen
    width of the mobile device the user is using. To delete the blue **100** block,
    click on it to outline it in yellow. A little hand icon will appear. This indicates
    that you can drag the block out of the slot, as shown in the following screenshot:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 由于用户将使用不同屏幕尺寸的移动设备，我们不知道宽度将是 100 像素还是 350 像素。因此，为了使游戏能够在不同尺寸的屏幕上播放，我们可以删除具有
    **100** 值的 **数学** 块，并插入一个获取器块来获取用户使用的移动设备的屏幕宽度。要删除蓝色 **100** 块，点击它以将其轮廓突出显示为黄色。一个小手图标会出现。这表示你可以将块从插槽中拖出，如以下截图所示：
- en: '![The Play button](img/00082.jpeg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![播放按钮](img/00082.jpeg)'
- en: Note that if you don't see the hand icon, it just means that you clicked on
    the actual number instead of the block. This will be indicated by a cursor and
    a little bit of white space to the right of the number. Click again on the actual
    blue part of the number puzzle piece and you will see the hand icon, which will
    allow you to drag the block out.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果你没有看到手图标，这仅仅意味着你点击了实际的数字而不是块。这会通过数字右侧的光标和一小块空白来表示。再次点击实际的蓝色数字拼图部分，你会看到手图标，这将允许你拖动块出来。
- en: To delete this block (or any unwanted block), click on it (if it is not already
    highlighted in yellow) and hit *Delete* on your computer's keyboard. Or, you can
    drag the block to the lower-right corner of the Viewer to throw it in the trash.
    Hover the block over the trash can and the lid will open. When you release the
    block, it will disappear. You will see it fade away and hear a crumple sound.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除此块（或任何不需要的块），点击它（如果它尚未突出显示为黄色），然后在电脑键盘上按 *Delete*。或者，你可以将块拖动到查看器的右下角，将其扔进垃圾桶。将块悬停在垃圾桶上，盖子会打开。当你释放块时，它会消失。你会看到它逐渐消失并听到折叠的声音。
- en: To add the a block indicating the user's screen width block, click on **Screen1**
    in the **Blocks** palette and choose **Screen1.Width** from the drawer. It will
    be near the bottom, so you can use the gray scroll bar to scroll down and find
    it.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加表示用户屏幕宽度的模块，请点击**屏幕1**在**模块**调色板中，并从抽屉中选择**屏幕1.Width**。它将在底部附近，因此您可以使用灰色滚动条向下滚动以找到它。
- en: '![The Play button](img/00083.jpeg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![播放按钮](img/00083.jpeg)'
- en: 'Note that to drop this block inside another block (whether an equation or a
    single block), align the little puzzle piece nib on the left-hand side of the
    block with the nib space on the left-hand side of the block''s opening and it
    will easily snap into place. Your blocks should look as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，要将此模块放入另一个模块内部（无论是一个方程还是单个模块），请将模块左侧的小拼图针与模块开口左侧的针孔空间对齐，它将轻松地卡到位。您的模块应该看起来如下：
- en: '![The Play button](img/00084.jpeg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![播放按钮](img/00084.jpeg)'
- en: Every time a user presses **Play**, the ball will be positioned at a different
    place along the width of the screen and **2** pixels from the top of the screen.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 每当用户按下**播放**按钮时，球将被定位在屏幕宽度上的不同位置，并且距离屏幕顶部**2**像素。
- en: Now that we have positioned the ball, we will now program it to move.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定位了球，接下来我们将编程使其移动。
- en: Moving the ball
  id: totrans-151
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 移动球
- en: Since we've programmed the ball to start at the top of the screen, we want the
    ball to move downward. Instead of it just dropping straight down or at the same
    angle each time, we can set the degrees to be random. There are 360 degrees in
    a circle, but we only want the ball to fall between certain degrees, those represented
    as downward that fit between the width of the screen, but not along the edges
    of the screen. The figure below shows that the right edge is **0** degrees and
    the left edge is **180** degrees. The actual space that we are interested in is
    the lower half or the degrees between **180** and **360**. Since we don't want
    the ball to just travel down the edges, we will eliminate the two extremes when
    choosing some numbers. We decided to choose degrees between **200** and **340**.
    We will code the app so that the program will choose a random number between those
    degrees for the angle at which the ball will move.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经编程使球从屏幕顶部开始，我们希望球向下移动。而不是每次都直接垂直下落或以相同的角度下落，我们可以设置角度为随机值。一个圆有360度，但我们只想让球在特定的角度范围内下落，这些角度表示向下，适合屏幕宽度，但不在屏幕边缘。下面的图示显示了右侧边缘是**0**度，左侧边缘是**180**度。我们感兴趣的实际空间是下半部分，即**180**到**360**度之间的角度。由于我们不希望球沿着边缘移动，我们将在选择数字时消除两个极端。我们决定选择**200**到**340**度之间的角度。我们将编写应用程序，使程序在球移动的角度范围内选择一个随机数字。
- en: '![Moving the ball](img/00085.jpeg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![移动球](img/00085.jpeg)'
- en: 'You already learned how to program a random integer from our previous blocks,
    so let''s repeat those steps. Go to the **Math** blocks and choose the blue **random
    integer from to** block. You also know how to fill in these numbers. To review,
    choose the topmost blue block in the **Math** blocks: the one with **0**. You
    can enter **200** in it and then copy and paste the block by clicking on it to
    highlight it (make sure it has a yellow outline). If you don''t want to copy and
    paste, you can always drag out another **Math 0** block. Click on the number in
    the copied block and type **340**. Then, place the **200** block into the **from**
    spot and the 340 block into the **to** spot.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经从我们之前的模块中学习了如何编程随机整数，现在让我们重复这些步骤。前往**数学**模块，并选择蓝色**从...到...的随机整数**模块。您也知道如何填写这些数字。为了复习，请选择**数学**模块中最上面的蓝色模块：带有**0**的模块。您可以在其中输入**200**，然后通过点击它来突出显示并复制粘贴该模块（确保它有一个黄色的轮廓）。如果您不想复制粘贴，您始终可以拖出一个另一个**数学
    0**模块。点击复制的模块中的数字并输入**340**。然后，将**200**模块放入**从**位置，将**340**模块放入**到**位置。
- en: 'Our **random integer from to** block needs to fit someplace, to which block
    will it be giving this information? Another way to ask this question is: which
    block will be getting this information? If you guessed Ball, you are correct!
    The ball will need this information to know the angle at which it has to move.
    So, we need to find the ball block that represents the ball''s direction. This
    block is called **Ball1.Heading**, and it represents the degrees the ball will
    move. Click on the **Ball1** Blocks drawer to find the dark green **Ball1.Heading**
    block (you will need to scroll down past the gold and purple blocks to find it).
    Once this is on your **Viewer**, snap it together with the blue **random integer
    from to** block that you just created. Then, take these connected pieces and insert
    them at the bottom of the gold **when Play_Button.Click**. Your blocks should
    now look like the following screenshot:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的**从...到...的随机整数**模块需要放置在某个位置，它将提供哪些信息？另一种问法是：哪个模块将获取这些信息？如果您猜对了球体，您是正确的！球体需要这些信息来知道它必须移动的角度。因此，我们需要找到代表球体方向的球体模块。这个模块被称为**Ball1.Heading**，它代表球体移动的度数。点击**Ball1**模块抽屉以找到深绿色的**Ball1.Heading**模块（您需要滚动过金色和紫色的模块才能找到它）。一旦它在您的**查看器**上，将其与您刚刚创建的蓝色**从...到...的随机整数**模块连接起来。然后，将这些连接的部件插入到金色**当Play_Button.Click**模块的底部。现在，您的模块应该看起来像以下截图：
- en: '![Moving the ball](img/00086.jpeg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![移动球体](img/00086.jpeg)'
- en: 'Now that we have the location of the ball and the direction it is heading in
    degrees, we need to program it to actually move. To do this, we will first set
    the ball to enabled. From the **Ball1** blocks drawer, choose the dark green **set
    Ball1.Enabled to** block. Then, from the **Logic** blocks drawer, choose the lime
    green **true** block at the top, as shown in the next screenshot:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经知道了球体的位置和它前进的方向（以度为单位），我们需要编程让它实际移动。为此，我们首先将球体设置为启用状态。从**Ball1**模块抽屉中，选择深绿色的**设置Ball1.Enabled**模块。然后，从**逻辑**模块抽屉中，选择顶部的浅绿色**true**模块，如图下截图所示：
- en: '![Moving the ball](img/00087.jpeg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![移动球体](img/00087.jpeg)'
- en: 'Insert the **true** block into the **set Ball1.Enabled to** block and add them
    to the bottom of the **when Play_Button.Click** event, as shown in the following
    screenshot:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 将**true**模块插入到**设置Ball1.Enabled**模块中，并将它们添加到**当Play_Button.Click**事件底部，如图下截图所示：
- en: '![Moving the ball](img/00088.jpeg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![移动球体](img/00088.jpeg)'
- en: Now that the ball is ready to move, we can actually move it by setting the speed
    and the interval. Go back to the **Ball1** Blocks drawer and select the dark green
    setter block, **set Ball1.Speed**. Next, from the same drawer, select **set Ball1.Interval**.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在球体已经准备好移动，我们可以通过设置速度和间隔来移动它。回到**Ball1**模块抽屉，选择深绿色的设置模块，**设置Ball1.Speed**。接下来，从同一个抽屉中，选择**设置Ball1.Interval**。
- en: 'The interval is the amount of time, in milliseconds (*1000 milliseconds = 1
    second*), the ball will travel, and the speed is the number of pixels the ball
    will move in that timeframe. It''s fun to play around with these numbers to see
    how fast or slow you can make the ball move. We''ve decided to have the ball move
    **10** pixels every **50** milliseconds, so we will program our blocks to look
    as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 间隔是球体移动的时间，以毫秒为单位（*1000毫秒=1秒*），速度是球体在该时间段内移动的像素数。玩弄这些数字以查看您可以使球体移动多快或多慢很有趣。我们决定让球体每**50**毫秒移动**10**像素，因此我们将编程模块设置为如下所示：
- en: '![Moving the ball](img/00089.jpeg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![移动球体](img/00089.jpeg)'
- en: 'Insert these blocks at the bottom of the **when Play_Button.Click** event.
    Your blocks will look like the following screenshot:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些模块插入到**当Play_Button.Click**事件底部。您的模块将类似于以下截图：
- en: '![Moving the ball](img/00090.jpeg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![移动球体](img/00090.jpeg)'
- en: 'So far, this is what our app does: when the **Play** button is clicked, it
    will move the ball to position it **2** pixels away from the top edge of the screen
    and to a random number between **1** pixel from the left edge of the screen and
    the right edge of the screen. It will set the ball rolling downward in a random
    direction (between the degrees **200** to **340**) at a speed of **10** pixels
    every **50** milliseconds!'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的应用程序是这样做的：当**Play**按钮被点击时，它将球体移动到距离屏幕顶部边缘**2**像素的位置，并随机移动到屏幕左侧边缘**1**像素和右侧边缘之间的任意位置。它将以**10**像素每**50**毫秒的速度在**200**到**340**度之间的随机方向滚动球体！
- en: Flinging the ball
  id: totrans-167
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 投掷球体
- en: The object of the game is to fling the downward moving ball away from the bottom
    edge, because if the ball drops down to the bottom edge of the screen, the game
    will end. Next, we need to code these events.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏的目标是将向下移动的球抛离底部边缘，因为如果球掉落到屏幕底部边缘，游戏将结束。接下来，我们需要编写这些事件。
- en: First, let's program the app to fling the ball.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们编程应用来抛掷球。
- en: 'How will the ball know when a finger touches it and how to move in another
    direction (not downward)? We can program these events by using a block from the
    **Ball1** Blocks drawer called **when Ball1.Flung**. Click on this gold event
    block to add it to the Viewer. You can make the ball move at any speed you like,
    but we are going to keep it going at the same speed, just in a different direction.
    To do this, you can copy and paste the **set Ball1.Speed to** and **set Ball1.Interval
    to** blocks from the **when Play_Button.Click** event (note that when you click
    on the dark green set block and copy and paste it, the blue getter block attached
    to it will also copy and paste). Add these blocks to the **when Ball1.Flung**
    event to resemble the following screenshot:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 球如何知道手指触摸它以及如何移动到另一个方向（不是向下）？我们可以通过使用**Ball1**块抽屉中的**when Ball1.Flung**块来编程这些事件。点击这个金色事件块将其添加到查看器中。你可以让球以任何你喜欢的速度移动，但我们将保持相同的速度，只是方向不同。为此，你可以从**when
    Play_Button.Click**事件复制并粘贴**set Ball1.Speed to**和**set Ball1.Interval to**块（注意当你点击深绿色设置块并复制粘贴时，附加的蓝色获取块也会复制粘贴）。将这些块添加到**when
    Ball1.Flung**事件，使其类似于以下截图：
- en: '![Flinging the ball](img/00091.jpeg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![抛掷球](img/00091.jpeg)'
- en: 'Next, we will reposition the direction of the ball to go upward (when it is
    flung by a finger). We could set the heading to a degree between 10 and 170 (see
    *image #39*) or we could make the ball go in the upward direction with an equation.
    Let''s practice equations more. Copy and paste the **set Ball1.Heading** block
    from the **when Play_Button.Click** event (remember the heading block determines
    the angle at which the ball will move). Drag it to the bottom of the **when Ball1.Flung**
    event. We want the ball to go in the opposite direction than the direction in
    which it was heading, not to a random integer, so you can delete the attached
    blue block by highlighting it and pressing **delete** on your keyboard or by clicking
    on the blue block and dragging it to trash. To get the ball to go in the opposite
    direction, we are going to subtract the current ball''s heading (direction) from
    360 degrees (the total number of degrees possible). To code this, choose the minus
    block from the **Math Blocks** drawer. In the first open space, add the number
    **360**. Copy and paste the **50** blue block from the **when Ball1.Flung** event
    and change the number to **360**. Insert it into the open space to the left of
    the minus sign.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来，我们将调整球的方向使其向上移动（当用手指抛掷时）。我们可以将航向设置为10到170度之间的任意度数（见*图片 #39*）或者我们可以用一个方程使球向上移动。让我们更多地练习方程。复制并粘贴**set
    Ball1.Heading**块从**when Play_Button.Click**事件（记住航向块决定了球移动的角度）。将其拖到**when Ball1.Flung**事件的底部。我们希望球移动的方向与它原来的航向相反，而不是一个随机的整数，因此你可以通过突出显示并按键盘上的**delete**键或通过点击蓝色块并将其拖到垃圾桶中来删除附加的蓝色块。为了使球向相反方向移动，我们将当前球的航向（方向）从360度（可能的总度数）中减去。为了编写这个代码，从**Math
    Blocks**抽屉中选择减号块。在第一个空白处，添加数字**360**。从**when Ball1.Flung**事件复制并粘贴**50**蓝色块，并将数字更改为**360**。将其插入减号左侧的空白处。'
- en: 'Next, from the **Ball1** Blocks drawer, select the light green getter block,
    **Ball1.Heading**. Insert it in the open space to the right of the minus sign
    (line up the block nib with the open nib). Here is what we have coded: when the
    ball is touched and flung, the program will move the ball''s direction (or heading)
    to 360 degrees minus the old direction (or heading). Your blocks will look like
    the next screenshot:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，从**Ball1**块抽屉中选择浅绿色获取块，**Ball1.Heading**。将其插入减号右侧的空白处（将块尖与空白尖对齐）。这是我们编写的代码：当球被触摸并抛掷时，程序将球的航向（或方向）移动到360度减去旧的方向（或航向）。你的块将看起来像下一个截图：
- en: '![Flinging the ball](img/00092.jpeg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![抛掷球](img/00092.jpeg)'
- en: Ending the game or bouncing the ball
  id: totrans-175
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 结束游戏或使球弹跳
- en: 'Now that the Play Button starts the ball moving downward and the user can fling
    it in a different direction, we want to program the following actions:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在播放按钮开始使球向下移动，用户可以将其抛向不同的方向，我们想要编程以下动作：
- en: Ending the game when the ball touches the bottom edge
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当球触碰到底部边缘时结束游戏
- en: Bouncing the ball off the left, top, and right edges
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 球从左边、上边和右边弹跳
- en: We can program these actions with the **if**/**then** blocks. **If** the ball
    touches the bottom edge, **then** the ball will stop and the game will end. **If**
    the ball touches the other edges, **then** the ball will bounce back and the game
    will continue.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 **if**/**then** 块来编程这些操作。**如果**球碰到底部边缘，**那么**球将停止，游戏将结束。**如果**球碰到其他边缘，**那么**球将弹回，游戏将继续。
- en: Let's first program the app to stop and end the game when the ball hits the
    bottom edge. App Inventor makes this easy. Go to the **Ball1** Blocks drawer and
    click on the **when Ball1.EdgeReached** event. Once the event block is in the
    Viewer, hover (don't click) on the light orange word **edge** on the left-hand
    side of the block and you will get a popup, as shown in the next screenshot. Choose
    the top dark orange **get edge** block. This is a variable. Set it aside; we will
    use it in a minute.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先编写程序，当球碰到底部边缘时停止并结束游戏。App Inventor 使这变得很容易。转到 **Ball1** 块抽屉，并点击 **when Ball1.EdgeReached**
    事件。一旦事件块出现在查看器中，将鼠标悬停在块的左侧浅橙色单词 **edge** 上（不要点击），您将看到一个弹出窗口，如下一张截图所示。选择顶部深橙色 **get
    edge** 块。这是一个变量。将其放在一边；我们将在一分钟内使用它。
- en: '![Ending the game or bouncing the ball](img/00093.jpeg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![结束游戏或球弹跳](img/00093.jpeg)'
- en: We will add an **if then** event to the inside of the when **Ball1.EdgeReached**
    event. But first we will configure it. Go to the topmost **Blocks** drawer called
    **Control** and click on the first gold **if then** block.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 **when Ball1.EdgeReached** 事件内部添加一个 **if then** 事件。但首先我们需要配置它。转到最顶部的 **Blocks**
    抽屉，称为 **Control**，并点击第一个金色 **if then** 块。
- en: '![Ending the game or bouncing the ball](img/00094.jpeg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![结束游戏或球弹跳](img/00094.jpeg)'
- en: 'When the block first appears on your **Viewer**, it will look like *Step 1*
    in the following image. If you click on the blue color square in the upper-left
    corner, a popup will appear. Move your cursor over the bottom **else** block on
    the left-hand side of the popup, click on it, and drag it into the **if** opening
    on the right-hand side of the popup, as shown in *Step 2* and *Step 3*. Once the
    **else** block is in place, you will see the original **if then** event block
    change into an **if then else** block. You will see that **else** is now added
    to the bottom of the block, as shown in *Step 3* and *Step 4*:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 当块首次出现在您的 **Viewer** 中时，它将看起来像以下图片中的 *步骤 1*。如果您点击左上角的蓝色颜色方块，将出现一个弹出窗口。将光标移至弹出窗口左侧的底部
    **else** 块，点击它，并将其拖入弹出窗口右侧的 **if** 开口中，如 *步骤 2* 和 *步骤 3* 所示。一旦 **else** 块就位，您将看到原始的
    **if then** 事件块变为 **if then else** 块。您将看到 **else** 现在已添加到块的底部，如 *步骤 3* 和 *步骤 4*
    所示：
- en: '![Ending the game or bouncing the ball](img/00095.jpeg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![结束游戏或球弹跳](img/00095.jpeg)'
- en: 'Add this **if then else** block to the inside of the when **Ball1.EdgeReached**
    block, as shown in the following screenshot:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 将此 **if then else** 块添加到 **when Ball1.EdgeReached** 块的内部，如以下截图所示：
- en: '![Ending the game or bouncing the ball](img/00096.jpeg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![结束游戏或球弹跳](img/00096.jpeg)'
- en: Note
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Notice how the get edge block that we set aside has an exclamation point with
    a triangle around it. This is an error message alerting you that the block is
    unattached and is in need of a setter block.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们放在一边的获取边缘块周围有一个感叹号和三角形的错误消息。这是一个错误消息警报，提示您该块未连接，需要设置器块。
- en: 'To program, **if** the ball touches the bottom edge, **then** the ball will
    stop and the game will end. We will use a **math equals** block. It is the second
    one from the top in the **Math Blocks** drawer, as shown in the next screenshot:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 要编程，**如果**球碰到底部边缘，**那么**球将停止，游戏将结束。我们将使用 **math equals** 块。它是 **Math Blocks**
    抽屉中从上数第二个，如下一张截图所示：
- en: '![Ending the game or bouncing the ball](img/00097.jpeg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![结束游戏或球弹跳](img/00097.jpeg)'
- en: Inside the first opening to the left of the equal sign, add the dark orange
    **get edge** block that we had set aside. You will notice that the alert will
    remain on this block until we snap the math block in place with the **if** block,
    which we will do shortly.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在等号左侧的第一个开口内，添加我们之前放置的深橙色 **get edge** 块。您会注意到，直到我们将数学块与 **if** 块连接到位，警报将一直保留在这个块上，我们将在不久后这样做。
- en: 'In the next image, you will see that each edge is represented by a number:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一张图片中，您将看到每条边都由一个数字表示：
- en: '![Ending the game or bouncing the ball](img/00098.jpeg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![结束游戏或球弹跳](img/00098.jpeg)'
- en: Since the bottom edge is equal to **-1**, add a number Math block to this equal
    block and enter the number **-1**. Snap the blue math block into the **if** block,
    as shown below (and you will see the alert disappear).
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 由于底部边缘等于**-1**，向此等于块添加一个数字数学块，并输入数字**-1**。将蓝色数学块拖入**if**块，如下所示（并且你会看到警报消失）。
- en: '![Ending the game or bouncing the ball](img/00099.jpeg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![结束游戏或弹球](img/00099.jpeg)'
- en: 'When the bottom edge is reached, we want the ball to stop, the game to end,
    and the app to display the text **Game Over**. We already know how to enable the
    ball to move: we set the property enabled to **true**. So, now that we want the
    ball to stop or not move, we must set the enabled property to **false**. In the
    **Ball1** blocks drawer, select **set Ball1.Enabled to** and then in the **Logic**
    blocks drawer select the **false** block. Slide that set of blocks into the **then**
    space of the **if then else** block, as shown below.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 当达到底部边缘时，我们希望球停止，游戏结束，应用程序显示文本**游戏结束**。我们已经知道如何使球移动：我们将属性启用设置为**true**。因此，现在我们想要球停止或不动，我们必须将启用属性设置为**false**。在**Ball1**块抽屉中，选择**设置Ball1.Enabled为**，然后在**逻辑**块抽屉中选择**false**块。将这组块滑入**if
    then else**块的**then**空间，如下所示。
- en: '![Ending the game or bouncing the ball](img/00100.jpeg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![结束游戏或弹球](img/00100.jpeg)'
- en: 'Next, we will program the app to display some text indicating that the game
    is over. We will use the Label that we named **Score** (in the next chapter, we
    will also use this Label to display the score). Go to the **Score** blocks drawer
    and select the dark green **set Score.Text to** block, as shown in the following
    screenshot:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将编程应用程序显示表示游戏结束的文本。我们将使用我们命名为**Score**的标签（在下一章中，我们还将使用此标签显示分数）。转到**Score**块抽屉，并选择深绿色**设置Score.Text
    to**块，如下面的截图所示：
- en: '![Ending the game or bouncing the ball](img/00101.jpeg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![结束游戏或弹球](img/00101.jpeg)'
- en: 'This setter block needs to get some text, so we will add a getter text block.
    Go to the pink **Text** block drawer and choose the first block, which is an empty
    space with quotes around it, as shown in the next screenshot:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 此设置块需要获取一些文本，因此我们将添加一个获取文本块。转到粉红色的**文本**块抽屉，并选择第一个块，它是一个带有引号的空格，如下面的截图所示：
- en: '![Ending the game or bouncing the ball](img/00102.jpeg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![结束游戏或弹球](img/00102.jpeg)'
- en: 'You will add this pink text block to the **set** **Score.Text to** block and
    insert it below the **set Ball1.Enabled to** block in the **then** event. Click
    on the pink text block and type the words **Game Over**, as follows:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 您将添加此粉红色文本块到**设置** **Score.Text to**块，并将其插入**then**事件中的**设置Ball1.Enabled to**块下方。单击粉红色文本块并键入单词**游戏结束**，如下所示：
- en: '![Ending the game or bouncing the ball](img/00103.jpeg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![结束游戏或弹球](img/00103.jpeg)'
- en: 'We have programmed the app so that if the ball hits the bottom edge, it will
    stop moving and the Label will display the text: **Game Over**.'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经编程了应用程序，如果球击中底部边缘，它将停止移动，标签将显示文本：**游戏结束**。
- en: 'The last step, the **else** block, is for when the ball hits an edge other
    than **-1** (the bottom). If the ball hits any of the other edges, we want the
    ball to bounce off them and the gameplay to continue. To program this, we''ll
    use the purple **call Ball1.Bounce** block. We will attach the same orange **get
    edge** block we used previously, but this time, we won''t specify a certain edge.
    Any edge that the ball touches, other than the bottom edge, will cause the ball
    to bounce. Copy and paste the **get edge block**, add it to the purple **call
    Ball1.Bounce** block, and insert the blocks into the **else** slot, as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步，**else**块，是在球击中除**-1**（底部）之外的边缘时使用。如果球击中任何其他边缘，我们希望球从边缘弹回，游戏继续。为此，我们将使用紫色的**调用Ball1.Bounce**块。我们将使用之前使用的相同橙色**获取边缘**块，但这次我们不会指定特定的边缘。球接触的任何边缘（除了底部边缘）都会使球弹起。复制并粘贴**获取边缘块**，将其添加到紫色**调用Ball1.Bounce**块中，并将其插入**else**槽中，如下所示：
- en: '![Ending the game or bouncing the ball](img/00104.jpeg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![结束游戏或弹球](img/00104.jpeg)'
- en: Think of **else** as meaning *otherwise*. If the ball hits an edge equal to
    **-1**, then execute the **then** code, otherwise execute the **else** code. In
    other words, if the **if** option is not met (if the ball doesn't hit the **-1**
    edge), then the program will skip **then** and jump to **else**.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 将**else**视为表示*否则*。如果球击中等于**-1**的边缘，则执行**then**代码，否则执行**else**代码。换句话说，如果**if**选项不满足（如果球没有击中**-1**边缘），则程序将跳过**then**并跳转到**else**。
- en: Following is a screenshot of our app when the ball hits the bottom edge, stops,
    and displays **Game Over**.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们应用在球击中底部边缘、停止并显示**游戏结束**时的截图。
- en: '![Ending the game or bouncing the ball](img/00105.jpeg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![结束游戏或弹球](img/00105.jpeg)'
- en: The Reset button
  id: totrans-211
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 重置按钮
- en: The last thing we will do in this chapter is configure the **Reset** button.
    The **Reset** button gets pressed after the game has ended due to the ball hitting
    the bottom edge. It doesn't start the gameplay like the **Play** button does;
    it merely repositions the ball back at the top of the screen and makes the **Game
    Over** text disappear from the screen (Label).
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将要做的最后一件事是配置**重置**按钮。当球击中底部边缘后，游戏结束，此时会按下**重置**按钮。它不像**播放**按钮那样启动游戏；它仅仅是将球重新定位到屏幕顶部，并使屏幕上的**游戏结束**文本消失（标签）。
- en: 'Go into the **Reset Button** Blocks and choose the gold event **when Reset_Button.Click**.
    We want to move the ball from the bottom of the screen to the top of the screen.
    We already know how to do this because we did it for the Play Button. You can
    copy and paste the call **Ball1.MoveTo** purple block (when you click on the purple
    block and copy and paste it, it will automatically copy and paste the blue *x*,
    *y*, getter blocks attached to it). Add your blocks to the **when Reset_Button.Click**
    event, and your blocks will look like the following screenshot:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 进入**重置按钮**块并选择金色的**当重置按钮点击**事件。我们想要将球从屏幕底部移动到顶部。我们已经知道如何做，因为我们为**播放按钮**做了这件事。你可以复制并粘贴**球1移动到**紫色块（当你点击紫色块并复制粘贴时，它将自动复制并粘贴附带的蓝色*x*、*y*、获取器块）。将你的块添加到**当重置按钮点击**事件中，你的块将看起来像以下截图：
- en: '![The Reset button](img/00106.jpeg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![重置按钮](img/00106.jpeg)'
- en: 'These blocks reposition the ball back up to the top of the screen (to a random
    **x** location), but the **Game Over** text will still be displayed. To have the
    Reset Button erase this, we will simply set the **Score Text** to blank text instead
    of **Game Over**. Copy and paste the dark green **set Score.Text to** block from
    the **when Ball1.EdgeReached** event block (copying and pasting the green Setter
    block will also copy and paste the pink text block). Click on the **Game Over**
    text and press *Delete*, so the text area is empty. Add this set of blocks to
    the bottom of the **when Reset_Button.Click** event block, as follows:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方块将球重新定位到屏幕顶部（到一个随机的**x**位置），但**游戏结束**文本仍然会显示。为了使重置按钮擦除这个文本，我们将简单地将**得分文本**设置为空白文本而不是**游戏结束**。从**当球1边缘到达**事件块中复制并粘贴深绿色的**设置得分.Text**块（复制并粘贴绿色的设置器块也会复制并粘贴粉色的文本块）。点击**游戏结束**文本并按*删除*，使文本区域为空。将这组块添加到**当重置按钮点击**事件块的底部，如下所示：
- en: '![The Reset button](img/00107.jpeg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![重置按钮](img/00107.jpeg)'
- en: The following is a screenshot of our app after the **Reset** button is pressed.
    It shows the ball up at the top of the screen and a blank area where the **Game
    Over** text previously appeared.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在按下**重置**按钮后我们应用的截图。它显示了球在屏幕顶部，以及之前**游戏结束**文本出现的地方的空白区域。
- en: '![The Reset button](img/00108.jpeg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![重置按钮](img/00108.jpeg)'
- en: Our first version of the Fling app is now complete! We have designed and coded
    the Fling app, so when the Play Button is clicked, it will randomly position the
    ball at the top of the screen and start the ball rolling downward. Flinging the
    ball with a finger causes the ball to move in the opposite direction to than was
    going. The ball bounces of all the edges, except for the bottom one. When the
    ball hits the bottom edge, it stops and the app displays **Game Over**. The **Reset**
    button repositions the ball to a random position at the top of the screen. At
    this point, you may or may not have discovered that we have a bug! It has something
    to do with the Play and Reset buttons. We will reveal and fix this bug in the
    next chapter.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一版Fling应用现在完成了！我们设计和编码了Fling应用，所以当点击**播放按钮**时，球会随机定位到屏幕顶部并开始滚动向下。用手指弹球会使球向相反方向移动。球会从所有边缘弹起，除了底部。当球击中底部边缘时，它会停止，应用会显示**游戏结束**。**重置**按钮将球重新定位到屏幕顶部的随机位置。此时，你可能已经或还没有发现我们有一个bug！它与**播放**和**重置**按钮有关。我们将在下一章揭示并修复这个bug。
- en: Summary
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: Wow! You have learned a great deal about the App Inventor platform in this chapter
    and you have built and programmed your first app! This is a huge accomplishment!
    But, as you may have noticed, we have an issue to fix. We will demonstrate not
    only how to debug your first bug, but also how to add more features. Really, this
    is just the beginning of your mobile computing adventure. There is much more to
    learn and create! Our Fling app is functional and simple, but I'm sure you can
    think of countless more features to enhance it. In the next chapter, you will
    learn how to expand the app's complexity by creating a scoring mechanism that
    is displayed when the ball touches the top edge, by allowing the ball to be flung
    only from the lower half of the screen, and by creating levels and increasing
    the speed of the ball
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！在本章中，你已经对App Inventor平台有了很多了解，并且你已经构建并编写了你的第一个应用程序！这是一个巨大的成就！但是，正如你可能已经注意到的，我们有一个问题需要解决。我们将演示如何调试你的第一个错误，以及如何添加更多功能。实际上，这仅仅是你的移动计算冒险的开始。还有更多需要学习和创造的东西！我们的Fling应用程序功能齐全且简单，但我相信你能想出无数更多功能来增强它。在下一章中，你将学习如何通过创建一个在球触碰到顶部边缘时显示的计分机制，允许球只从屏幕的下半部分发射，以及创建关卡和提高球的速度来扩展应用程序的复杂性
- en: By learning how to add more functionality to an existing app, you will gain
    experience developing multiple versions. This process of building an app with
    added features is what developers regularly do. Ultimately, once you post your
    app in an app market like Google Play, the new versions would be released as updates.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 通过学习如何向现有应用程序添加更多功能，你将获得开发多个版本的经验。这个过程就是开发者经常做的事情。最终，一旦你在像Google Play这样的应用市场中发布你的应用程序，新版本将作为更新发布。
- en: Let's take our game to the next level!
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把我们的游戏提升到下一个层次！
