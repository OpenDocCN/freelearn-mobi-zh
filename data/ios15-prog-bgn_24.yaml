- en: '*Chapter 21*: Understanding Core Data'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 21 章*：理解 Core Data'
- en: Your app is almost done! Every screen works as shown in the app tour that you
    went through in [*Chapter 9*](B17469_09_Final_VK_ePub.xhtml#_idTextAnchor133)*,
    Setting Up the User Interface*. However, there is one last thing that you need
    to do. In [*Chapter 19*](B17469_19_Final_VK_ePub.xhtml#_idTextAnchor319)*, Getting
    Started with Custom UIControls*, you implemented a **Review Form** screen, which
    lets you enter a review for a particular restaurant. In the previous chapter,
    you implemented a **Photo Filter** screen, which lets you get a photo from the
    camera or photo library and add a filter to it. But there is no way at present
    to save either reviews or photos, and they are lost when the app is closed.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用几乎完成了！每个屏幕都像您在[*第 9 章*](B17469_09_Final_VK_ePub.xhtml#_idTextAnchor133)*，设置用户界面*中看到的演示应用一样工作。然而，您还需要完成最后一件事。在[*第
    19 章*](B17469_19_Final_VK_ePub.xhtml#_idTextAnchor319)*，开始使用自定义 UIControls*中，您实现了**评论表单**屏幕，允许您为特定餐厅输入评论。在前一章中，您实现了**照片滤镜**屏幕，允许您从相机或相册获取照片并为其添加滤镜。但目前还没有保存评论或照片的方法，当应用关闭时它们都会丢失。
- en: In this chapter, you will use **Core Data** to save reviews and photos in your
    app. First, you'll learn about Core Data and its different components. Next, you'll
    create a data model for reviews and photos and create corresponding model objects
    for your app. After that, you'll set up Core Data components for your app.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将使用 **Core Data** 在您的应用中保存评论和照片。首先，您将了解 Core Data 及其不同组件。接下来，您将为评论和照片创建数据模型，并为您的应用创建相应的模型对象。然后，您将为您的应用设置
    Core Data 组件。
- en: You'll then learn about the mechanism used to save reviews and photos for a
    particular restaurant using the restaurant identifier. After that, you'll update
    the `ReviewFormViewController` and `PhotoFilterViewController` classes to save
    reviews and photos for a particular restaurant, and modify the `RestaurantDetailViewController`
    class to load and display reviews for a particular restaurant. You'll also calculate
    and display the overall rating for that restaurant.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 您将了解用于保存特定餐厅的评论和照片的机制，使用餐厅标识符。之后，您将更新 `ReviewFormViewController` 和 `PhotoFilterViewController`
    类以保存特定餐厅的评论和照片，并修改 `RestaurantDetailViewController` 类以加载和显示特定餐厅的评论。您还将计算并显示该餐厅的整体评分。
- en: Finally, on your own, you'll modify the `RestaurantDetailViewController` class
    to load and display photos for a particular restaurant.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您将独立修改 `RestaurantDetailViewController` 类以加载和显示特定餐厅的照片。
- en: By the end of this chapter, you'll understand how Core Data works. You'll also
    be able to set up Core Data components, and enable an interface between your app
    and Core Data components using a data manager class. You'll have also learned
    to save and load reviews and photos using Core Data, which you will then be able
    to implement in your own apps.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将了解 Core Data 的工作原理。您还将能够设置 Core Data 组件，并使用数据管理类在您的应用和 Core Data 组件之间建立接口。您还将学会使用
    Core Data 保存和加载评论和照片，您将在自己的应用中实现这些功能。
- en: 'The following topics will be covered:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将涵盖以下主题：
- en: Introducing Core Data
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 Core Data
- en: Implementing Core Data components for your app
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为您的应用实现 Core Data 组件
- en: Understanding how saving and loading works
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解保存和加载的工作原理
- en: Updating the `ReviewFormViewController` class to save reviews
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新 `ReviewFormViewController` 类以保存评论
- en: Updating the `PhotoFilterViewController` class to save photos
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新 `PhotoFilterViewController` 类以保存照片
- en: Displaying saved reviews and photos in the **Restaurant Detail** screen
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 **餐厅详情** 屏幕中显示保存的评论和照片
- en: Calculating a restaurant's overall rating
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算餐厅的整体评分
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will continue working on the `LetsEat` project that you modified in the
    previous chapter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您将继续在上一章中修改的 `LetsEat` 项目上工作。
- en: 'The completed Xcode project for this chapter is in the `Chapter21` folder of
    the code bundle for this book, which can be downloaded here:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的完成 Xcode 项目位于本书代码包的 `Chapter21` 文件夹中，可以在此处下载：
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 观看以下视频，了解代码的实际应用：
- en: '[https://bit.ly/3o81yKK](https://bit.ly/3o81yKK)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bit.ly/3o81yKK](https://bit.ly/3o81yKK)'
- en: Let's start by learning about the components of Core Data and how it works.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先了解核心数据组件及其工作原理。
- en: Introducing Core Data
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍核心数据
- en: Core Data is Apple's mechanism for saving app data to your device. It provides
    persistence, undo/redo, background tasks, view synchronization, versioning, and
    migration. You can define your data types and relationships using Xcode's data
    model editor, and Core Data will generate class definitions for your data types
    automatically. Core Data can then create and manage object instances based on
    the class definitions.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Core Data是苹果将应用数据保存到设备的一种机制。它提供持久性、撤销/重做、后台任务、视图同步、版本控制和迁移。你可以使用Xcode的数据模型编辑器定义数据类型和关系，Core
    Data将自动生成数据类型的类定义。然后，Core Data可以根据类定义创建和管理对象实例。
- en: Important Note
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'You can learn more about Core Data at this link: [https://developer.apple.com/documentation/coredata](https://developer.apple.com/documentation/coredata).'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过这个链接了解更多关于核心数据的信息：[https://developer.apple.com/documentation/coredata](https://developer.apple.com/documentation/coredata)。
- en: 'Core Data provides a set of classes collectively known as the Core Data stack
    to manage and persist object instances, which are as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Core Data提供了一套称为Core Data堆栈的类，用于管理和持久化对象实例，如下所示：
- en: '`NSManagedObjectModel`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NSManagedObjectModel`'
- en: Describes your app's types, including their properties and relationships.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 描述应用类型，包括它们的属性和关系。
- en: '`NSManagedObject`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NSManagedObject`'
- en: A class used to implement instances of your app's types based on data from the
    `NSManagedObjectModel`.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个用于根据`NSManagedObjectModel`中的数据实现应用类型实例的类。
- en: '`NSManagedObjectContext`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NSManagedObjectContext`'
- en: Tracks changes to instances of your app's types.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 跟踪应用类型实例的变化。
- en: '`NSPersistentStoreCoordinator`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NSPersistentStoreCoordinator`'
- en: Saves and fetches instances of your app's types from stores.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从存储中保存和检索应用类型实例。
- en: '`NSPersistentContainer`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NSPersistentContainer`'
- en: Sets up the model, context, and store coordinator simultaneously.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 同时设置模型、上下文和存储协调器。
- en: Important Note
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'You can learn more about the Core Data stack at this link: [https://developer.apple.com/documentation/coredata/core_data_stack](https://developer.apple.com/documentation/coredata/core_data_stack).'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以通过这个链接了解更多关于Core Data堆栈的信息：[https://developer.apple.com/documentation/coredata/core_data_stack](https://developer.apple.com/documentation/coredata/core_data_stack)。
- en: In the next section, you'll implement Core Data components required for your
    app to save reviews or photos.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将实现应用所需的核心数据组件以保存评论或照片。
- en: Implementing Core Data components for your app
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现应用的核心数据组件
- en: Before you implement Core Data components for your app, let's think about what
    you need to do to save reviews or photos.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现应用的核心数据组件之前，让我们思考一下保存评论或照片需要做什么。
- en: Imagine you're saving a review or photo using Microsoft Word. You first create
    a new Word document template with the relevant fields for a review or photo. You
    then create new Word documents based on the templates and fill in the data. You
    make whatever changes are necessary, perhaps changing the text of the review,
    or changing the effect you're applying to the photo. At this point, you have not
    saved the file yet. When you are happy with your document, you save it to the
    hard disk of your computer. The next time you want to view your review or photo,
    you search your hard disk for the relevant document and double-click it to open
    it in Word so you can see it once more.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下你正在使用Microsoft Word保存评论或照片。你首先创建一个新的Word文档模板，其中包含评论或照片的相关字段。然后，你根据模板创建新的Word文档并填写数据。你进行必要的更改，比如更改评论的文本，或者更改应用于照片的效果。在这个阶段，你还没有保存文件。当你对你的文档满意时，你将其保存到电脑的硬盘上。下次你想查看你的评论或照片时，你会在硬盘上搜索相关文档，双击它以在Word中打开，以便再次查看。
- en: Now that you have an idea of what you need to do, let's review the steps required
    to implement it. First, you need to create a data model for a review or photo.
    You do this by creating **entities** in Xcode's data model editor, which are like
    Microsoft Word templates. Entities can have **attributes**, which are like fields
    in the Microsoft Word templates.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了需要做什么，让我们回顾实现它所需的步骤。首先，你需要为评论或照片创建一个数据模型。你通过在Xcode的数据模型编辑器中创建**实体**来完成此操作，这些实体类似于Microsoft
    Word模板。实体可以具有**属性**，这些属性类似于Microsoft Word模板中的字段。
- en: Xcode can then create an `NSManagedObjectModel` class from this data model.
    Core Data will then use this `NSManagedObjectModel` class to create `NSManagedObject`
    instances, similar to Microsoft Word templates being used to create Microsoft
    Word files.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode 可以从这个数据模型创建一个 `NSManagedObjectModel` 类。然后，Core Data 将使用这个 `NSManagedObjectModel`
    类来创建 `NSManagedObject` 实例，类似于 Microsoft Word 模板被用来创建 Microsoft Word 文件。
- en: These `NSManagedObject` instances are placed in an `NSManagedObjectContext`
    instance, where your app has access to them, similar to opening Microsoft Word
    files in Microsoft Word. Then, when you bring up the `NSManagedObject` instances,
    and you can modify them as much as you like, similar to Microsoft Word documents
    being edited in Microsoft Word.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这些 `NSManagedObject` 实例被放置在一个 `NSManagedObjectContext` 实例中，你的应用程序可以访问它们，类似于在
    Microsoft Word 中打开 Microsoft Word 文件。然后，当你调用 `NSManagedObject` 实例时，你可以像在 Microsoft
    Word 中编辑 Microsoft Word 文档一样修改它们。
- en: When you're done with the review or photo, the `NSManagedObject` instances in
    the `NSManagedObjectContext` instance are saved to a file in your iOS device,
    called the **persistent store**. This is similar to saving Word documents to your
    hard disk when you're done with them.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成审查或照片后，`NSManagedObjectContext` 实例中的 `NSManagedObject` 实例将被保存到你的 iOS 设备上的一个文件中，称为
    **持久化存储**。这类似于当你完成 Word 文档时将 Word 文档保存到硬盘上。
- en: The `NSPersistentStoreCoordinator` instance manages the flow of information
    between the persistent store and the `NSManagedObjectContext` instance.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`NSPersistentStoreCoordinator` 实例管理持久化存储和 `NSManagedObjectContext` 实例之间的信息流。'
- en: You'll use the `NSPersistentContainer` class to create instances of `NSManagedObjectModel`,
    `NSManagedObjectContext`, and `NSPersistentStoreCoordinator` for your app.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用 `NSPersistentContainer` 类来为你的应用程序创建 `NSManagedObjectModel`、`NSManagedObjectContext`
    和 `NSPersistentStoreCoordinator` 的实例。
- en: Important Note
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'You can learn more about how to set up the Core Data stack at this link: [https://developer.apple.com/documentation/coredata/setting_up_a_core_data_stack](https://developer.apple.com/documentation/coredata/setting_up_a_core_data_stack).'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在此链接中了解更多关于如何设置 Core Data 栈的信息：[https://developer.apple.com/documentation/coredata/setting_up_a_core_data_stack](https://developer.apple.com/documentation/coredata/setting_up_a_core_data_stack)。
- en: You'll create entities and attributes to represent a review or photo using Xcode's
    data model editor in the next section.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将使用 Xcode 的数据模型编辑器创建表示审查或照片的实体和属性。
- en: Creating a data model
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建数据模型
- en: 'Currently, when you tap **Save** in the **Review Form** screen, the data you
    entered in the fields is just printed to the Debug area, and tapping **Save**
    in the **Photo Filter** screen doesn''t do anything. The first step is to create
    class definitions for objects to store data from the **Review Form** screen and
    the photo from the **Photo Filter** screen. You''ll create entities for reviews
    and photos using Xcode''s data model editor, and Xcode will automatically generate
    the class definitions. Let''s create the entity for reviews first. Follow these
    steps:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，当你点击 **保存** 在 **审查表单** 屏幕时，你输入的字段中的数据只是打印到调试区域，而在 **照片滤镜** 屏幕上点击 **保存** 不会做任何事情。第一步是为存储来自
    **审查表单** 屏幕的数据和来自 **照片滤镜** 屏幕的照片的对象创建类定义。你将使用 Xcode 的数据模型编辑器创建用于审查和照片的实体，Xcode
    将自动生成类定义。让我们首先创建审查的实体。按照以下步骤操作：
- en: Right-click the `Misc` folder in the Project navigator and choose `Core Data`.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中右键点击 `Misc` 文件夹并选择 `Core Data`。
- en: Right-click the `Core Data` group and choose **New File**.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 `Core Data` 组并选择 **新建文件**。
- en: '`data` in the filter field, and select **Data Model**. Click **Next**:![Figure
    21.1: Data Model template selected'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在过滤器字段中输入 `data`，并选择 **数据模型**。点击 **下一步**：![图 21.1：选择数据模型模板
- en: '](img/Figure_21.01_B17469.jpg)'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_21.01_B17469.jpg)'
- en: 'Figure 21.1: Data Model template selected'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 21.1：选择数据模型模板
- en: 'Name the file `LetsEatModel` and click **Create**. The data model editor appears
    in the Editor area:![Figure 21.2: Editor area showing data model editor'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件命名为 `LetsEatModel` 并点击 **创建**。数据模型编辑器将在编辑区域显示：![图 21.2：显示数据模型编辑器的编辑区域
- en: '](img/Figure_21.02_B17469.jpg)'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_21.02_B17469.jpg)'
- en: 'Figure 21.2: Editor area showing data model editor'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 21.2：显示数据模型编辑器的编辑区域
- en: 'Click the **Add Entity** button:![Figure 21.3: Add Entity button'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **添加实体** 按钮：![图 21.3：添加实体按钮
- en: '](img/Figure_21.03_B17469.jpg)'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_21.03_B17469.jpg)'
- en: 'Figure 21.3: Add Entity button'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 21.3：添加实体按钮
- en: 'An **Entity** appears under the **ENTITIES** section. The **Attributes** for
    this entity appear to the right of the entity:![Figure 21.4: Data model editor
    with Entity selected'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**实体**出现在 **ENTITIES** 部分。此实体的 **属性**出现在实体的右侧：![图 21.4：选择实体的数据模型编辑器'
- en: '](img/Figure_21.04_B17469.jpg)'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_21.04_B17469.jpg)'
- en: 'Figure 21.4: Data model editor with Entity selected'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 21.4：选择实体的数据模型编辑器
- en: 'Double-click `Review`:![Figure 21.5: Data model editor with Entity renamed
    to Review'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击 `Review`：![图 21.5：将实体重命名为 Review 的数据模型编辑器
- en: '](img/Figure_21.05_B17469.jpg)'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_21.05_B17469.jpg)'
- en: 'Figure 21.5: Data model editor with Entity renamed to Review'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 21.5：将实体重命名为 Review 的数据模型编辑器
- en: 'Click the `name` and the `String`:![Figure 21.6: Data model editor showing
    the name attribute for the Review entity'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `name` 和 `String`：![图 21.6：显示 Review 实体的 name 属性的数据模型编辑器
- en: '](img/Figure_21.06_B17469.jpg)'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_21.06_B17469.jpg)'
- en: 'Figure 21.6: Data model editor showing the name attribute for the Review entity'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 21.6：显示 Review 实体的 name 属性的数据模型编辑器
- en: 'You''ll need to create an attribute for each field in the `restaurantID` as
    well to associate the review with the restaurant. Add the following attributes
    and types:![Figure 21.7: Attributes to be added to the Review entity'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还需要为 `restaurantID` 中的每个字段创建一个属性，以便将评论与餐厅关联起来。添加以下属性和类型：![图 21.7：要添加到 Review
    实体的属性
- en: '](img/Figure_21.07_B17469.jpg)'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_21.07_B17469.jpg)'
- en: 'Figure 21.7: Attributes to be added to the Review entity'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 21.7：要添加到 Review 实体的属性
- en: '`date` will be automatically set when the `Review` instance is created.'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当创建 `Review` 实例时，`date` 将自动设置。
- en: 'Check to see that your `Review` entity''s attributes look like this when done:![Figure
    21.8: The attributes for Review entity'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查完成时，你的 `Review` 实体的属性看起来应该像这样：![图 21.8：Review 实体的属性
- en: '](img/Figure_21.08_B17469.jpg)'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_21.08_B17469.jpg)'
- en: 'Figure 21.8: The attributes for Review entity'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 21.8：Review 实体的属性
- en: 'Add one more attribute, `uuid`, of type `UUID`. This is used as a key value
    for each `Review` instance. Click the Data Model inspector, and under `Review`
    instance must have a key value.![Figure 21.9: Data model inspector showing Optional
    unticked for the uuid attribute'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个额外的属性，`uuid`，类型为 `UUID`。这被用作每个 `Review` 实例的键值。点击数据模型检查器，在 `Review` 实例下必须有一个键值。![图
    21.9：显示 uuid 属性可选未勾选的数据模型检查器
- en: '](img/Figure_21.09_B17469.jpg)'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_21.09_B17469.jpg)'
- en: 'Figure 21.9: Data model inspector showing Optional unticked for the uuid attribute'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 21.9：显示 uuid 属性可选未勾选的数据模型检查器
- en: 'Add a second entity, called `RestaurantPhoto`, with the following attributes.
    Core Data can''t store `UIImage` objects, so the `photo` attribute''s type is
    set to `UIImage` objects when you need them to be displayed in your app. `date`
    will be automatically set when the `RestaurantPhoto` instance is created. You''ll
    use `restaurantID` to associate the photo with the restaurant, and `uuid` as the
    key value:![Figure 21.10: Attributes for the RestaurantPhoto entity'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加第二个实体，称为 `RestaurantPhoto`，具有以下属性。Core Data 无法存储 `UIImage` 对象，因此当您需要将 `photo`
    属性设置为 `UIImage` 对象以在您的应用程序中显示时，`photo` 属性的类型被设置为 `UIImage` 对象。当创建 `RestaurantPhoto`
    实例时，`date` 将自动设置。您将使用 `restaurantID` 将照片与餐厅关联起来，并使用 `uuid` 作为键值：![图 21.10：RestaurantPhoto
    实体的属性
- en: '](img/Figure_21.10_B17469.jpg)'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_21.10_B17469.jpg)'
- en: 'Figure 21.10: Attributes for the RestaurantPhoto entity'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 21.10：RestaurantPhoto 实体的属性
- en: 'For `uuid`, don''t forget to uncheck **Optional** in the Data Model inspector:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 `uuid`，不要忘记在数据模型检查器中取消选择 **Optional**：
- en: '![Figure 21.11: Data model inspector showing Optional unticked for the uuid
    attribute'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 21.11：显示 uuid 属性可选未勾选的数据模型检查器'
- en: '](img/Figure_21.11_B17469.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_21.11_B17469.jpg)'
- en: 'Figure 21.11: Data model inspector showing Optional unticked for the uuid attribute'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21.11：显示 uuid 属性可选未勾选的数据模型检查器
- en: You have finished creating the entities that you need for your app. Build your
    app. Class files for the `Review` and `RestaurantPhoto` entities will be automatically
    created by Xcode, but they will not be visible in the Project navigator. To make
    it easier to work with them, you will create a model object for each entity, starting
    with `ReviewItem` in the next section.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经完成了为您的应用程序创建所需的实体。构建您的应用程序。Xcode 将自动创建 `Review` 和 `RestaurantPhoto` 实体的类文件，但它们在项目导航器中不可见。为了更容易地使用它们，您将为每个实体创建一个模型对象，从下一节的
    `ReviewItem` 开始。
- en: Creating ReviewItem
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 ReviewItem
- en: You have created two entities to store reviews and photo data using Xcode's
    data model editor. Xcode will then automatically generate two `NSManagedObject`
    class definitions from the data model, `Review` and `RestaurantPhoto`, but you
    can't see them in the Project navigator.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您已使用 Xcode 的数据模型编辑器创建了两个实体来存储评论和照片数据。然后，Xcode 将从数据模型自动生成两个 `NSManagedObject`
    类定义，`Review` 和 `RestaurantPhoto`，但您在项目导航器中看不到它们。
- en: 'You will create two model objects, `ReviewItem` and `RestaurantPhotoItem`,
    that will work hand-in-hand with `Review` and `RestaurantPhoto` instances. Let''s
    create `ReviewItem` now. Follow these steps:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 您将创建两个模型对象，`ReviewItem` 和 `RestaurantPhotoItem`，它们将与 `Review` 和 `RestaurantPhoto`
    实例协同工作。现在让我们创建 `ReviewItem`。按照以下步骤操作：
- en: Right-click the `ReviewForm` folder in the Project navigator and choose `Model`.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中右键点击 `ReviewForm` 文件夹，并选择 `Model`。
- en: Right-click the `Model` folder inside the `ReviewForm` folder and select **New
    File**.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ReviewForm` 文件夹内的 `Model` 文件夹中右键点击，并选择 **New File**。
- en: '**iOS** should already be selected. Choose **Swift File** and then click **Next**.'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS** 应已选中。选择 **Swift File** 然后点击 **Next**。'
- en: Name this file `ReviewItem`. Click `ReviewItem` file appears in the Project
    navigator.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件命名为 `ReviewItem`。点击后，`ReviewItem` 文件将出现在项目导航器中。
- en: 'Modify the file as shown:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式修改文件：
- en: '[PRE0]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, the `ReviewItem` structure's properties are the same as the
    `Review` entity's attributes. The initializer creates a `ReviewItem` instance
    and maps the attributes from `Review` to the properties of the `ReviewItem` instance.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`ReviewItem` 结构的属性与 `Review` 实体的属性相同。初始化器创建一个 `ReviewItem` 实例，并将 `Review`
    的属性映射到 `ReviewItem` 实例的属性上。
- en: In the next section, you'll create a second model object, `RestaurantPhotoItem`,
    which will be the model object for the `RestaurantPhoto` entity.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将创建第二个模型对象 `RestaurantPhotoItem`，它将是 `RestaurantPhoto` 实体的模型对象。
- en: Creating RestaurantPhotoItem
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 `RestaurantPhotoItem`
- en: 'The process for creating `RestaurantPhotoItem` is similar to creating `ReviewItem`.
    Follow these steps:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `RestaurantPhotoItem` 的过程与创建 `ReviewItem` 类似。按照以下步骤操作：
- en: Right-click the `Model` folder inside the `PhotoFilter` folder and choose **New
    File**.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `PhotoFilter` 文件夹内的 `Model` 文件夹中右键点击，并选择 **New File**。
- en: '**iOS** should already be selected. Choose **Swift File** and then click **Next**.'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS** 应已选中。选择 **Swift File** 然后点击 **Next**。'
- en: Name this file `RestaurantPhotoItem`. Click **Create**.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件命名为 `RestaurantPhotoItem`。点击 **Create**。
- en: 'Modify the file as shown:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式修改文件：
- en: '[PRE1]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now that you have declared and defined `ReviewItem` and `RestaurantPhotoItem`,
    let's create a Core Data manager, which will set up the Core Data components for
    your app, in the next section.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经声明并定义了 `ReviewItem` 和 `RestaurantPhotoItem`，让我们在下一节创建一个 Core Data 管理器，该管理器将为您的应用设置
    Core Data 组件。
- en: Creating a Core Data manager
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Core Data 管理器
- en: 'At this point, Xcode has automatically generated the `Review` and `RestaurantData`
    class definitions from the data model, and you have declared and defined the corresponding
    model objects, `ReviewItem` and `RestaurantPhotoItem`. Now you''ll create a `CoreDataManager`
    class that will set up the Core Data components for your app. Follow these steps:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，Xcode 已经从数据模型自动生成了 `Review` 和 `RestaurantData` 类定义，并且您已经声明并定义了相应的模型对象，`ReviewItem`
    和 `RestaurantPhotoItem`。现在您将创建一个 `CoreDataManager` 类，该类将为您的应用设置 Core Data 组件。按照以下步骤操作：
- en: Right-click the `Core Data` folder inside the `Misc` folder and choose **New
    File**.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Misc` 文件夹内的 `Core Data` 文件夹中右键点击，并选择 **New File**。
- en: '**iOS** should already be selected. Choose **Swift File** and then click **Next**.'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS** 应已选中。选择 **Swift File** 然后点击 **Next**。'
- en: Name this file `CoreDataManager`. Click `CoreDataManager` file appears in the
    Project navigator.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件命名为 `CoreDataManager`。点击后，`CoreDataManager` 文件将出现在项目导航器中。
- en: 'Add the following code after the `import` statement:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `import` 语句后添加以下代码：
- en: '[PRE2]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This gives you access to the Core Data library.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这使您能够访问 Core Data 库。
- en: 'Add the following code to declare and define the `CoreDataManager` structure:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码以声明和定义 `CoreDataManager` 结构：
- en: '[PRE3]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This creates and initializes instances of `NSManagedObjectModel`, `NSPersistentStoreCoordinator`,
    and `NSManagedObjectContext`.
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将创建并初始化 `NSManagedObjectModel`、`NSPersistentStoreCoordinator` 和 `NSManagedObjectContext`
    的实例。
- en: 'To create an instance of the `CoreDataManager` structure that will be available
    throughout your app, click the `AppDelegate` file in the Project navigator and
    add the following code after the closing curly brace:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建一个将在整个应用中可用的 `CoreDataManager` 结构实例，请在项目导航器中点击 `AppDelegate` 文件，并在闭合花括号后添加以下代码：
- en: '[PRE4]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, you''ll add methods to create `Review` and `RestaurantPhoto` instances,
    populate them using `ReviewItem` and `RestaurantPhotoItem` instances, and save
    them to the persistent store. Follow these steps:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将添加创建 `Review` 和 `RestaurantPhoto` 实例的方法，使用 `ReviewItem` 和 `RestaurantPhotoItem`
    实例填充它们，并将它们保存到持久存储中。按照以下步骤操作：
- en: 'Click the `CoreDataManager` file in the Project navigator. Add the following
    code after the initializer to implement the `addReview(_:)` method:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击 `CoreDataManager` 文件。在初始化器之后添加以下代码以实现 `addReview(_:)` 方法：
- en: '[PRE5]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This method takes a `ReviewItem` instance as a parameter and gets an empty `Review`
    instance from the `NSManagedObjectContext` instance. The properties of the `ReviewItem`
    instance are assigned to the attributes of the `Review` instance, and the `save()`
    method is called to save the contents of the `NSManagedObjectContext` instance
    to the persistent store. Note that you will see an error as you have not yet implemented
    the `save()` method. Ignore this error for now.
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此方法接受一个 `ReviewItem` 实例作为参数，并从 `NSManagedObjectContext` 实例中获取一个空的 `Review` 实例。`ReviewItem`
    实例的属性被分配给 `Review` 实例的属性，并调用 `save()` 方法将 `NSManagedObjectContext` 实例的内容保存到持久存储中。请注意，您将看到错误，因为您尚未实现
    `save()` 方法。现在忽略此错误。
- en: 'Add the following code after the `addReview(_:)` method to implement the `addPhoto(_:)`
    method:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `addReview(_:)` 方法之后添加以下代码以实现 `addPhoto(_:)` 方法：
- en: '[PRE6]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This method is similar to `addReview(_:)`. It takes a `RestaurantPhotoItem`
    instance as a parameter and gets an empty `RestaurantPhoto` instance from the
    `NSManagedObjectContext` instance. The properties of the `RestaurantPhotoItem`
    instance are assigned to the properties of the `RestaurantPhoto` instance, and
    the `save()` method is called to save the contents of the `NSManagedObjectContext`
    instance to the persistent store. Note that you will see an error as you have
    not yet implemented the `save()` method. Again, ignore this error for now.
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此方法与 `addReview(_:)` 类似。它接受一个 `RestaurantPhotoItem` 实例作为参数，并从 `NSManagedObjectContext`
    实例中获取一个空的 `RestaurantPhoto` 实例。`RestaurantPhotoItem` 实例的属性被分配给 `RestaurantPhoto`
    实例的属性，并调用 `save()` 方法将 `NSManagedObjectContext` 实例的内容保存到持久存储中。请注意，您将看到错误，因为您尚未实现
    `save()` 方法。同样，现在忽略此错误。
- en: 'Implement the `save()` method by adding the following code before the final
    curly brace:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在最后的括号之前添加以下代码来实现 `save()` 方法：
- en: '[PRE7]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This `do-catch` block saves the contents of the `NSManagedObjectContext` instance
    to the persistent store. If the save was not successful, an error message is printed
    in the Debug area.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此 `do-catch` 块将 `NSManagedObjectContext` 实例的内容保存到持久存储中。如果保存不成功，将在调试区域打印错误消息。
- en: 'When you want to retrieve reviews and photos from the persistent store, you
    will use `restaurantID` as an identifier to get reviews and photos for a particular
    restaurant. Let''s implement the methods required for this now. Add the following
    code after the `addPhoto(_:)` method to implement the `fetchReviews(by:)` and
    `fetchPhotos(by:)` methods:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想要从持久存储中检索评论和照片时，您将使用 `restaurantID` 作为标识符来获取特定餐厅的评论和照片。现在让我们实现所需的这些方法。在 `addPhoto(_:)`
    方法之后添加以下代码以实现 `fetchReviews(by:)` 和 `fetchPhotos(by:)` 方法：
- en: '[PRE8]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s break this down, starting with `fetchReviews(by:)`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下，从 `fetchReviews(by:)` 开始：
- en: '[PRE9]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This gets a reference to the `NSManagedObjectContext` instance.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这获取了对 `NSManagedObjectContext` 实例的引用。
- en: '[PRE10]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This creates a `Review` instances from the persistent store.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这从持久存储中创建一个 `Review` 实例。
- en: '[PRE11]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This creates a `Review` instances with the specified `restaurantID`.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个具有指定 `restaurantID` 的 `Review` 实例。
- en: '[PRE12]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This creates an array, `reviewItems`, that you will use to store the results
    of the fetch request.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个数组，`reviewItems`，您将使用它来存储获取请求的结果。
- en: '[PRE13]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This sorts the results of the fetch request by date, with the most recent items
    first.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这按日期对获取请求的结果进行排序，最近的条目排在前面。
- en: '[PRE14]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This sets the predicate for the fetch request.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这设置了获取请求的谓词。
- en: '[PRE15]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This `do-catch` block performs the fetch request and places the results in the
    `items` array. If unsuccessful, your app will crash and an error message will
    be printed in the Debug area.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 此 `do-catch` 块执行获取请求并将结果放置在 `items` 数组中。如果失败，您的应用程序将崩溃，并在调试区域打印错误消息。
- en: '`fetchPhotos(by:)` works the same way as `fetchReview(by:)`, but returns an
    array of `RestaurantPhotoItems` instances instead.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`fetchPhotos(by:)` 与 `fetchReview(by:)` 的工作方式相同，但返回一个 `RestaurantPhotoItems`
    实例的数组。'
- en: You've created a `CoreDataManager` class that adds data to and retrieves data
    from the persistent store. Build and run your app to test for errors. It should
    work the same way as it did before.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经创建了一个 `CoreDataManager` 类，用于向持久存储中添加数据并检索数据。构建并运行您的应用以测试错误。它应该与之前一样工作。
- en: You've implemented all the components of Core Data in your app. Next, you'll
    configure `RestaurantDetailViewController` to use Core Data to display reviews
    and photos in the **Restaurant Detail** screen. You'll start by learning how the
    **Restaurant Detail** screen will display reviews and photos for a particular
    restaurant.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经在您的应用中实现了 Core Data 的所有组件。接下来，您将配置 `RestaurantDetailViewController` 以使用 Core
    Data 在 **餐厅详情** 屏幕中显示评论和照片。您将从学习 **餐厅详情** 屏幕如何显示特定餐厅的评论和照片开始。
- en: Tip
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Since this is a long chapter, you may wish to take a break here.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个较长的章节，您可能希望在这里休息一下。
- en: Understanding how saving and loading works
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解保存和加载的工作原理
- en: Let's review what you have done so far. You have created `Review` and `RestaurantPhoto`
    entities using the data model editor, and you have created the corresponding model
    objects for them, named `ReviewItem` and `RestaurantPhotoItem`. You created the
    `CoreDataManager` class to add and get `Review` and `RestaurantPhoto` instances
    from the persistent store. The `CoreDataManager` class uses the restaurant identifier
    to associate reviews and restaurant photos with a specific restaurant, but where
    does it come from?
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下您到目前为止所做的工作。您已经使用数据模型编辑器创建了 `Review` 和 `RestaurantPhoto` 实体，并为它们创建了相应的模型对象，分别命名为
    `ReviewItem` 和 `RestaurantPhotoItem`。您创建了 `CoreDataManager` 类来从持久存储中添加和获取 `Review`
    和 `RestaurantPhoto` 实例。`CoreDataManager` 类使用餐厅标识符将评论和餐厅照片与特定餐厅关联起来，但它从哪里来？
- en: 'Open the `Misc` folder in your project, and open the `JSON` folder. If you
    click on any one of the JSON files inside, you''ll see that each restaurant has
    a unique numeric identifier. For example, the identifier for The Tap Trailhouse
    restaurant is `145237`, as shown in the screenshot below:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您项目中的 `Misc` 文件夹，然后打开 `JSON` 文件夹。如果您点击其中的任何 JSON 文件，您会看到每个餐厅都有一个唯一的数字标识符。例如，The
    Tap Trailhouse 餐厅的标识符是 `145237`，如图下所示：
- en: '![Figure 21.12: Editor area showing contents for Boston.json'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 21.12: Editor area showing contents for Boston.json'
- en: '](img/Figure_21.12_B17469.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_21.12_B17469.jpg)'
- en: 'Figure 21.12: Editor area showing contents for Boston.json'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21.12：编辑区域显示 Boston.json 的内容
- en: 'When you save restaurant photos and reviews to the persistent store, you will
    save them together with this identifier. Then, when a particular restaurant is
    displayed in the `RestaurantDetailViewController` will use a `ReviewDataManager`
    instance to retrieve reviews and restaurant photos of that restaurant and display
    them in collection views, as shown in the screenshot:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将餐厅照片和评论保存到持久存储中时，您将连同此标识符一起保存它们。然后，当在 `RestaurantDetailViewController` 中显示特定餐厅时，将使用一个
    `ReviewDataManager` 实例来检索该餐厅的评论和餐厅照片，并在集合视图中显示它们，如图中所示：
- en: '![Figure 21.13: iOS Simulator showing Restaurant Detail screen with reviews
    and restaurant photos'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 21.13: iOS Simulator showing Restaurant Detail screen with reviews
    and restaurant photos'
- en: '](img/Figure_21.13_B17469.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_21.13_B17469.jpg)'
- en: 'Figure 21.13: iOS Simulator showing Restaurant Detail screen with reviews and
    restaurant photos'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21.13：iOS 模拟器显示带有评论和餐厅照片的餐厅详情屏幕
- en: 'If there are no reviews or photos, you''ll use the `NoDataView` to inform the
    user there are no reviews or photos, as shown in the screenshot:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有评论或照片，您将使用 `NoDataView` 来通知用户没有评论或照片，如图中所示：
- en: '![Figure 21.14: iOS Simulator showing Restaurant Detail screen without reviews
    or restaurant photos'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 21.14: iOS Simulator showing Restaurant Detail screen without reviews
    or restaurant photos'
- en: '](img/Figure_21.14_B17469.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_21.14_B17469.jpg)'
- en: 'Figure 21.14: iOS Simulator showing Restaurant Detail screen without reviews
    or restaurant photos'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21.14：iOS 模拟器显示没有评论或餐厅照片的餐厅详情屏幕
- en: '`RestaurantItem` has a property, `restaurantID`, to store restaurant identifiers.
    When `RestaurantDataManager` loads a JSON file and creates an array of `RestaurantItem`
    instances, the identifier for each restaurant is obtained from the JSON file and
    stored in the `restaurantID` property.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`RestaurantItem` 有一个属性，`restaurantID`，用于存储餐厅标识符。当 `RestaurantDataManager` 加载
    JSON 文件并创建 `RestaurantItem` 实例数组时，每个餐厅的标识符从 JSON 文件中获取并存储在 `restaurantID` 属性中。'
- en: In the next section, you'll update `ReviewFormViewController` to save a review
    with a restaurant identifier to the persistent store.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将更新 `ReviewFormViewController` 以将带有餐厅标识符的评论保存到持久存储中。
- en: Updating the ReviewFormViewController class to save reviews
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新 ReviewFormViewController 类以保存评论
- en: 'The `onSaveTapped(_:)` method to save a review to the persistent store when
    the **Save** button is tapped. Follow these steps:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击 **保存** 按钮时，`onSaveTapped(_:)` 方法将评论保存到持久存储中。按照以下步骤操作：
- en: 'Click the `ReviewFormViewController` file in the Project navigator. Add the
    following property to the `ReviewFormViewController` class before the outlet declarations
    to store the restaurant identifier:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击 `ReviewFormViewController` 文件。在输出声明之前向 `ReviewFormViewController`
    类添加以下属性以存储餐厅标识符：
- en: '[PRE16]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create a `private` extension, move the `onSaveTapped(_:)` method into it, and
    modify it as follows:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `private` 扩展，将 `onSaveTapped(_:)` 方法移动到其中，并按以下方式修改：
- en: '[PRE17]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note that there is no mechanism to pass a restaurant identifier to `ReviewFormViewController`
    at present. In the next section, you'll see how to get the restaurant identifier
    from `RestaurantDetailViewController` and pass it to `ReviewFormViewController`.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，目前没有机制将餐厅标识符传递给 `ReviewFormViewController`。在下一节中，你将看到如何从 `RestaurantDetailViewController`
    获取餐厅标识符并将其传递给 `ReviewFormViewController`。
- en: Passing RestaurantID to the ReviewFormViewController instance
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 RestaurantID 传递给 ReviewFormViewController 实例
- en: 'The `ReviewFormViewController` get that identifier from? You must pass the
    identifier value from `RestaurantDetailViewController` to `ReviewFormViewController`
    so that it can save reviews with the restaurant identifier for that restaurant.
    As you did before in [*Chapter 17*](B17469_17_Final_VK_ePub.xhtml#_idTextAnchor248)*,
    Getting Started with JSONFiles*, you''ll use segue identifiers to determine which
    segue is occurring, and then implement methods to pass the identifier value between
    the two view controllers. Follow these steps:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`ReviewFormViewController` 如何获取该标识符？你必须从 `RestaurantDetailViewController` 将标识符值传递给
    `ReviewFormViewController`，以便它可以保存带有该餐厅标识符的评论。正如你在 [*第 17 章*](B17469_17_Final_VK_ePub.xhtml#_idTextAnchor248)*，入门
    JSONFiles* 中所做的那样，你将使用转场标识符来确定哪个转场正在发生，然后实现方法在两个视图控制器之间传递标识符值。按照以下步骤操作：'
- en: 'Open the `RestaurantDetail` storyboard file and select the segue used to go
    to the **ReviewForm** scene:![Figure 21.15: Editor area showing segue between
    Restaurant Detail and Review Form screens selected'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `RestaurantDetail` 故事板文件，并选择用于转到 **ReviewForm** 场景的转场：![图 21.15：显示 Restaurant
    Detail 和 Review Form 屏幕之间转场的编辑区域
- en: '](img/Figure_21.15_B17469.jpg)'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_21.15_B17469.jpg)'
- en: 'Figure 21.15: Editor area showing segue between Restaurant Detail and Review
    Form screens selected'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 21.15：显示 Restaurant Detail 和 Review Form 屏幕之间转场的编辑区域
- en: 'In the Attributes inspector, set `showReview` and press *Return*:![Figure 21.16:
    Attributes inspector with Identifier set to showReview'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性检查器中设置 `showReview` 并按 *Enter* 键：![图 21.16：属性检查器，标识符设置为 showReview
- en: '](img/Figure_21.16_B17469.jpg)'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_21.16_B17469.jpg)'
- en: 'Figure 21.16: Attributes inspector with Identifier set to showReview'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 21.16：属性检查器，标识符设置为 showReview
- en: 'Click the `RestaurantDetailViewController` file in the Project navigator. Add
    the following code after `viewDidLoad()` to implement the `prepare(for:sender:)`
    method:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击 `RestaurantDetailViewController` 文件。在 `viewDidLoad()` 之后添加以下代码以实现
    `prepare(for:sender:)` 方法：
- en: '[PRE18]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `prepare(for:sender:)` method checks to see if the segue has the `showReview`
    segue identifier. If it does, the `showReview(segue:)` method is executed prior
    to transitioning from the `showReview(segue:)` has not been implemented yet. You'll
    add that next.
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`prepare(for:sender:)` 方法检查是否具有 `showReview` 转场标识符。如果有，则在从 `showReview(segue:)`
    转换之前执行 `showReview(segue:)` 方法。由于 `showReview(segue:)` 方法尚未实现，你将在下一节中添加它。'
- en: 'Add the `showReview(segue:)` method inside the `private` extension, before
    the `createRating()` method:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `private` 扩展中添加 `showReview(segue:)` 方法，在 `createRating()` 方法之前：
- en: '[PRE19]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This sets the `restaurantID` property of `ReviewFormViewController` to the identifier
    of the selected restaurant.
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将 `ReviewFormViewController` 的 `restaurantID` 属性设置为所选餐厅的标识符。
- en: 'Click the `ReviewFormViewController` file in the Project navigator. Add the
    following code inside the `viewDidLoad()` method to print the restaurant identifier
    to the Debug area:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击 `ReviewFormViewController` 文件。在 `viewDidLoad()` 方法内部添加以下代码以将餐厅标识符打印到调试区域：
- en: '[PRE20]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Build and run your project, set a location, and tap **All**. Tap a restaurant,
    and tap the **Add Review** button. In the **Review Form** screen, enter a review
    and tap **Save**:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行你的项目，设置位置，并点击 **All**。点击一个餐厅，然后点击 **添加评论** 按钮。在 **评论表单** 屏幕中输入评论并点击 **保存**：
- en: '![Figure 21.17: iOS Simulator showing Review Form screen Save button'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 21.17：iOS 模拟器显示 Review Form 屏幕的保存按钮'
- en: '](img/Figure_21.17_B17469.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_21.17_B17469.jpg)'
- en: 'Figure 21.17: iOS Simulator showing Review Form screen Save button'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21.17：iOS 模拟器显示审查表单屏幕的 Save 按钮
- en: 'The restaurant identifier will appear in the Debug area:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 餐厅标识符将出现在调试区域：
- en: '![Figure 21.18: Debug area showing the restaurant identifier'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 21.18：调试区域显示餐厅标识符'
- en: '](img/Figure_21.18_B17469.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_21.18_B17469.jpg)'
- en: 'Figure 21.18: Debug area showing the restaurant identifier'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21.18：调试区域显示餐厅标识符
- en: You've successfully passed the restaurant identifier from `RestaurantDetailViewController`
    to `ReviewFormViewController`. Now, let's do the same for photos. You'll update
    `PhotoFilterViewController` to save photos with a restaurant identifier to the
    persistent store when the **Save** button is tapped in the next section.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 您已成功将餐厅标识符从 `RestaurantDetailViewController` 传递到 `ReviewFormViewController`。现在，让我们为照片做同样的事情。在下一节中，您将更新
    `PhotoFilterViewController` 以在点击 **Save** 按钮时将带有餐厅标识符的照片保存到持久存储中。
- en: Updating the PhotoFilterViewController class to save photos
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新 PhotoFilterViewController 类以保存照片
- en: 'The code that enables the `PhotoFilterViewController` class to save photos
    to the persistent store is similar to the code you implemented in the `ReviewFormViewController`
    class for saving reviews. You will now update the `PhotoFilterViewController`
    class to save photos when the **Save** button is tapped. Follow these steps:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 使 `PhotoFilterViewController` 类能够将照片保存到持久存储的代码与您在 `ReviewFormViewController`
    类中为保存评论所实现的代码类似。现在，您将更新 `PhotoFilterViewController` 类以在点击 **Save** 按钮时保存照片。按照以下步骤操作：
- en: 'Click the `PhotoFilterViewController` file in the Project navigator. Add the
    following method inside the `private` extension after the `initialize()` method:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击 `PhotoFilterViewController` 文件。在 `initialize()` 方法之后的 `private` 扩展内添加以下方法：
- en: '[PRE21]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Remember that `mainImageView` is the outlet for the large image view in the
    `saveSelectedPhoto()` method first checks to see if the `image` property of `mainImageView`
    is set. If it is, the image is assigned to `mainImage`. Next, a `RestaurantPhotoItem`
    instance is created and assigned to `restPhotoItem`, and the current date is assigned
    to the `restPhotoItem` instance's `date` property. The `mainImage` instance's
    `preparingThumbnail(of:)` method is used to create a smaller version of the image,
    which is assigned to the `restPhotoItem` instance's `photo` property. After that,
    the `restPhotoItem` instance's `restaurantID` property is set to the selected
    restaurant's identifier. Finally, the `CoreDataManager.shared.addPhoto(_:)` method
    is called to save the photo to the persistent store, and the **Photo Filter**
    screen is dismissed.
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请记住，`mainImageView` 是 `saveSelectedPhoto()` 方法中大型图像视图的输出。首先检查 `mainImageView`
    的 `image` 属性是否已设置。如果是，则将图像分配给 `mainImage`。接下来，创建一个 `RestaurantPhotoItem` 实例并将其分配给
    `restPhotoItem`，并将当前日期分配给 `restPhotoItem` 实例的 `date` 属性。使用 `mainImage` 实例的 `preparingThumbnail(of:)`
    方法创建图像的较小版本，并将其分配给 `restPhotoItem` 实例的 `photo` 属性。之后，将 `restPhotoItem` 实例的 `restaurantID`
    属性设置为所选餐厅的标识符。最后，调用 `CoreDataManager.shared.addPhoto(_:)` 方法将照片保存到持久存储，并关闭 **Photo
    Filter** 屏幕。
- en: 'You need to trigger this method when the `private` extension after the `onPhotoTapped(_:)`
    method:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要在 `onPhotoTapped(_:)` 方法之后的 `private` 扩展中触发此方法：
- en: '[PRE22]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This method will be connected to the **Save** button later.
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此方法将在稍后连接到 **Save** 按钮。
- en: 'To assign the `onSaveTapped(_:)` method to the `PhotoFilter` storyboard file
    and click the **Photo Filter View Controller** icon in the **Photo Filter View
    Controller Scene**. Open the Connections inspector. Drag from the **onSaveTapped**
    action to the **Save** button:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `onSaveTapped(_:)` 方法分配给 `PhotoFilter` 场景文件，并点击 **Photo Filter View Controller**
    图标在 **Photo Filter View Controller Scene** 中。打开连接检查器。从 **onSaveTapped** 动作拖动到
    **Save** 按钮：
- en: '![Figure 21.19: Connections inspector showing onSaveTapped: being assigned
    to the Save button'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 21.19：连接检查器显示 onSaveTapped: 被分配到 Save 按钮'
- en: '](img/Figure_21.19_B17469.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_21.19_B17469.jpg)'
- en: 'Figure 21.19: Connections inspector showing onSaveTapped: being assigned to
    the Save button'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '图 21.19：连接检查器显示 onSaveTapped: 被分配到 Save 按钮'
- en: 'Before you can save, you need to pass the restaurant identifier to `PhotoFilterViewController`.
    As you did before, you''ll use segue identifiers to determine which segue is occurring,
    and then implement methods to pass the identifier value between the two view controllers.
    Follow these steps:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在您能够保存之前，您需要将餐厅标识符传递给 `PhotoFilterViewController`。正如您之前所做的那样，您将使用 segue 标识符来确定哪个
    segue 正在发生，然后实现方法在两个视图控制器之间传递标识符值。按照以下步骤操作：
- en: 'Click the `RestaurantDetail` storyboard file in the Project navigator and select
    the segue used to go to the **Photo Filter** screen:![Figure 21.20: Editor area
    showing segue between Restaurant Detail and Photo Filter screens selected'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击`RestaurantDetail`故事板文件，并选择用于转到**相片滤镜**屏幕的切换：![图21.20：编辑区域显示餐厅详情和相片滤镜屏幕之间的切换已选中]
- en: '](img/Figure_21.20_B17469.jpg)'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_21.20_B17469.jpg]'
- en: 'Figure 21.20: Editor area showing segue between Restaurant Detail and Photo
    Filter screens selected'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图21.20：编辑区域显示餐厅详情和相片滤镜屏幕之间的切换已选中
- en: 'In the Attributes inspector, set `showPhotoFilter` and press *Return*:![Figure
    21.21: Attributes inspector with Identifier set to showPhotoFilter'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性检查器中设置`showPhotoFilter`并按*回车键*：![图21.21：属性检查器，标识符设置为显示相片滤镜]
- en: '](img/Figure_21.21_B17469.jpg)'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_21.21_B17469.jpg]'
- en: 'Figure 21.21: Attributes inspector with Identifier set to showPhotoFilter'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图21.21：属性检查器，标识符设置为显示相片滤镜
- en: 'Click the `RestaurantDetailViewController` file in the Project navigator. Update
    the `prepare(for:sender:)` method, as follows:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击`RestaurantDetailViewController`文件。更新`prepare(for:sender:)`方法，如下所示：
- en: '[PRE23]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add the `showPhotoFilter(segue:)` method after the `showReview()` method inside
    your `private` extension:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的`private`扩展内部`showReview()`方法之后添加`showPhotoFilter(segue:)`方法：
- en: '[PRE24]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This sets `PhotoFilterViewController`'s `restaurantID` property to the identifier
    of the selected restaurant.
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将`PhotoFilterViewController`的`restaurantID`属性设置为所选餐厅的标识符。
- en: 'Build and run your project, set a location, and tap **All**. Tap a restaurant,
    and tap the **Add Photo** button. Select a photo, apply a filter, and tap **Save**:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行你的项目，设置位置，并点击**所有**。点击一个餐厅，然后点击**添加照片**按钮。选择一张照片，应用滤镜，然后点击**保存**：
- en: '![Figure 21.22: iOS Simulator showing Photo Filter screen with Save button
    selected'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '![图21.22：iOS模拟器显示带有已选保存按钮的相片滤镜屏幕]'
- en: '](img/Figure_21.22_B17469.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_21.22_B17469.jpg]'
- en: 'Figure 21.22: iOS Simulator showing Photo Filter screen with Save button selected'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 图21.22：iOS模拟器显示带有已选保存按钮的相片滤镜屏幕
- en: The photo will be saved to the persistent store, and you will be returned to
    the **Restaurant Detail** screen.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 照片将被保存到持久存储中，并且你将返回到**餐厅详情**屏幕。
- en: At this point, you can save reviews and photos. Fantastic! In the next section,
    you will add code to load the reviews and photos from the persistent store to
    be displayed on the **Restaurant Detail** screen.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，你可以保存评论和照片。太棒了！在下一节中，你将添加代码从持久存储中加载评论和照片以在**餐厅详情**屏幕上显示。
- en: Displaying saved reviews and photos on the Restaurant Detail screen
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在餐厅详情屏幕上显示已保存的评论和照片
- en: 'The `RestaurantDetail.storyboard`, you''ll see that collection views have already
    been set up to display photos and reviews in the static table view cells. All
    you need to do is to implement the respective view controllers for the view and
    collection view cells. You''ll start with the view and collection view cells used
    to display reviews. Follow these steps:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在`RestaurantDetail.storyboard`中，你会看到集合视图已经设置为在静态表格单元格中显示照片和评论。你所需要做的就是实现用于显示评论的相应视图控制器。你将从用于显示评论的视图和集合视图单元格开始。按照以下步骤操作：
- en: Right-click the `LetsEat` folder in the Project navigator and choose `Reviews`.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中右键单击`LetsEat`文件夹，并选择`Reviews`。
- en: Right-click the folder and select **New File**.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击文件夹并选择**新建文件**。
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class**, and then
    click **Next**.'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS**应该已经选中。选择**Cocoa Touch 类**，然后点击**下一步**。'
- en: 'Configure the file as follows:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式配置文件：
- en: '`ReviewCell`'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ReviewCell`'
- en: '`UICollectionViewCell`'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`UICollectionViewCell`'
- en: '`Swift`'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Swift`'
- en: Click **Next**.
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击**下一步**。
- en: 'Click `ReviewCell` file appears in the Project navigator. Enter the following
    code between the curly braces:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击项目导航器中出现的`ReviewCell`文件。在花括号之间输入以下代码：
- en: '[PRE25]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`ReviewCell` now has the properties for all the outlets in the collection view
    cell. Let''s create `ReviewsViewController` next. Follow these steps:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '`ReviewCell`现在具有集合视图单元格中所有输出属性。让我们接下来创建`ReviewsViewController`。按照以下步骤操作：'
- en: Right-click the `Reviews` folder, and select **New File**.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`Reviews`文件夹，并选择**新建文件**。
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class**, and then
    click **Next**.'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS**应该已经选中。选择**Cocoa Touch 类**，然后点击**下一步**。'
- en: 'Configure the file as follows:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式配置文件：
- en: '`ReviewsViewController`'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ReviewsViewController`'
- en: '`UIViewController`'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`UIViewController`'
- en: '`Swift`'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Swift`'
- en: Click **Next**.
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击**下一步**。
- en: 'Click `ReviewsViewController` file appears in the Project navigator. Modify
    this file as follows:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击项目导航器中出现的`ReviewsViewController`文件。按照以下方式修改此文件：
- en: '[PRE26]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Add a `private` extension with the following code, as shown:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个包含以下代码的`private`扩展，如图所示：
- en: '[PRE27]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The `private` extension contains the implementation for `initialize()` and `setupCollectionView()`
    methods. `initialize()` just calls `setupCollectionView()`. `setupCollectionView()`
    is used to configure the flow and spacing of the collection views and is similar
    to code you've written before.
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`private`扩展包含`initialize()`和`setupCollectionView()`方法的实现。`initialize()`只是调用`setupCollectionView()`。`setupCollectionView()`用于配置集合视图的流和间距，与您之前编写的代码类似。'
- en: 'Add the following method after `setupCollectionView()` to implement `checkReviews()`:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`setupCollectionView()`之后添加以下方法以实现`checkReviews()`：
- en: '[PRE28]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This method will retrieve all restaurant reviews for the specified restaurant
    identifier. Let''s break this down:'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此方法将检索指定餐厅标识符的所有餐厅评论。让我们分解一下：
- en: '[PRE29]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This statement assigns `RestaurantDetailViewController` to a temporary constant,
    `viewController`.
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此语句将`RestaurantDetailViewController`分配给一个临时常量`viewController`。
- en: '[PRE30]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This statement assigns the restaurant identifier of the restaurant shown in
    the `restaurantID`.
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此语句将显示在`restaurantID`中的餐厅的餐厅标识符分配给此语句。
- en: '[PRE31]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This statement gets an array of reviews matching the given `restaurantID` from
    the persistent store and assigns it to `reviewItems`.
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此语句从持久存储中获取与给定`restaurantID`匹配的评论数组，并将其分配给`reviewItems`。
- en: '[PRE32]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: If there are reviews for this restaurant, the collection view's background view
    is set to `nil`; otherwise, you create a `NoDataView` instance, set the `title`
    and `desc` properties to `"Reviews"` and `"There are currently no reviews"` respectively,
    and assign it to the collection view's background view.
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果有关于这家餐厅的评论，则将集合视图的背景视图设置为`nil`；否则，创建一个`NoDataView`实例，将`title`和`desc`属性分别设置为`"Reviews"`和`"There
    are currently no reviews"`，并将其分配给集合视图的背景视图。
- en: '[PRE33]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This code tells the collection view to redraw itself onscreen.
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这段代码告诉集合视图在屏幕上重新绘制自己。
- en: 'Implement the data source methods for the collection view by adding the following
    extension:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下扩展来实现集合视图的数据源方法：
- en: '[PRE34]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This is similar to what you've done before. The number of cells to be displayed
    in the collection view is the same as the number of items in the `reviewItems`
    array. You set each cell's contents using the properties of the corresponding
    `ReviewItem` instance.
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这与您之前所做的工作类似。集合视图中要显示的单元格数量与`reviewItems`数组中的项目数量相同。您使用相应的`ReviewItem`实例的属性设置每个单元格的内容。
- en: 'Add the flow layout delegate methods for the collection view by adding the
    following extension:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下扩展来实现集合视图的流布局代理方法：
- en: '[PRE35]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This method returns the size of the collection view cell to be displayed. If
    there is only one item in the `reviewItems` array, the cell's width is set to
    the width of the collection view—14 points; otherwise, it is set to the width
    of the collection view—21 points. The height is set to `200` points.
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此方法返回要显示的集合视图单元格的大小。如果`reviewItems`数组中只有一个项目，则单元格的宽度设置为集合视图的宽度—14点；否则，它设置为集合视图的宽度—21点。高度设置为`200`点。
- en: '`ReviewsViewController` is now complete. Now, you''ll finish the implementation
    of the `RestaurantDetail` storyboard file. Follow these steps:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`ReviewsViewController`现在已完成。现在，您将完成`RestaurantDetail`故事板文件的实现。按照以下步骤操作：'
- en: 'Click the `RestaurantDetail` storyboard file in the Project navigator. Select
    the `ReviewsViewController,` and press *Return*:![Figure 21.23: Identity inspector
    with Class set to ReviewsViewController'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击`RestaurantDetail`故事板文件。选择`ReviewsViewController`，然后按*Return*：![图21.23：类设置为ReviewsViewController的Identity
    inspector
- en: '](img/Figure_21.23_B17469.jpg)'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_21.23_B17469.jpg)'
- en: 'Figure 21.23: Identity inspector with Class set to ReviewsViewController'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图21.23：类设置为ReviewsViewController的Identity inspector
- en: The scene name will change to **Reviews View Controller Scene**.
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 场景名称将更改为**Reviews View Controller Scene**。
- en: 'Select the `ReviewCell,` and press *Return*:![Figure 21.24: Identity inspector
    with Class set to ReviewCell'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`ReviewCell`，然后按*Return*：![图21.24：类设置为ReviewCell的Identity inspector
- en: '](img/Figure_21.24_B17469.jpg)'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_21.24_B17469.jpg)'
- en: 'Figure 21.24: Identity inspector with Class set to ReviewCell'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图21.24：类设置为ReviewCell的Identity inspector
- en: 'Select the view in the document outline. Click the Identity inspector button,
    set `RatingsView,` and press *Return*:![Figure 21.25: Identity inspector with
    Class set to RatingsView'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文档大纲中选择视图。点击Identity inspector按钮，设置`RatingsView`，然后按*Return*：![图21.25：类设置为RatingsView的Identity
    inspector
- en: '](img/Figure_21.25_B17469.jpg)'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_21.25_B17469.jpg)'
- en: 'Figure 21.25: Identity inspector with Class set to RatingsView'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图21.25：类设置为RatingsView的Identity inspector
- en: 'Select `reviewCell` if it''s not already set:![Figure 21.26: Attributes inspector
    with Identifier set to reviewCell'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未设置，选择`reviewCell`：![图 21.26：属性检查器，将标识符设置为reviewCell
- en: '](img/Figure_21.26_B17469.jpg)'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_21.26_B17469.jpg)'
- en: 'Figure 21.26: Attributes inspector with Identifier set to reviewCell'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 21.26：属性检查器，将标识符设置为reviewCell
- en: 'Click the Connections inspector. Drag from the `dateLabel` outlet to the **Label**
    shown, if it''s not already set:![Figure 21.27: Connections inspector showing
    dateLabel outlet'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击连接检查器。如果尚未设置，从`dateLabel`出口拖动到显示的**标签**：![图 21.27：连接检查器显示dateLabel出口
- en: '](img/Figure_21.27_B17469.jpg)'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_21.27_B17469.jpg)'
- en: 'Figure 21.27: Connections inspector showing dateLabel outlet'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 21.27：连接检查器显示dateLabel出口
- en: 'Drag from the `nameLabel` outlet to the **Label** shown, if it''s not already
    set:![Figure 21.28: Connections inspector showing nameLabel outlet'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未设置，从`nameLabel`出口拖动到显示的**标签**：![图 21.28：连接检查器显示nameLabel出口
- en: '](img/Figure_21.28_B17469.jpg)'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_21.28_B17469.jpg)'
- en: 'Figure 21.28: Connections inspector showing nameLabel outlet'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 21.28：连接检查器显示nameLabel出口
- en: 'Drag from the `reviewLabel` outlet to the **Label** shown, if it''s not already
    set:![Figure 21.29: Connections inspector showing reviewLabel outlet'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未设置，从`reviewLabel`出口拖动到显示的**标签**：![图 21.29：连接检查器显示reviewLabel出口
- en: '](img/Figure_21.29_B17469.jpg)'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_21.29_B17469.jpg)'
- en: 'Figure 21.29: Connections inspector showing reviewLabel outlet'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 21.29：连接检查器显示reviewLabel出口
- en: 'Drag from the `titleLabel` outlet to the **Label** shown, if it''s not already
    set:![Figure 21.30: Connections inspector shown titleLabel outlet'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未设置，从`titleLabel`出口拖动到显示的**标签**：![图 21.30：连接检查器显示titleLabel出口
- en: '](img/Figure_21.30_B17469.jpg)'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_21.30_B17469.jpg)'
- en: 'Figure 21.30: Connections inspector shown titleLabel outlet'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 21.30：连接检查器显示titleLabel出口
- en: 'Drag from the `ratingsView` outlet to the ratings view shown, if it''s not
    already set:![Figure 21.31: Connections inspector showing the ratingsView outlet'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未设置，从`ratingsView`出口拖动到显示的评分视图：![图 21.31：连接检查器显示ratingsView出口
- en: '](img/Figure_21.31_B17469.jpg)'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_21.31_B17469.jpg)'
- en: 'Figure 21.31: Connections inspector showing the ratingsView outlet'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 21.31：连接检查器显示ratingsView出口
- en: 'Select the `collectionView` outlet to the **Collection View** as shown, if
    it''s not already set:![Figure 21.32: Connections inspector showing the collectionView
    outlet'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择如所示到**集合视图**的`collectionView`出口，如果尚未设置：![图 21.32：连接检查器显示collectionView出口
- en: '](img/Figure_21.32_B17469.jpg)'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_21.32_B17469.jpg)'
- en: 'Figure 21.32: Connections inspector showing the collectionView outlet'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 21.32：连接检查器显示collectionView出口
- en: 'Select `delegate` and `dataSource` outlets to the **Reviews View Controller**
    icon:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择到**评论视图控制器**图标的`delegate`和`dataSource`出口：
- en: '![Figure 21.33: Connections inspector showing the dataSource and delegate outlets'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 21.33：连接检查器显示dataSource和delegate出口'
- en: '](img/Figure_21.33_B17469.jpg)'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_21.33_B17469.jpg)'
- en: 'Figure 21.33: Connections inspector showing the dataSource and delegate outlets'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21.33：连接检查器显示dataSource和delegate出口
- en: 'Build and run your app. You should see the reviews you added earlier appear:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行您的应用。您应该看到之前添加的评论：
- en: '![Figure 21.34: iOS Simulator showing Restaurant Detail screen containing reviews'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 21.34：iOS 模拟器显示包含评论的餐厅详情屏幕'
- en: '](img/Figure_21.34_B17469.jpg)'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_21.34_B17469.jpg)'
- en: 'Figure 21.34: iOS Simulator showing Restaurant Detail screen containing reviews'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21.34：iOS 模拟器显示包含评论的餐厅详情屏幕
- en: The implementation of view controllers for the collection view and collection
    view cells used to display reviews is now complete, and your app now can display
    reviews that were entered using the **Review Form** screen earlier. If you have
    more than one review, you can swipe left and right to see each review. Since each
    review has a rating, you can use them to calculate and add an overall rating for
    a restaurant. Let's modify the app to do this next.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 用于显示评论的集合视图和集合视图单元格的视图控制器实现现在已完成，您的应用现在可以显示之前使用**评论表单**屏幕输入的评论。如果您有多个评论，您可以左右滑动以查看每个评论。由于每个评论都有一个评分，您可以使用它们来计算并添加一个餐厅的整体评分。让我们修改应用以执行此操作。
- en: Calculating a restaurant's overall rating
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算餐厅的整体评分
- en: 'The `CoreDataManager` to do this. Follow these steps:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行此操作，请使用`CoreDataManager`。按照以下步骤操作：
- en: 'Click the `CoreDataManager` file inside the Project navigator (inside the `Core
    Data` folder in the `Misc` folder). Add the following method before the `addReview(_:)`
    method:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中（在`Misc`文件夹中的`Core Data`文件夹内）点击`CoreDataManager`文件。在`addReview(_:)`方法之前添加以下方法：
- en: '[PRE36]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: In this method, all reviews for a particular restaurant are fetched from the
    persistent store and assigned to `reviews`. The `reduce()` method takes a closure,
    which is used to add all the review ratings together. Finally, the average rating
    value is calculated and returned.
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个方法中，从持久存储中检索特定餐厅的所有评论，并分配给`reviews`。`reduce()`方法接受一个闭包，用于将所有评论评分相加。最后，计算平均评分值并返回。
- en: Important Information
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要信息
- en: 'You can learn more about the `reduce()` method at this link: [https://developer.apple.com/documentation/swift/array/2298686-reduce](https://developer.apple.com/documentation/swift/array/2298686-reduce).'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以在以下链接中了解更多关于`reduce()`方法的信息：[https://developer.apple.com/documentation/swift/array/2298686-reduce](https://developer.apple.com/documentation/swift/array/2298686-reduce)。
- en: 'Click the `RestaurantDetailViewController` file in the Project navigator (inside
    the `RestaurantDetail` folder). Update the `createRating()` method, as follows:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中（位于`RestaurantDetail`文件夹内）点击`RestaurantDetailViewController`文件。更新`createRating()`方法，如下所示：
- en: '[PRE37]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The overall rating will also need to be updated whenever the user adds a new
    review in the `viewDidLoad()` method:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户在`viewDidLoad()`方法中添加新的评论时，也需要更新总体评分：
- en: '[PRE38]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: This will recalculate the rating when the **Review Form** screen is dismissed
    and the **Restaurant Detail** screen reappears.
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将在关闭**评论表单**屏幕并重新出现**餐厅详情**屏幕时重新计算评分。
- en: 'Build and run your project, and you should now see an overall rating for restaurants
    that have reviews, as well as a corresponding star rating as shown:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行你的项目，你现在应该能看到有评论的餐厅的总体评分，以及相应的星级评分，如下所示：
- en: '![Figure 21.35: iOS Simulator showing Restaurant Detail screen with overall
    ratings'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 21.35: iOS Simulator showing Restaurant Detail screen with overall
    ratings](img/Figure_21.35_B17469.jpg)'
- en: '](img/Figure_21.35_B17469.jpg)'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 21.35: iOS Simulator showing Restaurant Detail screen with overall
    ratings](img/Figure_21.35_B17469.jpg)'
- en: 'Figure 21.35: iOS Simulator showing Restaurant Detail screen with overall ratings'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 图21.35：iOS模拟器显示包含总体评分的餐厅详情屏幕
- en: There's still one thing left to do, and that's adding photo reviews. Your challenge
    is to add photo reviews and to display them in the collection view just under
    the collection view used for reviews. The way to do this is very similar to the
    way you used to add reviews. This chapter covers all you need to know, and if
    you get stuck, feel free to use the completed project files for this chapter,
    which you will find in the `Chapter21` folder of the code bundle of this book,
    downloadable from [https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition).
    You can also watch the CiA video for this chapter, located at [https://bit.ly/3o81yKK](https://bit.ly/3o81yKK).
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一件事要做，那就是添加图片评论。你的挑战是添加图片评论，并在评论集合视图下方显示它们。这样做的方式与你之前添加评论的方式非常相似。本章涵盖了你需要知道的所有内容，如果你遇到困难，请随时使用本章的完整项目文件，这些文件可以在本书的代码包的`Chapter21`文件夹中找到，可从[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)下载。你还可以观看本章的CiA视频，位于[https://bit.ly/3o81yKK](https://bit.ly/3o81yKK)。
- en: Summary
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about Core Data and its different components. You
    created data models for your app named `Review` and `RestaurantPhoto`, and you
    created the corresponding model objects for your app named `ReviewItem` and `RestaurantPhotoItem`.
    After that, you implemented `CoreDataManager` to set up Core Data components for
    your app.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了Core Data及其不同组件。你为你的应用创建了名为`Review`和`RestaurantPhoto`的数据模型，并为你的应用创建了相应的模型对象，名为`ReviewItem`和`RestaurantPhotoItem`。之后，你实现了`CoreDataManager`来为你的应用设置Core
    Data组件。
- en: You updated `ReviewFormViewController` and `PhotoFilterViewController` to save
    reviews and photos together with a restaurant identifier to the persistent store.
    You modified `RestaurantDetailViewController` to load reviews for a particular
    restaurant based on the restaurant identifier, and displayed them in a collection
    view. You also calculated and displayed the overall rating for that restaurant.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 你更新了`ReviewFormViewController`和`PhotoFilterViewController`，将评论和图片与餐厅标识符一起保存到持久存储中。你修改了`RestaurantDetailViewController`，根据餐厅标识符加载特定餐厅的评论，并在集合视图中显示它们。你还计算并显示了该餐厅的总体评分。
- en: Finally, on your own, you modified `RestaurantDetailViewController` to load
    photos for a particular restaurant based on the restaurant identifier, and displayed
    them in a collection view.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你自己修改了`RestaurantDetailViewController`，根据餐厅标识符加载特定餐厅的图片，并在集合视图中显示它们。
- en: You now have a basic understanding of how Core Data works. You're also able
    to set up Core Data components and enable an interface between your app and Core
    Data components using a data manager class. You also know how to save and load
    reviews and photos using Core Data, which you will now be able to implement in
    your own apps.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在对Core Data的工作原理有了基本的了解。你也能够设置Core Data组件，并使用数据管理类在你的应用和Core Data组件之间启用接口。你还知道如何使用Core
    Data保存和加载评论和照片，你现在将能够在自己的应用中实现这些功能。
- en: You have come to the end of a long journey, and have now finished building your
    app's primary functionality. All the screens work, and reviews and photos are
    persistent. Fantastic job!
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经完成了漫长旅程的终点，现在你已经完成了构建应用主要功能的工作。所有屏幕都正常工作，评论和照片都得到了持久化。做得太棒了！
- en: This concludes *Part 3* of this book. In the next part, you'll find out about
    the cool new features Apple has introduced in iOS 15 and how to add them to your
    app, starting with getting your app ready for Apple Macs in the next chapter.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书的第三部分到此结束。在下一部分，你将了解到苹果在iOS 15中引入的酷炫新功能，以及如何将它们添加到你的应用中，从下一章开始，我们将介绍如何让你的应用为苹果Mac做准备。
