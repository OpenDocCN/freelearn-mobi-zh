- en: Chapter 2. The Xamarin.Android Architecture
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章：Xamarin.Android架构
- en: 'Now that we have an understanding of the Android platform, let''s talk about
    Xamarin. In this chapter, we will take a look at the architecture of Xamarin.Android
    and how it facilitates the development of Android apps using C# and .NET. This
    chapter covers the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了Android平台，让我们来谈谈Xamarin。在本章中，我们将探讨Xamarin.Android的架构以及它是如何促进使用C#和.NET开发Android应用程序的。本章涵盖了以下主题：
- en: The benefits and drawbacks of adopting Xamarin.Android
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 采用Xamarin.Android的优缺点
- en: What is Mono?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Mono？
- en: Mono and Android Runtime side by side (peer objects)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mono和Android运行时并排（对等对象）
- en: The Xamarin.Android binding libraries
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xamarin.Android绑定库
- en: Development of IDE choices
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发IDE选择
- en: Getting started with Xamarin
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用Xamarin
- en: Xamarin is a San Francisco, California-based software company, which provides
    commercial software development tools, that leverage the Mono open source project
    in order to allow you to develop applications for Android, iOS, and Mac using
    C# and the .NET framework.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin是一家位于加利福尼亚州旧金山的软件公司，它提供商业软件开发工具，利用Mono开源项目，以便你能够使用C#和.NET框架为Android、iOS和Mac开发应用程序。
- en: 'Xamarin brings a wide range of products to simplify the mobile application
    development in a cross-platform way. The following are some of the products offered
    by Xamarin:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin通过一系列产品简化了跨平台方式下的移动应用程序开发。以下是一些Xamarin提供的产品：
- en: '**The Xamarin platform**: Xamarin uses the open source implementation of the.NET
    framework called Mono. The Xamarin framework implementation includes its own compiler
    written in C# and the .NET libraries. The Xamarin platform includes the following
    products:'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Xamarin平台**: Xamarin使用.NET框架的开源实现，称为Mono。Xamarin框架实现包括其自己的用C#编写的编译器和.NET库。Xamarin平台包括以下产品：'
- en: '**Xamarin.iOS**: This is also known as MonoTouch. This is used for building
    native iOS applications using C# and .NET.'
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Xamarin.iOS**: 这也被称为MonoTouch。这是用于使用C#和.NET构建原生iOS应用程序的。'
- en: '**Xamarin.Android**: This is also known as Mono for Android or formally known
    as MonoDroid. This is used for building native Android applications using C# and
    .NET.'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Xamarin.Android**: 这也被称为Mono for Android或正式称为MonoDroid。这是用于使用C#和.NET构建原生Android应用程序的。'
- en: '**Xamarin.Forms**: In both Xamarin.Android and Xamarin.iOS, we cannot build
    a pure cross-platform application. The part of the application that is platform-independent
    can then be isolated and reused across the platform; however, you still need to
    write platform-specific code for designing the application''s interface. This
    is where Xamarin.Forms comes into picture. Xamarin.Forms allows you to write the
    user-interface code that can be compiled for the iPhone, Android, and Windows
    Phone.'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Xamarin.Forms**: 在Xamarin.Android和Xamarin.iOS中，我们无法构建纯跨平台应用程序。应用程序中平台无关的部分可以隔离并跨平台重用；然而，你仍然需要编写特定于平台的代码来设计应用程序的界面。这就是Xamarin.Forms的用武之地。Xamarin.Forms允许你编写可以编译为iPhone、Android和Windows
    Phone的用户界面代码。'
- en: '**Xamarin.Mac**: This is also known as Mono for Mac. Xamarin.Mac allows you
    to develop fully native Mac applications in C# and .NET.'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Xamarin.Mac**: 这也被称为Mac上的Mono。Xamarin.Mac允许你使用C#和.NET开发完全本地的Mac应用程序。'
- en: '**Xmarin.Windows**: This is also known as Mono for Windows. Xamarin.Windows
    allows you to develop a fully Windows App in C# and .NET.'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Xamarin.Windows**: 这也被称为Windows上的Mono。Xamarin.Windows允许你使用C#和.NET开发完全的Windows应用程序。'
- en: The product we will use in this book for developing the Android application
    is Xamarin.Android.
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将在本书中使用Xamarin.Android来开发Android应用程序。
- en: '**Development IDEs**: Along with frameworks, it also brings the required development
    IDEs, such as Xamarin Studio and the Visual Studio plugin. Xamarin Studio is a
    fully integrated IDE, which comes handy with the Xamarin package. Xamarin Studio
    can be used for both Windows and Mac operating systems. Xamarin Studio includes
    some of the rich features, including code completion, a debugging interface, an
    Android layout builder, and integration with Xcode Interface Builder for iOS app
    design. However, if you''re familiar with Visual Studio, you can continue to take
    almost all the benefits mentioned earlier from Visual Studio using the Visual
    Studio support plugin.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发IDE**：除了框架之外，它还带来了所需的开发IDE，例如Xamarin Studio和Visual Studio插件。Xamarin Studio是一个完全集成的IDE，与Xamarin包一起使用非常方便。Xamarin
    Studio适用于Windows和Mac操作系统。Xamarin Studio包括一些丰富的功能，包括代码补全、调试界面、Android布局构建器和与Xcode
    Interface Builder的集成，用于iOS应用设计。然而，如果你熟悉Visual Studio，你可以通过Visual Studio支持插件继续从前面提到的几乎所有好处中获益。'
- en: '**Xamarin Test Cloud:** Mobile application testing is quite challenging, as
    we have to consider the various form factors, device densities, connectivity types,
    and different OS versions. It is nearly impossible to test your application on
    all the targeted devices. Xamarin Test Cloud is an answer to this problem. Xamarin
    Test Cloud makes it possible to test mobile apps written in any language on collection
    of real devices from around the world. You can write your test scripts using the
    Xamarin testing framework and automate your app testing from CI Systems.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Xamarin Test Cloud**：移动应用测试相当具有挑战性，因为我们必须考虑各种形态、设备密度、连接类型和不同的操作系统版本。在所有目标设备上测试您的应用程序几乎是不可能的。Xamarin
    Test Cloud是解决这个问题的答案。Xamarin Test Cloud使得在来自世界各地的真实设备集合上测试用任何语言编写的移动应用成为可能。您可以使用Xamarin测试框架编写测试脚本，并通过CI系统自动化您的应用测试。'
- en: Why Xamarin.Android?
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择Xamarin.Android？
- en: Before we take a dive into the architecture of Xamarin.Android, let's first
    discuss the question of why Xamarin.Android is our choice. Like any significant
    platform decision, one size does not fit all, and there are a number of things
    that should be considered. The following two lists identify some of the key benefits
    and drawbacks of using Xamarin.Android.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入探讨Xamarin.Android的架构之前，让我们首先讨论一下为什么Xamarin.Android是我们的选择。像任何重大的平台决策一样，没有一种解决方案适合所有人，有许多事情需要考虑。以下两个列表列出了使用Xamarin.Android的一些关键优点和缺点。
- en: The benefits of using Xamarin.Android
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Xamarin.Android的好处
- en: '**It leverages existing C# and .NET skills**: Developers invest a great deal
    of time and energy in mastering the many features of the C# language and the effective
    use of the .NET framework. Yes, Java and all object-oriented languages have many
    similarities, but there is a real cost associated with going from being proficient
    in C# and .NET to making the same claim in Java. Individuals and groups that have
    made a significant investment in C# and .NET and need to develop Android apps
    would be well served to at least consider Xamarin.Android.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**它利用现有的C#和.NET技能**：开发者投入了大量的时间和精力来掌握C#语言的众多特性和.NET框架的有效使用。是的，Java和所有面向对象的语言有很多相似之处，但从C#和.NET的熟练程度过渡到Java，确实存在一定的成本。那些在C#和.NET上投入了大量资金并需要开发Android应用的个人和团体，至少应该考虑Xamarin.Android。'
- en: '**It can be reused in cross-platform development**: While Xamarin will not
    allow you to build a single app that can be deployed to Android, iOS, and Windows,
    it does give you the capability to reuse large portions of your code base across
    all of these platforms. In general, the user interface code and the code that
    deals with the device capabilities tend to be written for each platform, while
    things such as service client logic, client-side validation, data caching, and
    client-side data storage can potentially be shared across multiple platforms.
    This can save a significant amount of time and cost.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**它可以在跨平台开发中重用**：虽然Xamarin不会让您构建一个可以部署到Android、iOS和Windows的单个应用程序，但它确实赋予了您在所有这些平台上重用代码库大部分的能力。一般来说，用户界面代码和处理设备功能的代码通常是针对每个平台编写的，而像服务客户端逻辑、客户端验证、数据缓存和客户端数据存储这样的东西则可能被跨多个平台共享。这可以节省大量的时间和成本。'
- en: The drawbacks of using Xamarin.Android
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Xamarin.Android的缺点
- en: '**The licensing requirement**: Xamarin.Android as well as Xamarin.iOS and Xamarin.Mac
    are all commercial tools and must be licensed, so there is a tangible cost of
    entry. Check the Xamarin website for current pricing.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**许可要求**：Xamarin.Android 以及 Xamarin.iOS 和 Xamarin.Mac 都是商业工具，必须获得许可，因此存在实际的入门成本。请访问
    Xamarin 网站，了解当前定价。'
- en: '**Waiting for updates**: There is some lag time between a new release of the
    Android platform and the corresponding release of Xamarin.Android. However, Xamarin
    is aiming for zero day support for the new version of Android and iOS.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**等待更新**：Android 平台的新版本与相应的 Xamarin.Android 版本之间存在一些滞后时间。然而，Xamarin 正在努力实现针对
    Android 和 iOS 新版本的无缝支持。'
- en: '**Distribution size**: There are a number of runtime libraries that must be
    distributed with a Xamarin.Android application. We will discuss the actual size
    and strategies for minimizing the distribution size in the last chapter.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分发大小**：Xamarin.Android 应用程序必须与一些运行时库一起分发。我们将在最后一章讨论实际大小以及最小化分发大小的策略。'
- en: While the list of drawbacks may seem extensive; in most cases, the impact of
    each can be minimized. If you are a group or individual that places a high value
    on the benefits, you should seriously consider Xamarin.Android.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然缺点列表可能看起来很庞大；但在大多数情况下，每个缺点的影响都可以最小化。如果您是一个高度重视这些益处的团队或个人，您应该认真考虑使用 Xamarin.Android。
- en: What is Mono?
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Mono？
- en: Mono is an open source, cross-platform implementation of a C# compiler, and
    a **Common Language Runtime** (**CLR**) that is binary compatible with Microsoft
    .NET. The Mono CLR has been ported to many platforms, including Android, most
    Linux distributions, BSD, OS X, Windows, Solaris, and even some game consoles,
    such as Wii and Xbox 360\. In addition, Mono provides a static compiler that allows
    apps to be compiled for environments, such as iOS and PS3.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Mono 是一个开源的跨平台 C# 编译器和 **公共语言运行时**（**CLR**）的实现，它与 Microsoft .NET 兼容。Mono CLR
    已被移植到许多平台，包括 Android、大多数 Linux 发行版、BSD、OS X、Windows、Solaris，甚至一些游戏机，如 Wii 和 Xbox
    360。此外，Mono 还提供了一种静态编译器，允许应用程序为 iOS 和 PS3 等环境编译。
- en: Mono for Android runs natively and provides almost all the capabilities that
    a typical native Android app can have. It allows developers to reuse a larger
    portion of the code without a major performance trade-off.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Mono for Android 以原生方式运行，并提供几乎所有典型原生 Android 应用程序可以拥有的功能。它允许开发者在不牺牲主要性能的情况下重用更大比例的代码。
- en: Mono and Dalvik side by side
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Mono 和 Dalvik 并行
- en: 'As you can recall from, Chapter 1, *The Anatomy of an Android App*, Android
    apps run within the Dalvik VM, and we now know that Mono apps run within the Mono
    CLR. So how does a Xamarin.Android app run? A simple answer is that it uses both
    the Mono CLR and the Dalvik VM. The following diagram depicts how the runtimes
    coexist:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从第 1 章，“Android 应用的解剖”中回忆的那样，Android 应用在 Dalvik 虚拟机中运行，我们现在知道 Mono 应用在 Mono
    CLR 中运行。那么 Xamarin.Android 应用程序是如何运行的？一个简单的答案是它同时使用 Mono CLR 和 Dalvik 虚拟机。以下图解展示了运行时是如何共存的：
- en: '![](img/UKyr5JC5.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/UKyr5JC5.jpg)'
- en: Xamarin.Android applications use both Mono CLR and the Dalvik VM side by side
    and run on top of the Linux kernel. The .Net API resides as a part of the Mono
    CLR and provides a set of classes (for example, System.Data, System.Net, System.IO,
    and so on.) to access various device OS features. However, with .Net APIs, you
    cannot directly access most of the device-specific features, such as Audio, Telephony,
    OpenGL, and so on. They are made available as a part of the Android SDK or as
    Java API and can be accessed using the Android binding libraries. The following
    section covers more on the Android binding libraries.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.Android 应用程序同时使用 Mono CLR 和 Dalvik 虚拟机，并在 Linux 内核之上运行。.Net API 作为 Mono
    CLR 的一部分存在，并提供了一组类（例如，System.Data、System.Net、System.IO 等）以访问各种设备操作系统功能。然而，使用 .Net
    API，您无法直接访问大多数设备特定功能，如音频、电话、OpenGL 等。它们作为 Android SDK 或 Java API 的一部分提供，并且可以通过
    Android 绑定库访问。下一节将详细介绍 Android 绑定库。
- en: Since Android 5.0 (Lollipop) release, the Dalvik VM was replaced by its successor,
    Android Runtime (ART). This means that now Xamarin.Android applications run with
    the Mono VM alongside ART. Both the runtimes work on top of the Linux kernel and
    expose a set of classes to access the device features.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 自从 Android 5.0（Lollipop）发布以来，Dalvik 虚拟机被其继任者 Android Runtime（ART）所取代。这意味着现在
    Xamarin.Android 应用程序与 ART 一起使用 Mono 虚拟机运行。这两个运行时都在 Linux 内核之上运行，并公开了一组类以访问设备功能。
- en: So, how do the Mono CLR and **Android Runtime** (**ART**) work together in a
    Xamarin.Android app? The magic is accomplished through a concept called and a
    framework called the JNI.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，Mono CLR 和 **Android 运行时**（ART）在 Xamarin.Android 应用中是如何协同工作的呢？这个魔法是通过一个称为
    JNI 的概念和框架实现的。
- en: The Java Native Interface
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java 原生接口
- en: The **Java Native Interface** (**JNI**) is a framework that allows a non-Java
    code (such as C++ or C#) to call or be called by a Java code running inside a
    JVM. As you can see from the preceding diagram, JNI is a critical component in
    the overall Xamarin.Android architecture.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**Java 原生接口**（JNI）是一个框架，允许非 Java 代码（如 C++ 或 C#）在 JVM 内运行的 Java 代码中调用或被调用。如前图所示，JNI
    是 Xamarin.Android 架构中的关键组件。'
- en: Peer objects
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 等价对象
- en: Peer objects are a pair of objects consisting of a managed object residing in
    the Mono CLR and a Java object residing in the Dalvik VM, which work together
    to perform the functions of a Xamarin.Android app.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 等价对象是一对对象，包括一个位于 Mono CLR 中的托管对象和一个位于 Dalvik VM 中的 Java 对象，它们共同工作以执行 Xamarin.Android
    应用程序的功能。
- en: Xamarin.Android is delivered with a set of assemblies called the Android binding
    libraries. Classes in the Android binding libraries correspond to the Java classes
    in the Android application framework, and the methods in the binding classes act
    as wrappers to call corresponding methods on Java classes. Binding classes are
    referred to as **Managed Callable Wrappers** (**MCW**). Anytime you create a C#
    class that inherits from one of these binding classes, a corresponding Java proxy
    class is generated at build time. The Java proxy contains a generated override
    for each overridden method in your C# class and acts as a wrapper to call the
    corresponding method on the C# class.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.Android 随附一组称为 Android 绑定库的程序集。Android 绑定库中的类对应于 Android 应用框架中的 Java
    类，绑定类中的方法作为包装器来调用 Java 类上的相应方法。绑定类被称为 **托管可调用包装器**（MCW）。每次你创建一个从这些绑定类继承的 C# 类时，都会在构建时生成一个相应的
    Java 代理类。Java 代理包含为你的 C# 类中每个重写方法生成的重写，并作为包装器来调用 C# 类上的相应方法。
- en: The creation of peer objects can be initiated from within the Dalvik VM by the
    Android application framework or from within the Mono CLR by the code you write
    in the overridden methods. A reference between the two peer objects is kept by
    each instance of a MCW and can be accessed through the `Android.Runtime.IJavaObject.Handle`
    property.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 等价对象的创建可以由 Android 应用框架在 Dalvik VM 内启动，或者由你编写的重写方法在 Mono CLR 内启动。每个 MCW 实例都保留着两个等价对象之间的引用，可以通过
    `Android.Runtime.IJavaObject.Handle` 属性访问。
- en: 'The following diagram depicts how peer objects collaborate:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 下图描述了等价对象如何协作：
- en: '![](img/BtSojYUm.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/BtSojYUm.jpg)'
- en: Xamarin.Android application packaging
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Xamarin.Android 应用程序打包
- en: 'In Chapter 1, *The Anatomy of an Android App*, we discussed Android packages
    (`.apk` files). Xamarin.Android creates the `.apk` files but also includes the
    following additional types of files:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一章《Android 应用的解剖结构》中，我们讨论了 Android 包（.apk 文件）。Xamarin.Android 创建 .apk 文件，但还包括以下附加类型的文件：
- en: The C# code is stored as assemblies (containing IL) in the assembly folder of
    the archive.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C# 代码以程序集（包含 IL）的形式存储在存档的程序集文件夹中。
- en: The Mono runtime is packaged as native libraries within the apk. The Xamarin.Android
    application must contain the native libraries for the desired Android architectures.
    If it doesn't contain the required libraries, the application will fail to run
    for those architectures.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mono 运行时被打包为 apk 内的本地库。Xamarin.Android 应用必须包含所需 Android 架构的本地库。如果没有包含所需的库，应用程序将无法在这些架构上运行。
- en: The Android bindings design
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android 绑定设计
- en: 'The core parts of Xamarin.Android are the bindings for the Android APIs. The
    Xamarin team focused a great deal in developing a consistent approach to create
    the bindings so that a C# .NET developer would feel at home when using them. This
    has resulted in a number of key benefits as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.Android 的核心部分是对 Android API 的绑定。Xamarin 团队非常专注于开发一种一致的方法来创建绑定，以便 C#
    .NET 开发者在使用时感到舒适。这导致了一系列关键优势，如下所述：
- en: The Android API feels natural to a C# .NET developer and allows the developer
    to explore the API using the code completion and pop-up documentation from within
    the IDE
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android API 对 C# .NET 开发者来说感觉非常自然，它允许开发者通过 IDE 内的代码补全和弹出文档来探索 API。
- en: C# developers can leverage the vast array of Java/Android examples and documentation
    that can be easily transformed for use with C# and Xamarin.Android
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C#开发者可以利用大量的Java/Android示例和文档，这些示例和文档可以轻松转换为C#和Xamarin.Android使用
- en: Design principles
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计原则
- en: 'The following are some of the key design principles for the Xamarin.Android
    binding. A complete set of design principles can be found on the Xamarin website:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些Xamarin.Android绑定的关键设计原则。完整的设计原则集合可以在Xamarin网站上找到：
- en: Allowing developers to subclass Java classes from the Android application framework
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许开发者从Android应用框架中继承Java类
- en: Exposing a strongly typed API
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公开强类型API
- en: Exposing JavaBean properties as C# properties
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将JavaBean属性公开为C#属性
- en: Exposing Java event listeners as C# delegates
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Java事件监听器公开为C#委托
- en: C# properties
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C#属性
- en: 'The JavaBean properties, the getter and setter methods, are transformed to
    C# properties, when appropriate. The following rules are used to determine when
    properties should be created:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当适当的时候，将JavaBean属性、getter和setter方法转换为C#属性。以下规则用于确定何时创建属性：
- en: Read/write properties are created for the getter and setter method pairs
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为getter和setter方法对创建读写属性
- en: Read-only properties are created for getters without corresponding setter methods
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为没有相应setter方法的getters创建只读属性
- en: No write-only properties are created in the rare case that only a setter exists
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在仅存在setter方法的情况下，不会创建只写属性
- en: Properties are not created when the type would be an array
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当类型为数组时，不会创建属性
- en: Note
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As you may be aware, Java does not have a property construct but instead follows
    a design pattern defined in the JavaBean specification. In order to define a property,
    a developer simply creates the public getter and setter methods with read-only
    properties that only provide a getter method.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如你所知，Java没有属性构造，而是遵循JavaBean规范中定义的设计模式。为了定义一个属性，开发者只需创建公共的getter和setter方法，其中只提供getter方法的可读属性。
- en: Delegates
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 委托
- en: 'The Android APIs follow the Java pattern for defining and hooking up event
    listeners. The C# developers are more familiar with using delegates and events,
    so the Android bindings attempt to facilitate this using the following rules:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Android API遵循Java模式来定义和连接事件监听器。C#开发者更熟悉使用委托和事件，因此Android绑定尝试使用以下规则来简化这一过程：
- en: When a `listener` callback has a `void` return, an event is generated based
    on the `EventHandler` delegate
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当`listener`回调有一个`void`返回时，基于`EventHandler`委托生成一个事件
- en: When a `listener` callback does not have a `void` return, a specific delegate
    is generated that supports the appropriate signature
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当`listener`回调没有`void`返回时，会生成一个支持适当签名的特定委托
- en: 'These events or properties are only created under the following conditions:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这些事件或属性仅在以下条件下创建：
- en: The Android event handling method has a prefix, for example, `setOnClickListener`
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android事件处理方法有一个前缀，例如，`setOnClickListener`
- en: The Android event handler has a `void` return type
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android事件处理器的返回类型为`void`
- en: The Android event handler has a single parameter
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android事件处理器有一个单一参数
- en: Constants to enumerations
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常量到枚举
- en: It is common in the Android APIs to see methods that accept or return an `int`
    type that must be mapped to a constant to determine its meaning. When possible,
    the Xamarin team creates a .NET enumeration to replace the constants and adjusts
    the appropriate methods to work with the enumerations. This provides a significant
    productivity gain by being able to use IntelliSense from within the IDE as well
    as enhance the type safety of the methods.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android API中，常见的方法接受或返回`int`类型，这些类型必须映射到常量以确定其含义。当可能时，Xamarin团队创建.NET枚举来替换这些常量，并调整相应的方法以与枚举一起工作。这通过在IDE中使用IntelliSense以及增强方法类型安全性，提供了显著的生产力提升。
- en: Development environments
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发环境
- en: 'The choice of an appropriate IDE for development is absolutely mandatory, as
    it can greatly ease and speed up your development, if you choose the right one.
    There are two choices when it comes to IDEs: Xamarin Studio or Visual Studio.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 选择合适的IDE进行开发是绝对必要的，因为它可以极大地简化并加快你的开发速度，如果你选择了正确的IDE。在IDE方面有两个选择：Xamarin Studio或Visual
    Studio。
- en: For developing an iOS application, you can use either use Xamarin Studio or
    the Xamarin iOS Visual Studio plugin on Windows machines. However, you cannot
    build and run an iOS application on Windows OS. You must have a Mac computer.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在 Windows 机器上开发 iOS 应用，你可以使用 Xamarin Studio 或 Xamarin iOS Visual Studio 插件。然而，你无法在
    Windows 操作系统上构建和运行 iOS 应用。你必须拥有一台 Mac 计算机。
- en: Windows users have two IDE choices for developing the Android application. You
    can either use Xamarin Studio or Visual Studio. If you're on Mac OS, then you
    have to use the Android Studio IDE. All the examples in this book are developed
    using Xamarin Studio on Mac.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 用户在开发 Android 应用时有两个 IDE 选择。你可以使用 Xamarin Studio 或 Visual Studio。如果你在
    Mac OS 上，那么你必须使用 Android Studio IDE。本书中的所有示例都是使用 Mac 上的 Xamarin Studio 开发的。
- en: The following section lists some of the unique features that come handy with
    both Xamarin Studio and the Visual Studio IDE.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分列出了 Xamarin Studio 和 Visual Studio IDE 的一些独特功能。
- en: Xamarin Studio
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Xamarin Studio
- en: 'Xamarin Studio is a customized version of the MonoDevelop IDE, which can be
    used to develop Android, iOS, and OS X applications. Xamarin Studio is available
    on both OS X and Windows and has many advanced features as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin Studio 是 MonoDevelop IDE 的定制版本，可用于开发 Android、iOS 和 OS X 应用。Xamarin Studio
    可在 OS X 和 Windows 上使用，并具有许多高级功能，如下所示：
- en: Code completion
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码补全
- en: Smart syntax highlighting
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能语法高亮
- en: Code navigation
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码导航
- en: Code tooltips
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码工具提示
- en: Integrated debugging for mobile apps running on emulators or on devices
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成调试器，用于在模拟器或设备上运行的移动应用
- en: Source control integration with Git and subversion built-in
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git 和 subversion 内置的源代码控制集成
- en: The Xamarin component store
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xamarin 组件存储库
- en: The NuGet package browser
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NuGet 包浏览器
- en: 'The following screenshot shows Xamarin Studio on Mac OS with the Android user
    interface designer opened:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在 Mac OS 上打开的 Xamarin Studio 的 Android 用户界面设计器：
- en: '![](img/VHxdSxnb.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/VHxdSxnb.jpg)'
- en: Xamarin for Visual Studio
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Xamarin for Visual Studio
- en: 'Xamarin for Visual Studio is an add-in that supports the development of the
    Xamarin.Android and Xamarin.iOS apps. The Visual Studio add-in for Xamarin requires
    at least a business or enterprise license. It is not available for basic Indie
    lenience users. If you already have a license for Visual Studio and are comfortable
    with the environment, the add-in will likely be more appealing than Xamarin Studio
    because of the simplicity of adoption. Apart from the basic features, such as
    code completion, syntax highlighter, smart navigation and tooltip, the Xamarin
    Visual Studio add-in extends the IDE capabilities to make the mobile development
    painless. The following are some of the specialized features from Xamarin for
    Visual Studio that are add-ins:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin for Visual Studio 是一个支持开发 Xamarin.Android 和 Xamarin.iOS 应用的插件。Xamarin
    的 Visual Studio 插件至少需要一个商业或企业许可证。它不适用于基本的独立许可用户。如果你已经拥有 Visual Studio 许可证并且熟悉该环境，那么由于采用简单，插件可能比
    Xamarin Studio 更吸引人。除了基本功能，如代码补全、语法高亮、智能导航和工具提示之外，Xamarin Visual Studio 插件还扩展了
    IDE 功能，使移动开发变得轻松。以下是从 Xamarin for Visual Studio 中提供的某些专用功能，这些功能作为插件提供：
- en: '**IntelliSense**: This helps developers take a quick look up at the language
    reference for both iOS and Android APIs.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IntelliSense**：这有助于开发者快速查看 iOS 和 Android API 的语言参考。'
- en: '**Visual Designer**: With Visual Designers, you don''t necessarily need to
    remember all the properties of a view, while building UI layouts for multiple
    resolutions. This also integrates with a property editor that enables easy property
    configurations such as color, font, size, margin, view ID, and so on.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可视化设计器**：使用可视化设计器时，你不必一定记住视图的所有属性，同时构建适用于多个分辨率的 UI 布局。这也集成了属性编辑器，可以轻松配置颜色、字体、大小、边距、视图
    ID 等属性。'
- en: 'The following screenshot shows Visual Studio 2012 with the Android user interface
    designer opened:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了打开 Android 用户界面设计器的 Visual Studio 2012：
- en: '![](img/gZd3WcOH.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/gZd3WcOH.jpg)'
- en: IDE comparison
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IDE 比较
- en: 'It is not a surprise that every IDE provides the basic core functionalities
    for developers and some of the unique features of its own. The following table
    depicts the pros and cons of two different IDE choices available for the Xamarin.Android
    development:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 IDE 都为开发者提供基本的核心功能，并有一些自己独特的功能，这并不奇怪。以下表格描述了两个不同 IDE 选择的优缺点，这些 IDE 可用于 Xamarin.Android
    开发：
- en: IDE
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: IDE
- en: Pros
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 优点
- en: Cons
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 缺点
- en: Xamarin Studio
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin Studio
- en: It comes with Xamarin.Android and no additional license is required. It runs
    on Windows and OS X.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它包含 Xamarin.Android，无需额外许可证。它可以在 Windows 和 OS X 上运行。
- en: It runs on both Windows and Mac OS for the Xamairn.Android license.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xamairn.Android许可证在Windows和Mac OS上运行。
- en: By default, it does not support the use of TFS for source control.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，它不支持使用TFS进行源代码控制。
- en: Visual Studio
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio
- en: Most of the C# developers are already familiar and comfortable with Visual Studio.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数C#开发者已经熟悉并习惯使用Visual Studio。
- en: This comes in handy when using TFS for source control, which is used in many
    .NET shops. No additional third-party tool or configuration is required while
    using TFS in Visual Studio.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用TFS进行源代码控制时，这在许多.NET商店中很常见，这会很有用。在Visual Studio中使用TFS时，不需要额外的第三方工具或配置。
- en: It requires the Xamarin Android business or enterprise licenses for using Visual
    Studio.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Visual Studio 需要Xamarin Android的商业或企业许可证。
- en: It runs on Windows only.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它仅在Windows上运行。
- en: Compatibility
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼容性
- en: The solution and project files created and updated by Xamarin Studio are compatible
    with Visual Studio, making it easy to switch between the two environments throughout
    the duration of a project. This also allows the team members to adopt the tool
    that they are most comfortable with or that runs on their platform of choice.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 由Xamarin Studio创建和更新的解决方案和项目文件与Visual Studio兼容，这使得在整个项目期间轻松地在两个环境之间切换。这也允许团队成员采用他们最舒适或在其首选平台上运行的工具。
- en: Summary
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed the architecture of Xamarin.Android and the magic
    of how it facilitates the creation of Android apps using C# and .NET. We also
    reviewed a set of benefits and drawbacks of adopting Xamarin.Android. In the next
    chapter, we will install Xamain.Android and create a project that we will build
    for the remainder of the book.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了Xamarin.Android的架构以及它如何通过C#和.NET创建Android应用的神奇之处。我们还回顾了采用Xamarin.Android的好处和缺点。在下一章中，我们将安装Xamarin.Android并创建一个项目，我们将为本书的剩余部分构建该项目。
