- en: Chapter 5. TV Set Constant Volume Controller
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章. 电视恒定音量控制器
- en: I don't watch TV much, but when I do, I usually completely relax and fall asleep.
    I know that TV is not meant for putting you to sleep, but it does this to me.
    Unfortunately, commercials are transmitted at a very high volume and they wake
    me up. How can I relax if commercials wake me up every five minutes?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我不太看电视，但当我看的时候，我通常会完全放松并入睡。我知道电视不是用来让你入睡的，但它对我就是这样做的。不幸的是，广告的音量非常高，它们会把我吵醒。如果每五分钟就有一个广告把我吵醒，我怎么能放松呢？
- en: Can you believe it? During one of my naps between two commercials, I came up
    with a solution based on iOS and Arduino.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你能相信吗？在两个广告之间的一个午睡中，我想出了一个基于iOS和Arduino的解决方案。
- en: It's nothing complex. An iOS device listens to the TV set's audio, and when
    the audio level becomes higher than a preset threshold, the iOS device sends a
    message (via Bluetooth) to Arduino, which controls the TV set volume, emulating
    the traditional IR remote control. Exactly the same happens when the volume drops
    below another threshold. The final result is that the TV set volume is almost
    constant, independent of what is on the air. This helps me sleep longer!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不复杂。iOS设备监听电视的音频，当音频级别超过预设阈值时，iOS设备会通过蓝牙发送消息到Arduino，Arduino控制电视音量，模拟传统的红外遥控器。当音量低于另一个阈值时，也会发生完全相同的情况。最终结果是电视音量几乎保持恒定，不受电视播放内容的影响。这有助于我睡得更久！
- en: The techniques that you are going to learn in this chapter are useful in many
    different ways. You can use an IR remote control for any purpose, or you can control
    many different devices, such as a CD/DVD player, a stereo set, Apple TV, a projector,
    and so on, directly from an Arduino and iOS device. As always, it is up to your
    imagination.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你在本章中将学习到的技术以多种不同的方式有用。你可以用红外遥控器实现任何目的，或者你可以控制许多不同的设备，例如CD/DVD播放器、立体声音响、Apple
    TV、投影仪等等，直接从Arduino和iOS设备上操作。就像往常一样，这取决于你的想象力。
- en: Constant Volume Controller requirements
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 恒定音量控制器要求
- en: Our aim is to design an Arduino-based device, which can make the TV set's volume
    almost constant by emulating the traditional remote controller, and an iOS application,
    which monitors the TV and decides when to decrease or increase the TV set's volume.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目的是设计一个基于Arduino的设备，通过模拟传统的遥控器来使电视音量几乎保持恒定，以及一个iOS应用程序，该应用程序监控电视并决定何时降低或提高电视音量。
- en: Hardware
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件
- en: Most TV sets can be controlled by an IR remote controller, which sends signals
    to control the volume, change the channel, and control all the other TV set functions.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数电视都可以通过红外遥控器控制，它发送信号来控制音量、更换频道以及控制电视的所有其他功能。
- en: IR remote controllers use a carrier signal (usually at 38 KHz) that is easy
    to isolate from noise and disturbances.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 红外遥控器使用一个载波信号（通常为38 KHz），这种信号很容易从噪声和干扰中分离出来。
- en: The carrier signal is turned on and off by following different rules (encoding)
    in order to transmit the 0 and 1 digital values.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 载波信号通过遵循不同的规则（编码）来打开和关闭，以便传输0和1的数字值。
- en: The IR receiver removes the carrier signal (with a low pass filter) and decodes
    the remaining signal by returning a clear sequence of 0 and 1.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 红外接收器通过低通滤波器去除载波信号，并通过返回一个清晰的0和1序列来解码剩余的信号。
- en: Tip
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**The IR remote control theory**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**红外遥控器理论**'
- en: You can find more information about the IR remote control at [http://bit.ly/1UjhsIY](http://bit.ly/1UjhsIY).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[http://bit.ly/1UjhsIY](http://bit.ly/1UjhsIY)找到有关红外遥控器的更多信息。
- en: Our circuit will emulate the IR remote controller by using an IR LED, which
    will send specific signals that can be interpreted by our TV set.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过使用红外LED来模拟红外遥控器，它将发送可以被我们的电视接收的特定信号。
- en: On the other hand, we can receive an IR signal with a phototransistor and decode
    it into an understandable sequence of numbers, by designing a demodulator and
    a decoder.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，我们可以通过设计一个解调器和解码器，使用光电晶体管接收红外信号并将其解码成可理解的数字序列。
- en: Nowadays, electronics is very simple; an IR receiver module (Vishay 4938) will
    manage the complexity of signal demodulation, noise cancellation, triggering,
    and decoding. It can be directly connected to Arduino, making everything very
    easy.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，电子设备非常简单；一个红外接收器模块（Vishay 4938）将处理信号解调、噪声消除、触发和解码的复杂性。它可以直接连接到Arduino，使一切变得非常简单。
- en: In the project in this chapter, we need an IR receiver to discover the coding
    rules that are used by our own IR remote controller (and the TV set).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的项目中，我们需要一个红外接收器来发现我们自己的红外遥控器（以及电视）所使用的编码规则。
- en: Additional electronic components
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 额外的电子组件
- en: 'In this project, we need the following additional components:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们还需要以下额外的组件：
- en: IR LED Vishay TSAL6100
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vishay TSAL6100 红外LED
- en: IR Receiver module Vishay TSOP 4838
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vishay TSOP 4838 红外接收模块
- en: Resistor 100Ω
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电阻 100Ω
- en: Resistor 680Ω
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电阻 680Ω
- en: Electrolytic capacitor 0.1μF
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电解电容 0.1μF
- en: Electronic circuit
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电子电路
- en: 'The following picture shows the electrical diagram of the circuit that we need
    for the project:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图片展示了我们为项目所需的电路的电原理图：
- en: '![Electronic circuit](img/image00207.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![电子电路](img/image00207.jpeg)'
- en: The IR receiver will be used only to capture the TV set's remote controller
    signals so that our circuit can emulate them.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 红外接收器将仅用于捕获电视遥控器的信号，以便我们的电路可以模拟它们。
- en: However, an IR LED is constantly used to send commands to the TV set. The other
    two LEDs will show when Arduino increases or decreases the volume. They are optional
    and can be omitted.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一个红外LED始终用于向电视发送命令。其他两个LED将在Arduino增加或减少音量时显示。它们是可选的，可以省略。
- en: As usual, the Bluetooth device is used to receive commands from the iOS device.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如往常一样，蓝牙设备用于接收iOS设备的命令。
- en: Tip
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Powering the IR LED in the current limits of Arduino**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**在Arduino电流限制内供电红外LED**'
- en: From the datasheet of the TSAL6100, we know that the forward voltage is 1.35V.
    The voltage drop along R1 is then *5-1.35 = 3.65V*, and the current provided by
    Arduino to power the LED is about *3.65/680=5.3 mA*. The maximum current that
    is allowed for each PIN is 40 mA (the recommended value is 20 mA). So, we are
    within the limits. In case your TV set is far from the LED, you may need to reduce
    the R1 resistor in order to get more current (and the IR light). Use a new value
    of R1 in the previous calculations to check whether you are within the Arduino
    limits. For more information about the Arduino PIN current, check out [http://bit.ly/1JosGac](http://bit.ly/1JosGac).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 从TSAL6100的数据表中，我们知道正向电压是1.35V。因此，R1上的电压降为*5-1.35 = 3.65V*，Arduino提供给LED的电流大约为*3.65/680=5.3
    mA*。每个引脚允许的最大电流是40 mA（推荐值为20 mA）。所以，我们在Arduino的限制范围内。如果你的电视远离LED，你可能需要降低R1电阻以获得更多电流（和红外光）。使用新的R1值在之前的计算中检查你是否在Arduino的限制范围内。有关Arduino引脚电流的更多信息，请查看[http://bit.ly/1JosGac](http://bit.ly/1JosGac)。
- en: 'The following diagram shows how to mount the circuit on a breadboard:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示展示了如何在面包板上安装电路：
- en: '![Electronic circuit](img/image00208.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![电子电路](img/image00208.jpeg)'
- en: Arduino code
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Arduino 代码
- en: The entire code of this project can be downloaded from [https://www.packtpub.com/books/content/support](https://www.packtpub.com/books/content/support).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目的全部代码可以从[https://www.packtpub.com/books/content/support](https://www.packtpub.com/books/content/support)下载。
- en: To understand better the explanations in the following paragraphs, open the
    downloaded code while reading them.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解以下段落中的解释，请在阅读时打开下载的代码。
- en: In this project, we are going to use the IR remote library, which helps us code
    and decode IR signals.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将使用红外遥控库，它帮助我们编码和解码红外信号。
- en: 'The library can be downloaded from [http://bit.ly/1Isd8Ay](http://bit.ly/1Isd8Ay),
    and installed by using the following procedure:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 该库可以从[http://bit.ly/1Isd8Ay](http://bit.ly/1Isd8Ay)下载，并按照以下步骤安装：
- en: Navigate to the release page of [http://bit.ly/1Isd8Ay](http://bit.ly/1Isd8Ay)
    in order to get the latest release and download the `IRremote.zip` file.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到[http://bit.ly/1Isd8Ay](http://bit.ly/1Isd8Ay)的发布页面，以获取最新版本并下载`IRremote.zip`文件。
- en: Unzip the file whatever you like.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压你喜欢的文件。
- en: Open the **Finder** and then the `Applications` folder (*Shift* + *Control*
    + *A*).
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**查找器**，然后是`应用程序`文件夹（*Shift* + *Control* + *A*）。
- en: Locate the Arduino application.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位Arduino应用程序。
- en: Right-click on it and select **Show Package Contents**.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击并选择**显示包内容**。
- en: Locate the `Java` folder and then `libraries`.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位`Java`文件夹，然后是`libraries`。
- en: Copy the `IRremote` folder (unzipped in step 2) into the `libraries` folder.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`IRremote`文件夹（在第2步中解压）复制到`libraries`文件夹中。
- en: Restart Arduino if you have it running.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果Arduino正在运行，请重新启动Arduino。
- en: 'In this project, we need the following two Arduino programs:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们需要以下两个Arduino程序：
- en: One is used to acquire the codes that your IR remote controller sends to increase
    and decrease the volume
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于获取你的红外遥控器发送的用于增加和减少音量的代码
- en: The other is the main program that Arduino has to run to automatically control
    the TV set volume
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个是Arduino必须运行的用于自动控制电视音量的主程序
- en: Let's start with the code that is used to acquire the IR remote controller codes.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从用于获取红外遥控器代码的代码开始。
- en: Decoder setup code
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解码器设置代码
- en: In this section, we will be referring to the downloaded `Decode.ino` program
    that is used to discover the codes that are used by your remote controller.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将参考下载的 `Decode.ino` 程序，该程序用于发现您遥控器使用的代码。
- en: Since the setup code is quite simple, it doesn't require a detailed explanation;
    it just initializes the library to receive and decode messages.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 由于设置代码相当简单，不需要详细解释；它只是初始化库以接收和解码消息。
- en: Decoder main program
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解码器主程序
- en: In this section, we will be referring to the downloaded `Decode.ino` program;
    the main code receives signals from the TV remote controller and dumps the appropriate
    code, which will be included in the main program to emulate the remote controller
    itself.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将参考下载的 `Decode.ino` 程序；主代码接收来自电视遥控器的信号并输出相应的代码，这些代码将被包含在主程序中以模拟遥控器本身。
- en: 'Once the program is run, if you press any button on the remote controller,
    the console will show the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦程序运行，如果您按下遥控器上的任何按钮，控制台将显示以下内容：
- en: '[PRE0]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The second row is what we need. Please refer to the *Testing and tuning* section
    for a detailed description of how to use this data.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行是我们需要的。请参阅 *测试和调整* 部分以获取如何使用这些数据的详细说明。
- en: Now, we will take a look at the main code that will be running on Arduino all
    the time.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将查看将在 Arduino 上持续运行的 main 代码。
- en: Setup code
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置代码
- en: In this section, we will be referring to the `Arduino_VolumeController.ino`
    program. The setup function initializes the nRF8001 board and configures the pins
    for the optional monitoring LEDs.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将参考 `Arduino_VolumeController.ino` 程序。设置函数初始化 nRF8001 板并配置可选监控 LED 的引脚。
- en: Main program
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主程序
- en: The `loop` function just calls the `polACI` function to allow the correct management
    of incoming messages from the nRF8001 board.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`loop` 函数只是调用 `polACI` 函数以允许正确管理来自 nRF8001 板的传入消息。'
- en: 'The program accepts the following two messages from the iOS device (refer to
    the `rxCallback` function):'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序接受来自 iOS 设备的以下两条消息（参看 `rxCallback` 函数）：
- en: '`D` to decrease the volume'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`D` 用于降低音量'
- en: '`I` to increase the volume'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`I` 用于增加音量'
- en: 'The following two functions perform the actual increasing and decreasing of
    volume by sending the two `up` and `down` buffers through the IR LED:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下两个函数通过发送两个 `up` 和 `down` 缓冲区通过红外LED来执行实际的音量增加和减少：
- en: '[PRE1]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `up` and `down` buffers, `VOLUME_UP_BUFFER_LEN` and `VOLUME_DOWN_BUFFER_LEN`,
    are prepared with the help of the Decode.ino program (see the *Testing and tuning*
    section).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`up` 和 `down` 缓冲区，`VOLUME_UP_BUFFER_LEN` 和 `VOLUME_DOWN_BUFFER_LEN`，是在 Decode.ino
    程序的帮助下准备的（参见 *测试和调整* 部分）。'
- en: iOS code
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: iOS 代码
- en: In this chapter, we are going to look at the iOS application that monitors the
    TV set volume and sends the volume down or volume up commands to the Arduino board
    in order to maintain the volume at the desired value.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨一个 iOS 应用程序，该应用程序监控电视音量并将音量增加或减少命令发送到 Arduino 板，以保持所需的音量值。
- en: The full code of this project can be downloaded from [https://www.packtpub.com/books/content/support](https://www.packtpub.com/books/content/support).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目的完整代码可以从 [https://www.packtpub.com/books/content/support](https://www.packtpub.com/books/content/support)
    下载。
- en: To understand better the explanations in the following paragraphs, open the
    downloaded code while reading them.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解以下段落中的解释，请在阅读时打开下载的代码。
- en: Creating the Xcode project
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Xcode 项目
- en: 'We will create a new project as we already did in the previous chapters. The
    following are the steps that you need to follow:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个新的项目，就像我们在前面的章节中所做的那样。以下是你需要遵循的步骤：
- en: 'The following are the parameters for the new project:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是新项目的参数：
- en: '**Project Type**: Tabbed application'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目类型**: 选项卡式应用程序'
- en: '**Product Name**: VolumeController'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品名称**: VolumeController'
- en: '**Language**: Objective-C'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语言**: Objective-C'
- en: '**Devices**: Universal'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设备**: 通用'
- en: 'To set a capability for this project, perform the following steps:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要为此项目设置功能，请执行以下步骤：
- en: Select the project in the left pane of Xcode.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Xcode 的左侧面板中选择项目。
- en: Select **Capabilities** in the right pane.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧面板中选择 **功能**。
- en: Turn on the **Background Modes** option and select **Audio and AirPlay** (refer
    to the following picture). This allows an iOS device to listen to audio signals
    too when the iOS device screen goes off, or the app goes in the background:![Creating
    the Xcode project](img/image00209.jpeg)
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**后台模式**选项，并选择**音频和AirPlay**（参见图示）。这允许iOS设备在iOS设备屏幕关闭或应用进入后台时也能监听音频信号：![创建Xcode项目](img/image00209.jpeg)
- en: 'Since the structure of this project is very close to the Pet Door Locker, we
    can reuse a part of the user interface and the code by performing the following
    steps (for more details, go back to the iOS guider rover project in [Chapter 4](part0033.xhtml#aid-VF2I1
    "Chapter 4. iOS Guided Rover"), *iOS Guided Rover*, where we did almost the same
    thing):'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此项目的结构与Pet Door Locker非常相似，我们可以通过以下步骤重用用户界面和代码的一部分（更多详情，请参阅第4章中的iOS Guided
    Rover项目[iOS Guided Rover]，我们在这里几乎做了同样的事情）：
- en: Select **FirstViewController.h** and **FirstViewController.m**, right-click
    on them, click on **Delete**, and select **Move to Trash**.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**FirstViewController.h**和**FirstViewController.m**，右键单击它们，点击**删除**，然后选择**移动到废纸篓**。
- en: With the same procedure, delete**SecondViewController**and **Main.storyboard**.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用相同的步骤，删除**SecondViewController**和**Main.storyboard**。
- en: Open the **PetDoorLocker** project in Xcode.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Xcode中打开**PetDoorLocker**项目。
- en: Select the following files and drag and drop them to this project (refer to
    the following picture).
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择以下文件，并将它们拖放到此项目中（参见图示）。
- en: '**BLEConnectionViewController.h**'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BLEConnectionViewController.h**'
- en: '**BLEConnectionViewController.m**'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BLEConnectionViewController.m**'
- en: '**Main.storyboard**'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Main.storyboard**'
- en: Ensure that **Copy items if needed** is selected and then click on **Finish**.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保选中**如果需要则复制项目**，然后点击**完成**。
- en: Copy the icon that was used for the BLEConnectionViewController view controller.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制用于BLEConnectionViewController视图控制器的图标。
- en: Create a new View Controller class and name it `VolumeControllerViewController`.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的视图控制器类，并将其命名为`VolumeControllerViewController`。
- en: Open the **Main.storyboard** and locate the main View Controller.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**Main.storyboard**并定位主视图控制器。
- en: Delete all the graphical components.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除所有图形组件。
- en: Open the Identity Inspector and change the **Class** to **VolumeControllerViewController**.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开身份检查器，将**类**更改为**VolumeControllerViewController**。
- en: Now, we are ready to create what we need for the new application.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备好创建新应用所需的内容。
- en: Designing the user interface for VolumeControllerViewController
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为VolumeControllerViewController设计用户界面
- en: 'This view controller is the main view controller of the application, and contains
    just the following components:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这个视图控制器是应用程序的主要视图控制器，并且只包含以下组件：
- en: The switch that turns on and off the volume control
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制音量开关的开关
- en: The slider that sets the desired volume of the TV set
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置电视设置所需音量的滑块
- en: 'Once you have added the components and their layout constraints, you will end
    up with something that looks like the following screenshot:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦添加了组件及其布局约束，最终结果将类似于以下截图：
- en: '![Designing the user interface for VolumeControllerViewController](img/image00210.jpeg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![为VolumeControllerViewController设计用户界面](img/image00210.jpeg)'
- en: 'Once the GUI components are linked with the code of the view controller, we
    end with the following code:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦GUI组件与视图控制器的代码链接，我们将得到以下代码：
- en: '[PRE2]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Writing code for BLEConnectionViewController
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为BLEConnectionViewController编写代码
- en: Since we copied this View Controller from the Pet Door Locker project, we don't
    need to change it apart from replacing the key, which was used to store the peripheral
    UUID, from `PetDoorLockerDevice` to `VolumeControllerDevice`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们从Pet Door Locker项目复制了这个视图控制器，所以我们不需要更改它，除了将用于存储外围设备UUID的密钥从`PetDoorLockerDevice`更改为`VolumeControllerDevice`。
- en: We saved some work!
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们保存了一些工作！
- en: Now, we are ready to work on the VolumeControllerViewController, which is much
    more interesting.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备好开始处理VolumeControllerViewController，这更有趣。
- en: Writing code for VolumeControllerViewController
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为VolumeControllerViewController编写代码
- en: This is the main part of the application; almost everything happens here.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这是应用程序的主要部分；几乎所有事情都发生在这里。
- en: 'We need some properties, as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一些属性，如下所示：
- en: '[PRE3]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Some are used to manage the Bluetooth communication and don't need much explanation.
    The `audioEngine` is the instance of `AVAudioEngine`, which allows us to transform
    the audio signal captured by the iOS device microphone in numeric samples. By
    analyzing these samples, we can obtain the power of the signal that is directly
    related to the TV set's volume (the higher the volume, the greater the signal
    power).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些用于管理蓝牙通信，不需要过多解释。`audioEngine`是`AVAudioEngine`的实例，它允许我们将iOS设备麦克风捕获的音频信号转换为数值样本。通过分析这些样本，我们可以获得与电视音量直接相关的信号功率（音量越高，信号功率越大）。
- en: Tip
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Analog-to-digital conversion**'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**模拟-数字转换**'
- en: The operation of transforming an analog signal into a digital sequence of numbers,
    which represent the amplitude of the signal itself at different times, is called
    analog-to-digital conversion. Arduino analog inputs perform exactly the same operation.
    Together with the digital-to-analog conversion, it is a basic operation of digital
    signal processing and storing music in our devices and playing it with a reasonable
    quality. For more details, visit [http://bit.ly/1N1QyXp](http://bit.ly/1N1QyXp).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 将模拟信号转换为表示信号自身在不同时间的振幅的数字序列的操作，称为模拟-数字转换。Arduino模拟输入执行完全相同的操作。与数字-模拟转换一起，它是数字信号处理的基本操作，以及将音乐存储在我们的设备中并以合理的质量播放。更多详情，请访问[http://bit.ly/1N1QyXp](http://bit.ly/1N1QyXp)。
- en: The `actualVolumeDb` property stores the actual volume of the signal measured
    in dB (short for decibel).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`actualVolumeDb`属性存储实际测量为dB（分贝）的信号音量。'
- en: Tip
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Decibel (dB)**'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**分贝（dB）**'
- en: 'The decibel (dB) is a logarithmic unit that expresses the ratio between two
    values of a physical quantity. Referring to the power of a signal, its value in
    decibel is calculated with the following formula:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 分贝（dB）是一个对数单位，表示物理量两个值之间的比率。关于信号的功率，其分贝值按照以下公式计算：
- en: '![Writing code for VolumeControllerViewController](img/image00211.jpeg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![为VolumeControllerViewController编写代码](img/image00211.jpeg)'
- en: Here, P is the power of the signal and P[0] is a reference power. You can find
    out more about decibel at [http://bit.ly/1LZQM0m](http://bit.ly/1LZQM0m). We have
    to point out that if P < P[0], the value of P[dB] if lower of zero. So, decibel
    values are usually negative values, and 0dB indicates the maximum power of the
    signal.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，P是信号的功率，P[0]是参考功率。你可以在[http://bit.ly/1LZQM0m](http://bit.ly/1LZQM0m)了解更多关于分贝的信息。我们必须指出，如果P
    < P[0]，则P[dB]的值将低于零。因此，分贝值通常是负值，0dB表示信号的最大功率。
- en: The `desiredVolumeDb` property stores the desired volume measured in dB, and
    the user controls this value through the volume slider in the main tab of the
    app; `desiredVolumeMinDb` and `desiredVolumeMaxDb` are derived from the `desiredVolumeDb`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`desiredVolumeDb`属性存储期望的音量，以dB为单位，用户通过应用主标签页中的音量滑块来控制此值；`desiredVolumeMinDb`和`desiredVolumeMaxDb`是从`desiredVolumeDb`派生出来的。'
- en: The most significant part of the code is in the `viewDidLoad` method (refer
    to the downloaded code).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中最重要的一部分在`viewDidLoad`方法中（参考下载的代码）。
- en: 'First, we instantiate the `AudioEngine` and get the default input node, which
    is the microphone, as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们实例化`AudioEngine`并获取默认的输入节点，即麦克风，如下所示：
- en: '[PRE4]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `AVAudioEngine` is a very powerful class, which allows digital audio signal
    processing. We are just going to scratch its capabilities.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`AVAudioEngine`是一个非常强大的类，它允许数字音频信号处理。我们只是刚刚触及它的功能。'
- en: Tip
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**AVAudioEngine**'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**AVAudioEngine**'
- en: You can find out more about AVAudioEngine by visiting [http://apple.co/1kExe35](http://apple.co/1kExe35)
    (AVAudioEngine in practice) and [http://apple.co/1WYG6Tp](http://apple.co/1WYG6Tp).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过访问[http://apple.co/1kExe35](http://apple.co/1kExe35)（AVAudioEngine的实际应用）和[http://apple.co/1WYG6Tp](http://apple.co/1WYG6Tp)了解更多关于AVAudioEngine的信息。
- en: 'The `AVAudioEngine` and other functions that we are going to use require that
    we add the following imports:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要使用的`AVAudioEngine`和其他函数要求我们添加以下导入：
- en: '[PRE5]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'By installing an audio tap on the bus for our input node, we can get the numeric
    representation of the signal that the iOS device is listening to, as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在我们的输入节点总线上的输入上安装音频节，我们可以获取iOS设备所监听的信号的数值表示，如下所示：
- en: '[PRE6]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As soon as a new buffer of data is available, the code block is called and
    the data can be processed. Now, we can take a look at the code that transforms
    the audio data samples into actual commands to control the TV set:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦有新的数据缓冲区可用，代码块就会被调用，数据可以被处理。现在，我们可以看看将音频数据样本转换为实际控制电视的命令的代码：
- en: '[PRE7]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In our case, the `for` cycle is executed just once, because we have just one
    buffer and we are using only one channel.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，`for`循环只执行一次，因为我们只有一个缓冲区，我们只使用一个通道。
- en: 'The power of a signal, represented by *N* samples, can be calculated by using
    the following formula:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 一个信号（由*N*个样本表示）的功率可以通过以下公式计算：
- en: '![Writing code for VolumeControllerViewController](img/image00212.jpeg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![为VolumeControllerViewController编写代码的截图](img/image00212.jpeg)'
- en: Here, *v* is the value of the nth signal sample.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，*v* 是第n个信号样本的值。
- en: 'Because the power calculation has to performed in real time, we are going to
    use the following functions, which are provided by the Accelerated Framework:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 因为功率计算必须在实时进行，我们将使用以下由加速框架提供的函数：
- en: '`vDSP_vsq`: This function calculates the square of each input vector element'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vDSP_vsq`：此函数计算每个输入向量元素的平方'
- en: '`vDSP_meanv`: This function calculates the mean value of the input vector elements'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vDSP_meanv`：此函数计算输入向量元素的均值'
- en: Tip
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**The Accelerated Framework**'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**加速框架**'
- en: The Accelerated Framework is an essential tool that is used for digital signal
    processing. It saves you time in implementing the most used algorithms and mostly
    providing implementation of algorithms that are optimized in terms of memory footprint
    and performance. More information on the Accelerated Framework can be found at
    [http://apple.co/1PYIKE8](http://apple.co/1PYIKE8) and [http://apple.co/1JCJWYh](http://apple.co/1JCJWYh).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 加速框架是一个用于数字信号处理的必备工具，它可以帮助你节省在实现最常用算法的时间，并且主要提供针对内存占用和性能优化的算法实现。有关加速框架的更多信息，请参阅[http://apple.co/1PYIKE8](http://apple.co/1PYIKE8)和[http://apple.co/1JCJWYh](http://apple.co/1JCJWYh)。
- en: Eventually, the signal power is stored in `_actualVolumeDb`. When the modulus
    of `_actualVolumeDb` is lower than the `_desiredVolumeMinDb`, the TV set's volume
    is too high, and we need to send a message to Arduino to reduce it. Don't forget
    that `_actualVolumeDb` is a negative number; the modulus decreases this number
    when the TV set's volume increases. Conversely, when the TV set's volume decreases,
    the `_actualVolumeDb` modulus increases, and when it gets higher than `_desiredVolumeMaxDb`,
    we need to send a message to Arduino to increase the TV set's volume.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，信号功率存储在`_actualVolumeDb`中。当`_actualVolumeDb`的模数低于`_desiredVolumeMinDb`时，电视的音量太高，我们需要向Arduino发送消息来降低它。别忘了`_actualVolumeDb`是一个负数；当电视音量增加时，模数会减小这个数。相反，当电视音量降低时，`_actualVolumeDb`的模数会增加，并且当它高于`_desiredVolumeMaxDb`时，我们需要向Arduino发送消息来增加电视的音量。
- en: During pauses in dialogues, the power of the signal tends to decrease even if
    the volume of the speech is not changed. Without any adjustment, the increasing
    and decreasing messages are continuously sent to the TV set during dialogues.
    To avoid this misbehavior, we send the volume increase message only when the signal
    power stays over the threshold for some time (when `_increaseVolumeDelay` is greater
    than 10).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在对话中的暂停期间，即使说话的音量没有改变，信号的功率往往会降低。如果没有任何调整，在对话期间会持续不断地向电视发送增加和减少的消息。为了避免这种行为，我们只在信号功率超过阈值一段时间后发送音量增加消息（当`_increaseVolumeDelay`大于10时）。
- en: We can take a look at the other view controller methods that are not complex.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看看其他不复杂的视图控制器方法。
- en: 'When the view belonging at the view controller appears, the following method
    is called:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 当属于视图控制器的视图出现时，会调用以下方法：
- en: '[PRE8]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this function, we connect to the Arduino board and start the audio engine
    in order to start listening to the TV set.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，我们连接到Arduino板并启动音频引擎，以便开始监听电视。
- en: 'When the view disappears from the screen, the `viewDidDisappear` method is
    called, and we disconnect from the Arduino and stop the audio engine, as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 当视图从屏幕消失时，会调用`viewDidDisappear`方法，然后我们断开与Arduino的连接并停止音频引擎，如下所示：
- en: '[PRE9]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The method that is called when the switch is operated (`switchChanged`) is
    pretty simple:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当开关被操作时调用的方法（`switchChanged`）相当简单：
- en: '[PRE10]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The method that is called when the volume slider changes is as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 当音量滑块改变时调用的方法如下：
- en: '[PRE11]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We just set the desired volume and the lower and upper thresholds.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只设置所需的音量和上下阈值。
- en: The other methods that are used to manage the Bluetooth connection and data
    transfer don't require any explanation, because they are exactly like in the previous
    projects.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 用于管理蓝牙连接和数据传输的其他方法不需要解释，因为它们与之前的项目完全一样。
- en: Testing and tuning
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试和调整
- en: 'We are now ready to test our new amazing system and spend more and more time
    watching TV (or taking more and more naps!) Let''s perform the following procedure:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备好测试我们新的神奇系统，并花更多的时间看电视（或者睡更多的午觉！）让我们执行以下步骤：
- en: Load the `Decoder.ino` sketch and open the Arduino IDE console.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载`Decoder.ino`草图并打开Arduino IDE控制台。
- en: 'Point your TV remote controller to the TSOP4838 receiver and press the button
    that increases the volume. You should see something like the following appearing
    on the console:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将电视遥控器指向TSOP4838接收器，并按下增加音量的按钮。你应该在控制台看到如下内容：
- en: '[PRE12]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Copy all the values between the curly braces.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制大括号之间的所有值。
- en: 'Open the `Arduino_VolumeController.ino` and paste the values for the following:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Arduino_VolumeController.ino`文件，并将以下值粘贴进去：
- en: '[PRE13]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Check whether the length of the two vectors (68 in the example) is the same
    and modify it, if needed.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查两个向量的长度（例如示例中的68）是否相同，如有必要进行修改。
- en: 'Point your TV remote controller to the TSOP4838 receiver, and press the button
    that decreases the volume. Copy the values and paste them for:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将电视遥控器指向TSOP4838接收器，并按下降低音量的按钮。复制值并粘贴如下：
- en: '[PRE14]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Check whether the length of the two vectors (68 in the example) is the same
    and modify it, if needed.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查两个向量的长度（例如示例中的68）是否相同，如有必要进行修改。
- en: Upload the `Arduino_VolumeController.ino` to Arduino and point the IR LED towards
    the TV set.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Arduino_VolumeController.ino`上传到Arduino，并将红外LED指向电视。
- en: Open the iOS application, scan for the nRF8001, and then go to the main tab.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开iOS应用程序，扫描nRF8001，然后转到主标签页。
- en: Tap on connect and then set the desired volume by touching the slider.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击连接，然后通过触摸滑块设置所需的音量。
- en: Now, you should see the blue LED and the green LED flashing. The TV set's volume
    should stabilize to the desired value.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你应该看到蓝色LED和绿色LED闪烁。电视的音量应该稳定到所需的值。
- en: To check whether everything is properly working, increase the volume of the
    TV set by using the remote control; you should immediately see the blue LED flashing
    and the volume getting lower to the preset value. Similarly, by decreasing the
    volume with the remote control, you should see the green LED flashing and the
    TV set's volume increasing.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查一切是否正常工作，请使用遥控器增加电视的音量；你应该立即看到蓝色LED闪烁，音量降低到预设值。同样，通过使用遥控器降低音量，你应该看到绿色LED闪烁，电视的音量增加。
- en: Take a nap, and the commercials will not wake you up!
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 小憩一下，广告就不会将你吵醒！
- en: How to go further
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何更进一步
- en: 'The following are some improvements that can be implemented in this project:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在此项目中可以实施的一些改进：
- en: Changing channels and controlling other TV set functions.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 改变频道和控制其他电视功能。
- en: Catching handclaps to turn on or off the TV set.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过拍手来打开或关闭电视。
- en: Adding a button to mute the TV set.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个按钮来静音电视。
- en: Muting the TV set on receiving a phone call.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在接收到电话时静音电视。
- en: Anyway, you can use the IR techniques that you have learned for many other purposes.
    For example, you can modify the rover project in [Chapter 4](part0033.xhtml#aid-VF2I1
    "Chapter 4. iOS Guided Rover"), *iOS Guided Rover*, to control the robot via an
    IR remote controller. Take a look at the other functions provided by the IRremote
    library to learn the other provided options. You can find all the available functions
    in the `IRremote.h` that is stored in the `IRremote` library folder.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，你可以使用你学到的红外技术用于许多其他目的。例如，你可以修改[第4章](part0033.xhtml#aid-VF2I1 "第4章。iOS引导式漫游")中的漫游项目，“iOS引导式漫游”，通过红外遥控器控制机器人。查看IRremote库提供的其他功能，以了解其他提供的选项。你可以在`IRremote`库文件夹中找到存储的`IRremote.h`中的所有可用功能。
- en: On the iOS side, try to experiment with the AV Audio Engine and the Accelerate
    Framework that is used to process signals.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在iOS端，尝试使用AV Audio Engine和用于处理信号的Accelerate框架进行实验。
- en: Summary
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter focused on an easy but useful project and taught you how to use
    IR to transmit and receive data to and from Arduino. There are many different
    applications of the basic circuits and programs that you learned here.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍了一个简单但实用的项目，并教你如何使用红外线将数据从Arduino发送和接收。你在这里学到的基本电路和程序有许多不同的应用。
- en: On the iOS platform, you learned the very basics of capturing sounds from the
    device microphone and the DSP (digital signal processing). This allows you to
    leverage the processing capabilities of the iOS platform to expand your Arduino
    projects.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在iOS平台上，你学习了从设备麦克风和DSP（数字信号处理）捕获声音的非常基础的知识。这让你可以利用iOS平台的处理能力来扩展你的Arduino项目。
- en: The next chapter will be amazing. You are going to open your garage door magically;
    you don't even need to touch your iOS device to do this. You will also learn a
    lot about the iBeacon technology. Your imagination will be your only limit!
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将会非常精彩。你将神奇地打开你的车库门；你甚至不需要触摸你的iOS设备就能做到这一点。你还将了解到很多关于iBeacon技术的知识。你的想象力将是你的唯一限制！
