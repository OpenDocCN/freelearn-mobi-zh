- en: Navigating Effectively
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有效导航
- en: Broadly speaking, navigation is how your user gets from one screen to another
    in your application. More specifically, however, it's what a user needs to do
    in order to reach a goal within your application. Navigation is an almost completely
    invisible part of your application's user interface design. It's an area that
    is often neglected, frequently done badly, and as a result, often leads users
    to frustration.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 从广义上讲，导航是用户如何在您的应用程序中从一个屏幕跳转到另一个屏幕。然而，更具体地说，它是用户为了在您的应用程序中达到一个目标需要做什么。导航是您应用程序用户界面设计的一个几乎完全看不见的部分。这是一个经常被忽视、经常做得不好的领域，因此，经常导致用户感到沮丧。
- en: The problem is that the navigation design of an application is often a side
    effect of the user interface design, rather than something that has been planned.
    Navigation, just like a single screen, can and should be designed to center around
    the user rather than the designer or developer. Using the techniques you've already
    learned in this book, you should be able to make almost any navigation flow work
    easily, because the elements should not be tightly coupled to each other.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于，应用程序的导航设计通常是用户界面设计的副作用，而不是已经计划好的事情。就像单个屏幕一样，导航可以也应该围绕用户而不是设计师或开发者来设计。使用您在这本书中学到的技术，您应该能够轻松地使几乎任何导航流程工作，因为元素之间不应该紧密耦合。
- en: 'In this chapter, we''ll look at navigation and navigation patterns within the
    Material Design language. You''ll learn how to do the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨在Material Design语言中的导航和导航模式。您将学习如何做以下事情：
- en: Plan and design the navigation flow of an application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规划和设计应用程序的导航流程
- en: Use the standard navigation menu component
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用标准的导航菜单组件
- en: Build tabbed navigation applications
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建标签导航应用程序
- en: Navigate using fragments instead of Activities
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用片段而不是活动进行导航
- en: Planning navigation
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规划导航
- en: Before leaping into your latest app idea, it's a good idea to stop and consider
    what you are trying to allow the user to do, and figure out how they will actually
    do it. One of the best ways to do this is with the decision tree or navigation
    tree. These can be easily drawn on paper, or if you're collaborating with other
    people, index cards on a magnetic whiteboard (or even a pin-board) are very effective.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在跃入您最新的应用程序想法之前，停下来考虑您试图让用户做什么，以及他们实际上会如何去做，这是一个好主意。其中最好的方法之一是使用决策树或导航树。这些可以在纸上轻松绘制，或者如果您与其他人合作，磁性白板（或甚至是一个图钉板）上的索引卡也非常有效。
- en: The idea is to not just draw out the possible screens in your app, but how the
    user will get to each one. Navigation diagrams don't just help to define what
    screens your application actually needs, but will help ensure that the user will
    never be "lost" in your application. If the navigation lines become too complex,
    then you need to simplify the navigation (possibly by adding or removing some
    of the screens). Overly complex navigation is often hidden in the use of an application,
    but when drawn on a diagram, the complex relationships between screens become
    obvious, and often, a solution will become apparent.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是不仅绘制出您应用程序中可能的屏幕，还要考虑用户如何到达每一个屏幕。导航图不仅有助于定义您的应用程序实际需要的屏幕，而且将有助于确保用户永远不会在您的应用程序中“迷路”。如果导航线变得过于复杂，那么您需要简化导航（可能通过添加或删除一些屏幕）。过于复杂的导航通常隐藏在应用程序的使用中，但当绘制在图上时，屏幕之间的复杂关系变得明显，通常，一个解决方案也会变得明显。
- en: 'To start drawing your diagram, create a box or card that represents the user''s
    main entry into the application. Then, branch from each possible action that the
    user might take from that screen. For each action, draw a simple icon or describe
    the type of action the user is expected to take. For example, a circle can represent
    a floating action button, three staggered lines can represent a swipe gesture,
    and so on. These icons will also help by ensuring that the gestures and actions
    on a screen remain obvious to the user, and will help you avoid navigation techniques
    that hide the behaviors from the user. Here''s an example navigation diagram for
    the current state of the travel claims app:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始绘制您的图，创建一个代表用户进入应用程序的主要入口的框或卡片。然后，从用户可能从该屏幕采取的每个可能的动作分支。对于每个动作，绘制一个简单的图标或描述用户预期采取的动作类型。例如，一个圆圈可以代表一个浮动操作按钮，三个错开的线条可以代表一个滑动手势，等等。这些图标还将通过确保屏幕上的手势和动作对用户来说保持明显，并帮助您避免隐藏用户行为的导航技术。以下是一个代表当前旅行报销应用程序状态的导航图示例：
- en: '![](img/22634f22-61fc-49bf-beb8-66a457e2f70d.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/22634f22-61fc-49bf-beb8-66a457e2f70d.jpg)'
- en: 'It''s immediately apparent from the diagram that everything flows deeply into
    the application, and that there are currently three distinct action areas: **New
    Item**, **Delete Item**, and **Add Attachment**. Larger applications should still
    have these logical groupings of action areas, and should not have navigation lines
    that have to crossover too much of the diagram. If they do, it''s a sign of an
    overcomplex navigation structure, and moving things around on the diagram will
    often help you produce a better and more intuitive application.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 从图中立即可以看出，一切都在深入到应用中，目前有三个不同的操作区域：**新建项目**、**删除项目**和**添加附件**。较大的应用仍然应该有这些操作区域的逻辑分组，并且不应该有需要跨越太多图面的导航线。如果有的话，这表明导航结构过于复杂，而在图上移动元素通常会帮助你制作出更好、更直观的应用。
- en: Now, let's take a look at various Android components built specifically for
    navigation.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看专门为导航构建的各种Android组件。
- en: Tabbed navigation
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标签导航
- en: 'When applications are broken down into a small number of logical areas, tabs
    often become the most obvious and simplest method of navigation. Most application''s
    navigation is deeply hierarchical, and in these cases, tabs are not a good choice
    for a navigation mechanism. Tab navigation is best used when each tab will be
    used roughly as much as each of the other tabs (that is, they have roughly equal
    importance). There are two major types of tabbed layouts in Android: bottom tabs
    and top tabs (also known as action bar tabs or toolbar tabs).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用被分解成少数几个逻辑区域时，标签通常成为最明显和最简单的方法。大多数应用的导航都是深度分层的，在这些情况下，标签不是导航机制的好选择。标签导航最好用于每个标签将与其他标签大致一样频繁使用（即，它们具有大致相等的重要性）。Android中有两种主要的标签布局类型：底部标签和顶部标签（也称为操作栏标签或工具栏标签）。
- en: '**Top tabs** are the classic method of adding tabs to an Android application,
    and are perfect when the application areas are not switched between often. This
    is because they are at the top of the screen and typically far away from where
    the user''s fingers are. Most typically, a user has their fingers near the bottom
    of the screen, close to the software keyboard and system navigation buttons:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**顶部标签**是将标签添加到Android应用的经典方法，当应用区域不经常切换时非常完美。这是因为它们位于屏幕顶部，通常远离用户的手指。通常，用户的手指靠近屏幕底部，靠近软件键盘和系统导航按钮：'
- en: '![](img/627f73ff-f318-4271-8dfe-6a4ccfda6b1f.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/627f73ff-f318-4271-8dfe-6a4ccfda6b1f.png)'
- en: '**Bottom tabs**, on the other hand, are a far more subtle and challenging navigation
    technique to implement effectively. Bottom tabs take up significantly more vertical
    screen space than their top-bar cousins, and therefore need to *work* for the
    extra space they consume. Bottom tabs are good to implement if the user will switch
    between the spaces frequently and spend roughly the same amount of time in each.
    As they are at the bottom of the screen, they are typically more accessible to
    the user and therefore it''s easier for them to switch between the screens they
    offer:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**底部标签**，另一方面，是实施有效的更微妙和更具挑战性的导航技术。底部标签比它们的顶部栏亲戚占用更多的垂直屏幕空间，因此需要为它们消耗的额外空间*工作*。如果用户将频繁地在这些空间之间切换，并且花费在每一个空间上的时间大致相同，那么底部标签的实现是好的。由于它们位于屏幕底部，通常更容易被用户访问，因此它们更容易在提供的屏幕之间切换：'
- en: '![](img/777376e8-771e-40f0-a50b-17389a348828.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/777376e8-771e-40f0-a50b-17389a348828.png)'
- en: With either of these tab-based navigation options, it's important to consider
    that the tabs should always be visible in the application and therefore your application
    will have several **root** nodes in your navigation tree (one for each tab). You
    should also avoid navigating the user between tabs too much, as this can be confusing.
    Instead, each tab should represent a distinct part of the application process,
    almost like a mini-app.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这两种基于标签的导航选项时，重要的是要考虑标签应该始终在应用中可见，因此你的应用将在导航树中有几个**根节点**（每个标签一个）。你还应该避免在标签之间过多地导航用户，因为这可能会造成困惑。相反，每个标签应该代表应用流程的一个独立部分，几乎就像一个迷你应用。
- en: 'The tab components provided by Android don''t actually perform any of the navigation
    themselves; instead, it''s assumed that you will encapsulate the actual navigation
    container and logic yourself. It''s normal to use the `ViewPager` class to manage
    the switching between different tab screens, and a single `Fragment` for each
    of the tabs. Android Studio also includes some simple templates for both of these
    navigation patterns. Let''s take a look at how you can build a simple Activity
    with tabs at the top:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Android 提供的标签组件实际上并不执行任何导航操作；相反，假设你将自行封装实际的导航容器和逻辑。使用 `ViewPager` 类来管理不同标签屏幕之间的切换，并为每个标签使用一个单独的
    `Fragment` 是很正常的。Android Studio 还包括这两个导航模式的一些简单模板。让我们看看如何构建一个带有顶部标签的简单 `Activity`：
- en: Open the File menu, and select New | New Project.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开文件菜单，选择新建 | 新建项目。
- en: Name the new project `Navigation`.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新项目命名为 `Navigation`。
- en: 'Select an appropriate Company Domain to determine the package:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择适当的公司域名以确定包名：
- en: '![](img/b0f08439-40dd-4f1f-9ca6-4890a06a00f6.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b0f08439-40dd-4f1f-9ca6-4890a06a00f6.png)'
- en: Click on the Next button.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下一步按钮。
- en: 'Select Phone and Tablet support, and at least API 16 lever support:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择手机和平板支持，以及至少 API 16 级支持：
- en: '![](img/30706e16-71e5-4575-8411-c6d854e4520f.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/30706e16-71e5-4575-8411-c6d854e4520f.png)'
- en: Then, click Next.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击下一步。
- en: 'In the Activity Gallery, scroll right to the bottom and select Tabbed Activity:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在活动库中，向右滚动到底部并选择标签活动：
- en: '![](img/548e63f6-ca1b-4645-aaee-79cc397b7f97.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/548e63f6-ca1b-4645-aaee-79cc397b7f97.png)'
- en: Click on the Next button.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下一步按钮。
- en: Name the new `Activity` `TopTabsActivity`.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的 `Activity` 命名为 `TopTabsActivity`。
- en: Scroll down to the bottom of the wizard to Navigation Style.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在向导的底部滚动到导航样式。
- en: 'Change the Navigation Style to Action Bar Tabs (with ViewPager):'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将导航样式更改为带有 ViewPager 的ActionBar标签：
- en: '![](img/07860dea-c368-45a2-8a3f-0e1dee581ae4.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/07860dea-c368-45a2-8a3f-0e1dee581ae4.png)'
- en: Click Finish to complete the wizard.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击完成以完成向导。
- en: Wait for Android Studio to finish creating your project.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待 Android Studio 完成创建你的项目。
- en: If your project has compile errors in the IDE, you might need to add the support
    library to the new project. Open the build.gradle for app module, and add
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的项目在 IDE 中有编译错误，你可能需要将支持库添加到新项目中。打开 app 模块的 build.gradle，并添加
- en: '`implementation ''com.android.support:support-v4:26.0.0''`'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`implementation ''com.android.support:support-v4:26.0.0''`'
- en: (with the correct version number) to the `dependencies`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: （带有正确的版本号）添加到 `dependencies`。
- en: 'Once the project has been created, Android Studio will have built a new `Activity`
    with three tabs in its `AppBarLayout`. Open the res/layout directory, and open
    the `activity_tob_tabs.xml` layout file to edit the number and appearance of the
    tabs:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦项目创建完成，Android Studio 将在 `AppBarLayout` 中构建一个新的 `Activity`，其中包含三个标签。打开 res/layout
    目录，并打开 `activity_tob_tabs.xml` 布局文件以编辑标签的数量和外观：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: It's best to avoid having too many tabs in any sort of tabbed layout. If you
    are using text labels (as the template does), you should try and avoid having
    more than three tabs. If you require more than three, it's best to use the Material
    icons and remove the text descriptions.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何类型的标签布局中避免有太多的标签是最好的。如果你使用文本标签（如模板所示），应尽量避免超过三个标签。如果你需要超过三个，最好使用材料图标并移除文本描述。
- en: To edit what appears in the tabs, you'll need to open the `TopTabsActivity`
    class.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要编辑标签中显示的内容，你需要打开 `TopTabsActivity` 类。
- en: Find the `SectionsPagerAdapter` inner class at the bottom of the file.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件底部找到 `SectionsPagerAdapter` 内部类。
- en: 'In this class, you can create a `switch` statement in the `getItem` method
    to create the `Fragment` instances for each tab. For example, the "Flight Search"
    images used earlier might have a `getItem` implementation looking like this:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个类中，你可以在 `getItem` 方法中创建一个 `switch` 语句来为每个标签创建 `Fragment` 实例。例如，之前使用的“航班搜索”图片可能有一个类似这样的
    `getItem` 实现：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Using a `switch` statement or similar structure instead of populating an array
    ensures that the `Fragment` objects are only allocated when they are actually
    needed. If the user doesn't change tabs, only one will need to be instantiated.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `switch` 语句或类似的结构而不是填充数组可以确保只有在实际需要时才会分配 `Fragment` 对象。如果用户不更改标签，则只需实例化一个。
- en: 'In the `TopTabsActivity`, you''ll see in the `onCreate` method that Android
    Studio tethers the `TabLayout` in the `AppBarLayout` with the `ViewPager`, using
    two listener classes from the `TabLayout` class:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `TopTabsActivity` 中，你会在 `onCreate` 方法中看到 Android Studio 使用 `TabLayout` 类的两个监听器类将
    `TabLayout` 与 `AppBarLayout` 中的 `ViewPager` 绑定：
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: These listeners will keep the selected tab in the `TabLayout` and the current
    `Fragment` displayed by the `ViewPager` in sync. When a tab is selected, the appropriate
    page will be displayed and when the `ViewPager` is swiped, the appropriate tab
    will be selected.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这些监听器将保持`TabLayout`中选中的标签页和由`ViewPager`显示的当前`Fragment`同步。当选择一个标签页时，将显示相应的页面，当滑动`ViewPager`时，将选择相应的标签页。
- en: Bottom tabs navigation
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 底部标签导航
- en: Using the bottom navigation tabs is quite different in code structure to placing
    tabs in the toolbar of the application. Where the toolbar tabs use `TabItem` widgets
    to render their content, the `BottomNavigationView` uses a menu to decide how
    it should look. A menu, much like a layout file, is a specialized XML resource
    file in Android. They also compacted to binary XML during compilation of the project
    and can be inflated at runtime using a `MenuInflator` object. Unlike a layout
    resource, a menu specifies lists of menu items and submenus, and while these have
    text descriptions and optional icons, they have no other render logic of their
    own. As a result, they are perfect for representing navigation options to a variety
    of different widgets.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码结构上，使用底部导航标签与在应用程序工具栏中放置标签有所不同。工具栏标签使用`TabItem`小部件来渲染其内容，而`BottomNavigationView`使用菜单来决定其外观。菜单，就像布局文件一样，是Android中的一个专用XML资源文件。它们在项目编译期间被压缩为二进制XML，并且可以在运行时使用`MenuInflator`对象进行填充。与布局资源不同，菜单指定了菜单项和子菜单的列表，虽然它们有文本描述和可选图标，但没有自己的渲染逻辑。因此，它们非常适合表示导航选项到各种不同的小部件。
- en: Bottom tabs are often used to present *alternative* views--different user interfaces
    on top of the same data; for example, search flights, upcoming bookings, and past
    reservations. All of them are flights for the user, but from different perspectives.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 底部标签通常用于展示*替代*视图--在相同数据之上的不同用户界面；例如，搜索航班、即将到来的预订和过去的预订。所有这些都是用户的航班，但视角不同。
- en: 'Let''s build an `Activity` to use the `BottomNavigationView` to navigate between
    different areas of an application:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一个`Activity`来使用`BottomNavigationView`在应用程序的不同区域之间导航：
- en: Right-click on the main package in the Navigation project and select New | Activity
    | Bottom Navigation Activity.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航项目中的主包上右键单击，并选择“新建”|“活动”|“底部导航活动”。
- en: Name the new `Activity` as `BottomTabsActivity`.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的`Activity`命名为`BottomTabsActivity`。
- en: Click Finish to create the new structure.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“完成”以创建新的结构。
- en: 'Android Studio will create several new files: the `Activity` class, the new
    layout XML file, several new icon files, and the navigation menu resource.'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Android Studio将创建几个新文件：`Activity`类、新的布局XML文件、几个新的图标文件和导航菜单资源。
- en: Open the new `res/layout/activity_bottom_tabs.xml` layout resource.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开新的`res/layout/activity_bottom_tabs.xml`布局资源。
- en: Ensure that the editor is in the Design mode.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保编辑器处于设计模式。
- en: 'In the Component Tree panel, select the message (TextView) item and delete
    it:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件树面板中，选择消息（`TextView`）项并删除它：
- en: '![](img/6ed3671c-7b7a-4621-9b06-88ef77273c06.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6ed3671c-7b7a-4621-9b06-88ef77273c06.png)'
- en: 'In the Palette panel, open the Containers and drag a `ViewPager` into the middle
    of the design canvas:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在调色板面板中，打开容器并拖动一个`ViewPager`到设计画布的中间：
- en: '![](img/6ae6e009-403d-4db7-a605-6d70506b1eff.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6ae6e009-403d-4db7-a605-6d70506b1eff.png)'
- en: 'Using the Attributes panel, add constraints to all sides of the new `ViewPager`
    and make them `0`:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用属性面板，将所有边界的约束添加到新的`ViewPager`并设置为`0`：
- en: '![](img/832dfa61-6554-4616-afef-b14318682677.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/832dfa61-6554-4616-afef-b14318682677.png)'
- en: Change the layout_width and layout_height attributes to match_constraint.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`layout_width`和`layout_height`属性更改为`match_constraint`。
- en: Change the ID of the `ViewPager` widget to `container`.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`ViewPager`小部件的ID更改为`container`。
- en: Right-click on the res/drawable directory in the project view, and select New
    | Vector Asset.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目视图中，右键单击`res/drawable`目录，并选择“新建”|“矢量资产”。
- en: Use the Icon selector to find the standard `search` icon, and leave the name
    as is (`ic_search_black_24dp`).
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用图标选择器查找标准`search`图标，并保留名称不变（`ic_search_black_24dp`）。
- en: Select Next, and then Finish to import the icon into your project.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“下一步”，然后选择“完成”以将图标导入到项目中。
- en: Import the `flight takeoff` and `bookmark` icons in the same way.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以相同的方式导入`flight takeoff`和`bookmark`图标。
- en: 'Open the res/menu/navigation.xml menu resource file. In the Design view, you
    should be presented with a menu editor, looking like this:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`res/menu/navigation.xml`菜单资源文件。在设计视图中，你应该看到一个菜单编辑器，如下所示：
- en: '![](img/8891eda9-9224-478b-9adf-f113b124421b.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8891eda9-9224-478b-9adf-f113b124421b.png)'
- en: Select the Home menu item by clicking on it in the Design canvas.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在设计画布中单击它来选择主菜单项。
- en: In the Attributes panel, change the item's ID to `navigation_search`.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性面板中，将项目的ID更改为`navigation_search`。
- en: Use the string resource editor to change the title attribute to a new string
    resource called `title_search`, with the content `Search`.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用字符串资源编辑器将标题属性更改为名为`title_search`的新字符串资源，内容为`搜索`。
- en: Use the icon resource selector to change the icon to the `ic_search_black_24dp`
    icon you imported.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用图标资源选择器将图标更改为您导入的`ic_search_black_24dp`图标。
- en: Select the Dashboard menu item in the Design canvas.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设计画布中选择仪表板菜单项。
- en: Change the ID attribute in the Attributes panel to `navigation_upcoming`.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性面板中将ID属性更改为`navigation_upcoming`。
- en: Use the string resource editor to change the title attribute to a new string
    resource called `title_upcoming`, with the content `Upcoming Flights`.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用字符串资源编辑器将标题属性更改为名为`title_upcoming`的新字符串资源，内容为`即将到来的航班`。
- en: Use the icon resource selector to change the icon to the `ic_flight_takeoff_black_24dp`
    icon you imported.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用图标资源选择器将图标更改为您导入的`ic_flight_takeoff_black_24dp`图标。
- en: Select the Notifications menu item in the Design canvas.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设计画布中选择通知菜单项。
- en: Change the ID attribute in the Attributes panel to `navigation_flown`.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性面板中将ID属性更改为`navigation_flown`。
- en: Use the string resource editor to change the title attribute to a new string
    resource called `title_flown`, with the content `Past Bookings`.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用字符串资源编辑器将标题属性更改为名为`title_flown`的新字符串资源，内容为`过去的预订`。
- en: Use the icon resource selector to change the icon to the `ic_bookmark_black_24dp`
    icon you imported.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用图标资源选择器将图标更改为您导入的`ic_bookmark_black_24dp`图标。
- en: Now, open the `BottomTabsActivity` source file.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`BottomTabsActivity`源文件。
- en: 'Remove the reference to the `TextView`, and replace it with a reference to
    the `ViewPager` and `BottomNavigationView`:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除对`TextView`的引用，并用对`ViewPager`和`BottomNavigationView`的引用替换它：
- en: '[PRE3]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `BottomNavigationView` (unlike the `TabLayout` used for top tabs) includes
    no listeners to automatically map between the selected tab and a `ViewPager`,
    so you''ll need to map the `MenuItem` ID values to the index of the pages that
    should be displayed. Create an `int` array with the `MenuItem` ID values in the
    same order as the pages:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`BottomNavigationView`（与用于顶部标签的`TabLayout`不同）不包含监听器来自动映射选定的标签和`ViewPager`，因此您需要将`MenuItem`
    ID值映射到应显示的页面索引。创建一个包含`MenuItem` ID值的`int`数组，其顺序与页面相同：'
- en: '[PRE4]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The template created a `BottomNavigationView.OnNavigationItemSelectedListener`
    anonymous inner class to display the name of the selected tab in the `TextView`.
    You instead want the `ViewPager` to change to the selected tab `Fragment`, and
    you can do this using the array of ID values you just declared:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模板创建了一个`BottomNavigationView.OnNavigationItemSelectedListener`匿名内部类，用于在`TextView`中显示选定的标签名称。您希望`ViewPager`切换到选定的标签`Fragment`，您可以使用您刚才声明的ID值数组来完成此操作：
- en: '[PRE5]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You''ll also need a listener for when the user swipes between the tabs on the
    `ViewPager`, so that the `BottomNavigationView` also highlights the correct tab:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还需要一个监听器，用于当用户在`ViewPager`上的标签之间滑动时，以便`BottomNavigationView`也能突出显示正确的标签：
- en: '[PRE6]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the `onCreate` method, remove the assignment to the `TextView`, and assign
    the new `ViewPager` field:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onCreate`方法中，删除对`TextView`的赋值，并分配新的`ViewPager`字段：
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Change the `BottomNavigationView` assignment and listeners to assign to the
    field in your `Activity`, and then correctly assign both the listeners:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`BottomNavigationView`赋值和监听器分配给您的`Activity`中的字段，然后正确分配两个监听器：
- en: '[PRE8]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can now assign a `ViewPagerAdapter` to the `ViewPager` with three tabs
    (such as the `SectionsPagerAdapter` generated in the `TopTabsActivity`):'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以将一个`ViewPagerAdapter`分配给具有三个标签的`ViewPager`（例如在`TopTabsActivity`中生成的`SectionsPagerAdapter`）：
- en: '[PRE9]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If the preceding line complains about `TopTabsActivity` not being an enclosing
    class, then change the `SectionsPagerAdapter` to be a static inner class--`public
    static class SectionsPagerAdapter extends FragmentPagerAdapter`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果前面的行抱怨`TopTabsActivity`不是一个封装类，那么将`SectionsPagerAdapter`更改为静态内部类--`public
    static class SectionsPagerAdapter extends FragmentPagerAdapter`。
- en: The listeners in this example can be reused in any number of applications that
    require bottom-tabbed navigation. The only thing you'll need to change is the
    list of `pageIds` that are displayed to the user. You should avoid having more
    than three or four tabs in the `BottomNavigationView`; it normally implies that
    another form of navigation is more appropriate to your application.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中的监听器可以在任何需要底部标签导航的应用程序中重复使用。你需要更改的唯一事情是显示给用户的`pageIds`列表。你应该避免在`BottomNavigationView`中有超过三个或四个标签；这通常意味着另一种导航形式更适合你的应用程序。
- en: Navigation menus
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航菜单
- en: Sometimes, you need to provide your user with a broad set of navigation options
    that won't fit into a set of tabs. This is where a hidden navigation menu, sometimes
    called a hamburger menu, becomes useful. This menu pattern was once popular to
    put as a sort of main menu, available on every screen in your application. However,
    navigation menus hide options, and they often encourage sloppy navigation design,
    because they provide a space where any navigation items can be *dumped*. It's
    better to try and avoid any form of hidden navigation until you're absolutely
    sure that you need it.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你需要为用户提供一组广泛的导航选项，这些选项无法适应一组标签。这就是隐藏导航菜单，有时也称为汉堡菜单，变得有用的地方。这种菜单模式曾经流行，被用作一种主菜单，在应用程序的每个屏幕上都可以访问。然而，导航菜单隐藏选项，并且它们经常鼓励粗心的导航设计，因为它们提供了一个可以随意放置任何导航项的空间。最好在绝对确定你需要它之前，尽量避免任何形式的隐藏导航。
- en: They can be useful when they augment other navigation patterns (such as tabs),
    and are used to offer seldom used or advanced functionality that the user is unlikely
    to access every day. For example, on a photo gallery screen, a hidden menu might
    be used to access the ability to create new labels, access photos that have been
    deleted, and to access settings and help.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当它们增强其他导航模式（如标签）时，它们可以是有用的，并且用于提供用户不太可能每天访问的很少使用或高级功能。例如，在照片画廊屏幕上，隐藏菜单可能用于访问创建新标签、访问已删除的照片以及访问设置和帮助的能力。
- en: 'Let''s add a navigation menu to the example with the bottom tabs, to allow
    the user access to some other functionality that they might need:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在带有底部标签的示例中添加一个导航菜单，以便用户可以访问他们可能需要的其他功能：
- en: Right-click on the `res/menu` directory and select New | Menu resource file.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`res/menu`目录并选择新建 | 菜单资源文件。
- en: Name the new file `nav_menu`, and click OK to create the new resource file.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新文件命名为`nav_menu`，然后点击确定以创建新的资源文件。
- en: Open the Text editor for the new file.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开新文件的文本编辑器。
- en: 'Copy the following menu structure into the new file:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下菜单结构复制到新文件中：
- en: '[PRE10]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now, open the `activity_bottom_tabs.xml` layout file.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`activity_bottom_tabs.xml`布局文件。
- en: Change to the Text editor.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到文本编辑器。
- en: 'The root element should currently be a `ConstraintLayout`; you''ll need to
    wrap it inside a `DrawerLayout` widget that will manage the showing and hiding
    of the navigation drawer. You''ll also need to give the `ConstraintLayout` a top-margin
    the same size as the `ActionBar`; otherwise, it will be hidden behind the system
    `ActionBar` (another way around this is to use the `AppBarLayout` and `CoordinatorLayout`
    with no system `ActionBar`):'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根元素当前应该是一个`ConstraintLayout`；你需要将其包裹在一个`DrawerLayout`小部件中，该小部件将管理导航抽屉的显示和隐藏。你还需要给`ConstraintLayout`一个与`ActionBar`相同大小的顶部边距；否则，它将被系统`ActionBar`（另一种解决方法是使用没有系统`ActionBar`的`AppBarLayout`和`CoordinatorLayout`）隐藏。
- en: '[PRE11]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After the `ConstraintLayout` element is closed, you''ll need to add the `NavigationView`,
    which will contain the navigation menu you just wrote:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ConstraintLayout`元素关闭后，你需要添加`NavigationView`，它将包含你刚刚编写的导航菜单：
- en: '[PRE12]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Open the `BottomTabActivity` source file.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`BottomTabActivity`源文件。
- en: 'By default, the `NavigationView` won''t respond to any form of tapping menu
    items, and won''t even close the navigation drawer when you select a menu item.
    You''ll need to add a listener and tell it what to do yourself. At the bottom
    of the `onCreate` method, look up the `NavigationView` and add a listener to at
    least close the navigation drawer:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，`NavigationView`不会对任何形式的菜单项点击做出响应，甚至在你选择一个菜单项时也不会关闭导航抽屉。你需要添加一个监听器并自己告诉它要做什么。在`onCreate`方法的底部，查找`NavigationView`并添加一个监听器以至少关闭导航抽屉：
- en: '[PRE13]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Users also expect to be able to close the navigation drawer using the back
    button. This requires you to override the default back-button behavior:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户还期望能够使用返回按钮关闭导航抽屉。这需要你覆盖默认的返回按钮行为：
- en: '[PRE14]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Overriding the back button behavior like this is something you should be very
    careful with. The default behavior is strongly consistent across the entire platform
    and all well-behaved applications. Applications that have inconsistent back-button
    behavior are obvious to users, and are often very frustrating.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式覆盖返回按钮的行为需要你非常小心。默认行为在整个平台和所有行为良好的应用程序中都是高度一致的。具有不一致返回按钮行为的应用程序对用户来说很明显，并且通常非常令人沮丧。
- en: The navigation drawer here is a very good example of its use within an application
    context. The bottom tabs allow the user quick access to the most commonly used
    areas of the application, while the navigation drawer can be used to access the
    less frequently used features. Remember that navigation drawers hide features
    of your application and should only be used for features that are not required
    for the user, to make effective use of your application. It's sometimes worth
    forcibly opening the navigation drawer the first time the screen is opened by
    the user (you can use a `SharedPreferences` to remember that they have seen it).
    You can do this using the `DrawerLayout.openDrawer` method in `Activity.onCreate`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的导航抽屉是其在应用程序上下文中使用的极好例子。底部标签允许用户快速访问应用程序中最常用的区域，而导航抽屉可以用来访问不太常用的功能。记住，导航抽屉隐藏了应用程序的功能，并且仅应用于对用户不是必需的功能，以有效地使用你的应用程序。有时，在用户第一次打开屏幕时强制打开导航抽屉是有意义的（你可以使用
    `SharedPreferences` 来记住他们已经看到了它）。你可以使用 `Activity.onCreate` 中的 `DrawerLayout.openDrawer`
    方法来做这件事。
- en: Also, remember that while overriding the default back-button behavior is important
    for the user experience in this specific case, it's normally not a good idea.
    Inconsistent back-button behavior is something that users pick up on very easily,
    and it's one of the most common irritations. For some behaviors such as closing
    the navigation drawer, it's important because it's the most common pattern, but
    using the ability to ask whether the user is "Sure they want to exit" (and similar
    additional behaviors) is a waste of the user's time, and should be avoided.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，记住，虽然覆盖默认的返回按钮行为对于这个特定情况中的用户体验很重要，但通常不是一个好主意。不一致的返回按钮行为是用户很容易注意到的，它是最常见的烦恼之一。对于某些行为，如关闭导航抽屉，它很重要，因为这是最常见的模式，但使用询问用户是否“确实想要退出”（以及类似的其他行为）是浪费用户的时间，应该避免。
- en: Navigating using Fragments
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `Fragment` 进行导航
- en: So far in the book, you've mostly been navigating users from one `Activity`
    to another `Activity`, and this is in fact how most applications are built. However,
    there is another option, which is often much more flexible and allows you to build
    even more modular applications--navigation using `Fragment` instances. So far,
    we've only really looked at Fragments as little blocks of your application that
    can be assembled to form parts of a screen, but they can be so much more than
    that.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本书中，你主要是在将用户从一个 `Activity` 导航到另一个 `Activity`，这实际上也是大多数应用程序的构建方式。然而，还有一个选项，它通常要灵活得多，并允许你构建更加模块化的应用程序——使用
    `Fragment` 实例进行导航。到目前为止，我们只是将 `Fragment` 视为可以组装成屏幕部分的小块，但它们可以远不止于此。
- en: The tabbed `Activity` classes both provide a sort of navigation using the `ViewPager`
    class and the `FragmentPagerAdapter` class. In these cases, each of the pages
    that the user can swipe to is a complete `Fragment`, with its life cycle that
    is paused and resumed, stopped, and started as the user swipes the `Fragment`
    in or out of view.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 带标签的 `Activity` 类都提供了一种使用 `ViewPager` 类和 `FragmentPagerAdapter` 类进行导航的方式。在这些情况下，用户可以滑动到的每一页都是一个完整的
    `Fragment`，其生命周期随着用户滑动 `Fragment` 进入或离开视图而暂停和恢复、停止和启动。
- en: 'If you look into the `FragmentPagerAdapter` class, you''ll find that it doesn''t
    add and remove the `Fragment` view instances directly to the `ViewPager` object.
    Instead, it uses a `FragmentTransaction` to add and remove the `Fragment` to the
    `ViewPager` using the `ViewPager` ID attribute:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看 `FragmentPagerAdapter` 类，你会发现它不会直接将 `Fragment` 视图实例添加和移除到 `ViewPager`
    对象中。相反，它使用 `FragmentTransaction` 通过 `ViewPager` 的 ID 属性将 `Fragment` 添加和移除到 `ViewPager`
    中：
- en: '[PRE15]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `FragmentTransaction` class allows you to define any number of actions that
    will all appear to happen at once. You can add, remove, attach, detach, and replace
    any number of `Fragment` instances on your user interface, and then trigger them
    all at once. The best part is that you can also add the transaction to the "back
    stack". This means that the user can undo the transaction by pressing the *back*
    button on their device.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`FragmentTransaction`类允许你定义任何数量的操作，它们都将同时发生。你可以在用户界面中添加、删除、附加、分离和替换任意数量的`Fragment`实例，然后一次性触发它们。最好的部分是，你还可以将事务添加到“返回栈”。这意味着用户可以通过按设备上的*返回*按钮来撤销事务。'
- en: So, by creating your main `Activity` with a content space (like the `ViewPager`
    in the tabs examples), and populating it with `Fragment` objects, you can simulate
    `Activity` to `Activity` navigation. This also means that your primary navigation
    controls, such as tabs or a hidden navigation menu, only need to be defined in
    your activity layout rather than on the layouts of each screen in the application.
    This also makes the navigation within your application slightly quicker, because
    the heavy-weight components of the screen are reused for each navigation.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通过使用具有内容空间（如标签示例中的`ViewPager`）的主`Activity`，并用`Fragment`对象填充它，你可以模拟`Activity`到`Activity`的导航。这也意味着你的主要导航控件，如标签或隐藏的导航菜单，只需在活动布局中定义，而不是在应用中每个屏幕的布局上定义。这也使得应用内的导航稍微快一些，因为屏幕的重量级组件在每个导航中都会被重用。
- en: 'Let''s add some navigation behaviors to the bottom tabs example that we''ve
    started, so that the navigation menu options actually do something:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在我们开始构建的底部标签示例中添加一些导航行为，以便导航菜单选项实际上可以执行某些操作：
- en: First, you'll need a `Fragment` class that you can use for the various navigation
    actions you'll have in the example. Right-click on your default package (that
    is, `com.packtpub.navigation`) and select New| Fragment| Fragment (blank).
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，你需要一个`Fragment`类，你可以用它来处理示例中的各种导航操作。在默认包（即`com.packtpub.navigation`）上右键单击，然后选择“新建|片段|片段（空白）”。
- en: Name the new `Fragment` class `PlaceholderFragment`.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的`Fragment`类命名为`PlaceholderFragment`。
- en: 'Deselect the Include fragment factory methods? and Include interface callbacks?
    checkboxes:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消选择“包含片段工厂方法？”和“包含接口回调？”复选框：
- en: '![](img/d71c0193-4cda-48e2-b826-842324acec0a.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d71c0193-4cda-48e2-b826-842324acec0a.png)'
- en: Click on Finish to create the new fragment class and layout file.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“完成”以创建新的片段类和布局文件。
- en: Open the `fragment_placeholder.xml` layout file in Design mode.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设计模式下打开`fragment_placeholder.xml`布局文件。
- en: Select the `FrameLayout` in the Component Tree panel.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件树面板中选择`FrameLayout`。
- en: In the Attributes panel, toggle to View all attributes.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性面板中，切换到查看所有属性。
- en: Find the `background` attribute, and set it to `#ffffff` (white) so that the
    background of this `Fragment` is opaque.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到`background`属性，并将其设置为`#ffffff`（白色），以便此`Fragment`的背景不透明。
- en: Select the `TextView` in the Component Tree panel.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件树面板中选择`TextView`。
- en: In the Attributes panel, change the ID attribute to `placeholder_text`.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性面板中，将ID属性更改为`placeholder_text`。
- en: Change the `textAppearance` attribute to `@style/TextAppearance.AppCompat.Display1`,
    which will appear in the drop-down as AppCompat.Display1.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`textAppearance`属性更改为`@style/TextAppearance.AppCompat.Display1`，它将在下拉菜单中显示为AppCompat.Display1。
- en: Now, open the new `PlaceholderFragment` Java source file.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开新的`PlaceholderFragment` Java源文件。
- en: 'Declare a `static` `String` constant to allow the `PlaceholderFragment` to
    hold its placeholder-text argument:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个`static` `String`常量，以便`PlaceholderFragment`可以保留其占位文本参数：
- en: '[PRE16]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Change the `onCreateView` method so that it sets the text of the `TextView`
    to the placeholder-text:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`onCreateView`方法修改为将`TextView`的文本设置为占位文本：
- en: '[PRE17]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create a convenience factory method to create the `PlaceholderFragment` with
    the placeholder-text specified as a method argument:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个便利的工厂方法来创建具有指定为方法参数的占位文本的`PlaceholderFragment`：
- en: '[PRE18]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Open the `activity_bottom_tabs.xml` layout resource in the Text editor.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开`activity_bottom_tabs.xml`布局资源。
- en: Find the `ViewPager` below the `BottomNavigationView` widget.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“BottomNavigationView”小部件下方找到`ViewPager`。
- en: 'Change the `ViewPager` so that it is wrapped in a full-size `FrameLayout` with
    an ID of `host`; this will be used to contain the `Fragment` instances used to
    navigate the user around the app:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`ViewPager`修改为被一个ID为`host`的全尺寸`FrameLayout`包裹；这将用于包含用于在应用中导航用户的各种`Fragment`实例：
- en: '[PRE19]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Open the `BottomTabsActivity` source file.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`BottomTabsActivity`源文件。
- en: 'When the user taps on one of the bottom navigation items, you want to ensure
    that any navigation they have done is cleared so that the back button doesn''t
    navigate them back into their previous stack, and ensure that there are no residual
    `Fragment` instances on the screen. In the `OnNavigationItemSelectedListener.onNavigationItemSelected`
    method in your anonymous class, you''ll want to pop the backstack, before telling
    the `ViewPager` to change tab:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户点击底部导航项之一时，你想要确保清除他们所做的任何导航，这样返回按钮就不会将他们导航回之前的堆栈，并确保屏幕上没有残留的`Fragment`实例。在你的匿名类中的`OnNavigationItemSelectedListener.onNavigationItemSelected`方法中，你想要在告诉`ViewPager`切换标签之前弹出回退栈：
- en: '[PRE20]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'At the bottom of the `onCreate` method, you need to add a new listener to the
    `NavigationView` to listen for the taps in the menu. These will trigger the navigation
    using the `FragmentManager`, and will also close the navigation drawer:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onCreate`方法的底部，你需要向`NavigationView`添加一个新的监听器来监听菜单中的点击。这些点击将触发使用`FragmentManager`的导航，并关闭导航抽屉：
- en: '[PRE21]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: As a bonus, the preceding code will also produce a lovely transition navigation
    between each of the navigation actions. It's also possible that you might want
    to clear the backstack each time the user takes one of these navigation actions.
    On top of that, you may also want to select specific tabs in the `BottomNavigationView`
    to indicate which part of the app the user is in, or you may want the `FrameLayout`
    to wrap the entire `ConstaintLayout` so that the bottom tabs vanish when the user
    is navigated using the `FragmentManager`.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 作为额外的好处，前面的代码还会在每个导航动作之间产生一个可爱的过渡导航。也许你还会想在用户执行这些导航动作时清除回退栈。除此之外，你可能还希望选择`BottomNavigationView`中的特定标签页来指示用户当前在应用中的哪个部分，或者你可能希望`FrameLayout`包裹整个`ConstaintLayout`，这样当用户使用`FragmentManager`进行导航时，底部标签页就会消失。
- en: It's important to note that in this structure, the other layouts and `Fragment`
    instances are still in the layout. They're just hidden by the `Fragment` instances
    being placed over them as the user navigates using the menu. To avoid this, you
    can wrap the `ViewPager` in a dedicated `Fragment` class, but it's important to
    add it to the layout through the `FragmentManager` in the `Activity.onCreate`
    method and not by using the `<fragment>` tag in the layout XML. The `FragmentManager`
    will only remove a `Fragment` from the layout if it was added via a `FragmentTransaction`
    in the first place.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，在这个结构中，其他布局和`Fragment`实例仍然在布局中。它们只是被放置在它们上面的`Fragment`实例隐藏了，因为用户使用菜单进行导航。为了避免这种情况，你可以将`ViewPager`包裹在一个专门的`Fragment`类中，但重要的是要通过在`Activity.onCreate`方法中使用`FragmentManager`而不是在布局XML中使用`<fragment>`标签将其添加到布局中。`FragmentManager`只会从布局中移除最初通过`FragmentTransaction`添加的`Fragment`。
- en: Test your knowledge
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的知识
- en: When using bottom tabs for navigation, which of these is important?
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当使用底部标签页进行导航时，以下哪个因素很重要？
- en: They all have single color icons
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们都有单色图标
- en: The tabs are of roughly equal importance
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签页的重要性大致相等
- en: There are always exactly three tabs
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总共有三个标签页
- en: Top tabs are preferred to bottom tabs in which of these situations?
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下哪种情况下，顶部标签页比底部标签页更受欢迎？
- en: When the user won't need to navigate as frequently
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当用户不需要频繁导航时
- en: When the tabs don't have icons
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当标签页没有图标时
- en: When there are more than three tabs
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当标签页超过三个时
- en: Fragments can be used for navigation in which of these cases?
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下哪种情况下可以使用片段进行导航？
- en: Only when a navigation drawer is used as well
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有当同时使用导航抽屉时
- en: Any time the user navigates within the application
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户在应用内导航的任何时候
- en: When they can be nested in a `FrameLayout`
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当它们可以嵌套在`FrameLayout`中时
- en: When the user selects an item in a navigation drawer, which of these is true?
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户在导航抽屉中选择一个项目时，以下哪个说法是正确的？
- en: The drawer needs to be closed by the user
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽屉需要由用户关闭
- en: The drawer should be closed programmatically
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽屉应该通过编程方式关闭
- en: The drawer is closed automatically after a short delay
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽屉在短暂延迟后自动关闭
- en: Summary
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Navigation is a critical part of a user's experience, and should be carefully
    thought out and designed. Material design has various different design structures
    and widgets to help you implement more effective navigation, but it's important
    to use them carefully and in the right place. As with any screen design, it's
    important to consider what the user will want to do most often, and to rank each
    possible action and navigation from the most important to the least on every screen
    they are available in.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 导航是用户体验的关键部分，应当仔细思考和设计。材料设计提供了各种不同的设计结构和组件，以帮助您实现更有效的导航，但重要的是要谨慎且恰当地使用它们。与任何屏幕设计一样，考虑用户最常想要执行的操作，并对每个可能的动作和导航从最重要的到最不重要的进行排序，在每个屏幕上都至关重要。
- en: In many applications, dedicated navigation components won't even be needed,
    and navigation will be achieved purely through goal-oriented actions from an overview
    screen or dashboard. In all instances, it's a good idea to draw up a navigation
    map ahead of time (even if it's incomplete or overly simplified). They will often
    tell you what sort of navigation structure and components your application will
    require.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多应用中，甚至可能不需要专门的导航组件，导航可以通过从概览屏幕或仪表板出发的目标导向动作来实现。在任何情况下，提前绘制一个导航图都是一个好主意（即使它是不完整或过于简化的）。它们通常会告诉您您的应用程序需要什么样的导航结构和组件。
- en: Navigation achieved using the `FragmentManager` instead of always launching
    a new `Activity` is an extremely powerful pattern. It offers a large number of
    additional options and significantly more control over the backstack, and even
    the animations played during each transition. It's also possible to change more
    than one onscreen `Fragment` in a single `FragmentTransaction`, which can be used
    to produce some amazing effects.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`FragmentManager`而不是始终启动新的`Activity`来实现的导航是一个极其强大的模式。它提供了大量的额外选项，并对backstack有显著更多的控制，甚至可以控制每个过渡期间播放的动画。还可能在单个`FragmentTransaction`中更改多个屏幕上的`Fragment`，这可以用来产生一些惊人的效果。
- en: In the next chapter, we'll go back to the travel claim example and explore some
    more of the `RecyclerView`. The chapter will take a look at some of the more advanced
    capabilities of the `RecyclerView` and how to integrate it with the `LiveData`
    class and Room using some powerful classes from the support API to achieve some
    exciting effects.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将回到旅行报销的例子，并探索一些关于`RecyclerView`的更多内容。本章将探讨`RecyclerView`的一些更高级的功能，以及如何使用支持API中的强大类将`RecyclerView`与`LiveData`类和Room集成，以实现一些令人兴奋的效果。
