- en: Chapter 8. Reaching a Wider Audience – Supporting Multiple Devices
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章. 扩大受众范围 – 支持多种设备
- en: Android is a mobile operating system that places very few restrictions on hardware.
    Manufacturers are free to create Android devices that are packed with high-end
    hardware such as DSLR-worthy cameras, huge internal memories, and lightning-fast
    CPUs; or they can create more budget-friendly devices that take a no-frills approach
    to hardware. Android screens can also come in all sorts of sizes, shapes, and
    screen densities.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Android是一个对硬件限制很少的移动操作系统。制造商可以自由地创建配备高端硬件的Android设备，如DSLR级别的相机、巨大的内部存储和闪电般的CPU；或者他们可以创建更经济实惠的设备，采用无装饰的硬件设计。Android屏幕也可以有各种尺寸、形状和屏幕密度。
- en: The only thing these devices have in common is that they all run the Android
    operating system—and even in this, Android smartphones and tablets are inconsistent.
    The current Android smartphone and tablet market is made up of lots of different
    versions of the Android operating system—from legacy versions, right through to
    the very latest release of Android. And even if two devices are running exactly
    the same version of Android, there's no guarantee that they'll be exactly the
    same, as manufacturers have a nasty habit of tweaking the Android operating system
    to come up with their own **original equipment manufacturer** (**OEM**) versions.
    A Samsung smartphone running Android 7.0 may not necessarily be the same as a
    Sony smartphone running Android 7.0.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这些设备唯一共同点就是它们都运行Android操作系统——即使在这一点上，Android智能手机和平板电脑也不一致。当前的Android智能手机和平板电脑市场由许多不同版本的Android操作系统组成，从遗留版本一直到最新的Android发布。即使两台设备运行的是完全相同的Android版本，也无法保证它们完全相同，因为制造商有修改Android操作系统的坏习惯，以推出他们自己的**原始设备制造商**（**OEM**）版本。运行Android
    7.0的三星智能手机可能并不一定与运行Android 7.0的索尼智能手机相同。
- en: This flexibility is great for manufacturers who can make their devices stand
    out from the competition by coming up with new and innovative hardware, software,
    and screen configurations. It's also good news for consumers who can shop around
    and find exactly the Android device that's right for them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这种灵活性对制造商来说是个好消息，他们可以通过推出新的和创新型的硬件、软件和屏幕配置，使他们的设备在竞争中脱颖而出。对消费者来说也是个好消息，他们可以四处寻找，找到最适合他们的Android设备。
- en: But is this good for developers? *Sort of*.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 但这对开发者来说好吗？*有点儿*。
- en: All these variations on hardware, software, and screen configuration mean lots
    of opportunities to innovate and come up with a truly original app. However, it
    also poses a massive challenge, as you'll need to create an app that provides
    a consistent experience across all the different hardware, software, and screen
    configurations that your app might encounter.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些关于硬件、软件和屏幕配置的变体意味着有很多机会进行创新并推出真正原创的应用。然而，这也带来了巨大的挑战，因为你需要创建一个能够在所有可能遇到的不同硬件、软件和屏幕配置上提供一致体验的应用。
- en: Unfortunately, there's no quick fix. Essentially, the key to creating a flexible
    UI is to provide a wide range of alternate resources that are optimized for all
    the different hardware, software, screen configurations, languages, and region
    settings that your app may encounter, which is arguably the most time-consuming
    part of Android app development.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，没有快速解决的办法。本质上，创建灵活用户界面的关键是提供一系列替代资源，这些资源针对所有可能遇到的不同硬件、软件、屏幕配置、语言和区域设置进行了优化，这可以说是Android应用开发中最耗时的一部分。
- en: In this chapter, I'm going to cover all the major aspects you need to bear in
    mind, if you're going to create a flexible app that's compatible with as many
    different Android devices as possible.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将涵盖你需要牢记的所有主要方面，如果你打算创建一个尽可能兼容多种不同Android设备的灵活应用。
- en: Supporting different versions of Android
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支持不同的Android版本
- en: While most new versions of the Android platform introduce exciting new features
    that you'll be desperate to use in your app, if you're going to reach the widest
    possible audience then you'll also need to support as many older versions of the
    Android platform as possible.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然大多数Android平台的新版本都引入了令人兴奋的新功能，你可能会迫不及待地在应用中使用它们，但如果你想要触及尽可能广泛的受众，那么你还需要尽可能支持尽可能多的旧版Android平台。
- en: This is a delicate balancing act. Supporting older versions of the Android platform
    takes time and effort, and the further you go, the harder you'll have to work
    to get your app playing nicely with older versions of Android.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个微妙的平衡行为。支持旧版Android平台需要时间和精力，而且你走得越远，就越需要努力才能让你的应用与旧版Android良好地协同工作。
- en: If you continue striving to support older and older versions of Android, at
    some point you'll inevitably find yourself compromising your app's UI, functionality,
    and general user experience as you encounter versions of Android that simply aren't
    powerful enough to support the kind of app you originally wanted to create. In
    our recipe app example, we're relying on the device being powerful enough to load
    multiple high-res images whenever the user performs a search. If the user is running
    an older version of the Android operating system, processing these images may
    cause the search results to load more slowly. Although the problem lies with the
    user's device, your typical Android user is far more likely to blame your app
    than their outdated smartphone or tablet.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你继续努力支持越来越旧的Android版本，在某个时候，你不可避免地会发现自己在遇到无法支持你最初想要创建的应用类型的Android版本时，不得不妥协你的应用的UI、功能以及整体用户体验。在我们的食谱应用示例中，我们依赖于设备足够强大，能够在用户进行搜索时加载多个高分辨率图片。如果用户运行的是较旧的Android操作系统版本，处理这些图片可能会导致搜索结果加载得更慢。尽管问题出在用户的设备上，但典型的Android用户更有可能责怪你的应用，而不是他们过时的智能手机或平板电脑。
- en: We could shrink the images or even remove them completely, but would you want
    to try a recipe when you hadn't even seen a photo of the finished product? At
    this point, you should take a step back and ask yourself whether all this time,
    effort, and compromise is really *worth it*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以缩小图片或甚至完全删除它们，但你愿意在没有看到成品照片的情况下尝试一个食谱吗？在这个时候，你应该退一步问问自己，所有这些时间和努力，以及妥协，是否真的*值得*。
- en: To identify the point at which supporting older versions of Android becomes
    more trouble than it's worth, you'll need to look at the current Android market—especially
    how many devices are running each version of the Android operating system. Once
    you have this information in front of you, you can make an informed decision about
    the point at which it no longer makes sense to keep supporting the older versions
    of Android.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定支持旧版Android何时变得比其价值更大，你需要查看当前的Android市场——特别是运行每个版本Android操作系统的设备数量。一旦你有了这些信息，你就可以做出明智的决定，关于何时继续支持旧版Android已不再有意义。
- en: One source of this information is Google's Dashboard ([http://developer.android.com/about/dashboards/index.html](http://developer.android.com/about/dashboards/index.html)),
    which gives you a percentage of the relative number of devices running each version
    of Android. Just be aware that this information is gathered in a very specific
    way. It's essentially a snapshot of all the devices that visited the Google Play
    store in the previous 7 days. This data is collected from the Google Play app,
    and is not necessarily representative of the current state of the entire Android
    market. It's also worth noting that the Google Play app is only compatible with
    Android 2.2 and higher, so any device running versions of Android lower than 2.2
    aren't included in this data; although according to Google way back in August
    2013, devices running versions lower than Android 2.2 only accounted for about
    1% of devices, so we're talking about a very small percentage here.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 获取这些信息的一个来源是谷歌的仪表板（[http://developer.android.com/about/dashboards/index.html](http://developer.android.com/about/dashboards/index.html)），它提供了运行每个版本Android的设备相对数量的百分比。但请注意，这些信息是以非常特定的方式收集的。这基本上是过去7天内访问谷歌Play商店的所有设备的快照。这些数据来自谷歌Play应用，并不一定代表整个Android市场的当前状态。还值得注意的是，谷歌Play应用仅与Android
    2.2及以上版本兼容，因此运行低于2.2版本的Android的设备不包括在这组数据中；尽管根据谷歌在2013年8月的数据，运行低于Android 2.2版本的设备仅占大约1%，所以我们这里谈论的是一个非常小的百分比。
- en: Spend some time exploring the Dashboard data, and come to a decision about which
    versions of Android you're going to support and which versions you aren't.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 花些时间探索仪表板数据，并决定你将支持哪些版本的Android，以及哪些版本你将不支持。
- en: Specifying minimum and target API levels
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指定最小和目标API级别
- en: 'Once you''ve decided what versions of Android you''re going to support, you
    need to include this information in your project. How you add this information
    will vary depending on the IDE you''re using, so you''ll need to open one of the
    following files:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你决定了要支持哪些版本的 Android，你需要在你的项目中包含这些信息。如何添加这些信息将取决于你使用的 IDE，因此你需要打开以下文件之一：
- en: Manifest file (Eclipse)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清单文件（Eclipse）
- en: Module-level `build.gradle` file (Android Studio)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块级别的 `build.gradle` 文件（Android Studio）
- en: We will discuss the components of this file in the next section.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节讨论这个文件的组成部分。
- en: minSdkVersion
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: minSdkVersion
- en: This attribute identifies the lowest API level that your app is compatible with,
    for example, `minSdkVersion 16`. Google Play will use your app's `minSdkVersion`
    attribute to determine whether a user can install it on device.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个属性标识了你的应用兼容的最低 API 级别，例如，`minSdkVersion 16`。Google Play 将使用你的应用的 `minSdkVersion`
    属性来确定用户是否可以在设备上安装它。
- en: When debating your app's `minSdkVersion` value, make sure you consult the Dashboard
    stats as this provides a snapshot of your potential audience. Ultimately, you'll
    need to decide whether supporting each additional slice of this audience is worth
    additional time and effort.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在考虑你的应用的 `minSdkVersion` 值时，确保你咨询仪表板统计信息，因为这提供了你潜在受众的快照。最终，你需要决定支持这个受众的每一部分额外的时间和工作是否值得。
- en: targetSdkVersion
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: targetSdkVersion
- en: This attribute identifies the highest API level that you've tested your app
    against.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个属性标识了你在测试你的应用时使用的最高 API 级别。
- en: The `targetSdkVersion` value is particularly important for forward compatibility,
    as the system won't apply any behavior changes introduced in new Android releases
    until you update your app's `targetSdkVersion` value. To ensure your app benefits
    from the latest Android features, you should aim to set your app's `targetSdkVersion`
    value to the very latest version of Android. Updating your app to target a new
    SDK should always be a high priority whenever Google release a new version of
    Android, but you should only do this after thoroughly testing your app against
    the latest SDK release. *Never* blindly update your `targetSdkVersion` value without
    testing it first.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`targetSdkVersion` 的值对于向前兼容性尤其重要，因为系统不会应用在新 Android 版本中引入的任何行为更改，直到你更新你的应用的
    `targetSdkVersion` 值。为了确保你的应用能够从最新的 Android 功能中受益，你应该将你的应用的 `targetSdkVersion`
    值设置为 Android 的最新版本。每当 Google 发布新的 Android 版本时，将你的应用更新为目标新的 SDK 应始终是最高优先级，但你应该在彻底测试你的应用与最新的
    SDK 版本兼容性之后才这样做。*永远不要*在没有测试的情况下盲目更新你的 `targetSdkVersion` 值。'
- en: Ideally your `targetSdkVersion` and `compileSdkVersion` value should always
    correspond to the very latest version of the Android SDK.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，你的 `targetSdkVersion` 和 `compileSdkVersion` 值应该始终与 Android SDK 的最新版本相对应。
- en: compileSdkVersion
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: compileSdkVersion
- en: This attribute tells Gradle what version of Android SDK it should compile your
    app with.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这个属性告诉 Gradle 应该使用哪个版本的 Android SDK 来编译你的应用。
- en: Your `compileSdkVersion` value is not included in your published APK; it's purely
    used at compile time. Changing your `compileSdkVersion` value does *not* change
    the runtime behavior, so it's recommended you always compile with the latest SDK.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 `compileSdkVersion` 值不包括在你的发布 APK 中；它仅用于编译时。更改你的 `compileSdkVersion` 值不会改变运行时行为，因此建议你始终使用最新的
    SDK 进行编译。
- en: Check version at runtime
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行时检查版本
- en: Sometimes, you'll have a clear cut-off point where it makes sense for your app
    to stop supporting earlier versions of Android, but this line may not always be
    so clear cut.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，你会有一个明确的截止点，对于你的应用停止支持更早版本的 Android 来说是合理的，但这条线可能并不总是那么明确。
- en: Imagine your app includes a non-essential feature that isn't supported on Android
    5.0 and earlier versions, but apart from this feature, your app is compatible
    with earlier versions of Android. Since this Marshmallow-and-higher feature isn't
    essential, it doesn't make sense to prevent everyone running Android 5.0 or earlier
    versions from installing your app. In this scenario, you can disable this feature
    by ensuring any code that depends on higher API levels is only executed when these
    APIs are available. Basically, this feature won't be available to users who are
    running Android 5.0 or a lower version, but these users will still be able to
    install and use your app.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你的应用包含一个在Android 5.0及更早版本上不受支持的辅助功能，但除了这个功能外，你的应用与更早版本的Android兼容。由于这个Marshmallow及以上版本的功能不是必需的，阻止运行Android
    5.0或更早版本的设备用户安装你的应用是没有意义的。在这种情况下，你可以通过确保任何依赖于更高API级别的代码仅在相关API可用时执行来禁用此功能。基本上，运行Android
    5.0或更低版本的用户的设备将无法使用此功能，但这些用户仍然可以安装并使用你的应用。
- en: 'You achieve this using the `Build` constants class to specify when the related
    code should run; for example, the following code verifies whether your app is
    running on Lollipop or a higher version:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用`Build`常量类来指定相关代码何时运行来实现这一点；例如，以下代码验证你的应用是否运行在Lollipop或更高版本：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Android provides a unique code for each platform version, which you should use
    alongside the `Build` constants class (in this example, the code is `LOLLIPOP`).
    You'll find a complete list of these codes at the official Android docs ([http://developer.android.com/reference/android/os/Build.VERSION_CODES.html](http://developer.android.com/reference/android/os/Build.VERSION_CODES.html)).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Android为每个平台版本提供唯一的代码，你应该与`Build`常量类（在这个例子中，代码是`LOLLIPOP`）一起使用。你可以在官方Android文档中找到这些代码的完整列表（[http://developer.android.com/reference/android/os/Build.VERSION_CODES.html](http://developer.android.com/reference/android/os/Build.VERSION_CODES.html)）。
- en: Supporting different screens
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支持不同屏幕
- en: Android devices come in many different shapes and sizes. Your task, as a developer,
    is to create a UI that looks just as good on the small space available to a budget-friendly
    smartphone, as it does on the large space available to a top-of-the-line Android
    tablet and everything in between.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Android设备形状和尺寸各异。作为开发者，你的任务是创建一个UI，使其在小屏幕的预算友好型智能手机上看起来和在大屏幕的顶级Android平板电脑上一样好，以及介于两者之间的所有设备。
- en: 'So let''s break it down. Android categorizes screens in two ways:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们来分解一下。Android以两种方式对屏幕进行分类：
- en: '**Screen sizes**: Traditionally, Android supported four generalized screen
    sizes: `small`, `normal`, `large`, and `xlarge`. However, Android 3.2 (API level
    13) introduced some new configuration qualifiers that allow you to be more specific
    about screen sizes.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**屏幕尺寸**：传统上，Android支持四种通用屏幕尺寸：`small`、`normal`、`large`和`xlarge`。然而，Android
    3.2（API级别13）引入了一些新的配置限定符，允许你更具体地指定屏幕尺寸。'
- en: '**Screen densities**: A device''s screen density is a combination of its resolution
    and display size, and is measured in **dots per inch** (**dpi**). The higher a
    device''s dpi, the smaller each individual pixel, which means greater clarity
    and more detail per inch. Android supports six generalized densities: low (`ldpi`),
    medium (`mdpi`), high (`hdpi`), extra high (`xhdpi`), extra-extra-high (`xxhdpi`),
    and extra-extra-extra-high (`xxxhdpi`).'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**屏幕密度**：设备的屏幕密度是其分辨率和显示尺寸的组合，以每英寸点数（**dpi**）来衡量。设备的dpi越高，每个单独的像素越小，这意味着每英寸的清晰度和细节越多。Android支持六种通用密度：低（`ldpi`）、中（`mdpi`）、高（`hdpi`）、超高（`xhdpi`）、超超高（`xxhdpi`）和超超超高（`xxxhdpi`）。'
- en: You can anticipate that your app will be installed on devices spanning a wide
    range of screen sizes and densities. And you should aim high; it's not good enough
    for your app to be compatible with these different screen configurations, you
    should give users the impression that your app was designed specifically for their
    particular screen, whatever size and density that screen happens to be.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以预期你的应用将被安装在屏幕尺寸和密度各不相同的设备上。你应该有更高的目标；仅仅让你的应用兼容这些不同的屏幕配置是不够的，你应该让用户感觉到你的应用是专门为他们的特定屏幕设计的，无论屏幕的大小和密度如何。
- en: In this section, I'll show you how to create an app that can handle a wide range
    of different sizes and densities. The underlying theme you'll encounter time and
    time again is that your app's layout and drawables must render at a size that's
    appropriate for the current screen. The Android system is clever enough to handle
    most of this rendering work automatically, and it will scale your layouts and
    resources to fit the current size and density, but you shouldn't rely on the Android
    system to do all the hard work for you.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我将向您展示如何创建一个能够处理广泛不同尺寸和密度的应用。您将不断遇到的一个基本主题是，您的应用布局和可绘制资源必须以适合当前屏幕的尺寸进行渲染。Android
    系统足够智能，可以自动处理大部分渲染工作，并将布局和资源缩放到适合当前尺寸和密度，但您不应依赖 Android 系统为您完成所有艰苦的工作。
- en: Android's automatic rendering alone won't provide the best possible user experience.
    You'll need to give it a hand by providing multiple versions of your app's resources
    that are optimized for different screen sizes and densities. These resources could
    be strings, layouts, graphics, or any other static resources that your app requires.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 仅靠 Android 的自动渲染无法提供最佳的用户体验。您需要提供多个版本的资源，这些资源针对不同的屏幕尺寸和密度进行了优化。这些资源可以是字符串、布局、图形或任何其他您的应用所需的静态资源。
- en: To add these resources to your project, you'll need to create alternate versions
    of your project's directories, and then tag them with the correct configuration
    qualifiers; for example, if you have a layout that's optimized for landscape orientation,
    you'll need to create a `res/layout-land` directory, and then place your landscape
    layout file inside this directory. Then, when a user runs your app, the Android
    system will automatically load the resource that best matches the current screen
    configuration, whether that's the default layout or your landscape-optimized `res/layout-land`
    layout.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要将这些资源添加到您的项目中，您需要创建项目目录的替代版本，并使用正确的配置限定符进行标记；例如，如果您有一个针对横向布局优化的布局，您需要创建一个 `res/layout-land`
    目录，然后将您的横向布局文件放置在这个目录中。然后，当用户运行您的应用时，Android 系统将自动加载与当前屏幕配置最匹配的资源，无论是默认布局还是您的横向优化布局
    `res/layout-land`。
- en: Configuration qualifiers
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置限定符
- en: Android supports a wide range of configuration qualifiers that you can append
    to your project's resource directories. These configuration qualifiers are the
    key to controlling which version of a resource the system displays.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Android 支持一系列配置限定符，您可以将这些限定符附加到项目的资源目录中。这些配置限定符是控制系统显示资源版本的关键。
- en: Configuration qualifiers specify the characteristics that a resource was designed
    for, such as an image that was designed for a particular screen size or screen
    density. You'll find a complete list of valid configuration qualifiers in the
    official Android docs, specifically **Table 2** of the **Providing Resources**
    page ([http://developer.android.com/guide/topics/resources/providing-resources.html#AlternativeResources](http://developer.android.com/guide/topics/resources/providing-resources.html#AlternativeResources)).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 配置限定符指定了资源是为哪些特性设计的，例如为特定屏幕尺寸或屏幕密度设计的图像。您可以在官方 Android 文档中找到有效配置限定符的完整列表，具体为
    **“提供资源”页面中的表 2** ([http://developer.android.com/guide/topics/resources/providing-resources.html#AlternativeResources](http://developer.android.com/guide/topics/resources/providing-resources.html#AlternativeResources))。
- en: The configuration qualifiers you'll need to use will vary depending on your
    app and the kind of devices you're targeting, but as a minimum, you'll typically
    use size, density, and screen orientation qualifiers to provide drawable resources
    and layouts that are optimized for different screen configurations.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要使用的配置限定符将根据您的应用和目标设备类型而有所不同，但作为最低要求，您通常使用尺寸、密度和屏幕方向限定符来提供针对不同屏幕配置优化的可绘制资源和布局。
- en: 'To use a configuration qualifier, create a new directory in your project''s
    `res/` directory and name it using the following format:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用配置限定符，在您的项目 `res/` 目录中创建一个新的目录，并使用以下格式命名：
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: So, if you were creating a directory to hold layouts that were optimized for
    devices held in landscape mode, you'd use the `land` qualifier and create a `res/layout-land`
    directory, then place your layout-optimized layouts inside this directory.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您正在创建一个用于存放针对横向模式手持设备优化的布局的目录，您将使用 `land` 限定符并创建一个 `res/layout-land` 目录，然后将您的布局优化布局放置在这个目录中。
- en: Note
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Never place any resources directly inside your project's `res/` directory as
    this will cause a compiler error. You also cannot nest alternative resources,
    so you cannot create a `res/drawable/drawable-xxhdpi/` directory.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 永远不要将任何资源直接放置在项目`res/`目录中，因为这会导致编译器错误。您也不能嵌套替代资源，因此您不能创建一个`res/drawable/drawable-xxhdpi/`目录。
- en: You can use more than one qualifier at a time by separating each qualifier with
    a dash; for example, a `res/drawable-en-hdpi` directory would contain drawable
    resources that are designed for devices set to the English language (`en`) with
    a screen density that falls into the high-density bucket. If you do use multiple
    qualifiers, the order they appear in your directory name is crucial. They must
    appear in the same order as in the **Providing Resources** page ([http://developer.android.com/guide/topics/resources/providing-resources.html#AlternativeResources](http://developer.android.com/guide/topics/resources/providing-resources.html#AlternativeResources)).
    If you use qualifiers in the wrong order, the Android system won't recognize the
    directory, and will subsequently ignore all the resources that it contains.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以同时使用多个限定符，通过破折号分隔每个限定符；例如，一个`res/drawable-en-hdpi`目录将包含为设置为英语语言（`en`）且屏幕密度属于高密度范围的设备设计的可绘制资源。如果您确实使用了多个限定符，它们在目录名称中出现的顺序至关重要。它们必须与在**提供资源**页面（[http://developer.android.com/guide/topics/resources/providing-resources.html#AlternativeResources](http://developer.android.com/guide/topics/resources/providing-resources.html#AlternativeResources)）中出现的顺序相同。如果您以错误的顺序使用限定符，Android系统将无法识别该目录，并随后忽略它包含的所有资源。
- en: Don't worry about the case you use for your directory names, as the resource
    compiler converts directory names into lowercase before processing anyway. If
    your project includes directories with long-winded names consisting of multiple
    configuration qualifiers, then you may want to take advantage of this automatic
    conversion, and use capitalization to make your directory names easier to read.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您无需担心目录名称的大小写，因为资源编译器在处理之前会将目录名称转换为小写。如果您的项目包含由多个配置限定符组成的冗长名称的目录，那么您可能想利用这种自动转换，并使用大写字母来使目录名称更容易阅读。
- en: Naming is also important for the resources that you place inside your directories.
    When you create multiple versions of the same resource, they must all have exactly
    the same name as the default resource. Any variation and the Android system won't
    recognize them as alternate versions of the same resource.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对您放置在目录中的资源进行命名也很重要。当您创建同一资源的多个版本时，它们必须与默认资源具有完全相同的名称。任何变化，Android系统都不会将其识别为同一资源的替代版本。
- en: Note
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If your project contains resources that the system should *never* scale to suit
    the current screen configuration, place these resources in a directory with the `nodpi`
    configuration qualifier, for example, `res/drawable-nodpi`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的项目包含系统不应根据当前屏幕配置进行缩放的资源，请将这些资源放置在具有`nodpi`配置限定符的目录中，例如，`res/drawable-nodpi`。
- en: How Android selects the perfect resource
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Android如何选择最佳资源
- en: When your app features multiple versions of the same resource, the Android system
    follows a strict set of rules when deciding which version it should display at
    runtime.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的应用具有同一资源的多个版本时，Android系统在运行时决定显示哪个版本时遵循一套严格的规则。
- en: When the Android system is looking for a resource based on the screen size or
    density, it starts by searching for an exact match that it can display without
    scaling. If it can't find a suitable size or the density-specific version, then
    Android switches to plan *B* and searches for a version that's designed for screens
    smaller than the current screen.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当Android系统根据屏幕大小或密度查找资源时，它首先搜索一个无需缩放即可显示的精确匹配项。如果找不到合适的大小或密度特定的版本，Android将切换到计划*B*并搜索为屏幕尺寸小于当前屏幕设计的版本。
- en: If the only available resources are larger than the current screen, the system
    will use the default version of the resource instead. The Android system assumes
    that your project's default resources are designed for the baseline screen size
    and density, which is a `normal` size and medium-density. Therefore, the system
    scales default resources up for high-density or larger screens, and down for low-density
    screens.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可用的资源比当前屏幕大，系统将使用资源的默认版本。Android系统假设您的项目默认资源是为基准屏幕大小和密度设计的，这是一个`normal`大小和中等密度。因此，系统将默认资源向上缩放以适应高密度或更大的屏幕，向下缩放以适应低密度屏幕。
- en: If the system can't find a suitable density-specific resource, or even a default
    version of the required resource, then your app will crash—which is why it's essential
    that you provide a default version of *every* resource.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果系统找不到合适的密度特定资源，甚至找不到所需资源的默认版本，那么你的应用将会崩溃——这就是为什么提供每个资源的默认版本是至关重要的。
- en: Even if you're confident that you've provided all the alternative resources
    your project could ever need, it's possible that your app may wind up on a device
    that has hardware, software, screen size, screen density, or language settings
    that you hadn't anticipated and therefore didn't provide specific resources for.
    In this scenario, the system may fall back on your project's default resources,
    and if your app doesn't include these default resources, then your app will crash.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你确信你已经提供了你项目可能需要的所有替代资源，你的应用也可能最终运行在一个具有你未曾预料到的硬件、软件、屏幕尺寸、屏幕密度或语言设置的设备上，因此你没有为这些特定资源提供具体资源。在这种情况下，系统可能会回退到你的项目默认资源，如果你的应用不包括这些默认资源，那么你的应用将会崩溃。
- en: Note
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Default resources are all the resources that are stored in a directory without
    a configuration qualifier, such as `res/drawable`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 默认资源是指存储在没有任何配置限定符的目录中的所有资源，例如`res/drawable`。
- en: Creating alias resources
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建别名资源
- en: Sometimes, you'll have a resource that's suitable for more than one configuration
    qualifier; for example, you might have a drawable that you want to add to both
    your project's `res/drawable-hdpi` and `res/drawable-xhdpi` directories.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，你会有一个适合多个配置限定符的资源；例如，你可能有一个想要添加到你的项目的`res/drawable-hdpi`和`res/drawable-xhdpi`目录中的drawable。
- en: Note
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can't create a directory that uses multiple configuration qualifiers of
    the same type, so it's not possible to create a `res/drawable-hdpi-xhdpi` directory.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你不能创建使用相同类型多个配置限定符的目录，因此不可能创建`res/drawable-hdpi-xhdpi`目录。
- en: You could copy/paste the resource so that it appears in both directories; but
    this isn't very efficient, plus duplicating resources increases the size of your
    project, which is bad news for your end users. The best solution is to use an
    **alias**.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以复制/粘贴资源，使其出现在两个目录中；但这并不高效，而且重复资源会增加你项目的大小，这对你的最终用户来说是个坏消息。最好的解决方案是使用**别名**。
- en: Imagine you have a `scene.png` drawable that you want to use for both `hdpi`
    and `xhdpi` screens; this is the perfect opportunity to use an alias. In this
    scenario, you need to place the default version inside your project's `res/drawable`
    folder as normal. Then, save the version of the image you want to use for `hdpi`
    and `xhdpi` screens inside the `res/drawable` folder, but give it a different
    name to the default resource, for example, `scenery_alias.png`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个`scene.png` drawable，你想要在`hdpi`和`xhdpi`屏幕上使用；这是一个使用别名的完美机会。在这种情况下，你需要将默认版本放在你的项目的`res/drawable`文件夹中，就像平常一样。然后，将你想要用于`hdpi`和`xhdpi`屏幕的图像版本保存在`res/drawable`文件夹中，但给它一个与默认资源不同的名字，例如`scenery_alias.png`。
- en: 'At this point, you have two drawables:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你有两个drawable：
- en: '`res/drawable/scenery.png`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`res/drawable/scenery.png`'
- en: '`res/drawable/scenery_alias.png`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`res/drawable/scenery_alias.png`'
- en: 'Next, create an XML file inside both of the density-specific directories. Inside
    these XML files, add some code that points toward your project''s `res/drawable/scenery_alias.png`
    resource:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在两个密度特定目录中创建一个XML文件。在这些XML文件中，添加一些指向你的项目`res/drawable/scenery_alias.png`资源的代码：
- en: '[PRE2]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When the Android system tries to load the scenery resource from `res/drawable-hdpi`
    or `res/drawable-xhdpi`, it'll recognize the alias and display `res/drawable/scenery_alias.png`
    instead. In this way, you can replace memory-hogging and inefficient duplicate
    resources with small XML files.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当Android系统尝试从`res/drawable-hdpi`或`res/drawable-xhdpi`加载场景资源时，它会识别别名并显示`res/drawable/scenery_alias.png`。这样，你可以用小的XML文件替换内存占用大且效率低下的重复资源。
- en: 'You can also use the alias function to reuse the same layout resource files
    in multiple directories, as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用别名功能在多个目录中重用相同的布局资源文件，如下所示：
- en: Create a default layout (`main.xml`), and place it in your project's `res/layout`
    directory.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个默认布局（`main.xml`），并将其放置在你的项目的`res/layout`目录中。
- en: Create the layout you want to use across multiple directories. Give this layout
    a different name to the default layout (I'm going to use `main_alias.xml`), and
    place it inside your project's `res/layout` directory.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建你想要在多个目录中使用的布局。给这个布局一个与默认布局不同的名字（我将使用`main_alias.xml`），并将其放置在你的项目的`res/layout`目录中。
- en: Create XML files in all the directories where you want to use the `layout_alias.xml`
    file.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你想要使用 `layout_alias.xml` 文件的所有目录中创建 XML 文件。
- en: 'Add some XML code that references `layout_alias.xml`:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一些引用 `layout_alias.xml` 的 XML 代码：
- en: '[PRE3]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Although less commonly used, you can also create aliases for strings and other
    simple values, as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不太常用，但你也可以为字符串和其他简单值创建别名，如下所示：
- en: '[PRE4]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In this example, `highlightColor` is now an alias for `yellow`. You can also
    create aliases for strings:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`highlightColor` 现在是 `yellow` 的别名。你还可以为字符串创建别名：
- en: '[PRE5]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this example, `appTitle` is now an alias for `title`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`appTitle` 现在是 `title` 的别名。
- en: Screen density
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 屏幕密度
- en: When designing your UI, you should aim to achieve **density independence**.
    This is where the Android system preserves the physical size of your UI elements
    across screens with different densities.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计你的 UI 时，你应该力求实现 **密度独立性**。这就是 Android 系统在不同密度的屏幕上保持你的 UI 元素物理大小不变的地方。
- en: Density independence is *crucial* to providing a good user experience. A high-density
    screen has more pixels per inch, which means the same amount of pixels fits into
    a smaller area. Low-density screens have less pixels, so the same amount of pixels
    fits into a much larger area. If you use absolute units of measure, such as specifying
    UI elements in pixels, then your UI elements are going to appear larger on low-density
    screens and smaller on high-density screens.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 密度独立性对于提供良好的用户体验至关重要。高密度屏幕每英寸像素更多，这意味着相同数量的像素可以适应更小的区域。低密度屏幕像素较少，因此相同数量的像素可以适应更大的区域。如果你使用绝对单位进行测量，例如指定
    UI 元素为像素，那么你的 UI 元素在低密度屏幕上会显得更大，在高密度屏幕上会显得更小。
- en: Note
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It's a common misconception that devices with the same screen resolution automatically
    have the same screen density. Even if two devices have the same screen resolution,
    these screens may be different sizes. This means the screens are displaying their
    content in a different amount of space, which equates to a different number of
    dpi.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 人们普遍认为，具有相同屏幕分辨率的设备自动具有相同的屏幕密度。即使两个设备具有相同的屏幕分辨率，这些屏幕可能尺寸不同。这意味着屏幕在显示内容时占据的空间不同，这相当于不同的
    dpi 数量。
- en: If your UI elements change sizes on different devices, then this is going to
    lead to problems in your layout and usability issues, and this will make for a
    generally poor user experience.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的 UI 元素在不同设备上改变大小，那么这可能会导致布局问题以及可用性问题，这将导致用户体验普遍较差。
- en: In most cases, you can ensure density independence by specifying your layout
    dimensions in density-independent pixels, and by replacing static, hardcoded sizes
    with more flexible elements such as `"wrap_content"` and `"match_parent"`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，你可以通过指定你的布局尺寸为密度无关像素，并通过用更灵活的元素（如 `"wrap_content"` 和 `"match_parent"`）替换静态、硬编码的大小来确保密度独立性。
- en: When it comes to drawables, Android automatically scales each drawable based
    on the current screen's density, so your drawables render at the appropriate physical
    size for the current device. However, this automatic scaling can result in blurry
    or pixelated images. To make sure your drawables look their very best, you need
    to create alternate versions of each drawable, which are optimized for different
    screen densities.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到可绘制资源时，Android 会根据当前屏幕的密度自动缩放每个可绘制资源，因此你的可绘制资源将以适合当前设备的适当物理大小渲染。然而，这种自动缩放可能会导致模糊或像素化的图像。为了确保你的可绘制资源看起来尽可能好，你需要为每个可绘制资源创建不同的版本，这些版本针对不同的屏幕密度进行了优化。
- en: The problem is that the Android marketplace includes more screen densities than
    you could *ever* hope to support; and even if you could, providing so many alternate
    drawables would cause the size of your project to balloon out of control, to the
    point where it's unlikely it'd even fit onto your average Android smartphone or
    tablet.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于 Android 市场包含了比你希望支持的屏幕密度更多的种类；即使你能做到，提供如此多的备用可绘制资源会导致你的项目大小失控，以至于它可能连普通的
    Android 智能手机或平板电脑都放不下。
- en: 'This is why Android groups screen densities into the following generalized
    **density buckets**:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 正是因为这个原因，Android 将屏幕密度分为以下几种通用的 **密度桶**：
- en: '`ldpi` (low-density): 120dpi'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ldpi`（低密度）：120dpi'
- en: '`mdpi` (medium-density): 160dpi'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mdpi`（中等密度）：160dpi'
- en: '`hdpi` (high-density): 240dpi'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hdpi`（高密度）：240dpi'
- en: '`xhdpi` (extra-high-density): 320dpi'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xhdpi`（超高密度）：320dpi'
- en: '`xxhdpi` (extra-extra-high-density): 480dpi'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xxhdpi`（超高清密度）：480dpi'
- en: '`xxxhdpi` (extra-extra-extra-high-density): 640dpi'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xxxhdpi`（超超高清密度）：640dpi'
- en: The first step to a flexible layout is to create a directory for each of these
    density buckets, for example, `res/drawable-ldpi`, `res/drawable-mdpi`, and so
    on. Then, just create a version of each resource that targets these different
    density buckets, and the Android system will handle the rest.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 可变布局的第一步是为这些密度桶中的每一个创建一个目录，例如，`res/drawable-ldpi`，`res/drawable-mdpi`，等等。然后，只需为这些不同的密度桶创建每个资源的版本，Android系统将处理其余部分。
- en: To create optimized drawables for each density bucket, you need to apply the
    3:4:6:8:12:16 scaling ratio across the six generalized densities. For the best
    results, start by creating a version of the image at the largest supported density,
    and then scale this graphic down proportionally for each subsequent density bucket.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为每个密度桶创建优化的可绘制资源，你需要将3:4:6:8:12:16的缩放比例应用于六个通用密度。为了获得最佳效果，首先创建一个最大支持密度的图像版本，然后按比例缩小每个后续密度桶的图形。
- en: Note
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Most of the time, creating a graphic at the largest supported density means
    creating an image for the `xxhdpi` density bucket and *not* the `xxxhdpi` bucket.
    This is because the `xxxhdpi` directory is reserved for launcher icons.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，创建最大支持密度的图形意味着为`xxhdpi`密度桶创建一个图像，而不是`xxxhdpi`桶。这是因为`xxxhdpi`目录是为启动器图标保留的。
- en: Converting dpi into pixels and vice versa
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将dpi转换为像素和反之亦然
- en: Since different screens have different pixel densities, the same number of pixels
    will translate into different physical sizes on different devices. Pixels aren't
    a density-independent unit of measurement, so 40 pixels isn't the same size on
    every device.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 由于不同屏幕的像素密度不同，相同数量的像素在不同设备上会转换为不同的物理尺寸。像素不是密度无关的单位，所以40像素在每台设备上的大小并不相同。
- en: 'For this reason, you should never use absolute pixels to define distances or
    sizes. Occasionally, you may need to convert dpi values into pixel values and
    vice versa. You do this using the following formula: *dpi = (width in pixels *
    160) / screen density*.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你不应该使用绝对像素来定义距离或大小。偶尔，你可能需要将dpi值转换为像素值，反之亦然。你可以使用以下公式来完成：*dpi = (像素宽度 * 160)
    / 屏幕密度*。
- en: Note
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Android uses `mdpi` (160dpi) as its baseline density where one pixel neatly
    equates to one density-independent pixel. This is where the 160 value in the formula
    comes from.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Android使用`mdpi`（160dpi）作为其基准密度，其中每个像素正好等于一个密度无关像素。这就是公式中的160值来源。
- en: 'Let''s try this with some numbers:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一些数字试一试：
- en: '[PRE6]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You may also want to use an online converter ([http://jennift.com/dpical.html](http://jennift.com/dpical.html))
    to play around with dpi values.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还想使用在线转换器([http://jennift.com/dpical.html](http://jennift.com/dpical.html))来玩转dpi值。
- en: 'If you want to convert a dpi value into pixels, then use the following formula:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要将dpi值转换为像素，那么使用以下公式：
- en: '[PRE7]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'For example, take a look at the following:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，看看以下内容：
- en: '[PRE8]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Providing different layouts for different screen sizes
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为不同屏幕尺寸提供不同的布局
- en: Android supports a wide range of screen sizes, and it automatically resizes
    your UI to fit the current screen. As I've already mentioned, you shouldn't rely
    on the Android system to do all the hard work for you, as this autoscaling often
    doesn't make the best use of the space available on larger screens, particularly
    tablet-sized devices.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Android支持广泛的屏幕尺寸，并且它会自动调整你的UI以适应当前屏幕。正如我已经提到的，你不应该依赖Android系统为你完成所有艰苦的工作，因为这种自动缩放通常无法充分利用大屏幕上可用的空间，尤其是在平板尺寸的设备上。
- en: If you thoroughly test your app across a range of different screen sizes using
    the emulator and multiple **Android Virtual Devices** (**AVDs**), you may encounter
    your app struggling to display or function correctly on certain screens. For example,
    you may discover that Android's automatic scaling makes your UI look cramped once
    the device's screen dips below a certain dpi value; or at the other end of the
    scale, you may find that your UI has large areas of empty space on larger, tablet-sized
    screens.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用模拟器和多个**Android虚拟设备**（**AVDs**）彻底测试你的应用，你可能会遇到你的应用在某些屏幕上难以显示或正确运行的情况。例如，你可能会发现，当设备的屏幕密度低于某个dpi值时，Android的自动缩放会使你的UI看起来拥挤；或者，在另一端，你可能会发现你的UI在大屏幕的平板尺寸屏幕上有大片空白区域。
- en: If your UI is having problems with certain screen sizes, you should create layouts
    that are optimized for these screens.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的UI在特定屏幕尺寸上存在问题，你应该创建针对这些屏幕优化的布局。
- en: 'The process for providing alternate layouts is the same as providing any alternate
    resource: create directories that have the appropriate configuration qualifiers.
    Then, create layout resource files that are optimized for specific screen sizes,
    and make sure these layouts have the same name as the corresponding default layout.
    The Android system will then select the appropriate layout based on the current
    screen configuration.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 提供备用布局的过程与提供任何备用资源的过程相同：创建具有适当配置限定符的目录。然后，创建针对特定屏幕尺寸优化的布局资源文件，并确保这些布局与相应的默认布局具有相同的名称。Android
    系统将根据当前的屏幕配置选择适当的布局。
- en: However, the screen size configuration qualifiers aren't as straightforward
    as the density configuration qualifiers, as Android 3.2 introduced some new configuration
    qualifiers that allow you to define the specific width and/or height required
    by each of your layouts, in dpi units. These new configuration qualifiers give
    you greater control over your resources, but they are a bit more difficult to
    get your head around.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，屏幕尺寸配置限定符并不像密度配置限定符那样简单直接，因为 Android 3.2 引入了一些新的配置限定符，允许你以 dpi 单位定义每个布局所需的具体宽度和/或高度。这些新的配置限定符为你提供了对资源的更多控制，但它们可能稍微难以理解。
- en: Note
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Prior to version 3.2, Android supported screen-size groups: `small`, `normal`, `large`,
    and `xlarge`. In order to accommodate a greater variety of screen sizes, the Android
    team replaced these groups with new configuration qualifiers. This chapter focuses
    on the new configuration qualifiers, but if you want to find out more about the
    now-deprecated screen size groups, you can find more information at the official
    Android docs at ([http://developer.android.com/guide/practices/screens_support.html](http://developer.android.com/guide/practices/screens_support.html)).'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 3.2 之前，Android 支持屏幕尺寸分组：`small`、`normal`、`large` 和 `xlarge`。为了适应更多种类的屏幕尺寸，Android
    团队用新的配置限定符替换了这些分组。本章重点介绍新的配置限定符，但如果你想了解更多关于现在已弃用的屏幕尺寸分组的信息，你可以在官方 Android 文档中找到更多信息，请参阅([http://developer.android.com/guide/practices/screens_support.html](http://developer.android.com/guide/practices/screens_support.html))。
- en: These powerful new qualifiers are discussed in the next sections.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这些强大的新限定符将在下一节中讨论。
- en: smallestWidth – sw<N>dp
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最小宽度 – sw<N>dp
- en: As the name suggests, you use the `smallestWidth` qualifier to define the minimum
    width in dpi that must be available before the Android system can use a particular
    layout. For example, if your layout requires a minimum of 700dpi, the `smallestWidth`
    configuration qualifier would be `sw700dp`. In this scenario, you'd create a `res/layout-sw700dp`
    directory and place your layout inside. The system will only use this layout when
    the current device has at least 700dpi of available width.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，你使用 `smallestWidth` 限定符来定义在 Android 系统可以使用特定布局之前必须可用的最小宽度（以 dpi 为单位）。例如，如果你的布局需要至少
    700dpi 的最小宽度，则 `smallestWidth` 配置限定符将是 `sw700dp`。在这种情况下，你将创建一个 `res/layout-sw700dp`
    目录并将你的布局放在里面。系统只有在当前设备至少有 700dpi 的可用宽度时才会使用此布局。
- en: This qualifier is particularly useful as width is often a major factor when
    designing your layouts. Many apps scroll vertically, but it's pretty rare to encounter
    a UI that scrolls horizontally. Most apps have strict constraints about the minimum
    space they need horizontally, and this configuration qualifier gives you a way
    of specifying that minimum as a dpi value.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这个限定符特别有用，因为宽度在设计布局时通常是一个重要因素。许多应用是垂直滚动的，但水平滚动的 UI 很少见。大多数应用对它们在水平方向上需要的最小空间有严格的要求，而这个配置限定符为你提供了一种以
    dpi 值指定这个最小值的方法。
- en: A device's width is a fixed characteristic that doesn't change when the user
    switches between portrait and landscape mode. The user's perception of their screen's
    width and height may change, but the system's perception of a device's `smallestWidth`
    never does, even when users switch their device from portrait to landscape mode
    and vice versa.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 设备的宽度是一个固定特性，当用户在纵向和横向模式之间切换时不会改变。用户对屏幕宽度和高度的感觉可能会改变，但系统对设备 `smallestWidth`
    的感知永远不会改变，即使用户将设备从纵向模式切换到横向模式，反之亦然。
- en: Available screen width – w<N>dp
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可用屏幕宽度 – w<N>dp
- en: Sometimes, your app may need to react to how much width or height is currently
    available, which means taking the device's current orientation into consideration.
    For example, imagine your UI has the option to display two fragments side by side
    in a multi-pane layout. If the user is viewing your app in landscape mode, it
    makes sense to display the multi-pane layout, but as soon as the user switches
    the device into portrait mode, there may no longer be enough width available to
    display these fragments side by side.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你的应用可能需要响应当前可用的宽度或高度，这意味着需要考虑设备的当前方向。例如，想象一下你的UI有一个选项在多面板布局中并排显示两个片段。如果用户正在以横向模式查看你的应用，显示多面板布局是有意义的，但一旦用户将设备切换到纵向模式，可能就不再有足够的宽度来并排显示这些片段。
- en: This is where the `sw<N>dp` configuration qualifier comes in. You can use this
    qualifier to set the minimum width a resource requires, for example, `res/layout-w700dp`.
    However, unlike the `smallestWidth` qualifier, `w<N>dp` represents the width that's
    currently available to your UI, taking into account the current screen orientation.
    This allows your app to react to the width currently available to it and not just
    the device's fixed `smallestWidth` value.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 `sw<N>dp` 配置限定符发挥作用的地方。你可以使用这个限定符来设置资源所需的最小宽度，例如，`res/layout-w700dp`。然而，与
    `smallestWidth` 限定符不同，`w<N>dp` 代表当前可提供给你的UI的宽度，考虑到当前的屏幕方向。这允许你的应用响应当前可用的宽度，而不仅仅是设备的固定
    `smallestWidth` 值。
- en: Available screen height – h<number>dp
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可用屏幕高度 – h<number>dp
- en: As already mentioned, your typical Android app is pretty flexible about the
    minimum height it needs. However, if you do need to specify the minimum screen
    height a layout or resource needs, you can use the `h<number>dp` qualifier, for
    example, `res/layout-h720dp`.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，你的典型Android应用对所需的最小高度相当灵活。然而，如果你确实需要指定布局或资源所需的最小屏幕高度，你可以使用 `h<number>dp`
    限定符，例如，`res/layout-h720dp`。
- en: The value the system assigns to the screen height changes when the screen's
    orientation changes, so similar to `w<N>dp`, you can use this qualifier to detect
    whether your app is currently being viewed in portrait or landscape mode.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 系统分配给屏幕高度的值会在屏幕方向改变时发生变化，因此类似于 `w<N>dp`，你可以使用这个限定符来检测你的应用当前是否正在以纵向或横向模式查看。
- en: While using these new configuration qualifiers may appear more complicated than
    using the traditional screen size groups, they do give you more control over how
    your UI translates across different screens, and they allow you to specify the
    exact point at which your app switches from a layout that's optimized for Android
    smartphones, to a layout that's optimized for tablets.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然使用这些新的配置限定符可能看起来比使用传统的屏幕尺寸组更复杂，但它们确实给了你更多控制权，以控制你的UI如何在不同的屏幕上转换，并且允许你指定应用从针对Android智能手机优化的布局切换到针对平板电脑优化的布局的确切点。
- en: Note
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Not all versions of Android support all qualifiers, for example `sw<N>dp` was
    introduced in API level 13\. However, when you use a qualifier in your project,
    the system automatically and implicitly adds the platform version qualifier, so
    older versions of Android can at least recognize unsupported qualifiers and subsequently
    ignore them.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有版本的Android都支持所有限定符，例如 `sw<N>dp` 是在API级别13中引入的。然而，当你在你项目中使用限定符时，系统会自动且隐式地添加平台版本限定符，因此较老的Android版本至少可以识别不受支持的限定符，并随后忽略它们。
- en: Designing for different screen orientations
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 针对不同屏幕方向的设计
- en: You may also want to create versions of your layouts that are optimized for
    landscape and portrait orientations. You can provide layouts that are optimized
    for alternate orientations in the same way you provide layouts for different screen
    sizes and densities: you create an extra directory with the correct orientation
    qualifier and place your orientation-specific layouts inside that directory.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还想创建针对横向和纵向方向优化的布局版本。你可以像提供不同屏幕尺寸和密度的布局一样，提供针对替代方向的优化布局：你创建一个带有正确方向限定符的额外目录，并将特定方向的布局放置在该目录中。
- en: Even though Android supports two orientations—portrait and landscape—you only
    ever need to create one additional directory, since you'll use your project's
    default `res/layout` directory for one of these orientations.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Android支持两种方向——纵向和横向——但你只需要创建一个额外的目录，因为你将使用项目默认的 `res/layout` 目录来处理这两种方向之一。
- en: Choose which orientation you want to use as your app's default, and then create
    a directory for the other orientation, so your project may consist of a `res/layout`
    directory that contains your default/portrait layouts and a `res/layout-land`
    directory which contains your project's landscape layouts.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 选择你希望用作应用默认方向的朝向，然后为另一个方向创建一个目录，因此你的项目可能包含一个 `res/layout` 目录，其中包含你的默认/竖屏布局，以及一个
    `res/layout-land` 目录，其中包含你的项目横屏布局。
- en: 'Alternatively, if you want to use landscape orientation as your project''s
    default, create a `res/layout-port` directory and use `res/layout` for your project''s
    landscape layouts:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果你希望将横屏方向作为项目的默认方向，创建一个 `res/layout-port` 目录，并使用 `res/layout` 作为项目横屏布局：
- en: '![Designing for different screen orientations](img/B05061_8_1.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![为不同的屏幕方向设计](img/B05061_8_1.jpg)'
- en: Note
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When it's time to test your app, make sure you test it in both landscape and
    portrait mode across a range of screen configurations.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 当你准备测试你的应用时，确保你在各种屏幕配置下以横屏和竖屏模式测试它。
- en: Reacting to orientation changes
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 响应方向变化
- en: Sometimes, your app will need to register configuration changes and then modify
    its behavior accordingly.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你的应用需要注册配置更改，然后根据结果修改其行为。
- en: 'One of the most common scenarios is reacting to whether the screen is in landscape
    or portrait mode. For example, imagine your app consists of two fragments: one
    fragment displays a list and the other fragment displays information about the
    currently-selected item. The app displays each fragment separately on smaller
    screens in a single-pane layout and side by side on larger screens in a multi-pane
    layout. When the user selects an item in the multi-pane layout, the information
    is displayed in the same activity. However, when the user selects an item in the
    single-pane layout, your app will need to display this information in a new activity.
    In this scenario, your app needs to know what layout the user is currently viewing
    (single or multi-pane), so it can react accordingly.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的场景之一是响应屏幕是横屏还是竖屏模式。例如，想象你的应用由两个片段组成：一个片段显示列表，另一个片段显示当前选中项的信息。在较小的屏幕上，应用以单窗格布局单独显示每个片段，而在较大的屏幕上以多窗格布局并排显示。当用户在多窗格布局中选择一个项目时，信息将在同一活动中显示。然而，当用户在单窗格布局中选择一个项目时，你的应用需要显示此信息在新活动中。在这种情况下，你的应用需要知道用户当前查看的是哪种布局（单窗格或多窗格），以便相应地做出反应。
- en: 'One method is to identify a view that''s only visible in the multi-pane layout,
    and then query whether this view is currently visible:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 一种方法是识别一个仅在多窗格布局中可见的视图，然后查询此视图当前是否可见：
- en: '[PRE9]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can retrieve the device''s current configuration using `getConfiguration()`:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `getConfiguration()` 方法检索设备的当前配置：
- en: '[PRE10]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To retrieve the device''s current screen orientation and act on the results,
    run the following code:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 要检索设备的当前屏幕方向并对结果采取行动，请运行以下代码：
- en: '[PRE11]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Testing across multiple screens
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在多个屏幕上进行测试
- en: Before publishing your app, you should thoroughly test it across all supported
    screen sizes and screen densities, in both landscape and portrait mode. Unless
    you happen to have access to a bunch of different Android smartphones and tablets,
    the most practical way is to use the emulator that comes as part of the Android
    SDK.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布你的应用之前，你应该在所有支持的屏幕尺寸和屏幕密度上，以横屏和竖屏模式彻底测试它。除非你恰好能访问到一堆不同的 Android 智能手机和平板电脑，否则最实用的方法是使用
    Android SDK 中的模拟器。
- en: When you launch the **AVD Manager** and select **Create Virtual Device...**,
    you can choose from a wide range of ready-made **Android Virtual Devices** (**AVDs**)
    that are based on real-life devices, or you can create your own by selecting **New
    Hardware Profile**. When creating a new AVD, you can then choose whether your
    AVD supports landscape and/or portrait mode, but you should typically test your
    app in both landscape and portrait orientation on *every* AVD you create.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 当你启动**AVD 管理器**并选择**创建虚拟设备...**时，你可以从基于现实设备的大量现成**Android 虚拟设备**（**AVDs**）中选择，或者通过选择**新硬件配置文件**来创建自己的设备。在创建新的
    AVD 时，你可以选择你的 AVD 是否支持横屏和/或竖屏模式，但通常你应该在创建的每个 AVD 上测试你的应用在横屏和竖屏方向上的表现。
- en: 'You can also enter the screen size and resolution of your choice. As you enter
    these settings, you''ll see the **Density** of this particular device displayed
    in the window''s right-hand pane:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以输入你选择的屏幕尺寸和分辨率。当你输入这些设置时，你将在窗口的右侧面板中看到该特定设备的**密度**：
- en: '![Testing across multiple screens](img/B05061_8_2.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![在多个屏幕上进行测试](img/B05061_8_2.jpg)'
- en: To test your app's screen support, you'll need to create multiple AVDs that
    represent all the most common Android screen configurations. There's no shortcut
    here, and generally speaking, the more time you spend testing your app, the better
    the user experience will be, regardless of the device it winds up on.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试你的应用屏幕支持，你需要创建代表所有最常见Android屏幕配置的多个AVD。这里没有捷径，一般来说，你花在测试应用上的时间越多，用户体验就会越好，无论最终它运行在哪种设备上。
- en: Note
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: I'll be using the emulator that comes as a part of the Android SDK throughout
    this book, but if you're not a fan of this default emulator, there are alternatives
    available. One popular alternative is Genymotion ([https://www.genymotion.com](https://www.genymotion.com)).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我将使用Android SDK自带仿真器，但如果你不是这个默认仿真器的粉丝，也有其他替代方案。一个流行的替代方案是Genymotion([https://www.genymotion.com](https://www.genymotion.com))。
- en: Showing off your screen support
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 展示你的屏幕支持
- en: When it's finally time to prepare your app's Google Play listing, you should
    use screenshots that show your app in the best possible light. Ideally, you should
    take all your screenshots on a large, high-density screen that's running the very
    latest version of Android, so potential users can see the most impressive version
    of your UI.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 当你最终准备你的应用Google Play列表时，你应该使用展示应用最佳效果的截图。理想情况下，你应该在运行最新版本Android的大屏幕高密度屏幕上拍摄所有截图，这样潜在用户可以看到你UI最令人印象深刻版本。
- en: If you need to create promotional images for your website, blog, social media
    accounts, or anywhere else, then you should place your screenshots in context
    by wrapping them in device artwork. The easiest way to do this is using Android's
    drag-and-drop **Device Art Generator** ([http://developer.android.com/distribute/tools/promote/device-art.html](http://developer.android.com/distribute/tools/promote/device-art.html)).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要为你的网站、博客、社交媒体账户或其他地方创建推广图片，那么你应该通过将截图包裹在设备艺术中，来为它们提供上下文。最简单的方法是使用Android的拖放**设备艺术生成器**([http://developer.android.com/distribute/tools/promote/device-art.html](http://developer.android.com/distribute/tools/promote/device-art.html))。
- en: Attracting an international audience
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 吸引国际受众
- en: Your Android app has the potential to reach a worldwide audience, but *only*
    if you invest time and effort into localizing your app.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 你的Android应用有潜力触达全球受众，但*只有*如果你投入时间和精力进行应用本地化。
- en: Your biggest task when localizing a project is translating its text into your
    target language, but you'll also need to translate any drawables that contain
    text, any video that features text or dialogue, and audio that contains dialogue.
    You'll also need to ensure that any numbers, currency, times, or dates are formatted
    correctly for your target audience, as formatting can vary between languages and
    countries.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地化项目时，你最大的任务是将其文本翻译成目标语言，但你还需要翻译包含文本的任何可绘制资源、任何包含文本或对话的视频以及包含对话的音频。你还需要确保任何数字、货币、时间或日期都正确地格式化以适应目标受众，因为格式在不同语言和国家之间可能有所不同。
- en: 'You provide these alternate resources in the same way you provide any other
    resources: create new directories and use an appropriate configuration qualifier.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像提供其他资源一样提供这些替代资源：创建新的目录并使用适当的配置限定符。
- en: 'When it comes to localization, you''ll need to use *locale* configuration qualifiers,
    which consist of the following:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到本地化时，你需要使用*locale*配置限定符，它由以下内容组成：
- en: '**A language code**: These are two-letter lowercase ISO codes, as defined by
    ISO 639-1 ([https://en.wikipedia.org/wiki/ISO_639-1](https://en.wikipedia.org/wiki/ISO_639-1)).'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语言代码**：这些是ISO 639-1定义的两个小写字母ISO代码，如ISO 639-1([https://en.wikipedia.org/wiki/ISO_639-1](https://en.wikipedia.org/wiki/ISO_639-1))所述。'
- en: '**Country or regional code (optional)**: Two-letter uppercase ISO codes as
    defined by ISO 3166-1 ([https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3))
    and proceeded by a lowercase `r`. You can use country/region codes in combination
    with the language code to provide resources that target devices set to a particular
    language and located in a specific country or region. For example, you could provide
    resources for French speakers located in Canada by combining the language code
    (`fr`) with the regional code (`CA`) plus a lowercase `r`, so your directory would
    be `res/values/fr-rCA`. You can''t use a country or regional code on its own;
    it must always be preceded by a language code.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**国家或地区代码（可选）**：由ISO 3166-1定义的两个字母大写ISO代码（[https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3)），并在其前面加上小写的`r`。你可以使用国家/地区代码与语言代码结合，以提供针对特定语言和位于特定国家或地区的设备的资源。例如，你可以通过将语言代码（`fr`）与地区代码（`CA`）以及小写的`r`结合，为位于加拿大的法语使用者提供资源，因此你的目录将是`res/values/fr-rCA`。你不能单独使用国家或地区代码；它必须始终在语言代码之前。'
- en: Note
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Although it's tempting to think of a locale as being synonymous with a country,
    this isn't always the case. While you may create a directory that uses the French
    language and country code, you can also create a directory that combines the French
    language code with the Canadian country code.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然将地区视为与国家同义很诱人，但这并不总是如此。虽然你可能创建一个使用法语和国家的目录，但你也可以创建一个将法语语言代码与加拿大国家代码结合的目录。
- en: Identifying the target languages and regions
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确定目标语言和地区
- en: The first step to localizing your app is to identify the languages, regions,
    and countries you want to support.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 本地化应用的第一步是确定你想要支持的语言、地区和国家。
- en: 'Put your business head on and look for locales where there''s a potential market
    for your app. In particular, you should look for languages, regions, or countries
    where:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 穿上你的商业头脑，寻找你应用可能存在潜在市场的地区。特别是，你应该寻找以下语言、地区或国家：
- en: There's a large or growing number of Android users
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有大量或越来越多的Android用户
- en: International languages, such as English, aren't widely used
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 国际语言，如英语，并不被广泛使用
- en: There's a gap in the market for an app of your genre or subject
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 市场上需要一款属于你这一类型或主题的应用程序
- en: All the preceding factors mean that localizing your app for this locale could
    be particularly lucrative.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 所有上述因素意味着为该地区本地化你的应用可能特别有利可图。
- en: Decide what countries or regions you want to target first, and then determine
    what language(s) your app needs to support in order to appeal to people in this
    part of the world.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 决定你首先想要针对哪些国家或地区，然后确定你的应用需要支持哪些语言（以便吸引这一地区的人们）。
- en: Once you have a list of all the locales you're going to support, grab their
    language codes from ISO 639-1 ([https://en.wikipedia.org/wiki/ISO_639-1](https://en.wikipedia.org/wiki/ISO_639-1)),
    plus any necessary region or country codes ([https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3)).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了所有你将要支持的地区列表，从ISO 639-1（[https://en.wikipedia.org/wiki/ISO_639-1](https://en.wikipedia.org/wiki/ISO_639-1)）中获取它们的语言代码，以及任何必要的地区或国家代码（[https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3)）。
- en: Providing alternate text
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提供替代文本
- en: Since translating your app's text is usually the biggest localization task,
    we're going to tackle this first.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 由于翻译应用文本通常是最大的本地化任务，我们将首先解决这个问题。
- en: Open your project's `res` folder and create all the alternate `values` directories
    your app needs to support your target locales. So, if you wanted your app to support
    the Spanish language, you'd create a directory called `res/values-es`. If you
    wanted to provide Spanish text that targets Spanish-speakers in Mexico, you'd
    create a `res/values-es-Rmex` directory.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你项目的`res`文件夹，创建你应用需要的所有替代`values`目录以支持你的目标地区。例如，如果你想让你的应用支持西班牙语，你将创建一个名为`res/values-es`的目录。如果你想要为墨西哥的西班牙语使用者提供西班牙语文本，你将创建一个`res/values-es-Rmex`目录。
- en: 'Create the `strings.xml` files inside each of these directories:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些目录中的每个目录内创建`strings.xml`文件：
- en: '![Providing alternate text](img/B05061_8_3.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![提供替代文本](img/B05061_8_3.jpg)'
- en: Place all your translated string resources inside the corresponding `strings.xml`
    file (we'll look at some options for getting your text translated in a moment).
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有翻译后的字符串资源放入相应的`strings.xml`文件中（我们稍后会看看如何获取你的文本翻译的一些选项）。
- en: 'Continuing with our Spanish theme, our `res/values-es/strings.xml` file may
    look something like this:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 继续我们的西班牙主题，我们的`res/values-es/strings.xml`文件可能看起来像这样：
- en: '[PRE12]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: At runtime, the Android system logs the device's locale settings, checks your
    project for any suitable locale-specific resources, and then loads either the
    resources from the corresponding locale-specific directory or falls back on your
    project's default resources.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，Android系统记录设备的区域设置，检查你的项目是否有任何合适的特定区域资源，然后加载相应区域特定目录的资源或回退到你的项目默认资源。
- en: Tip
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Keep your text separate from your application code**'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '**将文本与你的应用程序代码分开**'
- en: It's good practice to keep the localized aspects of your app separate from your
    application code and to *never* hardcode any text into your app, as this will
    make your text far more difficult to localize. Instead, declare all your text
    as string resources, as it's easy to extract strings from your project, send them
    to a translator, and then integrate them back into your app without making any
    changes to your compiled code.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 将应用程序的本地化部分与应用程序代码分开是一个好习惯，并且**永远不要**将任何文本硬编码到你的应用程序中，因为这会使文本本地化变得非常困难。相反，将所有文本声明为字符串资源，因为从项目中提取字符串、发送给翻译人员并将它们重新集成到应用程序中而不修改编译代码很容易。
- en: What other resources might you need localizing?
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你可能还需要本地化哪些其他资源？
- en: 'A large part of the localization process is translating your project''s text,
    specifically its sting resources, but you may also want to provide locale-specific
    versions of other resources. For example, you may want to provide translated versions
    of the following:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 本地化过程的大部分工作是将你的项目文本翻译成其他语言，特别是字符串资源，但你可能还想提供其他资源的特定区域版本。例如，你可能想提供以下内容的翻译版本：
- en: Drawables that feature text
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含文本的绘图资源
- en: Video that contains text or dialogue
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含文本或对话的视频
- en: Audio that features dialogue
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含对话的音频
- en: You may also want to provide alternate versions of resources that aren't appropriate
    for the locale you're targeting. For example, you may want to provide alternatives
    to scenes that feature a particular city or scenery if this image isn't representative
    of the locale you're targeting. Sun-drenched beaches and crystal-clear seas aren't
    your typical scenery in every country (unfortunately).
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还想提供不适用于你目标区域的资源的替代版本。例如，如果你提供的图片不能代表你目标区域，你可能想提供替代场景，比如某个城市或风景。阳光明媚的海滩和清澈的海水并不是每个国家的典型风景（不幸的是）。
- en: You should also be aware that some images maybe considered inappropriate or
    offensive in certain cultures.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该意识到，某些图像在某些文化中可能被认为是不恰当或冒犯性的。
- en: You provide locale-specific versions of any resource in exactly the same way
    you provide alternate string resources; create a new directory and use the same
    combination of the language and country/region code. For example, if you wanted
    to provide multiple versions of a `typical_highshcool.jpg` drawable, you'd create
    multiple drawable folders, such as `res/drawable-ja-rJPN`, `res/drawable-en-rUSA`,
    and `res/drawable-sv`.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该以与提供备用字符串资源相同的方式提供任何资源的特定区域版本；创建一个新的目录并使用相同的语言和国家/地区代码组合。例如，如果你想提供多个版本的`typical_highshcool.jpg`可绘制资源，你将创建多个可绘制文件夹，例如`res/drawable-ja-rJPN`、`res/drawable-en-rUSA`和`res/drawable-sv`。
- en: Why default resources are important
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么默认资源很重要
- en: The key to ensuring that your app runs correctly on devices with any language,
    country, or region settings is to provide a complete set of default resources.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的应用程序在任何语言、国家或地区设置上都能正确运行的关键是提供一套完整的默认资源。
- en: One of the most important default resources you need to provide is `res/values/strings.xml`.
    This is where you'll define every string resource used throughout your project
    in your app's *default language*.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要提供的最重要的默认资源之一是`res/values/strings.xml`。这里你将定义你整个项目中使用的每个字符串资源，在你的应用**默认语言**中。
- en: Note
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The default language is the language that's spoken by the majority of your target
    audience. This may not necessarily be your audience's first language.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 默认语言是大多数目标受众所说的语言。这不一定是你受众的第一语言。
- en: If you don't provide a default version of every string resource, then your app
    will crash whenever it winds up on a device with locale settings that you haven't
    provided a specific string resource for. Even if the user doesn't understand your
    app's default language, this is still preferable to your app crashing or refusing
    to open.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有为每个字符串资源提供默认版本，那么当你的应用最终运行在未提供特定字符串资源的地区设置设备上时，它将会崩溃。即使用户不理解你的应用默认语言，这仍然比你的应用崩溃或拒绝打开要好。
- en: You'll also need to provide a default version of every other locale-specific
    resources you use in your app, because if your project is missing one default
    resource, then it may not run on devices with unsupported locale settings.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要为你在应用中使用的每个其他地区特定资源提供默认版本，因为如果你的项目缺少一个默认资源，那么它可能无法在不受支持的地区设置设备上运行。
- en: Default string resources are also crucial when there's some text you want to
    keep consistent across your app, regardless of the device's locale settings. One
    common example is your app's title, which you may want to keep consistent across
    all versions of your app.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 默认字符串资源在你想在设备地区设置中保持某些文本一致性时也非常重要。一个常见的例子是你的应用标题，你可能希望在不同版本的你的应用中保持一致。
- en: To use text consistently across locales, you just need to define the string
    once in your project's default `strings.xml` file, and then omit it from all your
    locale-specific `strings.xml` files. Then, when the system tries to load your
    app's title from a locale-specific strings file, it'll realize that this string
    is missing and fall back on the default version. The end result is that the same
    string resource will be used in every version of your app.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 要在地区之间保持文本的一致性，你只需要在你的项目的默认`strings.xml`文件中定义一次字符串，然后从所有地区特定的`strings.xml`文件中省略它。然后，当系统尝试从地区特定的字符串文件中加载你的应用标题时，它会意识到这个字符串缺失，并回退到默认版本。最终结果是，相同的字符串资源将在你的应用的每个版本中使用。
- en: Tip
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Should I translate my app''s title?**'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '**我应该翻译我的应用标题吗？**'
- en: There's no straightforward answer to this tricky question. Having multiple titles
    makes an app more difficult to maintain, and it can make usually straightforward
    decisions more complex; if your app goes by multiple names, then what should your
    app's Twitter handle be? Do you need to create multiple versions of your app's
    logo and app icon? Do you need to create multiple support e-mail addresses?
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个棘手的问题，并没有一个直接的答案。拥有多个标题会让应用更难维护，并且可能会使通常简单的决策变得更加复杂；如果你的应用有多个名称，那么你的应用在Twitter上的处理方式应该是什么？你需要为你的应用创建多个版本的标志和图标吗？你需要创建多个支持电子邮件地址吗？
- en: You'll also have to work much harder to promote a product that goes by several
    different names, particularly when it comes to things such as **Search Engine
    Optimisation **(**SEO**).
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 你还必须更加努力地推广一个有多个不同名称的产品，尤其是在像**搜索引擎优化（SEO）**这样的事情上。
- en: Despite all these drawbacks, there are a few good reasons why you might want
    to publish your app under multiple names. The most common reason is that your
    app's title may not make much sense to people who aren't fluent in your app's
    default language. If we decided to call our recipe app Best Student Recipes, English-speaking
    users would instantly know what to expect, but for users who speak different languages,
    *best student recipes *could be completely meaningless. A nonsensical title isn't
    particularly appealing to potential users who stumble across your app in the Google
    Play store, so you may want to consider releasing your app under multiple names.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有这些缺点，但仍有几个很好的理由让你可能想要在多个名称下发布你的应用。最常见的原因是，你的应用标题可能对不精通你应用默认语言的人来说没有太多意义。如果我们决定将我们的食谱应用命名为“最佳学生食谱”，英语用户会立刻知道期待什么，但对于说不同语言的用户来说，“最佳学生食谱”可能完全没有意义。一个无意义的标题对在Google
    Play商店偶然发现你的应用的潜在用户来说并不特别吸引人，因此你可能想要考虑在多个名称下发布你的应用。
- en: There's no real right or wrong answer here. All that matters is that you make
    the best decision based on the app you're developing and your target locales.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有真正的对或错。唯一重要的是，你根据你正在开发的应用和目标地区做出最佳决定。
- en: Whatever decision you do make, make sure you stick to it! Changing your app's
    name after you've launched it is only going to confuse your users.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你做出什么决定，都要确保坚持下去！在你发布应用之后更改应用名称只会让用户感到困惑。
- en: Which configuration qualifiers are the most important?
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 哪些配置限定符最重要？
- en: 'At this point, we''ve covered quite a few different configuration qualifiers:
    locale-specific qualifiers, screen orientation, screen density, and screen size
    qualifiers.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经涵盖了相当多的不同配置限定符：地区限定符、屏幕方向、屏幕密度和屏幕尺寸限定符。
- en: 'If you use a mixture of these in your projects, there''s a strong possibility
    that more than one version of a resource is going to be suitable for the current
    device. Imagine your app winds up on a device with a high-density screen and Spanish
    language settings, and that''s currently being held in landscape mode. The system
    needs to display a drawable, but multiple versions of this drawable are suitable
    for the current device:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在这类项目中混合使用这些资源，有很大可能性会有多个版本的资源适合当前设备。想象一下，如果你的应用安装在一个具有高密度屏幕和西班牙语设置的手机上，并且当前处于横屏模式。系统需要显示一个可绘制资源，但当前设备适合多个版本的该资源：
- en: '`res/drawable`'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`res/drawable`'
- en: '`res/drawable-es`'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`res/drawable-es`'
- en: '`res/drawable-land`'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`res/drawable-land`'
- en: '`res/drawable-hdpi`'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`res/drawable-hdpi`'
- en: Which drawable will the system use? When Android is spoilt for choice, it follows
    a strict set of rules. Of all the qualifiers you can use, locale almost always
    gets preferential treatment. In this example, the device is configured to use
    Spanish, so Android would load the graphic from the `res/drawable-es` directory *even
    though* the device in question also has a high-density screen and is currently
    in landscape mode.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 系统将使用哪个可绘制资源？当Android有多个选择时，它会遵循一套严格的规则。在所有你可以使用的限定符中，地区限定符几乎总是得到优先考虑。在这个例子中，设备配置为使用西班牙语，因此Android会从`res/drawable-es`目录加载图形资源，即使相关的设备也具有高密度屏幕并且当前处于横屏模式。
- en: Note
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The only qualifiers that take precedence over locale qualifiers are **mobile
    country codes** (**MCC**) and **mobile network codes** (**MNC**). If you use any
    of these codes in your project's directories, they'll always take precedence over
    your locale qualifiers.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 只有**移动国家代码**（**MCC**）和**移动网络代码**（**MNC**）的限定符比地区限定符具有优先级。如果你在项目目录中使用这些代码，它们将始终优先于你的地区限定符。
- en: Getting your app translated
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 翻译你的应用
- en: Translating your app's resources is a crucial part of the localization process,
    and unless you're fluent in the language that you're targeting, at some point
    you'll need to enlist the help of a translator, whether that's a paid professional
    or a kind volunteer.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 翻译你的应用资源是本地化过程中的一个关键部分，除非你精通你目标的语言，否则在某个时候你将需要寻求翻译者的帮助，无论是付费的专业人士还是友好的志愿者。
- en: Although you may be tempted to go down the quick and easy route of a machine
    translator, services such as Google Translate can never compare to a human translator,
    and relying on machine translators will almost always result in a bad experience
    for your international users.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管你可能想走一条快速简便的路线，使用机器翻译，但像Google Translate这样的服务永远无法与人类翻译者相比，依赖机器翻译几乎总是会导致你的国际用户有糟糕的体验。
- en: If you do decide to hire a professional translator, you should start contacting
    translators as early as possible, so you can get an idea of turnaround time and
    incorporate this information into your development plan. It also gives you time
    to shop around and find the best possible translator for your budget.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你决定雇佣专业翻译者，你应该尽早联系翻译者，这样你可以了解周转时间并将这些信息纳入你的开发计划。这也给你时间四处寻找并找到最适合你预算的最佳翻译者。
- en: You can find translators online, or you may want to explore the Google Play
    app Translation service, which is offered through Developer Console.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在网上找到翻译者，或者你可能想探索通过开发者控制台提供的Google Play应用翻译服务。
- en: 'To access these services, perform the following steps:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问这些服务，请执行以下步骤：
- en: Log in to the Developer Console ([https://play.google.com/apps/publish](https://play.google.com/apps/publish)).
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录开发者控制台([https://play.google.com/apps/publish](https://play.google.com/apps/publish))。
- en: If you haven't already done so, upload your APK by selecting **Add new application**.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你还没有这样做，请通过选择**添加新应用**来上传你的APK。
- en: Once you've uploaded your app, it'll appear in your **All Applications** dashboard.
    Select the app you want to purchase translation services for.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你上传了你的应用，它就会出现在你的**所有应用**仪表板上。选择你想要购买翻译服务的应用。
- en: Make sure **APK** is selected in the left-hand menu.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在左侧菜单中选择了**APK**。
- en: Under **APK Translation Service**, select **Start**.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**APK翻译服务**下，选择**开始**。
- en: Select the source language used in your original text.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你原始文本中使用的源语言。
- en: Under **Translate API**, add the XML source file that contains the strings that
    you want to translate.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**翻译API**下，添加包含您想要翻译的字符串的XML源文件。
- en: Select your target languages.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您的目标语言。
- en: Choose a translation vendor.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个翻译供应商。
- en: Just be aware that even though you're making a purchase through the Developer
    Console, this is a direct business agreement between you and your chosen vendor,
    so you'll need to work with the translator directly. After purchasing a translation
    through the Developer Console, you will receive an e-mail from your vendor, and
    it's your responsibility to manage the project from there.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，尽管您是通过开发者控制台进行购买，但这是一种您与所选供应商之间的直接商业协议，因此您需要直接与翻译者合作。通过开发者控制台购买翻译后，您将收到供应商的电子邮件，并负责从那里管理项目。
- en: Getting the most out of your translations
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 充分利用您的翻译
- en: The quality of your translations depends on the skill of the translator, but
    it also depends on the quality of your input. If you provide your chosen translator
    with a higher quality input, then it stands to reason that you're going to get
    a higher quality output.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 您翻译的质量取决于翻译者的技能，但也取决于您输入的质量。如果您为所选的翻译者提供高质量的输入，那么您将得到高质量的输出。
- en: In this section, I'll show you how to increase your chances of receiving a high
    quality, accurate translation.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我将向您展示如何提高您获得高质量、准确翻译的机会。
- en: Putting your strings in context
  id: totrans-256
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 将字符串置于上下文中
- en: When you're declaring your string resources, you should provide as much information
    about each string as possible, as this will help your translator to better understand
    your string resources.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在声明字符串资源时，您应该尽可能提供有关每个字符串的信息，因为这将帮助翻译者更好地理解您的字符串资源。
- en: 'At the very least, you should give each string a descriptive name, but ideally
    you should also supply a comment that explains what this string is for, along
    with the information about when and where the string will appear in your app,
    plus any restrictions such as the maximum amount of characters this part of your
    UI can display. For example, take a look at the following:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 至少，您应该为每个字符串提供一个描述性的名称，但理想情况下，您还应该提供注释来解释这个字符串的用途，以及字符串将在您的应用程序中何时何地出现，以及任何限制，例如UI的这一部分可以显示的最大字符数。例如，看看以下内容：
- en: '[PRE13]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If your app features any specialist language or technical terms, then you should
    thoroughly explain what each term means. If this turns out to be too much text
    to fit into a comment, or you find yourself explaining multiple strings, then
    you may want to create a separate glossary document that explains the meaning
    and use of all the specialist terms used throughout your `strings.xml` file. You
    can then send this additional document to the translator along with your strings.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序包含任何专业语言或技术术语，那么您应该彻底解释每个术语的含义。如果这些内容太多，无法放入注释中，或者您发现自己正在解释多个字符串，那么您可能需要创建一个单独的词汇表文档，解释`strings.xml`文件中使用的所有专业术语的含义和使用方法。然后，您可以随字符串一起发送这份附加文档给翻译者。
- en: Using terms consistently
  id: totrans-261
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 一致地使用术语
- en: You can greatly increase your chances of a successful and accurate translation
    by using terms consistently throughout your app. For example, if the main method
    of navigating your app is via a series of buttons that allow the user to progress
    to the next screen, you should label these buttons consistently, instead of using
    a mix of terms that all mean the same thing, such as **Forward**, **Next**, **OK**,
    and **Submit**. This will make the translator's job much easier.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在整个应用程序中一致地使用术语，您可以大大提高成功且准确的翻译的机会。例如，如果您应用程序的主要导航方式是通过一系列按钮，允许用户进入下一屏幕，那么您应该一致地标记这些按钮，而不是使用含义相同但术语混合的术语，如**前进**、**下一页**、**确定**和**提交**。这将使翻译者的工作变得更加容易。
- en: Note
  id: totrans-263
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Using terms consistently will improve your app's general user experience too.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 一致地使用术语也将改善您应用程序的整体用户体验。
- en: Getting your strings in order
  id: totrans-265
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 将字符串排序
- en: To help the translator make sense of your project's string resources, you should
    take a few moments to perform some admin on your `strings.xml` file. Remove any
    unused strings that you might have added early on and then never actually used
    in your project, and remove the strings that have disappeared from your project
    over time. You should also remove any duplicate strings, and be on the lookout
    for any spelling mistakes or typos. Finally, make sure your strings are formatted
    correctly and consistently. This housekeeping may seem simple, but it can make
    your translator's job much easier, particularly if they're not an Android developer
    themselves.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助翻译者理解你的项目字符串资源，你应该花几分钟时间对你的`strings.xml`文件进行一些管理。删除你可能早期添加但从未在项目中实际使用的任何未使用字符串，并删除随着时间的推移从你的项目中消失的字符串。你还应该删除任何重复的字符串，并留意任何拼写错误或打字错误。最后，确保你的字符串格式正确且一致。这种维护工作可能看起来很简单，但它可以使翻译者的工作变得容易得多，尤其是如果他们本身不是Android开发者的话。
- en: Not creating unnecessary strings
  id: totrans-267
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 不创建不必要的字符串
- en: More strings mean more work! Even if you're supporting several languages, you
    probably won't need to create a locale-specific version of every string in every
    language your app supports.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 更多的字符串意味着更多的工作！即使你支持多种语言，你可能也不需要为你的应用支持的所有语言中的每个字符串创建区域特定的版本。
- en: There may be pieces of text that you want to use consistently across all locales,
    such as your app's title, which means there's no need to add this string to every
    locale-specific `strings.xml` file. Remember, if you don't include a particular
    string in a locale-specific directory, your app will use the default string instead.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 可能有一些文本你希望在所有区域设置中保持一致，例如你的应用标题，这意味着没有必要将此字符串添加到每个特定区域的`strings.xml`文件中。记住，如果你没有在特定区域目录中包含特定的字符串，你的应用将使用默认字符串。
- en: Your app may also support languages that are variations of the same parent language.
    For example, imagine your app's default language is British English, but it also
    supports American English. Chances are that most of the resources you define in
    your project's `res/values/strings.xml` file will be suitable for your American
    English audience. You should still create a `res/values-en-rUSA/strings.xml` file,
    but this file should only contain the strings where American English spelling
    differs from British English spelling.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 你的应用可能也支持与同一父语言变体相同的语言。例如，假设你的应用默认语言是英国英语，但它也支持美国英语。很可能你定义在项目`res/values/strings.xml`文件中的大多数资源都适合你的美国英语受众。你仍然应该创建一个`res/values-en-rUSA/strings.xml`文件，但此文件应仅包含美国英语拼写与英国英语拼写不同的字符串。
- en: Always marking non-translatable text
  id: totrans-271
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 总是标记不可翻译的文本
- en: Your project may include some string resources that you don't want translating,
    such as your app's title, URLs, promotional codes, social media links, and e-mail
    addresses. You should clearly mark all the text you don't want translating before
    handing your project over to the translator.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 你的项目可能包含一些你不想翻译的字符串资源，例如你的应用标题、URL、促销代码、社交媒体链接和电子邮件地址。在将项目交给翻译者之前，你应该清楚地标记所有你不想翻译的文本。
- en: 'Wrap the `<xliff:g>` tags around the text that you don''t want translating,
    and use an `id` attribute to explain why this text shouldn''t be translated:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 将`<xliff:g>`标签包裹在你不希望翻译的文本周围，并使用`id`属性解释为什么这段文本不应该被翻译：
- en: '[PRE14]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Imagine you want to display a welcome message that includes your app''s title.
    You want the actual welcome text to be translated, but you want the app''s title
    to remain consistent across all locales. In this scenario, you''d use the following
    XML:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想要显示一条包含你的应用标题的欢迎消息。你希望实际的欢迎文本被翻译，但你希望应用的标题在所有区域设置中保持一致。在这种情况下，你会使用以下XML：
- en: '[PRE15]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Finally, to prevent your project from throwing an error, you need to update
    the resources tag in your `strings.xml` file:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了防止你的项目抛出错误，你需要更新`strings.xml`文件中的资源标签：
- en: '[PRE16]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Tip
  id: totrans-279
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Marking dynamic values as non-translatable**'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '**标记动态值为不可翻译**'
- en: Sometimes, you'll want to combine some predetermined and dynamic text in a single
    string. For example, your app could ask the student for their name, take their
    input, combine it with some of the predetermined text, and then display the **Welcome
    to the Student Recipe app, Nicole!** message.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，你可能会想在单个字符串中结合一些预定的和动态文本。例如，你的应用可能会要求学生输入他们的名字，接收他们的输入，将其与一些预定的文本结合，然后显示**欢迎使用学生食谱应用，妮可！**的消息。
- en: 'So, what does this have to do with translation? When you create strings that
    feature dynamic text, you represent the dynamic text with a placeholder, such
    as follows: `<string name="name">Welcome to the app %1$s</string>`'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这与翻译有什么关系呢？当你创建包含动态文本的字符串时，你可以使用占位符来表示动态文本，如下所示：`<string name="name">欢迎来到应用
    %1$s</string>`
- en: You should make it clear to your translator that this placeholder isn't an error
    or typo, and therefore, they shouldn't try to translate it. This becomes particularly
    important when you're working with a translator who isn't familiar with Android
    development.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该让翻译者清楚这个占位符不是一个错误或打字错误，因此他们不应该尝试翻译它。当你与一个不熟悉Android开发的翻译者合作时，这一点尤为重要。
- en: 'To make it clear that a placeholder shouldn''t be translated, you can use the
    regular `<xliff:g>` tags and the `id` attribute. However, for the sake of clarity,
    you should also provide an example of the kind of content this placeholder text
    might eventually display. In our welcome message example, this looks something
    like the following: `<string name="welcomeMessage">Welcome to the Recipe App<xliff:g
    id="userName" example="Nicole">%1$s</xliff:g>!</string>`'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 为了明确占位符不应被翻译，你可以使用常规的`<xliff:g>`标签和`id`属性。然而，为了清晰起见，你也应该提供一个示例，说明这种占位文本最终可能显示的内容。在我们的欢迎信息示例中，它看起来如下所示：`<string
    name="welcomeMessage">欢迎来到食谱应用<xliff:g id="userName" example="Nicole">%1$s</xliff:g>！</string>`
- en: Other things to consider
  id: totrans-285
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他需要考虑的事项
- en: Although language may be the most obvious factor, there are several less obvious
    things you need to take into consideration if your app is really going to make
    a splash on the international market.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然语言可能是最明显的因素，但如果你想在国际市场上取得成功，还有几个不那么明显的事情需要考虑。
- en: Right to left support
  id: totrans-287
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从右到左支持
- en: Don't automatically assume that your audience will read left to right (LTR).
    In some countries, reading right to left (RTL) is the norm. Depending on the locales
    you're targeting, you may want to consider implementing support for RTL and LTR.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 不要自动假设你的受众会从左到右阅读（LTR）。在一些国家，从右到左阅读（RTL）是常态。根据你针对的本地化，你可能需要考虑实现RTL和LTR的支持。
- en: The good news is that in Android 4.2 and higher, the system automatically mirrors
    your app's UI when the user switches the system language to a right-to-left script.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，在Android 4.2及以上版本中，当用户将系统语言切换为从右到左的脚本时，系统会自动镜像你的应用UI。
- en: 'To take advantage of this automatic mirroring, open your project''s `Manifest`
    file and add the following line:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 要利用这种自动镜像功能，打开你的项目`Manifest`文件并添加以下行：
- en: '[PRE17]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then, change all your app''s `left/right` layout properties to the `start/end`
    equivalents:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将你应用的所有`left/right`布局属性更改为`start/end`等效属性：
- en: If you're targeting Android 4.2 and higher, use `start` and `end` instead of `left`
    and `right`, for example, `android:paddingRight` becomes `android:paddingEnd`
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你针对的是Android 4.2及以上版本，请使用`start`和`end`而不是`left`和`right`，例如，`android:paddingRight`变为`android:paddingEnd`
- en: If you're targeting versions of Android lower than 4.2, you should use `start`
    and `end` in addition to `left` and `right`; for example, you should use both `android:paddingRight`
    and `android:paddingEnd`
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你针对的是低于4.2版本的Android，你应该除了`left`和`right`之外还使用`start`和`end`；例如，你应该同时使用`android:paddingRight`和`android:paddingEnd`
- en: Formatting values
  id: totrans-295
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 格式化值
- en: Keep in mind that not every locale formats values, such as dates and numbers,
    in the same way. You should *never* hardcode formats based on assumptions about
    the user's locale as this can cause problems when the user switches to another
    locale.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，并非每个本地化都以相同的方式格式化值，例如日期和数字。你不应该基于对用户本地化的假设来硬编码格式，因为这可能会在用户切换到另一个本地化时引起问题。
- en: 'Instead, always use the system-provided formats and utilities such as follows:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，始终使用系统提供的格式和工具，如下所示：
- en: DateUtils ([http://developer.android.com/reference/android/text/format/DateUtils.html](http://developer.android.com/reference/android/text/format/DateUtils.html))
    and DateFormat ([http://developer.android.com/reference/java/text/DateFormat.html](http://developer.android.com/reference/java/text/DateFormat.html))
    for dates
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DateUtils ([http://developer.android.com/reference/android/text/format/DateUtils.html](http://developer.android.com/reference/android/text/format/DateUtils.html))
    和 DateFormat ([http://developer.android.com/reference/java/text/DateFormat.html](http://developer.android.com/reference/java/text/DateFormat.html))
    用于日期格式化
- en: String.format ([http://developer.android.com/reference/java/lang/String.html#format(java.lang.String,%20java.lang.Object](http://developer.android.com/reference/java/lang/String.html#format(java.lang.String,%20java.lang.Object...))
    or DecimalFormat ([http://developer.android.com/reference/java/text/DecimalFormat.html](http://developer.android.com/reference/java/text/DecimalFormat.html))
    for numbers and currency
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: String.format ([http://developer.android.com/reference/java/lang/String.html#format(java.lang.String,%20java.lang.Object](http://developer.android.com/reference/java/lang/String.html#format(java.lang.String,%20java.lang.Object...))
    或 DecimalFormat ([http://developer.android.com/reference/java/text/DecimalFormat.html](http://developer.android.com/reference/java/text/DecimalFormat.html))
    用于数字和货币
- en: PhoneNumberUtils ([http://developer.android.com/reference/android/telephony/PhoneNumberUtils.html](http://developer.android.com/reference/android/telephony/PhoneNumberUtils.html))
    for phone numbers
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PhoneNumberUtils ([http://developer.android.com/reference/android/telephony/PhoneNumberUtils.html](http://developer.android.com/reference/android/telephony/PhoneNumberUtils.html))
    用于电话号码
- en: Localizing your app – best practices
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地化您的应用 – 最佳实践
- en: Localizing your app is a powerful way of attracting potentially *millions* more
    users. Why limit yourself to just one market? Implementing the following best
    practices will increase your app's chances of connecting with a worldwide audience.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 本地化您的应用是一种吸引可能**数百万**更多用户的有效方式。为什么只限制自己在一个市场呢？实施以下最佳实践将增加您的应用与全球受众建立联系的机会。
- en: Design a single set of flexible layouts
  id: totrans-303
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设计一组灵活的布局
- en: Depending on the languages that you choose to support, some of your alternative
    string resources may expand or shrink dramatically during the translation process
    to the point where they no longer fit your layout.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您选择支持的语言，一些备用字符串资源在翻译过程中可能会显著扩展或收缩，以至于它们不再适合您的布局。
- en: To minimize the chances of this happening in your app, you should create flexible
    layouts that can accommodate alternate string resources of all sizes. One useful
    trick is to give your app's default text more space than it requires, so your
    UI already has some wiggle room when it comes to accommodating slight variations
    in size.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最小化在您的应用中发生这种情况的可能性，您应该创建灵活的布局，以便容纳所有尺寸的备用字符串资源。一个有用的技巧是为您的应用默认文本分配比所需更多的空间，这样当涉及到适应尺寸的轻微变化时，您的UI已经有一些调整空间。
- en: You should design UI elements that contain text to be able to expand horizontally
    and vertically in order to accommodate minor changes in text height and width,
    for example, buttons that can grow and shrink depending on the size of their button
    labels. However, you should also consider how these expanding and shrinking UI
    elements might impact the rest of your UI. Could an expanding button make your
    UI look cramped or lopsided? Or worse, could it push the neighboring buttons off
    the screen, rendering them unreachable?
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该设计包含文本的UI元素，使其能够水平和垂直扩展，以适应文本高度和宽度的微小变化，例如，按钮可以根据其按钮标签的大小增长和缩小。然而，您还应该考虑这些扩展和收缩的UI元素可能对您的其余UI产生的影响。一个扩展的按钮是否会使得您的UI看起来拥挤或倾斜？或者更糟，它是否会将相邻的按钮推离屏幕，使它们变得无法触及？
- en: Pay particular attention to UI elements that the user can interact with, such
    as buttons; if these elements change size, it can quickly impact your user experience.
    Two touchable objects that inch closer to one another as they expand can result
    in frustrated users who keep catching the wrong button by accident.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 特别注意用户可以与之交互的UI元素，例如按钮；如果这些元素改变大小，可能会迅速影响用户体验。两个在扩展时相互靠近的可触摸对象可能会导致用户不断意外地按下错误的按钮。
- en: If you design your layouts with flexibility in mind, then typically you'll be
    able to use the same layout across all locales. However, if you're struggling
    to design a layout that's flexible enough to accommodate all your alternate strings,
    you may want to make some changes to your text.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在设计布局时考虑到灵活性，那么通常您将能够在所有区域设置中使用相同的布局。然而，如果您在设计一个足够灵活的布局以容纳所有备用字符串时遇到困难，您可能需要对自己的文本进行一些修改。
- en: Simple, straight-to-the-point text typically means less variation during the
    translation process, so if you're struggling with text that shrinks or expands
    dramatically, start at the root of the problem—your app's default text. Look for
    any opportunities to simplify this text, any unnecessary text you can remove from
    your UI, plus any words that you can replace with a universally understood picture
    or symbol, such as replacing the **OK** text with a checkmark or **Cancel** with
    a cross**.**
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 简洁、直截了当的文本通常意味着在翻译过程中变化较少，所以如果你在处理文本缩放或扩展变化很大的问题时，应该从问题的根源开始——你的应用程序的默认文本。寻找任何简化此文本的机会，任何可以从你的用户界面中移除的不必要文本，以及任何可以用普遍理解的图片或符号替换的单词，例如用勾选标记替换**确定**文本，或者用交叉符号替换**取消**。**
- en: Note
  id: totrans-310
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Simplifying your app's text and removing any words that aren't strictly necessary
    will provide a better user experience all round, regardless of whether the user
    is viewing a localized version of your app or accessing your app in its default
    language.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 简化你的应用程序文本并移除任何不是绝对必要的单词将提供更好的用户体验，无论用户是查看你应用程序的本地化版本还是以默认语言访问你的应用程序。
- en: Depending on the amount of text you need to display and the locales your app
    supports, it may be impossible to create a single layout that can accommodate
    text across *all* your target languages. Layouts can only flex so far after all!
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你需要显示的文本数量以及你的应用程序支持的区域设置，可能无法创建一个可以容纳所有目标语言的单一布局。布局在所有这些之后只能有一定的弹性！
- en: As a final resort, you can create alternate layouts specifically for the language
    (or languages) that are causing your app so many problems, which leads onto the
    next point.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最后的手段，你可以为导致你的应用程序出现许多问题的语言（或语言）创建替代布局，这引出了下一个要点。
- en: Create alternate languages only when needed
  id: totrans-314
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 仅在需要时创建替代语言
- en: You can create a layout that targets a specific language by creating a new layout
    directory with the relevant configuration qualifier. For example, if you wanted
    to create a version of your project's `main.xml` layout that's optimized to display
    your tricky German translations, you'd create a `res/layout-de/main.xml` directory,
    and then place your German layout resource file inside this directory.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过创建一个新的布局目录并使用相关的配置限定符来创建针对特定语言的布局。例如，如果你想创建一个针对你项目`main.xml`布局版本，该版本针对显示你棘手的德语翻译进行了优化，你将创建一个`res/layout-de/main.xml`目录，然后在这个目录中放置你的德语布局资源文件。
- en: However, alternate layouts do make your app harder to maintain, so only use
    them as a last resort.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，替代布局确实会使你的应用程序更难维护，所以只有作为最后的手段使用它们。
- en: Testing your app across different locales
  id: totrans-317
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在不同区域设置中测试你的应用程序
- en: Once you've created all your locale-specific layouts and resources, you need
    to make sure that your app really is ready for an international audience. This
    means testing the localized versions of your app across a wide range of AVDs with
    localization settings that correspond to your different target locales, plus at
    least one AVD that's set to a language and locale that your app *doesn't* explicitly
    support.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你创建了所有你的区域特定布局和资源，你需要确保你的应用程序真正为国际观众做好了准备。这意味着测试你应用程序的本地化版本，使用与你的不同目标区域设置相对应的本地化设置，以及至少一个设置为你的应用程序*不*明确支持的语言和区域设置的AVD。
- en: 'When testing your app across different locales, be sure to check for the following:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试你的应用程序在不同区域设置时，务必检查以下内容：
- en: Your project is displaying the correct string resources, layouts, and any other
    locale-specific resources for the device it's currently installed on. Placing
    a `strings.xml` file in the wrong directory and missing a configuration qualifier
    or even a simple typo is all it takes for your app to display Korean text (`res/values-ko/strings.xml`)
    when it should really be displaying Kurdish text (`res/values-ku/strings.xml`).
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的项目正在显示当前安装的设备上正确的字符串资源、布局以及任何其他特定于区域设置的资源。将`strings.xml`文件放在错误的目录中，遗漏配置限定符，甚至只是一个简单的拼写错误，都可能让你的应用程序在应该显示库尔德语文本（`res/values-ku/strings.xml`）时显示韩语文本（`res/values-ko/strings.xml`）。
- en: Your locale-specific resources are displaying correctly in the current layout
    and aren't causing any usability problems.
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的区域特定资源在当前布局中显示正确，并且不会引起任何可用性问题。
- en: You should also be aware that some screen configurations, hardware, and software
    may be more common in certain locales. Make sure you research the most popular
    devices in all your target locales to see whether you need to incorporate support
    for specific hardware, software, or screen configurations into the localized versions
    of your app.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该意识到某些屏幕配置、硬件和软件可能在某些地区更常见。确保你研究所有目标地区的最流行的设备，看看你是否需要将特定硬件、软件或屏幕配置的支持纳入你应用的本地化版本中。
- en: Testing for different locales
  id: totrans-323
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试不同地区
- en: You can test your app's language settings on a physical device by opening that
    device's **Settings** app, selecting **Language**, and then choosing a new language
    from the menu. This is useful for getting an idea of how the localized version
    of your app functions across devices with different language settings. However,
    you should also test how your app functions with different country and region
    settings, something you can't easily change on a physical Android device, which
    is where AVDs come in.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过打开设备的**设置**应用，选择**语言**，然后从菜单中选择一种新语言来在物理设备上测试你的应用的语言设置。这对于了解你的应用的本地化版本在不同语言设置的设备上如何运行非常有用。然而，你也应该测试你的应用在不同国家和区域设置下的功能，这在物理Android设备上不容易改变，这就是AVD的作用所在。
- en: Although you can't create an AVD with specific language, locale, or region settings,
    you can change these settings once you have an AVD up and running in the emulator.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你不能创建具有特定语言、地区或区域设置的AVD，但你可以在模拟器中运行AVD后更改这些设置。
- en: Start by creating an AVD with the screen configuration, hardware, and software
    settings you want to test your app against, and launch your project in this AVD.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个具有你想要测试应用屏幕配置、硬件和软件设置的AVD，并在该AVD中启动你的项目。
- en: 'Open your Mac terminal or Windows command prompt and **change directory** (`cd`)
    so it''s pointing at the directory where the**Android Debug Bridge** (`adb`) is
    located. For example, the command I''m using is:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的Mac终端或Windows命令提示符，并**更改目录**（`cd`），使其指向**Android调试桥接器**（`adb`）所在的目录。例如，我使用的命令是：
- en: '[PRE18]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Once your AVD is up and running, you can change its locale by issuing adb commands.
    To do this, you'll need the ISO code of the language you're targeting (`ISO 639-1`),
    and any country or region code (`ISO 3166-1`) you're using.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的AVD启动并运行，你可以通过发出adb命令来更改其地区。为此，你需要你目标语言的ISO代码（`ISO 639-1`），以及你使用的任何国家或地区代码（`ISO
    3166-1`）。
- en: 'In your `adb` window, enter the following command:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的`adb`窗口中，输入以下命令：
- en: '[PRE19]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'After a few moments, you will see a `#` prompt. At this point, you can enter
    the following command:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 几分钟后，你将看到一个`#`提示符。在这个时候，你可以输入以下命令：
- en: '[PRE20]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'For example, if you wanted to test your app on a device that''s set to Spanish
    (`es`), you''d run the following:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你想在一个设置为西班牙语（`es`）的设备上测试你的应用，你会运行以下命令：
- en: '[PRE21]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If you wanted to check your app on a device that''s set to use the Spanish
    language in the Mexican locale, you''d run the following:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要检查一个设置为在墨西哥地区使用西班牙语的设备上的应用，你会运行以下命令：
- en: '[PRE22]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: At this point, the emulator will restart with the new locale settings. Relaunch
    your app and that's it—you're ready to test your app against your new locale settings.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一点，模拟器将重新启动并带有新的地区设置。重新启动你的应用，这就完成了——你现在可以测试你的应用与新的地区设置了。
- en: Look for common localization issues
  id: totrans-339
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 寻找常见的本地化问题
- en: So, once you've set up your test environment, what *specific* issues should
    you be looking for?
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，一旦你设置了测试环境，你应该寻找哪些**具体**的问题？
- en: Firstly, you should check every screen in your app to make sure there's no instances
    of clipped text, poor line wrapping, strange-looking word or line breaks, or incorrect
    alphabetical sorting. You should also be aware of any locales where the text should
    run RTL and check that this is actually what's happening in your layouts.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你应该检查你应用中的每一个屏幕，确保没有文本被裁剪、行包裹不佳、看起来奇怪的单词或行中断，或者不正确的字母顺序。你也应该注意任何文本应该从右到左（RTL）显示的地区，并检查在你的布局中这确实发生了。
- en: You should also be on the lookout for any unintentionally untranslated text;
    unintentional because there may be instances where you want to use the same text
    consistently across your app, such as your app's title and your contact details.
    If you spot any *unintentionally* untranslated text, then you should dig into
    your app's code to see exactly what's going wrong.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该留意任何无意中未翻译的文本；无意中未翻译，可能是因为在某些情况下，你可能希望在整个应用程序中一致地使用相同的文本，例如应用程序的标题和你的联系信息。如果你发现任何**无意中**未翻译的文本，那么你应该深入查看你的应用程序代码，以确定到底出了什么问题。
- en: Also, be on the lookout for any wrongly translated text. This kind of error
    can be difficult to spot, as chances are that you're not fluent in all the languages
    your app supports. This is one of the few occasions where it's acceptable to use
    an online translator, such as Google Translate, as it's often the quickest and
    easiest way of double-checking that your app's Spanish text really is Spanish.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还要留意任何翻译错误的文本。这种错误可能很难发现，因为你可能不是你应用程序支持的所有语言的熟练使用者。在这种情况下，使用在线翻译器，如谷歌翻译，是可接受的，因为它通常是快速且简单的方法，可以再次确认你的应用程序的西班牙语文本确实是西班牙语。
- en: 'You should also look for any instances where text or other locale-specific
    resources don''t fit with your current layout. This could be the following:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该寻找任何文本或其他区域特定资源与当前布局不匹配的情况。这可能是以下情况：
- en: Resources that are smaller than the default version, such as the text that shrinks
    dramatically during the translation process. Shrinking resources can leave gaping
    holes in your layout, or they can throw other UI elements off balance and create
    a layout that, while not completely broken, does look pretty odd.
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小于默认版本的资源，例如在翻译过程中显著缩小的文本。缩小的资源可能会在布局中留下巨大的空白，或者使其他UI元素失去平衡，创建一个虽然不是完全损坏，但看起来相当奇怪的布局。
- en: Resources that are present in some versions of your UI and missing in others.
    Again, this can cause awkward gaps and aesthetic problems in your layout. If you're
    intentionally omitting certain resources, you might want to look for something
    to fill the gap this resource leaves behind, or as a last resort, supply an alternative
    layout that's designed specifically for this locale.
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在某些版本的UI中存在而在其他版本中缺失的资源。同样，这可能会在布局中造成尴尬的空白和美学问题。如果你有意省略某些资源，你可能想要寻找一些东西来填补这个资源留下的空白，或者作为最后的手段，提供一个专门为该区域设计的替代布局。
- en: Resources that are much larger than the default version, which can result in
    a cluttered, cramped-looking UI or usability problems, such as touchable areas
    that are pushed too close to one another.
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大于默认版本的资源，这可能导致界面看起来杂乱拥挤，或者出现诸如可触摸区域过于靠近的问题。
- en: Resources that aren't appropriate for the current screen configuration. As already
    mentioned, different locales may also mean different hardware, software, and screen
    configurations. If you're targeting multiple countries and regions, make sure
    you research the most popular Android devices within these specific demographics,
    and then test your app across AVDs that reflect the hardware, software, and screen
    configurations that are most commonly used within these different areas.
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不适合当前屏幕配置的资源。如前所述，不同的区域可能也意味着不同的硬件、软件和屏幕配置。如果你针对多个国家和区域，请确保你研究这些特定人口统计中最受欢迎的Android设备，然后在这些不同区域中测试你的应用程序，使用反映这些不同区域中最常用硬件、软件和屏幕配置的AVD。
- en: Testing for default resources
  id: totrans-349
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试默认资源
- en: After you've tested your app across all the languages, countries, and regions
    that you want to support, you should install your app on an AVD with locale settings
    that it *doesn't* explicitly support. This may sound strange, but it's the most
    effective way of checking that you've included a default version of every resource
    your app requires.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试了你的应用程序想要支持的所有语言、国家和区域之后，你应该在一个不明确支持区域设置的AVD上安装你的应用程序。这听起来可能有些奇怪，但这是检查你是否包含了应用程序所需的所有资源默认版本的最有效方法。
- en: As I've mentioned several times throughout this chapter, including default resources
    means that if your app gets into difficulties, it has something to gracefully
    fall back on rather than crashing. Providing default versions of all your project's
    strings, drawables, and other resources guarantees that your app will run even
    if it winds up on a device with locale settings that it doesn't explicitly support.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我在本章中多次提到的，包括默认资源意味着如果您的应用遇到困难，它有东西可以优雅地回退，而不是崩溃。提供所有项目字符串、可绘制元素和其他资源的默认版本确保了即使它最终运行在一个不支持的区域设置的设备上，您的应用也能运行。
- en: To test your app, open your Terminal or Command Prompt window and tell your
    emulator to switch to a locale that your app doesn't explicitly support. If you've
    provided the necessary default resources, your app should load these resources,
    including the contents of your project's `res/values/strings.xml` file. If your
    app crashes, then this is an indication that your project is missing at least
    one default resource.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试您的应用，请打开您的终端或命令提示符窗口，并告诉您的模拟器切换到一个您的应用没有明确支持的区域设置。如果您已经提供了必要的默认资源，您的应用应该会加载这些资源，包括项目`res/values/strings.xml`文件的内容。如果您的应用崩溃，那么这表明您的项目至少缺少一个默认资源。
- en: Plan a beta release in key countries
  id: totrans-353
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在关键国家计划测试版发布
- en: Once you've finished testing your app across different locales, and you're confident
    that it'll functions correctly regardless of the user's language, country, or
    region settings, then you may want to consider opening your app up to feedback
    from your potential target audience, in particular the native speakers of all
    the languages your app supports. This usually takes the form of beta testing.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您在不同区域测试完您的应用，并且您确信无论用户的语言、国家或地区设置如何，它都能正确运行，那么您可能想考虑向您的潜在目标受众开放反馈，特别是所有支持的语言的母语者。这通常以测试版的形式出现。
- en: Note
  id: totrans-355
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Users who install beta versions of your app cannot leave reviews on your Google
    Play page, so don't worry about these early versions of your app negatively (and
    unfairly!) impacting your Google Play rating.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 安装您应用测试版版本的用户无法在您的Google Play页面上留下评论，所以请不要担心这些早期版本的应用会负面（且不公平地！）影响您的Google Play评分。
- en: Getting real-world feedback is always valuable, but this feedback becomes even
    more valuable when you're planning an international launch. Native speakers will
    be able to easily pinpoint any grammar or spelling mistakes in your text, or even
    something that just sounds a bit *off*. They can also quickly flag up anything
    about your app's content that's inappropriate, confusing, or difficult for them
    to relate to.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 获得真实世界的反馈总是很有价值，但当你计划进行国际发布时，这种反馈变得更加宝贵。母语者能够轻松地指出你文本中的任何语法或拼写错误，甚至是一些听起来有点*不自然*的地方。他们还可以迅速指出关于你的应用内容的不适当、令人困惑或难以与他们产生共鸣的任何问题。
- en: This is all invaluable feedback that can help you perfect the localized versions
    of your app and create something that feels like it was created specifically for
    this section of your target audience, rather than a translation that was knocked
    together in a last-minute bid to rack up some extra downloads.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 这都是非常有价值的反馈，可以帮助您完善应用的本地化版本，并创建出感觉像是专门为您的目标受众群体中的这一部分人量身定制的应用，而不是一个匆忙拼凑的翻译，目的是为了增加一些额外的下载量。
- en: If you're looking to launch a beta testing program, then Google Play can help.
    After you sign into Developer Console and upload your APK, you can set up groups
    of users for beta testing.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想启动一个测试版测试程序，那么Google Play可以提供帮助。在您登录到开发者控制台并上传APK后，您可以设置用于测试版测试的用户组。
- en: 'You may want to start small with a closed beta test, where you specify a group
    of testers by entering their Gmail addresses. If you happen to have a list of
    testers to hand, you can launch a closed beta program by doing the following:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想从小规模的封闭测试版开始，通过输入他们的Gmail地址来指定一组测试者。如果您手头有一份测试者名单，您可以通过以下步骤启动一个封闭测试版程序：
- en: Log in to the Developer Console and selecting **APK** from the left-hand side
    menu.
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到开发者控制台，并从左侧菜单选择**APK**。
- en: Select the **Upload your first APK to beta** button and following the onscreen
    instructions to upload your APK.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**上传您的第一个APK到测试版**按钮，并按照屏幕上的说明上传您的APK。
- en: Once your APK is uploaded, select **Beta testing**.
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您的APK上传完成，选择**测试版测试**。
- en: If you see a **Choose a testing method** option, open the accompanying drop-down
    menu and select **Set Up Closed Beta Listing**, followed by **Create list**.
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你看到**选择测试方法**选项，打开相关的下拉菜单，选择**设置封闭测试版列表**，然后选择**创建列表**。
- en: Enter the e-mail addresses of all the people who you want to participate in
    the beta test. Click on **Save**.
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入所有你想参与测试的人的电子邮件地址。点击**保存**。
- en: Copy **Beta opt-in URL**. You can then share this link with your testers. When
    a potential tester clicks this link, they'll see an explanation about what being
    a beta tester entails. They can then decide whether to participate in the test
    or not.
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制**Beta opt-in URL**。然后你可以将此链接与你的测试者分享。当潜在测试者点击此链接时，他们会看到关于成为测试者所涉及内容的说明。然后他们可以决定是否参与测试。
- en: After copying **Beta opt-in URL**, you'll need to enter an e-mail address or
    URL that you'll use to collect feedback from your testers. Enter this information
    in the **Feedback channel** field, then click on **Save**.
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在复制**Beta opt-in URL**后，你需要输入一个电子邮件地址或URL，你将使用它来收集测试者的反馈。在**反馈渠道**字段中输入此信息，然后点击**保存**。
- en: Tip
  id: totrans-368
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Gathering tester feedback**'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '**收集测试者反馈**'
- en: Since testers can't leave reviews on your app's Google Play page, you'll need
    to provide them with an alternative way of sending you their feedback. Whenever
    you launch a testing program through Developer Console, it's crucial you complete
    the **Feedback channel** field as this is your testers' primary way of communicating
    with you.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 由于测试者不能在你的应用Google Play页面上留下评论，你需要为他们提供一种发送反馈给你的替代方式。每次你通过开发者控制台启动测试计划时，完成**反馈渠道**字段至关重要，这是你的测试者与你沟通的主要方式。
- en: This feedback channel could take the form of an address or URL, but you may
    also want to consider setting up a Google+ page or Google Group for your testers.
    Whatever your preferred method of gathering feedback, it's important to recognize
    that anyone who tests your app is doing you a favor, so you should make it as
    easy as possible for them to send you their feedback.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 这个反馈渠道可以是地址或URL的形式，但你可能还想考虑为你的测试者设置一个Google+页面或Google Group。无论你首选的收集反馈方式是什么，重要的是要认识到，任何测试你的应用的人都在为你做善事，所以你应该尽可能让他们容易地发送反馈给你。
- en: If providing feedback feels like hard work, then your testers simply won't bother—they'll
    keep their thoughts to themselves, and your project will suffer as a result.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供反馈感觉像是一项艰巨的工作，那么你的测试者将不会费心——他们会将想法保留在自己心中，你的项目也因此受到影响。
- en: After a round of closed beta testing, you may want to move on to open beta testing,
    where you specify a maximum number of testers but don't specify their e-mail addresses.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 经过一轮封闭测试后，你可能想要进行公开测试，在那里你指定测试者的最大数量，但不需要指定他们的电子邮件地址。
- en: To launch an open beta testing program, make sure you're logged into Developer
    Console, and then select **APK** from the left-hand side menu. Select **Beta testing**,
    open the drop-down menu, select **Set up Open Beta Testing**, and then specify
    the maximum number of users who'll be able to beta test your app.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动公开测试计划，请确保你已登录开发者控制台，然后从左侧菜单中选择**APK**。选择**测试**，打开下拉菜单，选择**设置公开测试**，然后指定将能够测试你的应用的最大用户数量。
- en: Copy **Beta opt-in URL** and share it with your testers. Again, make sure you
    enter an e-mail address or URL in **Feedback channel**, and then click on **Save**.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 复制**Beta opt-in URL**并与你的测试者分享。再次确认，你已在**反馈渠道**中输入了电子邮件地址或URL，然后点击**保存**。
- en: Get ready for lift off!
  id: totrans-376
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备起飞！
- en: If you want your app to make a splash in the international market, supporting
    multiple languages and locales is just the beginning. You'll also need to devise
    some form of international marketing campaign.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想让你的应用在国际市场上引起轰动，支持多种语言和地区只是开始。你还需要制定某种形式的国际营销活动。
- en: This may sound like the kind of thing that requires a massive budget and a dedicated
    marketing team, but you can tailor the scope of your campaign to suit your budget
    and how much free time you have to promote your app. Even if your app is a one-person
    project, there's no end to budget-friendly (and in some cases, free) ways of promoting
    your app to an international audience, especially when you're promoting your app
    online.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能听起来像需要巨额预算和专门的营销团队的事情，但你可以根据你的预算和可用于推广应用的空闲时间来调整你活动的范围。即使你的应用是一个人的项目，也有无数种预算友好（在某些情况下，免费）的方式可以将你的应用推广给国际受众，尤其是在你在线推广应用时。
- en: A marketing campaign could be as simple as writing a press release announcing
    the release of your app, and then arranging for this text to be translated into
    the various languages your app supports. You could then spread your press release
    across the World Wide Web via social networks, free news and press release websites,
    your own blog, or any other places where you can post content for free.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 一场营销活动可能简单到撰写一份宣布您应用发布的新闻稿，然后安排将此文本翻译成您应用支持的各种语言。然后，您可以通过社交网络、免费新闻和新闻稿网站、您自己的博客或任何其他可以免费发布内容的平台来传播您的新闻稿。
- en: Note
  id: totrans-380
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Don't get carried away and post your marketing materials absolutely everywhere
    just for the sake of it. Spamming is only going to hurt your app's reputation
    in the long run.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 不要沉迷于将您的营销材料发布到各个地方，仅仅是为了发布。垃圾邮件只会从长远来看损害您应用的声誉。
- en: You should also translate any other promotional materials you create, such as
    banners, virtual badges, adverts, or memes.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应该翻译您创建的任何其他促销材料，例如横幅、虚拟徽章、广告或表情包。
- en: Even if your promotional graphics don't feature any text, you should still look
    for opportunities to tweak these graphics, so they're more likely to resonate
    with each of your target locales. For example, could you include any geographical
    or cultural references that would make your graphics more appealing to users in
    specific regions? In our recipe app example, this might mean identifying recipes
    that are more likely to appeal to sections of our target audience and then featuring
    these recipes more prominently in the app's promotional banners and adverts.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您的促销图形不包含任何文本，您也应该寻找机会调整这些图形，使它们更有可能与您的每个目标地区产生共鸣。例如，您是否可以包含任何会使特定地区的用户对您的图形更感兴趣的地理或文化参考？在我们的食谱应用示例中，这可能意味着确定可能更吸引我们目标受众一部分的食谱，然后在应用的促销横幅和广告中更突出地展示这些食谱。
- en: If you create any promotional videos, you should also create localized versions
    of these videos for every language your app supports. This may mean recording
    entirely new audio for every video or providing subtitles.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您创建任何促销视频，您还应该为您的应用支持的每种语言创建这些视频的本地化版本。这可能意味着为每个视频录制全新的音频或提供字幕。
- en: Remember, the key to attracting an international audience is to create the illusion
    that your app was designed with each user's specific locale in mind.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，吸引国际观众的关键是营造一种假象，即您的应用是为每个用户的特定地区设计的。
- en: Localize your Google Play store listing
  id: totrans-386
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地化您的Google Play商店列表
- en: Your app's Google Play listing is the first impression that international users
    will have of your app. To make sure this first impression is a positive one, you'll
    need to localize your store listing, which means translating its text for every
    locale your app supports.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用在Google Play上的列表是国际用户对您应用的第一个印象。为了确保这个第一印象是积极的，您需要本地化您的商店列表，这意味着为您的应用支持的每个地区翻译其文本。
- en: You can create multiple localized versions of your app's Google Play listing
    via Developer Console. Then, when a user opens your app's listing, Google Play
    will automatically determine that user's location, and it'll display the version
    of your listing that's the most appropriate for their language, country, or region
    settings. If Google Play can't find a suitable locale-specific version of your
    app's listing, it'll display your app's default Google Play page instead.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过开发者控制台创建您应用Google Play列表的多个本地化版本。然后，当用户打开您应用的列表时，Google Play将自动确定该用户的位置，并显示最适合他们语言、国家或地区设置的列表版本。如果Google
    Play找不到适合特定地区版本的您的应用列表，它将显示您应用的默认Google Play页面。
- en: To create localized Google Play listings, log into your Developer Console account,
    and select **App applications** from the left-hand side menu. Select the app you
    want to work with, followed by **Store listing**.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建本地化的Google Play列表，请登录您的开发者控制台账户，并从左侧菜单中选择**应用应用**。选择您要工作的应用，然后选择**商店列表**。
- en: 'To create a new, localized version, click on the **Manage translations** button.
    At this point, you can purchase a translation by clicking on **Purchase translations**
    and following the onscreen instructions:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的本地化版本，请点击**管理翻译**按钮。在此阶段，您可以通过点击**购买翻译**并遵循屏幕上的说明来购买翻译：
- en: '![Localize your Google Play store listing](img/B05061_8_4.jpg)'
  id: totrans-391
  prefs: []
  type: TYPE_IMG
  zh: '![本地化您的Google Play商店列表](img/B05061_8_4.jpg)'
- en: If you already have some translated text you want to add to your localized store
    listing, select **Add your own translation**. Select all the languages you want
    to create a localized listing for (don't worry, you can always add more later
    on), and click on **Add**.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经有一些想要添加到您本地化商店列表中的翻译文本，请选择**添加自己的翻译**。选择您想要创建本地化列表的所有语言（不用担心，您稍后总是可以添加更多），然后点击**添加**。
- en: At this point, Developer Console will take you back to the store listing form,
    but now, if you click on the **Languages** button, you'll see a drop-down list
    of all the languages you've just added. Clicking on any of these languages will
    take you to a separate form where you can craft an entirely new store listing,
    which will be displayed whenever someone views your app in Google Play with these
    locale settings.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，开发者控制台将带您回到商店列表表单，但现在，如果您点击**语言**按钮，您将看到所有您刚刚添加的语言的下拉列表。点击任何这些语言将带您到一个单独的表单，您可以在其中创建一个全新的商店列表，该列表将在有人使用这些区域设置在Google
    Play查看您的应用时显示。
- en: If you need to delete one of your localized pages at any point, simply click
    on the **Manage Translations** button, followed by **Remove translations**, and
    then choose the language you want to remove. If you want to change what version
    of your Google Play page is considered the default, click on the **Manage Translations**
    button again, and select **Change default language**.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在任何时候需要删除您的本地化页面之一，只需点击**管理翻译**按钮，然后选择**删除翻译**，接着选择您想要删除的语言。如果您想更改默认的Google
    Play页面版本，请再次点击**管理翻译**按钮，并选择**更改默认语言**。
- en: Creating a localized store listing isn't just about translating your app's description;
    you should also supply alternate graphics. Even when a user is viewing a localized
    version of your Google Play page, they may still be unsure whether your app actually
    supports their language. Don't leave any room for doubt; take screenshots of your
    UI in all the languages it supports, and then upload these screenshots to the
    corresponding version of your app's Google Play page.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 创建本地化商店列表不仅仅是翻译您应用的描述；您还应该提供替代图形。即使用户正在查看您Google Play页面的本地化版本，他们也可能仍然不确定您的应用是否真的支持他们的语言。不要留下任何疑问的空间；为支持的所有语言截图您的UI，然后将这些截图上传到您应用Google
    Play页面对应的版本。
- en: Note
  id: totrans-396
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As you're building your app's Google Play page, Developer Console will offer
    hints about how your app can reach the widest possible audience. These tips contain
    some useful information, so make sure you check them out by selecting **Optimization
    Tips** from the left-hand side menu.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 当您构建您应用的Google Play页面时，开发者控制台将提供有关如何让您的应用触及最广泛受众的提示。这些提示包含一些有用的信息，所以请确保您通过从左侧菜单选择**优化提示**来查看它们。
- en: After launching your project
  id: totrans-398
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在您的项目发布后
- en: The hard work doesn't end when you successfully launch your app. Once you hit
    the **Publish** button and send your app out into the big wild world, there's
    a whole new bunch of things you can do to help that app reach the widest possible
    audience.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 当您成功发布您的应用后，艰苦的工作并没有结束。一旦您点击**发布**按钮并将您的应用发送到广阔的野生世界，您就可以做很多事情来帮助该应用触及最广泛的受众。
- en: Following a successful launch – supporting international users
  id: totrans-400
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在成功发布后——支持国际用户
- en: Once you've attracted an international audience, you need to hang on to that
    audience—which means offering support in a variety of languages.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您吸引了国际受众，您需要保持这个受众——这意味着提供多种语言的支持。
- en: Exactly how much support you can offer will vary depending on whether you have
    created your app as part of a team, or whether you're a solo developer creating
    Android apps in your spare time. But offering *some* level of support is crucial
    if you're going to hang on to the users that you worked so hard to gain in the
    first place.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以提供多少支持将取决于您是否将您的应用作为团队的一部分创建，或者您是否是一个在业余时间创建Android应用的独立开发者。但提供*某种*级别的支持对于您能否保留您最初如此努力获得的用户至关重要。
- en: At the very least, you should monitor your app's Google Play reviews. The Google
    Play store helpfully translates all reviews for you, and you should try and respond
    to any question or suggestions that come in via Google Play, regardless of the
    language they're written in.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 至少，您应该监控您应用的Google Play评论。Google Play商店会方便地为您翻译所有评论，并且您应该尝试回复通过Google Play收到的任何问题或建议，无论它们是用什么语言写的。
- en: Wherever possible, you should respond to Google Play reviews in the poster's
    language, even if it means resorting to an online translation tool. Just be aware
    that translation tools tend to generate responses that are a little *off,* so
    it's a good idea to let users know that you're using a translation tool, just
    so they know to overlook any clunky phrasing or grammatical errors.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 在可能的情况下，你应该用评论者的语言回复Google Play评论，即使这意味着需要求助于在线翻译工具。但请注意，翻译工具往往会生成一些不太准确的结果，所以让用户知道你正在使用翻译工具是个好主意，这样他们就可以忽略任何笨拙的措辞或语法错误。
- en: Tip
  id: totrans-405
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Create a Google Play badge**'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建Google Play徽章**'
- en: Once you app is live, your goal is to drive as many people to its Google Play
    page as possible. One way of doing this is to create a Google Play badge. Whenever
    someone clicks on this badge, it'll take them direct to your app's Google Play
    listing.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的应用上线，你的目标就是尽可能地将尽可能多的人引导到其Google Play页面。实现这一目标的一种方式是创建一个Google Play徽章。每当有人点击这个徽章时，它就会直接带他们到你的应用在Google
    Play上的列表。
- en: You can post this badge anywhere you want—on your website, blog, social media
    accounts, or you can incorporate it into your e-mail signature. Just don't get
    carried away; no-one likes a spammer, and spamming your app's Play badge isn't
    going to earn your app a loyal following in the long run.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在任何你想的地方发布这个徽章——在你的网站、博客、社交媒体账户上，或者你可以将其整合到你的电子邮件签名中。但请记住，不要过度宣传；没有人喜欢垃圾邮件发送者，而且长期来看，垃圾邮件发送你的应用Play徽章并不会为你赢得忠实的追随者。
- en: You can create a badge using the Google Play Badges generator ([https://play.google.com/intl/en_us/badges](https://play.google.com/intl/en_us/badges)).
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用Google Play徽章生成器创建徽章（[https://play.google.com/intl/en_us/badges](https://play.google.com/intl/en_us/badges)）。
- en: Monitor your app's international performance
  id: totrans-410
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 监控你应用的国际表现
- en: When you support multiple locales, your app is inevitability going to be more
    popular in one part of the world than it is in others. There's a whole host of
    reasons why this might be the case, ranging from things you can control (such
    as the quality of your translations), to thing you *can't* control (such as a
    rival app that's already dominating the market in one of your target locales).
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 当你支持多个地区时，你的应用不可避免地会在世界上的某个地区比其他地区更受欢迎。这可能有各种各样的原因，从你可以控制的事情（比如你翻译的质量），到你不能控制的事情（比如在某个目标地区市场上已经占据主导地位的竞争对手应用）。
- en: Having a clear picture of your app's popularity across all supported locales
    is essential for identifying areas where you need to focus more time and effort,
    and areas where it might make more sense to scale back your efforts or even stop
    supporting them completely.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 对你支持的所有地区中应用受欢迎程度的清晰了解对于确定你需要投入更多时间和精力的领域以及可能需要减少努力或甚至完全停止支持的领域至关重要。
- en: If your app is proving massively popular in one locale, you may decide to put
    increased effort into meeting the needs of this part of your demographic, such
    as performing more market research in this area, creating localized content specifically
    for these users, or even creating language-specific user groups, such as a Google+
    community, LinkedIn group, or Facebook page.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用在某个地区非常受欢迎，你可能会决定投入更多精力来满足这部分受众的需求，比如在这个地区进行更多市场研究，为这些用户创建本地化内容，甚至创建特定语言的用户群体，例如Google+社区、LinkedIn群组或Facebook页面。
- en: So, how do you identify locales where users *love* your app? Developer Console
    provides stats about the number of downloads, installs, and uninstalls that your
    app is racking up across all the different locales it supports. To access this
    information, log in to your Developer Console account, select the app you want
    to investigate, and then select **Statistics** from the left-hand side menu.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，你如何确定用户喜爱的地区呢？开发者控制台提供了关于你的应用在所有支持地区累积的下载量、安装量和卸载量的统计数据。要访问这些信息，请登录到你的开发者控制台账户，选择你想要调查的应用，然后从左侧菜单中选择**统计信息**。
- en: But, let's be realistic, these stats aren't always going to be good news, and
    sometimes they may reveal that your app is struggling to attract users in certain
    locales. If this is the case, then you should try and figure out what might be
    hindering your app's success.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，让我们现实一点，这些统计数据并不总是好消息，有时它们可能会揭示你的应用在某些地区难以吸引用户。如果是这种情况，那么你应该试图找出可能阻碍你的应用成功的原因。
- en: It might be something that you can fix, such as a less-than-perfect translation,
    or the fact that your app has hardware, software, or screen configuration requirements
    that aren't representative of the Android devices commonly used in this locale.
    However, the problem may be something that isn't quite so easy to fix, such as
    a lack of interest in your app's genre or subject matter, or a rival app that's
    already dominating the marketplace.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是一些你可以解决的问题，比如不够完美的翻译，或者你的应用对硬件、软件或屏幕配置的要求并不代表这个地区常用的Android设备。然而，问题可能是一些不太容易解决的问题，比如对你应用类型或主题缺乏兴趣，或者已经占据市场主导地位的有竞争力的应用。
- en: Depending on the reasons behind your app's poor performance, you may decide
    to try and address the issue, or you may decide that it makes more sense to drop
    support for this particular locale and redirect the time and effort into areas
    where your app has already found an enthusiastic audience.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你应用性能不佳背后的原因，你可能决定尝试解决这个问题，或者你可能认为放弃对这个特定地区的支持，将时间和精力投入到你的应用已经找到热情受众的领域更有意义。
- en: Just remember that launching your app internationally is only phase one. If
    your app is going to find global success, then you'll have to make an ongoing
    effort to support users from all over the world, as well as continuously monitor
    how your app is faring in all the different locales.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 只需记住，将你的应用国际化只是第一阶段。如果你的应用想要取得全球成功，那么你必须持续努力支持来自世界各地的用户，并持续监控你的应用在所有不同地区的表现。
- en: Summary
  id: totrans-419
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at how to reach the widest possible audience, from
    supporting different versions of the Android operating system, to optimizing your
    app for different hardware, software, screen sizes, screen densities, and orientations.
    We even covered translating our app into different languages. We also touched
    on how to promote your app via advertising and marketing campaigns.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了如何触及尽可能广泛的受众，从支持不同的Android操作系统版本，到优化你的应用以适应不同的硬件、软件、屏幕尺寸、屏幕密度和方向。我们甚至涵盖了将我们的应用翻译成不同语言的内容。我们还简要介绍了如何通过广告和营销活动推广你的应用。
- en: Now that you know how to attract an audience, in the next chapter, we'll look
    at how to wow this audience by optimizing our app's UI.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道了如何吸引受众，在下一章中，我们将探讨如何通过优化我们应用的UI来让这个受众感到惊艳。
