- en: Chapter 15. Swift Formatting and Style Guide
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第15章. Swift 格式和风格指南
- en: Throughout my development experience, every time I learned a new programming
    language, there was usually some mention of how code for that language should
    be written and formatted. Early in my development career (which was a long time
    ago), these recommendations were very basic formatting recommendations, such as
    how to indent your code, or just having one statement per line. It really wasn't
    until the last 10 to 12 years that I started to see complex and detailed formatting
    and style guides for different programming languages. Today, you will be hard
    pressed to find a development shop with more than two or three developers who
    did not have style/formatting guides for each language that they use. Even companies
    that do not create their own style guides generally refer back to some standard
    guide published by other companies, such as Google, Oracle, or Microsoft. These
    style guides help teams to write consistent and easy-to-maintain code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的开发经验中，每次我学习一门新的编程语言时，通常都会提到如何编写和格式化该语言的代码。在我的开发生涯早期（那是很久以前），这些推荐都是非常基础的格式化建议，比如如何缩进代码，或者每行只写一个语句。实际上，直到最近10到12年，我才开始看到不同编程语言的复杂和详细的格式和风格指南。如今，很难找到一个只有两三个开发者而没有为每种语言制定风格/格式指南的开发团队。即使那些没有创建自己风格指南的公司，通常也会参考其他公司发布的某些标准指南，如Google、Oracle或Microsoft。这些风格指南帮助团队编写一致且易于维护的代码。
- en: What is a programming style guide?
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是编程风格指南？
- en: Coding styles are very personal and every developer has his or her own preferred
    style. These styles can vary from language to language, person to person, and
    also change over time. The personal nature of coding styles can make it difficult
    to have a consistent and readable code base when numerous individuals are contributing
    to the code.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 编程风格非常个人化，每个开发者都有自己的首选风格。这些风格可以从语言到语言、从人到人，甚至随时间而变化。编程风格的个人性质使得在众多个人贡献代码时，保持一致的、易于阅读的代码库变得困难。
- en: While most developers might have their own preferred styles, the recommended
    or preferred style between languages can vary. As an example, in C#, when we name
    a method or function, it is preferred to use camel case with the first letter
    being capitalized. While in most languages, such as C, Objective-C, and Java,
    it is also recommended that we use camel case, but we should make the first letter
    lower case.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然大多数开发者可能都有自己的首选风格，但不同语言之间推荐或首选的风格可能有所不同。例如，在C#中，当我们命名一个方法或函数时，首选使用驼峰式命名法，首字母大写。而在大多数语言中，如C、Objective-C和Java，也推荐使用驼峰式命名法，但我们应该将首字母小写。
- en: The best applications are coded properly, and by properly, we do not just mean
    that they function correctly but also that they are easy to maintain and the code
    is easy to read. It is hard for large projects and companies with a large number
    of developers to have code that is easy to maintain and read if every developer
    uses their own coding style. This is why companies and projects with multiple
    developers usually adopt programming style guides for each language that they
    use.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳的应用程序都是编写得当的，而所谓的“得当”，并不仅仅是指它们能够正确运行，还意味着它们易于维护，代码易于阅读。如果每个开发者都使用自己的编码风格，那么对于大型项目和拥有大量开发者的公司来说，要拥有易于维护和阅读的代码是非常困难的。这就是为什么拥有多个开发者的公司和项目通常会为使用的每种语言采用编程风格指南。
- en: A programming style guide defines a set of rules and guidelines that a developer
    should follow while writing applications with a specific language within a project
    or company. These style guides can differ greatly between companies or projects
    and reflect how that company or project expects code to be written. These guides
    can also change over time. It is important to follow these style guides to maintain
    a consistent code base.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 编程风格指南定义了一套规则和指南，开发者在编写项目或公司内部特定语言的程序时应该遵循这些规则和指南。这些风格指南在公司或项目之间可能差异很大，反映了该公司或项目期望代码的编写方式。这些指南也可能随时间而变化。遵循这些风格指南对于保持一致的代码库非常重要。
- en: A lot of developers do not like the idea of being told how they should write
    code, and claim that as long as their code functions correctly, why should it
    matter how they format their code. I link this to a basketball team. If all of
    the players come in believing that how they want to play is correct and believe
    that the team is better when they are doing their own thing, then that team is
    probably going to lose the majority of their games. It is impossible for a basketball
    team (or any sports team, for that matter) to win the majority of their games
    unless they are working together. It is up to the coach to make sure that everyone
    is working together and executing the same game plan, just like it is up to the
    team leader of the development project to make sure all the developers are writing
    code according to the adopted style guide.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发者不喜欢被告知应该如何编写代码的想法，并声称只要他们的代码能正确运行，为什么他们的代码格式很重要。我把这比作一个篮球队。如果所有球员都认为他们想要的方式是正确的，并认为当他们在做自己想做的事情时，球队会更好，那么这个球队很可能会输掉大多数比赛。一个篮球队（或者任何运动队，无论如何）除非他们一起工作，否则不可能赢得大多数比赛。确保每个人都在一起工作并执行相同的比赛计划的责任在于教练，就像开发项目的团队领导确保所有开发者都按照采用的风格指南编写代码一样。
- en: Your style guide
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您的风格指南
- en: The style guide that we define in this book is just a guide. It reflects the
    author's opinion on how Swift code should be written and is meant to be a good
    starting point for creating your own style guide. If you really like this guide
    and adopt it as it is, great. If there are parts that you do not agree with and
    you change them within your guide, that is great as well. The appropriate style
    for you and your team is the one that you and your team feel comfortable with,
    and it may or may not be different from the guide in this book. We should also
    point out that Swift is a very young language and people are still trying to figure
    out the appropriate style to use with Swift; therefore, what is recommended today
    maybe frowned upon tomorrow. Don't be afraid to adjust your style guide as needed.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中定义的风格指南只是一个指南。它反映了作者对如何编写Swift代码的看法，并旨在成为创建您自己的风格指南的良好起点。如果您真的喜欢这个指南并直接采用它，那很好。如果您不同意其中的某些部分并在您的指南中进行了修改，那也很好。您和您的团队感到舒适的风格就是最适合您和您的团队的风格，它可能与本书中的指南不同。我们也应该指出，Swift是一种非常年轻的语言，人们仍在努力找出与Swift一起使用的适当风格；因此，今天推荐的东西明天可能就会受到批评。不要害怕根据需要调整您的风格指南。
- en: One thing that is noticeable in the style guide within this chapter, and most
    good style guides, is that there is very little explanation about why each item
    is preferred or not preferred. Style guides should give enough details so that
    the reader understands the preferred and non-preferred methods for each item,
    but should also be small and compact to make it easy and quick to read.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的风格指南中，以及大多数好的风格指南中，一个值得注意的事情是，对为什么每个项目被优先考虑或不被优先考虑的解释非常少。风格指南应该提供足够的细节，以便读者了解每个项目的优先和非优先方法，但同时也应该小巧紧凑，以便于阅读和理解。
- en: If a developer has questions about why a particular method is preferred, he
    or she should bring that concern up to the development group.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果开发者对为什么某个特定方法被优先考虑有疑问，他或她应该将这个疑问提出给开发团队。
- en: With that in mind, let's get started with the guide.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，让我们开始编写指南。
- en: Do not use semicolons at the end of statements
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不要在语句末尾使用分号
- en: 'Unlike a lot of languages, Swift does not require semicolons at the end of
    statements. Therefore, we should not use them. Let''s take a look at the following
    code:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与许多语言不同，Swift不需要在语句末尾使用分号。因此，我们不应该使用它们。让我们看看以下代码：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Do not use parentheses for conditional statements
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不要为条件语句使用括号
- en: 'Unlike a lot of languages, the parentheses are not required around conditional
    statements; therefore, we should avoid using them unless they are needed for clarification.
    Let''s take a look at the following code:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 与许多语言不同，条件语句周围不需要括号；因此，除非需要澄清，否则我们应该避免使用它们。让我们看看以下代码：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Naming
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名
- en: We should always use descriptive names with camel case for classes, methods,
    variables, constants, and so on. Let's look at some general naming rules.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该始终使用描述性的名称，并使用驼峰式命名法为类、方法、变量、常量等命名。让我们看看一些通用的命名规则。
- en: Classes
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类
- en: 'Class names should have a descriptive name that describes what the class is
    for. The name should begin with a capital letter and be in camel case. Here are
    examples of proper names and non-proper names based on our style guide:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 类名应该有一个描述性的名称，描述类的作用。名称应该以大写字母开头，并使用驼峰式命名法。以下是根据我们的风格指南提供的正确名称和非正确名称的示例：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Functions and methods
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数和方法
- en: 'Function names should be descriptive, describing the function or method. They
    should begin with a lowercase letter and be in camel case. Here are some examples
    of proper and non-proper names:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 函数名应该是描述性的，描述函数或方法。它们应该以小写字母开头，并使用驼峰式命名法。以下是一些正确名称和非正确名称的示例：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Constants and variables
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 常量和变量
- en: 'Constants and variables should have a descriptive name. Generally, they begin
    with a lowercase letter and are in camel case. The only exception is when the
    constant is global; in that case, the name of the constant should contain all
    the uppercase characters with the words separated by underscores. I have seen
    numerous guides that frown on having all uppercase names, but I personally like
    them for constants in the global scope because it stands out that they are globally,
    not locally, scoped. Here are some examples of proper and non-proper names:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 常量和变量应该有一个描述性的名称。通常，它们以小写字母开头，并使用驼峰式命名法。唯一的例外是当常量是全局的；在这种情况下，常量的名称应包含所有大写字母，单词之间用下划线分隔。我见过许多指南都反对使用全部大写名称，但我个人喜欢在全局作用域中的常量使用它们，因为它们突出显示了它们是全局作用域，而不是局部作用域。以下是一些正确名称和非正确名称的示例：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Indenting
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缩进
- en: 'The indenting width in Xcode, by default, is defined as four spaces, and the
    tab width is also defined as four spaces. We should leave this as the default.
    The following screenshot shows the indentation setting in Xcode:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode 中的缩进宽度默认定义为四个空格，制表符宽度也定义为四个空格。我们应该将其保留为默认设置。以下截图显示了 Xcode 中的缩进设置：
- en: '![Indenting](img/B05115_15_01.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![缩进](img/B05115_15_01.jpg)'
- en: We should also add an extra blank line between functions/methods. We should
    also use a blank line to separate the functionality within a function or method.
    That being said, using many blank lines within a function or method might signify
    that we should break the function into multiple functions.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还应该在函数/方法之间添加一个额外的空行。我们还应该使用空行来分隔函数或方法内的功能。换句话说，在函数或方法中使用过多的空行可能意味着我们应该将函数分解成多个函数。
- en: Comments
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注释
- en: 'We should use comments as needed to explain how and why our code is written.
    We should use block comments before classes and functions, while we should use
    the double slashes to comment code in line. Here is an example of how to write
    comments:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该根据需要使用注释来解释我们的代码是如何和为什么被编写的。我们应该在类和函数之前使用块注释，而我们应该使用双斜杠来注释行内代码。以下是如何编写注释的示例：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When we are commenting methods, we should also use the documentation tags that
    will generate documentation in Xcode, as shown in the preceding example. At a
    minimum, we should use the following tags if they apply to our method:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们评论方法时，我们也应该使用会在 Xcode 中生成文档的文档标签，正如前一个示例所示。至少，如果这些标签适用于我们的方法，我们应该使用以下标签：
- en: '`:param`: This is used for parameters'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:param`: 这用于参数'
- en: '`:return`: This is used for what is returned'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:return`: 这用于返回的内容'
- en: Using the self keyword
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 self 关键字
- en: 'Since Swift does not require us to use the `self` keyword when accessing properties
    or invoking methods of an object, we should avoid using it unless we need to distinguish
    between an object''s property and local variables. Here is an example of when
    you should use the `self` keyword:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Swift 不要求我们在访问对象的属性或调用对象的方法时使用 `self` 关键字，因此除非我们需要区分对象的属性和局部变量，否则我们应该避免使用它。以下是一个应该使用
    `self` 关键字的示例：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here is an example of when not to use the `self` keyword:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个不使用 `self` 关键字的示例：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Types
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型
- en: 'We should always use Swift native types when possible. If we remember, Swift
    offers bridging to Objective-C types, so even if we are using a Swift native type,
    we still have access to the full set of methods offered by Objective-C types.
    The following code shows the preferred and non-preferred ways to use native types:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在可能的情况下，我们应该始终使用 Swift 原生类型。如果我们记得，Swift 提供了与 Objective-C 类型的桥接，所以即使我们使用 Swift
    原生类型，我们仍然可以访问 Objective-C 类型提供的全部方法集。以下代码显示了使用原生类型的推荐和非推荐方式：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Constants and variables
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常量和变量
- en: The difference between constants and variables is that the value of a constant
    never changes, whereas the value of a variable may change. Wherever possible,
    we should define constants rather than variables.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 常量与变量的区别在于常量的值永远不会改变，而变量的值可能会改变。 wherever possible，我们应该定义常量而不是变量。
- en: One of the easiest ways of doing this is to define everything as a constant,
    by default, and then change the definition to a variable only after you reach
    a point in your code that requires you to change it. With Swift 2, you will get
    a warning if you define a variable and then never change the value within your
    code.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 做这件事最简单的方法是将所有内容默认定义为常量，然后在代码中达到需要更改的点后再将其定义为变量。使用 Swift 2，如果你定义了一个变量但从未在代码中更改其值，你会收到一个警告。
- en: Optional types
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可选类型
- en: Only use optional types when absolutely necessary. If there is no absolute need
    for a nil value to be assigned to a variable, we should not define it as an optional.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在绝对必要时才使用可选类型。如果没有绝对必要将 nil 值分配给变量，我们就不应该将其定义为可选的。
- en: Use optional binding
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用可选绑定
- en: We should avoid forced unwrapping of optionals as there is rarely any need to
    do this. We should prefer optional binding or optional chaining for force unwrapping.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该避免强制解包可选值，因为这很少是必要的。我们应该优先选择可选绑定或可选链来强制解包。
- en: 'The following examples show the preferred and non-preferred methods where the
    `myOptional` variable is defined as an optional:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了定义 `myOptional` 变量为可选时的首选和非首选方法：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If there is more than one optional that we need to unwrap, we should include
    them on the same line rather than unwrapping them on separate lines if our business
    logic does not require separate paths if the unwrapping fails. The following examples
    show the preferred and non-preferred methods:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要解包多个可选值，我们应该在相同的一行中包含它们，而不是在单独的行中解包，除非我们的业务逻辑不需要在解包失败时采取不同的路径。以下示例显示了首选和非首选方法：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Use optional chaining over optional binding for multiple unwrapping
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用可选链而不是可选绑定进行多次解包
- en: 'When we need to unwrap multiple layers, we should use optional chaining over
    multiple optional binding statements. The following example shows the preferred
    and non-preferred methods:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要解包多层时，我们应该使用可选链而不是多个可选绑定语句。以下示例显示了首选和非首选方法：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Use type inference
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用类型推断
- en: 'Rather than defining the variable types, we should let Swift infer the type.
    The only time we should define the variable or constant type is when we are not
    giving it a value while defining it. Let''s take a look at the following code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不应该定义变量类型，而应该让 Swift 推断类型。我们只有在定义变量或常量时没有为其赋值的情况下才应该定义变量或常量类型。让我们看看以下代码：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Use shorthand declaration for collections
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用集合的简写声明
- en: 'When declaring native Swift collection types, we should use the shorthand syntax,
    and unless absolutely necessary, we should initialize the collection. The following
    example shows the preferred and non-preferred methods:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当声明原生 Swift 集合类型时，我们应该使用简写语法，除非绝对必要，否则我们应该初始化集合。以下示例显示了首选和非首选方法：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Use for-in loops over for loops
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 `for-in` 循环而不是 `for` 循环
- en: 'We should use `for-in` loops over `for` loops, especially when looping through
    collections. The following examples show the preferred and non-preferred methods:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该使用 `for-in` 循环而不是 `for` 循环，尤其是在遍历集合时。以下示例显示了首选和非首选方法：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Use switch rather than multiple if statements
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 switch 而不是多个 if 语句
- en: 'Wherever possible, we should prefer to use a single `switch` statement over
    multiple `if` statements. The following example shows the preferred and non-preferred
    methods:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: wherever possible，我们应该优先使用单个 `switch` 语句而不是多个 `if` 语句。以下示例显示了首选和非首选方法：
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Don't leave commented-out code in your application
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不要在应用程序中留下注释掉的代码
- en: If we comment out a block of code while we attempt to replace it, once we are
    comfortable with the changes, we should remove the code that we commented out.
    Having large blocks of code commented out can make the code base look messy and
    harder to follow.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在尝试替换代码块时将其注释掉，一旦我们对更改感到满意，我们应该移除我们注释掉的代码。大量注释掉的代码块会使代码库看起来杂乱无章，难以跟踪。
- en: Grand Central Dispatch
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 大中央调度
- en: Grand Central Dispatch, which was discussed in [Chapter 14](ch14.html "Chapter 14. Concurrency
    and Parallelism in Swift"), *Concurrency and Parallelism in Swift*, is a low-level
    C-based API that allows specific tasks to be queued up for execution and schedules
    the execution on any of the available processor cores.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第14章](ch14.html "第14章。Swift中的并发与并行")中讨论的Grand Central Dispatch，*Swift中的并发与并行*，是一个基于C的低级API，它允许将特定任务排队执行，并在任何可用的处理器核心上调度执行。
- en: Set the attribute in the dispatch_queue_create() function
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在`dispatch_queue_create()`函数中设置属性
- en: 'When using the `dispath_queue_create()` function to create a serial queue,
    we are able to set the `attribute` parameter to `nil` (which defines a serial
    queue); however, we should always set the attribute to `DISPATCH_QUEUE_SERIAL`
    or `DISPATCH_QUEUE_CONCURRENT` to explicitly define what type of queue we are
    creating. The following example shows the preferred and non-preferred methods:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`dispath_queue_create()`函数创建一个串行队列时，我们可以将`attribute`参数设置为`nil`（这定义了一个串行队列）；然而，我们应该始终将属性设置为`DISPATCH_QUEUE_SERIAL`或`DISPATCH_QUEUE_CONCURRENT`以明确定义我们正在创建的队列类型。以下示例显示了首选和非首选方法：
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Use a reverse DNS name for the tag parameter of the dispatch_queue_create()
    function
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为`dispatch_queue_create()`函数的标签参数使用反向DNS名称
- en: 'We are able to set the `tag` parameter of the `dispatch_queue_create` function
    to any valid string; however, for consistency and easy troubleshooting, we should
    always use a reverse DNS naming scheme. The following code shows the preferred
    and non-preferred methods:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将`dispatch_queue_create`函数的`tag`参数设置为任何有效的字符串；然而，为了保持一致性和易于故障排除，我们应该始终使用反向DNS命名方案。以下代码显示了首选和非首选方法：
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Use dispatch_get_global_queue() over dispatch_queue_create()
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`dispatch_get_global_queue()`而不是`dispatch_queue_create()`
- en: 'While it is perfectly acceptable to use the `dispatch_queue_create()` function
    to create a new concurrent queue, we should prefer to use the `dispatch_get_global_queue()`
    function to retrieve a concurrent queue that is already created for use. The following
    examples show the preferred and non-preferred methods:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然使用`dispatch_queue_create()`函数创建一个新的并发队列是完全可接受的，但我们应更倾向于使用`dispatch_get_global_queue()`函数来检索一个已经创建并可供使用的并发队列。以下示例显示了首选和非首选方法：
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Summary
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: When we are developing an application in a team environment, it is important
    to have a well-defined coding style that everyone on the team adheres to. This
    allows us to have a code base that is easy to read and maintain.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在团队环境中开发应用程序时，拥有一个明确的编码风格，团队中的每个人都遵守，是非常重要的。这使我们能够拥有一个易于阅读和维护的代码库。
- en: If a style guide remains static for too long, it means that it is probably not
    keeping up with the latest changes within the language. What is too long is different
    for each language. For example, with the C language, too long will be defined
    in years, since the language is very stable; however, with Swift, the language
    is so new and changes are coming pretty often, so too long can probably be defined
    as a couple of months.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个风格指南保持静态时间过长，这意味着它可能没有跟上语言中的最新变化。过长的时间因语言而异。例如，对于C语言，过长的时间将以年为单位定义，因为语言非常稳定；然而，对于Swift，语言非常新，变化来得相当频繁，所以过长的时间可能被定义为几个月。
- en: It is recommended that we keep our style guides in a versioning control system
    so that we can refer to the older versions if need be. This allows us to pull
    the older versions of the style guide and refer back to them when we are looking
    at older code.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 建议我们将我们的风格指南保存在版本控制系统中，这样我们就可以在需要时参考旧版本。这允许我们在查看旧代码时检索旧版本的风格指南。
