- en: Chapter 7. Interface Builder and WebView – More Goodies!
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章。接口构建器和 WebView – 更多好东西！
- en: '*"Time is precious; waste it wisely."*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*"时间宝贵；明智地利用它。"*'
- en: '*–*Anonymous**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*–*匿名**'
- en: In this chapter we will learn about some features of iOS development with RubyMotion.
    Xcode is a very advanced IDE and has many qualities, which we can exploit to develop
    faster and better iOS applications. In this chapter we will also learn how to
    use an **Interface Builder** for rapid development with RubyMotion. We will also
    have a look at some key elements of Xcode, such as `.xib`, `.nib`, and WebView,
    to create real-life interactive apps.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习一些使用 RubyMotion 进行 iOS 开发的功能。Xcode 是一个非常先进的 IDE，具有许多优点，我们可以利用这些优点来更快、更好地开发
    iOS 应用程序。在本章中，我们还将学习如何使用 **接口构建器** 进行 RubyMotion 的快速开发。我们还将查看 Xcode 的某些关键元素，例如
    `.xib`、`.nib` 和 WebView，以创建真实的交互式应用程序。
- en: Interface Builder
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接口构建器
- en: Xcode's Interface Builder allows you to create your application's user interface
    visually, instead of writing code. Interface Builder is a great tool that is very
    simple to use and is pivotal in making iOS development really fast. Therefore,
    the Interface Builder used along with RubyMotion further reduces development time.
    We can say these are two delicious recipes independently, but when used together,
    it's the ultimate formula to make beautiful iOS apps as quickly as possible.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode 的接口构建器允许您通过视觉方式创建应用程序的用户界面，而不是编写代码。接口构建器是一个非常简单易用的工具，对于使 iOS 开发变得非常快速至关重要。因此，与
    RubyMotion 一起使用的接口构建器进一步减少了开发时间。我们可以说这些是两个独立的美味食谱，但当它们一起使用时，就是制作美观的 iOS 应用程序的最快终极公式。
- en: Interface Builder comes with Xcode. Before we jump into using Interface Builder,
    it's important to understand that although Interface Builder creates the UI using
    the drag-and-drop mechanism, it is however not creating the Objective-C code behind
    the scene. It's creating an XML description of the GUI you're building, and the
    Cocoa Touch framework uses that XML to actually create the UI elements, such as
    label and textbox, for your application at runtime. Everything we do in Interface
    Builder could be done by writing lines of Ruby code—that's exactly what we have
    been doing from the beginning of this book—but shortly you will see how things
    get really easy with a GUI builder.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 接口构建器与 Xcode 一起提供。在我们跳入使用接口构建器之前，重要的是要理解，尽管接口构建器使用拖放机制创建 UI，但它实际上并没有在幕后创建 Objective-C
    代码。它创建的是您正在构建的 GUI 的 XML 描述，Cocoa Touch 框架使用该 XML 在运行时实际创建您的应用程序的 UI 元素，例如标签和文本框。我们在接口构建器中做的所有事情都可以通过编写
    Ruby 代码来完成——这正是我们从这本书开始一直在做的事情——但很快您将看到使用 GUI 构建器可以使事情变得多么简单。
- en: Note
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: XCode uses XML only for the editing stage, which is then compiled to nibs. Cocoa
    Touch never sees the XML source.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: XCode 仅在编辑阶段使用 XML，然后将其编译成 nibs。Cocoa Touch 从不看到 XML 源代码。
- en: Before we begin using Interface Builder, let's understand some jargon associated
    with XCode development. The GUI builder provides options to drag-and-drop buttons,
    table views, and text fields into your app window. The resulting interface is
    stored as a `.xib` file. A `.xib` file is an XML representation of your objects
    and their instance variables, and it is compiled into a `.nib` file when your
    application is built. The `.xib` file is easier to work with but the `.nib` file
    is smaller and easier to parse, that's why the file that actually ships with your
    application is a `.nib` file.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用接口构建器之前，让我们了解一些与 XCode 开发相关的术语。GUI 构建器提供了将按钮、表格视图和文本字段拖放到您的应用程序窗口中的选项。生成的界面存储为
    `.xib` 文件。`.xib` 文件是您的对象及其实例变量的 XML 表示，当您的应用程序构建时，它被编译成 `.nib` 文件。`.xib` 文件更容易处理，但
    `.nib` 文件更小且更容易解析，这就是为什么实际与您的应用程序一起发货的文件是 `.nib` 文件。
- en: Tip
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `.nib` file is short for NeXT Interface Builder.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`.nib` 文件代表 NeXT 接口构建器。'
- en: Let's try the Interface Builder
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让我们尝试接口构建器
- en: So far we have created the views for our **Restro** application views by writing
    code in Ruby. In this section, let's create a view using the GUI-based Interface
    Builder. We will create a **Contact Us** form and use it in our application.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经通过在 Ruby 中编写代码来创建我们的 **Restro** 应用程序视图。在本节中，让我们使用基于 GUI 的接口构建器创建一个视图。我们将创建一个
    **联系我们** 表单，并在我们的应用程序中使用它。
- en: 'The Interface Builder is integrated into Xcode, which is a one stop IDE for
    any Apple-related development, whether it''s for iOS devices or Mac. We will create
    a `.xib` file and then use this file in our RubyMotion project by performing the
    following steps:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 界面构建器集成到Xcode中，Xcode是一个适用于任何苹果相关开发的IDE，无论是用于iOS设备还是Mac。我们将创建一个`.xib`文件，然后通过以下步骤在RubyMotion项目中使用此文件：
- en: Open Xcode and click on **Create a new Xcode Project**.![Let's try the Interface
    Builder](img/5220OT_07_01.jpg)
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Xcode并点击**创建一个新的Xcode项目**。![尝试界面构建器](img/5220OT_07_01.jpg)
- en: Click on **Single View Application**, as we need only one `.xib` file.![Let's
    try the Interface Builder](img/5220OT_07_02.jpg)
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**单视图应用程序**，因为我们只需要一个`.xib`文件。![尝试界面构建器](img/5220OT_07_02.jpg)
- en: Enter this data in the project-creation wizard. Notice that we have selected
    the device as **iPhone**. We can also see the other options, such as **iPad**
    and **Universal**. If you want to create a single application to be used on both
    iPhone and iPad, use the **Universal** option from the drop-down list. Also, unselect
    the **Use Storyboards** option.![Let's try the Interface Builder](img/5220OT_07_03.jpg)
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目创建向导中输入这些数据。注意，我们已经选择了设备为**iPhone**。我们还可以看到其他选项，如**iPad**和**通用**。如果您想创建一个适用于iPhone和iPad的单个应用程序，请从下拉列表中选择**通用**选项。另外，取消选择**使用故事板**选项。![尝试界面构建器](img/5220OT_07_03.jpg)
- en: Save the project in a folder of your choice; your project will then be loaded
    in XCode. Click on `ViewController.xib` and you will be able to see the Interface
    Builder.![Let's try the Interface Builder](img/5220OT_07_04.jpg)
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将项目保存到您选择的文件夹中；您的项目将在XCode中加载。点击`ViewController.xib`，您将能够看到界面构建器。![尝试界面构建器](img/5220OT_07_04.jpg)
- en: 'The Interface Builder has a fairly simple layout; it consists of four main
    windows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 界面构建器有一个相当简单的布局；它由四个主要窗口组成：
- en: View
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图
- en: Library
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库
- en: Document browser
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档浏览器
- en: Inspector
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查器
- en: The View window is where you construct your interface. You will drag-and-drop
    items from the Library window onto the View window to place them. The document
    browser allows you to browse hierarchically the elements you have placed in your
    `.nib` file. Finally, the Inspector window shows you all of the different attributes
    of the selected element and allows you to edit them.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 视图窗口是您构建界面的地方。您将从库窗口拖放项目到视图窗口以放置它们。文档浏览器允许您以分层方式浏览您在`.nib`文件中放置的元素。最后，检查器窗口显示了所选元素的所有不同属性，并允许您编辑它们。
- en: 'And now the magic begins; drag **Navigation Bar** from Library to view the
    section as shown in the following image:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在魔法开始了；从库中将**导航栏**拖放到视图中，如图所示：
- en: '![Let''s try the Interface Builder](img/5220OT_07_05.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![尝试界面构建器](img/5220OT_07_05.jpg)'
- en: When you select **Navigation Bar**, you will see many properties in the Inspector
    window. Change the tag value to **1** in the Inspector window. Remember that we
    will use this tag value in the RubyMotion project code. We need to wire our `View
    Controller` elements. The easiest way to do this is to use its **Tag** attribute.
    **Tag** is an `integer` property of the `UIView` class that you can use to identify
    your views. Basically, you have to set a unique integer for each `UIView` class
    you need to access from your `UIViewController` element.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当您选择**导航栏**时，您将在检查器窗口中看到许多属性。在检查器窗口中将标签值更改为**1**。请记住，我们将在RubyMotion项目代码中使用此标签值。我们需要连接我们的`View
    Controller`元素。最简单的方法是使用它的**标签**属性。**标签**是`UIView`类的一个`integer`属性，您可以使用它来识别您的视图。基本上，您必须为每个需要从`UIViewController`元素访问的`UIView`类设置一个唯一的整数。
- en: '![Let''s try the Interface Builder](img/5220OT_07_06.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![尝试界面构建器](img/5220OT_07_06.jpg)'
- en: Similarly, add a text field for e-mail and change the value for the placeholder
    to `Email` as shown in the following screenshot. There are a lot of properties
    associated with every Library object; for example, in case of a text field, we
    have changed the keyboard value to `Email` as it suits our requirement; but you
    are free to go ahead and play with other properties too. Using `Email` will show
    a keyboard customized for entering e-mail addresses.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，添加一个用于电子邮件的文本框，并将占位符的值更改为`Email`，如以下截图所示。每个库对象都关联着许多属性；例如，在文本框的情况下，我们将键盘值更改为`Email`，因为它符合我们的要求；但您也可以自由地尝试其他属性。使用`Email`将显示一个用于输入电子邮件地址的定制键盘。
- en: '![Let''s try the Interface Builder](img/5220OT_07_07.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![尝试界面构建器](img/5220OT_07_07.jpg)'
- en: Next, we need a button. Let's drag-and-drop a button onto the View window.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要一个按钮。让我们将一个按钮拖放到视图窗口中。
- en: '![Let''s try the Interface Builder](img/5220OT_07_08.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![Let''s try the Interface Builder](img/5220OT_07_08.jpg)'
- en: .xib to RubyMotion
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: .xib to RubyMotion
- en: In this section, we will import our `.xib` file into our RubyMotion project.
    Open the folder of the Xcode project and locate `ViewController.xib`. It's inside
    a folder named `en.lproj`; copy it into the `resources` folder of your **Restro**
    application, which we created in the last chapter.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将我们的 `.xib` 文件导入到 RubyMotion 项目中。打开 Xcode 项目的文件夹，找到 `ViewController.xib`。它位于名为
    `en.lproj` 的文件夹中；将其复制到我们在上一章创建的 **Restro** 应用的 `resources` 文件夹中。
- en: 'Update the `about_controller.rb file` in the `restro` app, which we created
    in the last chapter, with the following code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 更新我们在上一章创建的 `restro` 应用中的 `about_controller.rb` 文件，以下是代码：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As we have imported the `.xib` file from Xcode to the RubyMotion project, RubyMotion
    creates a `.nib` file automatically when we build the code with the `Rake` command.
    Here, we are creating a `View Controller` variable with an initializer `initWithNibName`
    that receives a parameter, which will be the name of the `.nib` file. This initializer
    has the responsibility of instantiating the `.nib` file and wiring the `View`
    declared in the `view` property of the `View Controller variable`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经将 `.xib` 文件从 Xcode 导入到 RubyMotion 项目中，当使用 `Rake` 命令构建代码时，RubyMotion 会自动创建一个
    `.nib` 文件。在这里，我们创建了一个带有初始化器 `initWithNibName` 的 `View Controller` 变量，该初始化器接收一个参数，这个参数将是
    `.nib` 文件的名称。这个初始化器的职责是实例化 `.nib` 文件，并将 `View Controller` 变量的 `view` 属性中声明的 `View`
    连接起来。
- en: 'Create a file `contact_us_controller.rb` inside the app folder as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用文件夹内创建一个名为 `contact_us_controller.rb` 的文件，具体如下：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s fire up the terminal and run the application with the following command:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们启动终端并使用以下命令运行应用程序：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了上述命令的输出：
- en: '![.xib to RubyMotion](img/5220OT_07_09.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![.xib to RubyMotion](img/5220OT_07_09.jpg)'
- en: 'Next, let''s update `contact_us_controller.rb` with the following code:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们用以下代码更新 `contact_us_controller.rb`：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s start the application by using the following command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令启动应用程序：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Enter a few incorrect values in the form and you will get **Invalid value**
    printed on the terminal. Once you enter the values correctly in the form and submit
    it, it will be pulled down.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在表单中输入几个错误值，你将在终端上看到 **Invalid value** 的输出。一旦你在表单中正确输入值并提交，它将被下拉。
- en: '![.xib to RubyMotion](img/5220OT_07_10_New.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![.xib to RubyMotion](img/5220OT_07_10_New.jpg)'
- en: Now let's understand the code. First we have assigned the tags to the attributes
    that we had created in Interface Builder. And then we have used these tags to
    wire our variables to those components.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来理解一下代码。首先，我们将标签分配给了在 Interface Builder 中创建的属性。然后，我们使用这些标签将变量连接到相应的组件。
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The preceding command will retrieve a subview of `self.view` based on its tag.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将根据其标签检索 `self.view` 的子视图。
- en: We have also created an `action` item for the **Submit** button. That means
    when we click on the **Submit** button, it will call the action `send_message`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还为 **Submit** 按钮创建了一个 `action` 项目。这意味着当我们点击 **Submit** 按钮时，它将调用 `send_message`
    动作。
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the `send_message` action, we are checking whether the form is valid or not.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `send_message` 动作中，我们正在检查表单是否有效。
- en: Some developers like to design the user interface using Interface Builder; others
    prefer to work entirely with code. One of the reasons is that when connecting
    Interface Builder outlets and actions to your code, it is easy to make a mistake.
    This often results in an error that is more difficult to debug than if you had
    simply written the entire code, as you have to debug in two places (Interface
    Builder and your code) instead of just one (the code).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一些开发者喜欢使用 Interface Builder 设计用户界面；而另一些开发者则更倾向于完全使用代码。其中一个原因是在将 Interface Builder
    的出口和动作连接到代码时，很容易出错。这通常会导致一个比如果直接编写整个代码更难调试的错误，因为你必须同时在两个地方（Interface Builder 和你的代码）进行调试，而不是只在代码一个地方。
- en: UIWebView – embed web content
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UIWebView – 嵌入网页内容
- en: There is a possibility that we have to show web content in our application.
    The `UIWebView` class helps us to do exactly that. To do this, simply create a
    `UIWebView` object, attach it to a window, and send a request to load web content.
    We can also use this class to move back and forth in the history of web pages
    and you can even set some web content properties programmatically.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 有可能我们需要在我们的应用程序中显示网页内容。`UIWebView` 类帮助我们做到这一点。为此，只需创建一个 `UIWebView` 对象，将其附加到一个窗口上，并发送请求以加载网页内容。我们还可以使用这个类在网页历史记录中前后移动，甚至可以编程设置一些网页内容属性。
- en: Now let's create a `UIWebView` class that displays [www.rubymotion.com](http://www.rubymotion.com)
    in our view.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们创建一个 `UIWebView` 类，在视图中显示 [www.rubymotion.com](http://www.rubymotion.com)。
- en: 'Update `about_controller.rb` with the following code:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码更新 `about_controller.rb`：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now let''s understand the code. Take the following line:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来理解一下代码。看看以下这一行：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, `NSURL.URLWithString` tells our application that the text passed is a
    web address or a URL, which is now an `NSURL` object called `url`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`NSURL.URLWithString` 告诉我们的应用程序传入的文本是一个网址或URL，现在它是一个名为 `url` 的 `NSURL` 对象。
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`NSURLRequest.requestWithURL` processes the `url` variable passed as a request.
    It is now a request object called `request`.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`NSURLRequest.requestWithURL` 处理传入请求的 `url` 变量。它现在是一个名为 `request` 的请求对象。'
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Finally, we load the request into the WebView class, which we have named `@my_web_view`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将请求加载到名为 `@my_web_view` 的 WebView 类中。
- en: 'Let''s fire up the terminal and run our application as follows to see the results:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们启动终端并按照以下步骤运行我们的应用程序，以查看结果：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了上一条命令的输出：
- en: '![UIWebView – embed web content](img/5220OT_07_11.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![UIWebView – 嵌入网页内容](img/5220OT_07_11.jpg)'
- en: Summary
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: 'Let''s recap what we have learned in this chapter:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下本章所学的内容：
- en: Xcode Interface Builder with RubyMotion
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xcode Interface Builder 与 RubyMotion
- en: Using WebView to embed web content in your application with RubyMotion
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 WebView 在 RubyMotion 应用程序中嵌入网页内容
- en: In the next chapter we will focus on a pivotal part of the software development
    lifecycle, which is testing. We will learn how to write test cases for the RubyMotion
    project and test our application on iOS devices.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将关注软件开发生命周期中的一个关键部分，即测试。我们将学习如何为 RubyMotion 项目编写测试用例，并在 iOS 设备上测试我们的应用程序。
