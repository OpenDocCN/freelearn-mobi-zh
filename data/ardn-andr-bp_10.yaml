- en: Chapter 10. Pulse Rate Sensor
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章 脉搏率传感器
- en: In this chapter, we will start exploring the possibilities of using Arduino
    and Android in a health context. The most natural way to start off such an adventure
    is to create a project that involves an open source pulse rate sensor. This sensor
    will be connected to a BLE-equipped Arduino. The data will be displayed in an
    interesting way within the Android app to make the experience as seamless as possible.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开始探索在健康环境中使用Arduino和Android的可能性。开始这样冒险最自然的方式是创建一个涉及开源脉搏率传感器的项目。这个传感器将连接到一个配备BLE的Arduino。数据将以有趣的方式在Android应用程序中显示，以使体验尽可能无缝。
- en: 'The following will be the major takeaways from this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要收获如下：
- en: Using a pulse rate sensor with Arduino to measure your heart rate
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Arduino脉搏率传感器测量心率
- en: Connecting a BLE module to Arduino to transmit pulse rate data
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将BLE模块连接到Arduino以传输脉搏率数据
- en: Visualizing this data in an Android application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Android应用程序中可视化这些数据
- en: Hardware and software requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件和软件要求
- en: Let's first see what we need for this project. As usual, we will use an Arduino
    Uno board.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看这个项目需要哪些东西。像往常一样，我们将使用Arduino Uno板。
- en: You will also need a heart rate sensor, which is the most important component
    of this chapter. We used a sensor that is compatible with Arduino, simply called
    the pulse sensor ([http://pulsesensor.com/](http://pulsesensor.com/)).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要一个心率传感器，这是本章最重要的组件。我们使用了一个与Arduino兼容的传感器，简单称为脉搏传感器（[http://pulsesensor.com/](http://pulsesensor.com/)）。
- en: 'The following is an image of the sensor we used:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们使用的传感器的图片：
- en: '![Hardware and software requirements](img/0389OS_10_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![硬件和软件要求](img/0389OS_10_01.jpg)'
- en: For wireless communications, we used the nRF8001 BLE breakout board that we
    used in previous chapters.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于无线通信，我们使用了之前章节中使用的nRF8001 BLE扩展板。
- en: Finally, you will need a breadboard and some jumper wires to make the connections
    between the different parts.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你需要一个面包板和一些跳线来连接不同部件。
- en: 'This is the list of all of the hardware you will need for this project, along
    with links to find these parts on the web:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你需要为这个项目准备的硬件清单，以及在网上找到这些部件的链接：
- en: Arduino Uno board ([https://www.adafruit.com/products/50](https://www.adafruit.com/products/50))
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino Uno板（[https://www.adafruit.com/products/50](https://www.adafruit.com/products/50)）
- en: nRF8001 breakout board ([https://www.adafruit.com/products/1697](https://www.adafruit.com/products/1697))
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: nRF8001扩展板（[https://www.adafruit.com/products/1697](https://www.adafruit.com/products/1697)）
- en: Heart rate sensor ([http://pulsesensor.myshopify.com/products/pulse-sensor-amped](http://pulsesensor.myshopify.com/products/pulse-sensor-amped))
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 心率传感器（[http://pulsesensor.myshopify.com/products/pulse-sensor-amped](http://pulsesensor.myshopify.com/products/pulse-sensor-amped)）
- en: Breadboard ([https://www.adafruit.com/products/64](https://www.adafruit.com/products/64))
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面包板（[https://www.adafruit.com/products/64](https://www.adafruit.com/products/64)）
- en: Jumper wires ([https://www.adafruit.com/products/1957](https://www.adafruit.com/products/1957))
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳线（[https://www.adafruit.com/products/1957](https://www.adafruit.com/products/1957)）
- en: 'On the software side, you will of course need the Arduino IDE. You will also
    need the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件方面，你当然需要Arduino IDE。你还需要以下内容：
- en: The library for the nRF8001 chip, available at [https://github.com/adafruit/Adafruit_nRF8001](https://github.com/adafruit/Adafruit_nRF8001)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: nRF8001芯片的库，可在[https://github.com/adafruit/Adafruit_nRF8001](https://github.com/adafruit/Adafruit_nRF8001)找到
- en: The aREST library to send commands to the robot, available at [https://github.com/marcoschwartz/aREST](https://github.com/marcoschwartz/aREST)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于向机器人发送命令的aREST库，可在[https://github.com/marcoschwartz/aREST](https://github.com/marcoschwartz/aREST)找到
- en: Configuring our hardware
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置我们的硬件
- en: 'We are now going to build the project by performing the following steps:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将通过以下步骤来构建项目：
- en: First, connect the BLE breakout board to the Arduino Uno board.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将BLE扩展板连接到Arduino Uno板。
- en: Place the module on the breadboard.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将模块放置在面包板上。
- en: 'Connect the power supply of the module: **GND** goes to prototyping shield
    **GND** and **VIN** goes to the prototyping shield +5V.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接模块的电源：**GND**连接到原型板**GND**，**VIN**连接到原型板+5V。
- en: 'Connect the different wires responsible for the SPI interface: **SCK** to Arduino
    pin **13**, **MISO** to Arduino pin **12**, and **MOSI** to Arduino pin **11**.'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接负责SPI接口的不同电线：**SCK**连接到Arduino引脚**13**，**MISO**连接到Arduino引脚**12**，**MOSI**连接到Arduino引脚**11**。
- en: Then connect the **REQ** pin to Arduino pin 10.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后将**REQ**引脚连接到Arduino引脚10。
- en: Finally, connect the **RDY** pin to Arduino pin **2** and the **RST** pin to
    Arduino pin **9**.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将**RDY**引脚连接到Arduino引脚**2**，将**RST**引脚连接到Arduino引脚**9**。
- en: 'The following is a schematic diagram to help you out for this part:'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是一个帮助您完成这一部分的示意图：
- en: '![Configuring our hardware](img/0389OS_10_02.jpg)'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![配置我们的硬件](img/0389OS_10_02.jpg)'
- en: Now, connecting the pulse rate sensor is actually very simple. You simply need
    to connect the red wire to the Arduino +5V pin, the black cable to the Arduino
    GND pin, and the remaining pin to the Arduino A0 pin.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，连接脉搏率传感器实际上非常简单。你只需要将红色电线连接到Arduino +5V引脚，黑色电线连接到Arduino GND引脚，其余引脚连接到Arduino
    A0引脚。
- en: 'This is an image of the fully assembled project:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一张完全组装好的项目的图片：
- en: '![Configuring our hardware](img/0389OS_10_03.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![配置我们的硬件](img/0389OS_10_03.jpg)'
- en: If you want more details about the pulse rate sensor, you can visit the official
    documentation at [http://pulsesensor.myshopify.com/pages/code-and-guide](http://pulsesensor.myshopify.com/pages/code-and-guide).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于脉搏率传感器的信息，您可以访问官方文档[http://pulsesensor.myshopify.com/pages/code-and-guide](http://pulsesensor.myshopify.com/pages/code-and-guide)。
- en: Testing the sensor
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试传感器
- en: 'We are now going to write some basic code to make sure that the pulse sensor
    is correctly wired and that it is not damaged. Thanks to the work done by the
    creator of the sensor, it is actually very easy to extract the heart pulse rate
    from the sensor readings. The following sketch starts by defining a lot of variables
    that are required for the calculation of the **Beats Per Minute** (**BPM**):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将编写一些基本的代码来确保脉搏传感器正确接线且没有损坏。多亏了传感器的创造者的工作，实际上从传感器读数中提取心率是非常容易的。以下草图首先定义了大量的变量，这些变量是计算**每分钟心跳次数**（**BPM**）所必需的：
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the `setup()` function of the sketch, we simply start the serial communications
    and initialize the readings from the pulse sensor:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在草图的`setup()`函数中，我们简单地启动串行通信并初始化从脉搏传感器读取的读数：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, in the `loop()` function of the sketch, we constantly check to see if
    we found a heart beat, and we print it on the serial monitor if this is the case:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在草图的`loop()`函数中，我们不断检查是否找到了心跳，如果是这样，我们就在串行监视器上打印出来：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that all of the code used in this chapter can be found in the GitHub repository
    of the book at [https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，本章中使用的所有代码都可以在书的GitHub仓库[https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints)中找到。
- en: It is now time to test the code. Before uploading the code to your board, it's
    recommended that you watch a video found at [http://pulsesensor.myshopify.com/blogs/news/7406100-getting-started-video](http://pulsesensor.myshopify.com/blogs/news/7406100-getting-started-video)
    in order to understand how to put the sensor correctly on your finger.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是测试代码的时候了。在将代码上传到你的板子之前，建议你观看[http://pulsesensor.myshopify.com/blogs/news/7406100-getting-started-video](http://pulsesensor.myshopify.com/blogs/news/7406100-getting-started-video)上的视频，以便了解如何正确地将传感器放在指尖上。
- en: You can now upload the code to your Arduino board and open the serial monitor.
    Then place the sensor on your finger. After a while (there can be strange readings
    at first), you should see your heart rate being displayed on the serial monitor.
    You will know that it is correct when the value is between 60 and 100 BPM (if
    you are in a resting state).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以将代码上传到你的Arduino板上，并打开串行监视器。然后将传感器放在你的指尖上。过了一会儿（最初可能会有一些奇怪的读数），你应该在串行监视器上看到你的心率。当你知道值在60到100
    BPM之间时（如果你处于休息状态），你就知道它是正确的。
- en: Writing the Arduino sketch
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写Arduino草图
- en: Now that we are sure that the sensor is working correctly, we can write the
    final Arduino sketch for this chapter. This sketch will perform the BPM measurements
    as before, and will also expose the BPM variable via the aREST API so that the
    measurements can be accessed via Bluetooth. As the sketch is really similar to
    the test sketch, we will only detail the changes here.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经确认传感器工作正常，我们可以为这一章编写最终的Arduino草图。这个草图将像之前一样执行BPM测量，并且将通过aREST API公开BPM变量，以便可以通过蓝牙访问测量结果。由于草图与测试草图非常相似，我们在这里只详细说明更改。
- en: 'The sketch starts by importing the required libraries:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 草图首先导入所需的库：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We also define the pins on which the BLE module is connected:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还定义了BLE模块连接的引脚：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then we create an instance of the aREST library and the BLE module:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们创建了一个aREST库和BLE模块的实例：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We also need to define a variable that will contain the BPM measurements and
    that will be exposed to the API:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要定义一个变量，该变量将包含BPM测量值，并且将暴露给API：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the `setup()` function, we need to initialize the BLE module:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在`setup()`函数中，我们需要初始化BLE模块：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We also give the project a name and ID:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还为项目命名并分配ID：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Still in the `setup()` function, we expose the BPM variable to the aREST API:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然在`setup()`函数中，我们将BPM变量暴露给aREST API：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the `loop()` function of the sketch, we assign the measured BPM to the variable
    that is exposed to the API:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在草图中的`loop()`函数中，我们将测量的BPM分配给暴露给API的变量：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, as usual, we process the incoming requests on the BLE module with the
    aREST API:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，像往常一样，我们使用aREST API处理BLE模块上的传入请求：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note that all the code for this chapter can be found in the GitHub repository
    of the bookat [https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints).
    You can now upload the code to your Arduino board and move on to the development
    of the Android application.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，本章的所有代码都可以在本书的GitHub仓库中找到，网址为[https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints)。您现在可以将代码上传到Arduino板，并继续开发Android应用程序。
- en: Setting up the Android app
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Android应用程序
- en: The Android application that we will be creating will give us the ability to
    display the data that is measured by the pulse rate sensor within the Android
    app. In addition, it will show the BLE connection status, and there will be the
    **Refresh** button to allow us to refresh the Bluetooth callback.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要创建的Android应用程序将使我们能够在Android应用程序中显示由心率传感器测量的数据。此外，它将显示BLE连接状态，并且有一个**刷新**按钮，允许我们刷新蓝牙回调。
- en: 'We will assume that you will have switched on the `Auto-Import` function within
    your preferences. If not, kindly activate it by going to the **Auto-Import** preferences
    and selecting all available options. The **Auto-Import** preferences are available
    on Mac and Windows as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设您已经在您的首选项中打开了`自动导入`功能。如果没有，请通过转到**自动导入**首选项并选择所有可用选项来激活它。**自动导入**首选项在Mac和Windows上的位置如下：
- en: On a Mac, navigate to **Android Studio** > **Preferences** > **Editor** > **Auto-Import**
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Mac上，导航到**Android Studio** > **首选项** > **编辑器** > **自动导入**
- en: On Windows, navigate to **File** > **Settings** > **Editor** > **Auto-Import**
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows上，导航到**文件** > **设置** > **编辑器** > **自动导入**
- en: 'With all the necessary settings in place, we will start off by creating a new
    project where we will choose the following within the **New Project** setup walkthrough:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有必要的设置就绪后，我们将开始创建一个新项目，在**新建项目**设置向导中，我们将选择以下内容：
- en: '**Name**: `Pulse Rate Sensor`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：`Pulse Rate Sensor`'
- en: '**Minimum SDK**: `18`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最小SDK**：`18`'
- en: '**Project**: `Blank Activity`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目**：`Blank Activity`'
- en: '**Activity Name**: `PulseActivity`'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**活动名称**：`PulseActivity`'
- en: '**Do****main**: `arduinoandroid.com`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**域名**：`arduinoandroid.com`'
- en: Laying out the Android user interface and setting permissions
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布局Android用户界面和设置权限
- en: In order to make this project work, we will need to first go to the Android
    `Manifest` file which is available at `app` > `src` > `main` > `AndroidManifest.xml`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个项目工作，我们首先需要转到Android的`Manifest`文件，该文件位于`app` > `src` > `main` > `AndroidManifest.xml`。
- en: 'Since this Android application uses BLE to connect the Android physical device
    to the pulse rate sensor, we will need to add the following permissions to the
    Android `Manifest` file:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个Android应用程序使用BLE将Android物理设备连接到心率传感器，因此我们需要将以下权限添加到Android的`Manifest`文件中：
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The next step that we will be taking is setting up the very basic Android layout
    file so that we are able to implement the app functions.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要采取的下一步是设置非常基本的Android布局文件，以便我们能够实现应用程序功能。
- en: In our project, we will navigate to the main layout file which can be accessed
    from `app` > `src` > `res` > `layout` > `activity_pulse.xml`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目中，我们将导航到主布局文件，该文件可以通过`app` > `src` > `res` > `layout` > `activity_pulse.xml`访问。
- en: 'There are a number of layout formats with Android user interface design, and
    in this particular case, we will be implementing two linear layouts: one will
    be designed to act as a placeholder for the graph view, and the other will support
    the different buttons and text views.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Android用户界面设计中有多种布局格式，在这种情况下，我们将实现两个线性布局：一个将设计为充当图表视图的占位符，另一个将支持不同的按钮和文本视图。
- en: 'Replace the current code available in the layout file with the following code:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 将布局文件中当前可用的代码替换为以下代码：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The end result will look as follows within the IDE:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果将在 IDE 中呈现如下：
- en: '![Laying out the Android user interface and setting permissions](img/0389OS_10_04.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![布局 Android 用户界面和设置权限](img/0389OS_10_04.jpg)'
- en: The text **120** is meant to be a placeholder text to ensure that there is enough
    place within the user interface to accommodate the pulse rate readings. In the
    final implementation, you have the option of removing the placeholder text and
    leaving it blank.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 文本 **120** 的目的是作为一个占位文本，以确保在用户界面中有足够的空间来容纳脉搏率读数。在最终实现中，您可以选择删除占位文本，使其为空。
- en: Coding the app's internals
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写应用程序的内部代码
- en: 'We need to start off by declaring all the necessary variables that are needed
    to work with the Bluetooth logic, user interface, and for logging purposes:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要首先声明所有必要的变量，这些变量用于与蓝牙逻辑、用户界面和日志记录一起工作：
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Following this, we will need to connect the user interface elements within
    the `onCreate()` method to the user interface, and set an `onClickListener` class
    to the **Get Pulse Rate** and **Refresh** buttons, which will allow us to request
    the pulse rate sensor data and refresh Bluetooth connections:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，我们需要在 `onCreate()` 方法中将用户界面元素连接到用户界面，并将 `onClickListener` 类设置到 **获取脉搏率**
    和 **刷新** 按钮上，这将允许我们请求脉搏率传感器数据并刷新蓝牙连接：
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Since we are using Bluetooth in our projects, we need to implement the methods
    that allow us to take the character data sequences, convert them into string,
    and finally connect them to the user interface to display the data:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在项目中使用蓝牙，我们需要实现允许我们获取字符数据序列、将它们转换为字符串，并将其最终连接到用户界面以显示数据的方法：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following methods will allow us to do the necessary Bluetooth callback
    and send or receive data from the Arduino pulse rate sensor via the BLE module:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法将允许我们执行必要的蓝牙回调，并通过 BLE 模块从 Arduino 脉搏率传感器发送或接收数据：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The Android application life cycle allows us to implement methods at its different
    stages, so in the following code, we will be implementing two methods which allow
    us to start Bluetooth scanning when the application is activated, and stop Bluetooth
    scanning and other related activities when the user exits the application:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Android 应用程序生命周期允许我们在其不同阶段实现方法，因此在下述代码中，我们将实现两个方法，允许我们在应用程序激活时开始蓝牙扫描，并在用户退出应用程序时停止蓝牙扫描和其他相关活动：
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We will also be including a number of methods that facilitate the BLE scan
    callback and enable us to refactor the code and keep our code clean:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将包括一些方法，这些方法有助于 BLE 扫描回调，并使我们能够重构代码并保持代码整洁：
- en: '[PRE19]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: UUID parsing, unlike the previous chapters, has been moved to a `utility` class
    in order to refactor the code and make it more readable. In order to create a
    `utility` class, we first need to right-click on our package name and create a
    new package called `Bluetooth`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 与前几章不同，UUID 解析已被移动到 `utility` 类中，以便重构代码并使其更易读。为了创建一个 `utility` 类，我们首先需要右键点击我们的包名，并创建一个新的包，命名为
    `Bluetooth`。
- en: Then we will right-click on the new package, select **New** > **Java Class**,
    and name the new class as `BluetoothUtils`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将右键点击新包，选择 **新建** > **Java 类**，并将新类命名为 `BluetoothUtils`。
- en: 'After these two steps, we will replace the code within the class with the following
    code:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两个步骤之后，我们将用以下代码替换类中的代码：
- en: '[PRE20]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: At this point, you could go ahead, build, and run the project on an Android
    physical device running on Android 4.3 with Bluetooth switched on. In order to
    get your pulse rate in this project, you will need to follow the instructions
    as mentioned previously and tap on the **Get Pulse Rate** button.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，您可以继续构建并运行项目，在运行 Android 4.3 且蓝牙已开启的 Android 物理设备上。为了获取此项目中的脉搏率，您需要按照之前提到的说明操作，并点击
    **获取脉搏率** 按钮。
- en: How to go further
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何进一步
- en: We believe that this project can be taken further by possibly including other
    health-related sensors that are available from a number of online outlets and
    displaying the related data within a graph.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们相信，通过可能包括来自多个在线渠道的其他健康相关传感器，并将相关数据在图表中显示，这个项目可以进一步发展。
- en: The Android graph view library supports multiple inputs using multiple series.
    Further information about this can be obtained at the official website for documentation
    at [http://android-graphview.org/](http://android-graphview.org/).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Android 图形视图库支持使用多个序列进行多个输入。有关此信息的更多信息，可以在官方文档网站 [http://android-graphview.org/](http://android-graphview.org/)
    获取。
- en: 'A screenshot of how this application could possibly look with Android graph
    view would be similar to the following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用在Android图形视图下的截图可能类似于以下内容：
- en: '![How to go further](img/0389OS_10_05.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![如何进一步](img/0389OS_10_05.jpg)'
- en: Further improvements could also be done to the user interface and user experience
    where the data can be updated in real time via handler or timer implementations.
    Finally, one of the most advanced integrations that could be included in this
    kind of application is integration with the Google Fit SDK, which is Google's
    proprietary health data platform. Another option could be storage of health data
    using cloud storage APIs and local databases.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以对用户界面和用户体验进行进一步的改进，其中数据可以通过处理程序或定时器实现实时更新。最后，这种类型的应用中可以包含的最先进集成之一是与Google
    Fit SDK的集成，这是谷歌的专有健康数据平台。另一个选择是使用云存储API和本地数据库存储健康数据。
- en: Summary
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we integrated what we had learned from the previous chapters
    and created a baseline project to measure our own pulse rate.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将之前章节所学的内容进行了整合，创建了一个基准项目来测量我们的脉搏率。
- en: We achieved this by creating an Android app which shows the data produced by
    the pulse rate sensor connected to the Arduino Uno. Communication between both
    devices is via BLE.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过创建一个Android应用实现了这一点，该应用显示了连接到Arduino Uno的脉搏率传感器的数据。这两个设备之间的通信是通过蓝牙进行的。
- en: The baseline projects that we have introduced throughout this book are present
    to motivate you to be creative and solve your daily challenges. We have realized
    that the possibilities of combining Arduino and Android are endless, and we hope
    that you will stretch the limitations of what is possible.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中所介绍的所有基准项目都是为了激励你发挥创意，解决日常挑战。我们已经意识到，将Arduino和Android结合的可能性是无限的，我们希望你能突破可能的局限。
