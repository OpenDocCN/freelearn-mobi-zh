- en: Chapter 1. LiveCode Fundamentals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。LiveCode基础知识
- en: '*Is this chapter for you?*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*这一章适合你吗？*'
- en: '*LiveCode has an English-like programming language, a graphical development
    environment, and an easy-to-understand structural metaphor. When you create an
    application, you spend more time thinking about how to implement the different
    features and less about the complexities of the tool you are using. However, if
    you''ve never used LiveCode before, it''s still going to be unfamiliar at first.
    This chapter is to bring you up to speed and make you ready for the later chapters
    that will require you to be more familiar with the terminology and features of
    this tool.*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*LiveCode拥有类似英语的编程语言、图形开发环境和易于理解的架构隐喻。当你创建一个应用程序时，你花更多的时间思考如何实现不同的功能，而不是你使用的工具的复杂性。然而，如果你以前从未使用过LiveCode，它最初仍然会感到陌生。本章旨在让你跟上进度，并为后续章节做好准备，这些章节将需要你更熟悉这个工具的术语和功能。*'
- en: All of LiveCode is easy, but there are thousands of easy things to learn! Throughout
    the book, we will look at these things, that you can use for mobile applications
    in particular, but first, we should go over some of the basics.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 所有LiveCode都很容易，但有许多容易学习的东西！在整本书中，我们将探讨这些内容，特别是你可以用于移动应用的内容，但首先，我们应该回顾一些基础知识。
- en: 'In this chapter, we will:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Become familiar with the LiveCode environment
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟悉LiveCode环境
- en: Investigate the hierarchy of a LiveCode "stack"
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探究LiveCode "堆栈"的层次结构
- en: Create a simple calculator application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个简单的计算器应用程序
- en: Learn about the many different interface controls
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解许多不同的界面控件
- en: So, let's get on with it.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们开始吧。
- en: Background history and metaphors
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 背景历史和隐喻
- en: Many development tools only present a programming language along with programming
    interfaces to system routines. Higher-level tools often present the same things,
    but structured in such a way that it is possible to come up with real-world metaphors
    for the different aspects of the tool. LiveCode is very much like that, and its
    metaphor is a stack of cards. This metaphor originated with Apple Computer's HyperCard
    authoring tool, which was created by Bill Atkinson in the mid-1980s. The first
    version of HyperCard was released in August 1987 and it became a huge hit in both
    education and multimedia sectors. Companies such as The Voyager Company, published
    its entire product line which was created using HyperCard.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发工具只提供编程语言和系统例程的编程接口。高级工具通常以相同的方式提供这些内容，但结构得如此之好，以至于可以为工具的不同方面想出现实世界的隐喻。LiveCode非常像这样，其隐喻是一堆卡片。这个隐喻起源于20世纪80年代中期的苹果电脑HyperCard创作工具，该工具由比尔·阿特金森创建。HyperCard的第一个版本于1987年8月发布，并在教育和多媒体领域取得了巨大成功。像Voyager公司这样的公司，发布了其整个产品线，这些产品都是使用HyperCard创建的。
- en: Other companies produced tools that were very much like HyperCard, but they
    also tried to give the user more features than were in HyperCard. The most prominent
    of these tools were SuperCard, Plus, and MetaCard. Plus went on to have an interesting
    life; the product itself became Windows-only (it was cross-platform at first),
    but later, the same code ended up in the Oracle Media Objects cross-platform tool.
    All of these tools perpetuated the metaphor of a stack of cards.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 其他公司生产的工具与HyperCard非常相似，但它们也试图为用户提供比HyperCard更多的功能。其中最突出的是SuperCard、Plus和MetaCard。Plus继续拥有一个有趣的生命周期；该产品本身最初是跨平台的（最初是Windows-only），但后来，相同的代码最终出现在Oracle
    Media Objects跨平台工具中。所有这些工具都延续了卡片堆栈的隐喻。
- en: MetaCard was most notable for the fact that it was multiplatform and not just
    cross platform. *Stacks* is the general term used for documents created by these
    tools, made with MetaCard that ran on Unix and Linux systems, as well as Mac and
    Windows. Alas, it was somewhat ugly! The Scottish company RunRev made a product
    that attempted to present MetaCard in a more appealing way. Eventually, RunRev
    acquired MetaCard, and since 2003, RunRev has continued to build upon MetaCard
    using the product name Runtime Revolution, which was later renamed as LiveCode.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: MetaCard最显著的特点是它是多平台的，而不仅仅是跨平台的。"Stacks"是这些工具创建的文档的通用术语，使用MetaCard创建，在Unix和Linux系统上运行，以及Mac和Windows。遗憾的是，它有点丑！苏格兰公司RunRev推出了一款产品，试图以更有吸引力的方式展示MetaCard。最终，RunRev收购了MetaCard，自2003年以来，RunRev一直使用产品名称Runtime
    Revolution（后来更名为LiveCode）在此基础上进行构建。
- en: Note
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In March 2015, RunRev also changed the company name to LiveCode Ltd. This book
    has many references to [http://runrev.com/](http://runrev.com/), and it should
    still be maintained as such. However, If you have a problem with a URL, substitute
    it with [http://livecode.com/](http://livecode.com/) or do a search on the LiveCode
    website.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2015 年 3 月，RunRev 还将公司名称更改为 LiveCode Ltd。本书中有许多关于 [http://runrev.com/](http://runrev.com/)
    的引用，并且应该继续这样维护。然而，如果您遇到 URL 问题，请将其替换为 [http://livecode.com/](http://livecode.com/)
    或在 LiveCode 网站上搜索。
- en: In 2013, RunRev had a successful Kickstarter campaign and raised £494k ($775k)
    to make LiveCode open source. Version 6.0 of LiveCode was released in April 2013
    as the first open source version. This led to an active development cycle with
    close to 20 stable releases culminating in version 7.0 of LiveCode in October
    2014\. This edition of this book is based on the version 7.0 of LiveCode.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2013 年，RunRev 成功地发起了 Kickstarter 营销活动，并筹集了 494k 英镑（775k 美元）的资金，以使 LiveCode
    开源。LiveCode 的 6.0 版本于 2013 年 4 月发布，作为第一个开源版本。这导致了一个活跃的开发周期，接近 20 个稳定版本，最终在 2014
    年 10 月推出了 LiveCode 的 7.0 版本。本书的这一版基于 LiveCode 的 7.0 版本。
- en: The highlights of version 7 include Unicode support, display resolution independence,
    stretchable graphics, hybrid apps using a new browser, Mac Cocoa support, Raspberry
    Pi support, 64-bit Linux support, and much more. You can read more about version
    7 of LiveCode in the October 23, 2014 newsletter issue at [http://newsletters.livecode.com/october/issue180/](http://newsletters.livecode.com/october/issue180/).
    All LiveCode newsletters are available under the **LiveCode Help** menu.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 7.0 版本的亮点包括对 Unicode 的支持、显示分辨率独立性、可拉伸图形、使用新浏览器的混合应用程序、Mac Cocoa 支持、Raspberry
    Pi 支持、64 位 Linux 支持，等等。您可以在 2014 年 10 月 23 日的通讯录第 180 期中了解更多关于 LiveCode 7.0 的信息。[http://newsletters.livecode.com/october/issue180/](http://newsletters.livecode.com/october/issue180/)。所有
    LiveCode 通讯录都可在 **LiveCode 帮助** 菜单下找到。
- en: In 2014, RunRev had another financing campaign to raise support for HTML5 and
    raised an additional $395k. This capability and the version 8 of LiveCode with
    open language support are described further in [Appendix](part0098.xhtml#aid-2TEN41
    "Appendix A. Extending LiveCode"), *Extending LiveCode*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2014 年，RunRev 又发起了另一场融资活动，以支持 HTML5，并额外筹集了 395k 美元。这种能力和具有开放语言支持的 LiveCode
    8.0 版本在 [附录](part0098.xhtml#aid-2TEN41 "附录 A. 扩展 LiveCode") *扩展 LiveCode* 中进一步描述。
- en: Under the HyperCard variation of the stack of cards metaphor, documents consist
    of the cards that hold buttons, fields, and bitmap graphics; backgrounds that
    hold a set of cards; and stacks that hold a set of backgrounds. LiveCode takes
    a slightly different approach and rather than having backgrounds that hold cards,
    it allows you to group any set of interface controls and set those to act as if
    they are background entities. These end up being more flexible, though slightly
    alien to people who have used HyperCard a lot.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在卡片堆栈隐喻的 HyperCard 变体下，文档由包含按钮、字段和位图图形的卡片组成；包含一组卡片的背景；以及包含一组背景的堆栈。LiveCode 采用略微不同的方法，而不是有包含卡片的背景，它允许您将任何一组界面控件分组，并将这些控件设置为作为背景实体来操作。这些最终变得更加灵活，尽管对于大量使用
    HyperCard 的人来说可能有些陌生。
- en: 'Both HyperCard and LiveCode provide ways to extend the hierarchy further. You
    are able to link other stacks. To save time rewriting the same set of functions
    in every stack, you might choose to have a stack dedicated to these functions
    and you can add that stack to the `stackInUse` property using the following command:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: HyperCard 和 LiveCode 都提供了进一步扩展层次结构的方法。您能够链接其他堆栈。为了节省时间，您可能选择拥有一个专门用于这些函数的堆栈，并且可以使用以下命令将该堆栈添加到
    `stackInUse` 属性中：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Additionally, you can write "externals", which are commands and functions written
    in the C language, which can extend LiveCode's abilities even further.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以编写“外部”程序，这些是使用 C 语言编写的命令和函数，可以进一步扩展 LiveCode 的功能。
- en: You do have LiveCode, don't you?
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你确实有 LiveCode，不是吗？
- en: If you haven't yet installed LiveCode, go to [http://livecode.com/download](http://livecode.com/download)
    and download the Community Edition for your development platform. This version
    is open source and free to use. You will need to provide your name and e-mail
    which establishes a user account for LiveCode. At the time of writing this book,
    you also get a free App Design Kit that includes an introductory video and a mobile
    `app2market.livecode` template.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尚未安装 LiveCode，请访问 [http://livecode.com/download](http://livecode.com/download)
    并下载适用于您的开发平台的社区版。这个版本是开源的，并且免费使用。您需要提供您的姓名和电子邮件，这将为您在 LiveCode 中建立一个用户账户。在撰写本书时，您还可以获得一个免费的
    App 设计套件，其中包括一个介绍视频和一个移动 `app2market.livecode` 模板。
- en: If you plan to buy Commercial LiveCode, read through [http://www.runrev.com/store/](http://www.runrev.com/store/)
    to understand the many variations of licenses that are there. As a rough guide,
    based on the price at the time of writing this book, to create mobile applications
    that are free, the cost would be $99, and if you want to make apps that you could
    charge for, the cost would be $299\. Additional levels of use and support are
    available at extra cost.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您计划购买商业版LiveCode，请阅读[http://www.runrev.com/store/](http://www.runrev.com/store/)，了解那里提供的许多许可证变体。作为一个粗略的指南，基于撰写本书时的价格，要创建免费移动应用程序，成本将是99美元，如果您想制作可以收费的应用程序，成本将是299美元。额外的使用和支持级别需要额外付费。
- en: The two editions of LiveCode have a distinctive color scheme too, with the Commercial
    Edition using blue elements and the Community Edition using green elements.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: LiveCode的两个版本也有独特的配色方案，商业版使用蓝色元素，社区版使用绿色元素。
- en: Once you have downloaded the Community Edition or bought one of the commercial
    licenses, go ahead and launch it!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您下载了社区版或购买了商业许可证之一，就可以启动它了！
- en: Learning the lay of the land
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解环境布局
- en: When you first open LiveCode, you are shown a Start Center window, which functions
    as a way to open recent documents, a list of links to forums and information to
    get started, or to view promotional information. There is no harm in keeping that
    window open, but if you do close it, you can reopen it from the **Help** menu.
    You can also use **Backdrop** by selecting it from the **View** menu to hide other
    application windows on your screen.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当您第一次打开LiveCode时，会显示一个开始中心窗口，它充当打开最近文档、链接到论坛和获取开始信息列表或查看促销信息的方式。保持该窗口打开没有害处，但如果您关闭了它，可以从**帮助**菜单重新打开它。您还可以通过从**视图**菜单中选择**背景**来隐藏屏幕上的其他应用程序窗口。
- en: If you look at LiveCode for the first time, you will notice a toolbar at the
    top of the screen, just below the menu bar. Take note of the rightmost items,
    such as **Sample Stacks**, **Tutorials**, **Resources**, and **Dictionary**. These
    areas are filled with information that will help you to get started with LiveCode.
    **Dictionary** is something that you will use a lot, and just browsing through
    the entries will either answer your immediate question, or give you advanced information
    about issues you'll run into later.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您第一次使用LiveCode，您会注意到屏幕顶部的工具栏，位于菜单栏下方。请注意最右侧的项目，例如**示例堆栈**、**教程**、**资源**和**字典**。这些区域充满了帮助您开始使用LiveCode的信息。**字典**是您会经常使用的东西，浏览条目要么会立即回答您的问题，要么会提供有关您以后可能遇到的问题的详细信息。
- en: The **Help** menu also provides access to **User Guide** and useful links to
    other information. Check the **User Guide** section to read in depth about the
    features mentioned here.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**帮助**菜单还提供了访问**用户指南**和链接到其他有用信息的途径。请查看**用户指南**部分，深入了解这里提到的功能。'
- en: Online lessons
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在线课程
- en: In addition to the resources you see inside LiveCode itself, there is a tremendous
    amount of information and a number of tutorials on the RunRev website. A good
    starting point would be [http://lessons.runrev.com/](http://lessons.runrev.com/).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 除了LiveCode本身内部看到的资源之外，RunRev网站上还有大量信息和许多教程。一个好的起点是[http://lessons.runrev.com/](http://lessons.runrev.com/)。
- en: 'This screenshot shows the windows and palettes that we''re going to use for
    now as well as the document window, which is a simple calculator that we will
    build soon:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 此截图显示了我们将要使用的窗口和调色板，以及文档窗口，这是一个我们将很快构建的简单计算器：
- en: '![Online lessons](img/image00226.jpeg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![在线课程](img/image00226.jpeg)'
- en: Main windows
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主要窗口
- en: 'In addition to the document window itself, these are the main windows that
    we need to be familiar with for now:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 除了文档窗口本身之外，以下是我们现在需要熟悉的几个主要窗口：
- en: Tools palette
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具调色板
- en: Inspector palette
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查器调色板
- en: Message box
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息框
- en: The upper area of the Tools Palette shows all the interface controls that you
    need to create an interactive application. Below these are a set of tools to edit
    vector graphics and a set of tools to edit bitmap graphics.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 工具调色板的上部显示了您创建交互式应用程序所需的所有界面控件。在这些控件下方是一组用于编辑矢量图形的工具和一组用于编辑位图图形的工具。
- en: The Inspector Palette shows all the options for the control that you currently
    have selected. In the preceding screenshot, nothing is selected in the calculator
    app, so the Inspector Palette shows information about the stack itself.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 检查器调色板显示了您当前所选控件的全部选项。在前面的屏幕截图中，计算器应用程序中没有选择任何内容，因此检查器调色板显示了堆栈本身的信息。
- en: Message Box is a window that lets you try out either single or multiple lines
    of code. You are able to invoke functions in your stacks too, making it a very
    handy way to test individual functions while you are tracking down issues. We'll
    use the Message Box in later chapters.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 消息框是一个窗口，允许你尝试单行或多行代码。你还可以在堆栈中调用函数，这使得在追踪问题时测试单个函数变得非常方便。我们将在后面的章节中使用消息框。
- en: As suggested, read the User Guide to get a deeper understanding of these windows,
    but let's try putting together something simple for now to get you more familiar
    with how to use the Tool palette.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如建议的那样，阅读用户指南以深入了解这些窗口，但现在让我们尝试组合一些简单的内容，以便你更熟悉如何使用工具调色板。
- en: Time for action – it's a drag, but you'll like it!
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现在是行动时间——虽然有点麻烦，但你一定会喜欢的！
- en: You build things in LiveCode by dragging icons from the Tools palette to the
    stack window. If the palettes are not already open, the Inspector palette can
    be opened by clicking on the icon at the left end of the toolbar or by selecting
    one of the inspector menu items in the **Object** menu. The Tools palette can
    be opened by selecting the **Tools Palette** from the **Tools** menu and by using
    the following steps
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你在LiveCode中通过从工具调色板拖动图标到堆栈窗口中来构建东西。如果调色板尚未打开，可以通过单击工具栏左端的图标或从**对象**菜单中选择检查器菜单项来打开检查器调色板。可以通过从**工具**菜单中选择**工具调色板**并使用以下步骤来打开工具调色板
- en: From the **File** menu, select **New Mainstack**.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**文件**菜单中选择**新建主堆栈**。
- en: In the **Tools** palette, click on the **Edit** tool (the top-right icon).
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**工具**调色板中，单击**编辑**工具（右上角的图标）。
- en: To select edit or not…
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择编辑或不…
- en: 'In LiveCode, you can drag controls from the Tools palette to the card window
    without selecting the **Edit** tool. However, you are not able to select the control
    to adjust its position or size, and so, in the following instructions, we are
    intentionally selecting the **Edit** tool before adding controls to the card window:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在LiveCode中，你可以不选择**编辑**工具，直接从工具调色板将控件拖动到卡片窗口中。然而，你无法选择控件来调整其位置或大小，因此，在以下说明中，我们故意在向卡片窗口添加控件之前选择**编辑**工具：
- en: Drag icons from the upper section of the Tools palette to the stack window.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将工具调色板上方的图标拖动到堆栈窗口中。
- en: Try the layering options at the bottom of the **Object** menu.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试**对象**菜单底部的分层选项。
- en: Select more than one item and experiment with the **Align Objects** options
    in the Inspector palette. The align options are shown automatically when you select
    multiple objects, but you can also select **Align Objects** from the drop-down
    menu in the Inspector palette. You won't see this option if only one object is
    selected. Here, we are able to see the options because three buttons are selected:![To
    select edit or not…](img/image00227.jpeg)
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择多个项目，并在检查器调色板中实验**对齐对象**选项。当你选择多个对象时，对齐选项会自动显示，但你也可以从检查器调色板的下拉菜单中选择**对齐对象**。如果只选择了一个对象，则不会看到此选项。在这里，我们能够看到这些选项，因为选定了三个按钮：![选择编辑或不…](img/image00227.jpeg)
- en: Select a single button and in the Inspector palette, enter a name and a label.
    If you don't see the **Name** and **Label** fields, make sure you have selected
    **Basic Properties** from the Inspector pallete's drop-down menu.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个按钮，并在检查器调色板中输入一个名称和标签。如果你看不到**名称**和**标签**字段，请确保你已经从检查器调色板的下拉菜单中选择了**基本属性**。
- en: Add several more controls to the card window and practice aligning and naming
    the controls. You can also resize them by dragging the handles that you see on
    the corners and sides while the control is selected. Here is how the window would
    look if you add some buttons, a field, tab panel, slider, and video player control:![To
    select edit or not…](img/image00228.jpeg)
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向卡片窗口添加更多控件，并练习对齐和命名控件。你还可以在控件被选中时通过拖动角落和边上的手柄来调整它们的大小。如果你添加了一些按钮、字段、标签页面板、滑块和视频播放控件，窗口将看起来如下：![选择编辑或不…](img/image00228.jpeg)
- en: '*What just happened?*'
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: Hopefully, you will have made a random bunch of interface controls, perhaps
    some that are nicely lined up too! Now, select the **Close and Remove From Memory**
    option from the **File** menu and create a new **Main Stack** to make the Simple
    Calculator interface.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你已经创建了一堆随机的界面控件，也许还有一些排列得很好的！现在，从**文件**菜单中选择**关闭并从内存中删除**选项，创建一个新的**主堆栈**以制作简单的计算器界面。
- en: First though, we should go over some of the structure and hierarchy of a LiveCode
    stack and create some basic navigation.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们应该回顾一下LiveCode堆栈的结构和层次结构，并创建一些基本的导航。
- en: Creating a hierarchy
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建层次结构
- en: Everything goes somewhere, but having things in the wrong place can lead to
    problems. We should learn more about the structure of a LiveCode stack to avoid
    this.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的东西都有其去处，但东西放在错误的地方可能会导致问题。我们应该更多地了解LiveCode堆栈的结构，以避免这种情况。
- en: The stack structure
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 堆栈结构
- en: As described in the *Background history and metaphors* section, LiveCode uses
    a stack of cards metaphor. When you make a new stack, you in effect have a single
    stack of cards. However, even the simplest application is likely to have more
    than one card. For example, there could be a splash screen, title card, cards
    for the actual task at hand, and a credits page. In the calculator stack, we will
    use two cards. The **Tools** menu includes an option to view the structure of
    the stack by showing **Project Browser** or **Application Browser**. The Project
    Browser was introduced in the version 6.0 of LiveCode with additional capabilities
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如在*背景历史和隐喻*部分所述，LiveCode使用卡片堆栈的隐喻。当你创建一个新的堆栈时，实际上你有一个单独的卡片堆栈。然而，即使是最简单的应用程序也可能包含多个卡片。例如，可能有启动屏幕、标题卡片、实际任务卡片和致谢页面。在计算器堆栈中，我们将使用两个卡片。**工具**菜单包括一个选项，可以通过显示**项目浏览器**或**应用程序浏览器**来查看堆栈的结构。项目浏览器是在LiveCode
    6.0版本中引入的，并增加了额外的功能。
- en: The Project Browser panel is a powerful tool that lets you see all the stacks,
    cards, and controls that are open at the moment, in one window. In addition to
    getting an overview of everything, you can use it as a remote control to jump
    between all the parts of your stack and to select and modify buttons, fields,
    and so on.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 项目浏览器面板是一个强大的工具，它允许你在一个窗口中看到所有打开的堆栈、卡片和控制。除了获得全面的概述外，你还可以将其用作远程控制，在堆栈的所有部分之间跳转，并选择和修改按钮、字段等。
- en: 'Taking the calculator stack that we are about to make as an example, in the
    following screenshot, we see a side-by-side view of the stack window and the Project
    Browser panel, where in the **Project Browser** panel, we have selected one of
    the buttons in the stack:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以我们即将制作的计算器堆栈为例，在下面的屏幕截图中，我们看到堆栈窗口和项目浏览器面板的并排视图，在**项目浏览器**面板中，我们已选择堆栈中的一个按钮：
- en: '![The stack structure](img/image00229.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![堆栈结构](img/image00229.jpeg)'
- en: 'The upper area of **Project Browser** includes a field where you can type and
    search text to reduce the list of items in the browser to match the ones you have
    typed. In the upper-left part of the panel, is a gear icon that is used to take
    you to the preferences of the browser:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**项目浏览器**的上部区域包括一个字段，你可以在此处输入和搜索文本，以减少浏览器中项目的列表，以匹配你输入的内容。在面板的左上角是一个齿轮图标，用于将你带到浏览器的首选项：'
- en: Most of the rest of the browser window lets you expand stacks and cards, and
    choose individual controls on those cards. Clicking on a control in **Project
    Browser** highlights it in the stack window and vice versa. Controls can also
    be reordered to change layers by dragging them up and down. Controls can also
    be hidden or locked by clicking on the eye and lock icons. The lower area buttons
    let you do various alignments of the selected controls to add or duplicate the
    selected control. Hovering over a button shows a popup of what it does.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器窗口的大部分区域允许你展开堆栈和卡片，并选择那些卡片上的单个控件。在**项目浏览器**中点击一个控件会在堆栈窗口中突出显示它，反之亦然。控件也可以通过上下拖动来重新排序以改变层级。通过点击眼睛和锁图标，控件也可以被隐藏或锁定。下方的区域按钮允许你执行所选控件的多种对齐方式，以添加或复制所选控件。将鼠标悬停在按钮上会显示一个弹出窗口，显示其功能。
- en: 'A longer overview of how Project Browser works is available at:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 关于项目浏览器如何工作的更详细概述可在以下链接找到：
- en: '[http://www.runrev.com/newsletter/april/issue151/newsletter4.php](http://www.runrev.com/newsletter/april/issue151/newsletter4.php).'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.runrev.com/newsletter/april/issue151/newsletter4.php](http://www.runrev.com/newsletter/april/issue151/newsletter4.php)。'
- en: Where does the code go?
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码去哪里了？
- en: In programming languages, such as the one in LiveCode, *code* is referred to
    as **scripts** and *methods* or *functions* are known as **handlers** (though
    in LiveCode, a handler that returns a value is also called a function). Projects
    made with hard-to-use programming tools often comprise dozens of external text
    files, one for each model, view, or controller. In LiveCode, this is simpler,
    as the scripts are attached to the object that needs that code.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程语言中，例如LiveCode中的编程语言，*代码*被称为**脚本**，而*方法*或*函数*被称为**处理程序**（尽管在LiveCode中，返回值的处理程序也称为函数）。使用难以使用的编程工具创建的项目通常包含数十个外部文本文件，每个模型、视图或控制器一个。在LiveCode中，这要简单得多，因为脚本被附加到需要该代码的对象上。
- en: To deal with user interaction in other tools, you will have to write code that
    receives the event (perhaps just a mouse click on a button) to perform the relevant
    action. In LiveCode, there is a message path that takes care of these events,
    and passes the event up the hierarchy. If you click on a LiveCode interface control
    that doesn't have a mouse event handler, the click goes up the hierarchy to the
    card level. If the card doesn't have a handler for that event, it continues up
    to the stack level.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理其他工具中的用户交互，你必须编写接收事件的代码（可能只是按钮上的鼠标点击）以执行相关操作。在LiveCode中，有一个消息路径负责这些事件，并将事件向上传递到层次结构。如果你点击一个没有鼠标事件处理程序的LiveCode界面控件，点击将向上传递到卡片级别。如果卡片没有为该事件提供处理程序，它将继续向上传递到堆栈级别。
- en: 'You can have additional levels of hierarchy by putting other stacks in use,
    but for our purpose, we just need these three: the button, card, and stack.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用其他堆栈，你可以有额外的层次结构级别，但就我们的目的而言，我们只需要这三个：按钮、卡片和堆栈。
- en: This message hierarchy allows us to place the code needed via several interface
    controls at a higher level available to all of these controls. One case with the
    calculator number buttons is that each one needs to do exactly the same thing,
    and by putting that code in the card level, all of them can make use of that one
    handler.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这种消息层次结构允许我们在多个界面控件中放置所需的代码，这些控件在更高层次上对所有这些控件都是可用的。计算器数字按钮的一个例子是，每个都需要执行完全相同的事情，通过将代码放在卡片级别，所有这些都可以使用那个处理程序。
- en: There isn't a performance advantage if you have the shared handler in the card
    level or much of a file size improvement, but as you develop the code for the
    simple calculator example, you can make changes in the single-card script instead
    of the 11 calculator button scripts.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在卡片级别有共享处理程序，或者文件大小有显著改进，那么并没有性能优势，但在为简单的计算器示例编写代码时，你可以在单个卡片脚本中而不是11个计算器按钮脚本中进行更改。
- en: We will now start building the calculator and add scripts to the 14 buttons,
    a field, and the card.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将开始构建计算器，并将脚本添加到14个按钮、一个字段和卡片中。
- en: Time for action – making cards and navigating between them
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 制作卡片并在它们之间导航
- en: A calculator doesn't really need a title screen, but we'll make one anyway in
    order to practice adding scripts and to do some basic navigation. Start a new
    Mainstack from the **File** menu and open the **Inspector** palette.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 计算器其实不需要标题屏幕，但为了练习添加脚本和进行一些基本导航，我们还是做一个吧。从**文件**菜单开始一个新的Mainstack，并打开**检查器**调色板。
- en: In the **Inspector** palette, enter the `Simple Calculator` stack name in the
    **Name** field.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**检查器**调色板中，在**名称**字段中输入`Simple Calculator`堆栈名称。
- en: Select **New Card** from the **Object** menu.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**对象**菜单中选择**新建卡片**。
- en: Use the **View** menu to either go to the previous card (**Go Prev**) or first
    card (**Go First**).
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**视图**菜单转到上一张卡片（**上一张**）或第一张卡片（**第一张**）。
- en: Make sure you have the **Edit** tool selected in the **Tools** palette and drag
    a **Label** field to the middle of the card window. In this case, you can easily
    see which one is the **Label** field (it says **Label:** in the icon), but as
    a general tip, you can point to controls in the **Tools** Palette and see the
    help tip that shows what kind of control it is.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你在**工具**调色板中选择了**编辑**工具，并将**标签**字段拖到卡片窗口的中间。在这种情况下，你可以很容易地看到哪个是**标签**字段（图标上写着**标签：**），但作为一个一般提示，你可以将鼠标悬停在**工具**调色板中的控件上，并查看显示控件类型的帮助提示。
- en: In the **Basic Properties** section of the **Inspector** palette, uncheck the
    **Don't wrap** checkbox.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**检查器**调色板的**基本属性**部分，取消选中**不换行**复选框。
- en: Type `title` into the **Name** entry field.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**名称**输入字段中输入`title`。
- en: Choose **Contents** from the **Inspector** drop-down menu and replace the initial
    text that says **Label:** by entering `Simple Calculator` into the **Contents**
    entry field.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**检查器**下拉菜单中选择**内容**，并将初始文本“**标签：**”替换为在**内容**输入字段中输入`Simple Calculator`。
- en: Choose **Text Formatting** from the drop-down menu and click on the Align text
    center button, the middle of the three **Align** buttons.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉菜单中选择**文本格式化**，然后点击中间的三个**对齐**按钮中的**居中对齐**按钮。
- en: Change the font, size, and style options to make a nice looking title, resizing
    the field itself until you like how it looks:![Time for action – making cards
    and navigating between them](img/image00230.jpeg)
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改字体、大小和样式选项以制作一个看起来不错的标题，调整字段本身的大小，直到你喜欢它的外观：![行动时间 - 制作卡片并在它们之间导航](img/image00230.jpeg)
- en: Drag a **Push** button (the second icon from the top-left corner of the **Tools**
    palette) from the **Tools** palette and place it below the title field.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**工具**调色板中拖动一个**推**按钮（位于**工具**调色板左上角第二个图标）并将其放置在标题字段下方。
- en: In the **Inspector** palette, choose **Basic Properties** from the drop-down
    menu (it's the menu that says **Text Formatting** in the preceding screenshot)
    and enter `Begin` in the **Name** entry field. LiveCode will automatically show
    the same text as the button's label even though you didn't type it in the **Label**
    entry field.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**检查器**调色板中，从下拉菜单中选择**基本属性**（在先前的截图中说**文本格式化**的菜单）并在**名称**输入字段中输入`Begin`。尽管你未在**标签**输入字段中输入，LiveCode也会自动显示与按钮标签相同的文本。
- en: You can go into the **Text Formatting** options for buttons too, if you wish!
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你愿意，也可以进入按钮的**文本格式化**选项！
- en: Mentally prepare yourself; we're about to type in our first script!
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在心理上做好准备；我们即将输入我们的第一个脚本！
- en: With the button selected, choose **Object Script** from the **Object** menu.
    You can also right-click on the button itself and select **Edit Script**.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在按钮被选中时，从**对象**菜单中选择**对象脚本**。你也可以右键单击按钮本身并选择**编辑脚本**。
- en: The script window will appear and show a starter script of `on mouseUp`, blank
    line, and `end mouseUp`, as shown in the following screenshot:![Time for action
    – making cards and navigating between them](img/image00231.jpeg)
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 脚本窗口将出现，并显示一个`on mouseUp`的起始脚本、空白行和`end mouseUp`，如下截图所示：![制作卡片并在它们之间导航的时间 –
    制作卡片和导航之间](img/image00231.jpeg)
- en: 'Complete the script by typing `go next` into the blank line to give you this
    final script:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在空白行中键入`go next`来完成脚本，得到以下最终脚本：
- en: '[PRE1]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, perform the following steps:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，执行以下步骤：
- en: Close the script window and click on **Yes** when asked whether you want to
    save the changes.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭脚本窗口，当询问是否要保存更改时，点击**是**。
- en: Choose the **Browse** tool from the **Tools** palette (the upper leftmost tool
    that looks like a regular cursor arrow) and click on the **Begin** button that
    you just made. All being well, you're now looking at a blank card. Don't worry,
    you didn't just delete the title field and button! You're now on the second of
    the two cards that you made earlier. Use the **View** menu again to go back to
    the first card to try the button again.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**工具**调色板（看起来像普通光标箭头的最左上角工具）中选择**浏览**工具，并点击你刚刚创建的**开始**按钮。如果一切顺利，你现在应该看到一个空白卡片。别担心，你并没有删除标题字段和按钮！你现在在之前创建的两个卡片中的第二个卡片上。再次使用**视图**菜单回到第一个卡片，再次尝试按钮。
- en: Save! from the **File** menu, choose **Save** and save the stack with the `Simple
    Calculator` name somewhere you can easily find it later. Perhaps, you could make
    a folder to hold the several stacks you will make while reading this book.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**文件**菜单中选择**保存**，并将名为`Simple Calculator`的堆栈保存在你稍后容易找到的地方。也许，你可以创建一个文件夹来存放你在这本书阅读过程中制作的几个堆栈。
- en: '*What just happened?*'
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: These may have seemed like a lot of steps, but we did create the two cards we
    needed, laid out a nice looking title field, and a begin button with its own script.
    In reality, these steps take well under two minutes and will be even quicker to
    carry out as you gain experience in LiveCode.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤可能看起来很多，但我们确实创建了所需的两个卡片，布置了一个看起来不错的标题字段和一个带有自己脚本的开始按钮。实际上，这些步骤不到两分钟就能完成，随着你在LiveCode中积累经验，操作会更快。
- en: Pop quiz – selecting the best name?
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速问答 - 选择最佳名称？
- en: If you want to make it big in the multimedia authoring tool world, which of
    these names would be a bad choice?
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在多媒体制作工具领域取得成功，以下哪个名字是不合适的？
- en: Henry
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 亨利
- en: Bill
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 比尔
- en: Bob
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 鲍勃
- en: Kevin
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 凯文
- en: 'Answer: 1'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 答案：1
- en: In the early days of multimedia, it seemed like everyone had one of just a few
    popular names. There was Bill Atkinson, who created HyperCard, and Bill Appleton,
    who created SuperCard. Kevin Calhoun was the lead HyperCard programmer for a while
    and Kevin Miller is the head of LiveCode. Bob Stein was one of the founders of
    The Voyager Company and along with Bob Abel who was one of the pioneers in visual
    effects. Dan was another good choice as there was Dan Winkler, the author of the
    HyperTalk language, and Danny Goodman, the author of many famous programming books.
    Henry would be a good name if you wanted to make motorcars or marry lots of queens.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在多媒体的早期，似乎每个人都有一两个流行的名字。有比尔·阿特金森，他创建了HyperCard，还有比尔·阿普尔顿，他创建了SuperCard。凯文·卡尔霍恩曾是一段时间HyperCard的主要程序员，凯文·米勒是LiveCode的负责人。鲍勃·斯坦是Voyager公司的创始人之一，他与鲍勃·阿贝尔一起是视觉效果领域的先驱。丹是一个很好的选择，因为丹·温克勒是HyperTalk语言的作者，丹尼·古德曼是许多著名编程书籍的作者。如果你想制造汽车或者娶很多王后，亨利会是一个好名字。
- en: Making a simple calculator application
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作一个简单的计算器应用程序
- en: With even basic familiarity of LiveCode, you can start to make something of
    use. Here, we will make a very simple calculator stack.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 即使对LiveCode只有基本的熟悉度，你也能开始制作一些有用的东西。在这里，我们将制作一个非常简单的计算器堆栈。
- en: Inspector clues, oh!
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查器提示，哦！
- en: You will find yourself using the Inspector palette a lot; so, take a moment
    to study how it behaves. When you select an object on the card, you will see that
    the Inspector palette changes its appearance, sometimes even its height, to show
    the options for the item you have selected. It is smart enough to notice when
    you have selected multiple items and shows the align tools.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现自己在很多情况下都会使用检查器调色板；所以，花点时间研究一下它的行为。当你选择卡片上的一个对象时，你会看到检查器调色板会改变其外观，有时甚至高度也会改变，以显示你选择的项目的选项。它足够智能，能够注意到当你选择了多个项目时，并显示对齐工具。
- en: Sometimes, you will want to keep an Inspector palette set to view the options
    of a particular object on the card, and not switch so as to show a different object
    as you make other selections. In the upper-right corner of the Inspector palette
    is a padlock icon, which will let you lock the Inspector to the current object.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，你可能想要保持检查器调色板以查看卡片上特定对象的选择，而不是在做出其他选择时切换以显示不同的对象。在检查器调色板的右上角有一个锁形图标，这将允许你将检查器锁定到当前对象。
- en: So far, most of the Inspector palette options haven't affected us, but one that
    is about to be relevant is the fact that you can set a name for an item that is
    different from its label. You may know from other programming languages, and this
    does apply to LiveCode too, that some names are less legal than others. Perhaps
    you can't have spaces in the name or use a colon or backslash. If you name a button
    with a number, button "1" may not be button 1 and this could lead to confusion.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，检查器调色板的大多数选项还没有影响我们，但即将变得相关的一个事实是，你可以为项目设置一个与标签不同的名称。你可能从其他编程语言中知道，这也适用于LiveCode，有些名称比其他名称合法。也许你无法在名称中使用空格，或者使用冒号或反斜杠。如果你用数字命名一个按钮，按钮“1”可能不是按钮1，这可能会导致混淆。
- en: For the calculator keys, we will set a label to make it look correct and a name
    that doesn't lead to confusion. Speaking of those calculator keys…
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 对于计算器键，我们将设置一个标签使其看起来正确，并设置一个不会引起混淆的名称。说到那些计算器键……
- en: Time for action – making the calculator buttons
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始行动——制作计算器按钮
- en: 'Using the screenshot shown at the start of this chapter as a guide, let''s
    build the calculator buttons (the scripts you will type are also listed if you
    later want to make sure you typed them correctly):'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 以本章开头所示的截图作为指南，让我们构建计算器按钮（如果你稍后想确保你正确地输入了这些脚本，下面列出的脚本也会列出）：
- en: If you're not already there, go to the second card, the currently empty one.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你还没有到那里，请转到第二张卡片，当前为空的卡片。
- en: Make sure the **Edit** button is selected in the **Tools** palette and drag
    a **Push** button to the card, to the position of the `7` button.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在**工具**调色板中选中了**编辑**按钮，并将一个**推按钮**拖到卡片上，放置在`7`按钮的位置。
- en: In the **Basic Properties** panel of the Inspector palette, set the **Style**
    drop-down menu to **Rounded Rectangle** (in real life, you would take the time
    to have nice graphical buttons; here, you are just matching my ugly "programmer
    art"!).
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器调色板的**基本属性**面板中，将**样式**下拉菜单设置为**圆角矩形**（在现实生活中，你会花时间制作漂亮的图形按钮；这里，你只是在匹配我的丑陋的“程序员艺术”！）。
- en: Set the name of the button to `number7` and the label to `7`.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将按钮的名称设置为`number7`，标签设置为`7`。
- en: Select **Object Script** from the **Object** menu to see the starter script
    as you did with the **Begin** button.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **对象** 菜单中选择 **对象脚本**，就像你使用 **开始** 按钮那样查看起始脚本。
- en: In the empty line between `on mouseUp` and `end mouseUp`, type `numberPressed
    the label of me`. Note that `numberPressed` is a new handler that needs to be
    defined later. When used, `me` refers to the current object; in this case, the
    button pressed.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `on mouseUp` 和 `end mouseUp` 之间的空白行中输入 `numberPressed the label of me`。注意，`numberPressed`
    是一个需要稍后定义的新处理程序。当使用时，`me` 指的是当前对象；在这种情况下，是按下的按钮。
- en: Close and save the script.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭并保存脚本。
- en: Select the button and make a copy of it by choosing **Duplicate Objects** from
    the **Edit** menu and position it where the **8** button will be. Copy/Paste and
    *Alt*-drag are two other ways to duplicate an object.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择按钮，通过从 **编辑** 菜单中选择 **复制对象** 来制作一个副本，并将其放置在 **8** 按钮的位置。复制/粘贴和 *Alt*-拖动是复制对象的另外两种方法。
- en: Set the name to `number8`, and label to `8`.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将名称设置为 `number8`，并将标签设置为 `8`。
- en: Repeat steps 8 and 9 for the buttons 9, 4, 5, 6, 1, 2, 3, 0, and the decimal
    point using the corresponding number instead of `8`. For the decimal point, let
    the name be `decimalpoint`.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用相应的数字而不是 `8`，对按钮 9、4、5、6、1、2、3、0 和小数点重复步骤 8 和 9。对于小数点，让名称为 `decimalpoint`。
- en: Duplicate one of the buttons again, name the new button `divide`, and type `/`
    for its label.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次复制一个按钮，将新按钮命名为 `divide`，并将其标签设置为 `/`。
- en: Select `Object Script` for the divide button and change `numberPressed` in the
    middle line to say `operatorPressed`, making the whole line `operatorPressed the
    short name of me`.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为除法按钮选择 `Object Script`，并将中间行的 `numberPressed` 改为 `operatorPressed`，使整行变为 `operatorPressed
    the short name of me`。
- en: Duplicate the divide button three more times and set the names to `multiply`,
    `plus`, and `minus`. Set the labels to `*`, `+`, and `-`.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再复制除法按钮三次，并将名称分别设置为 `multiply`、`plus` 和 `minus`。将标签分别设置为 `*`、`+` 和 `-`。
- en: Duplicate the divide button again, giving the new button a name `equals` and
    a label `=`, and change the middle line of script to say `equalsPressed`.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次复制除法按钮，为新按钮命名为 `equals`，标签为 `=`，并将脚本中间行改为 `equalsPressed`。
- en: Duplicate the **=** button and set the new button's name to `toggleSign` and
    label to `+-`; then, change the middle line of script to `toggleSign`.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制 **=** 按钮，并将新按钮的名称设置为 `toggleSign`，标签设置为 `+-`；然后，将脚本中间行改为 `toggleSign`。
- en: Duplicate the **=** button and set the new button's name to `clear` and label
    to `C`; then, change the middle line of script to be `clearPressed`.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制 **=** 按钮，并将新按钮的名称设置为 `clear`，标签设置为 `C`；然后，将脚本中间行改为 `clearPressed`。
- en: Drag a **Label** field from the **Tools** palette and in the **Inspector** palette,
    choose `Text Formatting` from the drop-down menu. In the `Text Formatting` settings,
    choose a nice looking font, right-justified text, and a large font size. Name
    the field `display`.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **工具** 面板拖动一个 **标签** 字段到 **检查器** 面板，从下拉菜单中选择 `Text Formatting`。在 `Text Formatting`
    设置中，选择一个看起来不错的字体，右对齐文本，并设置大字体大小。将字段命名为 `display`。
- en: 'Edit the script of the `display` field. With fields, you don''t get the starter
    script that you get with buttons, so you will need to type the `mouseUp` lines
    yourself. Type these three lines in the script: `on mouseUp`, `set the clipboarddata["TEXT"]
    to me`, and `end mouseUp`. DO enter the quote marks on either side of the word
    `"TEXT"`.'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `display` 字段的脚本。对于字段，你不会得到与按钮相同的起始脚本，因此你需要自己输入 `mouseUp` 行。在脚本中输入这三行：`on
    mouseUp`、`set the clipboarddata["TEXT"] to me` 和 `end mouseUp`。请确保在 `"TEXT"` 两边输入引号。
- en: Move all the buttons in their right spots and select the sets of buttons to
    then use the Align tools and make your calculator layout match the screenshot.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有按钮移动到正确的位置，并选择按钮组然后使用对齐工具，使计算器布局与截图匹配。
- en: Save it now!
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在保存它！
- en: '*What just happened?*'
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: Quite a lot just happened! We have now made all the card level objects and typed
    in their scripts. Most of the scripts are "calling" up to a card level handler
    that we will be setting up next. Before doing that, it's worth trying to understand
    some of the lines we just entered.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在发生了很多事情！我们已经创建了所有的卡片级别对象并输入了它们的脚本。大多数脚本都是“调用”一个我们将要设置的卡片级别处理程序。在这样做之前，尝试理解我们刚刚输入的一些行是值得的。
- en: Verbosity, synonyms, and "me"
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 详尽性、同义词和 "me"
- en: The English-like nature of the programming language in LiveCode is amazingly
    powerful, but rigidly so. In some other tools, you have a choice of whether you
    want to use verbose English-like syntax, less verbose, or what is called *dot
    syntax*. The *Lingo language*, in Adobe Director, is a good comparison.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: LiveCode 中的编程语言具有英语般的性质，非常强大，但非常严格。在其他一些工具中，你可以选择是否使用冗长的英语语法、简洁的语法，或者称为 *点语法*
    的语法。Adobe Director 中的 *Lingo 语言* 是一个很好的比较。
- en: 'Suppose we want to change the text inside a field, that is the first entry
    of a director movie''s cast, we can perform the following verbose syntax:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要更改字段内的文本，即导演电影演员表的第一条记录，我们可以执行以下冗长的语法：
- en: '[PRE2]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can perform a slightly less verbose syntax:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以执行一种稍微不那么冗长的语法：
- en: '[PRE3]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Or, we can perform a dot-syntax:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以执行点语法：
- en: '[PRE4]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In LiveCode, there isn''t a choice. What you type has to be in the form of:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在 LiveCode 中，没有选择。你必须以以下形式输入：
- en: '[PRE5]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: However, you do have a choice about whether to use a long version of a word,
    short version, or an abbreviated form. There are also synonyms, which allow you
    to use a word that makes more sense to you.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你确实可以选择使用单词的完整形式、简短形式或缩写形式。还有同义词，这允许你使用对你更有意义的单词。
- en: 'Here are the two ways of saying the same thing, with the second variation using
    an abbreviated form of the keywords:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是两种表达相同意思的方式，第二种变体使用了关键词的缩写形式：
- en: '[PRE6]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When you are dealing with the contents of the object that has the script running,
    you can use the keyword `me` to save on some typing, and LiveCode will also try
    to work out what you have in mind, if possible.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 当你处理运行脚本的对象的内 容时，你可以使用关键词 `me` 来节省一些输入，如果可能的话，LiveCode 也会尽力理解你的意图。
- en: 'Take the lines we have entered as examples:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 以我们输入的行为例：
- en: '[PRE7]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here, `numberPressed` will propagate up to a card handler that we will add
    (soon) and `the label of me` will look at the Label that you have set for the
    object that the script is inside of:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`numberPressed` 将传播到我们将要添加（很快）的卡片处理程序，而 `the label of me` 将查看脚本所在的对象的标签：
- en: '[PRE8]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In this case, `me` would normally refer to the object (as is the case with
    `the label of me`), but because we gave the extra clue of `["TEXT"]`, LiveCode
    knows that it''s the text contents of the field that have the script and not the
    field itself. Still, because there is potential for confusion, when reading your
    own code later, you could add a couple of words to make the meaning more clear:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`me` 通常指的是对象（就像 `the label of me` 的情况一样），但由于我们提供了额外的线索 `["TEXT"]`，LiveCode
    就知道脚本和文本内容是字段的一部分，而不是字段本身。尽管如此，由于存在混淆的可能性，在以后阅读自己的代码时，你可以添加一些词语来使意思更加清晰：
- en: '[PRE9]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: By the way, the display field script is not needed for the calculator to work.
    It's just there so that at any point of time, you can click on the field and have
    the current value copied to the clipboard in order to paste it in other applications.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，显示字段脚本对于计算器的工作不是必需的。它只是在那里，以便在任何时候，你都可以点击字段，将当前值复制到剪贴板，以便在其他应用程序中粘贴。
- en: 'You might choose to be more verbose than is needed, just for readability reasons,
    and in these chapters, this is going to be the case. It is easier to tell what
    is going to happen by using:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会选择比必要的更冗长，只是为了可读性，在这些章节中，情况就是这样。通过使用以下方式，更容易知道将要发生什么：
- en: '[PRE10]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following will be less verbose compared to the preceding entry, even though
    they are equally valid:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的条目相比，以下内容将更加简洁，尽管它们同样有效：
- en: '[PRE11]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In either case, as it's a field, LiveCode knows what you meant.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何情况下，由于它是一个字段，LiveCode 都知道你的意图。
- en: You see in the script that we typed `short name of me`, what's that all about?
    Objects in LiveCode have a lengthy description of where they are located, for
    example, the `buttonname` button of the `1234` card ID of the `path/to/stack.livecode`
    stack. In the calculator application, we need only the single word that you set
    as the name of the button. If we asked for `name of me`, it would still say "the
    `buttonname` button". To just grab the name itself, we use `short name of me`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 你在脚本中看到我们输入了 `short name of me`，这是怎么回事？LiveCode 中的对象有一个关于它们位置的详细描述，例如，`buttonname`
    按钮位于 `path/to/stack.livecode` 栈的 `1234` 卡片 ID 上。在计算器应用程序中，我们只需要你设置为按钮名称的单个单词。如果我们请求
    `name of me`，它仍然会说“`buttonname` 按钮”。为了只获取名称本身，我们使用 `short name of me`。
- en: There are times when you will want to use the other variations of `name`, including
    the long name and the abbreviated name, which you can read about in the LiveCode
    Dictionary entry for `name`. In addition to a description of the different ways
    to use `name`, there are a number of cautions you need to be aware of.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候你会想要使用`name`的其他变体，包括长名称和缩写名称，你可以在LiveCode字典条目中阅读有关`name`的信息。除了描述如何使用`name`的不同方式外，还有一些注意事项你需要注意。
- en: Tip
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Case sensitivity**'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '**大小写敏感性**'
- en: If any of you use advanced LiveCode, you may notice that in some cases, I have
    the casing wrong. LiveCode doesn't mind what casing you have used and so, when
    I incorrectly said `clipboarddata` instead of `clipboardData`, it didn't matter.
    This feature isn't unique to LiveCode, but it is common among near-English programming
    languages to not demand that the user gets the casing exactly right before the
    command works.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你们中的任何一位使用了高级LiveCode，可能会注意到在某些情况下，我使用了错误的字母大小写。LiveCode并不介意你使用了哪种大小写，所以当我错误地说成`clipboarddata`而不是`clipboardData`时，这并不重要。这个特性并不仅限于LiveCode，但在接近英语的编程语言中，这是常见的，它们不会在命令执行前要求用户必须完全正确地使用大小写。
- en: Adding the card handlers
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加卡片处理程序
- en: 'If you dared to go ahead and tried using the calculator buttons, you will see
    a lot of script errors. We need to add in the card level handlers to be at the
    receiving end of the calls that the buttons make. Instead of walking you through,
    typing a line of code at a time, it probably would be quicker to present the lines
    in one go and explain what each line does. As a practice run, here are the lines
    that we have entered so far:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你敢尝试使用计算器按钮，你会看到很多脚本错误。我们需要添加卡片级别的处理程序，以便成为按钮发出的调用接收端。与其逐行引导你，一次输入一行代码，可能更快的方法是一次性展示所有行并解释每行的作用。作为练习，以下是到目前为止我们输入的行：
- en: 'On all the number buttons and the decimal point button, you should have this
    script:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有数字按钮和小数点按钮上，你应该有这个脚本：
- en: '[PRE12]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`The on mouseUp` event is triggered when you press and release the left mouse
    button while on the `numberPressed` call. This event will call a card handler
    named `numberPressed`, passing with it, the label that you had set for the button
    that holds this script.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在`numberPressed`调用时按下并释放左鼠标按钮时，将触发`on mouseUp`事件。此事件将调用一个名为`numberPressed`的卡片处理程序，并传递你为包含此脚本的按钮设置的标签。
- en: 'The **C** (clear) button has this script:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '**C**（清除）按钮有这个脚本：'
- en: '[PRE13]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `clearPressed` event will call a card script named `clearPressed`.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`clearPressed`事件将调用一个名为`clearPressed`的卡片脚本。'
- en: 'The other buttons all work the same way; they call a handler of the name used,
    which we''re about to add to the card script. This is script for the **+**, **-**,
    *****, and **/** buttons, passing to the card level, the name of the button in
    question:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 其他按钮的工作方式相同；它们调用一个使用该名称的处理程序，我们即将将其添加到卡片脚本中。这是**+**、**-**、*****和**/**按钮的脚本，将按钮的名称传递到卡片级别：
- en: '[PRE14]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following script is for the +- button:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 以下脚本是为加号按钮准备的：
- en: '[PRE15]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The display field has this script:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 显示字段有这个脚本：
- en: '[PRE16]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the field's case, only one line of code is being executed, so no need to
    put that up on the card level, unless we had a lot of fields doing the same thing.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在字段的情况下，只执行一行代码，所以不需要将其放在卡片级别上，除非我们有很多字段做同样的事情。
- en: So, why don't we add all those card level scripts! We will take them one at
    a time, with an explanation of how each one works. But first, let's see how LiveCode
    handles variables.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们为什么不添加所有这些卡片级别的脚本呢！我们将逐个处理它们，并解释每个脚本是如何工作的。但首先，让我们看看LiveCode是如何处理变量的。
- en: Tip
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从你购买的所有Packt书籍的账户中下载示例代码文件。[http://www.packtpub.com](http://www.packtpub.com)。如果你在其他地方购买了这本书，你可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册以直接将文件通过电子邮件发送给你。
- en: Variable types in LiveCode
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LiveCode中的变量类型
- en: Generally speaking, variables are memory locations where you store values that
    you need to access later, but in most programming languages, you can dictate which
    routines have access to which variables. Less English-like languages may include
    the terms `public`, `private`, and `protected`. Things are not that different
    in LiveCode, but words are used that more accurately describe the region that
    the variable can be used in. If a variable is to be readable everywhere, it would
    be `global`. If it's just to be used in the current script, it's `local`.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 一般而言，变量是存储你稍后需要访问的值的内存位置，但在大多数编程语言中，你可以指定哪些例程可以访问哪些变量。不那么像英语的语言可能包括`public`、`private`和`protected`等术语。在
    LiveCode 中，事情并没有那么不同，但使用的词汇更准确地描述了变量可以使用的区域。如果一个变量要在任何地方都可见，它将是`global`。如果它只是要在当前脚本中使用，它将是`local`。
- en: LiveCode also has custom property variables, and as an aside, many people would
    use these for performing the calculator button values instead of relying on the
    label of the button. Perhaps, we'll use them later!
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: LiveCode 还具有自定义属性变量，顺便提一下，许多人会使用这些变量来执行计算器按钮的值，而不是依赖于按钮的标签。也许，我们以后会用到它们！
- en: 'Now, where was I… oh yes, card level scripts. This is the first line of the
    card script:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我刚才说到哪里了……哦，是的，卡片级别脚本。这是卡片脚本的第一个语句：
- en: '[PRE17]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As discussed, these are the variables that will allow the many handlers to pass
    values to each other. In this case, the variables could be local, but often, you
    may make them global instead, thinking that a case may come up later where you
    need to get at the variables from outside the script you're in.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，这些变量将允许许多处理器相互传递值。在这种情况下，变量可以是局部的，但通常，你可能会选择将它们设置为全局，认为将来可能会有需要从你所在的脚本外部访问这些变量的情况。
- en: 'It''s good to reset things when you start the app and LiveCode has an `openCard`
    event that we can pick up on. The following code resets things:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 当你启动应用程序时重置事物是个好习惯，LiveCode 有一个`openCard`事件，我们可以利用它。以下代码将重置事物：
- en: '[PRE18]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Having the reset lines in their own `clearPressed` handler will allow us to
    call it at other times, not just when the card opens, and we do call it directly
    when we click on the **C** clear button. This will zero out the display field,
    the running total for your calculation and the last number that you entered into
    the calculator. It also clears the variable that is used to remember which operator
    button you last pressed, and a Boolean (true or false) variable is used to recognize
    whether a number button that you press should clear the display or append to the
    display.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 将重置行放在自己的`clearPressed`处理器中，将允许我们在其他时间调用它，而不仅仅是当卡片打开时，并且当我们点击**C**清除按钮时，我们直接调用它。这将清零显示字段、计算的总计以及你最后输入计算器的数字。它还会清除用于记住你最后按下的运算符按钮的变量，以及一个布尔（真或假）变量，用于识别你按下的数字按钮是否应该清除显示或附加到显示。
- en: 'All the numbered buttons and the decimal point button call this handler:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 所有编号按钮和小数点按钮都调用此处理器：
- en: '[PRE19]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `n` comment after the handler name, is a parameter variable that stores
    the content that was sent to the handler. In this case, it's the label of the
    button that was pressed. All this routine needs to add is a character to the end
    of the display field, except when you are typing in a new number. That's where
    the `newNumber` Boolean variable comes in; if it is set to `true`, the incoming
    character replaces all the contents of the display field. If it's `false`, the
    character is added to the end of the field.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 处理器名称后面的`n`注释是一个参数变量，它存储发送到处理器的内容。在这种情况下，它是被按下的按钮的标签。这个例程需要做的只是向显示字段末尾添加一个字符，除非你正在输入一个新的数字。这就是`newNumber`布尔变量的作用；如果它设置为`true`，传入的字符将替换显示字段的所有内容。如果它是`false`，字符将被添加到字段末尾。
- en: 'This is the handler to be used when you press the **+**, **-**, *****, or **/**,
    buttons:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 当你按下**+**、**-**、****或**/**按钮时，将使用此处理器：
- en: '[PRE20]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: When you use a calculator, you type in one number, an operator, and then another
    number, followed by either another operator or the `equals` button. Now you press
    the operator button as there is no way to know what you're doing (since you haven't
    entered the next number in the calculation yet), so we have to remember the operator
    when we press the equals button. If the `currentCommand` variable doesn't already
    have a value, we store the display field text into a `currentTotal` variable,
    store the operator character that you pressed into the `currentCommand` variable,
    and make sure that `newNumber` is set to `true`. Doing this makes sure that the
    next number button you press will clear the display field. If `currentCommand`
    already has a value, we replace it with the new value and then call the same handler
    that is used when you press the `equals` button.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用计算器时，你输入一个数字，一个运算符，然后另一个数字，接着是另一个运算符或`equals`按钮。现在你按下运算符按钮，因为没有办法知道你在做什么（因为你还没有输入计算中的下一个数字），所以我们必须在按下等于按钮时记住运算符。如果`currentCommand`变量还没有值，我们将显示字段文本存储到`currentTotal`变量中，将你按下的运算符字符存储到`currentCommand`变量中，并确保`newNumber`设置为`true`。这样做确保了下一个你按下的数字按钮将清除显示字段。如果`currentCommand`已经有值，我们将其替换为新值，然后调用在按下`equals`按钮时使用的相同处理程序。
- en: 'There are most likely shorter ways to cope with the `equals` button being pressed,
    but here, we''ll use several `if` statements and run the appropriate calculation
    code:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能存在处理按下`equals`按钮的更短方法，但在这里，我们将使用几个`if`语句并运行适当的计算代码：
- en: '[PRE21]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The contents of the display field are stored in the `currentValue` variable
    and the last operator button you pressed (that is stored in `currentCommand`)
    is looked at, to see what happens next. If there wasn't a previous operator, as
    would be the case if you pressed "equals" twice in a row, we'd ignore the button
    press and exit the routine. For the four operators, we do the appropriate calculation.
    Afterwards, we store the new running total in the `currentTotal` variable, make
    sure that the `newNumber` Boolean is `true` (so that the next number button pressed
    will clear the display field), and we forget the last operator button that was
    pressed by putting `empty` in the `currentCommand` variable.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 显示字段的内容存储在`currentValue`变量中，最后按下的运算符按钮（存储在`currentCommand`中）被检查，以查看接下来会发生什么。如果没有先前的运算符，例如连续两次按下“等于”，我们将忽略按钮按下并退出程序。对于四个运算符，我们执行适当的计算。之后，我们将新的运行总数存储在`currentTotal`变量中，确保`newNumber`布尔值为`true`（这样下一个数字按钮按下时将清除显示字段），并通过将`empty`放入`currentCommand`变量中忘记最后按下的运算符按钮。
- en: One thing to note is that LiveCode is smart enough to know that the text string
    inside the display field is to be treated as a floating-point number.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个需要注意的事情是，LiveCode足够智能，知道显示字段内的文本字符串应该被当作浮点数处理。
- en: 'The `togglesign` last handler is as follows:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`togglesign`最后一个处理程序如下：'
- en: '[PRE22]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This is a very simple routine that doesn't have to understand that it's floating
    point numbers are being represented. It simply checks whether the first character
    is a minus or not and if it is, it deletes the character; if not, it inserts a
    hyphen that LiveCode will later interpret as a negative value.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单的程序，不需要理解它所表示的是浮点数。它只是检查第一个字符是否为负号，如果是，则删除该字符；如果不是，则插入一个连字符，LiveCode稍后会将其解释为负值。
- en: Pop quiz – try to remember…
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速问答——试着记住…
- en: 'As you get to learn a new tool, you can end up taking a lot of time remembering
    where everything you may need, is located. You know what you want to do, you know
    how to do it, but you can''t remember where that thing is located! For example:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 当你学习一个新的工具时，你可能会花费很多时间记住你可能需要的一切所在的位置。你知道你想要做什么，你知道如何做，但你就是记不住那个东西在哪里！例如：
- en: Q1\. Where did you go to set the text styling for the calculator's title field?
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: Q1. 你去哪里设置计算器标题字段的文本样式？
- en: The **Edit** menu.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**编辑**菜单。'
- en: The **Object** menu.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**对象**菜单。'
- en: The **Text Formatting** section of the **Inspector** palette.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**检查器**调色板的**文本格式化**部分。'
- en: The **Text** menu.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**文本**菜单。'
- en: 'Answer: 3'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 答案：3
- en: Getting to this section involved selecting the Edit tool from the Tools palette,
    clicking on the title field on card 1, and choosing **Text Formatting** from the
    Inspector palette drop-down menu. However, there is indeed a Text menu. Really,
    that's what we should have used!
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 进入这一部分需要从工具调色板中选择编辑工具，点击卡片1上的标题字段，然后从检查器调色板下拉菜单中选择**文本格式化**。然而，确实有一个文本菜单。实际上，这正是我们应该使用的！
- en: Extending the calculator
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展计算器
- en: 'It is possible to add more features to the simple calculator. If we consider
    the functions in the card script and how the buttons are named, we can start to
    see the processes that are involved in adding a new ability, some of these processes
    are as follows:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 可以向简单的计算器添加更多功能。如果我们考虑卡片脚本中的函数以及按钮的命名，我们可以开始了解添加新功能所涉及的过程，以下是一些过程：
- en: The calculator operator buttons are named so that the card script knows which
    one you clicked on.
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算器操作按钮的命名是为了让卡片脚本知道您点击了哪个。
- en: When the "equals" button is pressed there is a set of `if` statements in the
    `equalsPressed` handler that determine what happens next.
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当按下“等于”按钮时，在`equalsPressed`处理程序中有一组`if`语句，用于确定接下来会发生什么。
- en: Have a go hero – getting to the root of things
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试英雄之旅 – 探索事物的本质
- en: 'On Windows, you can add a square root symbol with `Alt 251` and on Mac, with
    the shortcut *option* + *v*. Unfortunately, LiveCode doesn''t like these as button
    labels! At least on Mac, when you type the character in the Inspector palette,
    the character immediately vanishes. One workaround would be to use the message
    box and type this:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，你可以使用`Alt 251`添加平方根符号，而在Mac上，则使用快捷键*option* + *v*。不幸的是，LiveCode不喜欢将这些作为按钮标签！至少在Mac上，当你在这个检查器调色板中输入字符时，字符会立即消失。一种解决方案是使用消息框并输入以下内容：
- en: '[PRE23]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This should give you the right symbol as the button label.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会给你正确的符号作为按钮标签。
- en: 'LiveCode has a square root function; typing this in the Message Box would produce
    the square root of 10:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: LiveCode有一个平方根函数；在消息框中输入此内容将产生10的平方根：
- en: '[PRE24]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now that you are armed with the given information, try to add a square root
    feature to the calculator.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经掌握了这些信息，尝试向计算器添加平方根功能。
- en: Other interface controls
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他界面控件
- en: So far, we only needed to look at the buttons and fields to be able to create
    the calculator. In the later chapters, we will use many more controls, so let's
    take a sneak peek at those.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只需要查看按钮和字段就能创建计算器。在后面的章节中，我们将使用更多的控件，所以让我们先预览一下那些控件。
- en: The video player control
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视频播放器控件
- en: 'LiveCode can play movies using the Player control type. These can be added
    to the card in several ways and then using a script command:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: LiveCode可以使用播放器控件类型播放电影。这些可以通过多种方式添加到卡片中，然后使用脚本命令：
- en: A file can be added from your hard drive by selecting **Import as Control/Video
    File…** from the **File** menu
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过从**文件**菜单中选择**导入为控件/视频文件…**来从您的硬盘驱动器添加文件
- en: An empty player can be created by selecting **New Control/Player** from the
    **Object** menu
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过从**对象**菜单中选择**新建控件/播放器**来创建一个空播放器
- en: A player control can be dragged from the **Tools** palette to the card. In this
    case, a sample movie is included
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以从**工具**调色板中将播放器控件拖动到卡片上。在这种情况下，包含了一个示例电影
- en: 'A player along with its name can be created with the code:'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用以下代码创建一个带有名称的播放器控件：
- en: '[PRE25]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Having added the player to the card, you can then set the video file to be
    played by entering the file path or URL of the file under the **Basic Settings**
    option of the **Inspector** palette. You can also set the path to the video with
    script:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在将播放器添加到卡片后，您可以通过在**检查器**调色板的**基本设置**选项下输入文件的路径或URL来设置要播放的视频文件。您也可以使用脚本设置视频的路径：
- en: '[PRE26]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The still image control
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 静态图像控件
- en: 'In much the same way as you just saw for the playing of video, still images
    can be added to a stack. All of the options shown to add a video player can be
    done in the same way for images. Here, for example, is the script needed to add
    the RunRev company logo to the card:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 就像您刚才看到的视频播放一样，静态图像也可以添加到堆栈中。添加视频播放器的所有选项都可以以相同的方式应用于图像。例如，以下是将RunRev公司标志添加到卡片的脚本：
- en: '[PRE27]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Rollover buttons
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 滚动按钮
- en: 'Images that you import can be used as icons in a button. To set up a button,
    so that it has a nice idle state image and an associated highlight image, you
    would have to go through the following steps:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以导入的图像可以用作按钮的图标。要设置按钮，使其具有漂亮的空闲状态图像和相关的突出显示图像，您需要执行以下步骤：
- en: Select **File** | **Import As Control** | **Image File…**.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**文件** | **导入为控件** | **图像文件…**。
- en: Choose the images that represent the idle and highlight states and click on
    **Open**.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择代表空闲和突出显示状态的图像，然后点击**打开**。
- en: Select the button that you wish to look like these images, and under **Icons
    & Border** in the **Inspector** palette, click on the magic wand button to the
    right of the top entry ("Icon").
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你希望看起来像这些图像的按钮，并在**检查器**调色板中的**图标 & 边框**下，点击顶部条目右侧的魔法棒按钮（“图标”）。
- en: In the dialog that appears, select **This Stack** from the drop-down menu.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的对话框中，从下拉菜单中选择**此堆栈**。
- en: Select the image that is in the idle state for the button.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择按钮空闲状态下的图像。
- en: Click on the magic wand button next to the **Hilite** entry and choose the highlight
    state image.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**高亮**条目旁边的魔法棒按钮，并选择高亮状态图像。
- en: Under **Basic** **Properties**, choose the transparent button from the Style
    drop-down menu.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**基本** **属性**下，从样式下拉菜单中选择透明按钮。
- en: Uncheck the boxes for **Show name**, **Auto hilite**, and **Shared hilite**.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消选中**显示名称**、**自动高亮**和**共享高亮**的复选框。
- en: Resize the button to be big enough to show the image.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整按钮的大小，使其足够大，以便显示图像。
- en: Select each of the original images, and under **Basic Properties**, uncheck
    the **Visible box**.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择每个原始图像，并在**基本属性**下取消选中**可见框**。
- en: 'In the following screenshot, we can see two images that have been imported
    in order to give the **Begin** button a more iOS-like appearance. The button is
    selected and the **Inspector** palette shows the icon selection choices:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，我们可以看到导入的两个图像，目的是给**开始**按钮一个更类似iOS的外观。按钮被选中，**检查器**调色板显示了图标选择选项：
- en: '![Rollover buttons](img/image00232.jpeg)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![悬停按钮](img/image00232.jpeg)'
- en: When you choose an image for use, the button itself is updated. In this case,
    the **Hilite** icon has been set to the darker version of the graphic, but as
    shown here, the button still needs to be resized.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 当你选择用于的图像时，按钮本身会更新。在这种情况下，**高亮**图标已被设置为图形的较暗版本，但如所示，按钮仍然需要调整大小。
- en: '![Rollover buttons](img/image00233.jpeg)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![悬停按钮](img/image00233.jpeg)'
- en: Many more controls…
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 许多更多控件...
- en: LiveCode has a lot of different controls. Many are just slight variations, but
    there are plenty that are quite different from each other. Look at the **Object**
    menu and **New Control**. As you'll see, the list is very long!
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: LiveCode有很多不同的控件。许多只是细微的变体，但也有很多彼此之间相当不同。查看**对象**菜单和**新控件**。正如你所看到的，列表非常长！
- en: Debugging
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试
- en: 'If you went ahead and tried out the calculator before we entered all the scripts
    it needed, you most likely will have seen the script debugging in action. Hopefully,
    you''ve managed to cope with what you saw, it can be overwhelming at first. This
    is what it would have looked like:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在输入所有需要的脚本之前尝试了计算器，你很可能会看到脚本调试的实际操作。希望你已经设法应对你所看到的，一开始可能会令人不知所措。这就是它的样子：
- en: '![Debugging](img/image00234.jpeg)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![调试](img/image00234.jpeg)'
- en: Most of what you see here is the same that you'll see when you edit scripts,
    but if you do see the debug variation, you are actually in a paused state, which
    is a freeze frame of the program as it runs. In this example, the program stopped
    because line 46 is looking for a field named `dis play`. There isn't such a field,
    as it should be `display`.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 你在这里看到的大部分内容与你在编辑脚本时看到的内容相同，但如果你看到了调试变体，实际上你处于暂停状态，这是程序运行时的冻结帧。在这个例子中，程序停止是因为第46行正在寻找名为`dis
    play`的字段。没有这样的字段，它应该是`display`。
- en: The error message at the bottom of the panel makes it clear that the error has
    something to do with the field name and you can quickly spot the typo. Sometimes
    though, you may need to inspect the variables to make sure they contain the values
    you think they should, for example, the **Variables** tab will show a list of
    those values.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 面板底部的错误信息清楚地表明错误与字段名称有关，你可以快速找到错误。有时，你可能需要检查变量以确保它们包含你认为应该包含的值，例如，**变量**选项卡将显示这些值的列表。
- en: An unexpected problem is one time that you may see the debugger, but when developing
    a script, you are able to set breakpoints by clicking in the column just to the
    left of the line number you want to halt the program at.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 一个意外的问题是，你可能看到调试器，但在编写脚本时，你能够通过点击位于你想要停止程序的那一行左侧的列来设置断点。
- en: 'Once the script is halted by a breakpoint, you can use the row of buttons at
    the top to step through the code. The content displayed as you hover the cursor
    above a button, is it''s meaning. These buttons are:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦脚本通过断点停止，你可以使用顶部的按钮行逐行通过代码。当你将鼠标悬停在按钮上方时显示的内容是它的含义。这些按钮是：
- en: '**Continue**: This will set the script that runs again'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**继续**：这将再次运行脚本'
- en: '**Stop**: This stops the script from running and switches to the editor, so
    that you can make changes'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**停止**：这会停止脚本运行，并切换到编辑器，以便你可以进行更改'
- en: '**Show next statement**: This will show an indicator to the left of the current
    line'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显示下一语句**：这将在当前行的左侧显示一个指示器'
- en: '**Step into next statement**: This is used for stepping into a different handler'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进入下一语句**：这用于进入不同的处理器'
- en: '**Step over next statement**: This is used to go onto the next statement in
    the current handler without stepping in a handler mentioned on the current line'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跳过下一语句**：这用于在不进入当前行上提到的处理器的情况下，进入当前处理器中的下一语句'
- en: '**Step out of current handler**: This is used to skip the remaining lines in
    a handler that you had previously stepped into and to exit to the handler that
    called the current one'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**退出当前处理器**：这用于跳过之前进入的处理器中剩余的行，并退出到调用当前处理器的处理器'
- en: You will become familiar with the script editor and debugger as you go along,
    but that should get you started!
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你继续操作，你将熟悉脚本编辑器和调试器，但这些都足以让你开始！
- en: In this chapter, we covered just enough to make you familiar with the environment
    so that you can practice using some controls and to do a little script writing.
    There is quite a lot to LiveCode as a tool, so you may be interested to look into
    other topics or go into more depth than is covered here.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们只介绍了足够的内容，让你熟悉环境，以便你可以练习使用一些控件，并进行一些脚本编写。LiveCode作为一个工具有很多内容，你可能对其他主题感兴趣，或者想要比这里介绍得更深入。
- en: A good starting point would be LiveCode's own set of online tutorials, which
    are located at [http://lessons.runrev.com/](http://lessons.runrev.com/).
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的起点是LiveCode自己的在线教程集，这些教程位于[http://lessons.runrev.com/](http://lessons.runrev.com/)。
- en: Type in the search box, words that describe your area of interest and you will
    see a list of articles on that topic.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在搜索框中输入描述你感兴趣领域的词语，你将看到该主题的文章列表。
- en: Summary
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Having created a simple calculator from scratch, you should by now be more familiar
    with the LiveCode environment.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 通过从头创建一个简单的计算器，你现在应该对LiveCode环境更加熟悉了。
- en: In this chapter, we covered buttons, fields, scripts, and the stack structure
    to get an understanding of how they work together. We also showed several short
    scripts to illustrate the English-like syntax used by LiveCode while using the
    script window to debug a script.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了按钮、字段、脚本和堆栈结构，以了解它们是如何协同工作的。我们还展示了几个简短的脚本，以说明LiveCode在脚本窗口中调试脚本时使用的类似英语的语法。
- en: We then examined other interface controls in preparation to use those in later
    chapters of this book.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们检查了其他界面控件，为在本书的后续章节中使用这些控件做准备。
- en: We also discussed the kinds of variables used by LiveCode and how it can use
    abbreviated commands and synonyms.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还讨论了LiveCode使用的变量类型以及它如何使用缩写命令和同义词。
- en: Now that you've learned enough to make regular LiveCode stacks, we need to download
    and install additional software from Google and Apple that is required to publish
    a stack to a mobile device and then we need to begin trying out mobile-specific
    features—both of which are covered in the next chapter.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经学到了足够的知识来制作常规的LiveCode堆栈，我们需要从Google和Apple下载并安装额外的软件，这些软件是发布堆栈到移动设备所必需的，然后我们需要开始尝试移动特定的功能——这两者都在下一章中介绍。
