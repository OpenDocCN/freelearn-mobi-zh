- en: '*Chapter 20*: Getting Started with Cameras and Photo Libraries'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 20 章*：开始使用相机和照片库'
- en: In the previous chapter, you created the `RatingsView` class and added it to
    the **Restaurant Detail** and **Review Form** screens. You also enabled the user
    to submit a review using the **Review Form** screen, although the submitted review
    is only printed to the Debug area for now.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你创建了 `RatingsView` 类并将其添加到 **餐厅详情** 和 **评论表单** 屏幕中。你还通过 **评论表单** 屏幕启用了用户提交评论的功能，尽管目前提交的评论只是打印到调试区域。
- en: In this chapter, you will complete the implementation of the `.plist` file containing
    the filters you want to use, then create a filter object class to store filter
    data, and create a data manager class to read the `.plist` file and populate an
    array of filter objects. Next, you'll create a protocol with a method to apply
    filters to images. After that, you'll create view controllers for the `UIImagePickerDelegate`
    protocol, which allows you to get photos from the camera or the photo library,
    and implement methods to apply a selected filter to a photo. Note that the photo
    will not be saved. You will learn how to save reviews and photos in the next chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将完成包含你想要使用的滤镜的 `.plist` 文件的实现，然后创建一个用于存储滤镜数据的滤镜对象类，并创建一个数据管理类来读取 `.plist`
    文件并填充一个滤镜对象数组。接下来，你将创建一个包含应用滤镜到图像的方法的协议。之后，你将创建 `UIImagePickerDelegate` 协议的视图控制器，这允许你从相机或照片库中获取照片，并实现将选定的滤镜应用到照片上的方法。请注意，照片将不会被保存。你将在下一章学习如何保存评论和照片。
- en: By the end of this chapter, you'll have learned how to import photos into your
    own apps, and how to apply filters to them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将学会如何将照片导入自己的应用，以及如何对它们应用滤镜。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Understanding filters
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解滤镜
- en: Creating model objects for the **Photo Filter** screen
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 **照片滤镜** 屏幕创建模型对象
- en: Creating the `ImageFiltering` protocol
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现 `ImageFiltering` 协议
- en: Creating classes for the **Photo Filter** screen
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 **照片滤镜** 屏幕创建类
- en: Implementing the image picker delegate protocol
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现图像选择器代理协议
- en: Getting permission to use the camera or photo library
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取使用相机或照片库的权限
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will continue working on the `LetsEat` project that you modified in the
    previous chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你将继续在上一章中修改的 `LetsEat` 项目上工作。
- en: 'The resource files and completed Xcode project for this chapter are in the
    `Chapter20` folder of the code bundle for this book, which can be downloaded here:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的资源文件和完成的 Xcode 项目位于本书代码包的 `Chapter20` 文件夹中，可以在此处下载：
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，看看代码的实际效果：
- en: '[https://bit.ly/3oZZ93P](https://bit.ly/3oZZ93P)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bit.ly/3oZZ93P](https://bit.ly/3oZZ93P)'
- en: Let's start by learning about photo filters, and how to apply them to images.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从学习照片滤镜以及如何将它们应用到图像开始吧。
- en: Understanding filters
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解滤镜
- en: iOS has a range of built-in filters that you can use to enhance photos. These
    filters are available via the **Core Image** library. Core Image is an image processing
    and analysis technology that provides high-performance processing for still and
    video images. There are over 170 filters available in Core Image, giving you the
    ability to apply a wide range of cool effects to your photos.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: iOS 提供了一系列内置的滤镜，你可以使用这些滤镜来增强照片。这些滤镜通过 **Core Image** 库提供。Core Image 是一种图像处理和分析技术，它为静态和视频图像提供高性能处理。Core
    Image 中有超过 170 个滤镜可供使用，这让你能够将各种酷炫效果应用到你的照片上。
- en: Important Information
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: You can learn more about Core Image at [https://developer.apple.com/documentation/coreimage](https://developer.apple.com/documentation/coreimage).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://developer.apple.com/documentation/coreimage](https://developer.apple.com/documentation/coreimage)
    上了解更多关于 Core Image 的信息。
- en: 'For this app, you''ll just be using 10 filters. The details of these filters
    are provided in a `.plist` file. Import this file into your app by following these
    steps:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个应用，你将只使用 10 个滤镜。这些滤镜的详细信息在 `.plist` 文件中提供。按照以下步骤将此文件导入到你的应用中：
- en: 'If you have not yet done so, download and unzip the code bundle for this book
    at this link: [https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition).
    You will find the `FilterData.plist` inside the `resources` folder in the `Chapter20`
    folder.'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您还没有这样做，请在此链接下载并解压本书的代码包：[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)。您将在
    `Chapter20` 文件夹中的 `resources` 文件夹内找到 `FilterData.plist`。
- en: In the Project navigator, create a new group inside the `PhotoFilter` folder
    and name it `Model`.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中，在 `PhotoFilter` 文件夹内创建一个新的组，并将其命名为 `Model`。
- en: Drag `FilterData.plist` to the `Model` folder. Make sure **Copy items if needed**
    is ticked and click **Finish**.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `FilterData.plist` 拖动到 `Model` 文件夹。确保勾选 **如果需要则复制项目** 并点击 **完成**。
- en: 'Click `FilterData.plist` in the Project navigator to see what it contains:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击 `FilterData.plist` 以查看其内容：
- en: '![Figure 20.1: Editor area showing contents for FilterData.plist'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 20.1：显示 FilterData.plist 内容的编辑区域'
- en: '](img/Figure_20.01_B17469.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_20.01_B17469.jpg)'
- en: 'Figure 20.1: Editor area showing contents for FilterData.plist'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20.1：显示 FilterData.plist 内容的编辑区域
- en: As you can see, `FilterData.plist` is an array of dictionaries. Each dictionary
    contains the name of the filter and a descriptive label. In the next section,
    you'll see how you can use the information in `FilterData.plist` in your app.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`FilterData.plist` 是一个字典数组。每个字典包含过滤器的名称和描述标签。在下一节中，您将了解如何使用 `FilterData.plist`
    中的信息在您的应用中。
- en: Creating model objects for the Photo Filter screen
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为照片滤镜屏幕创建模型对象
- en: 'To get the information from `FilterData.plist` into your app, you''ll create
    a structure, `FilterItem`, that can store details about a filter, and a data manager
    class, `FilterManager`, that will load `FilterData.plist` and create an array
    of `FilterItem` instances. This is similar to the method used to load cuisine
    and location information into your app. Let''s start by creating the `FilterItem`
    structure. Follow these steps:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 `FilterData.plist` 中的信息获取到您的应用中，您将创建一个结构，`FilterItem`，它可以存储有关过滤器的详细信息，以及一个数据管理类，`FilterManager`，它将加载
    `FilterData.plist` 并创建 `FilterItem` 实例的数组。这与将菜系和位置信息加载到您的应用中的方法类似。让我们首先创建 `FilterItem`
    结构。按照以下步骤操作：
- en: Right-click the `Model` folder in the `PhotoFilter` folder and select **New
    File**.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `PhotoFilter` 文件夹中的 `Model` 文件夹上右键单击，并选择 **新建文件**。
- en: '**iOS** should already be selected. Choose **Swift File** and click **Next**.'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS** 应已选中。选择 **Swift 文件** 并点击 **下一步**。'
- en: Name this file `FilterItem`. Click `FilterItem` file will appear in the Project
    navigator.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件命名为 `FilterItem`。点击后，`FilterItem` 文件将出现在项目导航器中。
- en: 'Inside the `FilterItem` file, type the following code after the `import` statement
    to declare and define the `FilterItem` structure:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `FilterItem` 文件中，在 `import` 语句之后输入以下代码以声明和定义 `FilterItem` 结构：
- en: '[PRE0]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This structure has two properties and an initializer. The `filter` property
    will store filter names, and the `name` property will store the brief filter description.
    The initializer takes a dictionary as a parameter to set the `name` and `filter`
    properties when an instance of this class is created.
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此结构有两个属性和一个初始化器。`filter` 属性将存储过滤器名称，而 `name` 属性将存储简短的过滤器描述。初始化器接受一个字典作为参数，在创建此类的实例时设置
    `name` 和 `filter` 属性。
- en: 'Now that you''ve created the `FilterItem` class, you''ll create the data manager
    class, `FilterDataManager`. Follow these steps:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经创建了 `FilterItem` 类，您将创建数据管理类 `FilterDataManager`。按照以下步骤操作：
- en: Right-click the `Model` folder in the `PhotoFilter` folder and select **New
    File**.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `PhotoFilter` 文件夹中的 `Model` 文件夹上右键单击，并选择 **新建文件**。
- en: '**iOS** should already be selected. Choose **Swift File** and click **Next**.'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS** 应已选中。选择 **Swift 文件** 并点击 **下一步**。'
- en: Name this file `FilterDataManager`. Click `FilterDataManager` file will appear
    in the Project navigator.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件命名为 `FilterDataManager`。点击后，`FilterDataManager` 文件将出现在项目导航器中。
- en: 'Inside the `FilterDataManager` file, type in the following code after the `import`
    statement to declare and define the `FilterDataManager` class:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `FilterDataManager` 文件中，在 `import` 语句之后输入以下代码以声明和定义 `FilterDataManager` 类：
- en: '[PRE1]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `FilterDataManager` class adopts the `DataManager` protocol you created
    earlier in [*Chapter 16*](B17469_16_Final_VK_ePub.xhtml#_idTextAnchor223)*, Getting
    Started with MapKit*. Calling the `fetch()` method loads data from `FilterData.plist`,
    creates an array of `FilterItem` instances, and returns it.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`FilterDataManager` 类采用了你在 [*第16章*](B17469_16_Final_VK_ePub.xhtml#_idTextAnchor223)*，使用
    MapKit 入门* 中早期创建的 `DataManager` 协议。调用 `fetch()` 方法从 `FilterData.plist` 加载数据，创建
    `FilterItem` 实例的数组，并返回它。'
- en: In the next section, you'll create a protocol with a method to apply a filter
    to an image.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将创建一个协议，其中包含一个将过滤器应用于图像的方法。
- en: Creating the ImageFiltering protocol
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 ImageFiltering 协议
- en: 'You need a way to apply a filter to an image. You will create a protocol, `ImageFiltering`,
    that implements a method, `apply(filter:to:)`, to do this. Any class that adopts
    this protocol will have access to this method, which applies a specified filter
    to an image. Follow these steps:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一个将过滤器应用于图像的方法。你将创建一个协议 `ImageFiltering`，它实现了一个方法 `apply(filter:to:)` 来完成这个任务。任何采用此协议的类都将有权访问此方法，该方法将指定的过滤器应用于图像。按照以下步骤操作：
- en: Right-click the `PhotoFilter` folder and select **New File**.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 `PhotoFilter` 文件夹并选择 **新建文件**。
- en: '**iOS** should already be selected. Choose **Swift File** and click **Next**.'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS** 应已选中。选择 **Swift 文件** 并点击 **下一步**。'
- en: Name this file `ImageFiltering`. Click `ImageFiltering` file will appear in
    the Project navigator.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件命名为 `ImageFiltering`。点击 `ImageFiltering` 文件将在项目导航器中显示。
- en: 'Modify the code in this file to declare and define the `ImageFiltering` protocol:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改此文件中的代码以声明和定义 `ImageFiltering` 协议：
- en: '[PRE2]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: import CoreImage
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 导入 CoreImage
- en: '[PRE3]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: protocol ImageFiltering {
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: protocol ImageFiltering {
- en: 'func apply(filter: String, originalImage:'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'func apply(filter: String, originalImage:'
- en: UIImage) -> UIImage
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: UIImage) -> UIImage
- en: '}'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE4]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: extension ImageFiltering {
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 扩展 ImageFiltering {
- en: 'func apply(filter: String, originalImage:'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'func apply(filter: String, originalImage:'
- en: UIImage) -> UIImage {
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: UIImage) -> UIImage {
- en: '[PRE5]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'let initialCIImage = CIImage(image:'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'let initialCIImage = CIImage(image:'
- en: 'originalImage, options: nil)'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'originalImage, options: nil)'
- en: '[PRE6]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: let originalOrientation =
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: let originalOrientation =
- en: originalImage.imageOrientation
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: originalImage.imageOrientation
- en: '[PRE7]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'guard let ciFilter = CIFilter(name: filter)'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'guard let ciFilter = CIFilter(name: filter)'
- en: else {
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: else {
- en: print("filter not found")
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: print("filter not found")
- en: return originalImage
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return originalImage
- en: '}'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE8]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'ciFilter.setValue(initialCIImage, forKey:'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'ciFilter.setValue(initialCIImage, forKey:'
- en: kCIInputImageKey)
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: kCIInputImageKey)
- en: let context = CIContext()
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: let context = CIContext()
- en: let filteredCIImage =
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: let filteredCIImage =
- en: (ciFilter.outputImage)!
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: (ciFilter.outputImage)!
- en: '[PRE9]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: let filteredCGImage =
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: let filteredCGImage =
- en: 'context.createCGImage(filteredCIImage, from:'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'context.createCGImage(filteredCIImage, from:'
- en: filteredCIImage.extent)
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: filteredCIImage.extent)
- en: 'return UIImage(cgImage: filteredCGImage!,'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'return UIImage(cgImage: filteredCGImage!,'
- en: 'scale: 1.0, orientation:'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'scale: 1.0, orientation:'
- en: originalOrientation)
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: originalOrientation)
- en: '[PRE10]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This completes the implementation of the `ImageFiltering` protocol and the
    `apply(filter:originalImage:)` method. At this point, you have the following:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了 `ImageFiltering` 协议和 `apply(filter:originalImage:)` 方法的实现。此时，你拥有以下内容：
- en: '`FilterData.plist`, which contains photo filter data inside your app.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FilterData.plist`，其中包含应用内的照片滤镜数据。'
- en: '`FilterItem`, a class that can hold a filter and a filter description.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FilterItem`，一个可以存储过滤器和过滤器描述的类。'
- en: '`FilterDataManager`, a data manager class that loads data from `FilterData.plist`
    and generates an array of `FilterItem` instances.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FilterDataManager`，一个数据管理类，从 `FilterData.plist` 加载数据并生成 `FilterItem` 实例的数组。'
- en: '`ImageFiltering`, a protocol that contains a method, `apply(filter:originalImage:)`,
    which applies a filter to an image.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ImageFiltering`，一个包含方法 `apply(filter:originalImage:)` 的协议，该方法将过滤器应用于图像。'
- en: In the next section, you'll create classes for the UI elements in the **Photo
    Filter** screen, which allows you to manage this screen and the collection view
    inside it.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将创建 Photo Filter 屏幕中 UI 元素的类，该屏幕允许你管理此屏幕及其内部的集合视图。
- en: Creating classes for the Photo Filter screen
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 Photo Filter 屏幕创建类
- en: So far, you have imported `FilterData.plist` into your app, created the `FilterItem`
    and `FilterDataManager` classes, and created the `ImageFiltering` protocol. In
    this section, you'll set up the classes for the **Photo Filter** screen, which
    allows you to manage this screen and the collection view inside it.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经将 `FilterData.plist` 导入到你的应用中，创建了 `FilterItem` 和 `FilterDataManager`
    类，并创建了 `ImageFiltering` 协议。在本节中，你将设置 Photo Filter 屏幕的类，该屏幕允许你管理此屏幕及其内部的集合视图。
- en: 'Remember that you added the `PhotoFilter` storyboard file to your project in
    [*Chapter 16*](B17469_16_Final_VK_ePub.xhtml#_idTextAnchor223)*, Getting Started
    with MapKit*. It contains a scene that consists of a large image view that will
    hold the user-selected photo and a collection view that will display filter previews.
    The following screenshot shows what this will look like when you have completed
    the implementation:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 记住你已经在[*第16章*](B17469_16_Final_VK_ePub.xhtml#_idTextAnchor223)“MapKit入门”中添加了`PhotoFilter`故事板文件到你的项目中。它包含一个场景，该场景由一个将包含用户选择的图片的大图像视图和一个将显示过滤器预览的集合视图组成。以下截图显示了完成实现后的样子：
- en: '![Figure 20.2: iOS Simulator showing the completed Photo Filter screen'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 20.2: iOS Simulator showing the completed Photo Filter screen]'
- en: '](img/Figure_20.02_B17469.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_20.02_B17469.jpg]'
- en: 'Figure 20.2: iOS Simulator showing the completed Photo Filter screen'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.2：iOS模拟器显示完成的Photo Filter屏幕
- en: This screen works as follows. When you tap on the **Add Photo** button in the
    **Restaurant Detail** screen and select a photo, the **Photo Filter** screen will
    appear, showing the selected photo with a scrolling list of filters just below
    it. Each filter in the scrolling list is displayed in a collection view cell.
    Tapping a filter in the scrolling list will apply the selected filter to the photo.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 此屏幕的工作方式如下。当你点击**餐厅详情**屏幕中的**添加照片**按钮并选择照片时，**Photo Filter**屏幕将出现，显示所选照片，其下方有一个滚动列表的过滤器。滚动列表中的每个过滤器都在集合视图单元格中显示。点击滚动列表中的过滤器将应用所选过滤器到照片上。
- en: In the next section, you'll create and configure a class to manage the collection
    view cells. Each cell will display a thumbnail preview of what a photo looks like
    with the filter applied.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将创建并配置一个类来管理集合视图单元格。每个单元格将显示应用过滤器后照片的缩略图预览。
- en: Creating a class for the collection view cells
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为集合视图单元格创建一个类
- en: 'The `PhotoFilter` storyboard file in the Project navigator, you will see that
    the collection view is already present in the **View Controller Scene**, but there
    is no way to set the contents of the collection view cells. You will create a
    class to manage them now. Follow these steps:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目导航器中的`PhotoFilter`故事板文件，你会看到集合视图已经在**视图控制器场景**中存在，但无法设置集合视图单元格的内容。你现在将创建一个类来管理它们。按照以下步骤操作：
- en: Right-click the `PhotoFilter` folder and select **New File**.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`PhotoFilter`文件夹并选择**新建文件**。
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class** and click
    **Next**.'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS**应该已经选中。选择**Cocoa Touch类**并点击**下一步**。'
- en: 'Configure the file as follows:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按以下方式配置文件：
- en: '`FilterCell`'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`FilterCell`'
- en: '`UICollectionViewCell`'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`UICollectionViewCell`'
- en: '`Swift`'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Swift`'
- en: Click **Next**.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击**下一步**。
- en: Click `FilterCell` file will appear in the Project navigator.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`FilterCell`文件将在项目导航器中显示。
- en: 'Add the following code to this file to declare and define the `FilterCell`
    class:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到该文件中，以声明和定义`FilterCell`类：
- en: '[PRE11]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Click the `PhotoFilter` storyboard file in the Project navigator.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击`PhotoFilter`故事板文件。
- en: 'In the document outline, select `FilterCell`:![Figure 20.3: Identity inspector
    with Class set to FilterCell'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在文档大纲中，选择`FilterCell`：![Figure 20.3: Identity inspector with Class set to FilterCell]'
- en: '](img/Figure_20.03_B17469.jpg)'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_20.03_B17469.jpg]'
- en: 'Figure 20.3: Identity inspector with Class set to FilterCell'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![Figure 20.3: Identity inspector with Class set to FilterCell]'
- en: 'Click the Attributes inspector button. Set `filterCell`:![Figure 20.4: Attributes
    inspector with Identifier set to filterCell'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '点击属性检查器按钮。设置`filterCell`：![Figure 20.4: Attributes inspector with Identifier
    set to filterCell]'
- en: '](img/Figure_20.04_B17469.jpg)'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_20.04_B17469.jpg]'
- en: 'Figure 20.4: Attributes inspector with Identifier set to filterCell'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![Figure 20.4: Attributes inspector with Identifier set to filterCell]'
- en: 'Click the Connections inspector button. Connect the `nameLabel` and `thumbnailImageView`
    outlets to their corresponding UI elements as shown:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击连接检查器按钮。将`nameLabel`和`thumbnailImageView`出口连接到相应的UI元素，如图所示：
- en: '![Figure 20.5: Connections inspector showing thumbnailImageView and nameLabel
    outlets'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 20.5: Connections inspector showing thumbnailImageView and nameLabel
    outlets]'
- en: '](img/Figure_20.05_B17469.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_20.05_B17469.jpg]'
- en: 'Figure 20.5: Connections inspector showing thumbnailImageView and nameLabel
    outlets'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 20.5: Connections inspector showing thumbnailImageView and nameLabel
    outlets]'
- en: You have now completed setting up the collection view cells. In the next section,
    you'll create the view controller for the **Photo Filter** screen. This will allow
    you to select a photo and choose a filter to be applied to it.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经完成了集合视图单元格的设置。在下一节中，你将创建**Photo Filter**屏幕的视图控制器。这将允许你选择一张照片并选择要应用的照片的过滤器。
- en: Creating a view controller for the Photo Filter screen
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建照片滤镜屏幕的视图控制器
- en: 'So far, you have created the `FilterCell` class to manage the collection view
    cells in the **Photo Filter** screen. Now you''ll create a view controller to
    manage this screen''s contents. Follow these steps:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经创建了`FilterCell`类来管理**照片滤镜**屏幕中的集合视图单元格。现在你将创建一个视图控制器来管理这个屏幕的内容。按照以下步骤操作：
- en: Right-click the `PhotoFilter` folder and select **New File**.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`PhotoFilter`文件夹，选择**新建文件**。
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class** and click
    **Next**.'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS**应该已经选中。选择**Cocoa Touch Class**并点击**下一步**。'
- en: 'Configure the file, as follows:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置文件，如下所示：
- en: '`PhotoFilterViewController`'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`PhotoFilterViewController`'
- en: '`UIViewController`'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`UIViewController`'
- en: '`Swift`'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Swift`'
- en: Click Next.
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击“下一步”。
- en: Click`PhotoFilterViewController` file will appear in the Project navigator.
    Delete all the boilerplate code after the `viewDidLoad()` method.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`PhotoFilterViewController`文件将在项目导航器中显示。删除`viewDidLoad()`方法之后的所有样板代码。
- en: 'Add the following code to the file to declare and define the `PhotoFilterViewController`
    class and its properties:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到文件中，以声明和定义`PhotoFilterViewController`类及其属性：
- en: '[PRE12]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'class PhotoFilterViewController: UIViewController {'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'class PhotoFilterViewController: UIViewController {'
- en: '[PRE13]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '@IBOutlet var mainImageView: UIImageView!'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@IBOutlet var mainImageView: UIImageView!'
- en: '[PRE14]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '@IBOutlet var collectionView: UICollectionView!'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@IBOutlet var collectionView: UICollectionView!'
- en: '[PRE15]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: private let manager = FilterDataManager()
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: private let manager = FilterDataManager()
- en: '[PRE16]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: var selectedRestaurantID:Int?
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`selectedRestaurantID:Int?`'
- en: '[PRE17]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: override func viewDidLoad() {
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: override func viewDidLoad()
- en: super.viewDidLoad()
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: super.viewDidLoad()
- en: initialize()
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: initialize()
- en: '}'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE18]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'As you did before, you will use extensions to organize your code. Add the following
    `private` extension containing the `initialize()` method after the closing curly
    brace:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如同之前一样，你将使用扩展来组织你的代码。在关闭花括号之后添加以下包含`initialize()`方法的`private`扩展：
- en: '[PRE19]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This extension contains the implementation of the `initialize()` method, which
    calls two other methods. `setupCollectionView()` sets up the collection view used
    to display the list of filters. `checkSource()` checks the user authorization
    status for the use of the camera. Note that these will generate errors since they
    haven't been implemented yet. You'll implement these methods in the next step.
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此扩展包含`initialize()`方法的实现，它调用两个其他方法。`setupCollectionView()`设置用于显示滤镜列表的集合视图。`checkSource()`检查用户对摄像头使用的授权状态。请注意，由于它们尚未实现，这些将生成错误。你将在下一步实现这些方法。
- en: 'Implement the `setupCollectionView()` and `checkSource()` methods in the `private`
    extension after the `initialize()` method:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`initialize()`方法之后的`private`扩展中实现`setupCollectionView()`和`checkSource()`方法：
- en: '[PRE20]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let''s break this down:'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们分解一下：
- en: '[PRE21]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Sets up the collection view used to display thumbnail previews of the filters.
    Here, you create an instance of `UICollectionViewFlowLayout`, set the scroll direction,
    section insets, inter-item spacing, and line spacing properties, and assign it
    to the collection view. After that, you set the `PhotoFilterViewController` class
    as the delegate and data source for this collection view. Note that you're setting
    `delegate` and `dataSource` programmatically rather than using the storyboard;
    either approach is acceptable. Don't worry about the errors, they appear because
    you haven't adopted the `UICollectionViewDataSource` and `UICollectionViewDelegate`
    protocols for this class yet. You'll fix this later.
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 设置用于显示滤镜缩略图预览的集合视图。在这里，你创建了一个`UICollectionViewFlowLayout`实例，设置滚动方向、部分内边距、项目间距和行间距属性，并将其分配给集合视图。之后，你将`PhotoFilterViewController`类设置为该集合视图的委托和数据源。请注意，你正在通过编程设置`delegate`和`dataSource`，而不是使用故事板；两种方法都是可接受的。不要担心错误，它们出现是因为你尚未为该类采用`UICollectionViewDataSource`和`UICollectionViewDelegate`协议。你将在稍后修复这个问题。
- en: '[PRE22]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Checks the user authorization status for the use of the camera. Possible cases
    are as follows:'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 检查用户对摄像头使用的授权状态。可能的情形如下：
- en: '`.notDetermined` means the user hasn''t been asked for access to the camera.'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`.notDetermined`表示用户尚未被询问是否访问摄像头。'
- en: '`.authorized` means the user has previously granted access to the camera.'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`.authorized`表示用户之前已经授予了摄像头访问权限。'
- en: '`.restricted` means the user can''t be granted access due to restrictions that
    have been set on the device.'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`.restricted`表示由于设备上设置的限制，用户无法获得访问权限。'
- en: '`.denied` means the user has previously denied camera access to the app.'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`.denied`表示用户之前已经拒绝了对该应用访问摄像头的权限。'
- en: If the status is `.notDetermined`, the app will ask the user for permission
    and, if permission is given, the `showCameraUserInterface()` method is called.
    If the status is `.authorized`, the `showCameraUserInterface()` method is called.
    Note that this will generate an error because `showCameraUserInterface()` has
    not been implemented yet. If the status is `.restricted` or `.denied`, it falls
    under the `default:` case and the method exits.
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果状态是`.notDetermined`，则应用程序将请求用户权限，如果授予权限，则调用`showCameraUserInterface()`方法。如果状态是`.authorized`，则调用`showCameraUserInterface()`方法。请注意，这将生成错误，因为`showCameraUserInterface()`尚未实现。如果状态是`.restricted`或`.denied`，则属于`default:`情况，方法退出。
- en: 'There are a few more helper methods required. Add the following code to the
    `private` extension to implement them after the `checkSource()` method:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要一些额外的辅助方法。在`checkSource()`方法之后，将以下代码添加到`private`扩展中来实现它们：
- en: '[PRE23]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Let''s break this down:'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们分解一下：
- en: '[PRE24]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This method will be called after the user selects a photo from the camera or
    photo library. It calls the `FilterManager` instance's `fetch()` method, which
    loads `FilterData.plist` and puts its contents into an array of `FilterItem` instances.
    This array is then assigned to the `PhotoFilterViewController` instance's `filters`
    property, which will later be used to populate the collection view with thumbnail
    previews of filters. The next statement assigns the `PhotoFilterViewController`
    instance's `mainImage` property to `mainImageView`, which is the outlet for the
    image view above the collection view, if `mainImage` has been set. The final statement
    tells the collection view to redraw itself.
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此方法将在用户从相机或相册中选择照片后调用。它调用`FilterManager`实例的`fetch()`方法，该方法加载`FilterData.plist`并将其内容放入`FilterItem`实例的数组中。然后，此数组被分配给`PhotoFilterViewController`实例的`filters`属性，该属性将用于稍后填充集合视图中的过滤器缩略图预览。接下来的语句将`PhotoFilterViewController`实例的`mainImage`属性分配给`mainImageView`，这是集合视图上方的图像视图的出口，如果已设置`mainImage`。最后的语句告诉集合视图重新绘制自己。
- en: '[PRE25]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This method calls the `checkSource()` method you implemented earlier, which
    calls the `showCameraUserInterface()` method if authorization has been granted.
    You'll assign this to the camera button in the `NSCameraUsageDescription` and
    `NSMicrophoneUsageDescription` keys in `Info.plist`. To learn more about requesting
    permission to use the camera, go to [https://developer.apple.com/documentation/avfoundation/cameras_and_media_capture/requesting_authorization_for_media_capture_on_ios](https://developer.apple.com/documentation/avfoundation/cameras_and_media_capture/requesting_authorization_for_media_capture_on_ios).
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此方法调用您之前实现的`checkSource()`方法，如果已授予授权，则调用`showCameraUserInterface()`方法。您将此分配给`NSCameraUsageDescription`和`NSMicrophoneUsageDescription`键中的相机按钮在`Info.plist`中。要了解更多关于请求使用相机权限的信息，请访问[https://developer.apple.com/documentation/avfoundation/cameras_and_media_capture/requesting_authorization_for_media_capture_on_ios](https://developer.apple.com/documentation/avfoundation/cameras_and_media_capture/requesting_authorization_for_media_capture_on_ios)。
- en: 'You''ll adopt the `UICollectionViewDataSource` protocol and implement the required
    methods to make the collection view display thumbnail previews of filters. Add
    a new extension after the `private` extension and implement them as follows:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将采用`UICollectionViewDataSource`协议并实现所需的方法，以便集合视图显示过滤器的缩略图预览。在`private`扩展之后添加一个新扩展，并按以下方式实现它们：
- en: '[PRE26]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Determines the number of items the collection view is supposed to display, which
    is the same as the number of `FilterItems` inside the `PhotoFilterViewController`
    instance's `filters` array.
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确定集合视图应显示的项目数量，这与`PhotoFilterViewController`实例的`filters`数组中的`FilterItems`数量相同。
- en: '[PRE27]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Determines what to put in each cell. Here, you get the `FilterItem` instance
    corresponding to the cell's position in the collection view and pass it, along
    with the `PhotoFilterViewController` instance's `thumbnail` property, to the `set(filterItem:imageForThumbnail:)`
    method, which sets the image and label for the collection view cell.
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确定每个单元格中要放置的内容。在这里，您获取与集合视图中单元格位置对应的`FilterItem`实例，并将其与`PhotoFilterViewController`实例的`thumbnail`属性一起传递给`set(filterItem:imageForThumbnail:)`方法，该方法设置集合视图单元格的图像和标签。
- en: 'You''ve set up the collection view using a `UICollectionViewFlowLayout` instance
    earlier. Now you''ll set the size for the collection view cells. Add the following
    extension after the extension containing the data source methods:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您之前使用`UICollectionViewFlowLayout`实例设置了集合视图。现在，您将为集合视图单元格设置大小。在包含数据源方法的扩展之后添加以下扩展：
- en: '[PRE28]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '`collectionView(_:layout:sizeForItemAt:)` returns the size each collection
    view cell should be. First, the height of the collection view is assigned to `collectionViewHeight`.
    Then, the value of `topInset` is set to `14.0` points. The height of the collection
    view cell is calculated by subtracting the `topInset` from the `collectionViewHeight`.
    This results in a 14-point gap between the top of the collection view cells and
    the top of the collection view. Finally, a `CGSize` instance with the width set
    to `150` points and the height set to `cellHeight` is returned as the size of
    the collection view cell. Previously, you did this using the Size inspector; now,
    you''re doing it programmatically.'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`collectionView(_:layout:sizeForItemAt:)` 返回每个相册视图单元格应具有的大小。首先，将相册的高度分配给 `collectionViewHeight`。然后，将
    `topInset` 的值设置为 `14.0` 点。通过从 `collectionViewHeight` 中减去 `topInset` 来计算相册视图单元格的高度。这导致相册视图单元格的顶部与相册视图的顶部之间有14点的间隙。最后，返回一个宽度设置为
    `150` 点，高度设置为 `cellHeight` 的 `CGSize` 实例，作为相册视图单元格的大小。以前，您使用大小检查器来完成此操作；现在，您以编程方式完成。'
- en: 'Now you''ll connect the outlets and actions in this class to the UI elements
    in the `PhotoFilter` storyboard file. `collectionView` is the outlet for the collection
    view that displays the list of filters. `mainImageView` is for the image view
    just above it, which shows the image the user selected. `onPhotoTapped()` is for
    the camera button in the navigation bar. You''ll also configure the **Cancel**
    button to dismiss the **Photo Filter** screen. Follow these steps:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您将在这个类中连接的输出口和动作与 `PhotoFilter` 故事板文件中的 UI 元素连接。`collectionView` 是显示过滤器列表的相册的输出口。`mainImageView`
    是位于其上方的图像视图，显示用户选择的图像。`onPhotoTapped()` 是用于导航栏中的相机按钮。您还将配置 **取消** 按钮以关闭 **相册过滤器**
    屏幕。按照以下步骤操作：
- en: 'Click the `PhotoFilter` storyboard file in the Project navigator. Select the
    `PhotoFilterViewController`:![Figure 20.6: Identity inspector with Class set to
    PhotoFilterViewController'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中单击 `PhotoFilter` 故事板文件。选择 `PhotoFilterViewController`：![图20.6：身份检查器，类设置为
    PhotoFilterViewController
- en: '](img/Figure_20.06_B17469.jpg)'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图20.06：B17469.jpg](img/Figure_20.06_B17469.jpg)'
- en: 'Figure 20.6: Identity inspector with Class set to PhotoFilterViewController'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图20.6：身份检查器，类设置为 PhotoFilterViewController
- en: 'Select the Connections inspector. Click and drag from the `collectionView`
    outlet to the **Collection View** in the document outline:![Figure 20.7: Connections
    inspector showing the collectionView outlet'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择连接检查器。从 `collectionView` 输出口拖动到文档大纲中的 **集合视图**：![图20.7：显示 collectionView 输出口的连接检查器
- en: '](img/Figure_20.07_B17469.jpg)'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图20.07：B17469.jpg](img/Figure_20.07_B17469.jpg)'
- en: 'Figure 20.7: Connections inspector showing the collectionView outlet'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图20.7：显示 collectionView 输出口的连接检查器
- en: 'Click and drag from the `mainImageView` outlet to the **Image View** in the
    document outline:![Figure 20.8: Connections inspector showing the mainImageView
    outlet'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `mainImageView` 输出口拖动到文档大纲中的 **图像视图**：![图20.8：显示 mainImageView 输出口的连接检查器
- en: '](img/Figure_20.08_B17469.jpg)'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图20.08：B17469.jpg](img/Figure_20.08_B17469.jpg)'
- en: 'Figure 20.8: Connections inspector showing the mainImageView outlet'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图20.8：显示 mainImageView 输出口的连接检查器
- en: 'Click and drag from the `onPhotoTapped:` action to the camera button:![Figure
    20.9: Connections inspector showing onPhotoTapped: action'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '从 `onPhotoTapped:` 动作拖动到相机按钮：![图20.9：显示 onPhotoTapped: 动作的连接检查器'
- en: '](img/Figure_20.09_B17469.jpg)'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图20.09：B17469.jpg](img/Figure_20.09_B17469.jpg)'
- en: 'Figure 20.9: Connections inspector showing onPhotoTapped: action'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '图20.9：显示 onPhotoTapped: 动作的连接检查器'
- en: 'The **Cancel** button is used to exit this screen if the user does not wish
    to make a selection. You''ll connect the **Cancel** button to the unwind method
    you implemented in the previous chapter, which will dismiss this screen and return
    the user to the **Restaurant Detail** screen. *Ctrl + Drag* from the **Cancel**
    button to the Exit icon in the Scene Dock:![Figure 20.10: Photo Filter View Controller
    Scene showing Cancel button action being set'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**取消** 按钮用于退出此屏幕，如果用户不想进行选择。您将 **取消** 按钮连接到上一章中实现的 unwind 方法，这将关闭此屏幕并将用户返回到
    **餐厅详情** 屏幕。*Ctrl + 拖动* 从 **取消** 按钮到场景工具栏中的退出图标：![图20.10：显示取消按钮动作设置的相册过滤器视图控制器场景'
- en: '](img/Figure_20.10_B17469.jpg)'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图20.10：B17469.jpg](img/Figure_20.10_B17469.jpg)'
- en: 'Figure 20.10: Photo Filter View Controller Scene showing Cancel button action
    being set'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图20.10：显示取消按钮动作设置的相册过滤器视图控制器场景
- en: 'Select `unwindReviewCancelWithSegue:` in the pop-up menu:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出菜单中选择 `unwindReviewCancelWithSegue:`：
- en: '![Figure 20.11: Pop-up menu with unwindReviewCancelWithSegue: selected'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '![图20.11：选择 unwindReviewCancelWithSegue: 的弹出菜单'
- en: '](img/Figure_20.11_B17469.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '![图20.11：B17469.jpg](img/Figure_20.11_B17469.jpg)'
- en: 'Figure 20.11: Pop-up menu with unwindReviewCancelWithSegue: selected'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.11：选择 unwindReviewCancelWithSegue 的弹出菜单
- en: All the outlets and actions for the `PhotoFilterViewController` class have been
    connected.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`PhotoFilterViewController` 类的所有输出口和操作都已连接。'
- en: 'Next, you will implement the following methods:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将实现以下方法：
- en: '`showCameraUserInterface()`, a method that will display either the view from
    the device camera or the photo library in an image picker interface.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`showCameraUserInterface()`，这是一个方法，它将在图像选择器界面中显示设备相机的视图或相册。'
- en: Two `UIImagePickerControllerDelegate` protocol methods that will be called when
    you choose a picture in the image picker interface or click the `UIImagePickerController`,
    go to [https://developer.apple.com/documentation/uikit/uiimagepickercontroller](https://developer.apple.com/documentation/uikit/uiimagepickercontroller).
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你在图像选择器界面中选择图片或点击 `UIImagePickerController` 时，将调用两个 `UIImagePickerControllerDelegate`
    协议方法，有关这些方法的信息，请访问 [https://developer.apple.com/documentation/uikit/uiimagepickercontroller](https://developer.apple.com/documentation/uikit/uiimagepickercontroller)。
- en: Important Information
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要信息
- en: To learn more about `UIImagePickerControllerDelegate`, go to [https://developer.apple.com/documentation/uikit/uiimagepickercontrollerdelegate](https://developer.apple.com/documentation/uikit/uiimagepickercontrollerdelegate).
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要了解更多关于 `UIImagePickerControllerDelegate` 的信息，请访问 [https://developer.apple.com/documentation/uikit/uiimagepickercontrollerdelegate](https://developer.apple.com/documentation/uikit/uiimagepickercontrollerdelegate)。
- en: 'To implement the `showCameraUserInterface()` and `UIImagePickerControllerDelegate`
    methods, click the `PhotoFilterViewController` file in the Project navigator and
    add the following extension after the `UICollectionViewDelegateFlowLayout` extension:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现 `showCameraUserInterface()` 和 `UIImagePickerControllerDelegate` 方法，请在项目导航器中点击
    `PhotoFilterViewController` 文件，并在 `UICollectionViewDelegateFlowLayout` 扩展之后添加以下扩展：
- en: '[PRE29]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Let's talk about `showCameraUserInterface()` first. This method is triggered
    when the camera button is tapped, displaying an image picker on the screen. This
    image picker is the standard iOS image picker that appears when you want to use
    an image—for instance, to add an image to a Facebook post or to a tweet.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们谈谈 `showCameraUserInterface()`。当点击相机按钮时，此方法被触发，在屏幕上显示图像选择器。这个图像选择器是标准的iOS图像选择器，当你想要使用图像时会出现，例如，将图像添加到Facebook帖子或推文中。
- en: 'Let''s break this down:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下：
- en: '[PRE30]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Creates an instance of the `UIImagePickerController` class and assigns it to
    `imagePicker`.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `UIImagePickerController` 类的实例并将其分配给 `imagePicker`。
- en: '[PRE31]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Sets the `imagePicker` instance's `delegate` property to the `PhotoFilterViewController`
    instance.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `imagePicker` 实例的 `delegate` 属性设置为 `PhotoFilterViewController` 实例。
- en: '[PRE32]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This block of code is known as a conditional compilation block. It starts with
    an `#if` compilation directive and ends with an `#endif` compilation directive.
    If you're running on the simulator, only the statement setting the `imagePicker`
    instance's `sourceType` property to the photo library is compiled. If you're running
    on an actual device, the statements setting the `imagePicker` instance's `sourceType`
    property to camera and displaying the camera controls are compiled.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码块被称为条件编译块。它以 `#if` 编译指令开始，以 `#endif` 编译指令结束。如果你在模拟器上运行，只有设置 `imagePicker`
    实例的 `sourceType` 属性为相册的语句会被编译。如果你在实际设备上运行，设置 `imagePicker` 实例的 `sourceType` 属性为相机并显示相机控制的语句会被编译。
- en: Important Information
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: 'You can learn more about conditional compilation blocks at this link: [https://docs.swift.org/swift-book/ReferenceManual/Statements.html#ID538](https://docs.swift.org/swift-book/ReferenceManual/Statements.html#ID538).'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下链接中了解更多关于条件编译块的信息：[https://docs.swift.org/swift-book/ReferenceManual/Statements.html#ID538](https://docs.swift.org/swift-book/ReferenceManual/Statements.html#ID538)。
- en: '[PRE33]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Sets the camera interface to capture still images.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 将相机界面设置为捕获静态图像。
- en: '[PRE34]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Indicates the user is allowed to edit the selected image.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 表示用户允许编辑所选图像。
- en: '[PRE35]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Presents `imagePicker` on the screen.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在屏幕上呈现 `imagePicker`。
- en: When the image picker appears onscreen, you have the option of selecting a photo
    or canceling. If you cancel, `imagePickerControllerDidCancel(_:)` is triggered
    and the image picker is dismissed.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 当图像选择器出现在屏幕上时，你可以选择一张照片或取消。如果你取消，将触发 `imagePickerControllerDidCancel(_:)` 并关闭图像选择器。
- en: If you select a photo, `imagePickerController(_:didFinishPickingMediaWithInfo:)`
    is triggered and a photo will be returned and assigned to `selectedImage`. Next,
    the `selectedImage` instance's `preparingThumbnail(of:)` method will be used to
    create a small image with a width and height of `100` points. This will then be
    assigned to the `thumbnail` property. After that, an image with the same size
    as `mainImageView` will be created from `selectedImage` using the `preparingThumbnail(of:)`
    method. This will be assigned to the `mainImage` property and the image picker
    will be dismissed.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择了一张照片，`imagePickerController(_:didFinishPickingMediaWithInfo:)` 将被触发，并将返回并分配给
    `selectedImage` 的照片。接下来，将使用 `selectedImage` 实例的 `preparingThumbnail(of:)` 方法创建一个宽度和高度为
    `100` 点的小图像。然后，将此分配给 `thumbnail` 属性。之后，将使用 `preparingThumbnail(of:)` 方法从 `selectedImage`
    创建与 `mainImageView` 相同大小的图像。这将分配给 `mainImage` 属性，并且图像选择器将被关闭。
- en: Important Information
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: 'You can learn more about the `preparingThumbnail(of:)` method at this link:
    [https://developer.apple.com/documentation/uikit/uiimage/3750835-preparingthumbnail](https://developer.apple.com/documentation/uikit/uiimage/3750835-preparingthumbnail).'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在此链接中了解更多关于 `preparingThumbnail(of:)` 方法的知识：[https://developer.apple.com/documentation/uikit/uiimage/3750835-preparingthumbnail](https://developer.apple.com/documentation/uikit/uiimage/3750835-preparingthumbnail)。
- en: 'Next, you''ll implement `filterMainImage(filterItem:)`, a method to apply a
    filter to the image in the `mainImageView`. Add an extension containing this method
    after the `UIImagePickerControllerDelegate` extension:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要实现 `filterMainImage(filterItem:)` 方法，这是一个用于将过滤器应用于 `mainImageView` 中图像的方法。在
    `UIImagePickerControllerDelegate` 扩展之后添加包含此方法的扩展：
- en: '[PRE36]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This makes the `PhotoFilterViewController` class adopt the `ImageFiltering`
    protocol. Remember that any class that adopts this protocol gets the `apply(filter:originalImage:)`
    method. The `filterMainImage(filterItem:)` method uses this method to apply the
    selected filter to the photo stored in the `PhotoFilterViewController` instance's
    `mainImage` property, and the result is assigned to the `mainImageView` outlet
    so that it is visible on the screen. If you selected the `None` filter, then `mainImage`
    is assigned to the `mainImageView` outlet.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得 `PhotoFilterViewController` 类采用 `ImageFiltering` 协议。请记住，任何采用此协议的类都会获得 `apply(filter:originalImage:)`
    方法。`filterMainImage(filterItem:)` 方法使用此方法将选定的过滤器应用于存储在 `PhotoFilterViewController`
    实例的 `mainImage` 属性中的照片，并将结果分配给 `mainImageView` 输出口，以便在屏幕上可见。如果你选择了 `None` 过滤器，则
    `mainImage` 将分配给 `mainImageView` 输出口。
- en: 'You still need to know which filter the user picked, so you''ll make the `PhotoFilterViewController`
    class adopt the `UICollectionViewDelegate` protocol and implement the method that
    identifies which cell in the collection view was tapped. Add the following extension
    containing this method after the `ImageFiltering` extension:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 你仍然需要知道用户选择了哪个过滤器，因此你将使 `PhotoFilterViewController` 类采用 `UICollectionViewDelegate`
    协议并实现识别在集合视图中被点击的单元格的方法。在 `ImageFiltering` 扩展之后添加包含此方法的以下扩展：
- en: '[PRE37]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The `collectionView(_:didSelectItemAt:)` method is called whenever the user
    taps a cell in the collection view. The `FilterItem` corresponding to the cell
    that was tapped is then passed to `filterMainImage(filterItem:)`.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在集合视图中点击单元格时，会调用 `collectionView(_:didSelectItemAt:)` 方法。然后，被点击的单元格对应的 `FilterItem`
    将传递给 `filterMainImage(filterItem:)`。
- en: The implementation of the `PhotoFilterViewController` class is now complete
    but remember that you have to ask for permission to use the camera or to access
    the photo library. You'll modify the `Info.plist` file in your project so that
    messages will be displayed to the user when your app attempts to access the camera
    or photo library.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '`PhotoFilterViewController` 类的实现现在已经完成，但请记住，你必须请求使用相机或访问照片库的权限。你将修改项目中的 `Info.plist`
    文件，以便当你的应用程序尝试访问相机或照片库时向用户显示消息。'
- en: Getting permission to use the camera or photo library
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取使用相机或照片库的权限
- en: As mentioned earlier, Apple stipulates that your app must inform the user if
    it wishes to access the camera or photo library. If you don't do this, your app
    will be rejected and will not be allowed on the App Store.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，苹果规定，如果你的应用程序希望访问相机或照片库，则必须通知用户。如果你不这样做，你的应用程序将被拒绝，并且不允许在 App Store 上发布。
- en: 'You''ll modify the `Info.plist` file in your project to make your app display
    messages when it tries to access the camera or photo library. Follow these steps:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 你将修改项目中的 `Info.plist` 文件，以便当你的应用程序尝试访问相机或照片库时显示消息。按照以下步骤操作：
- en: 'Click the `Info.plist` file in the Project navigator to display a list of keys.
    Move your mouse pointer over any existing key and click the **+** button:![Figure
    20.12: Editor area showing contents of Info.plist'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击`Info.plist`文件以显示键列表。将鼠标指针移至任何现有键上，并点击**+**按钮：![图20.12：编辑区域显示Info.plist的内容
- en: '](img/Figure_20.12_B17469.jpg)'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_20.12_B17469.jpg)'
- en: 'Figure 20.12: Editor area showing contents of Info.plist'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图20.12：编辑区域显示Info.plist的内容
- en: 'A field should appear, allowing you to enter an additional key:![Figure 20.13:
    Editor area showing field used to enter keys'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应该会出现一个字段，允许你输入一个额外的键：![图20.13：编辑区域显示用于输入键的字段
- en: '](img/Figure_20.13_B17469.jpg)'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_20.13_B17469.jpg)'
- en: 'Figure 20.13: Editor area showing field used to enter keys'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图20.13：编辑区域显示用于输入键的字段
- en: 'Enter the following keys:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下键：
- en: '[PRE38]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'For each key''s value, enter a string that explains to the user why you wish
    to use the camera or photo library:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个键的值，输入一个字符串，向用户解释你为什么希望使用相机或照片库：
- en: '![Figure 20.14: Info.plist with additional keys added'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '![图20.14：添加了额外键的Info.plist'
- en: '](img/Figure_20.14_B17469.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_20.14_B17469.jpg)'
- en: 'Figure 20.14: Info.plist with additional keys added'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.14：添加了额外键的Info.plist
- en: 'Build and run the project. Go to the **Restaurant Detail** screen and tap the
    **Add Photo** button. You should see the following alert:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行项目。转到**餐厅详情**页面，点击**添加照片**按钮。你应该会看到以下提示：
- en: '![Figure 20.15: iOS Simulator showing camera access alert'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '![图20.15：iOS模拟器显示相机访问提示'
- en: '](img/Figure_20.15_B17469.jpg)'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_20.15_B17469.jpg)'
- en: 'Figure 20.15: iOS Simulator showing camera access alert'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.15：iOS模拟器显示相机访问提示
- en: 'Tap **OK**. The image picker will appear:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**确定**。图片选择器将出现：
- en: '![Figure 20.16: iOS Simulator showing image picker'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '![图20.16：iOS模拟器显示图片选择器'
- en: '](img/Figure_20.16_B17469.jpg)'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_20.16_B17469.jpg)'
- en: 'Figure 20.16: iOS Simulator showing image picker'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.16：iOS模拟器显示图片选择器
- en: 'Select a photo, and the **Photo Filter** screen will display the photo and
    a list of thumbnails with different filters applied to them. Tapping a filter
    will apply its effect to the photo:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一张照片，**照片滤镜**屏幕将显示照片和一系列应用了不同滤镜的缩略图。点击一个滤镜将应用其效果到照片上：
- en: '![Figure 20.17: iOS Simulator showing Photo Filter screen'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '![图20.17：iOS模拟器显示照片滤镜屏幕'
- en: '](img/Figure_20.17_B17469.jpg)'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_20.17_B17469.jpg)'
- en: 'Figure 20.17: iOS Simulator showing Photo Filter screen'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.17：iOS模拟器显示照片滤镜屏幕
- en: You've modified the `info.plist` file in your project and your app now asks
    for permission before using the camera or the photo library. You can use the **Cancel**
    button to dismiss the **Photo Filter** screen and return to the **Restaurant Detail**
    screen. You can't use the **Save** button yet though, you'll implement its functionality
    in the next chapter.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经修改了项目中的`info.plist`文件，现在你的应用程序在使用相机或照片库之前会请求权限。你可以使用**取消**按钮关闭**照片滤镜**屏幕并返回到**餐厅详情**屏幕。不过，你目前还不能使用**保存**按钮，你将在下一章实现其功能。
- en: Summary
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you completed the implementation of the `FilterData.plist`,
    a `.plist` file containing the filters you want to use, created the `FilterItem`
    class to store filter data, and created the `FilterManager` data manager class
    to read the `.plist` file and populate an array of `FilterItem` instances. Next,
    you created a protocol, `ImageFiltering`, with a method to apply filters to images.
    Then, you created the `FilterCell` and `PhotoFilterViewController` classes in
    order to manage the collection view cells and the `PhotoFilterViewController`
    class adopt the `UIImagePickerDelegate` protocol, and added methods so that you
    can use photos from the camera or photo library in your app. Finally, you added
    code to `PhotoFilterViewController` to apply a selected filter to a picture.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你完成了`FilterData.plist`的实现，这是一个包含你想要使用的滤镜的`.plist`文件，创建了`FilterItem`类来存储滤镜数据，并创建了`FilterManager`数据管理类来读取`.plist`文件并填充`FilterItem`实例的数组。然后，你创建了一个协议`ImageFiltering`，其中包含一个应用于图像的方法。接着，你创建了`FilterCell`和`PhotoFilterViewController`类来管理集合视图单元格，并且`PhotoFilterViewController`类采用了`UIImagePickerDelegate`协议，并添加了方法，以便你可以在应用程序中使用来自相机或照片库的照片。最后，你在`PhotoFilterViewController`中添加了代码，以将选定的滤镜应用到图片上。
- en: You are now able to write your own apps that import photos from your camera
    or photo library, and apply filters to them.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以编写自己的应用程序，从相机或照片库导入照片，并对其应用滤镜。
- en: Note that the selected picture cannot be saved. You will learn how to save reviews
    and pictures using Core Data in the next chapter so that they will reappear after
    you quit and relaunch the app.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，选中的图片无法保存。你将在下一章学习如何使用Core Data保存评论和图片，这样在退出并重新启动应用后它们会再次出现。
