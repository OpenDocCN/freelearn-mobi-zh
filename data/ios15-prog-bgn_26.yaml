- en: '*Chapter 22*: Getting Started with Mac Catalyst'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第22章*: 开始使用Mac Catalyst'
- en: Apple's Mac Catalyst feature allows you to make a Mac version of an iPad app.
    This allows you to share the same project and source code for both platforms,
    making it easier to maintain. During WWDC2021, Apple announced updates to Mac
    Catalyst that allow you to add more features just for Mac, such as keyboard navigation
    and printing using *Command + P*. This chapter will focus on how to make your
    existing iPhone app run on iPad, so you can make a Mac version of it. By doing
    so, you will be able to reach an audience of over 100 million active Mac users.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果的Mac Catalyst功能允许您创建iPad应用的Mac版本。这使您能够共享两个平台相同的项目和源代码，从而更容易维护。在WWDC2021期间，苹果宣布了对Mac
    Catalyst的更新，允许您为Mac添加更多功能，例如使用*Command + P*进行键盘导航和打印。本章将重点介绍如何使您现有的iPhone应用在iPad上运行，以便您可以创建其Mac版本。通过这样做，您将能够接触到超过1亿活跃的Mac用户群体。
- en: In this chapter, you'll modify your app to make it run on iPads and Macs. First,
    you'll fix some user interface issues in your app. Next, you'll learn how to make
    your app's user interface work on the iPad, taking advantage of the iPad's larger
    screen size. After that, you'll use the iPad version of your app to create the
    Mac version.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将修改您的应用，使其在iPad和Mac上运行。首先，您将修复应用中的某些用户界面问题。接下来，您将学习如何使您的应用用户界面在iPad上工作，利用iPad更大的屏幕尺寸。然后，您将使用您的应用iPad版本来创建Mac版本。
- en: By the end of this chapter, you'll be able to make your existing iOS apps run
    well on all iOS devices, and also be able to make Mac apps from your iPad apps.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将能够使您现有的iOS应用在所有iOS设备上运行良好，并且还能够从您的iPad应用中创建Mac应用。
- en: 'The following topics will be covered:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下内容将涵盖：
- en: Fixing user interface issues
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复用户界面问题
- en: Making your app run on all iOS devices
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在所有iOS设备上运行您的应用
- en: Making your app run on the Mac
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Mac上运行您的应用
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will continue working on the `LetsEat` project that you modified in the
    previous chapter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您将继续在上一章中修改的`LetsEat`项目中工作。
- en: 'The completed Xcode project for this chapter is in the `Chapter22` folder of
    the code bundle for this book, which can be downloaded here:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的完成版Xcode项目位于本书代码包的`Chapter22`文件夹中，可在此处下载：
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际运行情况：
- en: '[https://bit.ly/3IbY41R](https://bit.ly/3IbY41R)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bit.ly/3IbY41R](https://bit.ly/3IbY41R)'
- en: Let's start by making some changes to the user interface to make it look better.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从对用户界面进行一些修改开始，使其看起来更好。
- en: Fixing user interface issues
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复用户界面问题
- en: 'One of the things that you will find is that an iOS app is never really done.
    You''ll always find ways to improve and refine your app. Build and run your app,
    and compare it with the design shown in the app tour (in [*Chapter 9*](B17469_09_Final_VK_ePub.xhtml#_idTextAnchor133),
    *Setting Up the User Interface*). You will notice upon close inspection that your
    app''s screens have minor differences when compared to the screens shown in the
    app tour, and require changes. Let''s start with the **Explore** screen for your
    app:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您会发现的一件事是iOS应用永远不会真正完成。您总会找到改进和精炼应用的方法。构建并运行您的应用，并将其与应用导游中显示的设计（在[*第9章*](B17469_09_Final_VK_ePub.xhtml#_idTextAnchor133)，*设置用户界面*）进行比较。您将注意到，在仔细检查后，与应用导游中显示的屏幕相比，您的应用屏幕有细微的差异，需要进行更改。让我们从您的应用的**探索**屏幕开始：
- en: '![Figure 22.1: iOS Simulator showing Explore screen'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '![图22.1：iOS模拟器显示探索屏幕'
- en: '](img/Figure_22.01_B17469.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_22.01_B17469.jpg)'
- en: 'Figure 22.1: iOS Simulator showing Explore screen'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图22.1：iOS模拟器显示探索屏幕
- en: 'The changes required for the **Explore** screen are as follows. Refer to the
    numbers to see the part that needs to be changed:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对**探索**屏幕所需的更改如下。参考数字以查看需要更改的部分：
- en: The navigation bar (**1**) is not present on the app tour and will have to be
    removed.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航栏（**1**）在应用导游中不存在，需要将其删除。
- en: The collection view cells (**2**) have sharp edges. You'll implement rounded
    corners for the cells to match the cells shown in the app tour.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集视图单元格（**2**）有尖锐的边缘。您将为单元格实现圆角，以匹配应用导游中显示的单元格。
- en: The tab bar buttons are blue (**3**). You'll change the tab bar button color
    to red to match the app tour.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签栏按钮是蓝色（**3**）。您将更改标签栏按钮颜色为红色，以匹配应用导游。
- en: 'Now let''s see the **Locations** screen for your app:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看你的应用程序的 **位置** 屏幕：
- en: '![Figure 22.2: iOS Simulator showing Locations screen'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 22.2：iOS 模拟器显示位置屏幕'
- en: '](img/Figure_22.02_B17469.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_22.02_B17469.jpg)'
- en: 'Figure 22.2: iOS Simulator showing Locations screen'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 22.2：iOS 模拟器显示位置屏幕
- en: The large title at the top of the **Locations** screen shown in the app tour
    is missing, and you will have to add it.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序导览中显示的 **位置** 屏幕顶部的较大标题缺失，你必须添加它。
- en: 'As you can see, there are only four minor changes that need to be made, and
    these changes are easy to implement. You''ll start by modifying the **Explore**
    screen. Follow these steps:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，只需要进行四个小的修改，这些修改很容易实现。你将从修改 **Explore** 屏幕开始。按照以下步骤操作：
- en: Click the `ExploreViewController` file inside the `Explore` folder in the Project
    navigator.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中 `Explore` 文件夹内的 `ExploreViewController` 文件中。
- en: 'Add a `viewWillAppear()` method after the `viewDidLoad()` method, and add code
    inside this method to hide the navigation controller''s navigation bar:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `viewDidLoad()` 方法之后添加一个 `viewWillAppear()` 方法，并在该方法内部添加代码以隐藏导航控制器中的导航栏：
- en: '[PRE0]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that if you add this code to `viewDidLoad()`, the navigation bar will be
    hidden only when the **Explore** screen first appears, and will reappear when
    you transition from either the **Locations** screen or the **Restaurant List**
    screen back to the **Explore** screen.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，如果你将此代码添加到 `viewDidLoad()` 中，导航栏仅在 **Explore** 屏幕首次出现时隐藏，并在从 **位置** 屏幕或 **餐厅列表**
    屏幕切换回 **Explore** 屏幕时重新出现。
- en: 'To round the corners of the collection view cells on the `ExploreCell` file
    (inside the `View` folder in the `Explore` folder) in the Project navigator, and
    add the following method after the outlet declarations:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在项目导航器中 `Explore` 文件夹内的 `View` 文件夹中的 `ExploreCell` 文件（在 `Explore` 文件夹内）上圆角化集合视图单元格，并在出口声明之后添加以下方法：
- en: '[PRE1]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To change the colors of the tab bar buttons, click the `AppDelegate` file in
    the Project navigator and add a `private` extension containing the following methods
    after the last curly brace:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要更改标签栏按钮的颜色，在项目导航器中点击 `AppDelegate` 文件，并在最后一个花括号之后添加一个包含以下方法的 `private` 扩展：
- en: '[PRE2]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `AppDelegate` file contains the declaration and the definition of the `AppDelegate`
    class. This class handles application events, for example, what happens when an
    application is launched, sent to the background, terminated, and so on. You can
    add code here to configure your app as it is starting up.
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`AppDelegate` 文件包含了 `AppDelegate` 类的声明和定义。这个类处理应用程序事件，例如，当应用程序启动、发送到后台、终止等情况。你可以在启动时在这里添加代码来配置你的应用程序。'
- en: As you have done before, you'll use an `initialize()` method to call all other
    setup methods. In this case, the `initialize()` method calls the `setupDefaultColors()`
    method.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如你之前所做的那样，你将使用一个 `initialize()` 方法来调用所有其他设置方法。在这种情况下，`initialize()` 方法调用了 `setupDefaultColors()`
    方法。
- en: The `setupDefaultColors()` method will change the tint colors for items in the
    tab bar and navigation bar to red. It makes use of the `appearance()` method,
    which sets attributes globally for every tab and nav bar that has been or will
    be created.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`setupDefaultColors()` 方法将更改标签栏和导航栏中项的色调颜色为红色。它使用了 `appearance()` 方法，该方法为已创建或将要创建的每个标签和导航栏设置全局属性。'
- en: Important Information
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要信息
- en: 'More information about the `appearance()` method can be found here: [https://developer.apple.com/documentation/uikit/uiappearance](https://developer.apple.com/documentation/uikit/uiappearance).'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于 `appearance()` 方法的更多信息可以在这里找到：[https://developer.apple.com/documentation/uikit/uiappearance](https://developer.apple.com/documentation/uikit/uiappearance)。
- en: 'You have to call the `initialize()` method as the app is starting up, so modify
    the `application(_:didFinishLaunchingWithOptions:)` method as follows:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你必须在应用程序启动时调用 `initialize()` 方法，因此修改 `application(_:didFinishLaunchingWithOptions:)`
    方法如下：
- en: '[PRE3]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Click the `Main` storyboard file in the Project navigator. Under the **Explore
    View Controller Scene**, click **Explore Image View**. Select the Attributes inspector
    and under **View**, change the **Content Mode** to **Aspect Fill**:![Figure 22.3:
    Main storyboard file showing Explore Image View set to Aspect Fill'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击 `Main` 故事板文件。在 **Explore 视图控制器场景** 下，点击 **Explore Image View**。选择属性检查器，在
    **视图** 下，将 **内容模式** 改为 **填充宽高**：![图 22.3：主故事板文件显示设置为填充宽高的 Explore Image View
- en: '](img/Figure_22.03_B17469.jpg)'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_22.03_B17469.jpg)'
- en: 'Figure 22.3: Main storyboard file showing Explore Image View set to Aspect
    Fill'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 22.3：主故事板文件显示设置为填充宽高的 Explore Image View
- en: This allows images to take up the full image view frame and display the rounded
    corners you coded in *Step 3*.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这允许图像占据整个图像视图框架，并显示你在*步骤3*中编码的圆角。
- en: 'Build and run your app. The **Explore** screen should look like this:'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 构建并运行你的应用。**探索**屏幕应该看起来像这样：
- en: '![Figure 22.4: iOS Simulator showing updated Explore screen'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图22.4：iOS模拟器显示更新后的探索屏幕'
- en: '](img/Figure_22.04_B17469.jpg)'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_22.04_B17469.jpg)'
- en: 'Figure 22.4: iOS Simulator showing updated Explore screen'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图22.4：iOS模拟器显示更新后的探索屏幕
- en: You'll see that the navigation bar is gone, the corners of each cell are rounded,
    and the **Explore** and **Map** button icons and titles are now red when selected.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你会发现导航栏消失了，每个单元格的角落都变得圆润，当选择**探索**和**地图**按钮图标和标题时，现在会变成红色。
- en: Next, you'll update the `LocationViewController` class. Click the `LocationViewController`
    file inside the `Location` folder in the Project navigator and modify the `initialize()`
    method to set a title for the `title` property that can be displayed in the navigation
    bar. This code sets the title to `Select a location` and displays it in large
    letters at the top of the screen.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你将更新`LocationViewController`类。在项目导航器中，点击`Location`文件夹内的`LocationViewController`文件，并修改`initialize()`方法，为`title`属性设置一个可以在导航栏中显示的标题。此代码将标题设置为`Select
    a location`，并在屏幕顶部用大号字体显示。
- en: 'Build and run your app, and tap the **LOCATION** button. The **Locations**
    screen should look like this:'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 构建并运行你的应用，然后点击**位置**按钮。**位置**屏幕应该看起来像这样：
- en: '![Figure 22.5: iOS Simulator showing updated Locations screen'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '![图22.5：iOS模拟器显示更新后的位置屏幕'
- en: '](img/Figure_22.05_B17469.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_22.05_B17469.jpg)'
- en: 'Figure 22.5: iOS Simulator showing updated Locations screen'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图22.5：iOS模拟器显示更新后的位置屏幕
- en: You'll see **Select a location** in large letters at the top of the screen,
    and the **Cancel** and **Done** buttons are now red.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你会在屏幕顶部看到用大号字体写的**选择位置**，而**取消**和**完成**按钮现在也是红色的。
- en: Great! You've finished cleaning up the design for the app on the iPhone. The
    four issues mentioned earlier have been addressed, and your app's screens now
    look exactly like the screens shown in the app tour. As you can see, even minor
    changes can make your app more visually appealing.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！你已经完成了iPhone上应用的界面清理工作。前面提到的四个问题已经得到解决，你的应用屏幕现在看起来与应用导览中显示的屏幕完全一样。正如你所见，即使是微小的变化也能让你的应用更具视觉吸引力。
- en: So far, you've been running your app in the iPhone simulator. In the next section,
    you'll run your app in the iPad simulator to see what changes are required. You'll
    then modify your app so that the user interface will take advantage of the iPad's
    larger screen.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你一直在iPhone模拟器中运行你的应用。在下一节中，你将在iPad模拟器中运行你的应用，以查看需要哪些更改。然后你将修改你的应用，以便用户界面可以利用iPad更大的屏幕。
- en: Making your app run on all iOS devices
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使你的应用在所有iOS设备上运行
- en: 'Before you can make a Mac app from your existing iOS app, you need to modify
    the user interface to work with iPad. To see what changes you will need to make,
    you''ll build and run your app on the iPad simulator. Follow these steps:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在你能够从现有的iOS应用创建Mac应用之前，你需要修改用户界面以适应iPad。为了查看你需要进行哪些更改，你将在iPad模拟器上构建并运行你的应用。按照以下步骤操作：
- en: 'Close the simulator if it is running. Choose **iPad Pro (9.7-inch)** from the
    list of simulators in the **Scheme** menu and run your app:![Figure 22.6: Scheme
    menu with iPad Pro (9.7-inch) selected'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果模拟器正在运行，请关闭它。在**方案**菜单中的模拟器列表中选择**iPad Pro (9.7英寸**)，并运行你的应用：![图22.6：选择iPad
    Pro (9.7英寸)的方案菜单
- en: '](img/Figure_22.06_B17469.jpg)'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_22.06_B17469.jpg)'
- en: 'Figure 22.6: Scheme menu with iPad Pro (9.7-inch) selected'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图22.6：选择iPad Pro (9.7英寸)的方案菜单
- en: 'The iPad simulator will launch and appear as shown in the following screenshot:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: iPad模拟器将启动并如以下截图所示：
- en: '![ Figure 22.7: iPad simulator showing Explore screen'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '![图22.7：iPad模拟器显示探索屏幕'
- en: '](img/Figure_22.07_B17469.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_22.07_B17469.jpg)'
- en: 'Figure 22.7: iPad simulator showing Explore screen'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图22.7：iPad模拟器显示探索屏幕
- en: As you can see, the collection view on the **Explore** screen automatically
    takes up the whole width of the screen, and the collection view cells are the
    same size that they were on the iPhone. Even though you can use exactly the same
    user interface for both iPhone and iPad, it would be better if you could customize
    it to suit each device.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，**探索**屏幕上的集合视图自动占据整个屏幕宽度，集合视图单元格的大小与iPhone上的大小相同。尽管你可以为iPhone和iPad使用完全相同的用户界面，但如果你能根据每个设备进行定制会更好。
- en: To do this, you'll add some code so your app can identify the type of device
    it's running on. Next, you'll update your app's user interface to suit the iPad's
    larger screen and make your app automatically switch the user interface based
    on the device type.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，您需要添加一些代码，以便您的应用程序可以识别其正在运行的设备类型。接下来，您将更新应用程序的用户界面以适应iPad的大屏幕，并使应用程序根据设备类型自动切换用户界面。
- en: Let's see how to make your app detect the type of device it is running on in
    the next section.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在下一节中使您的应用程序检测其正在运行的设备类型。
- en: Identifying device type
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 识别设备类型
- en: 'You need to add some code to your app so that it knows the device it is running
    on. Follow these steps:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要向您的应用程序添加一些代码，以便它知道正在运行的设备。按照以下步骤操作：
- en: Right-click the `Misc` folder and select **New File**.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`Misc`文件夹并选择**新建文件**。
- en: '**iOS** should already be selected. Choose **Swift File** and then click **Next**.'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS**应该已经选中。选择**Swift文件**然后点击**下一步**。'
- en: Name this file `Device`. Click `Device` file appears in the Project navigator.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件命名为`Device`。点击`Device`文件出现在项目导航器中。
- en: 'Modify the file as shown to create a `Device` enumeration:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照所示修改文件以创建一个`Device`枚举：
- en: '[PRE4]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, an enumeration is used instead of a class or structure because you can't
    accidentally make an instance of it. The `UIDevice` class represents the device
    the app is running on. `UIDevice.current.userInterfaceIdiom` returns `.phone`
    if the app is running on an iPhone, and returns `.pad` if the app is running on
    an iPad. So `isPhone` returns `true` when the app is running on the iPhone, and
    `isPad` returns `true` when the app is running on the iPad.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，使用枚举而不是类或结构体，因为您无法意外地创建其实例。`UIDevice`类表示应用程序正在运行的设备。`UIDevice.current.userInterfaceIdiom`返回`.phone`如果应用程序正在iPhone上运行，如果应用程序正在iPad上运行，则返回`.pad`。因此，当应用程序在iPhone上运行时，`isPhone`返回`true`，当应用程序在iPad上运行时，`isPad`返回`true`。
- en: In addition to device type, you also have to consider device orientation. For
    example, an iPhone in landscape orientation is wider than an iPhone in portrait
    orientation even though it is the same iPhone. Let's learn how to handle device
    orientation using **size classes** in the next section.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 除了设备类型之外，您还必须考虑设备方向。例如，横向模式的iPhone比纵向模式的iPhone更宽，尽管它们是同一部iPhone。让我们在下一节中学习如何使用**尺寸类别**来处理设备方向。
- en: Understanding size classes
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解尺寸类别
- en: Although you can now identify what kind of device your app is running on, you
    also have to consider the effects of device orientation on your user interface.
    It can be challenging to do this as there is a wide variety of screen sizes, in
    both portrait and landscape orientation. To make this easier, instead of using
    the physical resolution of the device, you will use size classes.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然您现在可以识别应用程序正在运行的设备类型，但您还必须考虑设备方向对用户界面的影响。由于屏幕尺寸种类繁多，无论是纵向还是横向，这可能会很具挑战性。为了使这更容易，您将使用尺寸类别而不是设备的物理分辨率。
- en: Important Information
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: 'For more information on size classes, see this link: [https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/adaptivity-and-layout/](https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/adaptivity-and-layout/).'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 关于尺寸类别的更多信息，请参阅此链接：[https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/adaptivity-and-layout/](https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/adaptivity-and-layout/)。
- en: 'Size classes are traits which are automatically assigned to a view. Two classes
    are defined which describe the height and width of a view; regular (expansive
    space) and compact (constrained space). Let''s look at size classes for a full-screen
    view on different devices:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 尺寸类别是自动分配给视图的特性。定义了两个类别来描述视图的高度和宽度；常规（扩展空间）和紧凑（受限空间）。让我们看看不同设备上全屏视图的尺寸类别：
- en: '![Figure 22.8: Size classes for different iOS devices'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 22.8: 不同iOS设备的尺寸类别'
- en: '](img/Figure_22.08_B17469.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_22.08_B17469.jpg)'
- en: 'Figure 22.8: Size classes for different iOS devices'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图22.8：不同iOS设备的尺寸类别
- en: You'll have to consider not only the device type, but also the size class when
    you're designing the user interface. In the next section, you'll learn how to
    set the collection view cell size based on device and size class.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当您设计用户界面时，不仅要考虑设备类型，还要考虑尺寸类别。在下一节中，您将学习如何根据设备和尺寸类别设置集合视图单元格的大小。
- en: Updating the Explore screen
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新探索屏幕
- en: 'For the **Explore** screen, let''s say you have decided to display three columns
    on the iPad, two columns for the compact width size class and three columns for
    the regular width size class. You''ll add methods to set the size of the collection
    view cell depending on the device and orientation. Follow these steps:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 **探索** 屏幕，假设你决定在iPad上显示三列，对于紧凑型宽度尺寸类显示两列，对于常规宽度尺寸类显示三列。你将添加方法来根据设备和方向设置集合视图单元格的大小。按照以下步骤操作：
- en: 'Click the `ExploreViewController` file in the Project navigator and modify
    the `initialize()` method inside the `private` extension as follows:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击 `ExploreViewController` 文件，并修改 `private` 扩展内的 `initialize()` 方法，如下所示：
- en: '[PRE5]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `setupCollectionView()` method will be used to add a `UICollectionViewFlowLayout`
    instance to the collection view in the `initialize()` method:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`setupCollectionView()` 方法将在 `initialize()` 方法中使用，以向集合视图添加 `UICollectionViewFlowLayout`
    实例：'
- en: '[PRE6]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This method creates an instance of the `UICollectionViewFlowLayout` class, sets
    all the edge insets for the collection view to `7` points, sets the minimum interitem
    spacing to `0` points, sets the minimum line spacing to `7` points, and assigns
    it to the collection view. Remember that you initially set these values for the
    collection view using the Size inspector in [*Chapter 10*](B17469_10_Final_VK_ePub.xhtml#_idTextAnchor155)*,
    Building Your User Interface*.
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此方法创建了一个 `UICollectionViewFlowLayout` 类的实例，将集合视图的所有边缘内边距设置为 `7` 点，将最小项目间距设置为
    `0` 点，将最小行间距设置为 `7` 点，并将其分配给集合视图。记住，你最初使用大小检查器为集合视图设置了这些值，如[*第10章*](B17469_10_Final_VK_ePub.xhtml#_idTextAnchor155)*，构建用户界面*。
- en: 'Add an extension containing the methods that will set the size of the collection
    view cells and the collection view section header after the closing curly brace:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在闭合花括号之后添加一个扩展，包含将设置集合视图单元格大小和集合视图部分标题的方法：
- en: '[PRE7]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'These methods are declared in the `UICollectionViewDelegateFlowLayout` protocol,
    and they define item size and spacing in the collection view. They will override
    the settings in the Size inspector. Let''s break them down:'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些方法在 `UICollectionViewDelegateFlowLayout` 协议中声明，并定义了集合视图中的项目大小和间距。它们将覆盖大小检查器中的设置。让我们来分解它们：
- en: '[PRE8]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This method returns a `CGSize` instance that the collection view cell size should
    be set to.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此方法返回一个 `CGSize` 实例，集合视图单元格的大小应设置为。
- en: '[PRE9]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `columns` variable determines how many columns appear on screen, and is
    initially set to `2`.
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`columns` 变量决定了屏幕上显示的列数，并且最初被设置为 `2`。'
- en: '[PRE10]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Checks to see whether the app is running on an iPad or the `horizontalSizeClass`
    property is not `.compact`.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 检查应用是否正在iPad上运行或 `horizontalSizeClass` 属性不是 `.compact`。
- en: '[PRE11]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If the app is running on an iPad or the horizontal size class is not `.compact`,
    set `columns` to `3`.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果应用正在iPad上运行或水平尺寸类不是 `.compact`，则将 `columns` 设置为 `3`。
- en: '[PRE12]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Gets the width of the screen and assigns it to `viewWidth`.
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 获取屏幕宽度并将其分配给 `viewWidth`。
- en: '[PRE13]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Subtracts the space used for the edge insets so the cell size can be determined.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 减去边缘内边距所占用的空间，以便确定单元格大小。
- en: '[PRE14]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Gets the width of the cell by dividing `contentWidth` by `columns`, and assigns
    it to `cellWidth`.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过将 `contentWidth` 除以 `columns` 来获取单元格的宽度，并将其分配给 `cellWidth`。
- en: '[PRE15]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Sets the height of the cell to be the same as the width of the cell.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将单元格的高度设置为与单元格的宽度相同。
- en: '[PRE16]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Returns the cell size.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回单元格大小。
- en: Assume you're running on iPhone 13 Pro Max in portrait mode. `columns` is set
    to `2`. `viewWidth` would be assigned the width of the iPhone screen, which is
    `414` points. `contentWidth` is set to 414 - (7 x 3) = `393`. `cellWidth` is set
    to `contentWidth` / `columns` = `196.5`, and `cellHeight` is set to `cellWidth`,
    so the `CGSize` returned would be `(196.5, 196.5)`, enabling two cells to fit
    in a row.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在iPhone 13 Pro Max上以竖屏模式运行。`columns` 被设置为 `2`。`viewWidth` 被分配为iPhone屏幕的宽度，即
    `414` 点。`contentWidth` 被设置为 `414 - (7 x 3) = `393`。`cellWidth` 被设置为 `contentWidth`
    / `columns` = `196.5`，而 `cellHeight` 被设置为 `cellWidth`，因此返回的 `CGSize` 将是 `(196.5,
    196.5)`，使得一行可以容纳两个单元格。
- en: When you rotate the same iPhone to landscape mode, `columns` is set to `3`.
    `viewWidth` would be assigned the height of the iPhone screen, which is `896`
    points. `contentWidth` is set to 896 - (7 x 4) = `868`. `cellWidth` is set to
    `contentWidth` / `columns` = `289.3`, and `cellHeight` is set to `cellWidth`,
    so the `CGSize` returned would be `(289.3, 289.3)`, enabling three cells to fit
    in a row.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 当将相同的iPhone旋转到横屏模式时，`columns` 设置为 `3`。`viewWidth` 将被分配为iPhone屏幕的高度，即 `896` 点。`contentWidth`
    被设置为 `896 - (7 x 4) = `868`。`cellWidth` 被设置为 `contentWidth` / `columns` = `289.3`，而
    `cellHeight` 被设置为 `cellWidth`，因此返回的 `CGSize` 将是 `(289.3, 289.3)`，使得三行可以容纳三个单元格。
- en: '[PRE17]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This method returns the size the collection view section header should be set
    to.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法返回集合视图部分标题应设置的大小。
- en: '[PRE18]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The width of the collection view section header will depend on device orientation
    but the height will always be `100`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 集合视图部分标题的宽度将取决于设备方向，但高度始终为`100`。
- en: 'Build and run your app on the iPad simulator. You should see three columns
    displayed:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在iPad模拟器上构建并运行你的应用。你应该看到显示三列：
- en: '![Figure 22.9: iPad simulator showing updated Explore screen'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 22.9：iPad模拟器显示更新后的探索屏幕'
- en: '](img/Figure_22.09_B17469.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 22.09](img/Figure_22.09_B17469.jpg)'
- en: 'Figure 22.9: iPad simulator showing updated Explore screen'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图 22.9：iPad模拟器显示更新后的探索屏幕
- en: 'Build and run your app on the iPhone 13 Pro Max simulator, you should see two
    columns displayed:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在iPhone 13 Pro Max模拟器上构建并运行你的应用，你应该看到显示两列：
- en: '![Figure 22.10: iPhone 13 Pro Max Simulator showing updated Explore screen
    in portrait mode'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 22.10：iPhone 13 Pro Max模拟器显示横幅模式下的更新后的探索屏幕'
- en: '](img/Figure_22.10_B17469.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 22.10](img/Figure_22.10_B17469.jpg)'
- en: 'Figure 22.10: iPhone 13 Pro Max Simulator showing updated Explore screen in
    portrait mode'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 22.10：iPhone 13 Pro Max模拟器显示横幅模式下的更新后的探索屏幕
- en: 'Choose **Device** | **Rotate Left** in the simulator menu, you will see three
    columns displayed:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在模拟器菜单中选择**设备** | **向左旋转**，你会看到显示三列：
- en: '![Figure 22.11: iPhone 13 Pro Max Simulator showing updated Explore screen
    in landscape mode'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 22.11：iPhone 13 Pro Max模拟器显示横幅模式下的更新后的探索屏幕'
- en: '](img/Figure_22.11_B17469.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 22.11](img/Figure_22.11_B17469.jpg)'
- en: 'Figure 22.11: iPhone 13 Pro Max Simulator showing updated Explore screen in
    landscape mode'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图 22.11：iPhone 13 Pro Max模拟器显示横幅模式下的更新后的探索屏幕
- en: Choose **Device** | **Rotate Right** in the simulator menu to return to a vertical
    orientation.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在模拟器菜单中选择**设备** | **向右旋转**以返回垂直方向。
- en: You have completed modifying the `RestaurantListViewController` class in the
    next section.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经在下一节中完成了对`RestaurantListViewController`类的修改。
- en: Updating the Restaurant List screen
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新餐厅列表屏幕
- en: 'You have already modified the **Explore** screen to automatically adapt to
    the device your app is running on. You''ll now do the same for the **Restaurant
    List** screen. If you build and run on the iPad simulator, this is what the **Restaurant
    List** screen looks like:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经修改了**探索**屏幕以自动适应应用运行的设备。现在你将为**餐厅列表**屏幕做同样的操作。如果你在iPad模拟器上构建并运行，这是**餐厅列表**屏幕的样子：
- en: '![Figure 22.12: iPad Simulator showing Restaurant List screen'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 22.12：iPad模拟器显示餐厅列表屏幕'
- en: '](img/Figure_22.12_B17469.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 22.12](img/Figure_22.12_B17469.jpg)'
- en: 'Figure 22.12: iPad Simulator showing Restaurant List screen'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图 22.12：iPad模拟器显示餐厅列表屏幕
- en: 'As you can see, there are only two columns, and there is a large white space
    between them. Let''s say you want three columns on the iPad, one column for the
    compact width size class and two columns for the regular width size class. Follow
    these steps:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，只有两列，它们之间有一个很大的空白区域。假设你希望在iPad上显示三列，一个列用于紧凑型宽度尺寸类，两个列用于常规宽度尺寸类。按照以下步骤操作：
- en: 'Click the `RestaurantListViewController` file inside the `Restaurants` folder
    in the Project navigator. Create an `initialize()` method inside the `private`
    extension before all other code already in the extension:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击`Restaurants`文件夹内的`RestaurantListViewController`文件。在扩展中的所有其他代码之前，在`private`扩展中创建一个`initialize()`方法：
- en: '[PRE19]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `createData()` and `setupTitle()` methods are both called in `viewDidAppear()`,
    but you'll modify `viewDidAppear()` to call `initialize()` instead later. You'll
    see an error because the `setupCollectionView()` method is not declared or defined
    yet.
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`createData()`和`setupTitle()`方法都在`viewDidAppear()`中被调用，但稍后你会修改`viewDidAppear()`以调用`initialize()`。你会看到一个错误，因为`setupCollectionView()`方法尚未声明或定义。'
- en: 'Declare and define the `setupCollectionView()` method in the `private` extension
    after the `initialize()` method:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`initialize()`方法之后，在`private`扩展中声明并定义`setupCollectionView()`方法：
- en: '[PRE20]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Just like before, `setupCollectionView()` creates an instance of the `UICollectionViewFlowLayout`
    class, configures it, and assigns it to the collection view.
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 就像之前一样，`setupCollectionView()`创建了一个`UICollectionViewFlowLayout`类的实例，配置它，并将其分配给集合视图。
- en: 'Add an extension containing `UICollectionViewDelegateFlowLayout` methods after
    the closing curly brace:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在闭合花括号之后添加一个包含`UICollectionViewDelegateFlowLayout`方法的扩展：
- en: '[PRE21]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `collectionView(_:layout:sizeForItemAt:)` method implemented here works
    almost exactly the same as the implementation in the `ExploreViewController` class,
    but `cellHeight` is set to `312` points instead of being set to `cellWidth`. Note
    that if you're not running your app on an iPad, `columns` will be set to `1` for
    the compact width size class and to `2` for the regular width size class.
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里实现的`collectionView(_:layout:sizeForItemAt:)`方法几乎与`ExploreViewController`类中的实现完全相同，但`cellHeight`被设置为`312`点，而不是设置为`cellWidth`。请注意，如果你没有在iPad上运行你的应用，`columns`将设置为`1`用于紧凑宽度尺寸类，并设置为`2`用于常规宽度尺寸类。
- en: 'Update `viewDidAppear()` by removing calls to the `createData()` and `setupTitle()`
    methods and adding a call for the `initialize()` method:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过移除对`createData()`和`setupTitle()`方法的调用，并添加对`initialize()`方法的调用来更新`viewDidAppear()`：
- en: '[PRE22]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Build and run your app on the iPad simulator, and go to the **Restaurant List**
    screen, as shown:'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在iPad模拟器上构建和运行你的应用，然后转到**餐厅列表**屏幕，如图所示：
- en: '![Figure 22.13: iPad Simulator showing updated Restaurant List screen'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '![图22.13：iPad模拟器显示更新后的餐厅列表屏幕'
- en: '](img/Figure_22.13_B17469.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_22.13_B17469.jpg)'
- en: 'Figure 22.13: iPad Simulator showing updated Restaurant List screen'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图22.13：iPad模拟器显示更新后的餐厅列表屏幕
- en: 'There are three columns now, and the wide white gap is gone. Now build and
    run your app on the iPhone 13 Pro Max simulator. The **Restaurant List** screen
    should display a single column:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有三个列，宽白间隙消失了。现在在iPhone 13 Pro Max模拟器上构建和运行你的应用。**餐厅列表**屏幕应显示单列：
- en: '![Figure 22.14: iPhone 13 Pro Max Simulator showing updated Restaurant List
    screen in portrait mode'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '![图22.14：iPhone 13 Pro Max模拟器显示横幅模式的更新后的餐厅列表屏幕'
- en: '](img/Figure_22.14_B17469.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_22.14_B17469.jpg)'
- en: 'Figure 22.14: iPhone 13 Pro Max Simulator showing updated Restaurant List screen
    in portrait mode'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图22.14：iPhone 13 Pro Max模拟器显示横幅模式的更新后的餐厅列表屏幕
- en: 'Choose **Device** | **Rotate Left** in the simulator menu, and you should see
    two columns:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在模拟器菜单中选择**设备** | **向左旋转**，你应该看到两列：
- en: '![Figure 22.15: iPhone 13 Pro Max Simulator showing updated Restaurant List
    screen in landscape mode'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '![图22.15：iPhone 13 Pro Max模拟器显示横幅模式的更新后的餐厅列表屏幕'
- en: '](img/Figure_22.15_B17469.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_22.15_B17469.jpg)'
- en: 'Figure 22.15: iPhone 13 Pro Max Simulator showing updated Restaurant List screen
    in landscape mode'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图22.15：iPhone 13 Pro Max模拟器显示横幅模式的更新后的餐厅列表屏幕
- en: Choose **Device** | **Rotate Right** in the simulator menu, and quit the simulator.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在模拟器菜单中选择**设备** | **向右旋转**，然后退出模拟器。
- en: The **Explore** screen and the **Restaurant List** screen have been updated
    and now your app looks good on the iPad. It's now a perfect candidate to be made
    into a Mac app. Let's see how you can build a Mac app from your existing iPad
    app in the next section.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**探索**屏幕和**餐厅列表**屏幕已更新，现在你的应用在iPad上看起来很好。现在它是一个完美的候选者，可以制作成Mac应用。让我们看看如何在下一节中从现有的iPad应用构建Mac应用。'
- en: Updating the app to work on macOS
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新应用以在macOS上运行
- en: You have modified your app's screens to work well on all iOS devices. Now you'll
    learn how to make your app run on a Mac.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经修改了你的应用屏幕，使其在所有iOS设备上都能良好运行。现在你将学习如何让你的应用在Mac上运行。
- en: Apple have updated Mac Catalyst during WWDC2021, which makes it possible to
    build a Mac app from an existing iPad app with Mac-specific optimizations. As
    you will see, both apps will share the same project and source code.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果在WWDC2021期间更新了Mac Catalyst，这使得从现有的iPad应用构建具有Mac特定优化的Mac应用成为可能。正如你将看到的，这两个应用将共享相同的项目和源代码。
- en: Important Information
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: 'Watch the video at the following link to see the latest updates to Mac Catalyst
    announced by Apple during WWDC2021: [https://developer.apple.com/videos/play/wwdc2021/10052/](https://developer.apple.com/videos/play/wwdc2021/10052/).'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 观看以下链接中的视频，了解苹果在WWDC2021期间宣布的Mac Catalyst的最新更新：[https://developer.apple.com/videos/play/wwdc2021/10052/](https://developer.apple.com/videos/play/wwdc2021/10052/)。
- en: More information about Mac Catalyst is available at [https://developer.apple.com/mac-catalyst/](https://developer.apple.com/mac-catalyst/).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Mac Catalyst的更多信息可在[https://developer.apple.com/mac-catalyst/](https://developer.apple.com/mac-catalyst/)找到。
- en: 'Before you begin, note that this only works if have a free or paid Apple developer
    account. If you use the project files in the `Chapter24` folder downloaded from
    GitHub at [https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition),
    you have to set the development team for your app to make it run on your Mac.
    Follow these steps:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，请注意，这仅在您拥有免费或付费的Apple开发者账户时才有效。如果您使用从GitHub下载的`Chapter24`文件夹中的项目文件[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)，您必须为您的应用设置开发团队，以便它能在您的Mac上运行。按照以下步骤操作：
- en: 'Select your project in the Project navigator:![Figure 22.16: Project navigator
    showing LetsEat project selected'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中选择您的项目：![图22.16：项目导航器显示选中的LetsEat项目
- en: '](img/Figure_22.16_B17469.jpg)'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_22.16_B17469.jpg)'
- en: 'Figure 22.16: Project navigator showing LetsEat project selected'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图22.16：项目导航器显示选中的LetsEat项目
- en: 'In the **General** tab, tick the **Mac** checkbox:![Figure 22.17: Editor area
    showing Mac checkbox in General pane'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**通用**选项卡中，勾选**Mac**复选框：![图22.17：显示在通用面板中勾选的Mac复选框
- en: '](img/Figure_22.17_B17469.jpg)'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_22.17_B17469.jpg)'
- en: 'Figure 22.17: Editor area showing Mac checkbox in General pane'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图22.17：显示在通用面板中勾选的Mac复选框
- en: 'In the **Enable Mac support?** dialog box, click **Enable**:![Figure 22.18:
    Enable Mac support? dialog box'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**启用Mac支持？**对话框中，点击**启用**：![图22.18：启用Mac支持？对话框
- en: '](img/Figure_22.18_B17469.jpg)'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_22.18_B17469.jpg)'
- en: 'Figure 22.18: Enable Mac support? dialog box'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图22.18：启用Mac支持？对话框
- en: 'Note the **Mac** checkbox is now ticked:![Figure 22.19: Editor area showing
    Mac checkbox ticked'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意现在**Mac**复选框已被勾选：![图22.19：显示已勾选Mac复选框的编辑区域
- en: '](img/Figure_22.19_B17469.jpg)'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_22.19_B17469.jpg)'
- en: 'Figure 22.19: Editor area showing Mac checkbox ticked'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图22.19：显示已勾选Mac复选框的编辑区域
- en: Your app will be recompiled to run on your Mac. Note the **Show "Designed for
    iPad" Run Destination** checkbox. If you have an Apple Silicon Mac, you can select
    this destination to run your unmodified iPad apps natively on your Mac.
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您的应用将重新编译以在您的Mac上运行。注意**显示“专为iPad设计”运行目标**复选框。如果您拥有Apple Silicon Mac，您可以选择此目标以在您的Mac上本地运行未修改的iPad应用。
- en: Your Mac has been set as the run destination. Build and run your app.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的Mac已被设置为运行目标。构建并运行您的应用。
- en: 'If your project fails to build, click the Issue navigator button and check
    the error message:![Figure 22.20: Issue navigator showing error message'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您的项目构建失败，请点击问题导航器按钮并检查错误信息：![图22.20：问题导航器显示错误信息
- en: '](img/Figure_22.20_B17469.jpg)'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_22.20_B17469.jpg)'
- en: 'Figure 22.20: Issue navigator showing error message'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图22.20：问题导航器显示错误信息
- en: If you see the error shown here, this is because you need a free or paid developer
    account to run your app on actual hardware.
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您看到这里显示的错误，这是因为您需要一个免费或付费的开发者账户才能在真实硬件上运行您的应用。
- en: Check to see that your developer account has been added to Xcode in **Xcode**
    | **Preferences** | **Accounts**.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查您的开发者账户是否已添加到Xcode的**Xcode** | **首选项** | **账户**中。
- en: Tip
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 小贴士
- en: Adding your developer account to Xcode is covered in *Chapter 1, Getting Familiar
    with Xcode*.
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在*第1章，熟悉Xcode*中介绍了如何将您的开发者账户添加到Xcode中。
- en: 'Click the **Signing & Capabilities** tab. Select your paid or free developer
    account in the **Team** drop-down menu:![Figure 22.21: Editor area showing Team
    drop-down menu in Signing & Capabilities tab'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**签名与能力**选项卡。在**团队**下拉菜单中选择您的付费或免费开发者账户：![图22.21：显示在签名与能力选项卡中团队下拉菜单的编辑区域
- en: '](img/Figure_22.21_B17469.jpg)'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_22.21_B17469.jpg)'
- en: 'Figure 22.21: Editor area showing Team drop-down menu in Signing & Capabilities
    tab'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图22.21：显示在签名与能力选项卡中团队下拉菜单的编辑区域
- en: 'Build and run again, and you should see your app running on your Mac:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次构建和运行，您应该能看到您的应用在您的Mac上运行：
- en: '![Figure 22.22: LetsEat Mac app'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '![图22.22：LetsEat Mac应用'
- en: '](img/Figure_22.22_B17469.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_22.22_B17469.jpg)'
- en: 'Figure 22.22: LetsEat Mac app'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图22.22：LetsEat Mac应用
- en: Your app is now running on your Mac! Awesome!
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用现在已在您的Mac上运行！太棒了！
- en: If you still see errors, try changing the **Bundle Identifier** value to a unique
    value, and try running your app on your iOS device first.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仍然看到错误，请尝试将**Bundle Identifier**的值更改为一个唯一的值，并首先在您的iOS设备上运行您的应用。
- en: 'You''ll need to do some more work to make it a really nice Mac app, but that
    is beyond the scope of this book. Apple has a great tutorial on how to do so at
    this link: [https://developer.apple.com/tutorials/mac-catalyst](https://developer.apple.com/tutorials/mac-catalyst).'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要做一些额外的工作来使其成为一个真正优秀的 Mac 应用程序，但这超出了本书的范围。苹果公司有一个非常棒的教程，介绍了如何做到这一点，链接如下：[https://developer.apple.com/tutorials/mac-catalyst](https://developer.apple.com/tutorials/mac-catalyst)。
- en: Summary
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to build a Mac app from an existing iOS app.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将现有的 iOS 应用程序构建成一个 Mac 应用程序。
- en: You started by refining your app's user interface when running on the iPhone.
    Next, you added some code to make your app detect the device that it's running
    on, and modified your app's screens to work on all iOS devices. Finally, you used
    Mac Catalyst to build a Mac app from your iPad app. Your app now works great on
    iPhone, iPad, and Mac.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 你从优化应用程序在 iPhone 上的用户界面开始。接下来，你添加了一些代码，使你的应用程序能够检测它正在运行的设备，并修改了应用程序的屏幕，使其能够在所有
    iOS 设备上运行。最后，你使用 Mac Catalyst 从你的 iPad 应用程序构建了一个 Mac 应用程序。你的应用程序现在在 iPhone、iPad
    和 Mac 上都运行得很好。
- en: You're now able to make your existing iPhone apps run well on iPad, and also
    to make Mac apps from your iPad apps. As you have seen, once you have an iPhone
    app, you can make it work on iPad and Mac with relatively little effort.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你能够让你的现有 iPhone 应用程序在 iPad 上运行良好，并且也可以从你的 iPad 应用程序中创建 Mac 应用程序。正如你所看到的，一旦你有一个
    iPhone 应用程序，你就可以相对轻松地让它同时在 iPad 和 Mac 上运行。
- en: In the next chapter, you'll learn a completely new way to build apps using **SwiftUI**,
    a modern way to write apps for any Apple platform.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习一种全新的构建应用程序的方法，使用 **SwiftUI**，这是一种为任何苹果平台编写应用程序的现代方式。
