- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Creating Your First App
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建你的第一个应用
- en: This chapter is an introduction to Android, where you will set up your environment
    and focus on the fundamentals of Android development. By the end of this chapter,
    you will have gained the knowledge required to create an Android app from scratch
    and install it on a virtual or physical Android device.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是 Android 的入门介绍，你将设置你的环境并专注于 Android 开发的基础知识。到本章结束时，你将获得从头创建 Android 应用并将其安装在虚拟或物理
    Android 设备上所需的知识。
- en: You will be able to analyze and understand the importance of the `AndroidManifest.xml`
    file and use the Gradle build tool to configure your app and implement **user
    interface** (**UI**) elements from Material Design.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你将能够分析和理解 `AndroidManifest.xml` 文件的重要性，并使用 Gradle 构建工具配置你的应用并实现来自 Material Design
    的 **用户界面**（**UI**）元素。
- en: Android is the most widely used mobile phone operating system in the world,
    with over three billion active devices. This presents great opportunities to contribute
    and make an impact by learning Android and building apps that have a global reach.
    However, for a developer who is new to Android, there are many issues you must
    contend with in order to get started learning and becoming productive.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Android 是全球使用最广泛的移动电话操作系统，拥有超过三十亿活跃设备。通过学习 Android 并构建具有全球影响力的应用，这提供了巨大的贡献和影响力的机会。然而，对于初学
    Android 的开发者来说，有许多问题你必须面对，以便开始学习和提高生产力。
- en: This book will address these issues. After learning the tooling and development
    environment, you will explore fundamental practices to build Android apps. We
    will cover a wide range of real-world development challenges faced by developers
    and explore various techniques to overcome them.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将解决这些问题。在学习工具和开发环境之后，你将探索构建 Android 应用所需的基本实践。我们将涵盖开发者面临的广泛实际开发挑战，并探讨克服这些挑战的各种技术。
- en: In this chapter, you will learn how to create a basic Android project and add
    features to it. You will be introduced to the comprehensive development environment
    of Android Studio and learn about the core areas of the software to enable you
    to work productively.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何创建一个基本的 Android 项目并向其中添加功能。你将介绍 Android Studio 的综合开发环境，并了解软件的核心区域，以便你能够高效地工作。
- en: Android Studio provides all the tooling for application development but not
    the knowledge. This first chapter will guide you through using the software effectively
    to build an app and configure the most common areas of an Android project.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio 提供了应用开发的全部工具，但并不提供知识。本章将指导你有效地使用该软件来构建应用并配置 Android 项目的最常见区域。
- en: 'We will cover the following topics in the chapter:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Creating an Android project with Android Studio
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Android Studio 创建 Android 项目
- en: Setting up a virtual device and running your app
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置虚拟设备并运行你的应用
- en: The Android Manifest
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AndroidManifest 文件
- en: Using Gradle to build, configure, and manage app dependencies
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Gradle 构建、配置和管理应用依赖项
- en: Android application structure
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android 应用结构
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The complete code for all the exercises and the activity in this chapter is
    available on GitHub at [https://packt.link/96l1D](https://packt.link/96l1D)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章所有练习和活动的完整代码可在 GitHub 上找到，链接为 [https://packt.link/96l1D](https://packt.link/96l1D)
- en: Creating an Android project with Android Studio
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Android Studio 创建 Android 项目
- en: In order to be productive in terms of building Android apps, it is essential
    to become confident with how to use **Android Studio**. This is the official **integrated
    development environment** (**IDE**) for Android development, built on JetBrains’
    **IntelliJ IDEA IDE** and developed by the Android Studio team at Google. You
    will use it throughout this course to create apps and progressively add more advanced
    features.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在构建 Android 应用方面提高生产力，掌握如何使用 **Android Studio** 是至关重要的。这是 Android 开发的官方 **集成开发环境**（**IDE**），基于
    JetBrains 的 **IntelliJ IDEA IDE** 构建，并由谷歌的 Android Studio 团队开发。你将在整个课程中使用它来创建应用并逐步添加更多高级功能。
- en: The development of Android Studio has followed the development of the IntelliJ
    IDEA IDE. The fundamental features of an IDE are, of course, present, enabling
    you to optimize your code with suggestions, shortcuts, and standard refactoring.
    The programming language you will use throughout this course to create Android
    apps is Kotlin. Previously the standard language to create Android apps was Java.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio 的发展遵循 IntelliJ IDEA IDE 的发展。IDE 的基本功能当然存在，使你能够通过建议、快捷键和标准重构来优化你的代码。你将在整个课程中使用
    Kotlin 编程语言来创建 Android 应用。之前创建 Android 应用的标准语言是 Java。
- en: Since Google I/O 2017 (the annual Google developer conference), this has been
    Google’s preferred language for Android app development. What really sets Android
    Studio apart from other Android development environments is that **Kotlin** was
    created by JetBrains, the company that created IntelliJ IDEA, the software Android
    Studio is built on. Therefore, you can benefit from established and evolving first-class
    support for Kotlin.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 自从 2017 年 Google I/O（年度 Google 开发者大会）以来，这已经成为 Google 用于 Android 应用开发的优先语言。真正使
    Android Studio 与其他 Android 开发环境区分开来的是，**Kotlin** 是由 IntelliJ IDEA（Android Studio
    所基于的软件）的创建者 JetBrains 创建的。因此，你可以从 Kotlin 的稳定和不断发展的第一级支持中受益。
- en: Kotlin was created to address some of the shortcomings of Java in terms of verbosity,
    handling null types, and adding more functional programming techniques, amongst
    many other issues. As Kotlin has been the preferred language for Android development
    since 2017, taking over from Java, you will use it in this book.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin 是为了解决 Java 在冗长性、处理空类型以及添加更多函数式编程技术等方面的不足而创建的。自从 2017 年 Kotlin 成为 Android
    开发的首选语言，取代了 Java，你将在本书中使用它。
- en: Getting to grips and familiarizing yourself with Android Studio will enable
    you to feel confident working on and building Android apps. So, let’s get started
    creating your first project.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 熟悉并熟悉 Android Studio 将使你在开发和构建 Android 应用时感到自信。那么，让我们开始创建你的第一个项目。
- en: Note
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The installation and setup of Android Studio are covered in the *Preface*. Please
    ensure you have completed those steps before you continue.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio 的安装和设置在 *前言* 中有介绍。请确保你在继续之前已经完成了这些步骤。
- en: Exercise 1.01 – creating an Android Studio project for your app
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1.01 – 为你的应用创建 Android Studio 项目
- en: This is the starting point for creating a project structure your app will be
    built upon. The template-driven approach will enable you to create a basic project
    in a short timeframe while setting up the building blocks you can use to develop
    your app.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是创建你应用将构建其上的项目结构起点。模板驱动的方法将使你能够在短时间内创建一个基本项目，同时设置你可以用来开发应用的构建块。
- en: 'To complete this exercise, perform the following steps:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个练习，请执行以下步骤：
- en: Upon opening Android Studio, you will see a window asking whether you want to
    create a new project or open an existing one. Select **Create** **New Project**.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Android Studio 后，你将看到一个窗口询问你是否想要创建一个新项目或打开一个现有项目。选择 **Create** **New Project**。
- en: 'Now, you’ll enter a simple wizard-driven flow, which greatly simplifies the
    creation of your first Android project. The next screen you will see has a large
    number of options for the initial setup you’d like your app to have:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你将进入一个简单的向导驱动流程，这极大地简化了创建你的第一个 Android 项目。你将看到的下一个屏幕将为你想要应用拥有的初始设置提供大量选项：
- en: '![Figure 1.1 – Starting a project template for your app](img/B19411_01_01.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – 为你的应用启动项目模板](img/B19411_01_01.jpg)'
- en: Figure 1.1 – Starting a project template for your app
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – 为你的应用启动项目模板
- en: Welcome to your first introduction to the Android development ecosystem. The
    word displayed in most of the project types is *Activity*. In Android, an Activity
    is a page or screen. The options you can choose from all create this initial screen
    differently.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 欢迎来到你对 Android 开发生态系统的第一次介绍。在大多数项目类型中显示的词是 *Activity*。在 Android 中，一个 Activity
    是一个页面或屏幕。你可以选择的选项都会以不同的方式创建这个初始屏幕。
- en: The descriptions describe how the first screen of the app will look. These are
    templates to build your app with. Select **Empty Activity** from the template
    and click on **Next**.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 描述说明了应用的第一屏将如何显示。这些是构建你应用的模板。从模板中选择 **Empty Activity** 并点击 **Next**。
- en: 'The project configuration screen is as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 项目配置屏幕如下：
- en: '![Figure 1.2 – Project configuration](img/B19411_01_02.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.2 – 项目配置](img/B19411_01_02.jpg)'
- en: Figure 1.2 – Project configuration
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – 项目配置
- en: 'The preceding screen configures your app. Let’s go through all the options:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上一屏幕配置了你的应用。让我们逐一查看所有选项：
- en: '`com.sample.shop.myshop`). As shown in *Figure 1.2*, the `Users/MyUser/android/projects`).
    The default location will vary with the operating system you are using. By default,
    the project will be saved into a new folder with the name of the application with
    spaces removed. This results in a `MyApplication` project folder being created.
    Please change this to the `Exercise` or `Activity` that you are working on, so
    for this project, name the folder `Exercise1.01`.'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: (`com.sample.shop.myshop`)。如*图1.2*所示，项目默认保存位置为`Users/MyUser/android/projects`。默认位置会根据你使用的操作系统而有所不同。默认情况下，项目将被保存在一个新文件夹中，该文件夹的名称为应用名称，空格将被删除。这会导致创建一个名为`MyApplication`的项目文件夹。请将其更改为你正在工作的`Exercise`或`Activity`，因此对于这个项目，文件夹名称应为`Exercise1.01`。
- en: '**Language**: **Kotlin** is Google’s preferred language for Android app development.'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语言**: **Kotlin**是Google为Android应用开发首选的语言。'
- en: '**Minimum SDK**: Depending on which version of Android Studio you download,
    the default might be the same as shown in *Figure 1.2* or a different version.
    Keep this the same. Most of Android’s new features are made backward compatible,
    so your app will run fine on the vast majority of older devices. However, if you
    do want to target newer devices, you should consider raising the minimum API level.
    There is a **Help Me Choose** link to a dialog that explains the feature set that
    you have access to with a view to development on different versions of Android
    and the current percentage of devices worldwide running each Android version.'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最小SDK版本**: 根据你下载的Android Studio版本不同，默认值可能与*图1.2*中显示的相同，也可能不同。请保持这一设置不变。大多数Android的新特性都实现了向后兼容，因此你的应用可以在绝大多数旧设备上正常运行。然而，如果你希望针对新设备进行开发，你应该考虑提高最小API级别。有一个**帮助我选择**的链接，它会弹出一个对话框，解释了你可以在不同版本的Android上开发时使用的功能集，以及全球运行每个Android版本的设备百分比。'
- en: '**Use legacy android.support libraries**: Leave this unchecked. You will be
    using AndroidX libraries, which are the replacement for the support libraries
    that were designed to make features on newer versions of Android backward compatible
    with older versions, but it provides much more than this. It also contains new
    Android components called **Jetpack**, which, as the name suggests, *boosts* your
    Android development and provide a host of rich features you will want to use in
    your app, thereby simplifying common operations.'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用遗留的android.support库**: 请不要勾选此项。你将使用AndroidX库，它是为使Android新版本的功能向后兼容旧版本而设计的支持库的替代品，但它提供了更多功能。它还包含名为**Jetpack**的新Android组件，正如其名所示，它可以*提升*你的Android开发，并提供一系列丰富的功能，你可以在应用中使用这些功能，从而简化常见操作。'
- en: 'Once you have filled in all these details, select `MainActivity`) in one tab
    and the layout used for the screen in the other tab (`activity_main.xml`). The
    application structure folders are in the left panel:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在填写完所有这些详细信息后，在一个标签页中选择`MainActivity`，在另一个标签页中选择用于屏幕的布局（`activity_main.xml`）。应用程序结构文件夹位于左侧面板中：
- en: '![Figure 1.3 – Android Studio default project](img/B19411_01_03.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图1.3 – Android Studio默认项目](img/B19411_01_03.jpg)'
- en: Figure 1.3 – Android Studio default project
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3 – Android Studio默认项目
- en: In this exercise, you have gone through the steps to create your first Android
    app using Android Studio. This template-driven approach has shown you the core
    options you need to configure for your app.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你已经完成了使用Android Studio创建你的第一个Android应用的步骤。这种基于模板的方法向你展示了你需要为应用配置的核心选项。
- en: In the next section, you will set up a virtual device and see your app run for
    the first time.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将设置一个虚拟设备，并看到你的应用首次运行。
- en: Setting up a virtual device and running your app
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置虚拟设备并运行你的应用
- en: As a part of installing Android Studio, you downloaded and installed the latest
    Android **software development kit** (**SDK**) components. These included a base
    emulator, which you will configure to create a virtual device to run Android apps
    on. An emulator mimics the hardware and software features and configuration of
    a real device. The benefit is that you can make changes and quickly see them on
    your desktop while developing your app. Although virtual devices do not have all
    the features of a real device, the feedback cycle is often quicker than going
    through the steps of connecting a real device.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 作为安装 Android Studio 的一部分，您下载并安装了最新的 Android **软件开发工具包** (**SDK**) 组件。这些包括一个基本模拟器，您将配置它以创建一个虚拟设备来运行
    Android 应用。模拟器模仿真实设备的硬件和软件特性和配置。好处是您可以在开发应用的同时在您的桌面上快速看到所做的更改。尽管虚拟设备没有真实设备的所有功能，但反馈周期通常比通过连接真实设备的步骤要快。
- en: Also, although you should ensure your app runs as expected on different devices,
    you can standardize it by targeting a specific device by downloading a device
    profile, even if you don’t have a real device if this is a requirement of your
    project.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，尽管您应该确保您的应用在不同设备上按预期运行，但您可以通过下载设备配置文件来标准化它，即使您没有真实设备，如果这是您项目的要求。
- en: 'The screen you will have seen (or something similar) when installing Android
    Studio is as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您在安装 Android Studio 时将看到的（或类似的东西）如下所示：
- en: '![Figure 1.4 – SDK components](img/B19411_01_04.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4 – SDK 组件](img/B19411_01_04.jpg)'
- en: Figure 1.4 – SDK components
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – SDK 组件
- en: 'Let’s take a look at the SDK components that are installed and how the virtual
    device fits in:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看已安装的 SDK 组件以及虚拟设备是如何适应的：
- en: '**Android Emulator**: This is the base emulator, which we will configure to
    create virtual devices of different Android makes and models.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Android 模拟器**：这是基本模拟器，我们将配置它以创建不同 Android 品牌和型号的虚拟设备。'
- en: '**Android SDK Build-Tools**: Android Studio uses the build tools to build your
    app. This process involves compiling, linking, and packaging your app to prepare
    it for installation on a device.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Android SDK 构建工具**：Android Studio 使用构建工具来构建您的应用。这个过程涉及编译、链接和打包您的应用，以便将其安装到设备上。'
- en: '**Android SDK Platform**: This is the version of the Android platform that
    you will use to develop your app. The platform refers to the API level.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Android SDK 平台**：这是您将用于开发应用的 Android 平台版本。平台指的是 API 级别。'
- en: '**Android SDK Platform-Tools**: These are tools you can use, ordinarily, from
    the command line, to interact with and debug your app.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Android SDK 平台工具**：这些是您可以从命令行使用的工具，用于与您的应用交互和调试。'
- en: '**Android SDK Tools**: In contrast to the platform tools, these are tools that
    you use predominantly from within Android Studio in order to accomplish certain
    tasks, such as the virtual device for running apps and the SDK manager to download
    and install platforms and other components of the SDK.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Android SDK 工具**：与平台工具相比，这些是您主要在 Android Studio 内部使用的工具，用于完成某些任务，例如运行应用的虚拟设备以及
    SDK 管理器用于下载和安装平台和其他 SDK 组件。'
- en: '**Intel x86 Emulator Accelerator (HAXM installer)**: If your OS provides it,
    this is a feature at the hardware level of your computer you will be prompted
    to enable, which allows your emulator to run more quickly.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Intel x86 模拟器加速器（HAXM 安装程序）**：如果您的操作系统提供它，这将是在您的计算机硬件级别的一个功能，您将被提示启用，这允许您的模拟器运行得更快。'
- en: '**SDK Patch Applier v4**: As newer versions of Android Studio become available,
    this enables patches to be applied to update the version you are running.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SDK 补丁应用器 v4**：随着 Android Studio 新版本的可用，这允许应用补丁以更新您正在运行的版本。'
- en: With this knowledge, let’s start with the next exercise of this chapter.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 带着这些知识，让我们开始本章的下一个练习。
- en: Exercise 1.02 – setting up a virtual device and running your app on it
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1.02 – 设置虚拟设备并在其上运行您的应用
- en: We set up an Android Studio project to create our app in *Exercise 1.01*, *Creating
    an Android Studio project for your app*, and we are now going to run it on a virtual
    device. You can also run your app on a real device, but you will use a virtual
    device in this exercise. This process is a continuous cycle while working on your
    app. Once you have implemented a feature, you can verify its look and behavior
    as you require.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 *练习 1.01* 中设置了一个 Android Studio 项目来创建我们的应用，即 *为您的应用创建 Android Studio 项目*，现在我们将要在虚拟设备上运行它。您也可以在真实设备上运行您的应用，但在这个练习中您将使用虚拟设备。这个过程是您在应用上工作的持续循环。一旦您实现了某个功能，您就可以根据需要验证其外观和行为。
- en: 'For this exercise, you will create a single virtual device, but you should
    ensure you run your app on multiple devices to verify that its look and behavior
    are consistent. Perform the following steps:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个练习，您将创建一个虚拟设备，但您应该确保在多个设备上运行您的应用以验证其外观和行为的一致性。执行以下步骤：
- en: 'In the toolbar in Android Studio, you will see two drop-down boxes next to
    each other with **app** and **No** **devices** pre-selected:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Android Studio 的工具栏中，您将看到两个相邻的下拉框，其中**app**和**无****设备**被预先选中：
- en: '![Figure 1.5 – The Android Studio toolbar](img/B19411_01_05.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5 – Android Studio 工具栏](img/B19411_01_05.jpg)'
- en: Figure 1.5 – The Android Studio toolbar
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – Android Studio 工具栏
- en: '**app** is the configuration of the app that we will run. As we haven’t set
    up a virtual device yet, it says **No devices**.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**app**是我们将要运行的应用的配置。由于我们尚未设置虚拟设备，它显示为**无设备**。'
- en: 'In order to create a virtual device, click on **Device Manager**, as shown
    in *Figure 1**.5*, to open the virtual devices window/screen. The option to do
    this can also be accessed from the **Tools** menu:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了创建虚拟设备，请点击如图 *图 1.5* 所示的**设备管理器**，以打开虚拟设备窗口/屏幕。此选项也可以从**工具**菜单访问：
- en: '![Figure 1.6 – Device Manager in the Tools menu](img/B19411_01_06.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.6 – 工具菜单中的设备管理器](img/B19411_01_06.jpg)'
- en: Figure 1.6 – Device Manager in the Tools menu
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6 – 工具菜单中的设备管理器
- en: 'Click the button or toolbar option to open the **Device Manager** window and
    click the **Create device** button, as shown in *Figure 1**.7*:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击按钮或工具栏选项以打开**设备管理器**窗口，并点击如图 *图 1.7* 所示的**创建设备**按钮：
- en: '![Figure 1.7 – The Device Manager window](img/B19411_01_07.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.7 – 设备管理器窗口](img/B19411_01_07.jpg)'
- en: Figure 1.7 – The Device Manager window
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.7 – 设备管理器窗口
- en: 'You will then be presented with a screen, as shown in *Figure 1**.8*:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 随后，您将看到一个屏幕，如图 *图 1.8* 所示：
- en: '![Figure 1.8 – Device definition creation](img/B19411_01_08.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.8 – 设备定义创建](img/B19411_01_08.jpg)'
- en: Figure 1.8 – Device definition creation
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.8 – 设备定义创建
- en: 'We are going to choose the **Pixel 6** device. The real (non-virtual device)
    Pixel range of devices is developed by Google and has access to the most up-to-date
    versions of the Android platform. Once selected, click the **Next** button:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将选择**Pixel 6**设备。实际的（非虚拟）Pixel 设备系列由 Google 开发，并可以访问 Android 平台的最新版本。一旦选择，点击**下一步**按钮：
- en: '![Figure 1.9 – System Image](img/B19411_01_09.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.9 – 系统映像](img/B19411_01_09.jpg)'
- en: Figure 1.9 – System Image
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.9 – 系统映像
- en: The **Tirimasu** name displayed here is the initial code/release name for Android
    13\. Select the latest system image available. The **Target** column might also
    show **(Google Play)** or **(Google APIs)** in the name. Google APIs mean that
    the system image comes pre-installed with Google Play Services.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示的**Tirimasu**名称是 Android 13 的初始代码/发布名称。选择可用的最新系统映像。**目标**列也可能在名称中显示**（Google
    Play）**或**（Google APIs）**。Google APIs 表示系统映像预装了 Google Play 服务。
- en: This is a rich feature set of Google APIs and Google apps that your app can
    use and interact with. On first running the app, you will see apps such as Maps
    and Chrome instead of a plain emulator image. A Google Play system image means
    that, in addition to the Google APIs, the Google Play app will also be installed.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Google APIs 和 Google 应用程序丰富的功能集，您的应用可以使用并与之交互。在首次运行应用时，您将看到地图和 Chrome 等应用，而不是一个普通的模拟器映像。Google
    Play 系统映像表示，除了 Google APIs 之外，Google Play 应用也将被安装。
- en: 'You should develop your app with the latest version of the Android platform
    to benefit from the latest features. On first creating a virtual device, you will
    have to download the system image. If a **Download** link is displayed next to
    **Release Name**, click on it, and wait for the download to complete. Select the
    **Next** button to see the virtual device you have set up:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该使用 Android 平台的最新版本开发您的应用，以利用最新功能。在首次创建虚拟设备时，您将需要下载系统映像。如果**发布名称**旁边显示**下载**链接，请点击它，并等待下载完成。选择**下一步**按钮以查看您设置的虚拟设备：
- en: '![Figure 1.10 – Virtual device configuration](img/B19411_01_10.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.10 – 虚拟设备配置](img/B19411_01_10.jpg)'
- en: Figure 1.10 – Virtual device configuration
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.10 – 虚拟设备配置
- en: 'Click **Finish**, and your virtual device will be created. You will then see
    your device highlighted:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**完成**，您的虚拟设备将被创建。然后您将看到您的设备被突出显示：
- en: '![Figure 1.11 – Virtual devices listed](img/B19411_01_11.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.11 – 列出的虚拟设备](img/B19411_01_11.jpg)'
- en: Figure 1.11 – Virtual devices listed
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.11 – 列出的虚拟设备
- en: 'Press the play arrow button under the **Actions** column to run the virtual
    device:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **操作** 列下按下播放箭头按钮以运行虚拟设备：
- en: '![Figure 1.12 – Virtual device launched](img/B19411_01_12.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.12 – 启动的虚拟设备](img/B19411_01_12.jpg)'
- en: Figure 1.12 – Virtual device launched
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.12 – 启动的虚拟设备
- en: You will then see the virtual device running within Android Studio in the **Emulator**
    tool window. Now that you’ve created the virtual device and it’s running, you
    can go back into Android Studio to run your app.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到虚拟设备在 Android Studio 的 **模拟器** 工具窗口中运行。现在，你已经创建了虚拟设备并且它正在运行，你可以回到 Android
    Studio 中运行你的 app。
- en: 'The virtual device you have set up and started will be selected. Press the
    green triangle/play button to launch your app:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你已设置并启动的虚拟设备将被选中。按下绿色三角形/播放按钮以启动你的 app：
- en: '![Figure 1.13 – App launch configuration](img/B19411_01_13.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.13 – App 启动配置](img/B19411_01_13.jpg)'
- en: Figure 1.13 – App launch configuration
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.13 – App 启动配置
- en: This will load the app into the emulator as shown in *Figure 1**.14*.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把 app 加载到模拟器中，如图 *图 1.14* 所示。
- en: '![Figure 1.14 – The app running on a virtual device](img/B19411_01_14.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.14 – 在虚拟设备上运行的 app](img/B19411_01_14.jpg)'
- en: Figure 1.14 – The app running on a virtual device
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.14 – 在虚拟设备上运行的 app
- en: In this exercise, you have gone through the steps to create a virtual device
    and run the app you created on it. The Android Virtual Device Manager, which you
    have used to do this, enables you to create the device (or range of devices) you
    would like to target your app for. Running your app on the virtual device allows
    a quick feedback cycle to verify how a new feature development behaves and that
    it displays the way you expect it to.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你已经完成了创建虚拟设备并在其上运行你创建的 app 的步骤。你使用的 Android 虚拟设备管理器，允许你创建你想要为目标 app 定制的设备（或设备范围）。在虚拟设备上运行你的
    app 可以让你快速地得到反馈，验证新功能开发的行为以及它是否以你期望的方式显示。
- en: Next, you will explore the `AndroidManifest.xml` file of your project, which
    contains the information and configuration of your app.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将探索你的项目中的 `AndroidManifest.xml` 文件，它包含了你的 app 的信息和配置。
- en: The Android manifest
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android manifest
- en: 'The app you have just created, although simple, encompasses the core building
    blocks that you will use in all of the projects you create. The app is driven
    from the `AndroidManifest.xml` file, a manifest file that details the contents
    of your app. It is located at `app` | `manifests` | `AndroidManifest.xml`:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚创建的 app，虽然简单，但包含了你将在所有项目中使用的核心构建块。app 由 `AndroidManifest.xml` 文件驱动，这是一个详细说明
    app 内容的 manifest 文件。它位于 `app` | `manifests` | `AndroidManifest.xml`：
- en: '[PRE0]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A typical manifest file, in general terms, is a top-level file that describes
    the enclosed files or other data and associated metadata that forms a group or
    unit. The Android manifest applies this concept to your Android app as an XML
    file.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 从一般意义上讲，一个典型的 manifest 文件是一个顶级文件，它描述了包含的文件或其他数据以及相关的元数据，形成一个组或单元。Android manifest
    将这个概念应用到你的 Android app 上，作为一个 XML 文件。
- en: 'Every Android app has an application class that allows you to configure the
    app. After the `<application>` element opens, you define your app’s components.
    As we have just created our app, it only contains the first screen shown in the
    following code:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 Android app 都有一个应用程序类，允许你配置 app。在 `<application>` 元素打开后，你定义你的 app 的组件。由于我们刚刚创建了
    app，它只包含以下代码中显示的第一个屏幕：
- en: '[PRE1]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The next child XML node specified is as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个指定的子 XML 节点如下：
- en: '[PRE2]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Android uses intents as a mechanism for interacting with apps and system components.
    Intents get sent, and the intent filter registers your app’s capability to react
    to these intents. `<android.intent.action.MAIN>` is the main entry point into
    your app, which, as it appears in the enclosing XML of `.MainActivity`, specifies
    that this screen will be started when the app is launched. `Android.intent.category.LAUNCHER`
    states that your app will appear in the launcher of your user’s device.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Android 使用意图作为与 apps 和系统组件交互的机制。意图被发送，意图过滤器注册了你的 app 对这些意图的反应能力。`<android.intent.action.MAIN>`
    是你的 app 的主入口点，它在 `.MainActivity` 的封装 XML 中出现，指定当 app 启动时将启动此屏幕。`Android.intent.category.LAUNCHER`
    表示你的 app 将出现在用户的设备启动器中。
- en: As you have created your app from a template, it has a basic manifest that will
    launch the app and display an initial screen at startup through an `Activity`
    component. Depending on which other features you want to add to your app, you
    may need to add permissions in the Android manifest file.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您是从模板创建的应用程序，因此它有一个基本的清单，该清单将通过`Activity`组件启动应用程序并在启动时显示初始屏幕。根据您想添加到应用程序中的其他功能，您可能需要在Android清单文件中添加权限。
- en: 'Permissions are grouped into three different categories: normal, signature,
    and dangerous:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 权限分为三个不同的类别：正常、签名和危险：
- en: '**Normal**: These permissions include accessing the network state, Wi-Fi, the
    internet, and Bluetooth. These are usually permitted without asking for the user’s
    consent at runtime.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**正常**：这些权限包括访问网络状态、Wi-Fi、互联网和蓝牙。这些通常在运行时无需请求用户同意即可允许。'
- en: '**Signature**: These permissions are shared by the same group of apps that
    must be signed with the same certificate. This means these apps can share data
    freely, but other apps can’t get access.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**签名**：这些权限由必须使用相同证书签名的同一组应用程序共享。这意味着这些应用程序可以自由共享数据，但其他应用程序无法访问。'
- en: '**Dangerous**: These permissions are centered around the user and their privacy,
    such as sending SMS, access to accounts and location, and reading and writing
    to the filesystem and contacts.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**危险**：这些权限围绕用户及其隐私，例如发送短信、访问账户和位置，以及读写文件系统和联系人。'
- en: These permissions have to be listed in the manifest, and in the case of dangerous
    permissions, from Android Marshmallow API 23 (Android 6 Marshmallow) onward, you
    must also ask the user to grant the permissions at runtime.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这些权限必须在清单中列出，并且在危险权限的情况下，从Android Marshmallow API 23（Android 6 Marshmallow）开始，您还必须请求用户在运行时授予这些权限。
- en: In the next exercise, we will configure the Android Manifest. Detailed documentation
    on this file can be found at [https://developer.android.com/guide/topics/manifest/manifest-intro](https://developer.android.com/guide/topics/manifest/manifest-intro).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个练习中，我们将配置Android清单。有关此文件的详细文档，请参阅[https://developer.android.com/guide/topics/manifest/manifest-intro](https://developer.android.com/guide/topics/manifest/manifest-intro)。
- en: Exercise 1.03 – configuring the Android manifest internet permission
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1.03 – 配置Android清单互联网权限
- en: 'The key permission that most apps require is access to the internet. This is
    not added by default. In this exercise, we will fix that and, in the process,
    load a `WebView`, which enables the app to show web pages. This use case is very
    common in Android app development as most commercial apps will display a privacy
    policy, terms and conditions, and so on. As these documents are likely common
    to all platforms, the usual way to display them is to load a web page. To do this,
    perform the following steps:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数应用程序所需的关键权限是访问互联网。这默认情况下并未添加。在这个练习中，我们将修复这个问题，并在过程中加载一个`WebView`，这使应用程序能够显示网页。这种情况在Android应用程序开发中非常常见，因为大多数商业应用程序都会显示隐私政策、条款和条件等。由于这些文档可能对所有平台都适用，通常的显示方式是加载一个网页。为此，请执行以下步骤：
- en: Create a new Android Studio project as you did in *Exercise 1.01*, *Creating
    an Android Studio project for* *your app*.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的Android Studio项目，就像在*练习 1.01*中为*您的应用程序*创建Android Studio项目一样。
- en: Switch tabs to the `MainActivity` class. From the main project window, it’s
    located at `app` | `java` | `com` | `example` | `myapplication`.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到`MainActivity`类所在的标签页。从主项目窗口，它位于`app` | `java` | `com` | `example` | `myapplication`。
- en: 'You can change what the project window displays by opening up the **Tool**
    window by selecting **View** | **Tool Windows** | **Project** – this will select
    **Project** view. The drop-down options on the top of the **Project** window allow
    you to change the way you view your project, with the most commonly used displays
    being **Project** and **Android**:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过选择**视图** | **工具窗口** | **项目**来打开**工具**窗口，从而更改项目窗口显示的内容。这将选择**项目**视图。**项目**窗口顶部的下拉选项允许您更改查看项目的方式，最常用的显示方式是**项目**和**Android**：
- en: '![Figure 1.15 – The Tool Windows drop-down menu](img/B19411_01_15.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.15 – 工具窗口下拉菜单](img/B19411_01_15.jpg)'
- en: Figure 1.15 – The Tool Windows drop-down menu
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.15 – 工具窗口下拉菜单
- en: 'On opening the `MainActivity` class, you’ll see that it has the following content
    or similar:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在打开`MainActivity`类时，您会看到以下内容或类似内容：
- en: '[PRE3]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You’ll examine the contents of this file in more detail in the next section
    of this chapter, but for now, you just need to be aware that the `setContentView(R.layout.activity_main)`
    statement sets the layout of the UI you saw when you first ran the app in the
    virtual device.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在本章下一节中更详细地检查这个文件的内容，但到目前为止，你只需要知道 `setContentView(R.layout.activity_main)`
    语句设置了你在虚拟设备中首次运行应用时看到的 UI 布局。
- en: 'Use the following code to change this to the following:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码将其更改为以下内容：
- en: '[PRE4]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: So, you are replacing the layout file with `WebView`. The `val` keyword is a
    read-only property reference, which can’t be changed once it has been set. JavaScript
    needs to be enabled in `WebView` to execute JavaScript.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你正在用 `WebView` 替换布局文件。`val` 关键字是一个只读属性引用，一旦设置后就不能更改。JavaScript 需要在 `WebView`
    中启用才能执行 JavaScript。
- en: Note
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'We are not setting the type, but Kotlin has type inference, so it will infer
    the type if possible. So, specifying the type explicitly with `val webView: WebView
    = WebView(this)` is not necessary. Depending on which programming languages you
    have used in the past, the order of defining the parameter name and type may or
    may not be familiar. Kotlin follows Pascal notation, that is, name followed by
    type.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '我们没有设置类型，但 Kotlin 有类型推断，所以如果可能的话，它会推断类型。因此，使用 `val webView: WebView = WebView(this)`
    明确指定类型是不必要的。根据你过去使用的编程语言，定义参数名和类型的顺序可能或可能不熟悉。Kotlin 遵循 Pascal 语法，即名称后跟类型。'
- en: 'Now, run the app up, and the text will appear as shown in the screenshot here:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，运行应用，文本将如截图所示出现：
- en: '![Figure 1.16 – No internet permission error message](img/B19411_01_16.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.16 – 没有互联网权限错误信息](img/B19411_01_16.jpg)'
- en: Figure 1.16 – No internet permission error message
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.16 – 没有互联网权限错误信息
- en: This error occurs because there is no `INTERNET` permission added to your `AndroidManifest.xml`
    file. (If you get the `net::ERR_CLEARTEXT_NOT_PERMITTED` error, this is because
    the URL you are loading into `WebView` is not HTTPS, and non-HTTPS traffic is
    disabled from API level 28, Android 9.0 Pie and above).
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个错误发生是因为你的 `AndroidManifest.xml` 文件中没有添加 `INTERNET` 权限。（如果你收到 `net::ERR_CLEARTEXT_NOT_PERMITTED`
    错误，这是因为你正在加载到 `WebView` 中的 URL 不是 HTTPS，并且从 API 级别 28 开始，非 HTTPS 流量被禁用，Android
    9.0 Pie 及以上版本）。
- en: 'Let’s fix that by adding the `INTERNET` permission to the manifest. Open up
    the Android manifest and add the following above the `<``application>` tag:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过向清单中添加 `INTERNET` 权限来修复这个问题。打开 Android 清单文件，并在 `<application>` 标签上方添加以下内容：
- en: '[PRE5]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can find the full Android manifest file with the permission added here:
    [https://packt.link/smzpl](https://packt.link/smzpl)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到添加了权限的完整 Android 清单文件：[https://packt.link/smzpl](https://packt.link/smzpl)
- en: Uninstall the app from the virtual device before running up the app again. You
    need to do this, as app permissions can sometimes get cached.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在再次运行应用之前，从虚拟设备中卸载应用。你需要这样做，因为应用权限有时可能会被缓存。
- en: Do this by long-pressing on the app icon and selecting the **App Info** option
    that appears and then pressing the Bin icon with the **Uninstall** text below
    it. Alternatively, long press the app icon and then drag it to the Bin icon with
    the **Uninstall** text beside it in the top-right corner of the screen.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 通过长按应用图标并选择出现的 **App Info** 选项，然后按下带有 **Uninstall** 文字的 Bin 图标来完成此操作。或者，长按应用图标，然后将其拖动到屏幕右上角的
    **Uninstall** 文字旁边的 Bin 图标。
- en: 'Install the app again and see the web page appear in `WebView`:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次安装应用，并查看网页出现在 `WebView` 中：
- en: '![Figure 1.17 – App displaying WebView](img/B19411_01_17.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.17 – 显示 WebView 的应用](img/B19411_01_17.jpg)'
- en: Figure 1.17 – App displaying WebView
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.17 – 显示 WebView 的应用
- en: In this example, you learned how to add a permission to the manifest. The Android
    Manifest can be thought of as a table of contents of your app. It lists all the
    components and permissions your app uses. As you have seen from starting the app
    from the launcher, it also provides the entry points into your app.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，你学习了如何向清单文件中添加权限。Android 清单可以被视为你的应用的目录。它列出了你的应用使用的所有组件和权限。正如你从从启动器启动应用中看到的，它还提供了进入你应用的入口点。
- en: In the next section, you will explore the Android build system, which uses the
    Gradle build tool to get your app up and running.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将探索 Android 构建系统，它使用 Gradle 构建工具来让你的应用运行起来。
- en: Using Gradle to build, configure, and manage app dependencies
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Gradle 构建、配置和管理应用依赖项
- en: In the course of creating this project, you have principally used the Android
    platform SDK. The necessary Android libraries were downloaded when you installed
    Android Studio. However, these are not the only libraries that are used to create
    your app. To configure and build your Android project or app, a build tool called
    **Gradle** is used.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建此项目的过程中，你主要使用了 Android 平台 SDK。当你安装 Android Studio 时，下载了必要的 Android 库。然而，这些并不是创建你的应用所使用的唯一库。为了配置和构建你的
    Android 项目或应用，使用了一个名为 **Gradle** 的构建工具。
- en: Gradle is a multi-purpose build tool that Android Studio uses to build your
    app. By default, Android Studio uses Groovy, a dynamically typed **Java virtual
    machine** (**JVM**) language, to configure the build process and allows easy dependency
    management so you can add libraries to your project and specify the versions.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle 是 Android Studio 用于构建你的应用的多用途构建工具。默认情况下，Android Studio 使用 Groovy，一种动态类型的
    **Java 虚拟机** (**JVM**) 语言来配置构建过程，并允许轻松管理依赖项，因此你可以将库添加到你的项目中并指定版本。
- en: Android Studio can also be configured to use Kotlin to configure builds, but
    as the default language is Groovy, you will be using this. The files that this
    build and configuration information is stored in are named `build.gradle`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio 也可以配置为使用 Kotlin 配置构建，但由于默认语言是 Groovy，你将使用这个。存储这些构建和配置信息的文件被命名为
    `build.gradle`。
- en: When you first create your app, there are two `build.gradle` files, one at the
    root/top level of the project and one specific to your app in the app `module`
    folder.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 当你首次创建你的应用时，有两个 `build.gradle` 文件，一个位于项目的根/顶级目录，另一个位于应用的 `module` 文件夹中，专门针对你的应用。
- en: The project-level build.gradle file
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目级别的 `build.gradle` 文件
- en: 'Let’s now have a look at the project-level `build.gradle` file. This is where
    you set up all the root project settings, which can be applied to sub-modules/projects:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看项目级别的 `build.gradle` 文件。这是你设置所有根项目设置的地方，这些设置可以应用于子模块/项目：
- en: '[PRE6]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Gradle works on a plugin system, so you can write your own plugin that does
    a task or series of tasks and plug it into your build pipeline. The three plugins
    listed previously do the following:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle 依赖于插件系统，因此你可以编写自己的插件，执行任务或一系列任务，并将其插入到你的构建管道中。前面列出的三个插件执行以下操作：
- en: '`com.android.application`: This adds support to create an Android application'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`com.android.application`: 这添加了对创建 Android 应用的支持'
- en: '`com.android.library`: This enables sub-projects/modules to be Android libraries'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`com.android.library`: 这使得子项目/模块能够成为 Android 库'
- en: '`org.jetbrains.kotlin.android`: This provides integration and language support
    for Kotlin in the project'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.jetbrains.kotlin.android`: 这为项目中的 Kotlin 提供了集成和语言支持'
- en: The `apply false` statement enables these plugins only to sub-projects/modules,
    and not the project’s root level. The `version '7.3.1'` specifies the plugin version,
    which is applied to all sub-projects/modules.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`apply false` 语句仅使这些插件应用于子项目/模块，而不是项目的根级别。`version ''7.3.1''` 指定了插件版本，该版本应用于所有子项目/模块。'
- en: The app-level build.gradle file
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用级别的 `build.gradle` 文件
- en: 'The `build.gradle` app is specific to your project configuration:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`build.gradle` 应用特定于你的项目配置：'
- en: '[PRE7]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The plugins for Android and Kotlin, detailed in the root `build.gradle` file,
    are applied to your project here by ID in the `plugins` lines.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 根 `build.gradle` 文件中详细说明的 Android 和 Kotlin 插件，在这里通过 `plugins` 行的 ID 应用到你的项目中。
- en: 'The `android` block, provided by the `com.android.application` plugin, is where
    you configure your Android-specific configuration settings:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 由 `com.android.application` 插件提供的 `android` 块，是你配置 Android 特定配置设置的地方：
- en: '`namespace`: This is set from the package name you specified when creating
    the project. It will be used for generating build and resource identifiers.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`namespace`: 这是从创建项目时指定的包名设置的。它将用于生成构建和资源标识符。'
- en: '`compileSdk`: This is used to define the API level the app has been compiled
    with, and the app can use the features of this API and lower.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compileSdk`: 这用于定义应用编译时使用的 API 级别，应用可以使用此 API 及其以下级别的功能。'
- en: '`defaultConfig`: This is the base configuration of your app.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`defaultConfig`: 这是你的应用的基本配置。'
- en: '`applicationId`: This is set to your app’s package and is the app identifier
    that is used on Google Play to uniquely identify your app. It can be changed to
    be different from the package name if required.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`applicationId`: 这设置为你的应用的包名，是用于在 Google Play 上唯一标识你的应用的标识符。如果需要，它可以被更改以与包名不同。'
- en: '`minSdk`: This is the minimum API level your app supports. This will filter
    out your app from being displayed in Google Play for devices that are lower than
    this.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minSdk`：这是你的应用程序支持的最低 API 级别。这将过滤掉低于此 API 级别的设备，使你的应用程序不会在 Google Play 中显示。'
- en: '`targetSdk`: This is the API level you are targeting. This is the API level
    your built app is intended to work and has been tested with.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`targetSdk`：这是你针对的 API 级别。这是你的构建应用程序打算工作和已测试的 API 级别。'
- en: '`versionCode`: This specifies the version code of your app. Every time an update
    needs to be made to the app, the version code needs to be increased by one or
    more.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`versionCode`：这指定了你的应用程序的版本代码。每次需要更新应用程序时，版本代码都需要增加一个或多个。'
- en: '`versionName`: A user-friendly version name that usually follows semantic versioning
    of *X.Y.Z*, where *X* is the major version, *Y* is the minor version, and *Z*
    is the patch version, for example, *1.0.3*.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`versionName`：这是一个用户友好的版本名称，通常遵循 *X.Y.Z* 的语义版本控制，其中 *X* 是主版本，*Y* 是次要版本，*Z*
    是修补版本，例如，*1.0.3*。'
- en: '`testInstrumentationRunner`: This is the test runner to use for your UI tests.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`testInstrumentationRunner`：这是用于你的 UI 测试的测试运行器。'
- en: '`buildTypes`: Under `buildTypes`, a release is added that configures your app
    to create a `release` build. The `minifyEnabled` value, if set to `true`, will
    shrink your app size by removing any unused code, as well as obfuscating your
    app. This obfuscation step changes the name of the source code references to values
    such as `a.b.c()`. This makes your code less prone to reverse engineering and
    further reduces the size of the built app.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`buildTypes`：在 `buildTypes` 下，添加了一个配置你的应用程序以创建 `release` 构建的发布版本。如果将 `minifyEnabled`
    设置为 `true`，则将通过删除任何未使用的代码以及混淆你的应用程序来缩小应用程序的大小。这个混淆步骤将源代码引用的名称更改为如 `a.b.c()` 这样的值。这使得你的代码更不容易被逆向工程，并进一步减少了构建应用程序的大小。'
- en: '`compileOptions`: This is the language level of the Java source code (`sourceCompatibility`)
    and byte code (`targetCompatibility`).'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compileOptions`：这是 Java 源代码的语言级别（`sourceCompatibility`）和字节码（`targetCompatibility`）。'
- en: '`kotlinOptions`: This is the `jvm` library the `kotlin gradle` plugin should
    use.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kotlinOptions`：这是 `kotlin gradle` 插件应该使用的 `jvm` 库。'
- en: 'The `dependencies` block specifies the libraries your app uses on top of the
    Android platform SDK, as shown here (with added comments):'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`dependencies` 块指定了你的应用程序在 Android 平台 SDK 之上使用的库，如下所示（带有注释）：'
- en: '[PRE8]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The dependencies follow the Maven `groupId`, `artifactId`, and `versionId`
    separated by `:`. So, as an example, the compatible support library specified
    earlier is shown as:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖关系遵循 Maven 的 `groupId`、`artifactId` 和 `versionId`，它们之间用 `:` 分隔。因此，例如，之前指定的兼容支持库显示如下：
- en: '[PRE9]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `groupId` is `android.appcompat`, `artifactId` is `appcompat`, and `versionId`
    is `1.5.1`. The build system locates and downloads these dependencies to build
    the app from the `repositories` block detailed in the `settings.gradle` file explained
    in the following section.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`groupId` 是 `android.appcompat`，`artifactId` 是 `appcompat`，`versionId` 是 `1.5.1`。构建系统会定位并下载这些依赖关系，从
    `settings.gradle` 文件中详细说明的 `repositories` 块构建应用程序。'
- en: Note
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The dependency versions specified in the previous code section and in the following
    sections of this and other chapters are subject to change and are updated over
    time, so they are likely to be higher when you create these projects.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的代码部分以及本章节和其他章节的后续部分中指定的依赖版本可能会发生变化，并且会随着时间的推移而更新，因此当你创建这些项目时，它们可能更高。
- en: The `implementation` notation for adding these libraries means that their internal
    dependencies will not be exposed to your app, making compilation faster.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 添加这些库的 `implementation` 表示法意味着它们的内部依赖关系不会暴露给你的应用程序，这使得编译更快。
- en: Here, the `androidx` components are added as dependencies rather than in the
    Android platform source. This is so that they can be updated independently from
    Android versions. `androidx` contains the suite of Android Jetpack libraries and
    the repackaged support library.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`androidx` 组件被添加为依赖项，而不是在 Android 平台源中。这样，它们可以独立于 Android 版本进行更新。`androidx`
    包含了 Android Jetpack 库的套件和重新打包的支持库。
- en: 'The next Gradle file to examine is `settings.gradle`, which initially looks
    like this:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个要检查的 Gradle 文件是 `settings.gradle`，它最初看起来像这样：
- en: '[PRE10]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: On first creating a project with Android Studio, there will only be one module,
    `app`, but when you add more features, you can add new modules that are dedicated
    to containing the source of a feature rather than packaging it in the main `app`
    module.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在首次使用 Android Studio 创建项目时，将只有一个模块，即 `app`，但当你添加更多功能时，你可以添加新的模块，这些模块专门用于包含一个功能而不是将其打包在主
    `app` 模块中。
- en: These are called **feature modules**, and you can supplement them with other
    types of modules, such as shared modules, which are used by all other modules,
    like a networking module. This file also contains the repositories of the plugins
    and dependencies to download from in separate blocks for plugins and dependencies.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这些被称为**功能模块**，你可以通过其他类型的模块来补充它们，例如共享模块，这些模块被所有其他模块使用，如网络模块。此文件还包含插件和依赖项的存储库，分别用于插件和依赖项的单独块。
- en: Setting the value of `RepositoriesMode.FAIL_ON_PROJECT_REPOS` ensures all dependencies
    repositories are defined here; otherwise, a build error will be triggered.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 设置`RepositoriesMode.FAIL_ON_PROJECT_REPOS`的值确保所有依赖项存储库都定义在这里；否则，将触发构建错误。
- en: Exercise 1.04 – exploring how Material Design is used to theme an app
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1.04 – 探索Material Design如何用于应用主题
- en: 'In this exercise, you will learn about Google’s new design language, **Material
    Design**, and use it to load a Material Design-themed app. Material Design is
    a design language created by Google that adds enriched UI elements based on real-world
    effects such as lighting, depth, shadows, and animations. Perform the following
    steps to complete the exercise:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将了解谷歌的新设计语言**Material Design**，并使用它来加载一个Material Design主题的应用。Material
    Design是由谷歌创建的一种设计语言，它基于现实世界的效果（如光照、深度、阴影和动画）添加了丰富的UI元素。执行以下步骤以完成练习：
- en: Create a new Android Studio project as you did in *Exercise 1.01*, *Creating
    an Android Studio project for* *your app*.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的Android Studio项目，就像你在*练习1.01*，*为你的应用创建Android Studio项目*时做的那样。
- en: 'First, look at the `dependencies` block and find the Material Design dependency:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，查看`dependencies`块并找到Material Design依赖项：
- en: '[PRE11]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, open the `themes.xml` file located at `app` | `src` | `main` | `res`
    | `values` | `themes.xml`: There is also a `themes.xml` file in the `values-night`
    folder used for a dark mode, which we will explore later:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开位于`app` | `src` | `main` | `res` | `values` | `themes.xml`的`themes.xml`文件：`values-night`文件夹中也有一个`themes.xml`文件，用于暗黑模式，我们将在稍后探讨：
- en: '[PRE12]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Notice that the parent of `Theme.MyApplication` is `Theme.MaterialComponents.DayNight.DarkActionBar`.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`Theme.MyApplication`的父主题是`Theme.MaterialComponents.DayNight.DarkActionBar`。
- en: The Material Design dependency added in the `dependencies` block is being used
    here to apply the theme of the app. One of the key differences that `AppCompat`
    themes that preceded them is the ability to provide variations to the primary
    and secondary colors of your app.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在`dependencies`块中添加的Material Design依赖项被用来应用应用的主题。与它们之前使用的`AppCompat`主题相比，一个关键的区别是能够为应用的主色和辅助色提供变体。
- en: For example, `colorPrimaryVariant` enables you to add a tint to the primary
    color, which can be either lighter or darker than the `colorPrimary` color. In
    addition, you can style view element colors in the foreground of your app with
    `colorOnPrimary`.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`colorPrimaryVariant`允许你为主色添加色调，这可以是比`colorPrimary`颜色更亮或更暗。此外，你还可以使用`colorOnPrimary`在你的应用前景中为视图元素的颜色进行样式设置。
- en: 'Together these bring cohesive branding to theme your app. To see this in effect,
    make the following changes to invert the primary and secondary colors:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 一起，这些为应用的主题带来了统一的品牌形象。要看到这种效果，请进行以下更改以颠倒主色和辅助色：
- en: '[PRE13]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Run the app now, and you will see the app themed differently. The action bar
    and status bar have changed background color in contrast to the default Material
    themed app, as shown in *Figure 1**.18*:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在运行应用，你会看到应用的主题有所不同。动作栏和状态栏的背景色与默认的Material主题应用形成对比，如图*图1.18*所示：
- en: '![Figure 1.18 – App with primary and secondary colors inverted](img/B19411_01_18.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![图1.18 – 主色和辅助色颠倒的应用](img/B19411_01_18.jpg)'
- en: Figure 1.18 – App with primary and secondary colors inverted
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.18 – 主色和辅助色颠倒的应用
- en: In this exercise, you’ve learned how Material Design can be used to theme an
    app. As you are currently only displaying `TextView` on the screen, it is not
    clear what benefits material design provides, but this will change when you start
    using Material UI design widgets more.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你学习了如何使用Material Design来为主题应用。由于你目前只显示`TextView`在屏幕上，所以不清楚材料设计提供了哪些好处，但当你开始使用更多的Material
    UI设计小部件时，这将会改变。
- en: Now that you’ve learned how the project is built and configured, in the next
    section, you’ll explore the project structure in detail, learn how it has been
    created, and gain familiarity with the core areas of the development environment.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了项目的构建和配置方式，在下一节中，你将详细探索项目结构，了解它是如何创建的，并熟悉开发环境的核心区域。
- en: Android application structure
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安卓应用结构
- en: Now that we have covered how the Gradle build tool works, we’ll explore the
    rest of the project. The simplest way to do this is to examine the folder structure
    of the app. There is a tool window at the top left of Android Studio called **Project**,
    which allows you to browse the contents of your app.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了 Gradle 构建工具的工作原理，我们将探索项目的其余部分。最简单的方法是检查应用文件夹结构。在 Android Studio 的左上角有一个工具窗口，称为
    **项目**，它允许您浏览应用的内容。
- en: By default, it is set to **open**/**selected** when your Android project is
    first created. When you select it, you will see a view similar to the screenshot
    in *Figure 1**.19*. If you can’t see any window bars on the left-hand side of
    the screen, then go to the top toolbar and select **View** | **Appearance** |
    **Tool Window Bars** and make sure it is ticked.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，当您的 Android 项目首次创建时，它被设置为 **打开**/**选中**。当您选择它时，您将看到一个类似于 *图 1**.19* 中的截图的视图。如果您在屏幕左侧看不到任何窗口栏，请转到顶部工具栏并选择
    **视图** | **外观** | **工具窗口栏**，并确保它被勾选。
- en: There are many different options for how to browse your project, but `app` folder
    structure, so let’s take a look at it.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览项目有多种不同的选项，但让我们看看 `app` 文件夹结构。
- en: 'Here is an overview of these files with more detail about the most important
    ones. On opening it, you will see that it consists of the following folder structure:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是这些文件的概述，其中包含对最重要的文件更详细的说明。打开后，您将看到它包含以下文件夹结构：
- en: '![Figure 1.19 – Overview of the files and folder structure in the app](img/B19411_01_19.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.19 – 应用中文件和文件夹结构的概述](img/B19411_01_19.jpg)'
- en: Figure 1.19 – Overview of the files and folder structure in the app
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.19 – 应用中文件和文件夹结构的概述
- en: 'The Kotlin file (`MainActivity`), which you’ve specified as running when the
    app starts, is as follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin 文件（`MainActivity`），您指定在应用启动时运行，如下所示：
- en: '[PRE14]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `import` statements include the libraries and the source of what this activity
    uses. The `class MainActivity : AppCompatActivity()` class header creates a class
    that extends `AppCompatActivity`. In Kotlin, the `:` character is used for both
    deriving from a class (also known as inheritance) and implementing an interface.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`import` 语句包括库和此活动使用的源。`class MainActivity : AppCompatActivity()` 类头创建了一个继承自
    `AppCompatActivity` 的类。在 Kotlin 中，冒号 `:` 字符用于从类派生（也称为继承）和实现接口。'
- en: '`MainActivity` derives from `androidx.appcompat.app.AppCompatActivity`, which
    is the backward-compatible activity designed to make your app work on older devices.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`MainActivity` 继承自 `androidx.appcompat.app.AppCompatActivity`，这是一个向后兼容的活动，旨在使您的应用能够在旧设备上运行。'
- en: 'Android activities have many callback functions you can override at different
    points of the activity’s life. This is known as the `onCreate` function as shown
    here:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: Android 活动有许多回调函数，您可以在活动的不同生命周期点进行重写。这被称为 `onCreate` 函数，如下所示：
- en: '[PRE15]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `override` keyword in Kotlin specifies that you are providing a specific
    implementation for a function defined in the parent class. The `fun` keyword (as
    you may have guessed) stands for *function*. The `savedInstanceState: Bundle?`
    parameter is Android’s mechanism for restoring previously saved state. For this
    simple activity, you haven’t stored any state, so this value will be `null`. The
    question mark, `?`, that follows the type declares that this type can be `null`.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 'Kotlin 中的 `override` 关键字指定您正在为父类中定义的函数提供特定的实现。`fun` 关键字（正如您可能已经猜到的）代表 *函数*。`savedInstanceState:
    Bundle?` 参数是 Android 用于恢复先前保存状态的机制。对于这个简单的活动，您没有存储任何状态，因此此值将为 `null`。跟随类型的问号 `?`
    声明此类型可以是 `null`。'
- en: The `super.onCreate(savedInstanceState)` line calls through to the overridden
    method of the base class, and finally, `setContentView(R.layout.activity_main)`
    loads the layout we want to display in the activity; otherwise, it would be displayed
    as a blank screen as no layout has been defined.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`super.onCreate(savedInstanceState)` 这一行调用基类的重写方法，最终，`setContentView(R.layout.activity_main)`
    加载我们想要在活动中显示的布局；否则，如果没有定义布局，它将显示为空白屏幕。'
- en: 'Let’s have a look at some other files (*Figure 1**.19*) present in the folder
    structure:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看文件夹结构中存在的其他一些文件（*图 1**.19*）：
- en: '`ExampleInstrumentedTest`: This is an example UI test. You can check and verify
    the flow and structure of your app by running tests on the UI when the app is
    running.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExampleInstrumentedTest`：这是一个示例 UI 测试。您可以通过在应用运行时运行测试来检查和验证应用的流程和结构。'
- en: '`ExampleUnitTest`: This is an example unit test. An essential part of creating
    an Android app is writing unit tests to verify that the source code works as expected.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExampleUnitTest`：这是一个示例单元测试。创建Android应用的一个基本部分是编写单元测试来验证源代码是否按预期工作。'
- en: '`ic_launcher_background.xml` and `ic_launcher_foreground.xml`: These two files
    together make up the launcher icon of your app in vector format, which will be
    used by the `ic_launcher.xml` launcher icon file in Android API 26 (Oreo) and
    above.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ic_launcher_background.xml`和`ic_launcher_foreground.xml`：这两个文件一起构成了你的应用启动器的矢量格式图标，它将被Android
    API 26（奥利奥）及更高版本的`ic_launcher.xml`启动器图标文件使用。'
- en: '`activity_main.xml`: This is the layout file that was created by Android Studio
    when we created the project. It is used by `MainActivity` to draw the initial
    screen content, which appears when the app runs:'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`activity_main.xml`：这是Android Studio在创建项目时创建的布局文件。它被`MainActivity`用于绘制初始屏幕内容，当应用运行时显示：'
- en: '[PRE16]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Screen displays in Android can be created using XML or Jetpack Compose, which
    uses a declarative API to dynamically build your UI. You will learn Jetpack Compose
    in [*Chapter 9*](B19411_09.xhtml#_idTextAnchor499). For XML, the documents start
    with an XML header followed by a top-level `ViewGroup` (which here is `ConstraintLayout`)
    and then one or more nested `Views` and `ViewGroups`.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android中，可以使用XML或Jetpack Compose创建屏幕显示，Jetpack Compose使用声明式API动态构建UI。你将在[*第9章*](B19411_09.xhtml#_idTextAnchor499)中学习Jetpack
    Compose。对于XML，文档从XML头开始，然后是顶级`ViewGroup`（在这里是`ConstraintLayout`），然后是一个或多个嵌套的`Views`和`ViewGroups`。
- en: The `ConstraintLayout` `ViewGroup` allows very precise positioning of views
    on a screen, constraining views with parent and sibling views, guidelines, and
    barriers. Detailed documentation on `ConstraintLayout` can be found at [https://developer.android.com/reference/androidx/constraintlayout/widget/ConstraintLayout](https://developer.android.com/reference/androidx/constraintlayout/widget/ConstraintLayout).
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`ConstraintLayout` `ViewGroup`允许在屏幕上非常精确地定位视图，通过父视图和兄弟视图、指南和障碍物来约束视图。有关`ConstraintLayout`的详细文档可以在[https://developer.android.com/reference/androidx/constraintlayout/widget/ConstraintLayout](https://developer.android.com/reference/androidx/constraintlayout/widget/ConstraintLayout)找到。'
- en: '`TextView`, currently the only child view of `ConstraintLayout`, displays text
    on the screen through the `android:text` attribute. The horizontal positioning
    of the view is done by constraining the view to both the start and end of the
    parent, which centers the view horizontally as both constraints are applied.'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`TextView`，目前是`ConstraintLayout`的唯一子视图，通过`android:text`属性在屏幕上显示文本。视图的水平定位是通过将视图约束到父视图的起始和结束位置来完成的，这样当两个约束都应用时，视图在水平方向上居中。'
- en: From start to end, left-to-right languages (`ltr`) are read left to right, while
    `non ltr` languages are read right to left. The view is positioned vertically
    in the center by constraining the view to both the top and the bottom of its parent.
    The result of applying all four constraints centers `TextView` both horizontally
    and vertically within `ConstraintLayout`.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 从起始到结束，从左到右的语言（`ltr`）是从左到右阅读的，而`non ltr`语言是从右到左阅读的。通过将视图约束到其父视图的顶部和底部，视图在垂直方向上居中。应用所有四个约束的结果是在`ConstraintLayout`中水平和垂直居中`TextView`。
- en: 'There are three XML namespaces in the `ConstraintLayout` tag:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ConstraintLayout`标签中有三个XML命名空间：
- en: '`xmlns:android`: This refers to the Android-specific namespace and it is used
    for all attributes and values within the main Android SDK.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xmlns:android`：这指的是Android特定的命名空间，它用于主Android SDK中的所有属性和值。'
- en: '`xmlns:app`: This namespace is for anything not in the Android SDK. So, in
    this case, `ConstraintLayout` is not part of the main Android SDK but is added
    as a library.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xmlns:app`：这个命名空间用于不在Android SDK中的任何内容。因此，在这种情况下，`ConstraintLayout`不是Android
    SDK的一部分，而是作为一个库添加的。'
- en: '`xmnls:tools`: This refers to a namespace used for adding metadata to the XML,
    which indicates where the layout is used (`tools:context=".MainActivity"`). It
    is also used to show sample text visible in previews.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xmnls:tools`：这指的是用于向XML添加元数据的命名空间，它指示布局的使用位置（`tools:context=".MainActivity"`）。它还用于显示预览中可见的示例文本。'
- en: The two most important attributes of an Android XML layout file are `android:layout_width`
    and `android:layout_height`.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: Android XML布局文件最重要的两个属性是`android:layout_width`和`android:layout_height`。
- en: These can be set to absolute values, usually of density-independent pixels (known
    as `dip` or `dp`) that scale pixel sizes to be roughly equivalent on different
    density devices. More commonly, however, these attributes have the `wrap_content`
    or `match_parent` values set for them. `wrap_content` will be as big as required
    to only enclose its contents. `match_parent` will be sized according to its parent.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可以设置为绝对值，通常是密度无关像素（称为 `dip` 或 `dp`），它们将像素大小缩放到不同密度设备上大致等效。然而，更常见的是，这些属性被设置为
    `wrap_content` 或 `match_parent` 值。`wrap_content` 将根据需要的大小仅包含其内容。`match_parent`
    将根据其父元素的大小进行设置。
- en: There are other `ViewGroups` you can use to create layouts. For example, `LinearLayout`
    lays out views vertically or horizontally, `FrameLayout` is usually used to display
    a single child view, and `RelativeLayout` is a simpler version of `ConstraintLayout`,
    which lays out views positioned relative to the parent and sibling views.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 有其他 `ViewGroups` 可以用来创建布局。例如，`LinearLayout` 垂直或水平排列视图，`FrameLayout` 通常用于显示单个子视图，而
    `RelativeLayout` 是 `ConstraintLayout` 的一个更简单版本，它根据父视图和兄弟视图的位置排列视图。
- en: 'The `ic_launcher.webp` files are the `.webp` launcher icons that have an icon
    for every different density of devices. This image format was created by Google
    and has greater compression compared to the `.png` images. As the minimum version
    of Android we are using is API 21: Android 5.0 (Jelly Bean), these `.webp` images
    are included, as support for the launcher vector format was not introduced until
    Android API 26 (Oreo).'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`ic_launcher.webp` 文件是具有每个不同密度设备图标的 `.webp` 启动器图标。这种图像格式由 Google 创建，与 `.png`
    图像相比具有更高的压缩率。由于我们使用的 Android 最小版本是 API 21：Android 5.0（Jelly Bean），因此这些 `.webp`
    图像被包含在内，因为启动器矢量格式的支持直到 Android API 26（Oreo）才被引入。'
- en: The `ic_launcher.xml` file uses the vector files (`ic_launcher_background.xml`
    and `ic_launcher_foreground.xml`) to scale to different density devices in Android
    API 26 (Oreo) and above.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '`ic_launcher.xml` 文件使用矢量文件（`ic_launcher_background.xml` 和 `ic_launcher_foreground.xml`）在
    Android API 26（Oreo）及更高版本中缩放到不同的密度设备。'
- en: Note
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To target different density devices on the Android platform, besides each one
    of the `ic_launcher.png` icons, you will see in brackets the density it targets.
    As devices vary widely in their pixel densities, Google created density buckets
    so that the correct image would be selected to be displayed depending on how many
    dots per inch the device has.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 要针对 Android 平台上的不同密度设备，除了每个 `ic_launcher.png` 图标外，你还会在括号中看到它针对的密度。由于设备的像素密度差异很大，Google
    创建了密度桶，以便根据设备每英寸的像素数选择正确的图像进行显示。
- en: 'The different density qualifiers and their details are as follows:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的密度限定符及其细节如下：
- en: '`nodpi`: Density-independent resources'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nodpi`：密度无关资源'
- en: '`ldpi`: Low-density screens of 120 dpi'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ldpi`：120 dpi 的低密度屏幕'
- en: '`mdpi`: Medium-density screens of 160 dpi (the baseline)'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mdpi`：160 dpi 的中等密度屏幕（基准）'
- en: '`hdpi`: High-density screens of 240 dpi'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hdpi`：240 dpi 的高密度屏幕'
- en: '`xhdpi`: Extra-high-density screens of 320 dpi'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xhdpi`：320 dpi 的超高清屏幕'
- en: '`xxhdpi`: Extra-extra-high-density screens of 480 dpi'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xxhdpi`：480 dpi 的超高清屏幕'
- en: '`xxxhdpi`: Extra-extra-extra-high-density screens of 640 dpi'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xxxhdpi`：640 dpi 的超超超高清屏幕'
- en: '`tvdpi`: Resources for televisions (approx 213 dpi)'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tvdpi`：电视资源（约 213 dpi）'
- en: The baseline density bucket was created at `160` dots per inch for medium-density
    devices and is called `160` dots/pixels, and the largest display bucket is `xxxhdpi`,
    which has `640` dots per inch. Android determines the appropriate image to display
    based on the individual device.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 基准密度桶是在每英寸 `160` 个点为中等密度设备创建的，被称为 `160` 点/像素，最大的显示桶是 `xxxhdpi`，具有 `640` 个点每英寸。Android
    根据单个设备确定要显示的适当图像。
- en: So, the Pixel 6 emulator has a density of approximately `411dpi`, so it uses
    resources from the extra-extra-high-density bucket (`xxhdpi`), which is the closest
    match. Android has a preference for scaling down resources to best match density
    buckets, so a device with `400dpi`, which is halfway between the `xhdpi` and `xxhdpi`
    buckets, is likely to display the `480dpi` asset from the `xxhdpi` bucket.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Pixel 6 模拟器的密度大约为 `411dpi`，所以它使用来自超超高清密度桶（`xxhdpi`）的资源，这是最接近的匹配。Android 倾向于将资源缩放以最佳匹配密度桶，因此位于
    `xhdpi` 和 `xxhdpi` 桶之间的 `400dpi` 设备很可能会显示来自 `xxhdpi` 桶的 `480dpi` 资产。
- en: 'To create alternative bitmap drawables for different densities, you should
    follow the `3:4:6:8:12:16` scaling ratio between the six primary densities. For
    example, if you have a bitmap drawable that’s `48x48` pixels for medium-density
    screens, all the different sizes should be as follows:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 要为不同密度创建替代位图可绘制对象，您应遵循六种主要密度之间的 `3:4:6:8:12:16` 缩放比例。例如，如果您有一个为中等密度屏幕的 `48x48`
    像素的位图可绘制对象，所有不同的大小应如下所示：
- en: '`36x36` (`0.75x`) for low density (`ldpi`)'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`36x36` (`0.75x`) 用于低密度 (`ldpi`)'
- en: '`48x48` (`1.0x` baseline) for medium density (`mdpi`)'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`48x48` (`1.0x` 基线) 用于中等密度 (`mdpi`)'
- en: '`72x72` (`1.5x`) for high density (`hdpi`)'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`72x72` (`1.5x`) 用于高密度 (`hdpi`)'
- en: '`96x96` (`2.0x`) for extra-high density (`xhdpi`)'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`96x96` (`2.0x`) 用于超高密度 (`xhdpi`)'
- en: '`144x144` (`3.0x`) for extra-extra-high density (`xxhdpi`)'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`144x144` (`3.0x`) 用于超高中密度 (`xxhdpi`)'
- en: '`192x192` (`4.0x`) for extra-extra-extra-high density (`xxxhdpi`)'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`192x192` (`4.0x`) 用于超超高密度 (`xxxhdpi`)'
- en: 'For a comparison of these physical launcher icons per density bucket, refer
    to the following table:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 要比较这些按密度分组的物理启动器图标，请参考以下表格：
- en: '![Figure 1.20 – Comparison of principal density bucket launcher image sizes](img/Table_01.jpg)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.20 – 主要密度分组启动器图像大小的比较](img/Table_01.jpg)'
- en: Figure 1.20 – Comparison of principal density bucket launcher image sizes
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.20 – 主要密度分组启动器图像大小的比较
- en: Note
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 备注
- en: Launcher icons are made slightly larger than normal images within your app as
    they will be used by the device’s launcher. As some launchers can scale up the
    image, this ensures there is no pixelation and blurring of the image.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 启动器图标比应用中的正常图像略大，因为它们将被设备的启动器使用。由于一些启动器可以放大图像，这确保了图像没有像素化和模糊。
- en: Now you are going to look at some of the resources the app uses. These are referenced
    in XML files and keep the display and formatting of your app consistent.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将查看应用使用的一些资源。这些资源在 XML 文件中引用，并保持应用显示和格式的统一。
- en: 'In the `colors.xml` file, you define the colors you want to use in your app
    in hexadecimal format:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `colors.xml` 文件中，您以十六进制格式定义您想在应用中使用的颜色：
- en: '[PRE17]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The format is based on the `#00` is completely transparent through to `#FF`,
    which is completely opaque. For the colors, `#00` means none of the color is added
    to make up the composite color, and `#FF` means all of the color is added.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 格式基于 `#00` 完全透明到 `#FF` 完全不透明。对于颜色，`#00` 表示不添加任何颜色来构成复合颜色，而 `#FF` 表示添加所有颜色。
- en: 'If no transparency is required, you can omit the first two characters. So,
    to create fully blue and 50% transparent blue colors, here’s the format:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不需要透明度，您可以省略前两个字符。因此，要创建全蓝色和 50% 透明的蓝色颜色，格式如下：
- en: '[PRE18]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `strings.xml` file displays all the text displayed in the app:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`strings.xml` 文件显示应用中显示的所有文本：'
- en: '[PRE19]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You can use hardcoded strings in your app, but this leads to duplication and
    also means you cannot customize the text if you want to make the app multilingual.
    By adding strings as resources, you can also update the string in one place if
    it is used in different places in the app.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在您的应用中使用硬编码的字符串，但这会导致重复，并且如果您想使应用支持多语言，则无法自定义文本。通过将字符串作为资源添加，您还可以在应用中不同位置使用时，在一个地方更新字符串。
- en: 'Common styles you would like to use throughout your app are added to the `themes.xml`
    file:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 您想在应用中使用的常见样式添加到 `themes.xml` 文件中：
- en: '[PRE20]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: It is possible to apply style information directly to views by setting `android:textStyle="bold"`
    as an attribute on `TextView`. However, you would have to repeat this in multiple
    places for every `TextView` you wanted to display in bold. Furthermore, when you
    start to have multiple style attributes added to individual views, it adds a lot
    of duplication and can lead to errors when you want to make a change to all similar
    views and miss changing a style attribute in one view.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过将 `android:textStyle="bold"` 作为属性设置在 `TextView` 上，直接将样式信息应用于视图。但是，您必须为每个想要以粗体显示的
    `TextView` 在多个地方重复此操作。此外，当您开始向单个视图添加多个样式属性时，它会添加大量重复，并且在您想要更改所有类似视图并错过更改一个视图的样式属性时，可能会导致错误。
- en: If you define a style, you only have to change the style, and it will update
    all the views that have that style applied to them. A top-level theme was applied
    to the application tag in the `AndroidManifest.xml` file when you created the
    project and is referred to as a theme that styles all views contained within the
    app.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您定义了一种样式，您只需更改样式，它就会更新所有应用中应用了该样式的视图。在创建项目时，将顶级主题应用于 `AndroidManifest.xml`
    文件中的应用标签，并称为应用于应用中所有视图的样式。
- en: The colors you have defined in the `colors.xml` file are used here. In effect,
    if you change one of the colors defined in the `colors.xml` file, it will now
    propagate to style the app as well.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里使用的是您在`colors.xml`文件中定义的颜色。实际上，如果您更改了`colors.xml`文件中定义的任何颜色，它现在将传播以样式化应用。
- en: You’ve now explored the core areas of the app. You have added the `TextView`
    views to display labels, headings, and blocks of text. In the next exercise, you
    will be introduced to UI elements allowing the user to interact with your app.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经探索了应用的核心区域。您已添加`TextView`视图来显示标签、标题和文本块。在下一个练习中，您将介绍允许用户与您的应用交互的UI元素。
- en: Exercise 1.05 – adding interactive UI elements to display a bespoke greeting
    to the user
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1.05 – 向用户显示定制问候语的交互式UI元素
- en: 'The goal of this exercise is to add the capability of users to add and edit
    text and then submit this information to display a bespoke greeting with the entered
    data. You will need to add editable text views to achieve this. The `EditText`
    view is typically how this is done and can be added in an XML layout file like
    this:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 本练习的目标是增加用户添加和编辑文本的能力，然后将这些信息提交以显示包含输入数据的定制问候语。为此，您需要添加可编辑的文本视图。通常，这通过`EditText`视图来实现，可以在如下XML布局文件中添加：
- en: '[PRE21]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This uses an Android `TextAppearance.AppCompat.Title` style to display a title,
    as shown in *Figure 1**.21*:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用Android `TextAppearance.AppCompat.Title`样式来显示标题，如图*图1**.21*所示：
- en: '![Figure 1.21 – EditText with a hint](img/B19411_01_21.jpg)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![图1.21 – 带有提示的EditText](img/B19411_01_21.jpg)'
- en: Figure 1.21 – EditText with a hint
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.21 – 带有提示的EditText
- en: 'Although this is perfectly fine to enable the user to add/edit text, the `TextInputEditText`
    material and its wrapper `TextInputLayout` view give some polish to the `EditText`
    display. Here’s how `EditText` can be updated:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这可以很好地启用用户添加/编辑文本，但`TextInputEditText`材料和其包装器`TextInputLayout`视图为`EditText`显示增添了一些光泽。以下是`EditText`可以更新的方式：
- en: '[PRE22]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The output is as follows:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 1.22 – The TextInputLayout/TextInputEditText material with a hint](img/B19411_01_22.jpg)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![图1.22 – 带有提示的TextInputLayout/TextInputEditText材料](img/B19411_01_22.jpg)'
- en: Figure 1.22 – The TextInputLayout/TextInputEditText material with a hint
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.22 – 带有提示的TextInputLayout/TextInputEditText材料
- en: '`TextInputLayout` allows us to create a label for the `TextInputEditText` view
    and does a nice animation when the `TextInputEditText` view is focused (moving
    to the top of the field) while still displaying the label. The label is specified
    with `android:hint`.'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`TextInputLayout`允许我们为`TextInputEditText`视图创建一个标签，并在`TextInputEditText`视图获得焦点（移动到字段顶部）时执行一个漂亮的动画，同时仍然显示标签。标签通过`android:hint`指定。'
- en: 'You will change the `Hello World` text in your app so a user can enter their
    first and last name and further display a greeting by pressing a button. To do
    this, perform the following steps:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 您将更改应用中的`Hello World`文本，以便用户可以输入他们的名字和姓氏，并通过按按钮进一步显示问候语。为此，请执行以下步骤：
- en: Create a new Android Studio project as you did in *Exercise 1.01*, *Creating
    an Android Studio project for your app*, called My Application.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照与*练习1.01*，*为您的应用创建Android Studio项目*相同的方式创建一个新的Android Studio项目，命名为My Application。
- en: 'Create the labels and text you are going to use in your app by adding these
    entries to `app` | `src` | `main` | `res` | `values` | `strings.xml`:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将以下条目添加到`app` | `src` | `main` | `res` | `values` | `strings.xml`来创建您应用中将使用的标签和文本：
- en: '[PRE23]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Next, we will update our styles to use in the layout by adding the following
    styles to the `app` | `src` | `main` | `res` | `values` | `themes.xml` theme:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将更新我们的样式以在布局中使用，通过在`app` | `src` | `main` | `res` | `values` | `themes.xml`主题中添加以下样式：
- en: '[PRE24]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The parents of some of the styles refer to Material styles, so these styles
    will be applied directly to the views and the styles specified.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 一些样式的父级引用了Material样式，因此这些样式将直接应用于视图和指定的样式。
- en: 'Now that we have added the styles we want to apply to views in the layout and
    the text, we can update the layout in `activity_main.xml` in the `app` | `src`
    | `main` | `res` | `layout` folder:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经添加了要应用于布局和文本的样式，我们可以更新`activity_main.xml`布局文件，位于`app` | `src` | `main`
    | `res` | `layout`文件夹中：
- en: '[PRE25]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Run the app and see the look and feel. You have added IDs for all the views
    so they can be constrained against their siblings and also provide a way in the
    activity to get the values of the `TextInputEditText` views. The `style="@style.."`
    notation applies the style from the `themes.xml` file.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用并查看外观和感觉。您已为所有视图添加了ID，以便它们可以与其兄弟元素进行约束，并在活动中提供获取`TextInputEditText`视图值的方法。`style="@style.."`表示法应用了`themes.xml`文件中的样式。
- en: 'If you select one of the `TextInputEditText` views, you’ll see the label animated
    and move to the top of the view:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择一个`TextInputEditText`视图，你会看到标签动画并移动到视图的顶部：
- en: '![Figure 1.23 – The TextInputEditText fields with label states with no focus
    and with focus](img/B19411_01_23.jpg)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![图1.23 – 无焦点和有焦点的带有标签状态的TextInputEditText字段](img/B19411_01_23.jpg)'
- en: Figure 1.23 – The TextInputEditText fields with label states with no focus and
    with focus
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.23 – 无焦点和有焦点的带有标签状态的TextInputEditText字段
- en: Now, we must add the interaction with the view in our activity. The layout by
    itself doesn’t do anything other than allow the user to enter text into the `EditText`
    fields. Clicking the button at this stage will not do anything. You will accomplish
    this by capturing the entered text by using the IDs of the form fields when the
    button is pressed and then using the text to populate a `TextView` message.
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们必须在我们的活动中添加与视图的交互。布局本身并不能做任何事情，除了允许用户在`EditText`字段中输入文本。在这个阶段点击按钮不会做任何事情。你将通过在按钮按下时捕获输入的文本，并使用表单字段的ID来使用这些文本填充一个`TextView`消息来完成这个任务。
- en: Open `MainActivity` and complete the next steps to process the entered text
    and use this data to display a greeting and handle any form input errors.
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainActivity`并完成下一步，以处理输入的文本，并使用这些数据来显示问候语和处理任何表单输入错误。
- en: 'In the `onCreate` function, set a `ClickListener` on the button so we can respond
    to the button click and retrieve the form data by updating `MainActivity` to what
    is displayed in the following code block:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onCreate`函数中，在按钮上设置一个`ClickListener`，这样我们就可以响应用件点击并通过更新`MainActivity`来检索表单数据，如下面的代码块所示：
- en: '[PRE26]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Then, check that the trimmed names are not empty and format the name using
    Kotlin’s string templates:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，检查修剪后的名称是否不为空，并使用Kotlin的字符串模板格式化名称：
- en: '[PRE27]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Finally, show a message if the form fields have not been filled in correctly:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，如果表单字段没有正确填写，则显示一条消息：
- en: '[PRE28]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `Toast` specified is a small text dialog that appears above the main layout
    for a short time to display a message to the user before disappearing.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 指定的`Toast`是一个小文本对话框，在主布局上方短暂出现，用于在消失前向用户显示消息。
- en: 'Run the app and enter text into the fields and verify that a greeting message
    is shown when both text fields are filled in, and a pop-up message appears with
    why the greeting hasn’t been set if both fields are not filled in. You should
    see the following display for each one of these cases:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用，在字段中输入文本，并验证当两个文本字段都填写时，会显示问候消息；如果两个字段都没有填写，则会出现一个弹出消息，说明为什么问候没有被设置。你应该看到以下显示的每个案例：
- en: '![Figure 1.24 – The app with the name filled in correctly and with an error](img/B19411_01_24.jpg)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![图1.24 – 填写正确的名称和有错误的app](img/B19411_01_24.jpg)'
- en: Figure 1.24 – The app with the name filled in correctly and with an error
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.24 – 填写正确的名称和有错误的app
- en: The full exercise code can be viewed at [https://packt.link/UxbOu](https://packt.link/UxbOu).
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的练习代码可以在[https://packt.link/UxbOu](https://packt.link/UxbOu)查看。
- en: The preceding exercise introduced you to adding interactivity to your app with
    the `EditText` fields that a user can fill in, adding a click listener to respond
    to button events, and performing some validation.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的练习介绍了如何通过用户可以填写的`EditText`字段添加交互性到你的应用中，添加一个点击监听器来响应用件事件，并执行一些验证。
- en: Accessing Views in layout files
  id: totrans-320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在布局文件中访问视图
- en: The established way to access Views in layout files is to use `findViewById`
    with the name of the View’s ID. So the `enter_button` button is retrieved by the
    `findViewById<Button>(R.id.enter_button)` syntax after the layout has been set
    in `setContentView(R.layout.activity_main)` in the Activity.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 在布局文件中访问视图的常规方法是使用`findViewById`和视图的ID名称。因此，在`setContentView(R.layout.activity_main)`在Activity中设置布局之后，`enter_button`按钮是通过`findViewById<Button>(R.id.enter_button)`语法检索的。
- en: You will use this technique in this course. Google has also introduced `findViewById`,
    which creates a binding class to access Views and has the advantage of null and
    type safety. You can read about this at [https://developer.android.com/topic/libraries/view-binding](https://developer.android.com/topic/libraries/view-binding).
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在本课程中使用这项技术。谷歌还引入了`findViewById`，它创建了一个绑定类来访问视图，并且具有空值和类型安全性的优势。你可以在[https://developer.android.com/topic/libraries/view-binding](https://developer.android.com/topic/libraries/view-binding)上了解更多信息。
- en: Further input validation
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步的输入验证
- en: Validating user input is a key concept in processing user data, and you must
    have seen it in action many times when you’ve not filled in a required field in
    a form. This is what the previous exercise validated when it checked that the
    user had entered values into both the first name and last name fields.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 验证用户输入是处理用户数据的关键概念，你肯定在填写表单的必填字段时多次看到过它的实际应用。这就是前一个练习在检查用户是否在姓名和姓氏字段中输入了值时所验证的内容。
- en: There are other validation options that are available directly within XML view
    elements. Let’s say, for instance, you wanted to validate an IP address entered
    into a field. You know that an IP address can be four numbers separated by periods/dots
    where the maximum length of a number is three.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: XML视图元素中还有其他可用的验证选项。例如，假设你想验证一个字段中输入的IP地址。你知道IP地址可以是四个由点/句号分隔的数字，其中数字的最大长度为三位。
- en: 'So, the maximum number of characters that can be entered into the field is
    `15`, and only numbers and periods/dots can be entered. Two XML attributes can
    help us with the validation:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，可以输入字段的最大字符数是`15`，并且只能输入数字和点/句号。两个XML属性可以帮助我们进行验证：
- en: '`android:digits="0123456789."`: This restricts the characters that can be entered
    into the field by listing all the permitted individual characters'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:digits="0123456789."`：这通过列出所有允许的单独字符来限制可以输入到字段中的字符'
- en: '`android:maxLength="15"`: This restricts the user from entering more than the
    maximum number of characters an IP address will consist of'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:maxLength="15"`：这限制了用户输入的字符数不超过IP地址将包含的最大字符数'
- en: 'So, this is how you can display this in a form field:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这是如何在表单字段中显示它的方法：
- en: '[PRE29]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This validation restricts the characters that can be input and the maximum length.
    Additional validation would be required on the sequence of characters and whether
    they are periods/dots or numbers, as per the IP address format, but it is the
    first step to assist the user in entering the correct characters. There is also
    an `android:inputType` XML attribute, which can be used to specify permitted characters
    and configure the input options, `android:inputType="textPassword"`, for example,
    ensures that the characters entered are hidden. `android:inputType="Phone"` is
    the input method for a phone number.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 此验证限制了可以输入的字符和最大长度。根据IP地址格式，还需要对字符序列以及它们是点/句号还是数字进行额外的验证，但这是为了帮助用户输入正确的字符的第一步。还有一个`android:inputType`
    XML属性，可以用来指定允许的字符并配置输入选项，例如，`android:inputType="textPassword"`确保输入的字符是隐藏的。`android:inputType="Phone"`是电话号码的输入方法。
- en: With the knowledge gained from the chapter, let’s start with the following activity.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 通过从本章获得的知识，让我们从以下活动开始。
- en: Activity 1.01 – producing an app to create RGB colors
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动1.01 – 创建RGB颜色应用
- en: In this activity, we will look into a scenario that uses validation. Suppose
    you have been tasked with creating an app that shows how the RGB channels of red,
    green, and blue are added together in the RGB color space to create a color.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 在此活动中，我们将探讨一个使用验证的场景。假设你被分配创建一个应用，展示红色、绿色和蓝色在RGB颜色空间中如何相加以创建颜色。
- en: Each RGB channel should be added as two hexadecimal characters, where each character
    can be a value of 0–9 or A–F. The values will then be combined to produce a six-character
    hexadecimal string that is displayed as a color within the app.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 每个RGB通道应添加为两个十六进制字符，其中每个字符可以是0-9或A-F的值。然后，这些值将组合起来产生一个六字符的十六进制字符串，该字符串在应用中以颜色形式显示。
- en: This activity aims to produce a form with editable fields in which the user
    can add two hexadecimal values for each color. After filling in all three fields,
    the user should click a button that takes the three values and concatenates them
    to create a valid hexadecimal color string. This should then be converted to a
    color and displayed in the UI of the app.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动旨在生成一个表单，其中包含可编辑的字段，用户可以为每种颜色添加两个十六进制值。在填写所有三个字段后，用户应点击一个按钮，该按钮将三个值连接起来创建一个有效的十六进制颜色字符串。然后，应将其转换为颜色并在应用的UI中显示。
- en: 'The following steps will help you to complete the activity:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助您完成活动：
- en: Create a new Android Studio project as you did in *Exercise 1.01*, *Creating
    an Android Studio project for* *your app*.
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的Android Studio项目，就像你在*练习1.01*中做的那样，*为你的应用创建Android Studio项目*。
- en: Add a `Title` constrained to the top of the layout.
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在布局的顶部添加一个`标题`约束。
- en: Add a brief description to the user on how to complete the form.
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向用户添加一个简短的说明，说明如何完成表单。
- en: Add three material `TextInputLayout` fields wrapping three `TextInputEditText`
    fields that appear under `Title`. These should be constrained so that each view
    is above the other (rather than to the side). Name the `TextInputEditText` fields
    `Red Channel`, `Green Channel`, and `Blue Channel`, respectively, and add a restriction
    to each field to allow entry only of two characters and add hexadecimal characters.
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加三个`TextInputLayout`字段，分别包裹三个`TextInputEditText`字段，这些字段出现在`标题`下方。这些字段应该被约束，以便每个视图位于另一个视图之上（而不是旁边）。将`TextInputEditText`字段分别命名为`红通道`、`绿通道`和`蓝通道`，并为每个字段添加限制，只允许输入两个字符和十六进制字符。
- en: Add a button that takes the inputs from the three color fields.
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个按钮，该按钮从三个颜色字段获取输入。
- en: Add a view that displays the produced color in the layout.
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在布局中添加一个显示生成的颜色的视图。
- en: Finally, display the RGB color created from the three channels in the layout
    when the button is pressed and all input is valid.
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在按钮按下且所有输入有效时，在布局中显示由三个通道创建的RGB颜色。
- en: 'The final output should look like this (the color will vary depending on the
    inputs):'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 最终输出应如下所示（颜色将根据输入而变化）：
- en: '![Figure 1.25 – Output when the color is displayed](img/B19411_01_25.jpg)'
  id: totrans-346
  prefs: []
  type: TYPE_IMG
  zh: '![图1.25 – 显示颜色时的输出](img/B19411_01_25.jpg)'
- en: Figure 1.25 – Output when the color is displayed
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.25 – 显示颜色时的输出
- en: Note
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The solution to this activity can be found at [https://packt.link/By7eE](https://packt.link/By7eE).
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 该活动的解决方案可在[https://packt.link/By7eE](https://packt.link/By7eE)找到。
- en: Note
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When loading all completed projects from the GitHub repository for this course
    into Android Studio for the first time, do *not* open the project using **File**
    | **Open** from the top menu. Always use **File** | **New** | **Import Project**.
    This ensures the app builds correctly. When opening projects after the initial
    import, you can use **File** | **Open** or **File** | **Open Recent**.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 当第一次将此课程的GitHub仓库中的所有已完成项目加载到Android Studio中时，**不要**使用顶部菜单中的**文件** | **打开**来打开项目。始终使用**文件**
    | **新建** | **导入项目**。这确保了应用程序可以正确构建。在初次导入后打开项目，您可以使用**文件** | **打开**或**文件** | **打开最近的项目**。
- en: Summary
  id: totrans-352
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter has covered a lot about the foundations of Android development.
    You started with how to create Android projects using Android Studio and then
    created and ran apps on a virtual device.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了大量关于Android开发基础的内容。您从如何使用Android Studio创建Android项目开始，然后在虚拟设备上创建并运行了应用程序。
- en: The chapter then progressed by exploring the `AndroidManifest` file, which details
    the contents of your app and the permission model, followed by an introduction
    to Gradle and the process of adding dependencies and building your app.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 章节随后通过探索`AndroidManifest`文件来推进，该文件详细说明了您的应用程序内容和权限模型，接着介绍了Gradle以及添加依赖项和构建应用程序的过程。
- en: This was then followed by going into the details of an Android application and
    the files and folder structure. Layouts and views were introduced, and exercises
    iterated to illustrate how to construct UIs with an introduction to Google’s Material
    Design.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是深入了解Android应用程序的细节以及文件和文件夹结构。介绍了布局和视图，并通过练习迭代来展示如何使用Google的Material Design构建UI。
- en: The next chapter will build on this knowledge by learning about the activity
    lifecycle, activity tasks, and launch modes, persisting and sharing data between
    screens, and how to create robust user journeys through your apps.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将在此基础上学习活动生命周期、活动任务和启动模式，屏幕间的数据持久化和共享，以及如何在应用程序中创建健壮的用户旅程。
- en: '| **mdpi** | **hdpi** | **xhdpi** | **xxhdpi** | **xxxhdpi** |'
  id: totrans-357
  prefs: []
  type: TYPE_TB
  zh: '| **mdpi** | **hdpi** | **xhdpi** | **xxhdpi** | **xxxhdpi** |'
- en: '| ![](img/Image98888.png) | ![A picture containing application'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '| ![图片98888](img/Image98888.png) | ![包含应用程序的图片'
- en: Description automatically generated](img/Image98904.png) | ![A picture containing
    text, sign
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 自动生成的描述](img/Image98904.png) | ![包含文本、符号的图片
- en: Description automatically generated](img/Image98913.png) | ![A picture containing
    text, sign
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 自动生成的描述](img/Image98913.png) | ![包含文本、符号的图片
- en: Description automatically generated](img/Image98922.png) | ![A picture containing
    text, sign
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 自动生成的描述](img/Image98922.png) | ![包含文本、符号的图片
- en: Description automatically generated](img/Image98931.png) |
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 自动生成的描述](img/Image98931.png) |
