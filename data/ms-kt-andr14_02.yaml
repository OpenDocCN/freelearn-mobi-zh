- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Get Started with Kotlin Android Development
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 Kotlin Android 开发
- en: Kotlin is a static programming language that allows you to write concise and
    typed code. It’s the language preferred for Android development by Google.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin 是一种静态编程语言，允许你编写简洁且类型化的代码。它是 Google 推荐用于 Android 开发的语言。
- en: In this chapter, we’ll get to know Kotlin as a programming language. We will
    cover features that are useful for Android development and their importance for
    Android developers. Additionally, we’ll cover how to migrate from Java to Kotlin
    and some useful tips for developers coming from Java backgrounds.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将了解 Kotlin 作为一种编程语言。我们将涵盖对 Android 开发有用的特性和它们对 Android 开发者的重要性。此外，我们还将介绍如何从
    Java 迁移到 Kotlin，以及一些针对 Java 背景 developer 的有用提示。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要内容：
- en: Introduction to Kotlin
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kotlin 简介
- en: Kotlin syntax, types, functions, and classes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kotlin 语法、类型、函数和类
- en: Migrating from Java to Kotlin
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 Java 迁移到 Kotlin
- en: Kotlin features for Android developers
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kotlin 为 Android 开发者提供的特性
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow the instructions in this chapter, you’ll need to have the following
    ready:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要遵循本章中的说明，你需要准备以下内容：
- en: IntelliJ IDEA Community Edition ([https://www.jetbrains.com/idea/download/](https://www.jetbrains.com/idea/download/))
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IntelliJ IDEA Community Edition ([https://www.jetbrains.com/idea/download/](https://www.jetbrains.com/idea/download/))
- en: OpenJDK 11 or higher ([https://openjdk.java.net/install/](https://openjdk.java.net/install/))
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenJDK 11 或更高版本 ([https://openjdk.java.net/install/](https://openjdk.java.net/install/))
- en: You can find the code for this chapter at [https://github.com/PacktPublishing/Mastering-Kotlin-for-Android/tree/main/chapterone](https://github.com/PacktPublishing/Mastering-Kotlin-for-Android/tree/main/chapterone)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://github.com/PacktPublishing/Mastering-Kotlin-for-Android/tree/main/chapterone](https://github.com/PacktPublishing/Mastering-Kotlin-for-Android/tree/main/chapterone)
    找到本章的代码。
- en: Introduction to Kotlin
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kotlin 简介
- en: 'Kotlin is a language that runs on the **Java Virtual Machine** (**JVM**) developed
    by JetBrains. It was developed to overcome the following challenges that Java
    had:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin 是由 JetBrains 开发的运行在 **Java 虚拟机**（**JVM**）上的语言。它被开发出来是为了克服 Java 所面临的以下挑战：
- en: '**Verbosity**: Java has a very verbose syntax and this leads to developers
    writing a lot of boilerplate code even for trivial tasks.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**冗长性**: Java 有一个非常冗长的语法，这导致开发者即使在简单任务中也会编写大量的样板代码。'
- en: '**Null pointer exceptions**: By default, Java allows variables to have null
    values. This normally results in null pointer exceptions, which has been called
    **the billion-dollar** **mistake** in Java as many applications have been affected
    by this.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**空指针异常**: 默认情况下，Java 允许变量具有 null 值。这通常会导致空指针异常，这被称为 Java 中的 **十亿美元** **错误**，因为许多应用程序都受到了影响。'
- en: '**Concurency**: Java has threads, but managing concurrency and thread safety
    can be such a hard task at times. This leads to a lot of performance and memory
    issues that seriously affect applications that need to do work off the main thread.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并发**: Java 有线程，但有时管理并发和线程安全可能是一项艰巨的任务。这导致了许多性能和内存问题，严重影响了需要从主线程之外执行工作的应用程序。'
- en: '**Slow adoption of features**: The Java release cycle is slow and it is difficult
    to use the latest Java version to develop Android apps as there’s a lot to be
    done to ensure backward compatibility. This means it’s hard for Android developers
    to easily adopt the new language features and improvements as they’re stuck using
    older versions.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能缓慢采用**: Java 的发布周期缓慢，因此很难使用最新版本的 Java 来开发 Android 应用程序，因为需要做很多工作来确保向后兼容性。这意味着
    Android 开发者很难轻松采用新的语言特性和改进，因为他们被困在使用较旧版本中。'
- en: '**Lack of functional support**: Java is not a functional language, which makes
    it hard for developers to write functional code in Java. It’s hard to employ features
    such as high-order functions or treat functions as first-class citizens.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺乏函数式支持**: Java 不是一个函数式语言，这使得开发者难以在 Java 中编写函数式代码。很难使用诸如高阶函数或将函数视为一等公民等特性。'
- en: 'Over the years, Kotlin has evolved to be multiplatform and server-side and
    not serviced, and is used in data science as well. Some of the features where
    Kotlin has an edge over Java are as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 经过多年的发展，Kotlin 已经演变为多平台和服务器端语言，并且不再局限于服务端，还被用于数据科学。Kotlin 在一些特性上比 Java 有优势，如下所示：
- en: '**Conciseness**: The syntax is concise, which in turn reduces the amount of
    boilerplate code that you write.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简洁性**: 语法简洁，这反过来减少了你需要编写的样板代码量。'
- en: '**Null safety**: Many Java developers are very familiar with the famous **Null
    Pointer Exception** that was a source of many bugs and issues in applications.
    Kotlin was designed with null safety in mind. Variables that can have null values
    are indicated when declaring them, and before using these variables, the Kotlin
    compiler enforces checks for nullability, thereby reducing the number of exceptions
    and crashes.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**空安全**：许多 Java 开发者都非常熟悉著名的**空指针异常**，这是应用程序中许多错误和问题的来源。Kotlin 的设计考虑到了空安全。在声明变量时，可以指示变量可能具有空值，在使用这些变量之前，Kotlin
    编译器会强制执行空检查，从而减少异常和崩溃的数量。'
- en: '**Coroutines support**: Kotlin has built-in support for Kotlin coroutines.
    Coroutines are lightweight threads that you can use to perform asynchronous operations.
    It’s easy to understand and use them in your applications.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**协程支持**：Kotlin 内置了对 Kotlin 协程的支持。协程是轻量级的线程，您可以使用它们来执行异步操作。在应用程序中使用它们既容易理解又方便。'
- en: '**Data classes**: Kotlin has a built-in data class construct that makes it
    easy to define classes that are used primarily to store data. Data classes automatically
    generate **equals()**, **hashCode()**, and **toString()** methods, reducing the
    amount of boilerplate code required.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据类**：Kotlin 内置了数据类构造，这使得定义主要用于存储数据的类变得容易。数据类会自动生成 **equals()**、**hashCode()**
    和 **toString()** 方法，减少了所需的样板代码量。'
- en: '**Extension functions**: Kotlin allows developers to add functions to existing
    classes without inheriting from them, through extension functions. This makes
    it easier to add functionality to existing classes and reduces the need for boilerplate
    code.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展函数**：Kotlin 允许开发者通过扩展函数在不继承现有类的情况下向其添加函数。这使得向现有类添加功能变得更加容易，并减少了样板代码的需求。'
- en: '**Smart casting**: Kotlin’s smart casting system makes it possible to cast
    variables without the need for an explicit cast. The compiler automatically detects
    when a variable can be safely cast and performs the cast automatically.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**智能转换**：Kotlin 的智能转换系统使得在不进行显式转换的情况下也能进行变量转换成为可能。编译器会自动检测变量何时可以安全地进行转换，并自动执行转换操作。'
- en: JetBrains is also the company behind IntelliJ IDEA. The language support in
    this **Integrated Development Environment** (**IDE**) is also great.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: JetBrains 也是 IntelliJ IDEA 的背后公司。这个**集成开发环境**（**IDE**）的语言支持也非常出色。
- en: 'Kotlin has evolved over the years to support the following different platforms:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin 在这些年来已经发展，以支持以下不同的平台：
- en: '**Kotlin Multiplatform**: This is used to develop applications that target
    different platforms such as Android, iOS, and web applications'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kotlin 多平台**：这用于开发针对不同平台的应用程序，如 Android、iOS 和 Web 应用程序。'
- en: '**Kotlin for server side**: This is used to write backend applications and
    a number of frameworks to support server-side development'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kotlin for server side**：这用于编写后端应用程序以及支持服务器端开发的多个框架。'
- en: '**Kotlin for Android**: Google has supported Kotlin as a first-class language
    for Android development since 2017'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kotlin for Android**：自 2017 年起，Google 已经将 Kotlin 作为 Android 开发的首选语言进行支持。'
- en: '**Kotlin for JavaScript**: This provides support for writing Kotlin code that
    is transpiled to compatible JavaScript libraries'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kotlin for JavaScript**：这提供了将 Kotlin 代码转换为兼容 JavaScript 库的支持。'
- en: '**Kotlin/Native**: This compiles Kotlin code to native binaries and runs without
    a **Java Virtual** **Machine** (**JVM**)'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kotlin/Native**：这可以将 Kotlin 代码编译成原生二进制文件，并在无需**Java 虚拟机**（**JVM**）的情况下运行。'
- en: '**Kotlin for data science**: You can use Kotlin to build and explore data pipelines'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kotlin for data science**：您可以使用 Kotlin 来构建和探索数据管道。'
- en: In summary, Kotlin provides a more modern and concise approach to programming
    than Java while still maintaining interoperability with existing Java libraries
    and code. In addition, you can write Kotlin code and target different platforms.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，Kotlin 在保持与现有 Java 库和代码互操作性的同时，提供了一种比 Java 更现代、更简洁的编程方法。此外，您还可以编写 Kotlin
    代码并针对不同的平台进行编译。
- en: Now that we have got the gist of Kotlin and its various features, let’s move
    on to the next section where we will understand Kotlin as a programming language
    and understand Kotlin syntax, types, functions, and classes.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 Kotlin 及其各种特性，接下来让我们进入下一节，我们将了解 Kotlin 作为一种编程语言，并理解 Kotlin 的语法、类型、函数和类。
- en: Kotlin syntax, types, functions and classes
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kotlin 语法、类型、函数和类
- en: 'In this section, we’ll be looking at Kotlin syntax and familiarize ourselves
    with the language. Kotlin is a strongly typed language. The type of a variable
    is determined at the time of compilation. Kotlin has a rich type system that has
    the following types:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将查看 Kotlin 语法，并熟悉这门语言。Kotlin 是一种强类型语言。变量的类型是在编译时确定的。Kotlin 有一个丰富的类型系统，具有以下类型：
- en: '**Nullable types**: Every type in Kotlin can either be nullable or non-nullable.
    Nullable types are denoted with a question mark operator – for example, **String?**.
    Non-nullable types are normal types without any operator at the end – for example,
    **String**.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可空类型**：在 Kotlin 中，每个类型都可以是可空的或不可空的。可空类型用问号运算符表示 – 例如，**String?**。不可空类型是正常的类型，结尾没有任何运算符
    – 例如，**String**。'
- en: '**Basic types**: These types are similar to Java. Examples include Int, Long,
    Boolean, Double, and Char.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基本类型**：这些类型与 Java 类似。例如包括 Int、Long、Boolean、Double 和 Char。'
- en: '**Class types**: As Kotlin is an object-oriented programming language, it provides
    support for classes, sealed classes, interfaces, and so on. You define a class
    using the **class** keyword and you can add methods, properties, and constructors.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类类型**：由于 Kotlin 是一种面向对象的编程语言，它提供了对类、密封类、接口等的支持。你使用 **class** 关键字定义一个类，并且可以添加方法、属性和构造函数。'
- en: '**Arrays**: There is support for both primitive and object arrays. To declare
    a primitive array, you specify the type and size, as follows:'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数组**：支持基本数组和对象数组。要声明一个基本数组，你指定类型和大小，如下所示：'
- en: '[PRE0]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Kotlin automatically infers the type when you don’t specify it.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当你没有指定类型时，Kotlin 会自动推断类型。
- en: '**Collections**: Kotlin has a rich collection of APIs providing types such
    as sets, maps, and lists. They’re designed to be concise and expressive, and the
    language offers a wide range of operations for sorting, filtering, mapping, and
    many more.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集合**：Kotlin 提供了一个丰富的 API 集合，提供诸如集合、映射和列表等类型。它们被设计得简洁且易于表达，并且语言提供了广泛的操作，如排序、过滤、映射等。'
- en: '**Enum types**: These are used to define a fixed set of options. Kotlin has
    the **Enum** keyword for you to declare enumerations.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**枚举类型**：这些用于定义一组固定的选项。Kotlin 有 **Enum** 关键字供你声明枚举。'
- en: '**Functional types**: Kotlin is a functional language as well, meaning functions
    are treated as first-class citizens. You can be able to assign functions to variables,
    return functions as values from functions, and pass functions as arguments to
    other functions. To define a function as a type, you use the **(Boolean) -> Unit**
    shorthand notation. This example takes a **Boolean** argument and returns a **Unit**
    value.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**函数类型**：Kotlin 也是一种函数式语言，这意味着函数被视为一等公民。你可以将函数赋值给变量，从函数中返回函数值，并将函数作为参数传递给其他函数。要定义一个函数类型，你使用
    **(Boolean) -> Unit** 简写符号。此示例接受一个 **Boolean** 参数并返回一个 **Unit** 值。'
- en: We’ve learned the different types available in Kotlin, and we’ll use this knowledge
    in the next section to define some of these types.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了 Kotlin 中可用的不同类型，我们将在下一节中使用这些知识来定义这些类型。
- en: Creating a Kotlin project
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Kotlin 项目
- en: 'Follow these steps to create your first Kotlin project:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建你的第一个 Kotlin 项目：
- en: 'Open IntelliJ IDEA. On the welcome screen, click on **New Project**. You’ll
    be presented with a dialog to create your new project as shown in the following
    figure:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 IntelliJ IDEA。在欢迎屏幕上，点击 **New Project**。你会看到一个对话框来创建你的新项目，如图所示：
- en: '![Figure 1.1 – New Project dialog](img/B19779_01_01.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – 新建项目对话框](img/B19779_01_01.jpg)'
- en: Figure 1.1 – New Project dialog
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – 新建项目对话框
- en: 'Let’s work through the options in the dialog shown in *Figure 1**.1* as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下方式查看 *图 1.1* 中显示的对话框中的选项：
- en: You start by giving the project a name. In this case, it’s **chapterone**.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你首先需要给你的项目起一个名字。在这种情况下，它是 **chapterone**。
- en: You also specify the location of your project. This is normally where you store
    your working projects. Change the directory to your preferred one.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还需要指定你的项目位置。这通常是存储你的工作项目的地方。将目录更改为你喜欢的目录。
- en: Next, specify your target language from the options provided. In this case,
    we opt for **Kotlin**.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从提供的选项中指定你的目标语言。在这种情况下，我们选择 **Kotlin**。
- en: In the next step, specify your build system. We specify **Gradle**.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一步中，指定你的构建系统。我们指定 **Gradle**。
- en: We also need to specify the Java version that our project is going to use. In
    this case, it’s Java **11**.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要指定我们的项目将要使用的 Java 版本。在这种情况下，它是 Java **11**。
- en: Next, you specify the Gradle DSL to use. For this project, we’ve chosen to use
    **Kotlin**.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，你指定要使用的 Gradle DSL。对于这个项目，我们选择了使用**Kotlin**。
- en: Lastly, you specify the group and artifact IDs that, when combined, form a unique
    identifier for your project.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，你指定了组和工件ID，当它们组合在一起时，形成你项目的唯一标识符。
- en: 'Click on **Create** to finalize creating your new project. The IDE will create
    your project, which might take a few minutes. Once done, you’ll see your project
    as follows:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**以最终创建你的新项目。IDE将创建你的项目，这可能需要几分钟。完成后，你会看到以下项目：
- en: '![Figure 1.2 – Project structure](img/B19779_01_02.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图1.2 – 项目结构](img/B19779_01_02.jpg)'
- en: Figure 1.2 – Project structure
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2 – 项目结构
- en: The IDE creates the project with the project structure seen in *Figure 1**.2*.
    We are mostly interested in the `src/main/kotlin` package, which is where we’ll
    add our Kotlin files.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: IDE创建的项目结构如*图1*.2所示。我们主要对`src/main/kotlin`包感兴趣，这是我们将在其中添加 Kotlin 文件的地方。
- en: Start by right-clicking the **src/main/kotlin** package.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先右键单击**src/main/kotlin**包。
- en: Select **New** and then **New Kotlin Class/File**. Select the **File** option
    from the list that appears and name the file **Main**. The IDE will generate a
    **Main.kt** file.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**新建**然后**新建 Kotlin 类/文件**。从出现的列表中选择**文件**选项，并将文件命名为**Main**。IDE将生成一个**Main.kt**文件。
- en: Now that we’ve created our first Kotlin project and added a Kotlin file, in
    the next section, we will create functions in this file.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了我们的第一个 Kotlin 项目并添加了一个 Kotlin 文件，在下一节中，我们将在这个文件中创建函数。
- en: Creating functions
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建函数
- en: In Kotlin, a function is a block of code that does a specific task. We use the
    `fun` keyword to define functions. Function names should be in camel case and
    descriptive to indicate what the function is doing. Functions can take arguments
    and return values.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kotlin 中，函数是一个执行特定任务的代码块。我们使用`fun`关键字来定义函数。函数名称应该使用驼峰式命名法，并具有描述性，以表明函数正在做什么。函数可以接受参数并返回值。
- en: 'Create the `main()` function in your `Main.kt` file as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的`Main.kt`文件中创建`main()`函数，如下所示：
- en: '[PRE1]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding code, we’ve used the `fun` keyword to define a function with
    the name `main`. Inside the function, we have a `println` statement that prints
    the message `"``Hello Word!"`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用了`fun`关键字来定义一个名为`main`的函数。在函数内部，我们有一个`println`语句，它会打印消息`"Hello World!"`。
- en: You can run the function by pressing the green run icon to the right of the
    function. You’ll see the console window pop up, displaying the message `"``Hello
    World!"`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过按函数右侧的绿色运行图标来运行该函数。你会看到控制台窗口弹出，显示消息`"Hello World!"`。
- en: We’ve learned how to create functions and print output to the console. In the
    next section, we’ll learn how to create classes in Kotlin.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了如何创建函数并向控制台打印输出。在下一节中，我们将学习如何在 Kotlin 中创建类。
- en: Creating classes
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建类
- en: 'To declare a class in Kotlin, we have the `class` keyword. We’re going to create
    a `Recipe` class as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Kotlin 中声明一个类，我们有`class`关键字。我们将创建一个`Recipe`类，如下所示：
- en: '[PRE2]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let’s break down the preceding class:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析前面的类：
- en: We’ve called the class **Recipe** and it has no constructor.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将类命名为**Recipe**，它没有构造函数。
- en: Inside the class, we have a member variable, **ingredients**, which is a **MutableList**
    of Strings. It’s mutable to allow us to add more items to the list. Defining variables
    in a class like this allows us to be able to access the variable anywhere in the
    class.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在类内部，我们有一个成员变量**ingredients**，它是一个字符串的**MutableList**。它是可变的，以便我们可以向列表中添加更多项目。以这种方式在类中定义变量允许我们在类的任何地方访问该变量。
- en: 'We have **addIngredient(name: String)**, which takes in a name as an argument.
    Inside the function, we add the argument to our ingredients list.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '我们有**addIngredient(name: String)**，它接受一个名称作为参数。在函数内部，我们将参数添加到我们的配料列表中。'
- en: Lastly, we have the **getIngredients()** function, which returns an immutable
    list of strings. It simply returns the value of our ingredients list.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们有**getIngredients()**函数，它返回一个不可变的字符串列表。它简单地返回我们配料列表的值。
- en: 'To be able to use the class, we have to modify our main function as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用该类，我们必须按照以下方式修改我们的主函数：
- en: '[PRE3]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The changes can be explained as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这些更改可以解释如下：
- en: First, we create a new instance of the **Recipe** class and assign it to the
    **recipe** variable
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们创建**Recipe**类的一个新实例，并将其分配给**recipe**变量
- en: Then, we call the **addIngredient** method on the **recipe** variable and pass
    in the string **Rice**
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们在**recipe**变量上调用**addIngredient**方法，并传入字符串**Rice**。
- en: Again, we call the **addIngredient** method on the **recipe** variable and pass
    in the string **Chicken**
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 再次强调，我们在**recipe**变量上调用**addIngredient**方法，并传入字符串**Chicken**
- en: Lastly, we call the **getIngredients** method on the **recipe** variable and
    print the result to the console
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们在**recipe**变量上调用**getIngredients**方法，并将结果打印到控制台
- en: 'Run the main function again and your output should be as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行主函数，你的输出应该如下所示：
- en: '![Figure 1.3 – Recipes](img/B19779_01_03.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图1.3 – 食谱](img/B19779_01_03.jpg)'
- en: Figure 1.3 – Recipes
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3 – 食谱
- en: As you can see from the preceding screenshot, the output is a list of ingredients
    that you added! Now you can prepare a nice rice and chicken meal, but in Kotlin!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个截图所示，输出是你添加的食材列表！现在你可以准备一顿美味的米饭和鸡肉餐，但是在Kotlin中！
- en: Kotlin has tons of features and we’ve barely scratched the surface. You can
    check out the official Kotlin documentation ([https://kotlinlang.org/docs/home.html](https://kotlinlang.org/docs/home.html))
    as well to learn more. You’ll also learn more features as you go deeper into this
    book.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin拥有众多特性，我们只是刚刚触及了表面。你还可以查看官方Kotlin文档([https://kotlinlang.org/docs/home.html](https://kotlinlang.org/docs/home.html))以了解更多信息。随着你对这本书的深入学习，你还将了解更多特性。
- en: We’ve learned how to create classes, define top-level variables, and add functions
    to our class. This helps us understand how classes in Kotlin work. In the next
    section, we will learn how to migrate a Java class to Kotlin and some of the tools
    available to use in the migration.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了如何创建类、定义顶级变量，并向我们的类中添加函数。这有助于我们理解Kotlin中类的工作方式。在下一节中，我们将学习如何将Java类迁移到Kotlin以及迁移过程中可用的工具。
- en: Migrating from Java to Kotlin
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Java迁移到Kotlin
- en: 'Are you a Java developer and have your apps in Java? Are you wondering how
    you could get started with Kotlin? Worry not, this is your section. Kotlin offers
    two ways for you:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你是Java开发者并且你的应用是用Java编写的吗？你在想如何开始使用Kotlin吗？不用担心，这部分内容就是为你准备的。Kotlin提供了两种方式供你选择：
- en: '**Java-to-Kotlin migration**: The IDE that we are using, IntelliJ IDEA, has
    a tool for converting existing Java files to Kotlin.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Java到Kotlin迁移**：我们正在使用的IDE，IntelliJ IDEA，有一个将现有Java文件转换为Kotlin的工具。'
- en: '**Interoperability**: Kotlin is highly interoperable with Java code, meaning
    you can have both Java and Kotlin code in the same project. You can continue using
    your favorite Java libraries in your Kotlin projects.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**互操作性**：Kotlin与Java代码高度互操作，这意味着你可以在同一个项目中同时使用Java和Kotlin代码。你可以在Kotlin项目中继续使用你喜欢的Java库。'
- en: 'Let’s see how to migrate a sample Java class to Kotlin using IntelliJ IDEA:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用IntelliJ IDEA将一个示例Java类迁移到Kotlin：
- en: Inside **src/main/kotlin**, open the **Song** class, which has a number of Java
    functions.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**src/main/kotlin**目录下，打开**Song**类，它包含多个Java函数。
- en: 'Right-click the file and you’ll see the **Convert Java to Kotlin** option at
    the bottom. Select this and you’ll be presented the following confirmation dialog:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击文件，你会在底部看到**将Java转换为Kotlin**选项。选择此选项，你将看到一个确认对话框：
- en: '![Figure 1.4 – Confirmation dialog](img/B19779_01_04.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图1.4 – 确认对话框](img/B19779_01_04.jpg)'
- en: Figure 1.4 – Confirmation dialog
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.4 – 确认对话框
- en: At times after a conversion, you might need to make some corrections and that’s
    why we have this dialog. Click **Yes** to proceed and you’ll see your code is
    now in Kotlin. This is a useful feature that handles a major part of the conversion
    to Kotlin and you also learn about the syntax.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在转换之后，有时你可能需要做一些修正，这就是为什么我们有这个对话框。点击**是**以继续，你将看到你的代码现在已经是Kotlin了。这是一个非常有用的特性，它处理了迁移到Kotlin的大部分工作，同时你也会学习到语法。
- en: Now that we’ve learned how to migrate Java code to Kotlin, in the next section
    we will cover some of the features of Kotlin that make it useful for Android developers.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学习了如何将Java代码迁移到Kotlin，在下一节中，我们将介绍一些使Kotlin对Android开发者有用的特性。
- en: Kotlin features for Android developers
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kotlin为Android开发者提供的特性
- en: Now that you have had an introduction to Kotlin, let’s look at why Kotlin is
    a great language specifically for Android development.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经对Kotlin有了初步的了解，让我们来看看为什么Kotlin是专门针对Android开发的优秀语言。
- en: 'Google announced Kotlin as a first-class language for writing Android apps
    back in 2017\. Since then, there has been lots of work done to make sure that
    developers have all they need to develop Android apps in Kotlin. Here are some
    of the features that developers can benefit from:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Google在2017年宣布Kotlin为编写Android应用的顶级语言。从那时起，已经做了大量工作以确保开发者能够获得他们开发Kotlin Android应用所需的一切。以下是开发者可以从中受益的一些特性：
- en: '**Improved developer productivity**: Kotlin’s concise and expressive syntax
    can help developers write code faster and with fewer errors, which can ultimately
    improve developer productivity.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高开发者生产力**: Kotlin 简洁且富有表现力的语法可以帮助开发者更快地编写代码，并减少错误，这最终可以提高开发者的生产力。'
- en: '**Null safety**: Since Kotlin is written with nullability in mind, it helps
    us to avoid crashes related to the Null Pointer Exception.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**空安全**: 由于 Kotlin 是以可空性为设计理念的，这有助于我们避免与空指针异常相关的崩溃。'
- en: '**IDE support**: IDE support has been continuously improving. Android Studio,
    which is built on top of IntelliJ IDEA, has been receiving tons of features such
    as improved autocompletion support to improve the Kotlin experience.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IDE 支持**: IDE 支持一直在持续改进。建立在 IntelliJ IDEA 之上的 Android Studio 已经收到了大量功能，例如改进的自动完成支持，以提升
    Kotlin 的体验。'
- en: '**Jetpack libraries**: Jetpack libraries are available in Kotlin, and older
    ones are being rewritten with Kotlin. These are a set of libraries and tools to
    help Android developers write less code. They address common developer pain points
    and increase developer efficiency.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jetpack 库**: Jetpack 库在 Kotlin 中可用，并且旧的库正在用 Kotlin 重新编写。这些是一套库和工具，旨在帮助 Android
    开发者编写更少的代码。它们解决了常见的开发者痛点，并提高了开发效率。'
- en: '**Jetpack Compose**: Jetpack Compose, a new UI framework, is completely written
    in Kotlin and takes advantage of features of the Kotlin language. It’s a declarative
    UI framework that makes it easy for Android developers to build beautiful UIs
    for their apps.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jetpack Compose**: Jetpack Compose，一个新的 UI 框架，完全用 Kotlin 编写，并利用了 Kotlin 语言的特性。它是一个声明式
    UI 框架，使 Android 开发者能够轻松地为他们的应用程序构建美观的 UI。'
- en: '**Kotlin Gradle DSL**: You are now able to write your Gradle files in Kotlin.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kotlin Gradle DSL**: 您现在可以使用 Kotlin 编写 Gradle 文件。'
- en: '**Coroutine support**: A lot of Jetpack Libraries support coroutines. For example,
    the **ViewModel** class has **viewModelScope** that you can use to scope coroutines
    in the lifecycle of the **ViewModel**. This aligns with the Structured Concurrency
    principles for coroutines. This helps cancel all coroutines when they’re no longer
    needed. Some libraries including Room, Paging 3, and DataStore also support Kotlin
    coroutines.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**协程支持**: 许多 Jetpack 库支持协程。例如，**ViewModel** 类有一个 **viewModelScope**，你可以用它来在
    **ViewModel** 的生命周期中作用域化协程。这与协程的结构化并发原则相一致。这有助于在不再需要时取消所有协程。包括 Room、Paging 3 和
    DataStore 在内的某些库也支持 Kotlin 协程。'
- en: '**Support from Google**: Google continues to invest in Kotlin. Currently, there
    are resources ranging from articles to code labs, documentation, videos, and tutorials
    from the Android DevRel team at Google to assist you in learning new libraries
    and architecture for Android Development.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google 的支持**: Google 持续投资 Kotlin。目前，有从文章到代码实验室、文档、视频和教程的资源，这些资源来自 Google
    的 Android DevRel 团队，以帮助您学习新的库和 Android 开发的架构。'
- en: '**Active community and tooling**: Kotlin has a vibrant and active community
    of developers, which means that there are plenty of unofficial resources, libraries,
    and tools available to help with Android development.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**活跃的社区和工具**: Kotlin 拥有一个充满活力和活跃的开发者社区，这意味着有大量的非官方资源、库和工具可供使用，以帮助进行 Android
    开发。'
- en: Summary
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about the Kotlin programming language and its features.
    We explored the Kotlin features that are useful for Android development and why
    it’s important to Android developers. Additionally, we covered how to migrate
    from Java to Kotlin and some useful tips for developers coming from Java backgrounds.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了 Kotlin 编程语言及其特性。我们探讨了 Kotlin 中对 Android 开发有用的特性，以及为什么它对 Android 开发者来说很重要。此外，我们还介绍了如何从
    Java 迁移到 Kotlin，以及针对 Java 背景的开发者的一些有用提示。
- en: In the next chapter, we’ll learn how to create Android apps with Android Studio.
    We will explore some of the features that Android Studio offers and learn some
    tips and shortcuts.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用 Android Studio 创建 Android 应用程序。我们将探索 Android Studio 提供的一些功能，并学习一些技巧和快捷方式。
