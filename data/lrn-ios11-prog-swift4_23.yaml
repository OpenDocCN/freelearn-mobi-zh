- en: Universal
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通用
- en: We have spent most of this entire book focusing on logic for our app and getting
    the app to work on the iPhone. We have not paid much attention to the app working
    on iPads or other devices. During this chapter, we will look at the app on an
    iPad, as well as updating the app on all iPhone devices. You will be surprised
    at how much is already working and that only minor changes will need to be made
    to get our app to look how we want. We will also take the time to clean up some
    of our design elements to match the design more closely.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这整本书的大部分内容中专注于我们应用程序的逻辑，并让应用程序在iPhone上运行。我们没有太多关注应用程序在iPad或其他设备上的运行情况。在本章中，我们将查看iPad上的应用程序，以及更新所有iPhone设备上的应用程序。你会惊讶于已经有多少功能在运行，并且只需要进行一些小的更改，我们的应用程序就能达到我们想要的外观。我们还将花时间清理一些设计元素，使其更接近设计。
- en: 'In this chapter, we will cover the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Updating our app to be supported on all devices
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新我们的应用程序以支持所有设备
- en: Learning about multitasking and how to code for it
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解多任务处理以及如何为其编写代码
- en: Cleaning up design elements and using global settings
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理设计元素和使用全局设置
- en: Explore
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索
- en: Let's do some design tweaks before we jump into making our layout work for every
    device and start to get this app more polished.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使布局适用于每个设备并开始使这个应用程序更加精致之前，让我们做一些设计调整。
- en: 'Let''s compare what we see on the iPhone 8 with the original design:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们比较一下我们在iPhone 8上看到的内容与原始设计：
- en: '![](img/276a2ef0-2d30-4084-9b40-b274b1196c21.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](img/276a2ef0-2d30-4084-9b40-b274b1196c21.png)'
- en: 'There are a few things we need to fix:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要修复几个问题：
- en: Implement rounded corners
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现圆角
- en: Remove the grey background
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除灰色背景
- en: Navigation bar appears
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航栏出现
- en: Fix spacing
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复间距
- en: Tab bar color
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签栏颜色
- en: 'We will fix all of these, but we will focus on first four right now. We have
    rounded corners in our photo filter list. We can implement these here. Open the
    `ExploreCell.swift` file by hitting *cmd* + *Shift* + *o*, type `ExploreCell`,
    and hit *Enter*. Add the following extension:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将修复所有这些问题，但现在我们将重点关注前四个。在我们的照片滤镜列表中，我们有圆角。我们可以在这里实现这些功能。通过按*cmd* + *Shift*
    + *o*打开`ExploreCell.swift`文件，输入`ExploreCell`并按*Enter*。添加以下扩展：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Add a `roundedCorners()` call inside the `–layoutSubviews` method.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在`-layoutSubviews`方法内部添加一个`roundedCorners()`调用。
- en: 'Now that we have fixed the first issue let''s fix the second by removing the
    background color. Open `Explore.storyboard` and select the `exploreCell` in the
    Outline view. Under the Utility panel, in the Attributes inspector update the
    Background from LetsEat Dark Grey to White Color. The third issue, that the navigation
    bar is displayed, is pretty easy to fix as well.  Open the `ExploreViewController.swift`
    file by hitting *cmd* + *Shift* + *o* and type `ExploreViewController` and hit
    *Enter*. After `viewDidLoad()` add the following method:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经修复了第一个问题，让我们通过移除背景颜色来修复第二个问题。打开`Explore.storyboard`，在大纲视图中选择`exploreCell`。在实用工具面板下，在属性检查器中将背景从“Let'sEat
    暗灰色”更新为“白色”。第三个问题，即导航栏显示，也很容易修复。通过按*cmd* + *Shift* + *o*打开`ExploreViewController.swift`文件，输入`ExploreViewController`并按*Enter*。在`viewDidLoad()`之后添加以下方法：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'That is all we need to do; now, every time we go to this view, we will always
    hide the Navigation bar at the top. Finally, let''s update our app so that our
    tab bar buttons are the correct color. We need to add a new color to our Color
    Set called LetsEat Red and set the Hex value to `D0021B`. Now, open up the `AppDelegate.swift`
    file at the bottom of the file after the last curly brace adds the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们需要做的；现在，每次我们进入这个视图时，我们都会始终隐藏顶部的导航栏。最后，让我们更新我们的应用程序，使我们的标签栏按钮颜色正确。我们需要在我们的颜色集中添加一个新的颜色，称为“Let'sEat
    红色”，并将十六进制值设置为`D0021B`。现在，打开文件底部的`AppDelegate.swift`文件，在最后一个花括号之后添加以下内容：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now inside the `-application:didFinishLaunchingWithOptions:` add the `initialize()`
    method call. Build and run the project by hitting the Play button (or using ⌘
    + *R*).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`-application:didFinishLaunchingWithOptions:`内部添加`initialize()`方法调用。通过点击播放按钮（或使用⌘
    + *R*）构建并运行项目。
- en: '![](img/2823eee5-1d18-42c4-8622-3b40f6b7eaa1.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2823eee5-1d18-42c4-8622-3b40f6b7eaa1.png)'
- en: You should now see we have completed the first four items.  Let's address the
    spacing issue next. Before we do, let's first switch our device to any iPad (I
    typically use the iPad Air 2, but you can pick whatever one you like). Then build
    and run the project by hitting the Play button (or using ⌘ + *R*). You will see
    that it is not too bad currently, but the spacing is different on each device.
    Now, we have set up values that only work for one device. However, we need this
    to work on all devices.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该看到我们已经完成了前四项。接下来，让我们解决间距问题。在我们这样做之前，让我们首先将设备切换到任何 iPad（我通常使用 iPad Air 2，但你可以选择你喜欢的任何一款）。然后通过点击播放按钮（或使用
    ⌘ + *R*）构建并运行项目。你会看到目前还不是太糟糕，但每个设备的间距都不同。现在，我们已经设置了只适用于一个设备的值。然而，我们需要它在所有设备上都有效。
- en: 'Let''s start with our `Explore.storyboard`. First, we need to update some Auto
    Layout for our explore cells. Right now, we have a width set up for our image
    that needs to be more dynamic:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从 `Explore.storyboard` 开始。首先，我们需要更新一些探索单元格的自动布局。目前，我们为图片设置了一个宽度，需要更加动态：
- en: Open up `Explore.storyboard`.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Explore.storyboard`。
- en: Select the image inside the `exploreCell`.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 `exploreCell` 内的图片。
- en: Then, in the Utilities panel, select the Attributes inspector and change the
    Content Mode under the View section to Aspect Fill. This will keep the images
    from looking stretched, while still filling the entire area.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在工具面板中，选择属性检查器，并将视图部分下的内容模式更改为 Aspect Fill。这将防止图片看起来被拉伸，同时仍然填充整个区域。
- en: '![](img/69a6a749-5d34-4618-96e3-8b917e775397.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/69a6a749-5d34-4618-96e3-8b917e775397.png)'
- en: 'These are the only updates we need to make to our explore cell. Next, we are
    going to create a file that will let us know which device is used. We can then
    use this to set up different looks, depending on the device. Let''s create this
    file:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们需要对我们探索单元格进行的唯一更新。接下来，我们将创建一个文件，它将告诉我们使用的是哪种设备。然后我们可以根据设备设置不同的外观。让我们创建这个文件：
- en: Right-click the `Misc` folder and select New File.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 `Misc` 文件夹并选择新建文件。
- en: Inside of the Choose a template for your new file screen, select iOS at the
    top and then Swift File. Then, hit Next.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择新文件模板的屏幕上，顶部选择 iOS，然后选择 Swift 文件。然后点击下一步。
- en: Name this file `Device` and then hit Create.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件命名为 `Device` 并点击创建。
- en: First, we need to update our `import` statement from `import Foundation` to
    `import UIKit`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要将我们的 `import` 语句从 `import Foundation` 更改为 `import UIKit`。
- en: 'Next, add the following to the `import` statement:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将以下内容添加到 `import` 语句中：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Our new struct will now tell us whether we are on an iPad or an iPhone. Having
    a file like this is good because it allows you to avoid having to rewrite the
    same code. To implement this code, all we need to do is add a snippet of code
    like the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新结构将告诉我们我们是在 iPad 上还是 iPhone 上。拥有这样的文件是好的，因为它允许你避免重写相同的代码。为了实现这段代码，我们只需要添加一段像下面的代码片段：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This statement will make our code more readable;  if we need to add any more
    checks for particular devices, we can do it all in the same file. One more great
    use of putting code like this into its file is that, when you build the next app,
    you can just add this file to your project and continue.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '这个语句将使我们的代码更易于阅读；如果我们需要添加任何针对特定设备的检查，我们可以在同一个文件中完成。将代码像这样放入文件中的另一个很好的用途是，当你构建下一个应用程序时，你只需将此文件添加到你的项目中即可继续。 '
- en: 'Next, let''s open the `ExploreViewController.swift` file and make some more
    updates to our code. We need to create a variable that we will use for the spacing
    we want between items. Add the following before our `viewDidLoad()` method:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们打开 `ExploreViewController.swift` 文件并对我们的代码进行一些更新。我们需要创建一个变量，我们将用它来设置我们想要的项目之间的间距。在我们的
    `viewDidLoad()` 方法之前添加以下内容：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, we need to create a function to set up some default Collection View values.
    We also need to create an `initialize()` method to call our setup function. Add
    the following method call inside of the `initialize()` method:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要创建一个函数来设置一些默认的 Collection View 值。同时，我们还需要创建一个 `initialize()` 方法来调用我们的设置函数。在
    `initialize()` 方法内部添加以下方法调用：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, add the following inside of the `private` extension after the `initialize()`
    method:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在 `initialize()` 方法之后，在 `private` 扩展内部添加以下内容：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This method will make sure that we have seven pixels of spacing all the way
    around.  We finally need to create an extension that will let us handle all of
    the spacing programmatically. After the last curly brace add the following extension:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法将确保我们周围有七像素的间距。我们最后需要创建一个扩展，它将允许我们以编程方式处理所有的间距。在最后一个花括号之后添加以下扩展：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Adding the `UICollectionViewDelegateFlowLayout` allows us to update our cell
    item size in code. Let's discuss each part of this extension we just added.  The
    `-collectionView:layout:sizeForItemAtIndexPath:` method is used to set the size
    of the cell. Inside of this method, we are using the struct we created. We are
    checking to see if we are using an iPad or an iPhone.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`UICollectionViewDelegateFlowLayout`允许我们在代码中更新我们的单元格项大小。让我们讨论我们刚刚添加的扩展的每个部分。`-collectionView:layout:sizeForItemAtIndexPath:`方法用于设置单元格的大小。在这个方法内部，我们使用我们创建的结构。我们检查我们是否在使用iPad或iPhone。
- en: In the if part of the `if...else` statement, we are checking whether the screen
    is compact or not. If the screen is compact, then we want a two-column grid; otherwise,
    we want a three-column grid. We are also distributing our items evenly across
    the width of the screen.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在`if...else`语句的if部分，我们检查屏幕是否紧凑。如果是紧凑的屏幕，我们想要两列网格；否则，我们想要三列网格。我们还在屏幕宽度上均匀分布我们的项目。
- en: In the else part of the `if...else` statement, we are just setting up a two-column
    grid on all phones. We get the screen width then subtract `21`, and then we divide
    the result by `2` to distribute the cells evenly.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在`if...else`语句的else部分，我们只是在所有手机上设置了一个两列的网格。我们获取屏幕宽度，然后减去`21`，然后将结果除以`2`以均匀分布单元格。
- en: If you run the project, everything will look good.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行项目，一切看起来都很好。
- en: There is one more thing that's broken if you attempt to rotate the device by
    using ⌘ + right arrow or ⌘ + left arrow. Then, you will see that our layout spacing
    does not update.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试通过使用⌘ + 右箭头或⌘ + 左箭头旋转设备，还有一件事是损坏的。然后，你会看到我们的布局间距没有更新。
- en: 'In order to fix this, we need to make one more update. After `-shouldPerformSegueWithIdentifier:sender:`,
    add the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了修复这个问题，我们需要进行一个额外的更新。在`-shouldPerformSegueWithIdentifier:sender:`之后添加以下内容：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now, build and run your project again by hitting the Play button (or using ⌘
    + *R*) and rotate the device. You will see that our layout spacing now updates.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过点击播放按钮（或使用⌘ + *R*）再次构建并运行你的项目，并旋转设备。你会看到我们的布局间距现在已更新。
- en: '![](img/a7a75460-e4de-483b-804e-2689b9af04fb.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a7a75460-e4de-483b-804e-2689b9af04fb.png)'
- en: Explore is now complete; let's move to our locations list.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 探索现在完成；让我们转到我们的位置列表。
- en: Location listing
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 位置列表
- en: 'Let''s compare our current location listing with the design:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们比较我们的当前位置列表与设计：
- en: '![](img/47bc3ec3-cbb4-40de-9528-1293124f5f06.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/47bc3ec3-cbb4-40de-9528-1293124f5f06.png)'
- en: 'We have one thing that needs fixing: the large title. This is a simple update.
    Open up the `LocationViewController` and, inside of the `initialize()` method,
    add the following code after `manager.fetch()`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一件事需要修复：大标题。这是一个简单的更新。打开`LocationViewController`，在`initialize()`方法中，在`manager.fetch()`之后添加以下代码：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this code, we are setting a new iOS 11 feature `prefersLargeTitles` to `true`. 
    If you build and run, you will see that we are good here now. Next, we will direct
    our attention to the restaurant listing page and go into more detail on the iPad
    and multitasking.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，我们设置了一个新的iOS 11特性`prefersLargeTitles`为`true`。如果你构建并运行，你会看到我们现在做得很好。接下来，我们将注意力转向餐厅列表页面，并更详细地讨论iPad和多重任务。
- en: Restaurant listing
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 餐厅列表
- en: 'For our restaurant listing page, we want a one-column grid on all phones and
    a two-column grid on all iPads. If you build and run the project by hitting the
    Play button (or using ⌘ + *R*) and go to a restaurant listing page, you will see
    that we need to fix the spacing on the iPad to show two columns correctly:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的餐厅列表页面，我们希望在所有手机上显示一列网格，在所有iPad上显示两列网格。如果你通过点击播放按钮（或使用⌘ + *R*）构建并运行项目，并转到餐厅列表页面，你会看到我们需要修复iPad上的间距以正确显示两列：
- en: '![](img/8f84d088-f3dc-432f-920c-a11a99911a6f.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8f84d088-f3dc-432f-920c-a11a99911a6f.png)'
- en: 'Let''s see how we can fix this. Remember that we still want one column on the
    iPhone and a grid on the iPad. Open the `RestaurantViewController.swift` file
    and add the following above the `createData()` method inside of the `private`
    extension:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何修复这个问题。记住，我们仍然想在iPhone上保持一列，在iPad上保持网格。打开`RestaurantViewController.swift`文件，在`private`扩展内部的`createData()`方法上方添加以下内容：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You will get an error for the `setupCollectionView()` method. Ignore it for
    now, as we will fix it shortly. This method checks if the device is an iPad; if
    it is, it calls the method `setupCollectionView()`. Next, add the following under
    the `initialize()` method we just added:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你会在`setupCollectionView()`方法中得到一个错误。现在先忽略它，因为我们很快就会修复它。这个方法检查设备是否是iPad；如果是，它将调用`setupCollectionView()`方法。接下来，在刚刚添加的`initialize()`方法下添加以下内容：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The preceding method is the same thing we previously added in the storyboard
    regarding spacing between items, but here we are implementing it programmatically.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的方法与我们之前在故事板中添加的关于项目之间间距的相同内容，但在这里我们是通过编程实现的。
- en: 'We have a couple of more things that we need to address. First, we are going
    to have the size of the screen calculated for us programmatically. Just like we
    did in `ExploreViewController`, we are going to a new extension to handle our
    Collection View layout. Add the following before our `viewDidLoad()` method:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有几件事情需要解决。首先，我们将以编程方式计算屏幕大小。就像我们在`ExploreViewController`中做的那样，我们将创建一个新的扩展来处理我们的集合视图布局。在`viewDidLoad()`方法之前添加以下内容：
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, add the following at the bottom of the file after the last curly brace:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在文件的底部（在最后一个花括号之后）添加以下内容：
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This code states that, if the device is an iPhone, a one-column grid will be
    shown; if it is an iPad, a two-column grid will be shown. Now, we need to update
    our `viewDidAppear()` method. Currently, we are calling both `createData()` and
    `setupTitle()`. We need to remove both of these calls and just call `initialize()`
    instead. When you are finished, `viewDidAppear()` should look like the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码表明，如果设备是iPhone，将显示一列网格；如果是iPad，将显示两列网格。现在，我们需要更新我们的`viewDidAppear()`方法。目前，我们正在调用`createData()`和`setupTitle()`这两个方法。我们需要移除这两个调用，并仅调用`initialize()`。完成之后，`viewDidAppear()`应该看起来像以下这样：
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s build and run the project for the iPad by hitting the Play button (or
    using ⌘ + *R*):'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击播放按钮（或使用⌘ + *R*）来构建并运行iPad项目：
- en: '![](img/dd2cc7da-f9e2-4133-aaee-1e40debd61be.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dd2cc7da-f9e2-4133-aaee-1e40debd61be.png)'
- en: The two-column grid is what we want for the iPad for our restaurant listing
    page, but we need to verify that we did not change the one-column grid on the
    iPhone. Switch the device back to any iPhone simulator and, after building and
    rerunning the project, you should still see a one-column grid on the iPhone.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 两列网格是我们为餐厅列表页面在iPad上想要的，但我们需要验证我们没有更改iPhone上的单列网格。将设备切换回任何iPhone模拟器，并在构建和重新运行项目后，你应该仍然在iPhone上看到一列网格。
- en: There are still issues with the iPad setup. Switch back to the iPad and build
    and rerun the project by hitting the Play button (or using ⌘ + *R*). When the
    project launches, hit ⌘ + right arrow to rotate the device. Then, return to your
    restaurant listing page. The first issue is that, if you turn the device, the
    cell spacing does not update. Another problem is that, if you multitask, your
    app resizes and you need to make sure that your layout adjusts accordingly.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在iPad设置上仍然存在问题。切换回iPad，通过点击播放按钮（或使用⌘ + *R*）重新构建并运行项目。当项目启动时，按⌘ + 右箭头键旋转设备。然后，返回到你的餐厅列表页面。第一个问题是，如果你旋转设备，单元格间距不会更新。另一个问题是，如果你进行多任务处理，你的应用会调整大小，你需要确保布局相应地调整。
- en: 'To see multitasking, swipe up from the bottom:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看多任务，从底部向上滑动：
- en: '![](img/2b6016ba-1acf-4e27-8d7e-2e7b7bcd0077.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b6016ba-1acf-4e27-8d7e-2e7b7bcd0077.png)'
- en: 'Then, drag the app to the right side of our app:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将应用拖到我们的应用右侧：
- en: '![](img/6210c5f5-0596-4870-a30e-5a5e186f9e87.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6210c5f5-0596-4870-a30e-5a5e186f9e87.png)'
- en: 'Grab the small tab that will be in the middle of this new screen and pull it
    to the left. This tab will split the screen with our app and allow you to take
    over more (or less, if you move it back to the right) of the screen :'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 抓住位于新屏幕中间的小标签，并将其向左拉。这个标签将分割屏幕与我们的应用，并允许你控制更多（或更少，如果你将其移回右侧）的屏幕：
- en: '![](img/c769c07b-6e75-4969-9936-9fba0e76ed73.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c769c07b-6e75-4969-9936-9fba0e76ed73.png)'
- en: When you move the tab to the left, you will notice that the *Let's Eat* app
    does not resize the cells and instead shows one column. Our app needs to adjust
    no matter the size it has available when splitting the screen between our app
    and another app.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将标签页向左移动时，你会注意到*Let's Eat*应用不会调整单元格大小，而是只显示一列。无论屏幕分割到我们的应用和其他应用之间时可用的大小如何，我们的应用都需要进行调整。
- en: 'Resolving these problems is a really simple fix. In your `RestaurantViewController`,
    before the last curly brace, add the following code:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这些问题是一个非常简单的修复。在你的`RestaurantViewController`中，在最后一个花括号之前添加以下代码：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Build and rerun the project by hitting the Play button (or using ⌘ + *R*) and
    rotate the device by using ⌘ + right arrow. You will now see that, every time
    you update the size of the restaurant listing page, the grid updates as well to
    fit the new size. Let's now move to the restaurant detail page.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击播放按钮（或使用⌘ + *R*）构建并重新运行项目，并使用⌘ + 右箭头旋转设备。现在你会看到，每次你更新餐厅列表页面的尺寸时，网格也会相应更新以适应新尺寸。现在让我们转到餐厅详情页面。
- en: Updating restaurant details
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新餐厅详情
- en: 'If you click on a restaurant and go to a restaurant detail page, you should
    see something similar to the following screenshot:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击餐厅并转到餐厅详情页面，你应该会看到以下截图类似的内容：
- en: '![](img/a0d573dc-950d-492c-913b-2a500804ed24.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a0d573dc-950d-492c-913b-2a500804ed24.png)'
- en: We do not have much to fix on this screen.  If you scroll down to the bottom,
    you will see that the image we create is not sized correctly. We need to update
    this so that, depending on the device, we render the appropriate image size. We
    also need to update the Auto Layout. You can try other device sizes; you should
    see the same display on all the screens.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在此屏幕上我们无需做太多修改。如果你向下滚动到底部，你会看到我们创建的图像尺寸不正确。我们需要更新这一点，以便根据设备，渲染适当大小的图像。我们还需要更新自动布局。你可以尝试其他设备尺寸；你应该在所有屏幕上看到相同的显示。
- en: Open `RestaurantDetail.storyboard`.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`RestaurantDetail.storyboard`。
- en: Select the image map using the Outline view and in the Attributes inspector
    update the Content Mode to Aspect Fill.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用大纲视图选择图像映射，并在属性检查器中更新内容模式为“填充比例”。
- en: If you build and run now, you will see that our map now fills the area, but
    our image is stretched. We can leave this but, if this were being submitted, making
    our image size based off device would be a much better way to handle this. We
    are done with cleaning up and making our app ready for the iPad. You should now
    be able to see how powerful Collection Views are and how they make it easy to
    have a custom look with very little code.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在构建并运行，你会看到我们的地图现在填充了区域，但我们的图像被拉伸了。我们可以保留这一点，但如果这是要提交的，根据设备调整图像大小将是一种更好的处理方式。我们已经完成了清理工作，使我们的应用程序准备好在iPad上使用。你现在应该能够看到集合视图有多么强大，以及它们如何用很少的代码实现自定义外观。
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You now have an app that functions perfectly on all devices. You can see how
    using the Collection View gives your app some variety on different devices with
    very little code. As you get more and more comfortable with this, you will find
    other ways to make your app look unique on various devices.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在有一个在所有设备上都能完美运行的应用程序。你可以看到使用集合视图如何让你的应用程序在不同设备上具有一些多样性，而且代码很少。随着你对这个越来越熟悉，你会找到其他方法让你的应用程序在各个设备上看起来独特。
- en: We could submit the app as-is right now and it would be perfectly fine, but
    why not take advantage of some additional features you can implement?
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以提交应用程序，它将完全正常，但为什么不利用一些你可以实现的功能呢？
- en: In the next chapter, we will do just that by creating an iMessage app for our
    app.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过为我们的应用程序创建一个iMessage应用程序来实现这一点。
