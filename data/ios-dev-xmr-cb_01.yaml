- en: Chapter 1. Development Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章. 开发工具
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Installing prerequisites
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装必备条件
- en: Creating an iOS project with Xamarin Studio
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Xamarin Studio 创建 iOS 项目
- en: Interface Builder
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Interface Builder
- en: Creating the UI
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 UI
- en: Accessing the UI with Outlets
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Outlets 访问 UI
- en: Adding Actions to controls
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向控件添加操作
- en: Compiling an iOS project
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译 iOS 项目
- en: Debugging our application
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试我们的应用程序
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: One of the most important things professionals care about is the tools that
    are required to complete their work with. Just like carpenters need a chisel to
    scrape wood, or photographers need a camera to capture light, we developers need
    certain tools which we cannot work without.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 专业人士最关心的一件重要事情是完成他们工作所需的工具。就像木匠需要凿子来刮木料，或者摄影师需要相机来捕捉光线一样，我们开发者需要某些工具，没有这些工具我们无法工作。
- en: In this chapter, we will provide information on what **IDEs** (**Integrated
    Development Environments**) and **SDKs** (**Software Development Kits**) are needed
    to develop applications for iOS, Apple's operating system, for the company's mobile
    devices. We will describe what the role of every tool in the development cycle
    is, and go through the features that are essential to develop our first application.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将提供有关开发 iOS 应用程序（Apple 的移动设备操作系统）所需的 **IDEs（集成开发环境**）和 **SDKs（软件开发工具包**）的信息。我们将描述每个工具在开发周期中的作用，并介绍开发我们的第一个应用程序所必需的功能。
- en: 'The following are the tools needed to develop applications with Xamarin.iOS:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是需要使用 Xamarin.iOS 开发应用程序的工具：
- en: '**An Apple Mac computer running at least the Lion (10.7.*) operating system**:
    The essential programs we need cannot be installed on other computer platforms.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**至少运行 Lion (10.7.*) 操作系统的 Apple Mac 计算机**：我们需要的必需程序不能安装在其他计算机平台上。'
- en: Note
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Xamarin also offers Visual Studio development integration for their products.
    A Mac computer is still required for compiling, testing, debugging, and distributing
    the application. More information can be found on Xamarin's website at [http://docs.xamarin.com/guides/ios/getting_started/introduction_to_xamarin_ios_for_visual_studio/](http://docs.xamarin.com/guides/ios/getting_started/introduction_to_xamarin_ios_for_visual_studio/).
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Xamarin 还为其产品提供 Visual Studio 开发集成。编译、测试、调试和分发应用程序仍需要一台 Mac 计算机。更多信息可以在 Xamarin
    网站上找到，链接为 [http://docs.xamarin.com/guides/ios/getting_started/introduction_to_xamarin_ios_for_visual_studio/](http://docs.xamarin.com/guides/ios/getting_started/introduction_to_xamarin_ios_for_visual_studio/)。
- en: '**Latest iOS SDK**: To be able to download iOS SDK, a developer must be registered
    as an Apple developer. iOS SDK, among other things, includes two essential components:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最新 iOS SDK**：要能够下载 iOS SDK，开发者必须注册为 Apple 开发者。iOS SDK 包括两个基本组件，以及其他内容：'
- en: '**Xcode**: This is Apple''s IDE for developing native applications for iOS
    and Mac with the *Objective-C* programming language.'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Xcode**：这是 Apple 使用 *Objective-C* 编程语言为 iOS 和 Mac 开发原生应用程序的 IDE。'
- en: '**iOS Simulator**: This is an essential program to debug iOS apps on the computer,
    without the need of a device. Note that there are many iOS features that do not
    work on the simulator. Hence, a device is needed if an app uses these features.'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**iOS 模拟器**：这是一个在计算机上调试 iOS 应用程序的基本程序，无需设备。请注意，许多 iOS 功能在模拟器上无法工作。因此，如果应用程序使用这些功能，则需要设备。'
- en: Note
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Both the registration and SDK download are free of charge from Apple's developer
    portal ([http://developer.apple.com](http://developer.apple.com)). If we want
    to run and debug our apps on the device or distribute them on the App Store, we
    need to enroll to iOS Developer Program, which requires a subscription fee.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注册和 SDK 下载均可在 Apple 开发者门户([http://developer.apple.com](http://developer.apple.com))免费进行。如果我们想在设备上运行和调试我们的应用程序或在
    App Store 上分发它们，我们需要注册 iOS 开发者计划，这需要订阅费。
- en: '**Xamarin Installer**: Xamarin offers all their necessary tools in one installation
    bundle. This bundle includes the Xamarin.iOS SDK and Xamarin Studio, the IDE for
    developing iOS applications with C#. A free registration is required for downloading
    the Xamarin Installer, and it can be found by clicking on the link [http://xamarin.com/download](http://xamarin.com/download).'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Xamarin 安装程序**：Xamarin 提供了一个包含所有必要工具的安装包。此包包括 Xamarin.iOS SDK 和用于使用 C# 开发
    iOS 应用程序的 IDE——Xamarin Studio。下载 Xamarin 安装程序需要免费注册，可以通过点击链接 [http://xamarin.com/download](http://xamarin.com/download)
    获取。'
- en: This chapter will also describe how to create our first iPhone project with
    Xamarin Studio, construct its UI with Xcode, and access the app's user interface
    from within our code, with the concepts of **Outlets** and **Actions**.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还将描述如何使用Xamarin Studio创建我们的第一个iPhone项目，使用Xcode构建其UI，以及如何在我们的代码中访问应用程序的用户界面，使用**Outlets**和**Actions**的概念。
- en: Last, but not least, we will learn how to compile our app, the available compilation
    options we have, and how to debug on the simulator.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我们将学习如何编译我们的应用程序，可用的编译选项以及如何在模拟器上进行调试。
- en: Installing prerequisites
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装先决条件
- en: This section gives you information on how to download and install the necessary
    tools to develop with Xamarin.iOS.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 本节提供了有关如何下载和安装使用Xamarin.iOS进行开发的必要工具的信息。
- en: Getting ready
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We need to download all the necessary components on our computer. The first
    thing to do is register as an Apple developer on [http://developer.apple.com](http://developer.apple.com).
    The registration is free and easy, and it provides access to all the necessary
    development resources. After the registration is confirmed through e-mail, we
    can login and download the iOS SDK from the address [https://developer.apple.com/devcenter/ios/index.action#downloads](https://developer.apple.com/devcenter/ios/index.action#downloads).
    At the time of writing, Xcode's latest version is 5.0.1 and iOS SDK's latest version
    is 7.0.3.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在我们的计算机上下载并安装所有必要的组件。首先，需要在 [http://developer.apple.com](http://developer.apple.com)
    上注册为Apple开发者。注册是免费且简单的，并提供访问所有必要的发展资源。通过电子邮件确认注册后，我们可以登录并从地址 [https://developer.apple.com/devcenter/ios/index.action#downloads](https://developer.apple.com/devcenter/ios/index.action#downloads)
    下载iOS SDK。在撰写本文时，Xcode的最新版本是5.0.1，iOS SDK的最新版本是7.0.3。
- en: How to do it...
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To prepare our computer for iOS development, we need to download and install
    the necessary components in the following order:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的计算机准备好进行iOS开发，我们需要按照以下顺序下载和安装必要的组件：
- en: '**Xcode and iOS SDK**: A login to the Mac App Store is required. You can either
    search for Xcode in the App Store or click on the **Download Xcode** button in
    the iOS developer portal''s download section. After the download is complete,
    follow the onscreen instructions to install Xcode. The following screenshot shows
    Xcode in the Mac App Store:![How to do it...](img/8924OT_01_01.jpg)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Xcode和iOS SDK**: 需要登录Mac App Store。您可以在App Store中搜索Xcode，或者在iOS开发者门户的下载部分点击**下载Xcode**按钮。下载完成后，按照屏幕上的说明安装Xcode。以下截图显示了Mac
    App Store中的Xcode：![如何操作...](img/8924OT_01_01.jpg)'
- en: '**Xamarin Starter Edition**: Download and run the Xamarin Starter Edition from
    Xamarin''s website [http://xamarin.com/download](http://xamarin.com/download).
    Follow the onscreen instructions to install Xamarin Studio and Xamarin.iOS.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Xamarin入门版**: 从Xamarin网站 [http://xamarin.com/download](http://xamarin.com/download)
    下载并运行Xamarin入门版。按照屏幕上的说明安装Xamarin Studio和Xamarin.iOS。'
- en: Note
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Xamarin Starter Edition is free, but there are some restrictions, such as
    a limit on the maximum app bundle size and no Visual Studio support. It does support,
    however, deploying to a device and to the App Store. At the time of writing, all
    recipes shown in this book are fully supported by the Starter Edition, except
    for the *Using WCF services* recipe in [Chapter 6](ch06.html "Chapter 6. Web Services"),
    *Web Services*. A Business or Enterprise Edition is needed for WCF support.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Xamarin入门版是免费的，但有一些限制，例如最大应用程序包大小的限制，并且没有Visual Studio支持。然而，它支持部署到设备和App Store。在撰写本文时，本书中显示的所有配方都完全由入门版支持，除了[第6章](ch06.html
    "第6章。Web服务")中的*使用WCF服务*配方，*Web服务*。需要商业或企业版才能支持WCF。
- en: How it works...
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Now that we have everything ready, let's see what each component is needed for.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了，让我们看看每个组件需要什么。
- en: Xcode
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Xcode
- en: Xcode is Apple's IDE for developing applications for both iOS and Mac platforms.
    It is targeted on the Objective-C programming language, which is the main language
    to program in with the iOS SDK. Since Xamarin.iOS is an SDK for the C# language,
    one might ask what we would need it for. Apart from providing various tools for
    debugging iOS apps, Xcode provides us with the **Organizer** window. Shown in
    the following screenshot, we can use it to view a device's console logs, install
    and manage the necessary provisioning profiles, and even view the device's crash
    logs. To open the **Organizer** window, navigate to **Window** | **Organizer**
    on the menu bar, or press *Cmd* + *Shift* + *2* on the keyboard.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode是苹果为iOS和Mac平台开发应用程序的IDE。它针对Objective-C编程语言，这是使用iOS SDK进行编程的主要语言。由于Xamarin.iOS是C#语言的SDK，人们可能会问我们为什么需要它。除了提供各种调试iOS应用的工具外，Xcode还为我们提供了**组织者**窗口。如以下截图所示，我们可以使用它来查看设备的控制台日志、安装和管理必要的配置文件，甚至查看设备的崩溃日志。要打开**组织者**窗口，请转到菜单栏上的**窗口**
    | **组织者**，或在键盘上按*Cmd* + *Shift* + *2*。
- en: '![Xcode](img/8924OT_01_02.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![Xcode](img/8924OT_01_02.jpg)'
- en: Interface Builder
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 接口构建器
- en: The second component is Interface Builder. This is the user interface designer,
    which was formerly a standalone application. Starting with Xcode 4.0, it is integrated
    into the IDE. Interface Builder provides all the necessary functionality to construct
    an application user interface. It is also quite different from what .NET developers
    are accustomed to.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个组件是接口构建器。这是一个用户界面设计器，它以前是一个独立的应用程序。从Xcode 4.0开始，它被集成到IDE中。接口构建器提供了构建应用程序用户界面所需的所有必要功能。它也与.NET开发者习惯的内容有很大不同。
- en: iOS Simulator
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: iOS模拟器
- en: 'The third component is iOS Simulator. It is exactly what its name suggests:
    a device simulator that we can use to run our apps on, without the need for an
    actual device. The most important thing about iOS Simulator is that it has the
    option of simulating older iOS versions (if they are installed on the computer),
    both iPhone and iPad interfaces and device orientations. However, the simulator
    lacks some device features that are dependent on hardware such as the compass
    or accelerometer. Applications using these features must be tested and debugged
    on an actual device.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 第三部分是iOS模拟器。正如其名称所暗示的那样：一个设备模拟器，我们可以用它来运行我们的应用，而无需实际设备。iOS模拟器最重要的特点是它可以选择模拟较旧的iOS版本（如果它们已安装在计算机上），包括iPhone和iPad界面以及设备方向。然而，模拟器缺少一些依赖于硬件的设备功能，例如指南针或加速度计。使用这些功能的应用程序必须在实际设备上进行测试和调试。
- en: Xamarin.iOS is the SDK that allows .NET developers to develop apps for iOS,
    using the C# programming language. All APIs available to Objective-C developers
    are also available to C# developers through Xamarin.iOS. It is not a standalone
    framework with its own APIs for, say, user interfaces. A Xamarin.iOS programmer
    can use the same UI elements as an Objective-C programmer, along with the added
    benefits of C# such as generics, LINQ, and asynchronous programming with async/await.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.iOS是允许.NET开发者使用C#编程语言为iOS开发应用程序的SDK。所有对Objective-C开发者可用的API也通过Xamarin.iOS对C#开发者可用。它不是一个具有自己API的独立框架，例如用户界面。Xamarin.iOS程序员可以使用与Objective-C程序员相同的UI元素，同时还可以享受C#带来的额外好处，如泛型、LINQ以及使用async/await的异步编程。
- en: There's more...
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Applications developed with Xamarin.iOS have the same chances of making it to
    the App Store as all other applications developed with the native Objective-C
    programming language. This means that if an app does not conform to Apple's strict
    policy about app acceptance, it will fail, whether is written in Objective-C or
    C#. The Xamarin.iOS team has done a great job in creating an SDK that leaves the
    developer to worry only about the design and best practice of the code, and nothing
    else.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Xamarin.iOS开发的应用程序与使用原生Objective-C编程语言开发的所有其他应用程序进入App Store的机会相同。这意味着如果一个应用不符合苹果对应用接受度的严格政策，它将失败，无论它是用Objective-C还是C#编写的。Xamarin.iOS团队在创建一个SDK方面做得很好，让开发者只需担心设计和代码的最佳实践，而无需担心其他任何事情。
- en: Useful links
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 有用链接
- en: 'The following are useful links that you can go through:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些有用的链接，您可以浏览：
- en: '**Apple iOS developer portal**: [http://developer.apple.com/devcenter/ios/index.action](http://developer.apple.com/devcenter/ios/index.action)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**苹果iOS开发者门户**：[http://developer.apple.com/devcenter/ios/index.action](http://developer.apple.com/devcenter/ios/index.action)'
- en: '**Xamarin.iOS**: [http://xamarin.com/ios](http://xamarin.com/ios)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Xamarin.iOS**：[http://xamarin.com/ios](http://xamarin.com/ios)'
- en: '**Xamarin installation guide for Mac**: [http://docs.xamarin.com/guides/ios/getting_started/installation/mac/](http://docs.xamarin.com/guides/ios/getting_started/installation/mac/)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Xamarin Mac 安装指南**：[http://docs.xamarin.com/guides/ios/getting_started/installation/mac/](http://docs.xamarin.com/guides/ios/getting_started/installation/mac/)'
- en: '**Information about Apple developer tools**: [http://developer.apple.com/technologies/tools/xcode.html](http://developer.apple.com/technologies/tools/xcode.html)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关于Apple开发者工具的信息**：[http://developer.apple.com/technologies/tools/xcode.html](http://developer.apple.com/technologies/tools/xcode.html)'
- en: Updates
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新
- en: Xamarin Studio has a feature for checking available updates. Whenever a program
    starts, it checks for updates of Xamarin.iOS. It can be turned off, but this is
    not suggested since it helps with staying up to date with the latest versions.
    It can be found under **Xamarin Studio** | **Check for Updates**.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin Studio有一个检查可用更新的功能。每次程序启动时，它都会检查Xamarin.iOS的更新。它可以关闭，但这样做不建议，因为它有助于保持与最新版本的同步。它可以在
    **Xamarin Studio** | **检查更新** 下找到。
- en: See also
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Compiling an iOS project* and *Debugging our application* recipes
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*编译iOS项目* 和 *调试我们的应用程序* 菜谱'
- en: The *Preparing our app for the App Store* recipe in [Chapter 14](ch14.html "Chapter 14. Deploying"),
    *Deploying*
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第14章 *部署* 的 *为App Store准备我们的应用* 菜谱中，[第14章](ch14.html "第14章。部署")
- en: Creating an iOS project with Xamarin Studio
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Xamarin Studio创建iOS项目
- en: In this recipe, we will discuss how to create our first iOS project with Xamarin
    Studio.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将讨论如何使用Xamarin Studio创建我们的第一个iOS项目。
- en: Getting ready...
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中...
- en: Now that we have all the prerequisites installed, we will discuss how to create
    our first iOS project with Xamarin Studio.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了所有先决条件，我们将讨论如何使用Xamarin Studio创建我们的第一个iOS项目。
- en: Start Xamarin Studio. It can be found in the `Applications` folder. Xamarin
    Studio's default project location is `/Users/{yourusername}/Projects`. If it does
    not exist on the hard disk, it will be created when we create out first project.
    If you want to change the folder, go to **Xamarin Studio** | **Preferences** from
    the menu bar. Select **Load/Save** in the pane on the left, enter the preferred
    location for the projects in the **Default Solution** **location** field, and
    click on **OK**.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 启动Xamarin Studio。它可以在 `应用程序` 文件夹中找到。Xamarin Studio的默认项目位置是 `/Users/{你的用户名}/Projects`。如果硬盘上不存在，则在创建我们的第一个项目时创建。如果您想更改文件夹，请从菜单栏选择
    **Xamarin Studio** | **首选项**。在左侧面板中选择 **加载/保存**，在 **默认解决方案** **位置** 字段中输入项目首选位置，然后单击
    **确定**。
- en: '![Getting ready...](img/8924OT_01_03.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![准备中...](img/8924OT_01_03.jpg)'
- en: How to do it...
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The first thing that is loaded when starting Xamarin Studio is its start page.
    Perform the following steps to create an iOS project with Xamarin Studio:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当启动Xamarin Studio时，首先加载的是其起始页面。执行以下步骤以使用Xamarin Studio创建iOS项目：
- en: Navigate to **File** | **New** | **Solution...** from the menu bar. A window
    that provides us with the available project options will appear.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从菜单栏导航到 **文件** | **新建** | **解决方案...**。将出现一个窗口，提供给我们可用的项目选项。
- en: In the pane on the left of this window, go to **C#** | **iOS** | **iPhone**.
    The iPhone project templates will be presented on the middle pane.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此窗口左侧的面板中，转到 **C#** | **iOS** | **iPhone**。iPhone项目模板将在中间面板中显示。
- en: Select **Single View Application**.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **单视图应用程序**。
- en: Finally, enter `MyFirstiOSProject` for **Solution name** and click on **OK**.
    The following screenshot displays the **New Solution** window:![How to do it...](img/8924OT_01_04.jpg)
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，输入 `MyFirstiOSProject` 作为 **解决方案名称** 并单击 **确定**。以下截图显示了 **新建解决方案** 窗口：![如何做...](img/8924OT_01_04.jpg)
- en: That was it. You just created your first iPhone project. You can build and run
    it; iOS Simulator will start, with a blank light-gray screen nevertheless.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 就这么简单。您已经创建了您的第一个iPhone项目。您可以构建并运行它；iOS模拟器将启动，但屏幕仍然是空白浅灰色。
- en: Note
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The project templates may be different from the ones shown in the preceding
    screenshot.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 项目模板可能与前面截图中的不同。
- en: How it works...
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Let's see what goes on behind the scenes.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看幕后发生了什么。
- en: When Xamarin Studio creates a new iOS project, it creates a series of files.
    The solution files can be viewed in the **Solution** pad on the left side of Xamarin
    Studio window. If the **Solution** pad is not visible, it can be activated by
    checking on **View** | **Pads** | **Solution** from the menu bar.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当Xamarin Studio创建一个新的iOS项目时，它会创建一系列文件。解决方案文件可以在Xamarin Studio窗口左侧的 **解决方案**
    面板中查看。如果 **解决方案** 面板不可见，可以通过从菜单栏选择 **视图** | **面板** | **解决方案** 来激活它。
- en: 'The files shown in the following screenshot are the essential files that form
    an iPhone project:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了构成 iPhone 项目的关键文件：
- en: '![How it works...](img/8924OT_01_05.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/8924OT_01_05.jpg)'
- en: MyFirstiOSProjectViewController.xib
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MyFirstiOSProjectViewController.xib
- en: '`MyFirstiOSProjectViewController.xib` is the file that contains the view of
    the application. XIB files are basically XML files with a specific structure that
    Xcode can read. The files contain information about the user interface, such as
    the type of controls it contains, their properties, and Outlets.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`MyFirstiOSProjectViewController.xib` 是包含应用程序视图的文件。XIB 文件基本上是 Xcode 可以读取的具有特定结构的
    XML 文件。这些文件包含有关用户界面的信息，例如它包含的控件类型、它们的属性和出口。'
- en: Note
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If `MyFirstiPhoneProjectViewController.xib`, or any other file with the .xib
    suffix, is double-clicked, Xamarin Studio automatically opens the file in Xcode's
    Interface Builder.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果双击 `MyFirstiPhoneProjectViewController.xib` 或任何具有 .xib 后缀的文件，Xamarin Studio
    将自动在 Xcode 的 Interface Builder 中打开该文件。
- en: When we create a new interface with Interface Builder and save it, it is saved
    in the XIB format.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用 Interface Builder 创建一个新的界面并保存时，它将以 XIB 格式保存。
- en: MyFirstiOSProjectViewController.cs
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MyFirstiOSProjectViewController.cs
- en: '`MyFirstiOSProjectViewController.cs` is the file that implements the view''s
    functionality. These are the contents of the file when it is created:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`MyFirstiOSProjectViewController.cs` 是实现视图功能的文件。以下是创建文件时的内容：'
- en: '[PRE0]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Xamarin.iOS was formerly known as MonoTouch. For proper code compatibility,
    the namespaces have not been renamed.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.iOS 以前被称为 MonoTouch。为了确保代码兼容性，命名空间没有被重命名。
- en: 'The code in this file contains the class which corresponds to the view that
    will be loaded, along with some default method that overrides. These methods are
    the ones that we will use more frequently when we create view controllers. A brief
    description of each method is listed as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件中的代码包含与将要加载的视图相对应的类，以及一些默认方法，这些方法会被覆盖。这些是我们创建视图控制器时将更频繁使用的方法。以下是每个方法的简要描述：
- en: '**ViewDidLoad**: This method is called when the view of the controller is loaded.
    This is the method we use to initialize any additional component.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ViewDidLoad**：当控制器的视图加载时，会调用此方法。这是我们用来初始化任何附加组件的方法。'
- en: '**DidReceiveMemoryWarning**: This method is called when the app receives a
    memory warning. This method is responsible for releasing resources that are not
    needed at the time.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DidReceiveMemoryWarning**：当应用程序收到内存警告时，会调用此方法。此方法负责释放当时不需要的资源。'
- en: MyFirstiOSProjectViewController.designer.cs
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MyFirstiOSProjectViewController.designer.cs
- en: '`MyFirstiOSProjectViewController.designer.cs` is the file that holds our main
    window''s class information in C# code. Xamarin Studio creates one `.designer.cs`
    file for every XIB that is added in a project. The file is autogenerated every
    time we save a change in our XIB through Interface Builder. This is taken care
    of by Xamarin Studio so that the changes we make in our interface are reflected
    right away in our code. We must not make changes to this file directly, since
    when the corresponding XIB is saved with Interface Builder, they will be lost.
    Also, if nothing is saved through Interface Builder and if changes are made to
    it manually, it will most likely result in a compilation error.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`MyFirstiOSProjectViewController.designer.cs` 是一个文件，它以 C# 代码的形式保存了我们主窗口的类信息。Xamarin
    Studio 为项目中添加的每个 XIB 创建一个 `.designer.cs` 文件。每次我们通过 Interface Builder 保存 XIB 中的更改时，该文件都会自动生成。Xamarin
    Studio 会处理这些更改，以确保我们在界面中做出的更改能够立即反映在代码中。我们不得直接修改此文件，因为当相应的 XIB 通过 Interface Builder
    保存时，这些更改将会丢失。此外，如果通过 Interface Builder 没有保存任何内容，并且手动修改了它，很可能会导致编译错误。'
- en: 'These are the contents of the file when a new project is created:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新项目时文件的内容如下：
- en: '[PRE1]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在 [http://www.packtpub.com](http://www.packtpub.com) 的账户中下载您购买的所有 Packt
    书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问 [http://www.packtpub.com/support](http://www.packtpub.com/support)
    并注册以将文件直接通过电子邮件发送给您。
- en: This file contains the other partial declaration of our `MyFirstiOSProjectViewController`
    class. It is decorated with the `Register` attribute.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件包含 `MyFirstiOSProjectViewController` 类的其他部分声明。它被 `Register` 属性装饰。
- en: The `Register` attribute is used to expose classes to the underlying Objective-C
    runtime. The string parameter declares by what name our class will be exposed
    to the runtime. It can be whatever name we want it to be, but it is a good practice
    to always set it to our C# class' name. The attribute is used heavily in the internals
    of Xamarin.iOS, since it is what binds all the native `NSObject` classes with
    their C# counterparts.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`Register` 属性用于将类暴露给底层 Objective-C 运行时。字符串参数声明我们的类将通过什么名称暴露给运行时。它可以是我们想要的任何名称，但始终将其设置为我们的
    C# 类的名称是一个好习惯。该属性在 Xamarin.iOS 的内部使用得非常频繁，因为它将所有原生 `NSObject` 类与其 C# 对应项绑定在一起。'
- en: Note
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`NSObject` is a root class or base class. It is the equivalent of `System.Object`
    in the .NET world. The only difference between the two is that all .NET objects
    inherit from `System.Object`, but most, not all, Objective-C objects inherit from
    `NSObject` in Objective-C. The C# counterparts of all native objects that inherit
    from `NSObject` also inherit from its Xamarin.iOS `NSObject` counterpart.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`NSObject` 是一个根类或基类。它在 .NET 世界中相当于 `System.Object`。两者之间的唯一区别是，所有 .NET 对象都继承自
    `System.Object`，但在 Objective-C 中，大多数而不是所有 Objective-C 对象都继承自 `NSObject`。所有从 `NSObject`
    继承的本地对象的 C# 对应项也继承自其 Xamarin.iOS `NSObject` 对应项。'
- en: AppDelegate.cs
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AppDelegate.cs
- en: 'The `AppDelegate.cs` file contains the `AppDelegate` class. The contents of
    the file are listed below:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`AppDelegate.cs` 文件包含 `AppDelegate` 类。文件的以下内容列出：'
- en: '[PRE2]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The first part is familiar to .NET developers and consists of the appropriate
    `using` directives that import the required namespaces to use. Consider the following
    code:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部分对 .NET 开发者来说很熟悉，包括适当的 `using` 指令，用于导入使用所需的命名空间。考虑以下代码：
- en: '[PRE3]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The first three `using` directives allow us to use the specific and familiar
    namespaces from the .NET world with Xamarin.iOS.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 前三个 `using` 指令允许我们使用 .NET 世界中特定且熟悉的命名空间，与 Xamarin.iOS 一起使用。
- en: Note
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`System`, `System.Collections.Generic`, `System.Linq`: Although the functionality
    that the three namespaces provide is almost identical to their well-known .NET
    counterparts, they are included in assemblies specifically created for use with
    Xamarin.iOS and shipped with it, of course. An assembly compiled with .NET cannot
    be directly used in a Xamarin.iOS project.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`System`、`System.Collections.Generic`、`System.Linq`：尽管这三个命名空间提供的功能几乎与它们知名的
    .NET 对应项相同，但它们包含在专门为与 Xamarin.iOS 一起使用而创建的程序集中，并且当然与它一起分发。使用 .NET 编译的程序集不能直接用于
    Xamarin.iOS 项目。'
- en: The `MonoTouch.Foundation` namespace is a wrapper around the native Objective-C
    Foundation Framework, which contains classes that provide basic functionality.
    These objects' names share the same NS prefix that is found in the native Foundation
    Framework. Some examples are `NSObject`, `NSString`, `NSValue`, and so on. Apart
    from the NS-prefixed objects, the `MonoTouch.Foundation` namespace contains all
    of the attributes that are used for binding to native objects, such as the `Outlet`
    and `Register` attributes we saw earlier. The `MonoTouch.UIKit` namespace is a
    wrapper around the native Objective-C UIKit Framework. As its name suggests, the
    namespace contains classes, delegates, and events that provide us with interface
    functionality. Almost all the objects' names share the same UI prefix. It should
    be clear at this point that these two namespaces are essential for all Xamarin.iOS
    apps, and their objects will be used quite frequently.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`MonoTouch.Foundation` 命名空间是对原生 Objective-C Foundation 框架的包装，其中包含提供基本功能类的封装。这些对象的名称与在原生
    Foundation 框架中找到的相同 NS 前缀相同。例如，`NSObject`、`NSString`、`NSValue` 等等。除了带有 NS 前缀的对象外，`MonoTouch.Foundation`
    命名空间还包含用于绑定到原生对象的全部属性，例如我们之前看到的 `Outlet` 和 `Register` 属性。`MonoTouch.UIKit` 命名空间是对原生
    Objective-C UIKit 框架的包装。正如其名称所暗示的，该命名空间包含提供界面功能的类、代理和事件。几乎所有对象的名称都共享相同的 UI 前缀。此时应该清楚，这两个命名空间对于所有
    Xamarin.iOS 应用程序都是必不可少的，并且它们的对象将被频繁使用。'
- en: The class inherits from the `UIApplicationDelegate` class, qualifying it as
    our app's delegate object.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 该类继承自 `UIApplicationDelegate` 类，使其成为我们应用程序的代理对象。
- en: Note
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The concept of a delegate object in the Objective-C world is somewhat different
    from `delegate` in C#. It will be explained in detail in [Chapter 2](ch02.html
    "Chapter 2. User Interface – Views"), *User Interface – Views*.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Objective-C 世界中委托对象的概念与 C# 中的 `delegate` 有所不同。它将在第 2 章（[Chapter 2](ch02.html
    "Chapter 2. 用户界面 – 视图")，*用户界面 – 视图*）中详细解释。
- en: 'The `AppDelegate` class contains two fields and one method:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`AppDelegate` 类包含两个字段和一个方法：'
- en: '[PRE4]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `UIWindow` object defines the main window of our application, while the
    `MyFirstiOSProjectViewController` object is the variable that will hold the app's
    view controller.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`UIWindow` 对象定义了我们应用程序的主窗口，而 `MyFirstiOSProjectViewController` 对象是用于保存应用程序视图控制器的变量。'
- en: Note
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: An iOS app typically has only one window of type `UIWindow`. `UIWindow` is the
    first control that is displayed when an app starts, and every subsequent view
    is hierarchically added below it.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: iOS 应用通常只有一个 `UIWindow` 类型的窗口。`UIWindow` 是应用程序启动时首先显示的控制项，后续的每个视图都按层次结构添加在其下方。
- en: The `FinishedLaunching` method, as its name suggests, is called when the app
    has completed its initialization process. This is the method where we must present
    the user interface to the user. The implementation of this method must be lightweight;
    if it does not return in time from the moment it is called, iOS will terminate
    the app. This provides faster user interface loading time to the user by preventing
    developers from performing complex and long-running tasks upon initialization,
    such as connecting to a web service to receive data. The `app` parameter is the
    application's `UIApplication` object, which is also accessible through the `static`
    property `UIApplication.SharedApplication`. The `options` parameter may or may
    not contain information about the way the app was launched. We do not need it
    for now.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名称所示，`FinishedLaunching` 方法在应用程序完成初始化过程时被调用。这是我们向用户展示用户界面的方法。此方法的实现必须轻量级；如果它不能在调用后及时返回，iOS
    将终止应用程序。这通过防止开发者在初始化时执行复杂和长时间运行的任务（例如连接到网络服务以接收数据）来为用户提供更快的用户界面加载时间。`app` 参数是应用程序的
    `UIApplication` 对象，也可以通过 `static` 属性 `UIApplication.SharedApplication` 访问。`options`
    参数可能包含有关应用程序启动方式的信息，但目前我们不需要它。
- en: 'The default implementation of the `FinishedLaunching` method for this type
    of project is as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型项目的 `FinishedLaunching` 方法的默认实现如下：
- en: 'The `UIWindow` object is initialized with the size of the screen as follows:'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UIWindow` 对象使用屏幕大小初始化如下：'
- en: '[PRE5]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The view controller is initialized and set as the window''s root view controller
    as follows:'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图控制器初始化并设置为窗口的根视图控制器如下：
- en: '[PRE6]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The window is displayed on the screen with the `window.MakeKeyAndVisible()`
    call and the method returns. This method must be called inside the `FinishedLaunching`
    method, otherwise the app's user interface will not be presented as it should
    be to the user. Last but not least, the `return true` line returns the method
    by marking its execution completion.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `window.MakeKeyAndVisible()` 调用在屏幕上显示窗口，并返回方法。此方法必须在 `FinishedLaunching`
    方法内部调用，否则应用程序的用户界面将不会按预期向用户展示。最后但同样重要的是，`return true` 行通过标记其执行完成来返回方法。
- en: Main.cs
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Main.cs
- en: 'Inside the `Main.cs` file is where the runtime life cycle of the program starts
    as shown in the following code:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Main.cs` 文件内部，程序的运行时生命周期从以下代码开始：
- en: '[PRE7]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'It is much like the following call in a .NET System.Windows.Forms application:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 它与以下 .NET System.Windows.Forms 应用程序中的调用非常相似：
- en: '[PRE8]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `UIApplication.Main` method starts the message loop or run loop that is
    responsible for dispatching notifications to the app through the `AppDelegate`
    class with event handlers that we can override. Event handlers such as `FinishedLaunching`,
    `ReceiveMemoryWarning`, or `DidEnterBackground` are only some of these notifications.
    Apart from the notification dispatching mechanism, the `UIApplication` object
    holds a list of all `UIWindow` objects that exist, typically one. An iOS app must
    have one `UIApplication` object, or a class that inherits from it, and this object
    must have a corresponding `UIApplicationDelegate` object. This is the `AppDelegate`
    class implementation we saw earlier.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`UIApplication.Main` 方法启动消息循环或运行循环，该循环负责通过 `AppDelegate` 类的事件处理器将通知分发给应用程序。事件处理器如
    `FinishedLaunching`、`ReceiveMemoryWarning` 或 `DidEnterBackground` 只是这些通知中的一些。除了通知分发机制外，`UIApplication`
    对象还包含所有存在的 `UIWindow` 对象的列表，通常只有一个。iOS 应用必须有一个 `UIApplication` 对象，或者是从它继承的类，并且该对象必须有一个相应的
    `UIApplicationDelegate` 对象。这就是我们之前看到的 `AppDelegate` 类实现。'
- en: Info.plist
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Info.plist
- en: 'The `Info.plist` file is basically the app''s settings file. It has a simple
    structure of properties with values that define various settings for an iOS app,
    such as the orientations it supports, its icons, supported iOS versions, what
    devices it can be installed on, and so on. If we double-click on this file in
    Xamarin Studio, it will open in the embedded editor specifically designed for
    this file. Our file in a new project looks like the following screenshot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`Info.plist`文件基本上是应用程序的设置文件。它具有简单的属性值结构，定义了iOS应用程序的各种设置，例如它支持的朝向、图标、支持的iOS版本、它可以安装的设备等等。如果我们双击Xamarin
    Studio中的此文件，它将在专门为此文件设计的嵌入式编辑器中打开。新项目中的文件如下截图所示：'
- en: '![Info.plist](img/8924OT_01_06.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![Info.plist](img/8924OT_01_06.jpg)'
- en: We can also access `Info.plist` through the project's options window under **iOS
    Application**.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过**iOS应用程序**下的项目选项窗口访问`Info.plist`。
- en: There's more...
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'Xamarin Studio provides many different project templates for developing iOS
    apps. Here is a list that describes what each project template is for:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin Studio为开发iOS应用程序提供了许多不同的项目模板。以下是一个列表，描述了每个项目模板的用途：
- en: '**Empty project**: This is an empty project without any views.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**空项目**：这是一个没有任何视图的空项目。'
- en: '**Utility application**: This is a special type of iOS app that provides one
    screen for functionality and, in many cases, another one for configuration.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实用应用程序**：这是一种特殊的iOS应用程序，提供一屏功能，在许多情况下，还提供另一屏进行配置。'
- en: '**Master-detail application**: This type of project creates a template that
    supports navigating through multiple screens. It contains two view controllers.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主从应用程序**：这种类型的项目创建了一个支持通过多个屏幕导航的模板。它包含两个视图控制器。'
- en: '**Single view application**: This template type is the one we used in this
    recipe.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单视图应用程序**：这种模板类型是我们在这个配方中使用的。'
- en: '**Tabbed application**: This is a template that adds a tab bar controller,
    which manages two view controllers in a tab-like interface.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标签页应用程序**：这是一个添加标签栏控制器并管理类似标签界面的两个视图控制器的模板。'
- en: '**OpenGL application**: This is a template for creating OpenGL-powered applications
    or games.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OpenGL应用程序**：这是一个用于创建OpenGL应用程序或游戏的模板。'
- en: These templates are available for the iPhone, iPad, and Universal (both iPhone
    and iPad) projects. They are also available in Interface Builder's storyboarding
    app design.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模板适用于iPhone、iPad和通用（iPhone和iPad）项目。它们也适用于Interface Builder的故事板应用设计。
- en: Note
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Unless stated, all project templates referring to the iPhone are suitable for
    the iPod Touch as well.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 除非另有说明，所有针对iPhone的项目模板也适用于iPod Touch。
- en: List of Xamarin.iOS assemblies
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Xamarin.iOS组件列表
- en: Xamarin.iOS-supported assemblies can be found at [http://ios.xamarin.com/Documentation/Assemblies](http://ios.xamarin.com/Documentation/Assemblies).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.iOS支持的组件可以在[http://ios.xamarin.com/Documentation/Assemblies](http://ios.xamarin.com/Documentation/Assemblies)找到。
- en: See also
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating the UI* and *Accessing the UI with Outlets* recipes
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建UI*和*通过Outlets访问UI*的配方'
- en: The *Adding and customizing views* recipe in [Chapter 2](ch02.html "Chapter 2. User
    Interface – Views"), *User Interface – Views*
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](ch02.html "第2章。用户界面 – 视图")中的*添加和自定义视图*配方，*用户界面 – 视图*'
- en: Interface Builder
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Interface Builder
- en: In this recipe, we will take a look at Xcode's Interface Builder. Since we cannot
    use Xcode to write our code, Xamarin Studio provides a transparent way of communicating
    with Xcode when it comes to user interface files.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将查看Xcode的Interface Builder。由于我们无法使用Xcode编写代码，Xamarin Studio提供了一个透明的方式来与Xcode进行用户界面文件的通信。
- en: How to do it...
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s take a look at Interface Builder by performing the following steps:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下步骤查看Interface Builder：
- en: If you have installed the iOS SDK, then you already have Xcode with Interface
    Builder installed on your computer. Go to Xamarin Studio and open the project
    `MyFirstiOSProject` we created earlier.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你已经安装了iOS SDK，那么你的电脑上已经安装了带有Interface Builder的Xcode。前往Xamarin Studio并打开我们之前创建的项目`MyFirstiOSProject`。
- en: In the **Solution** pad on the left, double-click on **MyFirstiOSProjectViewController.xib**.
    Xamarin Studio starts Xcode with the file loaded in Interface Builder.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧的**解决方案**面板中双击**MyFirstiOSProjectViewController.xib**。Xamarin Studio将启动Xcode并在Interface
    Builder中加载文件。
- en: On the top of the Xcode window in the right side of the toolbar, select the
    appropriate editor and viewing options, as shown in the following screenshot:![How
    to do it...](img/8924OT_01_07.jpg)
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Xcode窗口的右上角工具栏中，选择适当的编辑器和查看选项，如下面的截图所示：![如何操作...](img/8924OT_01_07.jpg)
- en: The following screenshot demonstrates what Interface Builder looks like with
    an XIB file open:![How to do it...](img/8924OT_01_08.jpg)
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下截图展示了打开XIB文件时的接口构建器外观：![如何操作...](img/8924OT_01_08.jpg)
- en: How it works...
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Now that we have loaded Interface Builder with the view controller of our app,
    let's familiarize ourselves with it.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经用我们的应用程序视图控制器加载了接口构建器，让我们熟悉一下它。
- en: The user interface designer is directly connected to an Xcode project. When
    we add an object, Xcode automatically generates code to reflect the change we
    made. Xamarin Studio takes care of this for us, so that when we double-click on
    an XIB file, it automatically creates a temporary Xcode project. This allows us
    to make the changes we want in the user interface. Therefore, we have nothing
    more to do than just design the user interface for our app.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 用户界面设计师直接连接到Xcode项目。当我们添加一个对象时，Xcode会自动生成代码以反映我们所做的更改。Xamarin Studio会为我们处理这些，因此当我们双击XIB文件时，它会自动创建一个临时Xcode项目。这使我们能够对用户界面进行我们想要的更改。因此，我们只需为我们的应用程序设计用户界面即可。
- en: 'Interface Builder is divided into three areas. A brief description of each
    area is given as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 接口构建器分为三个区域。以下是每个区域的简要描述：
- en: '**Navigator area**: In this area, we can see the files included in the Xcode
    project.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导航区域**：在这个区域，我们可以看到Xcode项目中的文件。'
- en: '**Editor area**: This area is where we design the user interface. The editor
    area is divided into two sections. The one on the left is the designer, and the
    one on the right is the assistant editor. Inside the assistant editor, we see
    the underlying Objective-C source code file that corresponds to the selected item
    in the designer. Although we do not need to edit the Objective-C source, we will
    need the assistant editor later.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编辑区域**：这个区域是我们设计用户界面的地方。编辑区域分为两个部分。左边的是设计师，右边的是辅助编辑器。在辅助编辑器内部，我们可以看到与设计师中选定的项目对应的底层Objective-C源代码文件。尽管我们不需要编辑Objective-C源代码，但稍后我们还需要辅助编辑器。'
- en: '**Utility area**: This area contains the inspector and library panes. The inspector
    pane is where we configure each object, and the library pane is where we find
    the objects.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实用区域**：这个区域包含检查器和库窗格。检查器窗格是我们配置每个对象的地方，库窗格是我们查找对象的地方。'
- en: There's more...
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We saw what an XIB file looks like in Interface Builder, but there is more as
    far as these files are concerned. We mentioned earlier that XIB files are XML
    files with appropriate information readable by Interface Builder. The thing is
    that when a compilation is done in a project, the compiler compiles the XIB file
    converting it to its binary equivalent, the NIB file. Both XIB and NIB files contain
    the same information. The only difference between them is that XIB files are in
    a human-readable form while the NIB files are not. For example, when we compile
    the project we created, the `MyFirstiOSProjectViewController.xib` file will become
    `MyFirstiOSProjectViewController.nib` in the output folder. Apart from the binary
    conversion, the compiler also performs a compression on NIB files. So, NIB files
    will be significantly smaller in size than XIB files.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在接口构建器中看到了XIB文件的外观，但关于这些文件还有更多内容。我们之前提到，XIB文件是Interface Builder可以读取的XML文件，其中包含适当的信息。问题是，当项目中进行编译时，编译器会将XIB文件编译成其二进制等效文件，即NIB文件。XIB和NIB文件包含相同的信息。它们之间的唯一区别是，XIB文件以人类可读的形式存在，而NIB文件则不是。例如，当我们编译我们创建的项目时，`MyFirstiOSProjectViewController.xib`文件将在输出文件夹中变为`MyFirstiOSProjectViewController.nib`。除了二进制转换之外，编译器还会对NIB文件进行压缩。因此，NIB文件的大小将比XIB文件小得多。
- en: That's not all about XIB files. The way a developer manages the XIB files in
    a project is very important in an app's performance and stability. It is better
    to have many small-sized XIB files, instead of one or two large ones. This is
    because of the way iOS manages its memory. This can be accomplished by dividing
    the user interface into many XIB files. It may seem a bit difficult, but as we'll
    see later in this book, it is actually very easy.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 关于XIB文件，还有更多内容。我们之前提到，XIB文件是Interface Builder可以读取的XML文件，其中包含适当的信息。问题是，当项目中进行编译时，编译器会将XIB文件编译成其二进制等效文件，即NIB文件。XIB和NIB文件包含相同的信息。它们之间的唯一区别是，XIB文件以人类可读的形式存在，而NIB文件则不是。例如，当我们编译我们创建的项目时，`MyFirstiOSProjectViewController.xib`文件将在输出文件夹中变为`MyFirstiOSProjectViewController.nib`。除了二进制转换之外，编译器还会对NIB文件进行压缩。因此，NIB文件的大小将比XIB文件小得多。
- en: When an app starts, iOS loads the NIB files as a whole in memory, and all the
    objects in it are instantiated. So, it is a waste of memory to keep objects in
    NIB files that are not always going to be used. Also, remember that you are developing
    for a mobile device whose available resources are not a match against that of
    desktop computers, no matter what its capabilities are.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序启动时，iOS会将NIB文件作为一个整体加载到内存中，并且其中的所有对象都会被实例化。因此，保留在NIB文件中不总是会被使用的对象是浪费内存的。此外，请记住，你正在为移动设备开发，其可用资源与桌面计算机的资源无法匹敌，无论其功能如何。
- en: As of iOS 5, Apple introduced storyboarding, which simplifies user interface
    design.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 自 iOS 5 开始，苹果引入了故事板功能，该功能简化了用户界面设计。
- en: More information
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多信息
- en: You may have noticed that in the **Attributes** tab of the **Inspector** pane,
    there is a section called **Simulated Metrics**. Options under this section help
    us see directly what our interface looks like in the designer area with the device's
    status bar, a toolbar, or a navigation bar. Although these options are saved in
    the XIB files, they have nothing to do with the actual app at runtime. For example,
    if we set the **Status Bar** option to **None**, it does not mean that our app
    will start without a status bar.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，在**检查器**面板的**属性**选项卡中，有一个名为**模拟度量**的部分。该部分下的选项帮助我们直接在设计师区域看到我们的界面在设备状态栏、工具栏或导航栏下的样子。尽管这些选项保存在XIB文件中，但它们与实际运行时的应用程序无关。例如，如果我们将**状态栏**选项设置为**无**，并不意味着我们的应用程序将没有状态栏启动。
- en: Note
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Status Bar is the bar that is shown on the top portion of the device's screen,
    which displays certain information to the user, such as the current time, battery
    status, and carrier name on the iPhone.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 状态栏是显示在设备屏幕顶部的一部分，它向用户显示某些信息，例如当前时间、电池状态和iPhone上的运营商名称。
- en: See also
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Creating the UI*, *Accessing the UI with Outlets*, and *Adding Actions
    to controls* recipes
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建UI*、*使用连接访问UI*和*向控件添加动作*的配方'
- en: The *Adding and customizing views* recipe in [Chapter 2](ch02.html "Chapter 2. User
    Interface – Views"), *User Interface – Views*
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第2章（ch02.html "第2章。用户界面 – 视图"）中的*添加和自定义视图*配方，*用户界面 – 视图*
- en: The *Loading a view with a view controller* recipe in [Chapter 3](ch03.html
    "Chapter 3. User Interface – View Controllers"), *User Interface – View Controllers*
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第3章（ch03.html "第3章。用户界面 – 视图控制器"）中的*使用视图控制器加载视图*配方，*用户界面 – 视图控制器*
- en: Creating the UI
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建UI
- en: In this recipe, we will learn how to add and manage controls in the user interface.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将学习如何在用户界面中添加和管理控件。
- en: Getting ready
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's add a few controls in an interface. Start by creating a new iPhone single
    view application project in Xamarin Studio. Name the project `ButtonInput`. When
    it opens, double-click on **ButtonInputViewController.xib** in the **Solution**
    pad to open it with Interface Builder.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在界面中添加一些控件。首先，在Xamarin Studio中创建一个新的iPhone单视图应用程序项目，并将其命名为`ButtonInput`。当它打开时，双击**ButtonInputViewController.xib**在**解决方案**面板中，以Interface
    Builder打开它。
- en: How to do it...
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: Now that we have a new project, and Interface Builder has opened the `ButtonInputViewController.xib`
    file, we'll add some controls to it.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个新项目，并且Interface Builder已经打开了`ButtonInputViewController.xib`文件，我们将向其中添加一些控件。
- en: Adding a label
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加标签
- en: 'Perform the following steps:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: Go to the **Library** pane and select **Objects** from the drop-down list, if
    it is not already selected.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未选择，请转到**库**面板并从下拉列表中选择**对象**。
- en: Select the **Label** object. Drag-and-drop **Label** onto the gray space of
    the view in the designer, somewhere in the top half.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**标签**对象。将**标签**拖放到设计师中视图的灰色区域，位于上半部分。
- en: Select and resize the **Label** object from both the left and right sides so
    that it snaps to the dashed line that will show up when you reach close to the
    edges of the view.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧和右侧选择并调整**标签**对象的大小，使其与当接近视图边缘时出现的虚线对齐。
- en: Again, with the **Label** object selected, go to the **Inspector** pane, select
    the **Attributes** tab, and in the **Layout** section, click on the middle alignment
    button.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，当**标签**对象被选中时，转到**检查器**面板，选择**属性**选项卡，然后在**布局**部分单击中间对齐按钮。
- en: Congratulations, you have just added **Label** in your app's main view!
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你，你已经在应用程序的主视图中添加了**标签**！
- en: Adding a button
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加按钮
- en: 'We will perform similar steps to add a button in our interface, using the following
    steps:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将执行类似的步骤在我们的界面中添加按钮，使用以下步骤：
- en: Again, in the **Library** pane, in the **Objects** section, select the **Button**
    object. It is next to the **Label** object. Drag-and-drop it onto the bottom half
    of the view. Align its center with the center of **Label** we added earlier.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，在**库**面板中，在**对象**部分，选择**按钮**对象。它位于**标签**对象旁边。将其拖放到视图的下半部分。将其中心与之前添加的**标签**的中心对齐。
- en: A dashed line will show up, and the **Button** object will snap to it when the
    centers of the two controls are almost aligned.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当两个控件的中心几乎对齐时，会出现一条虚线，**按钮**对象会自动吸附到它上面。
- en: Resize the **Button** object to the same width as that of **Label**. Since **Label**
    has a transparent background, and you cannot see how wide it is exactly, you will
    know when the **Button** object is of the same width when three dashed lines show
    up while you are resizing it.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**按钮**对象调整到与**标签**相同的宽度。由于**标签**具有透明背景，您无法确切地看到它的宽度，当您调整大小时会显示三条虚线，这时您就会知道**按钮**对象具有相同的宽度。
- en: Now, let's add some text to **Button**. Select it and go to **Inspector** pane.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们向**按钮**添加一些文本。选择它并转到**检查器**面板。
- en: In the **Attributes** tab of the **Title** field, enter `Tap here please!`.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**标题**字段的**属性**选项卡中，输入`请在此处点击！`。
- en: After adding the button, save the document by navigating to **File** | **Save**
    in the menu bar. The main view should now look like the following screenshot:![Adding
    a button](img/8924OT_01_09.jpg)
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加按钮后，通过在菜单栏中导航到**文件** | **保存**来保存文档。主视图现在应该看起来像以下截图所示：![添加按钮](img/8924OT_01_09.jpg)
- en: How it works...
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As you can see, although some concepts of Interface Builder seem difficult,
    it is quite easy to use. It also provides a lot of feedback. When we drag objects,
    guidelines that basically act as snap points for positioning the control properly,
    appear. Also, when we resize a control, we see its dimensions next to it.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，尽管 Interface Builder 的一些概念似乎很难，但它使用起来相当简单。它还提供了大量的反馈。当我们拖动对象时，会出现基本作为正确定位控件的对齐点的指南。此外，当我们调整控件大小时，我们会在其旁边看到其尺寸。
- en: You can also resize and position the controls by modifying the values in the
    **Size** tab of the **Inspector** pane. Another useful feature in the **Size**
    tab is **Autosizing**. **Autosizing** provides layout options for the controls,
    and it can be very useful when we want our app to support different device orientations.
    You can select a control you want, and then click on the lines that are outside
    or inside of the square on the left in the **Autosizing** section. The image next
    to it animates to give you an impression of how the control will behave when the
    layout changes.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过修改**检查器**面板中**大小**选项卡中的值来调整控件的大小和位置。**大小**选项卡中的另一个有用功能是**自动调整大小**。**自动调整大小**为控件提供布局选项，当我们要使我们的应用支持不同的设备方向时，它非常有用。您可以选择一个控件，然后点击**自动调整大小**部分中左边的方框外部或内部的线条。旁边的图像会动画显示，给您一个印象，当布局改变时控件将如何表现。
- en: There's more...
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Now, let''s try running the app on iOS Simulator. Back in Xamarin Studio, select
    the project configuration **Debug** if it is not already selected. Depending on
    the version of iOS SDK you have installed, the following screenshot shows the
    available options of debugging targets:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试在 iOS 模拟器上运行应用。回到 Xamarin Studio，如果尚未选择，请选择项目配置**调试**。根据您安装的 iOS SDK
    版本，以下截图显示了可用的调试目标选项：
- en: '![There''s more...](img/8924OT_01_18.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/8924OT_01_18.jpg)'
- en: Select your preferred target and click on the **Run** button. When the compilation
    finishes, iOS Simulator will automatically start and run the app we just created.
    You can even tap on **Button** by clicking on it with the mouse, and see it responding.
    Of course, our app does not have any other functionality right now.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 选择您喜欢的目标并点击**运行**按钮。当编译完成后，iOS 模拟器将自动启动并运行我们刚刚创建的应用。您甚至可以用鼠标点击**按钮**，并看到它做出响应。当然，我们的应用目前还没有其他功能。
- en: Setting titles on Buttons
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置按钮的标题
- en: Setting the title of a Button or Label can be done by simply double-clicking
    on it and typing the preferable title. Do it, and watch how Interface Builder
    behaves to show you what action is to be performed.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 设置按钮或标签的标题可以通过简单地双击它并输入首选标题来完成。这样做，并观察 Interface Builder 如何响应以显示要执行的操作。
- en: See also
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Compiling an iOS project* and *Debugging our application* recipes
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*编译 iOS 项目*和*调试我们的应用*配方'
- en: The *Receiving user input with buttons* recipe in [Chapter 2](ch02.html "Chapter 2. User
    Interface – Views"), *User Interface – Views*
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](ch02.html "第2章。用户界面 – 视图")中的 *使用按钮接收用户输入* 菜单，*用户界面 – 视图*'
- en: Accessing the UI with Outlets
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用出口访问UI
- en: In this recipe, we will discuss the concept of Outlets and their usage with
    Xamarin.iOS.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，我们将讨论出口的概念及其在Xamarin.iOS中的使用。
- en: Getting ready
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In the previous recipe, we learned how to add controls to form a basic interface
    for our app. In this recipe, we will discuss how to access and use these controls
    in our code. Launch Xamarin Studio and open the project `ButtonInput` we created
    earlier. Open the project's `ButtonInputViewController.xib` in Interface Builder
    by double-clicking on it in the **Solution** pad.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的菜谱中，我们学习了如何添加控件来形成我们应用的基本界面。在本菜谱中，我们将讨论如何在代码中访问和使用这些控件。启动Xamarin Studio并打开我们之前创建的`ButtonInput`项目。通过在**解决方案**面板中双击它来在Interface
    Builder中打开项目的`ButtonInputViewController.xib`。
- en: How to do it...
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Perform the following steps to access the UI with Outlets:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以使用出口访问UI：
- en: In the assistant editor, select the `ButtonInputViewController.h` file, press
    the *Ctrl* key, and drag it from **Label** to the Objective-C source file, as
    displayed in the following screenshot:![How to do it...](img/8924OT_01_10.jpg)
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在辅助编辑器中，选择`ButtonInputViewController.h`文件，按*Ctrl*键，并将其从**标签**拖动到Objective-C源文件中，如图所示：![如何操作...](img/8924OT_01_10.jpg)
- en: When you release the cursor, a context window will appear similar to the one
    in the following screenshot:![How to do it...](img/8924OT_01_11.jpg)
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你释放光标时，会出现一个上下文窗口，类似于以下截图所示：![如何操作...](img/8924OT_01_11.jpg)
- en: In the **Name** field of the context window, enter `labelStatus` and click on
    **Connect**.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上下文窗口的**名称**字段中输入`labelStatus`，然后点击**连接**。
- en: Do the same for **Button**, and name it `buttonTap`. Save the Interface Builder
    document by navigating to **File** | **Save** in the menu bar or by pressing *Cmd*
    + *S* on the keyboard.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**按钮**也做同样的操作，并将其命名为`buttonTap`。通过在菜单栏中导航到**文件** | **保存**或按键盘上的*Cmd* + *S*来保存Interface
    Builder文档。
- en: 'Back in Xamarin Studio, enter the following code in the `ViewDidLoad` method
    of the `ButtonInputViewController` class:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Xamarin Studio中，在`ButtonInputViewController`类的`ViewDidLoad`方法中输入以下代码：
- en: '[PRE9]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This code snippet adds a handler to the button's `TouchUpInside` event. This
    event is similar to the `Clicked` event of a `Button` control in `System.Windows.Forms`.
    It also displays the usage of an anonymous method, which just shows how Xamarin.iOS
    provides C# features to .NET developers.
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这段代码片段为按钮的`TouchUpInside`事件添加了一个处理程序。这个事件类似于`System.Windows.Forms`中`Button`控制的`Clicked`事件。它还展示了匿名方法的使用，这显示了Xamarin.iOS如何为.NET开发者提供C#功能。
- en: That was it! Our app is now ready with functional controls. Compile and run
    it on the simulator. See the label changing its text when you tap on the button.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！我们的应用现在已经准备好了具有功能控件。在模拟器上编译并运行它。当你点击按钮时，你会看到标签文本的变化。
- en: How it works...
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The Outlet mechanism is basically a way of connecting Interface Builder objects
    with the code. It is necessary since it is the only way we can access user interface
    objects that we create with Interface Builder. This is how Interface Builder works,
    and it is not just a Xamarin.iOS workaround. An Outlet of an object provides a
    variable of this object so that we will be able to use it in a project. Xamarin.iOS
    makes a developer''s life much easier because when we create Outlets in Interface
    Builder and connect them, Xamarin Studio works in the background by autogenerating
    code regarding these Outlets. This is what the `ButtonInputViewController.designer.cs`
    file has added to provide us access to the controls we created:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 出口机制基本上是一种将Interface Builder对象与代码连接起来的方法。这是必要的，因为这是我们访问使用Interface Builder创建的用户界面对象的唯一方式。这就是Interface
    Builder的工作原理，它不仅仅是一个Xamarin.iOS的解决方案。一个对象的出口提供了一个变量，这样我们就可以在项目中使用它。Xamarin.iOS使开发者的生活变得更加容易，因为当我们创建Interface
    Builder中的出口并将它们连接起来时，Xamarin Studio会在后台自动生成与这些出口相关的代码。这就是`ButtonInputViewController.designer.cs`文件添加的内容，为我们提供了访问我们创建的控件的方法：
- en: '[PRE10]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: These are the properties which provide us access to the controls. They are decorated
    with the `Outlet` attribute. You can see that the names of the properties are
    exactly the same names we entered for our Outlets. This is very important since
    we only have to provide names once for the Outlets, and we do not have to worry
    about repeating the same naming conventions in different parts of our code. Also,
    notice that the types of variables of the controls are exactly the same as the
    types of controls we dragged-and-dropped in our user interface. This information
    is stored in the XIB file, and Xamarin Studio reads this information accordingly.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 这些属性为我们提供了访问控件的方法。它们被`Outlet`属性装饰。您可以看到属性名称与我们为出口输入的名称完全相同。这非常重要，因为我们只需要为出口提供一次名称，我们不必担心在代码的不同部分重复相同的命名约定。此外，请注意，控件变量的类型与我们在用户界面中拖放的控制类型完全相同。这些信息存储在XIB文件中，Xamarin
    Studio相应地读取这些信息。
- en: There's more...
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: To remove Outlets, you first have to disconnect them. For example, to remove
    the `buttonTap` Outlet, press *Ctrl* and click on the button. In the panel that
    will appear, click on the **x** button next to the Outlet, as shown in the following
    screenshot. This will disconnect the Outlet.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除出口，您首先必须断开它们。例如，要删除`buttonTap`出口，请按*Ctrl*并单击按钮。在出现的面板中，单击出口旁边的**x**按钮，如图下所示。这将断开出口。
- en: '![There''s more...](img/8924OT_01_12.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/8924OT_01_12.jpg)'
- en: 'After this, delete the following code from the Objective-C source file:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，从Objective-C源文件中删除以下代码：
- en: '[PRE11]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: When you save the document, the Outlet will be removed from the Xamarin Studio
    project.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 当您保存文档时，出口将从Xamarin Studio项目中删除。
- en: Adding Outlets through code
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过代码添加出口
- en: 'Another way of adding Outlets is to create a property in your C# class and
    decorate it with the `Outlet` attribute:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 添加出口的另一种方法是创建一个C#类中的属性，并用`Outlet`属性装饰它：
- en: '[PRE12]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'When you open the XIB file in Interface Builder, the Outlet will be added to
    the user interface. However, you would still have to connect it to the corresponding
    control. The easiest way to do this is to press *Ctrl*, click on the control the
    Outlet corresponds to, and click-and-drag from **New Referencing Outlet** to the
    **File''s Owner** object on the left of the designer area, as shown in the following
    screenshot:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在界面构建器中打开XIB文件时，出口将被添加到用户界面中。然而，您仍然需要将其连接到相应的控件。最简单的方法是按*Ctrl*，单击出口对应的控件，然后从**新引用出口**拖动到设计区域左侧的**文件所有者**对象，如图下所示：
- en: '![Adding Outlets through code](img/8924OT_01_13.jpg)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![通过代码添加出口](img/8924OT_01_13.jpg)'
- en: When you release the cursor, select the **ButtonTap** Outlet from the small
    context menu that will appear.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 当您释放鼠标时，从出现的迷你上下文菜单中选择**ButtonTap**出口。
- en: Note
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that it is Xamarin Studio that monitors for changes made in Interface Builder,
    and not the other way around. When making changes in the Xamarin project, make
    sure to always open the XIB file from Xamarin Studio.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，是Xamarin Studio监视在界面构建器中做出的更改，而不是相反。当在Xamarin项目中做出更改时，请确保始终从Xamarin Studio打开XIB文件。
- en: See also
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Interface Builder*, *Creating the UI*, and *Adding Actions to controls*
    recipes
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*界面构建器*、*创建用户界面*和*向控件添加动作*的食谱'
- en: The *Adding and customizing views* recipe in [Chapter 2](ch02.html "Chapter 2. User
    Interface – Views"), *User Interface – Views*
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第2章*用户界面 – 视图*中的*添加和自定义视图*食谱，*用户界面 – 视图*
- en: Adding Actions to controls
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向控件添加动作
- en: In this recipe, we discuss the concept of Actions and their usage with Xamarin.iOS.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们讨论了动作的概念及其与Xamarin.iOS的用法。
- en: Getting ready
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will discuss how to use Actions with the controls of the
    user interface.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将讨论如何使用动作与用户界面的控件。
- en: Create a new iPhone single view application project in Xamarin Studio and name
    it `ButtonInputAction`.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Xamarin Studio中创建一个新的iPhone单视图应用程序项目，并将其命名为`ButtonInputAction`。
- en: Open `ButtonInputActionViewController.xib` in Interface Builder, and add the
    same controls, Outlets, and connections as the ones from the project `ButtonInput`
    from the previous recipe. Do not add any code in the project for now.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在界面构建器中打开`ButtonInputActionViewController.xib`，并添加与之前食谱中`ButtonInput`项目相同的控件、出口和连接。现在不要在项目中添加任何代码。
- en: How to do it...
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Adding Actions to interface objects is similar to adding Outlets, as follows:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 向界面对象添加动作与添加出口类似，如下所示：
- en: In Interface Builder, press *Ctrl* and drag from the button to the source code
    file.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Interface Builder中，按*Ctrl*并从按钮拖动到源代码文件。
- en: In the context window that will be shown, change the **Connection** field from
    **Outlet** to **Action**.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在将显示的上下文窗口中，将**连接**字段从**Outlets**更改为**Action**。
- en: Enter `OnButtonTap` in the **Name** field, and select **Touch Up Inside** in
    the **Event** field, if it is not already selected.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**名称**字段中输入`OnButtonTap`，如果尚未选择，请选择**触摸内部**。
- en: Click on the **Connect** button and save the document.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**连接**按钮并保存文档。
- en: 'In the `ButtonInputActionViewController` class, add the following method:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ButtonInputActionViewController`类中，添加以下方法：
- en: '[PRE13]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The app is ready! Compile and run it in the simulator. Tap on the button and
    see the text in the label change, just like in the previous app we created.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序已经准备好了！在模拟器中编译并运行它。点击按钮，您会看到标签中的文本改变，就像我们在上一个应用程序中创建的那样。
- en: How it works...
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Actions in Objective-C are the equivalent of control events in C#. They are
    responsible for delivering notification signals of various objects. In this example,
    instead of hooking up a handler on the `TouchUpInside` event of the button, we
    have added an action for it. As you may already have noticed, the method we added
    to act as a handler for the action was declared as `partial`; this is because
    Xamarin Studio already declared a partial method declaration for us. This is the
    code that was produced when we saved the document in Interface Builder:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: Objective-C中的动作相当于C#中的控制事件。它们负责传递各种对象的信号通知。在这个例子中，我们不是在按钮的`TouchUpInside`事件上连接一个处理程序，而是为它添加了一个动作。如您可能已经注意到的，我们添加的作为动作处理程序的方法被声明为`partial`；这是因为Xamarin
    Studio已经为我们声明了一个部分方法声明。这是我们在Interface Builder中保存文档时产生的代码：
- en: '[PRE14]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The partial declaration of the method is marked with the `Action` attribute.
    This is another attribute from the `MonoTouch.Foundation` namespace that allows
    us to expose methods as Objective-C Actions. You see that the string parameter
    passed in the attribute is exactly the same as the action name we entered in Interface
    Builder, with only an appended colon (:) to it.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 方法的部分声明被标记为`Action`属性。这是来自`MonoTouch.Foundation`命名空间的一个属性，它允许我们将方法暴露为Objective-C动作。您可以看到，传递给属性的字符串参数与我们输入到Interface
    Builder中的动作名称完全相同，只是在后面加了一个冒号（:）。
- en: Note
  id: totrans-267
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Colons in Objective-C indicate the presence of parameters. For example, `doSomething`
    is different from `doSomething`;. The difference is that the first does not accept
    any parameters, and the second accepts one parameter.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: Objective-C中的冒号表示参数的存在。例如，`doSomething`与`doSomething;`不同。区别在于第一个不接受任何参数，而第二个接受一个参数。
- en: '![How it works...](img/8924OT_01_14.jpg)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/8924OT_01_14.jpg)'
- en: 'The colon at the end of the action name indicates that there is one parameter,
    in this case, the parameter `MonoTouch.Foundation.NSObject` sender. This is what
    our app looks like when we have tapped on the button in the simulator:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 动作名称末尾的冒号表示有一个参数，在这种情况下，参数是`MonoTouch.Foundation.NSObject`发送者。这就是我们在模拟器中点击按钮时我们的应用程序看起来像什么：
- en: There's more...
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: The example in the preceding section was created just to show how to implement
    actions in Xamarin.iOS projects. Replacing an event with an action is basically
    at the discretion of the developer.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 上一节中的示例只是为了展示如何在Xamarin.iOS项目中实现动作。用动作替换事件基本上是开发者的决定。
- en: See also
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Interface Builder*, *Creating the UI*, and *Accessing the UI with Outlets*
    recipes
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Interface Builder*、*创建UI*和*使用Outlets访问UI*菜谱'
- en: Compiling an iOS project
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译iOS项目
- en: In this recipe, we will discuss how to compile a project with Xamarin.iOS.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将讨论如何使用Xamarin.iOS编译一个项目。
- en: Getting ready
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Xamarin Studio provides many different options for compiling. In this recipe,
    we will discuss these options. We will be working with the project `ButtonInput`
    we created earlier in this chapter.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin Studio提供了许多不同的编译选项。在这个菜谱中，我们将讨论这些选项。我们将使用本章中较早创建的`ButtonInput`项目。
- en: How to do it...
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Perform the following steps to compile an iOS project with Xamarin.iOS:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以使用Xamarin.iOS编译iOS项目：
- en: With the project loaded in Xamarin Studio, go to **Project** | **ButtonInput
    Options**.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Xamarin Studio中加载项目后，转到**项目** | **按钮输入选项**。
- en: In the window that appears, select **iOS Build** from the **Build** section
    on the left pad. Select **Debug** as project configuration and **iPhoneSimulator**
    as a platform.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的窗口中，从左侧面板的**构建**部分选择**iOS构建**。选择项目配置为**调试**，平台为**iPhoneSimulator**。
- en: In the **Linker behavior** field, select **Link all assemblies** from the combo
    box.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**链接器行为**字段中，从组合框中选择**链接所有程序集**。
- en: In the **SDK version** field, select **Default** if it is not already selected.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**SDK版本**字段中，如果尚未选择，请选择**默认**。
- en: Now go to **iOS Application** on the left pad.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在转到左侧面板上的**iOS应用**。
- en: In the **Summary** tab, enter `Button Input` in the **Application Name** field
    and `1.0` in the **Version** field. Select version **6.0** in the **Deployment
    Target** combo box. The **iOS Application** options window is shown in the following
    screenshot:![How to do it...](img/8924OT_01_15.jpg)
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**摘要**选项卡中，在**应用程序名称**字段中输入`Button Input`，在**版本**字段中输入`1.0`。在**部署目标**组合框中选择版本**6.0**。以下截图显示了**iOS应用**选项窗口：![如何操作...](img/8924OT_01_15.jpg)
- en: Click on the **OK** button and compile the project by navigating to **Build**
    | **Build All** in the menu bar.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**按钮，通过菜单栏中的**构建** | **构建所有**导航来编译项目。
- en: How it works...
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We have set up some options for our project. Let''s see what these options
    provide for compilation customization:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为我们的项目设置了一些选项。让我们看看这些选项为编译定制提供了什么：
- en: iOS build options
  id: totrans-290
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: iOS构建选项
- en: 'The first option we set up relates to the **linker**. The linker is a tool
    that was developed by the Xamarin.iOS team and is provided in the SDK. Every time
    a Xamarin.iOS project is compiled, the compiler does not only compile the project,
    it also needs all the assemblies of the Xamarin.iOS Framework so that the final
    app will be able to run on the device (or the simulator). This actually means
    that every app comes with its own compiled version of the Xamarin.iOS Framework.
    The final application bundle is quite large in size. This is where the linker
    comes in. What it does is strips down the assemblies of all the unused code so
    that the compiler will only compile what is needed and used by the app. This results
    in much smaller app bundles, a precious asset when it comes to mobile apps. The
    following are the linker options:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设置的第一项与**链接器**相关。链接器是由Xamarin.iOS团队开发的工具，并在SDK中提供。每次编译Xamarin.iOS项目时，编译器不仅编译项目，还需要Xamarin.iOS框架的所有程序集，以便最终应用能够在设备（或模拟器）上运行。这实际上意味着每个应用都附带其自己的Xamarin.iOS框架编译版本。最终的应用程序包大小相当大。这就是链接器的作用所在。它所做的就是删除所有未使用的代码的程序集，以便编译器只编译应用所需和使用的代码。这导致应用程序包的大小大大减小，这在移动应用中是一个宝贵的资产。以下是一些链接器选项：
- en: '**Don''t Link**: Use this option when debugging on the simulator. The linker
    is turned off and all the assemblies are compiled as they are. It provides faster
    compilation time.'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不链接**：当在模拟器上调试时使用此选项。链接器被关闭，所有程序集都按原样编译。这提供了更快的编译时间。'
- en: '**Link SDK assemblies only**: The linker only strips down the Xamarin.iOS Framework
    assemblies. The project assemblies remain intact. It effectively reduces the final
    size of the app.'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仅链接SDK程序集**：链接器仅删除Xamarin.iOS框架的程序集。项目程序集保持完整。它有效地减少了最终应用的大小。'
- en: '**Link all assemblies**: The linker is activated on all assemblies. This reduces
    the size a bit more. Care needs to be taken when using this option if reflection
    or serialization is used in the code. Types and methods that are used through
    reflection in the code are transparent to the linker. If a situation like this
    exists in the code, decorate these types or methods with the `Preserve` attribute.
    This attribute basically informs the linker to be left out of the stripping-down
    process.'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**链接所有程序集**：链接器在所有程序集上被激活。这会进一步减少大小。如果代码中使用了反射或序列化，使用此选项时需要小心。代码中通过反射使用的类型和方法对链接器来说是透明的。如果代码中存在这种情况，请使用`Preserve`属性装饰这些类型或方法。此属性基本上是通知链接器不要参与精简过程。'
- en: In the **SDK version** field, we set the iOS SDK version that will be used to
    compile the app. Setting it to **Default** automatically selects the highest SDK
    version installed on the system.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 在**SDK版本**字段中，我们设置将用于编译应用的iOS SDK版本。将其设置为**默认**将自动选择系统上安装的最高SDK版本。
- en: Note
  id: totrans-296
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When compiling for the simulator, turning the linker on is not suggested. This
    is because the compiler is not compiling the Xamarin.iOS assemblies in the iPhoneSimulator
    platform, hence, they are being used directly. Turning the linker on only causes
    compilation to take more time to complete. It has no effect in reducing the final
    app bundle size.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在为模拟器编译时，不建议开启链接器。这是因为编译器没有在iPhoneSimulator平台上编译Xamarin.iOS程序集，因此它们被直接使用。开启链接器只会导致编译完成所需的时间更长，对最终应用程序包的大小没有影响。
- en: iOS application options
  id: totrans-298
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: iOS应用程序选项
- en: 'In the **iOS Application** window of the **Build** section in the project options,
    we set up three options:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目选项中**构建**部分的**iOS应用程序**窗口中，我们设置了三个选项：
- en: The first option is **Application Name**. This is the name of the application
    bundle that will be displayed on the simulator, the device, and on the App Store.
    As we can see here, we can normally add spaces to the name.
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个选项是**应用程序名称**。这是将在模拟器、设备和App Store上显示的应用程序包的名称。正如我们所看到的，我们通常可以在名称中添加空格。
- en: The second option, **Version**, defines the version of the app. It is what will
    be displayed as the app's version when it is finally distributed through the App
    Store.
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个选项，**版本**，定义了应用程序的版本。当应用程序最终通过App Store分发时，它将显示为应用程序的版本。
- en: The third option, **Deployment Target**, is the minimum iOS version the app
    can be installed on.
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个选项，**部署目标**，是应用程序可以安装的最小iOS版本。
- en: There's more...
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are two more option windows. These are **iOS Bundle Signing** and **iOS
    IPA Options**. They will be discussed thoroughly in the recipes in [Chapter 14](ch14.html
    "Chapter 14. Deploying"), *Deploying*.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 还有两个选项窗口。这些是**iOS包签名**和**iOS IPA选项**。它们将在第14章的食谱中详细讨论，*部署*。
- en: See also
  id: totrans-305
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Preparing our app for the App Store* recipe in [Chapter 14](ch14.html "Chapter 14. Deploying"),
    *Deploying*
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第14章（*部署*）中[第14章. 部署](ch14.html "第14章. 部署")的*为App Store准备我们的应用程序*食谱
- en: Debugging our application
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试我们的应用程序
- en: This recipe provides information on debugging a Xamarin.iOS app on the simulator.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱提供了在模拟器上调试Xamarin.iOS应用程序的信息。
- en: Getting ready
  id: totrans-309
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Xamarin.iOS, in combination with Xamarin Studio, provides a debugger for debugging
    apps either on the simulator or on the device. In this recipe, we'll see how to
    use the debugger for debugging Xamarin.iOS apps. Open Xamarin Studio and load
    the `ButtonInput` project. Make sure to set the project configuration to **Debug**
    | **iPhone**.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.iOS与Xamarin Studio结合，提供用于在模拟器或设备上调试应用程序的调试器。在本食谱中，我们将了解如何使用调试器调试Xamarin.iOS应用程序。打开Xamarin
    Studio并加载`ButtonInput`项目。确保将项目配置设置为**调试** | **iPhone**。
- en: How to do it...
  id: totrans-311
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Perform the following steps to debug your application:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以调试您的应用程序：
- en: 'Xamarin Studio supports breakpoints. To activate a breakpoint on a line, click
    on the space on the left of the line number to set it. Set a breakpoint on the
    following line in the `ButtonInputViewController.cs` file:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Xamarin Studio支持断点。要激活一行上的断点，请点击行号左侧的空间来设置它。在`ButtonInputViewController.cs`文件中的以下行设置断点：
- en: '[PRE15]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following screenshot shows what a breakpoint in Xamarin Studio looks like:'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了Xamarin Studio中的断点外观：
- en: '![How to do it...](img/8924OT_01_16.jpg)'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/8924OT_01_16.jpg)'
- en: Compile and debug the project by clicking on the **Run** button or by navigating
    to **Run** | **Start Debugging** on the menu bar. Xamarin Studio's status will
    display the message **Waiting for debugger to connect…**.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击**运行**按钮或通过菜单栏导航到**运行** | **开始调试**来编译和调试项目。Xamarin Studio的状态将显示消息**等待调试器连接…**。
- en: When the simulator is opened and the app is loaded, watch the information that
    is provided in the **Application Output** pad.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当模拟器打开并加载应用程序时，请关注**应用程序输出**面板中提供的信息。
- en: Tap on the app button. Execution will pause and Xamarin Studio will highlight
    the breakpoint in yellow. Move the mouse over the `labelStatus` variable in the
    breakpoint line. A window will be displayed with all the evaluated variable's
    members, as shown in the following screenshot:![How to do it...](img/8924OT_01_17.jpg)
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击应用程序按钮。执行将暂停，Xamarin Studio将以黄色突出显示断点。将鼠标移至断点行中的`labelStatus`变量上。将显示一个窗口，其中包含所有已评估变量的成员，如下面的截图所示：![如何操作...](img/8924OT_01_17.jpg)
- en: To stop debugging, click on the **Stop** button in the toolbar.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要停止调试，请点击工具栏中的**停止**按钮。
- en: How it works...
  id: totrans-321
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The debugger that is used is called **soft debugger**. It is called so because
    it depends on both the runtime and Xamarin Studio, combined to provide one unified
    debugging platform. When the debugging process starts, Xamarin Studio begins listening
    for debugging information from the app. The same applies for debugging on both
    the simulator and the device. When the app executes, it starts sending information
    back to Xamarin Studio. It then displays that information in the **Application
    Output** pad, which is automatically activated. A typical application output when
    debugging is the information on the assemblies that are loaded, the threads that
    begin execution, and the breakpoints, if any, that are available.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 所使用的调试器被称为**软调试器**。之所以称为“软调试器”，是因为它依赖于运行时和Xamarin Studio，两者结合提供统一的调试平台。当调试过程开始时，Xamarin
    Studio开始监听来自应用调试信息。在模拟器和设备上调试也是如此。当应用执行时，它开始将信息发送回Xamarin Studio。然后，它在**应用程序输出**面板中显示这些信息，该面板会自动激活。调试时的典型应用程序输出包括已加载的程序集信息、开始执行的所有线程，以及如果有，可用的断点。
- en: There's more...
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `Console.WriteLine()` method can also be used for debugging purposes. The
    debugger takes care of this and redirects the output of the method to Xamarin
    Studio's **Application Output** pad.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '`Console.WriteLine()`方法也可以用于调试目的。调试器会处理这个问题，并将方法的输出重定向到Xamarin Studio的**应用程序输出**面板。'
- en: App performance when debugging
  id: totrans-325
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调试时的应用性能
- en: When compiling for debugging purposes, the compiler produces larger and slower
    code. This is because it generates extra code that is needed to provide the appropriate
    debugging information. That's why, when debugging an app, the execution of the
    app is much slower than on simple running situations. Before producing a release
    copy of the app, remember to compile it with the **Release** | **iPhone** project
    configuration to avoid slow runtime execution.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译用于调试目的时，编译器会产生更大、更慢的代码。这是因为它生成了提供适当调试信息所需的额外代码。这就是为什么在调试应用时，应用的执行速度比简单运行情况慢得多。在生成应用的发布副本之前，请记住使用**发布**
    | **iPhone**项目配置来编译它，以避免运行时执行缓慢。
- en: Breakpoints in FinishedLaunching
  id: totrans-327
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`FinishedLaunching`中的断点'
- en: One more reason for not to have complicated code in the `FinishedLaunching`
    method is that, in most cases, you will not be able to debug it. If you set a
    breakpoint in `FinishedLaunching`, app execution will pause, but iOS will terminate
    the app when the time limit is reached.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 不在`FinishedLaunching`方法中编写复杂代码的另一个原因是，在大多数情况下，你将无法对其进行调试。如果你在`FinishedLaunching`中设置断点，应用执行将暂停，但当时间限制达到时，iOS将终止应用。
- en: See also
  id: totrans-329
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating profiles* recipe in [Chapter 14](ch14.html "Chapter 14. Deploying"),
    *Deploying*
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第14章“部署”中的*创建配置文件*配方
