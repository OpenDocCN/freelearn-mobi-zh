- en: <st c="0">6</st>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="0">6</st>
- en: <st c="2">SwiftUI Animations and SF Symbols</st>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2">SwiftUI 动画和 SF 符号</st>
- en: <st c="35">The previous chapter dealt with a delightful topic – widgets.</st>
    <st c="98">Their aesthetic level is both enjoyable and effective, which makes
    working with them fun and easy.</st> <st c="197">Now, we will take that feeling
    even further with</st> <st c="246">SwiftUI animations.</st>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="35">上一章讨论了一个令人愉快的话题——小部件。</st> <st c="98">它们的美学水平既愉快又有效，这使得与它们一起工作变得既有趣又简单。</st>
    <st c="197">现在，我们将通过</st> <st c="246">SwiftUI 动画</st>将这种感觉进一步深化。
- en: <st c="265">Animation is a crucial topic in iOS development, as it enriches
    the experience and makes our app more intuitive and enjoyable to use.</st> <st
    c="400">If you are used to UIkit animations, you will notice that SwiftUI animations
    take a different approach than UIkit, providing a declarative API to animate</st>
    <st c="554">state changes.</st>
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="265">动画是 iOS 开发中的一个关键主题，因为它丰富了体验，并使我们的应用程序更直观、更易于使用。</st> <st c="400">如果您习惯了
    UIKit 动画，您会注意到 SwiftUI 动画与 UIKit 的方法不同，它提供了一个声明式 API 来动画化</st> <st c="554">状态变化。</st>
- en: <st c="568">With these new challenges also come opportunities that ensure our
    logic state and UI are</st> <st c="658">always aligned.</st>
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="568">随着这些新挑战的到来，也带来了确保我们的逻辑状态和 UI</st> <st c="658">始终一致的机会。</st>
- en: <st c="673">In this chapter, we will do</st> <st c="702">the following:</st>
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="673">在本章中，我们将</st> <st c="702">执行以下操作：</st>
- en: <st c="716">Discuss the importance</st> <st c="740">of animations</st>
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="716">讨论动画的重要性</st> <st c="740">动画</st>
- en: <st c="753">Understand the SwiftUI</st> <st c="777">animation concept</st>
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="753">理解 SwiftUI</st> <st c="777">动画概念</st>
- en: <st c="794">Perform basic animations with the view modifier and the</st> `<st
    c="851">withAnimation</st>` <st c="864">function</st>
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="794">使用视图修改器和</st> `<st c="851">withAnimation</st>` <st c="864">函数</st>执行基本动画
- en: <st c="873">Perform advanced animations such as transitions and</st> <st c="926">keyframe
    animations</st>
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="873">执行高级动画，如过渡和</st> <st c="926">关键帧动画</st>
- en: <st c="945">Animate</st> <st c="954">SF symbols</st>
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="945">动画 SF 符号</st>
- en: <st c="964">Explaining why we need animations sounds weird and some may raise
    eyebrows about this topic.</st> <st c="1058">So, our first mission is to take
    this topic off the table before we move one pixel on the screen.</st> <st c="1156">So,
    let’s answer the following question – why do we need to care</st> <st c="1221">about
    animations?</st>
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="964">解释为什么我们需要动画听起来很奇怪，有些人可能会对这个话题皱眉头。</st> <st c="1058">因此，我们的首要任务是在我们开始在屏幕上移动一个像素之前，将这个话题从桌面上移开。</st>
    <st c="1156">那么，让我们回答以下问题——为什么我们需要关心</st> <st c="1221">动画？</st>
- en: <st c="1238">Technical requirements</st>
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="1238">技术要求</st>
- en: <st c="1261">For this chapter, it’s essential to download Xcode version 16.0
    or higher from the</st> <st c="1345">App Store.</st>
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1261">对于本章，从</st> <st c="1345">App Store</st>下载 Xcode 版本 16.0 或更高版本是至关重要的。
- en: <st c="1355">Ensure that you’re operating on the most recent version of macOS
    (Ventura or newer).</st> <st c="1441">Just search for Xcode in the App Store,
    choose the latest version, and proceed with the download.</st> <st c="1539">Open
    Xcode and complete any further setup instructions that appear.</st> <st c="1607">After
    Xcode is completely up and running, you</st> <st c="1653">can begin.</st>
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1355">确保您正在使用最新的 macOS 版本（Ventura 或更高版本）。</st> <st c="1441">只需在 App Store
    中搜索 Xcode，选择最新版本，然后继续下载。</st> <st c="1539">打开 Xcode 并完成出现的任何进一步设置说明。</st> <st
    c="1607">Xcode 完全运行后，您</st> <st c="1653">就可以开始了。</st>
- en: <st c="1663">Download the sample code from the following</st> <st c="1708">GitHub
    link:</st>
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1663">从以下</st> <st c="1708">GitHub 链接</st>下载示例代码：
- en: '[<st c="1720">https://github.com/PacktPublishing/Mastering-iOS-18-Development/tree/main/Chapter%206</st>](https://github.com/PacktPublishing/Mastering-iOS-18-Development/tree/main/Chapter%206)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[<st c="1720">https://github.com/PacktPublishing/Mastering-iOS-18-Development/tree/main/Chapter%206</st>](https://github.com/PacktPublishing/Mastering-iOS-18-Development/tree/main/Chapter%206)'
- en: <st c="1806">The importance of animations</st>
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="1806">动画的重要性</st>
- en: <st c="1835">Some of you may think that executing animations is mainly for fun
    and doesn’t really impact an</st> <st c="1931">app’s usability.</st> <st c="1948">But
    the truth is that animations play a crucial role in enhancing user engagement
    and interface design, especially in mobile applications.</st> <st c="2087">Here
    are a few benefits of</st> <st c="2114">using animations:</st>
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1835">有些人可能认为执行动画主要是为了娱乐，实际上并不会真正影响一个</st> <st c="1931">应用程序的可用性。</st>
    <st c="1948">但事实是，动画在增强用户参与度和界面设计方面起着至关重要的作用，尤其是在移动应用程序中。</st> <st c="2087">以下是使用动画的一些好处：</st>
    <st c="2114">使用动画：</st>
- en: <st c="2131">First, animations provide</st> **<st c="2158">visual feedback</st>**
    <st c="2173">in response to users’ actions – a button that grows when a user taps
    on it helps them know that they touched the</st> <st c="2287">right place</st>
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，动画为用户的操作提供**视觉反馈**——当用户点击按钮时，按钮会变大，这有助于他们知道他们触摸了正确的位置。
- en: <st c="2298">Animations can also provide</st> **<st c="2327">guidance and navigation</st>**
    <st c="2350">– transitions between pages indicate whether we move “forward” with
    our flow</st> <st c="2428">or backward</st>
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画还可以提供**指导和导航**——页面之间的转换表明我们是“向前”还是“向后”移动我们的流程。
- en: <st c="2439">Animations also help in</st> **<st c="2464">error handling</st>**
    <st c="2478">– we can animate error messages and general issues and reduce a</st>
    <st c="2543">user’s frustration</st>
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画还有助于**错误处理**——我们可以动画化错误消息和一般问题，并减少用户的挫败感。
- en: <st c="2561">Most importantly, in many cases, animations are part of the</st>
    **<st c="2622">app branding and uniqueness</st>** <st c="2649">and provide that
    special touch that strengthens the link between a user and</st> <st c="2726">an
    app</st>
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最重要的是，在许多情况下，动画是应用品牌和独特性的**一部分**，并提供那种特殊的触感，加强用户与**应用**之间的联系。
- en: <st c="2732">Now that we understand the importance of animation, let’s see how
    SwiftUI’s declarative approach aligns with</st> <st c="2842">that concept.</st>
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了动画的重要性，让我们看看 SwiftUI 的声明式方法如何与该概念相一致。
- en: <st c="2855">Understanding the concept of SwiftUI animations</st>
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 SwiftUI 动画的概念
- en: <st c="2903">For a developer</st> <st c="2920">coming from UIkit and taking
    their first steps in SwiftUI, the concept of writing animations in a declarative
    framework could feel a little awkward.</st> <st c="3069">After all, performing
    animations in UIkit was extremely simple – all we had to do was respond to some
    event and change some view properties within an animation closure.</st> <st c="3238">Here’s
    a simple example of how to fade out a view</st> <st c="3288">in UIkit:</st>
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个来自 UIKit 并在 SwiftUI 中迈出第一步的开发者来说，在声明式框架中编写动画的概念可能会感觉有点尴尬。
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <st c="3389">In this example, we modify the alpha level of</st> `<st c="3436">sampleView</st>`
    <st c="3446">inside a</st> `<st c="3456">UIView</st>` <st c="3462">animation closure.</st>
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们修改了 `<st c="3436">sampleView</st>` 在 `<st c="3456">UIView</st>` 动画闭包中的
    alpha 级别。
- en: <st c="3481">While this</st> <st c="3493">looks pretty simple, it comes with
    a significant drawback – the need to sync the animation action to the screen state.</st>
    <st c="3612">The</st> `<st c="3616">sampleView</st>` <st c="3626">component is
    now hidden – but does that mean that our view model or any other logic we incorporated
    in our screen is updated?</st> <st c="3753">This update is our responsibility.</st>
    <st c="3788">While this is a general</st> *<st c="3812">UIkit</st>* <st c="3817">problem,
    syncing between the view and the state can worsen when working</st> <st c="3890">with
    animations.</st>
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这看起来很简单，但它带来一个显著的缺点——需要将动画动作同步到屏幕状态。
- en: <st c="3906">However, in</st> *<st c="3919">SwiftUI</st>*<st c="3926">, the
    screen state is always synced with the UI, and that’s true for animations as well.</st>
    <st c="4015">The basic concept of SwiftUI animations revolves around the idea
    of animating changes to the view state, including properties such as position,
    size, opacity,</st> <st c="4174">and rotation.</st>
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在 *SwiftUI* 中，屏幕状态始终与 UI 保持同步，这对动画也是如此。
- en: <st c="4187">There are several ways of implementing animations in SwiftUI; some
    are truly simple, while others let us deliver advanced and</st> <st c="4314">complex
    animations.</st>
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SwiftUI 中实现动画有几种方法；有些确实很简单，而另一些则允许我们提供高级和复杂的动画。
- en: <st c="4333">Let’s warm up and start with some</st> <st c="4368">basic animations.</st>
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4333">让我们热身，并从一些</st> <st c="4368">基本动画</st> 开始。
- en: <st c="4385">Performing basic animatio</st><st c="4411">ns</st>
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="4385">执行基本</st><st c="4411">动画</st>
- en: <st c="4414">The fundamental</st> <st c="4431">way to understand how SwiftUI
    animations work is by associating a state value with a particular</st> <st c="4527">animation
    flow.</st>
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4414">理解 SwiftUI 动画工作原理的基本方法是将一个状态值与特定的</st> <st c="4527">动画流程</st> 相关联。
- en: <st c="4542">There are three ways of performing basic animations</st> <st c="4595">in
    SwiftUI:</st>
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4542">在 SwiftUI 中执行基本动画有三种方式：</st> <st c="4595">。</st>
- en: '`<st c="4617">animation</st>` **<st c="4626">modifier</st>** <st c="4635">–
    adding an animation to a</st> <st c="4663">specific view</st>'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="4617">animation</st>` **<st c="4626">修饰符</st>** <st c="4635">– 将动画添加到一个</st>
    <st c="4663">特定的视图</st> 上'
- en: '`<st c="4687">withAnimation</st>` **<st c="4700">global function</st>** <st
    c="4716">– performing animation by changing</st> <st c="4752">several states</st>'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="4687">withAnimation</st>` **<st c="4700">全局函数</st>** <st c="4716">–
    通过改变</st> <st c="4752">几个状态</st> 来执行动画'
- en: '`<st c="4773">animation()</st>` **<st c="4784">method</st>** <st c="4791">–
    attaching an animation to a</st> <st c="4822">binding value</st>'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="4773">animation()</st>` **<st c="4784">方法</st>** <st c="4791">– 将动画附加到一个</st>
    <st c="4822">绑定值</st> 上'
- en: <st c="4835">Developers usually get confused and think there’s some duplication
    here – separate ways to perform the same functionality.</st> <st c="4959">But
    the truth is that all three serve different purposes and needs.</st> <st c="5027">It’s
    up to us to decide the suitable way, according to our specific code structure</st>
    <st c="5110">and flow.</st> <st c="5120">Sometimes, you want to perform a particular
    animation to a specific view; occasionally, it is a shared experience with several
    views.</st> <st c="5254">Understanding the different use cases can help us decide
    how to perform an</st> <st c="5329">animation correctly.</st>
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4835">开发者通常会感到困惑，并认为这里有一些重复 – 执行相同功能的不同方法。</st> <st c="4959">但事实是，这三种方法都服务于不同的目的和需求。</st>
    <st c="5027">取决于我们根据特定的代码结构和流程来决定合适的方法。</st> <st c="5110">有时，你可能想要对特定的视图执行特定的动画；偶尔，它可能是多个视图共享的体验。</st>
    <st c="5254">理解不同的用例可以帮助我们决定如何正确地执行动画。</st>
- en: <st c="5349">Let’s start by adding an animation to a</st> <st c="5390">specific
    view.</st>
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5349">让我们首先给一个特定的视图添加一个动画。</st> <st c="5390">。</st>
- en: <st c="5404">Using the animation view modifier</st>
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="5404">使用动画视图修饰符</st>
- en: <st c="5438">The animation</st> <st c="5453">view modifier goal is to add</st>
    <st c="5482">animation to a specific view when a certain value changes.</st> <st
    c="5541">Here’s an example of using the animation</st> <st c="5582">view modifier:</st>
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5438">动画</st> <st c="5453">视图修饰符的目标是在某个值发生变化时向特定的视图添加动画。</st> <st c="5482">以下是一个使用动画</st>
    <st c="5582">视图修饰符的示例：</st>
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: <st c="5878">The preceding code changes the circle size by adding</st> `<st
    c="5932">50</st>` <st c="5934">points to its width and height, and it does that
    by using the animation view modifier.</st> <st c="6022">Note that the animation
    view modifier has a value parameter – the value the animation modifier monitors
    for changes.</st> <st c="6139">In this case, we use the</st> `<st c="6164">width</st>`
    <st c="6169">state variable.</st>
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5878">前面的代码通过向其宽度和高度添加</st> `<st c="5932">50</st>` <st c="5934">点来改变圆的尺寸，并且它是通过使用动画视图修饰符来做到这一点的。</st>
    <st c="6022">请注意，动画视图修饰符有一个值参数 – 动画修饰符监视其变化的值。</st> <st c="6139">在这种情况下，我们使用</st>
    `<st c="6164">width</st>` <st c="6169">状态变量。</st>
- en: <st c="6185">The animation</st> <st c="6200">view modifier is great for changing</st>
    <st c="6236">a specific view when a specific value changes.</st> <st c="6283">However,
    there are cases where this approach can be confusing.</st> <st c="6346">In this
    case, we define the animation in a specific place in the code but perform the
    change in another location.</st> <st c="6460">Moreover, using the animation view
    modifie</st><st c="6502">r can be cumbersome if we want to perform</st> <st c="6545">multiple
    animations.</st>
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6185">动画</st> <st c="6200">视图修饰符非常适合在特定值发生变化时改变特定的视图。</st> <st c="6236">然而，在某些情况下，这种方法可能会令人困惑。</st>
    <st c="6283">在这种情况下，我们在代码的特定位置定义动画，但在另一个位置执行更改。</st> <st c="6346">此外，如果我们想要执行多个动画，使用动画视图修饰符可能会很麻烦。</st>
- en: <st c="6565">If we want to perform multiple changes, we can use the</st> `<st
    c="6621">withAnimation:</st>` <st c="6635">function.</st> <st c="6646">Let’s see
    how to</st> <st c="6663">utilize it.</st>
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6565">如果我们想执行多个更改，我们可以使用</st> `<st c="6621">withAnimation:</st>` <st
    c="6635">函数。</st> <st c="6646">让我们看看如何</st> <st c="6663">利用它。</st>
- en: <st c="6674">Using the withAnimation function</st>
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="6674">使用 withAnimation 函数</st>
- en: <st c="6707">In its basic form, the</st> `<st c="6731">withAnimation:</st>`
    <st c="6745">function takes a closure as a parameter and animates</st> <st c="6799">any
    changes made within that</st> <st c="6828">closure.</st> <st c="6837">Usually,
    that’s done with a trigger to an event.</st> <st c="6886">Let’s see a simple</st>
    <st c="6905">code example:</st>
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6707">在其基本形式中，</st> `<st c="6731">withAnimation:</st>` <st c="6745">函数接受一个闭包作为参数，并动画化</st>
    <st c="6799">在该闭包内所做的任何更改。</st> <st c="6828">通常，这是通过触发事件来完成的。</st> <st c="6837">让我们看看一个简单的</st>
    <st c="6886">代码示例：</st>
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: <st c="7482">This code example simultaneously animates the positions of two
    circles when a button is tapped.</st> <st c="7579">We can see that, unlike the
    animation view modifier, by using the</st> `<st c="7645">withAnimation:</st>`
    <st c="7659">function, we bind the change to the animation more clearly</st> <st
    c="7719">and simply.</st>
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7482">此代码示例在按钮被点击时同时动画化两个圆的位置。</st> <st c="7579">我们可以看到，与动画视图修改器不同，通过使用</st>
    `<st c="7645">withAnimation:</st>` <st c="7659">函数，我们可以更清晰、更简单地绑定动画的变化。</st> <st
    c="7719">和简单。</st>
- en: <st c="7730">Another</st> <st c="7739">advantage that</st> `<st c="7754">withAnimation:</st>`
    <st c="7768">has is</st> <st c="7776">the ability to execute a</st> **<st c="7801">completion
    code</st>** <st c="7816">once an</st> <st c="7825">animation ends.</st>
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7730">另一个</st> <st c="7739">优势是</st> `<st c="7754">withAnimation:</st>`
    <st c="7768">具有的是</st> <st c="7776">执行一个</st> **<st c="7801">完成代码</st>** <st c="7816">一旦动画结束。</st>
- en: <st c="7840">Let’s take a look at the following</st> <st c="7876">code example:</st>
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7840">让我们看一下以下</st> <st c="7876">代码示例：</st>
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: <st c="8259">The code creates a blue circle and a button saying</st> **<st c="8311">Start</st>**<st
    c="8316">. Once the user taps the button, the circle</st> <st c="8360">animates
    its position, and at the end, the button title changes to</st> **<st c="8427">Reset</st>**<st
    c="8432">. Then, tapping the button brings back the circle, and at</st> <st c="8490">the
    end of the reverse animation, the button title returns</st> <st c="8549">to</st>
    **<st c="8552">Start</st>**<st c="8557">.</st>
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8259">此代码创建了一个蓝色圆圈和一个写着</st> **<st c="8311">开始</st>**<st c="8316">的按钮。一旦用户点击按钮，圆圈</st>
    <st c="8360">动画化其位置，并在最后，按钮标题变为</st> **<st c="8427">重置</st>**<st c="8432">。然后，点击按钮将圆圈带回，并在</st>
    <st c="8490">反向动画结束时，按钮标题返回</st> <st c="8549">到</st> **<st c="8552">开始</st>**<st
    c="8557">。</st>
- en: <st c="8558">Completion blocks in animations are essential to sync flow stages.</st>
    <st c="8626">For example, collapsing a side drawer and navigating to a new screen
    at the end is an excellent example of completion</st> <st c="8744">block usage.</st>
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8558">动画中的完成块对于同步流程阶段至关重要。</st> <st c="8626">例如，折叠侧边栏并在结束时导航到新屏幕是一个出色的完成</st>
    <st c="8744">块使用的例子。</st>
- en: <st c="8756">Now, it’s time to bring some more life to</st> <st c="8799">our
    animation.</st>
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8756">现在，是时候给我们的动画增添更多活力了。</st>
- en: <st c="8813">Bringing some life to our animations with spring animations</st>
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="8813">用弹簧动画给我们的动画增添一些活力</st>
- en: <st c="8873">If you have tried out the code examples you have seen so far, you
    have probably noticed that the</st> <st c="8971">animations ran smoothly but were
    a little bit, well, boring.</st> <st c="9032">That’s because the animations ran
    linearly and were not</st> <st c="9088">that interesting.</st>
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8873">如果你已经尝试过你之前看到的代码示例，你可能已经注意到动画运行得相当流畅，但有点，嗯，无聊。</st> <st c="8971">这是因为动画是线性运行的，并不</st>
    <st c="9032">那么有趣。</st>
- en: <st c="9105">Try adding the following parameter to the</st> <st c="9148">previous
    example:</st>
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9105">尝试将以下参数添加到</st> <st c="9148">前面的示例中：</st>
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '<st c="9292">In this example, we added</st> `<st c="9319">.bouncy(extraBounce:
    0.3)</st>` <st c="9344">to our</st> `<st c="9352">withAnimation</st>` <st c="9365">function.</st>
    <st c="9376">Running the code shows the same animation as before, but now, the
    circle bounces when it reaches the end.</st> <st c="9482">It is a small but significant
    addition – the bounce effect adds a realistic touch to our animation and can improve</st>
    <st c="9597">user engagement.</st>'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '<st c="9292">在这个例子中，我们在</st> `<st c="9319">.bouncy(extraBounce: 0.3)</st>`
    <st c="9344">中添加了</st> `<st c="9352">withAnimation</st>` <st c="9365">函数。</st>
    <st c="9376">运行代码显示与之前相同的动画，但现在，当圆圈到达末端时它会弹跳。</st> <st c="9482">这是一个微小但重要的添加——弹跳效果为我们的动画增添了现实感，并可以提高</st>
    <st c="9597">用户参与度。'
- en: <st c="9613">There are</st> <st c="9624">several interesting visual transitions
    we can add to our animations.</st> <st c="9693">For example, we can make the bouncing
    smoother using the</st> `<st c="9750">.</st>``<st c="9751">smooth</st>` <st c="9758">function:</st>
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9613">我们可以添加到动画中的有趣视觉过渡有几个。</st> <st c="9624">例如，我们可以使用</st> `<st c="9750">.</st>``<st
    c="9751">smooth</st>` <st c="9758">函数来使弹跳更平滑：</st>
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: <st c="9809">We can also make the bouncing snappier by making the animation
    faster with a small</st> <st c="9893">bounce amount:</st>
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9809">我们还可以通过使用小的</st> <st c="9893">弹跳量来使弹跳更迅速，通过使动画更快：</st>
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: <st c="9930">It is recommended to look at Apple’s documentation to discover
    more visual transitions that we can apply easily to our</st> <st c="10050">animations:</st>
    [<st c="10062">https://developer.apple.com/documentation/swiftui/animation</st>](https://developer.apple.com/documentation/swiftui/animation)<st
    c="10121">.</st>
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9930">建议查看 Apple 的文档以发现更多我们可以轻松应用到我们</st> <st c="10050">动画中的视觉过渡：</st>
    [<st c="10062">https://developer.apple.com/documentation/swiftui/animation</st>](https://developer.apple.com/documentation/swiftui/animation)<st
    c="10121">。</st>
- en: <st c="10122">So far, we have performed very basic animations.</st> <st c="10172">But
    modern apps require modern experiences.</st> <st c="10216">Let’s move on to some
    more ways to create</st> <st c="10258">advanced animations.</st>
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10122">到目前为止，我们只执行了非常基本的动画。</st> <st c="10172">但现代应用需要现代体验。</st> <st
    c="10216">让我们继续探索一些创建</st> <st c="10258">高级动画的更多方法。
- en: <st c="10278">Performing advanced animations</st>
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="10278">执行高级动画</st>
- en: <st c="10309">We mentioned that transitions are great for guidance and navigation,
    and part of that concept is</st> <st c="10407">providing clarity about incoming
    and leaving views from our canvas.</st> <st c="10475">Sliding a view from the
    bottom can provide a sense of a drawer being opened and closed, and scaling a
    view can visually represent the progress of an</st> <st c="10624">ongoing process.</st>
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10309">我们提到过渡对于指导和导航非常出色，这部分概念的一部分是</st> <st c="10407">在我们的画布上提供关于进入和离开视图的清晰度。</st>
    <st c="10475">从底部滑动视图可以提供抽屉打开和关闭的感觉，缩放视图可以直观地表示一个</st> <st c="10624">正在进行的过程的进度。
- en: <st c="10640">So far, we have discussed how to animate views from one state
    to another.</st> <st c="10715">Now, we will explore transitions – a way to animate
    views when they appear</st> <st c="10790">or disappear.</st>
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10640">到目前为止，我们已经讨论了如何将视图从一个状态动画化到另一个状态。</st> <st c="10715">现在，我们将探索过渡——一种在视图出现</st>
    <st c="10790">或消失时动画化视图的方法。
- en: <st c="10803">Performing transitions</st>
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="10803">执行过渡</st>
- en: <st c="10826">Implementing</st> <st c="10840">a view transition is easy – we
    have some nice built-in transitions to choose from, and if that’s not enough,
    we can also create a</st> <st c="10970">custom transition.</st>
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10826">实现</st> <st c="10840">视图过渡很简单——我们有一些很好的内置过渡可供选择，如果还不够，我们还可以创建一个</st>
    <st c="10970">自定义过渡。
- en: <st c="10988">Let’s start with some basic,</st> <st c="11018">built-in transitions.</st>
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10988">让我们从一些基本的、内置的过渡开始。</st> <st c="11018">过渡。</st>
- en: <st c="11039">Implementing built-in transitions</st>
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="11039">实现内置过渡</st>
- en: <st c="11073">To add</st> <st c="11081">a transition, we should use the</st>
    `<st c="11113">transition</st>` <st c="11123">modifier with the specific view
    we want to animate, triggering it using the</st> `<st c="11200">withAnimation</st>`
    <st c="11213">function we learned about in the</st> *<st c="11247">Using the withAnimation</st>*
    *<st c="11271">function</st>* <st c="11279">section.</st>
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11073">要添加</st> <st c="11081">过渡效果，我们应该使用</st> `<st c="11113">transition</st>`
    <st c="11123">修饰符与我们要动画化的特定视图，通过使用</st> `<st c="11200">withAnimation</st>` <st
    c="11213">函数来触发它，该函数我们在</st> *<st c="11247">使用 withAnimation 函数</st>* *<st c="11271">部分</st>中了解过。
- en: <st c="11288">Here’s a simple example of a slide</st> <st c="11324">in transition:</st>
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11288">这是一个简单的</st> <st c="11324">过渡中的幻灯片</st>示例：
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: <st c="11586">The code example consists of</st> `<st c="11616">VStack</st>`
    <st c="11622">with a button and text.</st> <st c="11647">We also have a state
    determining whether the text is visible</st> <st c="11708">or hidden.</st>
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11586">代码示例由</st> `<st c="11616">VStack</st>` <st c="11622">和一个按钮以及文本组成。</st>
    <st c="11647">我们还有一个状态来决定文本是可见还是隐藏。</st>
- en: <st c="11718">Tapping on the button reveals the text using the</st> `<st c="11768">withAnimation</st>`
    <st c="11781">function.</st> <st c="11792">But the text</st> <st c="11805">also
    has a transition view modifier that</st> <st c="11845">describes how it is supposed
    to appear – in this case, using a</st> <st c="11909">sliding-in transition.</st>
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11718">点击按钮使用</st> `<st c="11768">withAnimation</st>` <st c="11781">函数显示文本。</st>
    <st c="11792">但是文本</st> <st c="11805">也有一个描述其如何出现的过渡视图修饰符，在这种情况下，使用一个</st> <st
    c="11909">滑动进入过渡。</st>
- en: <st c="11931">The transition view modifier describes how the view appears and
    how it is supposed</st> <st c="12015">to disappear.</st>
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11931">过渡视图修饰符描述了视图的显示方式和消失方式。</st> <st c="12015">。</st>
- en: <st c="12028">The</st> `<st c="12033">slide</st>` <st c="12038">transition inserts
    the view by moving it from the leading edge and removing it toward the trailing
    edge.</st> <st c="12144">Note that the slide transition directions cannot be changed,
    and they are set by the SwiftUI framework.</st> <st c="12248">However, there are
    several more transitions we can use to achieve our</st> <st c="12318">desired
    behavior:</st>
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12028">The</st> `<st c="12033">slide</st>` <st c="12038">transition inserts
    the view by moving it from the leading edge and removing it toward the trailing
    edge.</st> <st c="12144">请注意，滑动过渡的方向不能更改，它们由 SwiftUI 框架设置。</st> <st c="12248">但是，我们还可以使用几个其他过渡来实现我们</st>
    <st c="12318">期望的行为：</st>
- en: '`<st c="12335">move</st>`<st c="12340">: Moves the view in/from a</st> <st
    c="12368">specific edge:</st>'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="12335">move</st>`<st c="12340">: 将视图移动到/从特定边缘：</st>'
- en: '[PRE8]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`<st c="12442">scale</st>`<st c="12448">: Scales the view in a specific amount
    and from a</st> <st c="12499">specific anchor:</st>'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="12442">scale</st>`<st c="12448">: 以特定数量和从特定锚点缩放视图：</st>'
- en: '[PRE9]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`<st c="12591">opacity</st>`<st c="12599">: Performs a “fade in/out” effect
    on</st> <st c="12637">the view:</st>'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="12591">opacity</st>`<st c="12599">: 对视图执行“淡入/淡出”效果：</st> <st c="12637">。</st>'
- en: '[PRE10]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: <st c="12696">These types of transitions are well documented in the Apple website
    and SDK, and we can also try them using the chapter’s</st> <st c="12819">GitHub
    repository.</st>
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12696">这些类型的过渡在 Apple 网站和 SDK 中有很好的文档记录，我们也可以通过章节的</st> <st c="12819">GitHub
    仓库</st> 来尝试它们。</st>
- en: <st c="12837">It’s important to note that we can use these transitions to show
    and hide animations.</st> <st c="12924">Yet, in some cases, we might prefer a
    different animation for hiding compared to showing.</st> <st c="13014">Having
    a different animation for hiding and showing is called an</st> **<st c="13079">asymmetric
    transition</st>**<st c="13100">. Let’s</st> <st c="13108">see a code example</st>
    <st c="13127">for that:</st>
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12837">需要注意的是，我们可以使用这些过渡来显示和隐藏动画。</st> <st c="12924">然而，在某些情况下，我们可能更喜欢显示和隐藏时使用不同的动画。</st>
    <st c="13014">隐藏和显示使用不同的动画称为</st> **<st c="13079">非对称过渡</st>**<st c="13100">。让我们</st>
    <st c="13108">看看一个代码示例</st> <st c="13127">来演示这一点：</st>
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Text("Scale and slide") <st c="13545">.transition(.scale.combined(with:</st>
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Text("缩放和滑动") <st c="13545">.transition(.scale.combined(with:</st>
- en: <st c="13578">.slide))</st>
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13578">.slide))</st>
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '.transition(.scale.combined(with: .slide.combined(with:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '.transition(.scale.combined(with: .slide.combined(with:'
- en: .opacity)))
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: .opacity)))
- en: '[PRE13]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'struct ViewRotationModifier: ViewModifier {'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 'struct ViewRotationModifier: ViewModifier {'
- en: 'let angle: Angle'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'let angle: Angle'
- en: 'let opacity: CGFloat'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'let opacity: CGFloat'
- en: 'let scale: CGFloat'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'let scale: CGFloat'
- en: 'func body(content: Content) -> some View {'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'func body(content: Content) -> some View {'
- en: content
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: content
- en: .rotationEffect(angle)
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .rotationEffect(angle)
- en: .scaleEffect(scale)
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .scaleEffect(scale)
- en: .opacity(opacity)
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .opacity(opacity)
- en: '}'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE14]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: let rotate = AnyTransition.modifier(
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: let rotate = AnyTransition.modifier(
- en: 'active: <st c="15350">ViewRotationModifier</st>(angle: .degrees(360),'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'active: <st c="15350">ViewRotationModifier</st>(angle: .degrees(360),'
- en: 'opacity: 0.0, scale: 0.0),'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'opacity: 0.0, scale: 0.0),'
- en: 'identity: <st c="15431">ViewRotationModifier</st>(angle: .degrees(0),'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'identity: <st c="15431">ViewRotationModifier</st>(angle: .degrees(0),'
- en: 'opacity: 1.0, scale: 1.0)'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'opacity: 1.0, scale: 1.0)'
- en: )
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '[PRE15]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'struct CustomizedTransitionView: View {'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 'struct CustomizedTransitionView: View {'
- en: '@State private var showRectangle: Bool = false'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@State private var showRectangle: Bool = false'
- en: 'var body: some View {'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'var body: some View {'
- en: VStack {
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: VStack {
- en: Spacer()
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: Spacer()
- en: if showRectangle {
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: if showRectangle {
- en: Rectangle()
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: Rectangle()
- en: '.frame(width: 100, height: 100)'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '.frame(width: 100, height: 100)'
- en: .foregroundColor(.blue) <st c="15907">.transition(rotate)</st> }
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .foregroundColor(.blue) <st c="15907">.transition(rotate)</st> }
- en: Spacer()
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: Spacer()
- en: Button("Insert Rectangle") {
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: Button("插入矩形") {
- en: withAnimation {
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: withAnimation {
- en: showRectangle.toggle()
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: showRectangle.toggle()
- en: '}'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE16]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: struct AnimationProperties {
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: struct AnimationProperties {
- en: var scale = 1.0
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var scale = 1.0
- en: var opacity = 1.0
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var opacity = 1.0
- en: '}'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'struct KeyFrameAnimations: View {'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 'struct KeyFrameAnimations: View {'
- en: 'var body: some View {'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'var body: some View {'
- en: Circle()
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: Circle()
- en: .foregroundColor(.red)
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .foregroundColor(.red)
- en: .frame(width:100, height:100)
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .frame(width:100, height:100)
- en: '.<st c="18911">keyframeAnimator</st>(initialValue:'
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '.<st c="18911">关键帧动画器</st>(initialValue:'
- en: 'AnimationProperties(), repeating: true) {'
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'AnimationProperties(), repeating: true) {'
- en: content, value in
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: content, value in
- en: content
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: content
- en: .opacity(value.opacity)
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .opacity(value.opacity)
- en: .scaleEffect(value.scale)
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .scaleEffect(value.scale)
- en: '} <st c="19064">keyframes</st>: { _ in <st c="19083">KeyframeTrack</st>(\.scale)
    { <st c="19109">CubicKeyframe</st>(0.7, duration: 0.8) <st c="19144">CubicKeyframe</st>(1.0,'
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '} <st c="19064">关键帧</st>: { _ in <st c="19083">KeyframeTrack</st>(\.scale)
    { <st c="19109">CubicKeyframe</st>(0.7, duration: 0.8) <st c="19144">CubicKeyframe</st>(1.0,'
- en: 'duration: 0.8)'
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'duration: 0.8)'
- en: '} <st c="19181">KeyframeTrack</st>(\.opacity) { <st c="19209">CubicKeyframe</st>(0.3,
    duration: 0.8) <st c="19244">CubicKeyframe</st>(1.0, duration: 0.8)'
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '} <st c="19181">关键帧轨道</st>(\.opacity) { <st c="19209">CubicKeyframe</st>(0.3,
    duration: 0.8) <st c="19244">CubicKeyframe</st>(1.0, duration: 0.8)'
- en: '}'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE17]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'CubicKeyframe(0.5, duration: 0.2, <st c="21871">startVelocity</st>: 0.5, <st
    c="21892">endVelocity</st>: 0.8)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 'CubicKeyframe(0.5, duration: 0.2, <st c="21871">起始速度</st>: 0.5, <st c="21892">结束速度</st>:
    0.8)'
- en: 'CubicKeyframe(0.7, duration: 0.5)'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 'CubicKeyframe(0.7, duration: 0.5)'
- en: '[PRE18]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '<st c="23463">let duration: TimeInterval = 1.8</st> var body: some View {'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '<st c="23463">let duration: TimeInterval = 1.8</st> var body: some View {'
- en: Circle()
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: Circle()
- en: .foregroundColor(.red)
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .foregroundColor(.red)
- en: .frame(width:100, height:100)
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .frame(width:100, height:100)
- en: '.keyframeAnimator(initialValue:'
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '.keyframeAnimator(initialValue:'
- en: 'AnimationProperties(), repeating: true) {'
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'AnimationProperties(), repeating: true) {'
- en: content, value in
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: content, value in
- en: content
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: content
- en: .opacity(value.opacity)
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .opacity(value.opacity)
- en: .scaleEffect(value.scale)
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .scaleEffect(value.scale)
- en: '} keyframes: { _ in'
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '} keyframes: { _ in'
- en: KeyframeTrack(\.scale) {
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: KeyframeTrack(\.scale) {
- en: 'CubicKeyframe(0.7, <st c="23795">duration: 0.5 *</st>'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'CubicKeyframe(0.7, <st c="23795">持续时间: 0.5 *</st>'
- en: <st c="23810">duration</st>)
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23810">持续时间</st>)
- en: CubicKeyframe(1.0,
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: CubicKeyframe(1.0,
- en: 'duration: <st c="23851">0.5 * duration</st>)'
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'duration: <st c="23851">0.5 * duration</st>)'
- en: '}'
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: KeyframeTrack(\.opacity) {
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: KeyframeTrack(\.opacity) {
- en: 'CubicKeyframe(0.3, <st c="23916">duration: 0.5 *</st>'
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'CubicKeyframe(0.3, <st c="23916">持续时间: 0.5 *</st>'
- en: <st c="23931">duration</st>)
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23931">持续时间</st>)
- en: 'CubicKeyframe(1.0, <st c="23962">duration: 0.5 *</st>'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'CubicKeyframe(1.0, <st c="23962">持续时间: 0.5 *</st>'
- en: <st c="23977">duration</st>)
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23977">持续时间</st>)
- en: '}'
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE19]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'var body: some View {'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 'var body: some View {'
- en: HStack { <st c="25519">Image(systemName:</st>
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: HStack { <st c="25519">Image(systemName:</st>
- en: <st c="25536">"alarm.waves.left.and.right.fill")</st> Text("Alarm")
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="25536">"alarm.waves.left.and.right.fill")</st> Text("闹钟")
- en: '}.font(.system(size: 30))'
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}.font(.system(size: 30))'
- en: '}'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE20]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'struct SFSymbolsAnimationView: View {'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 'struct SFSymbolsAnimationView: View {'
- en: '@State private var animate = false'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@State private var animate = false'
- en: 'var body: some View {'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'var body: some View {'
- en: HStack {
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: HStack {
- en: 'Image(systemName:'
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'Image(systemName:'
- en: '"alarm.waves.left.and.right.fill") <st c="27851">.symbolEffect(.bounce, options:
    .repeating,</st>'
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"alarm.waves.left.and.right.fill") <st c="27851">.symbolEffect(.bounce, options:
    .repeating,</st>'
- en: '<st c="27894">value: animate)</st> Text("10:30")'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '<st c="27894">值: animate)</st> Text("10:30")'
- en: '}.font(.system(size: 40))'
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}.font(.system(size: 40))'
- en: .onTapGesture {
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .onTapGesture {
- en: animate = true
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: animate = true
- en: '}'
  id: totrans-201
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE21]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Image(systemName: "person.2.wave.2")'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 'Image(systemName: "person.2.wave.2")'
- en: '[PRE22]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Image(systemName: "person.2.wave.2")'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 'Image(systemName: "person.2.wave.2")'
- en: .foregroundStyle(.brown, .blue)
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .foregroundStyle(.棕色, .蓝色)
- en: '[PRE23]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Image(systemName: "person.3.sequence.fill")'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 'Image(systemName: "person.3.sequence.fill")'
- en: .foregroundStyle(.red, .blue, .<st c="29887">brown</st>)
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .foregroundStyle(.red, .blue, .<st c="29887">棕色</st>)
- en: '[PRE24]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Image(systemName: "arrowshape.turn.up.forward") <st c="31224">.environment(\.layoutDirection,
    .rightToLeft)</st>'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 'Image(systemName: "arrowshape.turn.up.forward") <st c="31224">.environment(\.layoutDirection,
    .rightToLeft)</st>'
- en: '[PRE25]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Image(systemName: "character.book.closed") <st c="32137">.environment(\.locale,
    .init(identifier: "he"))</st>'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 'Image(systemName: "character.book.closed") <st c="32137">.environment(\.locale,
    .init(identifier: "he"))</st>'
- en: '[PRE26]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
