- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Android Studio Tips and Tricks to Help You during Development
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android Studio 开发技巧与窍门
- en: As an Android developer, writing code should not just be the end goal; rather,
    understanding how to find issues in your applications, using formatting tips to
    navigate the code base faster, and other skills come in handy.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名 Android 开发者，编写代码不应只是最终目标；而是理解如何找到您应用程序中的问题，使用格式化技巧更快地导航代码库，以及其他技能都非常有用。
- en: The programming process includes a lot of collaboration. This can be in peer
    code review, pair programming, or debugging issues. In these situations, it is
    handy if you can move fast, for instance, when debugging or formatting code before
    you submit your pull request. In this chapter, you will learn great Git and Android
    Studio tips and tricks to help in your day-to-day development.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 编程过程包括大量的协作。这可以是在同行代码审查、结对编程或调试问题。在这些情况下，如果您能够快速行动，例如在提交拉取请求之前调试或格式化代码，那就非常方便。在本章中，您将学习到许多优秀的
    Git 和 Android Studio 技巧和窍门，以帮助您在日常开发中更加得心应手。
- en: 'In this chapter, we’ll be covering the following recipes:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下菜谱：
- en: The importance of profiling your Android applications
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析 Android 应用程序的重要性
- en: Quick Android shortcuts to make your development faster
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速的 Android 短路键来加速您的开发
- en: JetBrains Toolbox and essential plugins to know
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您需要了解的 JetBrains Toolbox 和基本插件
- en: Debugging your code
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试您的代码
- en: How to extract methods and method parameters
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何提取方法和方法参数
- en: Understanding Git essentials
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Git 基础知识
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The complete source code for this chapter can be found at [https://github.com/PacktPublishing/Modern-Android-13-Development-Cookbook](https://github.com/PacktPublishing/Modern-Android-13-Development-Cookbook).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的完整源代码可以在 [https://github.com/PacktPublishing/Modern-Android-13-Development-Cookbook](https://github.com/PacktPublishing/Modern-Android-13-Development-Cookbook)
    找到。
- en: The importance of profiling your Android applications
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析 Android 应用程序的重要性
- en: 'In Android, **profiling** is the process of analyzing an application’s performance
    to identify its strengths and weaknesses. Profiling your Android applications
    is crucial for the following reasons:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android 中，**分析**是指分析应用程序性能以识别其优势和劣势的过程。分析您的 Android 应用程序对于以下原因至关重要：
- en: It helps you identify performance bottlenecks such as slow code, memory leaks,
    and excessive CPU usage. This knowledge can help you optimize your code and make
    your application run more efficiently.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它帮助您识别性能瓶颈，如缓慢的代码、内存泄漏和过度的 CPU 使用。这些知识可以帮助您优化代码，使您的应用程序运行得更高效。
- en: It improves the user experience. A poorly performing application can lead to
    user frustration and negative reviews. By profiling your application and optimizing
    its performance, you can provide a better user experience, leading to increased
    user engagement and positive reviews.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于提升用户体验。性能不佳的应用程序可能导致用户沮丧和负面评价。通过分析您的应用程序并优化其性能，您可以提供更好的用户体验，从而提高用户参与度和正面评价。
- en: It helps save time and money. It is much easier and less expensive to fix performance
    issues early on than to try to fix them later when they have become more complex.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于节省时间和金钱。在问题变得复杂之前尽早修复性能问题要比后来尝试修复它们容易得多，也便宜得多。
- en: Hence, in this recipe, we will explore why profiling your Android applications
    is essential and look at best practices and tips.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本菜谱中，我们将探讨为什么分析您的 Android 应用程序是必要的，并查看最佳实践和技巧。
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will be looking at how to use the Profiler to profile our
    Android application. You do not need to create a new project; you can simply use
    a pre-existing project to follow along.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们将探讨如何使用分析器来分析我们的 Android 应用程序。您不需要创建一个新的项目；您可以直接使用现有的项目来跟随操作。
- en: How to do it…
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to get started with using a Profiler in Android:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤开始使用分析器：
- en: For this chapter, we are using Android Studio Flamingo 2022.2.1 Patch 1\. In
    your Android Studio, go to **View** | **Tool Windows** | **Profiler** and click
    the Profiler, which will launch it.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于本章，我们使用的是 Android Studio Flamingo 2022.2.1 补丁 1。在您的 Android Studio 中，转到 **视图**
    | **工具窗口** | **分析器** 并点击分析器，它将启动。
- en: Note
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To be able to see any activity, you need to start your emulator.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看任何活动，您需要启动您的模拟器。
- en: '![Figure 12.1 – The Profiler in Android Studio](img/Figure_12.1.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.1 – Android Studio 中的分析器](img/Figure_12.1.jpg)'
- en: Figure 12.1 – The Profiler in Android Studio
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.1 – Android Studio 中的分析器
- en: You can also navigate to the bottom menu option, near to **App Inspection**;
    see the green arrow in *Figure 12**.2*, which indicates another place you can
    start a Profiler from. The read arrow indicates the emulator that is attached
    to visualize the profile.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还可以导航到底部菜单选项，靠近**App Inspection**；参见*图12.2*中的绿色箭头，它指示你可以从另一个地方开始Profiler。读箭头表示连接以可视化配置文件的模拟器。
- en: '![Figure 12.2 – The Profiler started in Android Studio](img/Figure_12.2.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图12.2 – 在Android Studio中启动Profiler](img/Figure_12.2.jpg)'
- en: Figure 12.2 – The Profiler started in Android Studio
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.2 – 在Android Studio中启动Profiler
- en: When your Profiler starts running, which means it is attached to your application,
    you should see **CPU**, **MEMORY**, and **ENERGY**. Depending on your application
    resources, the data might vary from what you see in *Figure 12**.3*.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你的Profiler开始运行时，这意味着它已连接到你的应用程序，你应该能看到**CPU**、**MEMORY**和**ENERGY**。根据你的应用程序资源，数据可能与你在*图12.3*中看到的不同。
- en: '![Figure 12.3 – The Profiler running](img/Figure_12.3.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图12.3 – Profiler正在运行](img/Figure_12.3.jpg)'
- en: Figure 12.3 – The Profiler running
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.3 – Profiler正在运行
- en: You can do a lot, such as simply recording all your method traces, looking at
    how your resources are utilized, and analyzing the flame chart.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以做很多事情，例如简单地记录所有方法跟踪，查看你的资源是如何被利用的，以及分析火焰图。
- en: '![Figure 12.4 – Different ways to utilize the Profiler](img/Figure_12.4.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图12.4 – 利用Profiler的不同方式](img/Figure_12.4.jpg)'
- en: Figure 12.4 – Different ways to utilize the Profiler
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.4 – 利用Profiler的不同方式
- en: A CPU flame chart is a type of performance visualization that shows the hierarchical
    structure of a program’s execution over time. It typically includes a timeline
    at the top of the chart, with function calls represented as rectangles stacked
    vertically.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CPU火焰图是一种性能可视化类型，它显示了程序随时间执行的层次结构。它通常在图表顶部包含一个时间线，函数调用以垂直堆叠的矩形表示。
- en: Depending on the color, the width of each rectangle represents the duration
    of the function call, and the rectangle’s color represents the CPU usage of that
    function. The chart allows Android developers to identify which functions take
    up the most CPU time quickly and can help inform them where to debug and optimize
    performance, as shown in *Figure 12**.5*.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 根据颜色，每个矩形的宽度代表函数调用的持续时间，矩形的颜色代表该函数的CPU使用情况。图表允许Android开发者快速识别占用最多CPU时间的函数，并有助于他们确定调试和优化性能的位置，如图*图12.5*所示。
- en: '![Figure 12.5 – The CPU flame chart](img/Figure_12.5.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图12.5 – CPU火焰图](img/Figure_12.5.jpg)'
- en: Figure 12.5 – The CPU flame chart
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.5 – CPU火焰图
- en: In other words, the application heap is a dedicated, hard, limited memory pool
    allocated to your app.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，应用程序堆是一个专门、固定、有限的内存池，分配给你的应用程序。
- en: Note
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If your app reaches the heap capacity and tries to allocate any extra memory,
    you will receive an `OutOfMemoryError` message.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序达到堆容量并尝试分配任何额外内存，你将收到一个`OutOfMemoryError`消息。
- en: Finally, a memory leak is a software bug where a program or application repeatedly
    fails to release memory that it no longer needs, or your garbage collector is
    not working as expected. This can cause the program to gradually consume more
    and more memory over time, eventually leading to poor performance or the crashing
    of your application.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，内存泄漏是一种软件错误，其中程序或应用程序反复未能释放它不再需要的内存，或者你的垃圾收集器没有按预期工作。这可能导致程序随着时间的推移逐渐消耗越来越多的内存，最终导致性能下降或应用程序崩溃。
- en: How it works…
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: An app performs poorly if it responds slowly, has choppy animations, freezes
    a lot, or consumes a lot of power. Fixing performance problems involves identifying
    areas where your application does not optimize the use of resources, such as the
    CPU, memory, graphics, network, or device battery.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序响应缓慢、动画不流畅、经常冻结或消耗大量电力，则性能不佳。修复性能问题涉及识别应用程序未优化资源使用的地方，例如CPU、内存、图形、网络或设备电池。
- en: 'Android Studio offers several tools to help developers spot and visualize potential
    problems:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio提供了几个工具来帮助开发者发现和可视化潜在问题：
- en: The CPU Profiler, which helps track runtime performance issues
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CPU Profiler，它有助于跟踪运行时性能问题
- en: The Memory Profiler, which helps track any memory allocations
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存Profiler，它有助于跟踪任何内存分配
- en: The Network Profiler, which monitors network traffic usage
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络Profiler，它监控网络流量使用
- en: The Energy Profiler, which tracks energy usage, which can contribute to battery
    drain
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能量Profiler，它跟踪能源使用，这可能导致电池耗尽
- en: You can think of profiling in Android through a lens of inspecting, improving,
    and monitoring your code base. See *Figure 12**.6*.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过查看图 12.6 来了解 Android 中的性能分析。
- en: "![Figure 12.6 – The model for performance source (android.developer.com)\uFEFF\
    ](img/Figure_12.6.jpg)"
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.6 – 性能源模型（android.developer.com）](img/Figure_12.6.jpg)'
- en: Figure 12.6 – The model for performance source (android.developer.com)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.6 – 性能源模型（android.developer.com）
- en: See more…
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看更多...
- en: 'Learn more about `OutOfMemoryError` by following this link: [https://developer.Android.com/reference/java/lang/OutOfMemoryError](https://developer.Android.com/reference/java/lang/OutOfMemoryError).
    You can also learn more about profiling by simply using this link: [https://developer.android.com/studio/profile](https://developer.android.com/studio/profile).'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下链接了解 `OutOfMemoryError` 的更多信息：[https://developer.Android.com/reference/java/lang/OutOfMemoryError](https://developer.Android.com/reference/java/lang/OutOfMemoryError)。您也可以通过此链接了解有关性能分析的信息：[https://developer.android.com/studio/profile](https://developer.android.com/studio/profile)。
- en: Quick Android shortcuts to make your development faster
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速 Android 快捷键，让您的开发更高效
- en: Shortcuts can be helpful to developers by making their work quicker and more
    efficient, allowing them to focus on writing code and solving problems rather
    than navigating menus and toolbars. Shortcuts can help automate repetitive tasks
    such as formatting code, renaming variables, or navigating between files, freeing
    developers’ time and mental energy for more meaningful work.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 快捷键可以帮助开发者通过使他们的工作更快更高效，让他们能够专注于编写代码和解决问题，而不是在菜单和工具栏中导航。快捷键可以帮助自动化重复性任务，如格式化代码、重命名变量或在不同文件之间导航，从而为开发者节省时间和精力，让他们有更多时间从事更有意义的工作。
- en: In addition, when developers use the same shortcuts across different tools and
    applications, it can help maintain consistency in their workflows and reduce the
    risk of errors caused by accidentally using the wrong command or tool. Also, for
    developers with disabilities or physical limitations, using shortcuts can be a
    more accessible way to interact with software than using a mouse or trackpad.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当开发者在不同工具和应用程序中使用相同的快捷键时，可以帮助保持他们工作流程的一致性，并减少因意外使用错误命令或工具而造成的错误风险。对于有残疾或身体限制的开发者来说，使用快捷键可能比使用鼠标或触摸板与软件交互更方便。
- en: Getting ready
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This isn’t really a recipe but a list of useful shortcuts, we will look at widely
    used shortcuts in Windows and Mac, which are the most popular operating systems
    used on laptops.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上不是一个食谱，而是一份有用的快捷键列表，我们将查看在笔记本电脑上使用最广泛的 Windows 和 Mac 快捷键。
- en: How to do it…
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Here are some Android Studio shortcuts in both Mac and Windows operating systems
    that can help you speed up your workflow:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列出了一些在 Mac 和 Windows 操作系统上使用的 Android Studio 快捷键，可以帮助您加快工作流程：
- en: 'Here are some basic navigation shortcuts:'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这里有一些基本的导航快捷键：
- en: '**Open class or file**: *Ctrl* + *N* (Windows) or *Cmd* + *O* (Mac)'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**打开类或文件**：*Ctrl* + *N*（Windows）或 *Cmd* + *O*（Mac）'
- en: '**Find text across project**: *Ctrl* + *Shift* + *F* (Windows) or *Cmd* + *Shift*
    + *F* (Mac)'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在项目范围内查找文本**：*Ctrl* + *Shift* + *F*（Windows）或 *Cmd* + *Shift* + *F*（Mac）'
- en: '**Open Recent Files popup**: *Ctrl* + *E* (Windows) or *Cmd* + *E* (Mac)'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**打开最近文件弹出窗口**：*Ctrl* + *E*（Windows）或 *Cmd* + *E*（Mac）'
- en: '**Search for and execute any action or command**: *Ctrl* + *Shift* + *A* (Windows)
    or *Cmd* + *Shift* + *A* (Mac)'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**搜索并执行任何操作或命令**：*Ctrl* + *Shift* + *A*（Windows）或 *Cmd* + *Shift* + *A*（Mac）'
- en: 'Code editing shortcuts:'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码编辑快捷键：
- en: '**Code completion suggestions**: *Ctrl* + spacebar (Windows and Mac)'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码补全建议**：*Ctrl* + 空格键（Windows 和 Mac）'
- en: '**Complete current statement**: *Ctrl* + *Shift* + *Enter* (Windows) or *Cmd*
    + *Shift* + *Enter* (Mac)'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完成当前语句**：*Ctrl* + *Shift* + *Enter*（Windows）或 *Cmd* + *Shift* + *Enter*（Mac）'
- en: '**Duplicate current line**: *Ctrl* + *D* (Windows) and (Mac) *Cmd* + *D*'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复制当前行**：*Ctrl* + *D*（Windows）和 *Cmd* + *D*（Mac）'
- en: '**Cut current line**: *Ctrl* + *X* (Windows) and (Mac) *Cmd* + *X*'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**剪切当前行**：*Ctrl* + *X*（Windows）和 *Cmd* + *X*（Mac）'
- en: '**Move current line up or down**: *Ctrl* + *Shift* + up/down (Windows) or *Cmd*
    + *Shift* + up/down (Mac)'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**移动当前行上下**：*Ctrl* + *Shift* + 上/下箭头（Windows）或 *Cmd* + *Shift* + 上/下箭头（Mac）'
- en: 'Refactoring shortcuts:'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重构快捷键：
- en: '**Extract method from current code block**: *Ctrl* + *Alt* + *M* (Windows)
    and *Cmd* + *Option* + *M* (Mac)'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从当前代码块提取方法**：*Ctrl* + *Alt* + *M*（Windows）和 *Cmd* + *Option* + *M*（Mac）'
- en: '**Extract variable from current code block**: *Ctrl* + *Alt* + *V* (Windows)
    and *Cmd* + *Option* + *V* (Mac)'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从当前代码块提取变量**：*Ctrl* + *Alt* + *V*（Windows）和 *Cmd* + *Option* + *V*（Mac）'
- en: '**Extract field from current code block**: *Ctrl* + *Alt* + *F* (Windows) and
    *Cmd* + *Option* + *F* (Mac)'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从当前代码块中提取字段**：*Ctrl* + *Alt* + *F*（Windows）和 *Cmd* + *Option* + *F*（Mac）'
- en: '**Rename class, method, or variable**: *Shift* + *F6* (Windows) and *Fn* +
    *Shift* +*F6* (Mac)'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重命名类、方法或变量**：*Shift* + *F6*（Windows）和 *Fn* + *Shift* + *F6*（Mac）'
- en: 'Debugging shortcuts:'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试快捷键：
- en: '**Step over to the next line of code**: *F8* (Windows and Mac)'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跳过到下一行代码**：*F8*（Windows 和 Mac）'
- en: '**Step into the current line of code**: *F7* (Windows and Mac)'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进入当前代码行**：*F7*（Windows 和 Mac）'
- en: '**Step out of the current method**: *Shift* + *F8* (Windows and Mac)'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**退出当前方法**：*Shift* + *F8*（Windows 和 Mac）'
- en: '**Toggle breakpoint on the current line of code**: *Ctrl* + *F8* (Windows)
    or *Cmd* + *F8* (Mac)'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**切换当前代码行的断点**：*Ctrl* + *F8*（Windows）或 *Cmd* + *F8*（Mac）'
- en: 'Miscellaneous shortcuts:'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 杂项快捷键：
- en: '**Run app**: *Ctrl* + *Shift* + *F10* (Windows) or *Cmd* + *Shift* + *F10*
    (Mac)'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行应用**：*Ctrl* + *Shift* + *F10*（Windows）或 *Cmd* + *Shift* + *F10*（Mac）'
- en: '**Debug app**: *Ctrl* + *Shift* + *F9* (Windows) or *Cmd* + *Shift* + *F9*
    (Mac)'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调试应用**：*Ctrl* + *Shift* + *F9*（Windows）或 *Cmd* + *Shift* + *F9*（Mac）'
- en: Important note
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Please note that some shortcuts may differ depending on your specific keyboard
    layout or operating system preferences. Also, remember that many more Android
    Studio shortcuts are available, so be sure to explore the Keymap settings to find
    additional shortcuts that can make your development workflow more efficient.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，某些快捷键可能因您的具体键盘布局或操作系统首选项而有所不同。此外，请记住，Android Studio还有更多快捷键可供使用，因此请务必探索键映射设置，以找到可以使您的开发工作流程更高效的额外快捷键。
- en: How it works…
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Shortcuts can be a powerful tool for developers looking to streamline their
    workflows, improve their productivity, and reduce the risk of errors and repetitive
    strain injuries when developing.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 快捷键可以是寻求简化工作流程、提高生产力和减少开发过程中错误和重复性劳损风险的开发者的强大工具。
- en: JetBrains Toolbox and essential plugins to know
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您需要了解的 JetBrains Toolbox 和基本插件
- en: '**JetBrains Toolbox** is a software management tool that allows developers
    to manage and install JetBrains IDEs and related tools on their computers. JetBrains
    is a software company that provides powerful IDEs (namely IntelliJ) for various
    programming languages, such as Java, Kotlin, Python, Ruby, and JavaScript. In
    other words, a plugin is simply any class that implements the plugin interface.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**JetBrains Toolbox** 是一种软件管理工具，允许开发者在计算机上管理和安装 JetBrains IDE 和相关工具。JetBrains
    是一家软件公司，为各种编程语言（如 Java、Kotlin、Python、Ruby 和 JavaScript）提供强大的 IDE（特别是 IntelliJ）。换句话说，插件只是实现了插件接口的任何类。'
- en: 'Here are some JetBrains Toolbox features and reasons why you should try using
    it:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些 JetBrains Toolbox 功能以及您应该尝试使用它的原因：
- en: You can easily download and install any JetBrains IDE from Toolbox. It also
    ensures that you have the latest version of the IDE installed on your computer.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以从 Toolbox 轻松下载和安装任何 JetBrains IDE，并确保您的计算机上安装了 IDE 的最新版本。
- en: Toolbox automatically checks for updates and keeps all the installed JetBrains
    IDEs and plugins up to date, which means if your current Android Studio is not
    stable, you can revert to a more stable version.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Toolbox 会自动检查更新，并保持所有已安装的 JetBrains IDE 和插件最新，这意味着如果您的当前 Android Studio 不稳定，您可以回滚到更稳定的版本。
- en: You can manage your JetBrains licenses and activate/deactivate them from Toolbox.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以从 Toolbox 管理您的 JetBrains 许可证并激活/停用它们。
- en: Toolbox provides a way to share projects with your team members by creating
    a shareable link.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Toolbox 提供了一种通过创建可共享链接与团队成员共享项目的方法。
- en: Toolbox integrates with JetBrains services such as JetBrains Account and JetBrains
    Space.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Toolbox 与 JetBrains 服务（如 JetBrains 账户和 JetBrains Space）集成。
- en: Getting ready
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This isn’t really a recipe but a list of useful plugins, we will look at some
    useful plugins for developers.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是真正的食谱，而是一份有用的插件列表，我们将探讨一些对开发者有用的插件。
- en: How to do it…
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Let’ go ahead and look at how we can utilize Gradle for our day to day Android
    Development.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看我们如何利用 Gradle 进行日常 Android 开发。
- en: Gradle is a build automation tool used to build and deploy Android apps. It
    can help you to manage dependencies, generate APKs, and run tests.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gradle 是一种构建自动化工具，用于构建和部署 Android 应用。它可以帮助您管理依赖项、生成 APK 文件和运行测试。
- en: The ADB plugin provides a graphical user interface for **Android Debug Bridge**
    (**ADB**), a command-line tool that can interact with an Android device or emulator.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ADB 插件为 **Android 调试桥**（**ADB**）提供了一个图形用户界面，ADB 是一种命令行工具，可以与 Android 设备或模拟器交互。
- en: Live Templates allows you to insert commonly used code snippets quickly. For
    example, you can create a live template for a toast message and then simply type
    in the shortcut and hit the Tab to insert the code. To create a live template,
    go to **Android Studio** | **Settings** | **Editor** | **Live Templates**.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Live Templates 允许您快速插入常用代码片段。例如，您可以创建一个用于吐司消息的实时模板，然后只需输入快捷键并按 Tab 键即可插入代码。要创建实时模板，请转到
    **Android Studio** | **设置** | **编辑器** | **实时模板**。
- en: '![Figure 12.7 – How to access Live Templates](img/Figure_12.7.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.7 – 如何访问 Live Templates](img/Figure_12.7.jpg)'
- en: Figure 12.7 – How to access Live Templates
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.7 – 如何访问 Live Templates
- en: Android Studio’s code completion feature can save you a lot of time. As you
    type, Android Studio will suggest possible completions for your code. Use the
    *Tab* key to accept the suggestion.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android Studio 的代码补全功能可以为您节省大量时间。当您键入时，Android Studio 将为您代码的完成建议提供可能的补全。使用 *Tab*
    键接受建议。
- en: A debugger is a powerful tool for finding and fixing bugs in your code. You
    will learn how to use the debugger to step through your code and see what’s happening
    at each step in the *Debugging your* *code* recipe.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试器是查找和修复代码中错误的有力工具。您将在 *调试您的代码* 食谱中学习如何使用调试器逐步执行代码并查看每个步骤中发生的情况。
- en: Android Studio’s layout editor lets you easily create and modify your app’s
    user interface. You can use the layout editor to drag and drop user interface
    components onto your layout and easily modify their properties.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android Studio 的布局编辑器允许您轻松创建和修改应用程序的用户界面。您可以使用布局编辑器将用户界面组件拖放到布局中，并轻松修改它们的属性。
- en: The resource manager allows you to easily manage your app’s resources, such
    as images, strings, and colors. You can use the resource manager to add and modify
    resources and easily reference them in your code.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源管理器允许您轻松管理应用程序的资源，例如图像、字符串和颜色。您可以使用资源管理器添加和修改资源，并在代码中轻松引用它们。
- en: Android Studio supports a variety of plugins that can extend its functionality.
    You can also easily search for plugins to help you with tasks such as generating
    code or managing dependencies.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android Studio 支持各种插件，可以扩展其功能。您也可以轻松搜索插件以帮助您完成诸如生成代码或管理依赖项等任务。
- en: LeakCanary is a memory leak detection library that can help you identify and
    fix your app’s memory leaks. This helps developers when finding leaks.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LeakCanary 是一个内存泄漏检测库，可以帮助您识别和修复应用程序中的内存泄漏。这有助于开发者查找泄漏。
- en: Firebase is a suite of mobile development tools that can be used to add features
    such as authentication, analytics, and cloud messaging to your app. You can take
    advantage of this when building your first project as an indie developer.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firebase 是一套移动开发工具，可用于向您的应用程序添加功能，如身份验证、分析和云消息。当您作为独立开发者构建第一个项目时，您可以利用这一点。
- en: How it works…
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: You can easily find Keymap by simply going to **AndroidStudio** | **Setting**
    | **Keymap** and using the drop-down menu to see what keymaps are available, as
    shown in *Figure 12**.8*.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过简单地转到 **AndroidStudio** | **设置** | **快捷键映射** 并使用下拉菜单查看可用的快捷键映射，如图 *图 12.8*
    所示。
- en: "![Figure \uFEFF12.8 – Keymap](img/Figure_12.8.jpg)"
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.8 – 快捷键映射](img/Figure_12.8.jpg)'
- en: Figure 12.8 – Keymap
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.8 – 快捷键映射
- en: Important note
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'Find out what Android Studio’s latest release is and what features are offered
    by following this link: [https://developer.android.com/studio/releases](https://developer.android.com/studio/releases).'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下链接了解 Android Studio 的最新版本以及提供的功能：[https://developer.android.com/studio/releases](https://developer.android.com/studio/releases)。
- en: Debugging your code
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试您的代码
- en: As an Android developer, debugging is an essential part of the software development
    process because it helps identify and fix errors in your code. When debugging,
    you can quickly identify and fix errors or bugs in your code that can cause your
    application to crash, behave unexpectedly, or produce incorrect results.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名 Android 开发者，调试是软件开发过程中的一个重要部分，因为它有助于识别和修复代码中的错误。在调试时，您可以快速识别和修复可能导致应用程序崩溃、行为异常或产生不正确结果的代码错误或缺陷。
- en: In this recipe, we will explore how you can easily add a breakpoint and debug
    your code.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将探讨如何轻松添加断点并调试您的代码。
- en: Getting ready
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To get started with this recipe, you need to have a project open and run the
    project on your emulator. You do not need to create a new project and can use
    the `GUIAlert` project.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用此食谱，您需要打开一个项目并在您的模拟器上运行该项目。您不需要创建新项目，可以使用 `GUIAlert` 项目。
- en: How to do it…
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'We will be trying to debug our code and ensure when we click the items in the
    menu, we select the correct item. For instance, if we select item 2, when we evaluate
    the item, we should see the result being `2`:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将尝试调试我们的代码，并确保当我们点击菜单中的项目时，我们选择了正确的项目。例如，如果我们选择项目 2，当我们评估该项目时，我们应该看到结果为`2`：
- en: First, you need to ensure your app is running; then, click the icon shown in
    *Figure 12**.9*.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，你需要确保你的应用正在运行；然后，点击*图 12.9*中显示的图标。
- en: '![Figure 12.9 – The debugger icon](img/Figure_12.9.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.9 – 调试器图标](img/Figure_12.9.jpg)'
- en: Figure 12.9 – The debugger icon
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.9 – 调试器图标
- en: When you click the icon shown in *Figure 12**.9*, a pop-up screen will appear,
    which means you will attach your running application to the debugger.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你点击*图 12.9*中显示的图标时，会出现一个弹出屏幕，这意味着你将把运行中的应用程序附加到调试器上。
- en: '![Figure 12.10 – The options on the package to attach the debugger](img/Figure_12.10.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.10 – 将调试器附加到包上的选项](img/Figure_12.10.jpg)'
- en: Figure 12.10 – The options on the package to attach the debugger
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.10 – 将调试器附加到包上的选项
- en: Now, go back to the code base and add breakpoints. You add breakpoints by clicking
    on the sidebar on the line number where you wish to test your logic.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，回到代码库并添加断点。你通过点击你希望测试逻辑的行号所在的侧边栏来添加断点。
- en: '![Figure 12.11 – Breakpoints](img/Figure_12.11.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.11 – 断点](img/Figure_12.11.jpg)'
- en: Figure 12.11 – Breakpoints
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.11 – 断点
- en: If your app is running when you click on the item, say option 1, the debugger
    will show an active state, which means the lines we put the breakpoints on were
    hit. Then, a pop-up window will appear with controls.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你点击项目时应用正在运行，比如选项 1，调试器将显示活动状态，这意味着我们在其上放置断点的行已被命中。然后，会出现一个带有控制按钮的弹出窗口。
- en: '![Figure 12.12 – Debug being active](img/Figure_12.12.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.12 – 调试活动状态](img/Figure_12.12.jpg)'
- en: Figure 12.12 – Debug being active
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.12 – 调试活动状态
- en: You can use the green button on the left to run and the red square button to
    stop. You can also use **Step Over**, **Step Into**, **Force Step Into**, **Step
    Out**, **Drop Frame**, **Run to Cursor**, and **Evaluate Expression…**. We will
    use **Evaluate Expression…** in our example.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用左侧的绿色按钮来运行，红色方块按钮来停止。你也可以使用**Step Over**、**Step Into**、**Force Step Into**、**Step
    Out**、**Drop Frame**、**Run to Cursor**和**Evaluate Expression…**。在我们的例子中，我们将使用**Evaluate
    Expression…**。
- en: '![Figure 12.13 – Debug button steps](img/Figure_12.13.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.13 – 调试按钮步骤](img/Figure_12.13.jpg)'
- en: Figure 12.13 – Debug button steps
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.13 – 调试按钮步骤
- en: Sometimes, you might have extra breakpoints that might slow down the process.
    In this case, you can use the option pointed out by the red arrow in *Figure 12**.14*
    to see all your breakpoints.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有时，你可能会有额外的断点，这可能会减慢进程。在这种情况下，你可以使用*图 12.14*中用红色箭头指出的选项来查看所有断点。
- en: '![Figure 12.14 – Tracking all your breakpoints](img/Figure_12.14.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.14 – 跟踪所有断点](img/Figure_12.14.jpg)'
- en: Figure 12.14 – Tracking all your breakpoints
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.14 – 跟踪所有断点
- en: Finally, when the app is still in debug mode, open the `Item`. Based on the
    current item, you should see the number displayed.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，当应用仍然处于调试模式时，打开`Item`。根据当前项，你应该看到显示的数字。
- en: "![Figure 12.15 – Item is currently selected when we evaluate the\uFEFF breakpoint](img/Figure_12.15.jpg)"
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.15 – 当我们评估断点时，当前选中的项](img/Figure_12.15.jpg)'
- en: Figure 12.15 – Item is currently selected when we evaluate the breakpoint
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.15 – 当我们评估断点时，当前选中的项
- en: How it works…
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Android Studio includes a powerful debugger for us developers to use. To debug
    an application using Android Studio, you need to first build and deploy the app
    on the device or emulator, then attach the debugger to the running process. This
    is also a skill that needs to be learned and practiced becoming good at it. Hence,
    knowing how you can debug your application, either using logs or breakpoints,
    comes in handy.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio 为我们开发者提供了一个强大的调试器。要使用 Android Studio 调试应用程序，你首先需要在设备或模拟器上构建和部署应用程序，然后将调试器附加到运行进程。这也是一项需要学习和练习的技能。因此，了解你如何使用日志或断点来调试应用程序，这会很有帮助。
- en: Important note
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'There is more to learn about debugging, and more than one recipe is needed
    to cover this topic. Follow this link to learn more: [https://developer.android.com/studio/debug](https://developer.android.com/studio/debug).'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 关于调试，还有更多内容需要学习，需要多个菜谱来涵盖这个主题。点击此链接了解更多信息：[https://developer.android.com/studio/debug](https://developer.android.com/studio/debug)。
- en: How to extract methods and method parameters
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何提取方法和方法参数
- en: Extracting methods and method parameters can add additional imports to your
    code. This happens because when you extract a method or a parameter, the code
    that used to be inside the method or parameter is moved to a separate method.
    If this code relies on other classes or methods that are not already imported
    into your code, the extraction process may automatically add the necessary import
    statements to your file.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 提取方法和方法参数可能会向您的代码中添加额外的导入。这是因为当您提取方法或参数时，之前在方法或参数内部的方法被移动到单独的方法中。如果这段代码依赖于尚未导入到您的代码中的其他类或方法，提取过程可能会自动添加必要的导入语句到您的文件中。
- en: For example, suppose you have a Kotlin class that contains a method that performs
    some calculations and returns a result. This method relies on a helper class defined
    in another package, and you still need to import this class into your code. If
    you decide to extract the method to a particular method in the same or a different
    class, the extraction process may add an `import` statement for the helper class
    so that the code inside the extracted method can reference the helper class.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设您有一个包含执行某些计算并返回结果的Kotlin类的方法。此方法依赖于在另一个包中定义的辅助类，并且您仍然需要将此类导入到您的代码中。如果您决定将方法提取到同一或不同类中的特定方法，提取过程可能会添加一个`import`语句用于辅助类，以便提取方法内部的代码可以引用辅助类。
- en: Similarly, when you extract a method parameter, the extraction process may need
    to include adding import statements to ensure that any classes or interfaces that
    are used in the parameter type are correctly resolved.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，当您提取方法参数时，提取过程可能需要包括添加导入语句，以确保在参数类型中使用的任何类或接口都能正确解析。
- en: Getting ready
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You do not need to create any project to follow this recipe.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 您不需要创建任何项目来遵循这个食谱。
- en: How to do it…
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To extract methods and method parameters in Android, you can follow these steps:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Android中提取方法和方法参数，您可以按照以下步骤操作：
- en: Open the Kotlin file where you want to extract the methods and parameters.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您想要提取方法和参数的Kotlin文件。
- en: Identify the class containing the methods and parameters you want to extract.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 识别包含您想要提取的方法和参数的类。
- en: Place your cursor inside the class declaration, and right-click to open the
    context menu.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的光标放在类声明内部，然后右键单击以打开上下文菜单。
- en: Select the **Refactor** option from the context menu, and then select **Extract**
    from the submenu.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从上下文菜单中选择**重构**选项，然后从子菜单中选择**提取**。
- en: In the **Extract** submenu, you will see options to extract a method or parameter.
    Select the option that matches the element you want to extract.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**提取**子菜单中，您将看到提取方法或参数的选项。选择与您想要提取的元素相匹配的选项。
- en: Follow the prompts in the **Extract** wizard to configure the extraction process.
    You may need to provide a name for the extracted element, specify the element’s
    scope, or configure other settings depending on the element you are extracting.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照上下文中的**提取**向导中的提示来配置提取过程。您可能需要为提取的元素提供名称，指定元素的范围，或者根据您正在提取的元素配置其他设置。
- en: Once configured in the extraction process, click **Finish** to extract the element
    from your code.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦在提取过程中配置完毕，点击**完成**以从您的代码中提取元素。
- en: How it works…
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Adding imports during method or parameter extraction is a normal part of the
    refactoring process and helps ensure that your code remains well organized and
    easy to maintain.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在方法或参数提取期间添加导入是重构过程的正常部分，有助于确保您的代码保持良好的组织并易于维护。
- en: Understanding Git essentials
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Git基础知识
- en: This recipe is meant to help any new developers that might have stumbled upon
    this book. **Git** is a popular version control system that allows developers
    to manage and track changes to their code base.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱旨在帮助任何可能偶然发现这本书的新开发者。**Git**是一个流行的版本控制系统，允许开发者管理和跟踪代码库的变化。
- en: 'Here are some essential concepts to understand:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些基本概念需要理解：
- en: A **repository** is a collection of files and folders that Git is tracking.
    It’s also known as a **repo**. This is the most common term.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仓库**是一组文件和文件夹的集合，Git正在跟踪这些文件和文件夹。它也被称为**repo**。这是最常见的术语。'
- en: A **commit** is a snapshot of the changes made to a repository. Each commit
    has a unique identifier containing information about the changes made, such as
    the author, the date, and a message describing the changes.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提交**是对仓库中更改的快照。每个提交都有一个唯一的标识符，包含有关更改的信息，例如作者、日期以及描述更改的消息。'
- en: A **branch** is a separate line of development that allows developers to work
    on different features or versions of a project simultaneously. It’s like a parallel
    universe of the repository.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分支**是一个独立的开发线，允许开发者同时工作在不同的功能或项目的版本上。它就像是一个仓库的平行宇宙。'
- en: When developing, **merging** your work refers to combining changes from one
    branch into another. It’s typically used when a feature is complete and ready
    to be integrated into the main branch.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开发过程中，**合并**你的工作指的是将一个分支的变化合并到另一个分支中。通常在功能完成并准备好集成到主分支时使用。
- en: A **pull request** is a GitHub feature that allows developers to propose changes
    to a repository and request that they be merged into the main branch. It includes
    a description of the changes and any supporting documentation or tests.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拉取请求**是GitHub的一个功能，允许开发者提出对仓库的更改，并请求将这些更改合并到主分支。它包括更改的描述以及任何支持性文档或测试。'
- en: '**Cloning** is creating a copy of a repository on your local machine.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**克隆**是在你的本地机器上创建仓库的副本。'
- en: '**Pushing** is the process of sending changes from your local machine to a
    remote repository, such as GitHub or GitLab.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**推送**是将变化从你的本地机器发送到远程仓库的过程，例如GitHub或GitLab。'
- en: '**Pulling** is the process of downloading changes from a remote repository
    to your local machine.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拉取**是从远程仓库下载变化到本地机器的过程。'
- en: By understanding these essential concepts, you can effectively use Git to manage
    your code base and collaborate with other developers.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 通过理解这些基本概念，你可以有效地使用Git来管理你的代码库并与其他开发者协作。
- en: Getting ready
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will not follow a recipe here but look at what Git commands you can utilize
    to make collaboration easier.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里不会遵循食谱，而是看看你可以利用哪些Git命令来使协作更简单。
- en: How to do it…
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Here are some of the most commonly used Git commands:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一些最常用的Git命令：
- en: 'To initialize a new Git repository in the current directory. You can simply
    do the following:'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在当前目录中初始化一个新的Git仓库，你可以简单地做以下操作：
- en: '[PRE0]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When you want to add changes to the staging area, you can simply use `git add`:'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你想将更改添加到暂存区时，你可以简单地使用`git add`：
- en: '[PRE1]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When committing changes to the repository, simply use the following:'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在向仓库提交更改时，只需使用以下命令：
- en: '[PRE2]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Most important, when you start collaborating, is being able to clone the project;
    you can simply run the following:'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最重要的是，当你开始协作时，能够克隆项目；你可以简单地运行以下命令：
- en: '[PRE3]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When you want to pull changes from a remote repository to the local repository,
    simply use the following:'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你想从远程仓库拉取变化到本地仓库时，只需使用以下命令：
- en: '[PRE4]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can also push changes from the local repository to a remote repository
    by using the following:'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你也可以使用以下命令将本地仓库的变化推送到远程仓库：
- en: '[PRE5]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'List all the local branches by using `git branch`:'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`git branch`列出所有本地分支：
- en: '[PRE6]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following command switches to a different branch:'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下命令切换到不同的分支：
- en: '[PRE7]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Check out a new branch with the following:'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令检出新的分支：
- en: '[PRE8]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Merge changes from one branch into another with the following. Note you can
    also use `rebase`; this is based on the organization''s preference:'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令将一个分支的变化合并到另一个分支中。注意，你也可以使用`rebase`；这取决于组织的偏好：
- en: '[PRE9]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: These are just a few of the most commonly used Git commands. Many more Git commands
    and options are available, so it’s worth exploring the Git documentation to learn
    more.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是最常用的Git命令中的一部分。还有很多其他的Git命令和选项可供选择，因此探索Git文档以了解更多信息是值得的。
- en: How it works…
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Git is a distributed version control system allowing users to track code changes
    over time. Here’s a high-level overview of how Git works.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: Git是一个分布式版本控制系统，允许用户跟踪代码随时间的变化。以下是Git工作的高级概述。
- en: Git doesn’t just store the changes you make to your code; it actually stores
    snapshots of your entire project at different times. Each snapshot represents
    the state of the project at a specific moment. It stores your code in a tree-like
    structure, with each project snapshot represented by a commit object.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Git不仅仅存储你对代码所做的更改；它实际上存储了你在不同时间点的整个项目的快照。每个快照代表项目在特定时刻的状态。它以树状结构存储你的代码，每个项目快照由一个提交对象表示。
- en: Each commit object points to the snapshot of the project that it represents
    and the commit objects that came before it. It also uses a unique pointer called
    `HEAD` to keep track of the current branch and the most recent commit on that
    branch.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 每个提交对象都指向它所代表的项目的快照以及它之前的提交对象。它还使用一个唯一的指针`HEAD`来跟踪当前分支和该分支上最近的提交。
- en: When you make a new commit, Git updates the HEAD pointer to point to the new
    commit. In addition, each commit in Git is identified by a unique hash value,
    which is a 40-character string of letters and numbers. This hash value is generated
    based on the contents of the commit and the hash values of any previous commits
    that it points to.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 当你提交一个新的更改时，Git 会更新 HEAD 指针以指向新的提交。此外，Git 中的每个提交都有一个唯一的哈希值，这是一个由字母和数字组成的 40
    个字符的字符串。这个哈希值是根据提交的内容以及它所指向的任何先前提交的哈希值生成的。
- en: Because Git stores snapshots of your project locally on your computer, you can
    work offline and still make commits to your project. When you’re ready to share
    your changes, you can push them to a remote repository.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Git 将你的项目快照存储在本地计算机上，你可以离线工作，同时仍然可以向项目提交更改。当你准备好分享你的更改时，你可以将它们推送到远程仓库。
- en: These are just a few of the key concepts behind how Git works. Git is a powerful
    and flexible tool with many advanced features, so it’s worth learning more about
    how it works.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是 Git 工作背后的几个关键概念。Git 是一个功能强大且灵活的工具，具有许多高级功能，因此值得了解更多关于它是如何工作的信息。
