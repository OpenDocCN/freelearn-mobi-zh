- en: '16'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '16'
- en: Animations and Transitions with CoordinatorLayout and MotionLayout
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CoordinatorLayout和MotionLayout的动画和过渡
- en: This chapter will introduce you to animations and how to handle changing between
    layouts. It offers a description of moving objects using `MotionLayout` and the
    Motion Editor in Android, along with a detailed explanation of constraint sets.
    The chapter also covers modifying paths and adding keyframes to a frame’s motion.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将向你介绍动画以及如何处理布局之间的切换。它描述了在Android中使用`MotionLayout`和Motion Editor移动对象，以及约束集的详细解释。本章还涵盖了修改路径和向帧的运动添加关键帧。
- en: By the end of this chapter, you will be able to create animations using `CoordinatorLayout`
    and `MotionLayout` and use the Motion Editor in Android Studio to create `MotionLayout`
    animations.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够使用`CoordinatorLayout`和`MotionLayout`创建动画，并使用Android Studio中的Motion
    Editor创建`MotionLayout`动画。
- en: In the previous chapter, you learned about architecture patterns such as MVVM.
    You now know how to improve the architecture of an app. Next, we will learn how
    to use animations to enhance our app’s look and feel and make it different and
    better than other apps.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了关于架构模式，如MVVM。你现在知道如何改进应用的架构。接下来，我们将学习如何使用动画来增强我们应用的外观和感觉，使其与其他应用不同且更好。
- en: Sometimes, the apps we develop can look a little plain, so we can include some
    moving parts and delightful animations in our apps to make them livelier and the
    UI and user experience better. For example, we can add visual cues so that a user
    will not be confused about what to do next and can be guided through what steps
    they can take.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，我们开发的某些应用可能看起来有点单调，因此我们可以在应用中加入一些动态部分和令人愉悦的动画，使它们更加生动，并改善UI和用户体验。例如，我们可以添加视觉提示，以便用户不会对下一步该做什么感到困惑，并引导他们了解可以采取的步骤。
- en: Animations while loading can entertain a user while content is being fetched
    or processed. Pretty animations when the app encounters an error can help prevent
    users from getting angry about what has happened and can inform them of what options
    they have.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 加载时的动画可以在内容被检索或处理时娱乐用户。当应用遇到错误时，漂亮的动画可以帮助防止用户对发生的事情感到愤怒，并告知他们有哪些选项。
- en: In this chapter, we’ll start by looking at some of the traditional ways of doing
    animations with Android. We’ll end the chapter by looking at the newer `MotionLayout`
    option. Let’s get started with activity transitions, which are one of the easiest
    and most used animations.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将首先探讨一些使用Android进行动画的传统方法。我们将以探讨较新的`MotionLayout`选项结束本章。让我们从活动过渡开始，这是最容易且最常用的动画之一。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: Activity transitions
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活动过渡
- en: Animations with `CoordinatorLayout`
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`CoordinatorLayout`的动画
- en: Animations with `MotionLayout`
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`MotionLayout`的动画
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The complete code for all the exercises and the activity in this chapter is
    available on GitHub at [https://packt.link/G8RoL](https://packt.link/G8RoL)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章所有练习和活动的完整代码可在GitHub上找到，链接为[https://packt.link/G8RoL](https://packt.link/G8RoL)
- en: Activity transitions
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 活动过渡
- en: When opening and closing an activity, Android will play a default transition.
    We can customize the activity transition to reflect the brand and/or differentiate
    our app. Activity transitions are available, starting with Android 5.0 Lollipop
    (API level 21).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当打开和关闭活动时，Android会播放默认过渡动画。我们可以自定义活动过渡以反映品牌和/或区分我们的应用。活动过渡从Android 5.0 Lollipop（API级别21）开始提供。
- en: 'Activity transitions have two parts – the enter transition and the exit transition.
    The enter transition defines how the activity and its views will be animated when
    the activity is opened. The exit transition, meanwhile, describes how the activity
    and views are animated when the activity is closed, or a new activity is opened.
    Android supports the following built-in transitions:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 活动过渡有两个部分——进入过渡和退出过渡。进入过渡定义了活动及其视图在活动打开时如何动画化。同时，退出过渡描述了活动及其视图在活动关闭或打开新活动时如何动画化。Android支持以下内置过渡：
- en: '**Explode**: This moves views in or out from the center'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Explode**：这会将视图从中心移动到内部或外部'
- en: '**Fade**: This view slowly appears or disappears'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Fade**：此视图会缓慢出现或消失'
- en: '**Slide**: This moves views in or out from the edges'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Slide**：这会将视图从边缘移动到内部或外部'
- en: Now, let’s see how we can add activity transitions in the following section.
    There are two ways to add activity transitions – through XML and through code.
    First, we will learn how to add transitions via XML, and then via code.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看我们如何在下一节中添加活动过渡。有两种方法可以添加活动过渡 – 通过 XML 和通过代码。首先，我们将学习如何通过 XML 添加过渡，然后通过代码。
- en: Adding activity transitions through XML
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过 XML 添加活动过渡
- en: 'You can add activity transitions through XML. The first step is to enable window
    content transitions. This is done by adding the following in the activity’s theme
    in `themes.xml`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过 XML 添加活动过渡。第一步是启用窗口内容过渡。这是通过在 `themes.xml` 中的活动主题中添加以下内容来完成的：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After that, you can then add the enter and exit transitions with the `android:windowEnterTransition`
    and `android:windowExitTransition` style attributes. For example, if you want
    to use the default transitions from `@android:transition/`, the attributes you
    will need to add are as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，您可以使用 `android:windowEnterTransition` 和 `android:windowExitTransition` 风格属性添加进入和退出过渡。例如，如果您想使用
    `@android:transition/` 的默认过渡，您需要添加以下属性：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Your `themes.xml` file would then look as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您的 `themes.xml` 文件将如下所示：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Activity transitions are enabled with `<``item name="android:windowActivityTransitions"`
    **>true</item>**. The `<item name="android:windowEnterTransition">@android:transition/slide_left</item>`
    attribute sets the enter transition, while `@android:transition/explode` is the
    exit transition file, as set by the `<item` `name="android:windowExitTransition">@android:transition/explode</item>`
    attribute.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `<item name="android:windowActivityTransitions">**true</item>**` 启用活动过渡。`<item
    name="android:windowEnterTransition">@android:transition/slide_left</item>` 属性设置进入过渡，而
    `@android:transition/explode` 是退出过渡文件，由 `<item name="android:windowExitTransition">@android:transition/explode</item>`
    属性设置。
- en: In the next section, you will learn how to add activity transitions through
    coding.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将学习如何通过编码添加活动过渡。
- en: Adding activity transitions through code
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过代码添加活动过渡
- en: 'Activity transitions can also be added programmatically. The first step is
    to enable window content transitions. You can do that by calling the following
    function in your activity before the call to `setContentView()`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 活动过渡也可以通过编程添加。第一步是启用窗口内容过渡。您可以通过在活动调用 `setContentView()` 之前调用以下函数来实现：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can add the enter and exit transactions afterward with `window.enterTransition`
    and `window.exitTransition` respectively. We can use the built-in `Explode()`,
    `Slide()`, and `Fade()` transitions from the `android.transition` package. For
    example, if we want to use `Explode()` as an enter transition and `Slide()` as
    an exit transition, we can add the following code:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在之后使用 `window.enterTransition` 和 `window.exitTransition` 分别添加进入和退出过渡。我们可以使用
    `android.transition` 包中的内置 `Explode()`、`Slide()` 和 `Fade()` 过渡。例如，如果我们想使用 `Explode()`
    作为进入过渡，`Slide()` 作为退出过渡，我们可以添加以下代码：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Remember to wrap these calls with a check for `Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP`
    if your app’s minimum supported SDK is lower than 21.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用最低支持的 SDK 版本低于 21，请记住在调用 `setContentView()` 之前对这些调用进行 `Build.VERSION.SDK_INT
    >= Build.VERSION_CODES.LOLLIPOP` 的检查。
- en: Now that you know how to add entry and exit activity transitions through code
    or XML, you need to learn how to activate the transition when opening the activity.
    We will do that in the next section.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经知道如何通过代码或 XML 添加进入和退出活动过渡，您需要学习如何在打开活动时激活过渡。我们将在下一节中这样做。
- en: Starting an activity with an activity transition
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用活动过渡开始活动
- en: 'Once you have added activity transitions to an activity (either through XML
    or by coding), you can activate the transition when opening the activity. Instead
    of the `startActivity(intent)` call, you should pass in a bundle with the transition
    animation. To do that, start your activity with the following code:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您已将活动过渡添加到活动（无论是通过 XML 还是编码），您可以在打开活动时激活过渡。而不是使用 `startActivity(intent)` 调用，您应该传递一个包含过渡动画的
    bundle。为此，使用以下代码启动您的活动：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `ActivityOptions.makeSceneTransitionAnimation(this).toBundle()` argument
    will create a bundle with the enter and exit transition we specified for the activity
    (via XML or with code).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`ActivityOptions.makeSceneTransitionAnimation(this).toBundle()` 参数将创建一个包含我们为活动指定的进入和退出过渡（通过
    XML 或代码）的 bundle。'
- en: Let’s try out what we have learned so far by adding activity transitions to
    an app.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过向应用添加活动过渡来尝试一下我们到目前为止所学的内容。
- en: Exercise 16.01 – creating activity transitions in an app
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 16.01 – 在应用中创建活动过渡
- en: In many establishments, it is common to leave a tip (often called a **gratuity**).
    This is a sum of money given to show appreciation for a service – for example,
    to the waiting staff in a restaurant. The tip is provided in addition to the basic
    charge denoted on the final bill.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多机构中，留下小费（通常称为**赏金**）是很常见的。这是一笔表示对服务感激之情的钱款 – 例如，给餐厅的侍应生。小费是在最终账单上标明的基本费用之外提供的。
- en: Throughout this chapter, we will be working with an application that calculates
    the amount that should be given as a tip. This value will be based on the amount
    of the bill (the basic charge) and the extra percentage that the user wants to
    give. The user will input both values, and the app will calculate the tip value.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用一个计算应支付小费金额的应用程序。这个值将基于账单金额（基本费用）和用户想要给出的额外百分比。用户将输入这两个值，应用程序将计算小费金额。
- en: 'In this exercise, we will be customizing the activity transition between the
    input and the output screen:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将自定义输入屏幕和输出屏幕之间的活动过渡：
- en: In Android Studio, open the Tip Calculator project in the `Chapter16` directory
    from the book code repository.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Android Studio 中，从书籍代码仓库的 `Chapter16` 目录中打开 Tip Calculator 项目。
- en: Run the application. Tap on the `OutputActivity` and going back. There is a
    default animation while `MainActivity` is being closed and `OutputActivity` is
    being opened and closed.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用。点击 `OutputActivity` 并返回。当 `MainActivity` 关闭和 `OutputActivity` 打开及关闭时，会有一个默认的动画。
- en: 'Now, let’s start adding transition animations. Open `themes.xml` and update
    the activity theme with the `windowActivityTransitions`, `windowEnterTransition`,
    and `windowExitTransition` style attributes:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们开始添加过渡动画。打开 `themes.xml` 文件，并更新活动主题，使用 `windowActivityTransitions`、`windowEnterTransition`
    和 `windowExitTransition` 风格属性：
- en: '[PRE6]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will enable the activity transition, add an explode enter transition, and
    add a slide left exit transition to the activity.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启用活动过渡，添加一个爆炸进入过渡，并添加一个向左滑动退出过渡到活动。
- en: 'Go back to the `MainActivity` file and replace `startActivity(intent)` with
    the following:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到 `MainActivity` 文件，将 `startActivity(intent)` 替换为以下内容：
- en: '[PRE7]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This will open `OutputActivity` with the transition animation we specified in
    the XML file (which we set in the previous step).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使用我们在 XML 文件中指定的过渡动画打开 `OutputActivity`（我们在上一步中设置了该动画）。
- en: 'Run the application. You will see that the animation when opening and closing
    `MainActivity` and `OutputActivity` has changed. When the Android UI opens `OutputActivity`,
    note that the text is moving toward the center. While closing, the views slide
    to the left:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用。你会看到打开和关闭 `MainActivity` 和 `OutputActivity` 时的动画已经改变。当 Android UI 打开 `OutputActivity`
    时，注意文本是向中心移动的。在关闭时，视图向左滑动：
- en: '![Figure 16.1 – The app screens – the input screen (on the left) and the output
    screen (on the right)](img/B19411_16_01.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.1 – 应用屏幕 – 输入屏幕（在左侧）和输出屏幕（在右侧）](img/B19411_16_01.jpg)'
- en: Figure 16.1 – The app screens – the input screen (on the left) and the output
    screen (on the right)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.1 – 应用屏幕 – 输入屏幕（在左侧）和输出屏幕（在右侧）
- en: We have added an activity transition to an app. When we open a new activity,
    the new activity’s enter transition will be played. Its exit transition will play
    when the activity is closed.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为一个应用添加了活动过渡。当我们打开一个新的活动时，新活动的进入过渡将被播放。当活动关闭时，其退出过渡将被播放。
- en: Sometimes, when we open another activity from one activity, there is a common
    element that is present in both activities. In the next section, we will learn
    about adding this shared element transition.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，当我们从一个活动打开另一个活动时，两个活动中都存在一个共同元素。在下一节中，我们将学习如何添加这个共享元素过渡。
- en: Adding a shared element transition
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加共享元素过渡
- en: There are times when an application moves from one activity to another and there
    is a common element that is present in both activities. We can add an animation
    to this shared element to highlight to users the link between the two activities.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，一个应用从一个活动切换到另一个活动，并且这两个活动中都存在一个共同元素。我们可以为这个共享元素添加一个动画，以使用户注意到这两个活动之间的联系。
- en: In a movie application, for example, an activity with a list of movies (with
    a thumbnail image) can open a new activity with details of the selected movie,
    along with a full-sized image at the top. Adding a shared element transition for
    the image will link the thumbnail on the list activity to the image on the details
    activity.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在一个电影应用程序中，一个包含电影列表（带有缩略图图像）的活动可以打开一个新的活动，显示所选电影的详细信息，以及顶部的一个全尺寸图像。为图像添加共享元素过渡将把列表活动中的缩略图与详情活动中的图像联系起来。
- en: The shared element transition has two parts – the enter transition and the exit
    transition. These transitions can be done through XML or code.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 共享元素过渡有两个部分——进入过渡和退出过渡。这些过渡可以通过XML或代码实现。
- en: 'The first step is to enable a window content transition. You can do this by
    adding the activity’s theme to `themes.xml` with the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是启用窗口内容过渡。你可以通过将活动的主题添加到`themes.xml`中来实现，如下所示：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can also do this programmatically by calling the following function in
    your activity before the call to `setContentView()`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过在调用`setContentView()`之前调用以下函数来编程实现：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `android:windowContentTransitions` attribute with a `true` value and `window.requestFeature(Window.FEATURE_CONTENT_TRANSITIONS)`
    will enable the window content transition.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 将`android:windowContentTransitions`属性设置为`true`和`window.requestFeature(Window.FEATURE_CONTENT_TRANSITIONS)`将启用窗口内容过渡。
- en: 'Afterward, you can add the shared element enter transition and the shared element
    exit transition. If you have `enter_transition.xml` and `exit_transition.xml`
    in your `res/transitions` directory, you can add the shared element enter transition
    by adding the following style attribute:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，你可以添加共享元素进入过渡和共享元素退出过渡。如果你在`res/transitions`目录中有`enter_transition.xml`和`exit_transition.xml`，你可以通过添加以下样式属性来添加共享元素进入过渡：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can also do this through code with the following lines:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过以下代码行来实现：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `windowSharedElementEnterTransition` attribute and `window.shared` **ElementEnterTransition**
    will set our enter transition to the `enter_transition.xml` file.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`windowSharedElementEnterTransition`属性和`window.shared ElementEnterTransition`将我们的进入过渡设置为`enter_transition.xml`文件。'
- en: 'To add the shared element exit transition, you can add the following style
    attributes:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加共享元素退出过渡，你可以添加以下样式属性：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This can be done programmatically with the following lines of code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过以下代码行编程实现：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `windowSharedElementExitTransition` attribute and `window.sharedElement`
    **ExitTransition** will set our exit transition to the `exit_transition.xml` file.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`windowSharedElementExitTransition`属性和`window.shared ElementExitTransition`将我们的退出过渡设置为`exit_transition.xml`文件。'
- en: You have learned how to add shared element transitions. In the next section,
    we’ll learn how to start an activity with the shared element transition.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经学会了如何添加共享元素过渡。在下一节中，我们将学习如何使用共享元素过渡启动活动。
- en: Starting an activity with the shared element transition
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用共享元素过渡启动活动
- en: Once you have added the shared element transition to an activity (either through
    XML or programmatically), you can activate the transition when opening the activity.
    Before you do that, add a `transitionName` attribute. Set its value as the same
    text for the shared element in both activities.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你将共享元素过渡添加到活动（无论是通过XML还是通过编程方式），你就可以在打开活动时激活过渡。在你这样做之前，添加一个`transitionName`属性。将其值设置为两个活动中的共享元素相同的文本。
- en: 'For example, in `ImageView`, we can add a `transition_name` value for the `transitionName`
    attribute:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在`ImageView`中，我们可以为`transitionName`属性添加一个`transition_name`值：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To start the activity with shared elements, we will be passing in a bundle
    with the transition animation. To do that, start your activity with the following
    code:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用共享元素启动活动，我们将传递一个包含过渡动画的包。为此，使用以下代码启动你的活动：
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `ActivityOptions.makeSceneTransitionAnimation(this, sharedImage, "transition_name").toBundle()`
    argument will create a bundle with the shared element (`sharedImage`) and the
    transition name (`transition_name`).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`ActivityOptions.makeSceneTransitionAnimation(this, sharedImage, "transition_name").toBundle()`参数将创建一个包含共享元素（`sharedImage`）和过渡名称（`transition_name`）的包。'
- en: 'If you have more than one shared element, you can pass the variable arguments
    of `Pair<View, String>` of `View`, and the transition name `String` instead. For
    example, if we have the view’s button and image as shared elements, we can do
    the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个以上的共享元素，你可以传递`Pair<View, String>`的变量参数，其中包含`View`和过渡名称`String`。例如，如果我们有按钮和图像作为共享元素，我们可以这样做：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This will start the activity with two shared elements (the button and image).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动带有两个共享元素（按钮和图片）的活动。
- en: Note
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Remember to import `android.util.Pair` instead of `kotlin.Pair`, as `makeSceneTransitionAnimation`
    is expecting the pair from the Android SDK.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 记得导入`android.util.Pair`而不是`kotlin.Pair`，因为`makeSceneTransitionAnimation`期望来自Android
    SDK的pair。
- en: Let’s try out what we have learned so far by adding shared element transitions
    to the *Tip* *Calculator* app.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过向*小费* *计算器*应用程序添加共享元素过渡来尝试我们到目前为止所学的内容。
- en: Exercise 16.02 – creating the shared element transition
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习16.02 – 创建共享元素过渡
- en: 'In the first exercise, we customized the activity transitions for `MainActivity`
    and `OutputActivity`. In this exercise, we will be adding an image to both activities.
    This shared element will be animated when moving from the input screen to the
    output screen. We’ll be using the app launcher icon (`res/mipmap/ic_launcher`)
    for `ImageView`. You can change yours instead of using the default one:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个练习中，我们为`MainActivity`和`OutputActivity`自定义了活动过渡。在这个练习中，我们将向两个活动添加图片。当从输入屏幕移动到输出屏幕时，这个共享元素将被动画化。我们将使用应用程序启动器图标（`res/mipmap/ic_launcher`）作为`ImageView`。你可以更改它而不是使用默认图标：
- en: Open the `Tip Calculator` project we developed in the previous exercise.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们在上一个练习中开发的`Tip Calculator`项目。
- en: 'Go to the `activity_main.xml` file and add `ImageView` at the top of the amount
    text field:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入`activity_main.xml`文件，在金额文本字段顶部添加`ImageView`：
- en: '[PRE17]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The complete code for this step can be found at [https://packt.link/NvDO2](https://packt.link/NvDO2).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 本步骤的完整代码可以在[https://packt.link/NvDO2](https://packt.link/NvDO2)找到。
- en: The `transitionName` value of `transition_name` will be used to identify this
    as a shared element.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`transitionName`值为`transition_name`将用于识别这是一个共享元素。'
- en: 'Change the top constraint of the `TextInputLayout` with ID `amount_text_layout`
    by changing `app:layout_constraintTop_toTopOf="parent"` to the following:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将`app:layout_constraintTop_toTopOf="parent"`更改为以下内容来更改ID为`amount_text_layout`的`TextInputLayout`的顶部约束：
- en: '[PRE18]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This will move the `amount_text_layout` below the image.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把`amount_text_layout`移动到图片下方。
- en: 'Now, open the `activity_output.xml` file and add an image above the tip `TextView`,
    with a height and width of 200 dp and a `scaleType` of `fitXY` to fit the image
    to the dimensions of `ImageView`:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`activity_output.xml`文件，在提示`TextView`上方添加一个图片，高度和宽度为200 dp，`scaleType`设置为`fitXY`以适应`ImageView`的尺寸：
- en: '[PRE19]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The complete code for this step can be found at [https://packt.link/jpgVe](https://packt.link/jpgVe).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 本步骤的完整代码可以在[https://packt.link/jpgVe](https://packt.link/jpgVe)找到。
- en: The `transitionName` value of `transition_name` is the same as the value for
    `ImageView` from `MainActivity`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`transitionName`值为`transition_name`与`MainActivity`中`ImageView`的值相同。'
- en: 'Open `MainActivity` and change the `startActivity` code to the following:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainActivity`并将`startActivity`代码更改为以下内容：
- en: '[PRE20]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This will start a transition from `ImageView` in `MainActivity`, with the ID
    image transitioning to another `ImageView` in `OutputActivity`, whose `transitionName`
    value is also `transition_name`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动从`MainActivity`中的`ImageView`开始的过渡，ID为image过渡到`OutputActivity`中的另一个`ImageView`，其`transitionName`值也是`transition_name`。
- en: 'Run the application. Provide an amount and percentage, and then tap on the
    `OutputActivity`:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序。提供金额和百分比，然后点击`OutputActivity`：
- en: '![Figure 16.2 – The app screens – the input screen (on the left) and the output
    screen (on the right)](img/B19411_16_02.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图16.2 – 应用程序屏幕 – 输入屏幕（在左侧）和输出屏幕（在右侧）](img/B19411_16_02.jpg)'
- en: Figure 16.2 – The app screens – the input screen (on the left) and the output
    screen (on the right)
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.2 – 应用程序屏幕 – 输入屏幕（在左侧）和输出屏幕（在右侧）
- en: We have learned about adding activity transitions and shared element transitions.
    Now, let’s look into animating views inside a layout. If we have more than one
    element inside, it might be difficult to animate each element. `CoordinatorLayout`
    can be used to simplify this animation. We will discuss this in the next section.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了如何添加活动过渡和共享元素过渡。现在，让我们看看如何在布局内部动画化视图。如果我们内部有多个元素，可能很难对每个元素进行动画化。可以使用`CoordinatorLayout`来简化这个动画。我们将在下一节讨论这个问题。
- en: Animations with CoordinatorLayout
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CoordinatorLayout的动画
- en: '`CoordinatorLayout` is a layout that handles the motions between its child
    views. When you use `CoordinatorLayout` as the parent view group, you can animate
    the views inside it with little effort. You can add `CoordinatorLayout` to your
    project by adding your `app/build.gradle` file dependencies with the following:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`CoordinatorLayout` 是一个处理其子视图之间运动的布局。当你将 `CoordinatorLayout` 作为父视图组使用时，你可以轻松地对其内部的视图进行动画处理。你可以通过在
    `app/build.gradle` 文件中添加以下依赖项将 `CoordinatorLayout` 添加到你的项目中：'
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This will allow us to use `CoordinatorLayout` in our layout files.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许我们在布局文件中使用 `CoordinatorLayout`。
- en: Let’s say we have a layout file with a floating action button inside `CoordinatorLayout`.
    When tapping on the floating action button, the UI displays a `Snackbar` message.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个包含在 `CoordinatorLayout` 中的浮动操作按钮的布局文件。当点击浮动操作按钮时，UI 显示一个 `Snackbar` 消息。
- en: Note
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`Snackbar` is an Android widget that provides a brief message to a user at
    the bottom of the screen.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`Snackbar` 是一个 Android 小部件，它会在屏幕底部向用户提供一个简短的消息。'
- en: 'If you use any layout other than `CoordinatorLayout`, `Snackbar` with its message
    will be rendered on top of the floating action button. If we use `CoordinatorLayout`
    as the parent view group, the layout will push the floating action button upwards,
    display `Snackbar` below it, and move it back when `Snackbar` disappears. *Figure
    16**.3* shows how the layout adjusts to prevent `Snackbar` from being on top of
    the floating action button:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用除 `CoordinatorLayout` 之外的任何布局，带有消息的 `Snackbar` 将会渲染在浮动操作按钮的上方。如果我们使用 `CoordinatorLayout`
    作为父视图组，布局将推动浮动操作按钮向上，在它下方显示 `Snackbar`，并在 `Snackbar` 消失时将其移回。*图 16**.3* 展示了布局如何调整以防止
    `Snackbar` 覆盖浮动操作按钮：
- en: '![Figure 16.3 – The left screenshot displays the UI before and after the Snackbar
    message is shown. The screenshot on the right shows the UI while the Snackbar
    is visible](img/B19411_16_03.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.3 – 左侧截图显示了在显示 Snackbar 消息之前和之后的 UI。右侧的截图显示了当 Snackbar 可见时的 UI](img/B19411_16_03.jpg)'
- en: Figure 16.3 – The left screenshot displays the UI before and after the Snackbar
    message is shown. The screenshot on the right shows the UI while the Snackbar
    is visible
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.3 – 左侧截图显示了在显示 Snackbar 消息之前和之后的 UI。右侧的截图显示了当 Snackbar 可见时的 UI
- en: The floating action button moves and gives space to the `Snackbar` message because
    it has a default behavior called `FloatingActionButton.Behavior`, a subclass of
    `CoordinatorLayout.Behavior`. The `FloatingActionButton.Behavior` subclass moves
    the floating action button while `Snackbar` is being displayed so that `Snackbar`
    won’t cover the floating action button.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 浮动操作按钮移动并给 `Snackbar` 消息留出空间，因为它有一个默认的行为，称为 `FloatingActionButton.Behavior`，它是
    `CoordinatorLayout.Behavior` 的子类。`FloatingActionButton.Behavior` 子类在显示 `Snackbar`
    时移动浮动操作按钮，这样 `Snackbar` 就不会覆盖浮动操作按钮。
- en: 'Not all views have the `CoordinatorLayout` behavior. To implement custom behavior,
    you can start by extending `CoordinatorLayout.Behavior`. You can then attach it
    to the view with the `layout_behavior` attribute. For example, if we made `CustomBehavior`
    in the `com.example.behavior` package for a button, we can update the button in
    the layout with the following:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有视图都具有 `CoordinatorLayout` 的行为。为了实现自定义行为，你可以从扩展 `CoordinatorLayout.Behavior`
    开始。然后你可以通过 `layout_behavior` 属性将其附加到视图上。例如，如果我们为按钮在 `com.example.behavior` 包中创建了
    `CustomBehavior`，我们可以在布局中更新按钮，如下所示：
- en: '[PRE22]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We have learned how to create animations and transitions with `CoordinatorLayout`.
    In the next section, we will look into another layout, `MotionLayout`, which allows
    developers more control over motion.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了如何使用 `CoordinatorLayout` 创建动画和过渡。在下一节中，我们将探讨另一个布局，即 `MotionLayout`，它允许开发者对运动有更多的控制。
- en: Animations with MotionLayout
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带有 MotionLayout 的动画
- en: Creating animations in Android is sometimes time-consuming. You need to work
    on XML and code files even to create simple animations. More complicated animations
    and transitions take even more time to make.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android 中创建动画有时会耗费时间。即使要创建简单的动画，也需要在 XML 和代码文件上工作。更复杂的动画和过渡需要更多的时间来制作。
- en: To help developers easily make animations, Google created `MotionLayout`. This
    is a new way to create motion and animations through XML. It is available starting
    at API level 14 (Android 4.0).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助开发者轻松制作动画，Google 创建了 `MotionLayout`。这是一种通过 XML 创建运动和动画的新方法。它从 API 级别 14（Android
    4.0）开始可用。
- en: With `MotionLayout`, we can animate the position, width/height, visibility,
    alpha, color, rotation, elevation, and other attributes of one or more views.
    Normally, some of these are hard to do with code, but `MotionLayout` allows us
    to easily adjust them using declarative XML so that we can focus more on our application.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `MotionLayout`，我们可以动画化一个或多个视图的位置、宽度/高度、可见性、透明度、颜色、旋转、高度和其它属性。通常，这些属性中的一些很难用代码实现，但
    `MotionLayout` 允许我们使用声明性 XML 轻松调整它们，这样我们就可以更多地关注我们的应用程序。
- en: Let’s get started by adding `MotionLayout` to our application.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始通过将 `MotionLayout` 添加到我们的应用程序中。
- en: Adding MotionLayout
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加 MotionLayout
- en: 'To add `MotionLayout` to your project, you just need to add the dependency
    for `ConstraintLayout 2.0`. `ConstraintLayout 2.0` is the new version of `ConstraintLayout`,
    with new features added, including `MotionLayout`. Add to your app/`build.gradle`
    file dependencies with the following:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 `MotionLayout` 添加到您的项目中，您只需添加 `ConstraintLayout 2.0` 的依赖项。`ConstraintLayout
    2.0` 是 `ConstraintLayout` 的新版本，增加了新功能，包括 `MotionLayout`。将以下依赖项添加到您的 app/`build.gradle`
    文件中：
- en: '[PRE23]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This will add the latest version of ConstraintLayout (2.1.4 at the time of writing)
    to your app.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这将添加 ConstraintLayout 的最新版本（在撰写本文时为 2.1.4）到您的应用中。
- en: After adding the dependency, we can now use `MotionLayout` to create animations.
    We’ll be doing that in the next section.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 添加依赖项后，我们现在可以使用 `MotionLayout` 创建动画。我们将在下一节中这样做。
- en: Creating animations with MotionLayout
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 MotionLayout 创建动画
- en: '`MotionLayout` is a subclass of our good old friend ConstraintLayout. To create
    animations with `MotionLayout`, open the layout file where we will add the animations.
    Replace the root `ConstraintLayout` container with `androidx.constraintlayout.motion.widget.MotionLayout`.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`MotionLayout` 是我们老朋友 ConstraintLayout 的子类。要使用 `MotionLayout` 创建动画，打开我们将添加动画的布局文件。将根
    `ConstraintLayout` 容器替换为 `androidx.constraintlayout.motion.widget.MotionLayout`。'
- en: 'The animation itself won’t be in the layout file but in another XML file, called
    `motion_scene`. This will specify how `MotionLayout` will animate the views inside
    it. `motion_scene` files should be placed in the `res/xml` directory. The layout
    file will link to this `motion_scene` file with the `app:layoutDescription` attribute
    in the root view group. Your layout file should look similar to the following:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 动画本身不会在布局文件中，而是在另一个名为 `motion_scene` 的 XML 文件中。这将指定 `MotionLayout` 如何动画化其中的视图。`motion_scene`
    文件应放置在 `res/xml` 目录中。布局文件将通过根视图组的 `app:layoutDescription` 属性链接到这个 `motion_scene`
    文件。您的布局文件应类似于以下内容：
- en: '[PRE24]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: To create animations with `MotionLayout`, we must have the initial state and
    final state of our views. `MotionLayout` will automatically animate the transition
    between the two. You can specify these two states in the same `motion_scene` file.
    If you have a lot of views inside the layout, you can also use two different layouts
    for the beginning and ending states of the animation.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 `MotionLayout` 创建动画，我们必须有视图的初始状态和最终状态。`MotionLayout` 将自动在这两个状态之间进行动画过渡。您可以在同一个
    `motion_scene` 文件中指定这两个状态。如果您在布局中有很多视图，您也可以为动画的起始和结束状态使用两个不同的布局。
- en: 'The root container of the `motion_scene` file is `motion_scene`. This is where
    we add the constraints and animation for `MotionLayout`. It contains the following:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`motion_scene` 文件的根容器是 `motion_scene`。这是我们添加 `MotionLayout` 的约束和动画的地方。它包含以下内容：'
- en: '**ConstraintSet**: Specifies the beginning and ending position and style for
    the view/layout to animate'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ConstraintSet**：指定要动画化的视图/布局的起始和结束位置及样式'
- en: '**Transition**: Specifies the start, end, duration, and other details of the
    animation to be done on the views'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**过渡**：指定要在视图上执行的动画的开始、结束、持续时间和其他细节'
- en: Let’s try adding animations with `MotionLayout` by adding it to our *Tip* *Calculator*
    app.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试通过将 `MotionLayout` 添加到我们的 *小费* *计算器* 应用中来添加动画。
- en: Exercise 16.03 – adding animations with MotionLayout
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 16.03 – 使用 MotionLayout 添加动画
- en: 'In this exercise, we will be updating our *Tip Calculator* app with a `MotionLayout`
    animation. In the output screen, the image above the tip text will move down when
    tapped and will go back to its original position when tapped again:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将更新我们的 *小费计算器* 应用，添加 `MotionLayout` 动画。在输出屏幕中，当点击提示文本上方的图片时，它会向下移动；再次点击时，它会回到原始位置：
- en: Open the *Tip Calculator* project in Android Studio 4.0 or higher.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Android Studio 4.0 或更高版本中打开 *小费计算器* 项目。
- en: 'Open the `activity_output.xml` file and change the root `ConstraintLayout`
    tag to `MotionLayout`. Change `androidx.constraintlayout.widget.ConstraintLayout`
    to the following:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`activity_output.xml`文件并将根`ConstraintLayout`标签更改为`MotionLayout`。将`androidx.constraintlayout.widget.ConstraintLayout`更改为以下内容：
- en: '[PRE25]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Add `app:layoutDescription="@xml/motion_scene"` to the `MotionLayout` tag.
    The IDE will warn you that this file does not yet exist. Ignore that for now,
    as we will be adding it in the next step. Your file should look similar to this:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`app:layoutDescription="@xml/motion_scene"`添加到`MotionLayout`标签中。IDE会警告你该文件尚不存在。现在请忽略这个警告，因为我们将在下一步中添加它。你的文件应该看起来像这样：
- en: '[PRE26]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Create a `motion_scene.xml` file in the `res/xml` directory. This will be our
    `motion_scene` file where the animation configuration will be defined. Use `motion_scene`
    as the root element for the file.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`res/xml`目录下创建一个`motion_scene.xml`文件。这将是我们定义动画配置的`motion_scene`文件。使用`motion_scene`作为文件的根元素。
- en: 'Add the starting `Constraint` element by adding the following to the `motion_scene`
    file:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`motion_scene`文件中添加以下内容来添加起始`Constraint`元素：
- en: '[PRE27]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The complete code for this step can be found at [https://packt.link/jdJrD](https://packt.link/jdJrD).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 本步骤的完整代码可以在[https://packt.link/jdJrD](https://packt.link/jdJrD)找到。
- en: This is how the image looks at the current position (constrained to the top
    of the screen).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这是图像在当前位置（约束在屏幕顶部）的显示效果。
- en: 'Next, add the ending `Constraint` element by adding the following to the `motion_scene`
    file:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过在`motion_scene`文件中添加以下内容来添加结束`Constraint`元素：
- en: '[PRE28]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The complete code for this step can be found at [https://packt.link/jdJrD](https://packt.link/jdJrD).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 本步骤的完整代码可以在[https://packt.link/jdJrD](https://packt.link/jdJrD)找到。
- en: In the ending animation, `ImageView` will be at the bottom of the screen.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在结束动画中，`ImageView`将位于屏幕底部。
- en: 'Let’s now add in the transition for our `ImageView` after the `ConstraintSet`:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们来为`ImageView`添加在`ConstraintSet`之后的过渡：
- en: '[PRE29]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Here, we’re specifying the start and end constraints, which will animate for
    2,000 milliseconds (2 seconds). We also added an `OnClick` event to `ImageView`.
    The toggle will animate the view from start to end, and if the view is already
    in the end state, it will animate back to the start state.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们指定了起始和结束约束，这些约束将在2,000毫秒（2秒）内动画化。我们还为`ImageView`添加了一个`OnClick`事件。切换将使视图从起始状态动画化到结束状态，如果视图已经在结束状态，它将动画化回到起始状态。
- en: 'Run the application and tap on `ImageView`. It will move straight downward
    in around 2 seconds. Tap it again, and it will move back up in 2 seconds. *Figure
    16**.4* shows the start and the end of this animation:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用并点击`ImageView`。它将在大约2秒内直接向下移动。再次点击，它将在2秒内返回到上方。*图16.4*显示了动画的起始和结束状态：
- en: '![Figure 16.4 – The starting animation (left) and the ending animation (right)](img/B19411_16_04.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图16.4 – 起始动画（左）和结束动画（右）](img/B19411_16_04.jpg)'
- en: Figure 16.4 – The starting animation (left) and the ending animation (right)
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.4 – 起始动画（左）和结束动画（右）
- en: In this exercise, we have animated `ImageView` in `MotionLayout` by specifying
    the start constraint, end constraint, and transition with a duration and `OnClick`
    event. `MotionLayout` automatically plays the animation from the start to the
    end position (which to us looks like it’s moving up or down in a straight line
    automatically when tapped).
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们通过指定起始约束、结束约束以及带有持续时间和`OnClick`事件的过渡，在`MotionLayout`中动画化了`ImageView`。`MotionLayout`会自动从起始位置播放动画到结束位置（在我们看来，当点击时，它看起来像是在自动向上或向下直线移动）。
- en: We have created animations with `MotionLayout`. In the next section, we will
    be using Android Studio’s Motion Editor to create `MotionLayout` animations.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用`MotionLayout`创建了动画。在下一节中，我们将使用Android Studio的运动编辑器来创建`MotionLayout`动画。
- en: The Motion Editor
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运动编辑器
- en: Android Studio, starting with version 4.0, includes the Motion Editor. The Motion
    Editor can help developers create animations with `MotionLayout`. This makes it
    easier for developers to create and preview transitions and other motions, instead
    of doing it by hand and running the app to see the changes. The editor will also
    generate the corresponding files automatically.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本4.0开始，Android Studio包含了运动编辑器。运动编辑器可以帮助开发者使用`MotionLayout`创建动画。这使得开发者更容易创建和预览过渡和其他动作，而不是手动操作并运行应用来查看更改。编辑器还会自动生成相应的文件。
- en: You can convert your ConstraintLayout to `MotionLayout` in the Layout Editor
    by right-clicking the preview and clicking on the **Convert to MotionLayout**
    item. Android Studio will do the conversion and also create the motion scene file
    for you.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在布局编辑器中右键点击预览并点击**转换为运动布局**项将你的ConstraintLayout转换为`MotionLayout`。Android
    Studio将执行转换并为你创建运动场景文件。
- en: 'When viewing a layout file that has `MotionLayout` as the root in the **Design**
    view, the Motion Editor UI will be included in the **Design** view, as shown in
    *Figure 16**.5*:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 当在**设计**视图中查看以`MotionLayout`为根布局的布局文件时，运动编辑器UI将包含在**设计**视图中，如图*图16.5*所示：
- en: '![Figure 16.5 – The Motion Editor in Android Studio 4.0](img/B19411_16_05.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图16.5 – Android Studio 4.0中的运动编辑器](img/B19411_16_05.jpg)'
- en: Figure 16.5 – The Motion Editor in Android Studio 4.0
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.5 – Android Studio 4.0中的运动编辑器
- en: 'In the upper-right window (the `MotionLayout` and the start and end constraint.
    The transition is displayed as an arrow coming from the start constraint. The
    dot near the start constraint shows the click action for the transition. *Figure
    16**.6* shows the `start_constraint` selected:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在右上角的窗口（`MotionLayout`以及起始和结束约束。过渡以从起始约束发出的箭头表示。靠近起始约束的点显示了过渡的点击动作。*图16.6*显示了选中的`start_constraint`：
- en: '![Figure 16.6 – The Motion Editor’s Overview panel with start_constraint selected](img/B19411_16_06.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图16.6 – 选择start_constraint时运动编辑器的概览面板](img/B19411_16_06.jpg)'
- en: Figure 16.6 – The Motion Editor’s Overview panel with start_constraint selected
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.6 – 选择start_constraint时运动编辑器的概览面板
- en: 'The bottom-right window is the `MotionLayout` selected in the `start_constraint`
    is selected:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 右下角的窗口是当选择`start_constraint`时选中的`MotionLayout`：
- en: '![Figure 16.7 – The Motion Editor’s Selection panel showing ConstraintSet for
    start_constraint](img/B19411_16_07.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图16.7 – 运动编辑器的选择面板显示start_constraint的ConstraintSet](img/B19411_16_07.jpg)'
- en: Figure 16.7 – The Motion Editor’s Selection panel showing ConstraintSet for
    start_constraint
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.7 – 运动编辑器的选择面板显示start_constraint的ConstraintSet
- en: 'When you click on `MotionLayout` on the left of the **Overview** panel, the
    **Selection** panel below will display the views and their constraints, as shown
    in *Figure 16**.8*:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在**概览**面板的左侧点击`MotionLayout`时，下方的**选择**面板将显示视图及其约束，如图*图16.8*所示：
- en: '![Figure 16.8 – The Overview and Selection panels when MotionLayout is selected](img/B19411_16_08.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![图16.8 – 选择MotionLayout时的概览和选择面板](img/B19411_16_08.jpg)'
- en: Figure 16.8 – The Overview and Selection panels when MotionLayout is selected
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.8 – 选择MotionLayout时的概览和选择面板
- en: 'When you click on `start_constraint` or `end_constraint`, the preview window
    on the left will display how the start or end state looks. The `start_constraint`
    is selected:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击`start_constraint`或`end_constraint`时，左侧的预览窗口将显示起始或结束状态的样子。`start_constraint`被选中：
- en: '![Figure 16.9 – How the Motion Editor looks when start_constraint is selected](img/B19411_16_09.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![图16.9 – 选择start_constraint时运动编辑器的样子](img/B19411_16_09.jpg)'
- en: Figure 16.9 – How the Motion Editor looks when start_constraint is selected
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.9 – 选择start_constraint时运动编辑器的样子
- en: '*Figure 16**.10* shows how the Motion Editor will look if you select `end_constraint`:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '*图16.10*显示了如果你选择`end_constraint`时运动编辑器将如何显示：'
- en: '![Figure 16.10 – How the Motion Editor looks with end_constraint selected](img/B19411_16_10.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![图16.10 – 选择end_constraint时运动编辑器的样子](img/B19411_16_10.jpg)'
- en: Figure 16.10 – How the Motion Editor looks with end_constraint selected
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.10 – 选择end_constraint时运动编辑器的样子
- en: 'The arrow connecting `start_constraint` and `end_constraint` represents the
    transition of `MotionLayout`. On the **Selection** panel, there are controls to
    play or go to the first or last state. You can also drag the arrow to a specific
    position. *Figure 16**.11* shows how it looks in the middle (50% of the animation):'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 连接`start_constraint`和`end_constraint`的箭头代表`MotionLayout`的过渡。在**选择**面板上，有播放或跳转到第一个或最后一个状态的控件。你还可以将箭头拖动到特定位置。*图16.11*显示了它在动画中间（50%）的样子：
- en: '![Figure 16.11 – The transition in the middle of the animation](img/B19411_16_11.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图16.11 – 动画中间的过渡](img/B19411_16_11.jpg)'
- en: Figure 16.11 – The transition in the middle of the animation
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.11 – 动画中间的过渡
- en: During the development of animations with `MotionLayout`, it would be better
    if we could debug the animations to make sure we’re doing the animations correctly.
    We’ll discuss how we can do this in the next section.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`MotionLayout`开发动画的过程中，如果我们能够调试动画以确保我们正确地执行动画会更好。我们将在下一节讨论如何做到这一点。
- en: Debugging MotionLayout
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运动布局的调试
- en: To help you visualize the `MotionLayout` animation before running the app, you
    can show the motion path and the animation’s progress in the Motion Editor. The
    motion path is the straight route that the object to animate will take from the
    start to the end state.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在运行应用程序之前帮助你可视化 `MotionLayout` 动画，你可以在运动编辑器中显示运动路径和动画的进度。运动路径是动画对象从起始状态到结束状态将采取的直线路径。
- en: To show the path and/or progress animation, we can add a `motionDebug` attribute
    to the `MotionLayout` container.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示路径和/或进度动画，我们可以在 `MotionLayout` 容器中添加一个 `motionDebug` 属性。
- en: 'We can use the following values for `motionDebug`:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为 `motionDebug` 使用以下值：
- en: '`SHOW_PATH`: This displays the path of the motion only'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHOW_PATH`：这仅显示运动的路径'
- en: '`SHOW_PROGRESS`: This displays the animation progress only'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHOW_PROGRESS`：这仅显示动画进度'
- en: '`SHOW_ALL`: This displays both the path and the progress of the animation'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHOW_ALL`：这显示动画的路径和进度'
- en: '`NO_DEBUG`: This hides all animations'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NO_DEBUG`：这隐藏了所有动画'
- en: 'To display the `MotionLayout` path and progress, we can use the following:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示 `MotionLayout` 的路径和进度，我们可以使用以下方法：
- en: '[PRE30]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The `SHOW_ALL` value will display the path and the progress of the animation.
    *Figure 16**.12* shows how it will look when we use `SHOW_PATH` and `SHOW_PROGRESS`:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`SHOW_ALL` 值将显示动画的路径和进度。*图 16*.*12* 展示了当我们使用 `SHOW_PATH` 和 `SHOW_PROGRESS`
    时它将看起来如何：'
- en: '![Figure 16.12 – Using SHOW_PATH (left) shows the animation path, while SHOW_PROGRESS
    (right) shows the animation progress](img/B19411_16_12.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.12 – 使用 SHOW_PATH（左）显示动画路径，而 SHOW_PROGRESS（右）显示动画进度](img/B19411_16_12.jpg)'
- en: Figure 16.12 – Using SHOW_PATH (left) shows the animation path, while SHOW_PROGRESS
    (right) shows the animation progress
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.12 – 使用 SHOW_PATH（左）显示动画路径，而 SHOW_PROGRESS（右）显示动画进度
- en: While `motionDebug` sounds like something that only appears in debug mode, it
    will also appear in release builds, so it should be removed when you’re preparing
    your app for publishing.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `motionDebug` 听起来像只在调试模式下出现的东西，但它也会出现在发布构建中，因此在你准备发布你的应用程序时应该将其删除。
- en: During the `MotionLayout` animation, the start constraint will transition to
    the end constraint, even if there’s an element or elements that can block the
    objects in motion. We’ll discuss how we can avoid this from happening in the next
    section.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `MotionLayout` 的动画过程中，起始约束将过渡到结束约束，即使有可以阻挡运动对象的元素或元素。我们将在下一节讨论如何避免这种情况发生。
- en: Modifying the MotionLayout path
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改 MotionLayout 路径
- en: In an animation with `MotionLayout`, the UI will play the motion from the start
    constraint to the end constraint, even if there are elements in the middle that
    can block our moving views. For example, if `MotionLayout` involves text that
    moves from the top to the bottom of the screen and vice versa, and we add a button
    to the middle, the button will cover the moving text.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `MotionLayout` 的动画中，UI 将从起始约束播放到结束约束，即使中间有可以阻挡我们移动视图的元素。例如，如果 `MotionLayout`
    涉及从屏幕顶部到底部移动的文本，反之亦然，并且我们在中间添加了一个按钮，按钮将覆盖移动的文本。
- en: '*Figure 16**.13* shows how the **OK** button blocks the moving text in the
    middle of the animation:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 16*.*13* 展示了 **OK** 按钮如何阻挡动画中间的移动文本：'
- en: '![Figure 16.13 – The OK button is blocking the middle of the text animation](img/B19411_16_13.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.13 – OK 按钮阻挡了文本动画的中间部分](img/B19411_16_13.jpg)'
- en: Figure 16.13 – The OK button is blocking the middle of the text animation
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.13 – OK 按钮阻挡了文本动画的中间部分
- en: '`MotionLayout` plays the animation from the start to the end constraint in
    a straight path and adjusts the views, based on the specified attributes. We can
    add keyframes between the start and end constraints to adjust the animation path
    and/or the view attributes. For example, during the animation, as well as changing
    the position of the moving text to avoid the button, we can also change the attributes
    of the text or other views.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`MotionLayout` 沿着直线路径从起始约束播放到结束约束，并根据指定的属性调整视图。我们可以在起始和结束约束之间添加关键帧来调整动画路径和/或视图属性。例如，在动画过程中，除了将移动文本的位置改变以避开按钮外，我们还可以更改文本或其他视图的属性。'
- en: 'Keyframes can be added in `KeyFrameSet` as a child of the transition attribute
    of `motion_scene`. We can use the following keyframes:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 关键帧可以作为 `motion_scene` 转换属性的子元素添加到 `KeyFrameSet` 中。我们可以使用以下关键帧：
- en: '`KeyPosition`: This specifies the view’s position at a specific point during
    the animation to adjust the path'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KeyPosition`：这指定了动画过程中视图在特定点的位置，以调整路径'
- en: '`KeyAttribute`: This specifies the view’s attributes at a specific point during
    the animation'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KeyAttribute`: 这指定了动画特定点的视图属性。'
- en: '`KeyCycle`: This adds oscillations during animations'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KeyCycle`: 这在动画期间添加了振荡。'
- en: '`KeyTimeCycle`: This allows cycles to be driven by time instead of animation
    progress'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KeyTimeCycle`: 这允许循环由时间而不是动画进度驱动。'
- en: '`KeyTrigger`: This adds an element that can trigger an event based on the animation
    progress'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KeyTrigger`: 这添加了一个可以根据动画进度触发事件的元素。'
- en: We will focus on `KeyPosition` and `KeyAttribute`, as `KeyCycle`, `KeyTimeCycle`,
    and `KeyTrigger` are more advanced keyframes.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重点关注 `KeyPosition` 和 `KeyAttribute`，因为 `KeyCycle`、`KeyTimeCycle` 和 `KeyTrigger`
    是更高级的关键帧。
- en: '`KeyPosition` allows us to change the location of views in the middle of the
    `MotionLayout` animation. It has the following attributes:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`KeyPosition` 允许我们在 `MotionLayout` 动画中间更改视图的位置。它有以下属性：'
- en: '`motionTarget`: This specifies the object controlled by the keyframe.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`motionTarget`: 这指定了由关键帧控制的对象。'
- en: '`framePosition`: Numbered from 1 to 99, this specifies the percentage of the
    motion when the position is changed. For example, 25 means it is at one-quarter
    of the animation, and 50 is the halfway point.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`framePosition`: 从 1 到 99 编号，这指定了位置改变时的运动百分比。例如，25 表示动画的四分之一处，而 50 是动画的中点。'
- en: '`percentX`: This specifies how much the *x* value of the path will be modified.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`percentX`: 这指定了路径的 *x* 值将被修改多少。'
- en: '`percentY`: This specifies how much the *y* value of the path will be modified.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`percentY`: 这指定了路径的 *y* 值将被修改多少。'
- en: '`keyPositionType`: This specifies how `KeyPosition` modifies the path.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keyPositionType`: 这指定了 `KeyPosition` 如何修改路径。'
- en: 'The `keyPositionType` attribute can have the following values:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`keyPositionType` 属性可以有以下值：'
- en: '`parentRelative`: `percentX` and `percentY` are specified based on the parent
    of the view'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parentRelative`: `percentX` 和 `percentY` 是基于视图的父元素指定的。'
- en: '`pathRelative`: `percentX` and `percentY` are specified based on the straight
    path from the start constraint to the end constraint'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pathRelative`: `percentX` 和 `percentY` 是基于从起始约束到结束约束的直线路径指定的。'
- en: '`deltaRelative`: `percentX` and `percentY` are specified based on the position
    of the view'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deltaRelative`: `percentX` 和 `percentY` 是基于视图的位置指定的。'
- en: 'For example, if we want to modify the path of `TextView` with the `text_view`
    ID at the exact middle of the animation (50%), by moving it 10% by *x* and 10%
    by *y*, relative to the parent container of `TextView`, we will have the following
    key position in `motion_scene`:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想在动画的精确中点（50%）修改具有 `text_view` ID 的 `TextView` 的路径，通过将其沿 *x* 方向移动 10%
    和沿 *y* 方向移动 10%，相对于 `TextView` 的父容器，我们将在 `motion_scene` 中有以下关键位置：
- en: '[PRE31]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Meanwhile, `KeyAttribute` allows us to change the attributes of views while
    the `MotionLayout` animation is ongoing. Some of the view attributes we can change
    are `visibility`, `alpha`, `elevation`, `rotation`, `scale`, and `translation`.
    `KeyAttribute` has the following attributes:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，`KeyAttribute` 允许我们在 `MotionLayout` 动画进行时更改视图的属性。我们可以更改的一些视图属性包括 `visibility`、`alpha`、`elevation`、`rotation`、`scale`
    和 `translation`。`KeyAttribute` 有以下属性：
- en: '`motionTarget`: This specifies the object controlled by the keyframe.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`motionTarget`: 这指定了由关键帧控制的对象。'
- en: '`framePosition`: Numbered from 1 to 99, this specifies the percentage of the
    motion when the view attributes are applied. For example, 20 means it is one-fifth
    of the animation, and 75 is the three-quarter point of the animation.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`framePosition`: 从 1 到 99 编号，这指定了应用视图属性时的运动百分比。例如，20 表示动画的五分之一处，而 75 是动画的三分之四处。'
- en: Let’s try adding keyframes to the *Tip Calculator* app. When the `ImageView`
    animates, it goes on top of the text displaying the tip. We’ll fix that with keyframes.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试向 *小费计算器* 应用添加关键帧。当 `ImageView` 动画时，它会覆盖显示小费的文本。我们将通过添加关键帧来修复这个问题。
- en: Exercise 16.04 – modifying the animation path with keyframes
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 16.04 – 使用关键帧修改动画路径
- en: 'In the previous exercise, we animated the image to move straight down when
    tapped (or upward when it’s already at the bottom). When it is in the middle,
    the image is covering the tip `TextView`. We’ll be solving this issue in this
    exercise by adding `KeyFrame` to `motion_scene` using Android Studio’s Motion
    Editor:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个练习中，我们使图像在点击时向下移动（或当它已经在底部时向上移动）。当它在中间时，图像覆盖了提示 `TextView`。我们将通过在 Android
    Studio 的 Motion 编辑器中添加 `KeyFrame` 到 `motion_scene` 来解决此问题：
- en: Open the *Tip Calculator* app with Android Studio 4.0 or higher.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Android Studio 4.0 或更高版本打开 *小费计算器* 应用。
- en: Open the `activity_output.xml` file in the `res/layout` directory.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `res/layout` 目录中打开 `activity_output.xml` 文件。
- en: 'Add `app:motionDebug="SHOW_ALL"` to the `MotionLayout` container. This will
    allow us to see the path and progress information in Android Studio and on our
    device/emulator. Your `MotionLayout` container will look like the following:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`app:motionDebug="SHOW_ALL"`添加到`MotionLayout`容器中。这将允许我们在 Android Studio 和我们的设备/模拟器上看到路径和进度信息。您的`MotionLayout`容器将如下所示：
- en: '[PRE32]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Run the app and make a computation. On the output screen, tap on the image.
    Look at the tip text while the animation is in progress. Note that the text is
    covered by the image in the middle of the animation, as shown in *Figure 16**.14*:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序并执行计算。在输出屏幕上，点击图像。在动画进行时查看提示文本。注意，文本在动画中间被图像覆盖，如*图 16.14*所示：
- en: '![Figure 16.14 – The image hides the TextView displaying the tip](img/B19411_16_14.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.14 – 图像隐藏显示提示的 TextView](img/B19411_16_14.jpg)'
- en: Figure 16.14 – The image hides the TextView displaying the tip
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.14 – 图像隐藏显示提示的 TextView
- en: Go back to the `activity_output.xml` file in Android Studio. Make sure it’s
    opened in the **Design** view.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 Android Studio 中的`activity_output.xml`文件。确保它在**设计**视图中打开。
- en: 'In the `start_constraint` and `end_constraint`. Drag the down arrow in the
    **Selection** panel to the middle (50%), as shown in *Figure 16**.15*:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`start_constraint`和`end_constraint`中。将**选择**面板中的向下箭头拖动到中间（50%），如*图 16.15*所示：
- en: '![Figure 16.15 – Selecting the arrow representing  transition between  start
    and end constraints](img/B19411_16_15.jpg)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.15 – 选择表示起始和结束约束之间转换的箭头](img/B19411_16_15.jpg)'
- en: Figure 16.15 – Selecting the arrow representing transition between start and
    end constraints
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.15 – 选择表示起始和结束约束之间转换的箭头
- en: 'Click the **Create KeyFrames** icon to the right of **Transition** in the **Selection**
    panel (the one with a green **+** symbol), as shown in *Figure 16**.16*:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**选择**面板（带有绿色**+**符号的面板）中**转换**右侧的**创建关键帧**图标，如*图 16.16*所示：
- en: '![Figure 16.16 – The Create KeyFrames icon](img/B19411_16_16.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.16 – 创建关键帧图标](img/B19411_16_16.jpg)'
- en: Figure 16.16 – The Create KeyFrames icon
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.16 – 创建关键帧图标
- en: Select **KeyPosition**. We will be using **KeyPosition** to adjust the image
    in the output screen so that it will not overlap with the text containing the
    tip.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**关键位置**。我们将使用**关键位置**来调整输出屏幕上的图像，使其不会与包含提示文本的文本重叠。
- en: 'Select `50`. The type is `parentRelative`, and the `1.5`, as shown in *Figure
    16**.17*. This will add a **KeyPosition** attribute for the image in the middle
    (50%) of the transition, which is 1.5 times relative to the *x* axis of the parent:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`50`。类型是`parentRelative`，`1.5`，如*图 16.17*所示。这将为转换中间（50%）的图像添加一个**关键位置**属性，相对于父元素的*x*轴是1.5倍：
- en: '![Figure 16.17 – Provide the input to the key position to be made](img/B19411_16_17.jpg)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.17 – 提供要创建的关键位置输入](img/B19411_16_17.jpg)'
- en: Figure 16.17 – Provide the input to the key position to be made
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.17 – 提供要创建的关键位置输入
- en: 'Click the `ImageView`. That will now be to the right of `TextView`:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`ImageView`。现在它将位于`TextView`的右侧：
- en: '![Figure 16.18 – Path will now be curved;  Transition panel will have new item
    for KeyPosition](img/B19411_16_18.jpg)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.18 – 路径现在将是曲线的；转换面板将出现新的 KeyPosition 项](img/B19411_16_18.jpg)'
- en: Figure 16.18 – Path will now be curved; Transition panel will have new item
    for KeyPosition
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.18 – 路径现在将是曲线的；转换面板将出现新的 KeyPosition 项
- en: 'Click the play icon to see how it will animate. Run the application to verify
    it on a device or emulator. You will see that the animation is now curving to
    the right instead of taking its previous straight path, as shown in *Figure 16**.19*:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击播放图标以查看动画效果。在设备或模拟器上运行应用程序以验证它。您将看到动画现在向右弯曲，而不是采取之前的直线路径，如*图 16.19*所示：
- en: '![Figure 16.19 – The animation now avoids TextView with the tip](img/B19411_16_19.jpg)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.19 – 现在动画避免了带有提示的 TextView](img/B19411_16_19.jpg)'
- en: Figure 16.19 – The animation now avoids TextView with the tip
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.19 – 现在动画避免了带有提示的 TextView
- en: 'The Motion Editor will automatically generate the code for `KeyPosition`. If
    you go to the `motion_scene.xml` file, you will see that the Motion Editor added
    the following code in the transition attribute:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Motion 编辑器将自动生成`KeyPosition`的代码。如果您转到`motion_scene.xml`文件，您将看到 Motion 编辑器在转换属性中添加了以下代码：
- en: '[PRE33]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: A `KeyPosition` attribute was added to the keyframes during the transition.
    At 50% of the animation, the image’s *x* position is moved 1.5 times relative
    to its parent view. This allows the image to avoid other elements during the animation
    process.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在过渡期间添加了 `KeyPosition` 属性。在动画的 50% 时，图像的 *x* 位置相对于其父视图移动了 1.5 倍。这允许图像在动画过程中避免其他元素。
- en: In this exercise, you have added a key position that will adjust the `MotionLayout`
    animation, ensuring that it will not block or be blocked by another view in its
    path.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你添加了一个关键位置，这将调整 `MotionLayout` 动画，确保它不会阻塞或被其路径上的另一个视图阻塞。
- en: Let’s test everything you’ve learned by doing another activity.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 通过进行另一个活动来测试你所学的一切。
- en: Activity 16.01 – Password Generator
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 16.01 – 密码生成器
- en: Using a strong password is important to secure our online accounts. It must
    be unique and must include uppercase and lowercase letters, numbers, and special
    characters. In this activity, you will develop an app that can generate a strong
    password.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 使用强密码来保护我们的在线账户非常重要。它必须是唯一的，并且必须包含大写和小写字母、数字和特殊字符。在这个活动中，你将开发一个可以生成强密码的应用程序。
- en: The app will have two screens – the input screen and the output screen. In the
    input screen, a user can provide the length of a password and specify whether
    it must have uppercase or lowercase letters, numbers, or special characters.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序将有两个屏幕 – 输入屏幕和输出屏幕。在输入屏幕中，用户可以提供密码的长度并指定是否必须包含大写或小写字母、数字或特殊字符。
- en: The output screen will display three possible passwords, and when the user selects
    one, the other passwords will move away, and a button will display to copy the
    password to the clipboard. You should customize the transition from the input
    screen to the output screen.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 输出屏幕将显示三个可能的密码，当用户选择一个时，其他密码将移开，并显示一个按钮以将密码复制到剪贴板。您应该自定义从输入屏幕到输出屏幕的过渡。
- en: 'The steps to complete are as follows:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以下步骤：
- en: Create a new project in Android Studio 4.0 or higher and name it `Password Generator`.
    Set its package name and **Minimum SDK**.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Android Studio 4.0 或更高版本中创建一个新的项目，并将其命名为 `Password Generator`。设置其包名和**最小 SDK**。
- en: Add the `MaterialComponents` dependency to your `app/build.gradle` file.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `MaterialComponents` 依赖项添加到您的 `app/build.gradle` 文件中。
- en: Update the dependency for `ConstraintLayout`.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `ConstraintLayout` 的依赖项。
- en: Make sure that the activity’s theme uses one from `MaterialComponents` in the
    `themes.xml` file.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保活动的主题在 `themes.xml` 文件中使用 `MaterialComponents` 中的一个。
- en: In the `activity_main.xml` file, remove the `Hello World` `TextView` and add
    the input text field for the length.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `activity_main.xml` 文件中，删除 `Hello World` `TextView` 并添加用于长度的输入文本字段。
- en: Add the code for checkboxes for uppercase, numbers, and special characters.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加用于大写字母、数字和特殊字符的复选框代码。
- en: Add a **Generate** button at the bottom of the checkboxes.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在复选框底部添加一个**生成**按钮。
- en: Create another activity and name it `OutputActivity`.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个活动，并将其命名为 `OutputActivity`。
- en: Customize the activity transition from the input screen (`MainActivity`) as
    `OutputActivity`. Open `themes.xml` and update the activity theme with the `windowActivityTransitions`,
    `windowEnterTransition`, and `windowExitTransition` style attributes.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将从输入屏幕（`MainActivity`）到 `OutputActivity` 的活动过渡进行自定义。打开 `themes.xml` 并使用 `windowActivityTransitions`、`windowEnterTransition`
    和 `windowExitTransition` 风格属性更新活动主题。
- en: Update the end of the `onCreate` function in `MainActivity`.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `MainActivity` 中的 `onCreate` 函数的末尾。
- en: Update the code for `androidx.constraintlayout.widget.ConstraintLayout` in the
    `activity_output.xml` file.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `activity_output.xml` 文件中 `androidx.constraintlayout.widget.ConstraintLayout`
    的代码。
- en: Add `app:layoutDescription="@xml/motion_scene"` and `app:motion` **Debug="SHOW_ALL"**
    to the `MotionLayout` tag.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `app:layoutDescription="@xml/motion_scene"` 和 `app:motion Debug="SHOW_ALL"`
    添加到 `MotionLayout` 标签中。
- en: Add three instances of `TextView` to the output activity for the three passwords
    generated.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向输出活动添加三个 `TextView` 实例，用于显示生成的三个密码。
- en: Add a **Copy** button at the bottom of the screen.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在屏幕底部添加一个**复制**按钮。
- en: Add the `generatePassword` function in `OutputActivity`.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `OutputActivity` 中添加 `generatePassword` 函数。
- en: Add the code to generate the three passwords based on user input, and add a
    `ClickListener` component to the **Copy** button for a user to copy the selected
    password to the clipboard.
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加代码以根据用户输入生成三个密码，并为**复制**按钮添加一个 `ClickListener` 组件，以便用户可以将选定的密码复制到剪贴板。
- en: In `OutputActivity`, create an animation per the password `TextView`.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `OutputActivity` 中，为每个密码 `TextView` 创建一个动画。
- en: Create `ConstraintSet` for the default view.
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为默认视图创建 `ConstraintSet`。
- en: Add `ConstraintSet` when the first, second, and third passwords are selected.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当第一个、第二个和第三个密码被选中时，添加`ConstraintSet`。
- en: Next, add `Transition` when each password is selected.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，当每个密码被选中时，添加`Transition`。
- en: Run the application by going to the **Run** menu and clicking the **Run app**
    menu item.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问**运行**菜单并点击**运行应用程序**菜单项来运行应用程序。
- en: Input a length, select the checkboxes for uppercase, numbers, and special characters,
    and tap on the **Generate** button. Three passwords will be displayed.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入一个长度，选择大写字母、数字和特殊字符的复选框，然后点击**生成**按钮。将显示三个密码。
- en: 'Select one and the rest will move out of view. A **Copy** button will also
    be displayed. Click on it and check whether the password you selected is now on
    the clipboard. The initial and final state of the output screen will be similar
    to *Figure 16**.20*:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个，其余的将移出视图。还会显示一个**复制**按钮。点击它并检查您选择的密码是否现在在剪贴板上。输出屏幕的初始和最终状态将与*图16**.20*相似：
- en: '![Figure 16.20 – The start and end state of MotionLayout in the Password Generator
    app](img/B19411_16_20.jpg)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![图16.20 – 密码生成器应用中MotionLayout的起始和结束状态](img/B19411_16_20.jpg)'
- en: Figure 16.20 – The start and end state of MotionLayout in the Password Generator
    app
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.20 – 密码生成器应用中MotionLayout的起始和结束状态
- en: Note
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The solution to this activity can be found at [https://packt.link/By7eE](https://packt.link/By7eE).
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 该活动的解决方案可以在[https://packt.link/By7eE](https://packt.link/By7eE)找到。
- en: Summary
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter covered creating animations and transitions with `CoordinatorLayout`
    and `MotionLayout`. Animations can improve the usability of our app and make it
    stand out compared to other apps.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了如何使用`CoordinatorLayout`和`MotionLayout`创建动画和过渡。动画可以提高我们应用程序的可用性，并使其与其他应用程序相比脱颖而出。
- en: We started by customizing the transition when opening and closing an activity
    with activity transitions. We also learned about adding shared element transitions
    when an activity and the activity that it opens both contain the same elements,
    enabling us to highlight this link between the shared elements to users.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从自定义使用活动过渡打开和关闭活动时的过渡开始。我们还学习了当打开的活动及其打开的活动都包含相同元素时添加共享元素过渡，使我们能够向用户突出显示共享元素之间的这种链接。
- en: We learned how we can use `CoordinatorLayout` to handle the motion of its child
    views. Some views have built-in behaviors that handle how they work inside `CoordinatorLayout`.
    You can add custom behaviors to other views too. Then, we moved on to using `MotionLayout`
    to create animations by specifying the start constraint, end constraint, and the
    transition between them. We also looked into modifying the motion path by adding
    keyframes in the middle of an animation. We learned about keyframes such as `KeyPosition`,
    which can change a view’s position, and `KeyAttribute`, which can change the view’s
    style. We also looked into using the Motion Editor in Android Studio to simplify
    the creation and previewing of animations and modifying the path.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何使用`CoordinatorLayout`来处理其子视图的运动。一些视图具有内置的行为，可以处理它们在`CoordinatorLayout`内部的工作方式。您也可以向其他视图添加自定义行为。然后，我们转向使用`MotionLayout`通过指定起始约束、结束约束以及它们之间的过渡来创建动画。我们还探讨了通过在动画中间添加关键帧来修改运动路径。我们学习了关于关键帧的知识，例如`KeyPosition`，它可以改变视图的位置，以及`KeyAttribute`，它可以改变视图的样式。我们还探讨了在Android
    Studio中使用运动编辑器来简化动画的创建和预览以及路径的修改。
- en: In the next chapter, we’ll learn about the Google Play store. We’ll discuss
    how you can create an account and prepare your apps for release, as well as how
    you can publish them for users to download and use.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习关于Google Play商店的内容。我们将讨论如何创建账户并准备应用程序发布，以及如何将它们发布供用户下载和使用。
