- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Building Our First .NET MAUI App
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建我们的第一个 .NET MAUI 应用程序
- en: In this chapter, we will create a new .NET MAUI project and customize it so
    that we can use it in the development of an app. The app that we will develop
    is a password management app. We will gradually introduce various features to
    it in the subsequent chapters. By the end of *Part 1*, we will possess a fully
    functional password management app.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章节中，我们将创建一个新的 .NET MAUI 项目，并对其进行自定义，以便我们可以在应用程序开发中使用它。我们将开发的应用程序是一个密码管理应用程序。在随后的章节中，我们将逐步向其中引入各种功能。到
    *第一部分* 结束时，我们将拥有一个功能齐全的密码管理应用程序。
- en: Those who have prior experience with Xamarin.Forms will recall that the **Shell**
    serves as a convenient application container that simplifies app development by
    offering a unified structure for defining an application’s key components. While
    there isn’t a direct Visual Studio template for .NET MAUI Shell from Microsoft,
    we can effectively utilize the one from Xamarin.Forms. To incorporate Shell in
    our app, we’ll reuse the project template found in Xamarin.Forms. As well as from
    providing us with a proficient project template, the process of migrating the
    Xamarin.Forms Shell template to .NET MAUI will provide valuable insights into
    the migration of a Xamarin.Forms project to .NET MAUI.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对于之前有 Xamarin.Forms 经验的人来说，会记得 **Shell** 作为一种方便的应用程序容器，通过提供定义应用程序关键组件的统一结构来简化应用程序开发。虽然微软没有直接提供
    .NET MAUI Shell 的 Visual Studio 模板，但我们可以有效地利用来自 Xamarin.Forms 的模板。为了在我们的应用程序中包含
    Shell，我们将重用 Xamarin.Forms 中找到的项目模板。此外，将 Xamarin.Forms Shell 模板迁移到 .NET MAUI 的过程将为将
    Xamarin.Forms 项目迁移到 .NET MAUI 提供宝贵的见解。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节将涵盖以下主题：
- en: Setting up a new .NET MAUI project
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置新的 .NET MAUI 项目
- en: App startup and lifecycle management
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序启动和生命周期管理
- en: Configuring resources
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置资源
- en: Creating a new Xamarin.Forms project with Shell support
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建具有 Shell 支持的新 Xamarin.Forms 项目
- en: Migrating this Xamarin.Forms project to .NET MAUI
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将此 Xamarin.Forms 项目迁移到 .NET MAUI
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To test and debug the source code in this chapter, you need Visual Studio 2022
    installed on either Windows or macOS. Please refer to the *Development environment
    setup* section in *Chapter 1*, *Getting Started with .NET MAUI*, for details.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试和调试本章节中的源代码，您需要在 Windows 或 macOS 上安装 Visual Studio 2022。请参阅 *第 1 章*，*开始使用
    .NET MAUI* 中的 *开发环境设置* 部分，获取详细信息。
- en: 'To check out the source code of this chapter, we can use the following Git
    command:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查本章节的源代码，我们可以使用以下 Git 命令：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Managing the source code in this book
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理本书中的源代码
- en: 'Since we will develop a password manager app incrementally in this book, the
    source code of each chapter is built on top of the previous chapters. To continuously
    improve our app, we will have separate branches for the source code of each chapter.
    If you want to clone the source code of all chapters in one command, you can clone
    it from the main branch. In the main branch, all the chapters are in separate
    folders. If you don’t want to use Git, you can also download the source code as
    a compressed file from the release area, as shown in the following screenshot
    (*Figure 2.1*):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将在本书中逐步开发密码管理应用程序，因此每个章节的源代码都是基于前一个章节构建的。为了持续改进我们的应用程序，我们将为每个章节的源代码设置单独的分支。如果您想使用一条命令克隆所有章节的源代码，您可以从主分支克隆。在主分支中，所有章节都在单独的文件夹中。如果您不想使用
    Git，您也可以从发布区域下载源代码的压缩文件，如图中所示（*图 2.1*）：
- en: '![Figure 2.1: Source code in GitHub](img/B21554_02_01.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.1：GitHub 中的源代码](img/B21554_02_01.png)'
- en: 'Figure 2.1: Source code in GitHub'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1：GitHub 中的源代码
- en: Since new .NET MAUI releases may be available from time to time, the Git tags
    and versions in the release area will be updated according to the new .NET MAUI
    releases and bug fixes.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于新的 .NET MAUI 版本可能会不时发布，因此发布区域中的 Git 标签和版本将根据新的 .NET MAUI 版本和错误修复进行更新。
- en: 'The source code of this book can be found in the following GitHub repository:
    [https://github.com/PacktPublishing/.NET-MAUI-Cross-Platform-Application-Development-Second-edition](https://github.com/PacktPublishing/.NET-MAUI-Cross-Platform-Application-Development-Second-edition).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的源代码可以在以下 GitHub 仓库中找到：[https://github.com/PacktPublishing/.NET-MAUI-Cross-Platform-Application-Development-Second-edition](https://github.com/PacktPublishing/.NET-MAUI-Cross-Platform-Application-Development-Second-edition)。
- en: There are three ways to download the source code from GitHub.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 从 GitHub 下载源代码有三种方法。
- en: Download the source code in a compressed file
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载压缩文件中的源代码
- en: 'The source code can be downloaded in the release area, or use the following
    URL: [https://github.com/PacktPublishing/.NET-MAUI-Cross-Platform-Application-Development-Second-edition/releases/tag/V1.0.0](https://github.com/PacktPublishing/.NET-MAUI-Cross-Platform-Application-Development-Second-edition/releases/tag/V1.0.0).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码可以在发布区域下载，或者使用以下URL：[https://github.com/PacktPublishing/.NET-MAUI-Cross-Platform-Application-Development-Second-edition/releases/tag/V1.0.0](https://github.com/PacktPublishing/.NET-MAUI-Cross-Platform-Application-Development-Second-edition/releases/tag/V1.0.0)。
- en: The release tag may be changed when a new release is available.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当有新版本发布时，发布标签可能会更改。
- en: Clone the source code per chapter
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按章节克隆源代码
- en: 'To check out the source code for a chapter, you can use the following command,
    for example:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查出章节的源代码，可以使用以下命令，例如：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'I use the following naming convention for branches: `[xxx]/chapter[yy]`, where
    `x` is the edition number and `y` is the chapter number, such as `2nd/chapter01`.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用以下命名约定为分支命名：`[xxx]/chapter[yy]`，其中`x`是版本号，`y`是章节号，例如`2nd/chapter01`。
- en: Clone the source code from the main branch
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从主分支克隆源代码
- en: 'To check out the source code of all chapters from the main branch, you can
    use the following command:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要从主分支检查出所有章节的源代码，可以使用以下命令：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Setting up a new .NET MAUI project
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置新的.NET MAUI项目
- en: In this chapter, we will create and configure a new .NET MAUI project, which
    will form the basis for further development of our password manager app. Given
    that the default .NET NAUI project template is a very simple one, we require a
    more robust project framework to establish the base project structure.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建和配置一个新的.NET MAUI项目，这将成为我们密码管理器应用程序进一步开发的基础。鉴于默认的.NET NAUI项目模板非常简单，我们需要一个更健壮的项目框架来建立基本的项目结构。
- en: Xamarin.Forms project templates provide suitable options. In particular, there
    is a template that incorporates the Shell and **Model-View-View Model** (**MVVM**)
    pattern setup. We’ll migrate this into our .NET MAUI project, which will also
    provide us with the opportunity to learn how to migrate a Xamarin.Forms project
    to .NET MAUI. Ultimately, we’ll create our very own Visual Studio project template.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.Forms项目模板提供了合适的选项。特别是，有一个模板集成了Shell和**模型-视图-视图模型**（**MVVM**）模式设置。我们将将其迁移到我们的.NET
    MAUI项目中，这也会给我们提供学习如何将Xamarin.Forms项目迁移到.NET MAUI的机会。最终，我们将创建我们自己的Visual Studio项目模板。
- en: To create a new .NET MAUI project, we can use Visual Studio or the command line.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的.NET MAUI项目，我们可以使用Visual Studio或命令行。
- en: Creating a new project using Visual Studio
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Visual Studio创建新项目
- en: 'To create a new .NET MAUI project, follow these steps:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的.NET MAUI项目，请按照以下步骤操作：
- en: Launch Visual Studio 2022 and select **Create a new project** on the startup
    screen. This will open the **Create a new project** wizard.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Visual Studio 2022，在启动屏幕上选择**创建新项目**。这将打开**创建新项目**向导。
- en: At the top of the screen, there is a search box. We can type `maui` in the search
    box, and .NET MAUI-related project templates will be shown (see *Figure 2.2*):![](img/B21554_02_02.png)
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在屏幕顶部有一个搜索框。我们可以在搜索框中输入`maui`，.NET MAUI相关的项目模板将会显示（见图*2.2*）：
- en: 'Figure 2.2: New project setup – Create a new project'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.2：新项目设置 – 创建新项目
- en: 'There are three templates for the .NET MAUI app or library:'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: .NET MAUI应用程序或库有三个模板：
- en: '**.NET MAUI App** – This is for a XAML-based .NET MAUI app.'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.NET MAUI应用程序** – 这是基于XAML的.NET MAUI应用程序。'
- en: '**.NET MAUI Blazor Hybrid App** – This template can be used to create a .NET
    MAUI Blazor app.'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.NET MAUI Blazor混合应用程序** – 此模板可用于创建.NET MAUI Blazor应用程序。'
- en: '**.NET MAUI Class Library** – This is the option for building a .NET MAUI class
    library. We can build shared components as a .NET MAUI class library when we develop
    a .NET MAUI app.'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.NET MAUI类库** – 这是构建.NET MAUI类库的选项。当我们开发.NET MAUI应用程序时，我们可以将共享组件作为.NET MAUI类库来构建。'
- en: 'Let’s select **.NET MAUI App** and click the **Next** button; it goes to the
    next step to configure our new project, as shown in *Figure 2.3*:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们选择**.NET MAUI应用程序**并点击**下一步**按钮；它进入下一步以配置我们的新项目，如图*2.3*所示：
- en: '![](img/B21554_02_03.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![img/B21554_02_03.png](img/B21554_02_03.png)'
- en: 'Figure 2.3: New project setup – Configure your new project'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.3：新项目设置 – 配置您的项目
- en: 'Enter the project name and solution name as `PassXYZ.Vault` and click the **Next**
    button. After the project is created, the project structure will look like *Figure
    2.4* and will display the following:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入项目名称和解决方案名称为`PassXYZ.Vault`并点击**下一步**按钮。项目创建后，项目结构将类似于*图2.4*，并将显示以下内容：
- en: '*Common files* – In a new project, three files are included in the template
    – `App.xaml`, `MainPage.xaml`, and `MauiProgram.cs`. This is the group of files
    that we will work on throughout the book. They are platform agnostic. Both business
    logic and UI can be developed here and shared on all platforms.'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通用文件* – 在一个新项目中，模板中包含三个文件 – `App.xaml`、`MainPage.xaml` 和 `MauiProgram.cs`。这是我们将在整本书中工作的文件组。它们是平台无关的。业务逻辑和
    UI 都可以在这里开发并在所有平台上共享。'
- en: '*Platform-specific files* – There are five subfolders (`Android`, `iOS`, `MacCatalyst`,
    `Windows`, and `Tizen`) in the `Platforms` folder. Since we won’t support Tizen,
    we can remove it from our project.'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*平台特定文件* – 在 `Platforms` 文件夹中有五个子文件夹（`Android`、`iOS`、`MacCatalyst`、`Windows`
    和 `Tizen`）。由于我们不会支持 Tizen，我们可以将其从我们的项目中删除。'
- en: '*Resources* – A variety of resources ranging from images, fonts, splash screens,
    styles, and raw assets are in the `Resources` folder. These resources can be used
    in all supported platforms.'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*资源* – `Resources` 文件夹中包含各种资源，从图像、字体、启动画面、样式和原始资产等。这些资源可以在所有支持的平台中使用。'
- en: '![A screenshot of a computer  Description automatically generated](img/B21554_02_04.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![计算机屏幕截图 自动生成的描述](img/B21554_02_04.png)'
- en: 'Figure 2.4: .NET MAUI project structure'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4：.NET MAUI 项目结构
- en: In the .NET MAUI project, there is only one project structure. Later, we will
    see that the development of Xamarin.Forms involves multiple projects.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在 .NET MAUI 项目中，只有一个项目结构。稍后，我们将看到 Xamarin.Forms 的开发涉及多个项目。
- en: Creating a new project using the dotnet command
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 dotnet 命令创建新项目
- en: Although .NET MAUI was installed as part of the Visual Studio installation,
    it can also be installed independently using the command line. This flexibility
    allows the use of alternative development tools, such as Visual Studio Code, instead
    of Visual Studio. To create and build a .NET MAUI application from the command
    line, we can use the `dotnet` command.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然. NET MAUI 作为 Visual Studio 安装的一部分被安装，但它也可以使用命令行独立安装。这种灵活性允许使用替代的开发工具，例如 Visual
    Studio Code，而不是 Visual Studio。要从命令行创建和构建 .NET MAUI 应用程序，我们可以使用 `dotnet` 命令。
- en: 'To find out which project templates have been installed, we can refer to the
    following command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要找出已安装哪些项目模板，我们可以参考以下命令：
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To create a new project using the command line, we can execute the following
    command:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用命令行创建新项目，我们可以执行以下命令：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Once the new .NET MAUI project has been created, we can build and test it. Before
    we move on to that, let’s spend some time looking at the .NET MAUI app startup
    code and lifecycle.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建新的 .NET MAUI 项目后，我们可以构建和测试它。在我们继续之前，让我们花些时间看看 .NET MAUI 应用程序启动代码和生命周期。
- en: App startup and lifecycle
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序启动和生命周期
- en: Lifecycle management in .NET MAUI is crucial for efficient resource management,
    ensuring smooth and consistent user experiences, secure application handling,
    and understanding and troubleshooting app behavior. It allows the application
    to conserve resources, appropriately saving and restoring the application’s state
    when it’s in the background or foreground. It provides opportunities to perform
    certain actions when an app goes to the background, such as saving data or pausing
    activities. Moreover, it provides enhanced security by managing sensitive data
    when apps switch to and from the active state. Hence, understanding the application
    lifecycle is crucial for crafting robust, efficient, and user-friendly .NET MAUI
    applications.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI 中的生命周期管理对于高效资源管理至关重要，确保用户体验的流畅和一致性，安全地处理应用程序，以及理解和调试应用程序行为。它允许应用程序在后台或前台时保存和恢复应用程序的状态，从而节约资源。当应用程序进入后台时，它提供了执行某些操作的机会，例如保存数据或暂停活动。此外，当应用程序在活动状态之间切换时，它通过管理敏感数据提供了增强的安全性。因此，理解应用程序生命周期对于构建健壮、高效且用户友好的
    .NET MAUI 应用程序至关重要。
- en: 'In .NET MAUI projects, app startup and lifecycle management are handled in
    the following two files:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在 .NET MAUI 项目中，应用程序启动和生命周期管理由以下两个文件处理：
- en: '`MauiProgram.cs`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MauiProgram.cs`'
- en: '`App.xaml/App.xaml.cs`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`App.xaml/App.xaml.cs`'
- en: '.NET Generic Host is used for app startup and configuration. When the application
    starts, a .NET Generic Host object is created to encapsulate an app’s resources
    and lifetime functionality, such as the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 通用宿主用于应用程序启动和配置。当应用程序启动时，创建一个 .NET 通用宿主对象来封装应用程序的资源及其生命周期功能，如下所示：
- en: '**Dependency injection** (**DI**)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖注入**（**DI**）'
- en: Logging
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志记录
- en: Configuration
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置
- en: Lifecycle management
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生命周期管理
- en: This enables apps to be initialized in a single location and provides the ability
    to configure fonts, services, and third-party libraries. This chapter will explore
    everything except DI, which will be introduced in *Chapter 6*, *Software Design
    with Dependency Injection*.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得应用程序可以在单个位置进行初始化，并提供了配置字体、服务和第三方库的能力。本章将探讨除依赖注入（DI）之外的所有内容，依赖注入将在第 6 章“使用依赖注入的软件设计”中介绍。
- en: '**.NET Generic Host**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**.NET 通用宿主**'
- en: If you are a Xamarin developer, you may not be familiar with .NET Generic Host.
    Introduced in .NET Core, .NET Generic Host is a unified hosting model for building
    cross-platform .NET applications. It provides a consistent way to configure, run,
    and manage services and background tasks across various types of .NET applications,
    such as console apps, microservices, and web applications. In .NET MAUI, the same
    pattern is borrowed and used for startup and configuration management.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一个 Xamarin 开发者，你可能不熟悉 .NET 通用宿主。.NET 通用宿主是在 .NET Core 中引入的，它是一个用于构建跨平台 .NET
    应用程序的统一托管模型。它提供了一种一致的方式来配置、运行和管理各种类型的 .NET 应用程序（如控制台应用程序、微服务和 Web 应用程序）中的服务和后台任务。在
    .NET MAUI 中，采用了相同的模式，用于启动和配置管理。
- en: 'Let’s examine the app start up code in *Listing 2.1*:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查 *清单 2.1* 中的应用程序启动代码：
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 2.1: `MauiProgram.cs` ([https://epa.ms/MauiProgram2-1](https://epa.ms/MauiProgram2-1))'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '清单 2.1: `MauiProgram.cs` ([https://epa.ms/MauiProgram2-1](https://epa.ms/MauiProgram2-1))'
- en: 'We can see the following in *Listing 2.1*:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *清单 2.1* 中，我们可以看到以下内容：
- en: '**(1)** In each platform, the entry point is in platform-specific code. The
    entry point calls the `CreateMauiApp` function, which is a method of the `MauiProgram`
    static class.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**(1)** 在每个平台上，入口点位于特定平台的代码中。入口点调用 `CreateMauiApp` 函数，这是 `MauiProgram` 静态类的一个方法。'
- en: '**(2)** Inside `CreateMauiApp`, the code calls the `CreateBuilder` function,
    which is a method of the `MauiApp` static class, and returns a `MauiAppBuilder`
    instance, which provides a .NET Generic Host interface. We can use this instance
    of the .NET Generic Host interface to configure resources or services used in
    our app.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**(2)** 在 `CreateMauiApp` 内部，代码调用 `CreateBuilder` 函数，这是 `MauiApp` 静态类的一个方法，并返回一个
    `MauiAppBuilder` 实例，它提供了一个 .NET 通用宿主接口。我们可以使用这个 .NET 通用宿主接口的实例来配置我们应用程序中使用的资源或服务。'
- en: '**(3)** The return value of `CreateMauiApp` is a `MauiApp` instance, which
    is the entry point of our app.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**(3)** `CreateMauiApp` 函数的返回值是一个 `MauiApp` 实例，它是我们应用程序的入口点。'
- en: '**(4)** The `App` class referenced in the `UseMauiApp` method is the root object
    of our application. Let’s review the definition of the `App` class in *Listing
    2.2*:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**(4)** 在 `UseMauiApp` 方法中引用的 `App` 类是我们应用程序的根对象。让我们回顾一下 *清单 2.2* 中 `App` 类的定义：'
- en: '[PRE6]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Listing 2.2: `App.xaml.cs` ([https://epa.ms/App2-2](https://epa.ms/App2-2))'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '清单 2.2: `App.xaml.cs` ([https://epa.ms/App2-2](https://epa.ms/App2-2))'
- en: 'In *Listing 2.2*, we can see the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *清单 2.2* 中，我们可以看到以下内容：
- en: '**(1)** The `App` class is derived from the `Application` class, and the `Application`
    class is defined in the `Microsoft.Maui.Controls` namespace.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**(1)** `App` 类是从 `Application` 类派生的，而 `Application` 类是在 `Microsoft.Maui.Controls`
    命名空间中定义的。'
- en: '**(2)** `AppShell` is an instance of Shell, and it defines the UI of the initial
    page of the app.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**(2)** `AppShell` 是 Shell 的一个实例，它定义了应用程序初始页的 UI。'
- en: '`Application` creates an instance of the `Window` class within which the application
    will run and views will be displayed. In the `App` class, we can overwrite the
    `CreateWindow` method to manage the lifecycle, which we will see soon.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`Application` 类在应用程序运行和视图显示的 `Window` 类中创建一个实例。在 `App` 类中，我们可以重写 `CreateWindow`
    方法来管理生命周期，我们很快就会看到。'
- en: Lifecycle management
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生命周期管理
- en: '.NET MAUI app generally operates in four execution states:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI 应用程序通常在四个执行状态中操作：
- en: Running
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行
- en: Not running
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未运行
- en: Deactivated
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 停止
- en: Stopped
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已停止
- en: 'During the state transitions, the predefined lifecycle events will be triggered.
    Six cross-platform lifecycle events are defined, as we can see in *Table 2.1*:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在状态转换期间，将触发预定义的生命周期事件。定义了六个跨平台的生命周期事件，正如我们可以在 *表 2.1* 中看到的那样：
- en: '| **Event** | **Description** | **State transition** | **Override method**
    |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| **事件** | **描述** | **状态转换** | **重写方法** |'
- en: '| Created | This event is raised after the native window has been created.
    | Not running -> Running | `OnCreated` |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| 创建 | 此事件在原生窗口创建后触发。 | 未运行 -> 运行 | `OnCreated` |'
- en: '| Activated | This event is raised when the window has been activated and is
    or will become the focused window. | Not running -> Running | `OnActivated` |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| 激活 | 当窗口被激活并且是或将成为焦点窗口时，此事件被触发。 | 未运行 -> 运行 | `OnActivated` |'
- en: '| Deactivated | This event is raised when the window is no longer the focused
    window. However, the window might still be visible. | Running -> Deactivated |
    `OnDeactivated` |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| 非活动 | 当窗口不再是焦点窗口时，此事件被触发。然而，窗口可能仍然可见。 | 运行 -> 非活动 | `OnDeactivated` |'
- en: '| Stopped | This event is raised when the window is no longer visible. | Deactivated
    -> Stopped | `OnStopped` |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| 停止 | 当窗口不再可见时，此事件被触发。 | 非活动 -> 停止 | `OnStopped` |'
- en: '| Resumed | This event is raised when an app resumes after being stopped. |
    Stopped -> Running | `OnResumed` |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| 恢复 | 当应用在停止后恢复时，此事件被触发。 | 停止 -> 运行 | `OnResumed` |'
- en: '| Destroying | This event is raised when the native window is destroyed and
    deallocated. | Stopped -> Not running | `OnDestroying` |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| 销毁 | 当原生窗口被销毁和释放时，此事件被触发。 | 停止 -> 未运行 | `OnDestroying` |'
- en: 'Table 2.1: Lifecycle events and override methods'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2.1：生命周期事件和覆盖方法
- en: 'Please refer to the following Microsoft document to find out more about lifecycle
    events: [https://learn.microsoft.com/en-us/dotnet/maui/fundamentals/app-lifecycle](https://learn.microsoft.com/en-us/dotnet/maui/fundamentals/app-lifecycle).'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考以下 Microsoft 文档以了解更多有关生命周期事件的信息：[https://learn.microsoft.com/en-us/dotnet/maui/fundamentals/app-lifecycle](https://learn.microsoft.com/en-us/dotnet/maui/fundamentals/app-lifecycle)。
- en: These lifecycle events are associated with the instance of the `Window` class
    created by `Application`. For each event, a corresponding override method is defined.
    We can either subscribe to the lifecycle events or create override functions to
    handle lifecycle management.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这些生命周期事件与 `Application` 创建的 `Window` 类的实例相关联。对于每个事件，都定义了一个相应的覆盖方法。我们可以订阅生命周期事件或创建覆盖函数来处理生命周期管理。
- en: Subscribing to the Window lifecycle events
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 订阅窗口生命周期事件
- en: 'To subscribe to the lifecycle events, as we can see in *Listing 2.3*, at **(1)**,
    we can override the `CreateWindow` method in the `App` class to create a `Window`
    instance on which we can subscribe to events:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要订阅生命周期事件，如 *列表 2.3* 中所示，在 **(1)** 处，我们可以在 `App` 类中覆盖 `CreateWindow` 方法来创建一个
    `Window` 实例，我们可以在其上订阅事件：
- en: '[PRE7]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Listing 2.3: `App.xaml.cs` with lifecycle events ([https://epa.ms/App2-3](https://epa.ms/App2-3))'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.3：`App.xaml.cs` 与生命周期事件 ([https://epa.ms/App2-3](https://epa.ms/App2-3))
- en: In *Listing 2.3*, we revised the code of `App.xaml.cs`, and we subscribed to
    all six events so that we can run a test and observe the state in the Visual Studio
    output window. As we can see in the following debug output, we run and test our
    app in the Windows environment.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *列表 2.3* 中，我们修改了 `App.xaml.cs` 的代码，并订阅了所有六个事件，以便我们可以在 Visual Studio 输出窗口中运行测试并观察状态。如下面的调试输出所示，我们在
    Windows 环境中运行并测试了我们的应用。
- en: 'After we launch our app, we can see that `Created` and `Activated` events are
    fired. Then, we minimize our app and we can see that `Deactivated` and `Stopped`
    events are fired. When we resume our app again, `Resumed` and `Activated` events
    are fired. Finally, we close our app, and a `Destroying` event is fired:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们启动我们的应用后，我们可以看到 `Created` 和 `Activated` 事件被触发。然后，我们最小化我们的应用，我们可以看到 `Deactivated`
    和 `Stopped` 事件被触发。当我们再次恢复应用时，`Resumed` 和 `Activated` 事件被触发。最后，我们关闭我们的应用，并触发一个
    `Destroying` 事件：
- en: '[PRE8]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Consuming the lifecycle override methods
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 消费生命周期覆盖方法
- en: 'Alternatively, we can consume the lifecycle override methods. We can create
    our own derived class from the `Window` class:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以消费生命周期覆盖方法。我们可以从 `Window` 类创建自己的派生类：
- en: In Visual Studio, right-click on the project node and select **Add** and then
    **New Item…**.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中，右键单击项目节点，然后选择 **添加** 并然后 **新建项…**。
- en: 'In the **Add New Item** window, select **C# Class** from the template and name
    it `PxWindow`. We created a new class, as shown next in *Listing 2.4*:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **添加新项** 窗口中，从模板中选择 **C# 类** 并将其命名为 `PxWindow`。我们创建了一个新类，如下所示在 *列表 2.4*：
- en: '[PRE9]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Listing 2.4: `PxWindow.cs` ([https://epa.ms/PxWindow2-4](https://epa.ms/PxWindow2-4))'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.4：`PxWindow.cs` ([https://epa.ms/PxWindow2-4](https://epa.ms/PxWindow2-4))
- en: In *Listing 2.4*, we created a new class, `PxWindow`. In this class, we define
    our lifecycle override methods. We can use this new class in `App.xaml.cs`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *列表 2.4* 中，我们创建了一个新的类，`PxWindow`。在这个类中，我们定义了我们的生命周期覆盖方法。我们可以在 `App.xaml.cs`
    中使用这个新类。
- en: 'Next, let’s look at the modified version of `App.xaml.cs` (*Listing 2.5*):'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看 `App.xaml.cs` 的修改版本 (*列表 2.5*)：
- en: '[PRE10]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*Listing 2.5: Modified App.xaml.cs with PxWindow (*[https://epa.ms/App2-5](https://epa.ms/App2-5)*)*'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 2.5：修改后的 App.xaml.cs 与 PxWindow (*[https://epa.ms/App2-5](https://epa.ms/App2-5)*)*'
- en: 'When we repeat the previous test steps, we can see the following output in
    the Visual Studio output window. The output looks very similar to the previous
    one. Basically, both approaches have the same effect on lifecycle management:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们重复之前的测试步骤时，我们可以在 Visual Studio 输出窗口中看到以下输出。输出看起来非常类似于之前的一个。基本上，这两种方法对生命周期管理的影响是相同的：
- en: '[PRE11]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We have learned about app lifecycle management in .NET MAUI through the `Window`
    class. We can either subscribe to lifecycle events or override the overridable
    methods to manage the app lifecycle. *Table 2.1* shows the comparison of these
    two approaches.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过 `Window` 类学习了 .NET MAUI 的应用生命周期管理。我们可以订阅生命周期事件或覆盖可覆盖的方法来管理应用生命周期。*表 2.1*
    展示了这两种方法的比较。
- en: 'If you were a Xamarin.Forms developer, you might know that there were lifecycle
    methods defined in the `Application` class as well. In .NET MAUI, the following
    virtual methods are still available:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一名 Xamarin.Forms 开发者，你可能知道在 `Application` 类中定义了生命周期方法。在 .NET MAUI 中，以下虚拟方法仍然可用：
- en: '`OnStart` – Called when the application starts'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnStart` – 当应用启动时调用'
- en: '`OnSleep` – Called each time the application goes to the background'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnSleep` – 每次应用进入后台时调用'
- en: '`OnResume` – Called when the application is resumed, after being sent to the
    background'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnResume` – 当应用从后台恢复时调用'
- en: 'To observe the behavior of these methods, we can override the following methods
    in our `App` class, as shown in *Listing 2.6*:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要观察这些方法的行为，我们可以在 `App` 类中覆盖以下方法，如 *列表 2.6* 所示：
- en: '[PRE12]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Listing 2.6: `App.xaml.cs` ([https://epa.ms/App2-6](https://epa.ms/App2-6))'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '列表 2.6: `App.xaml.cs` ([https://epa.ms/App2-6](https://epa.ms/App2-6))'
- en: 'When we test the preceding code on Windows, we can see the following debug
    message in the Visual Studio Output window:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在 Windows 上测试前面的代码时，我们可以在 Visual Studio 输出窗口中看到以下调试信息：
- en: '[PRE13]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As demonstrated in *Listing 2.6*, specific methods will be activated according
    to the varying statuses of the application.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如 *列表 2.6* 所示，根据应用的不同状态，将激活特定的方法。
- en: '**(1)** When the app starts, the `OnStart` method is invoked.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**(1)** 当应用启动时，`OnStart` 方法会被调用。'
- en: '**(2)** When we minimize our app, the `OnSleep` method is invoked.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**(2)** 当我们最小化应用时，`OnSleep` 方法会被调用。'
- en: '**(3)** When we resume the app from the taskbar, the `OnResume` method is invoked.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**(3)** 当我们从任务栏恢复应用时，`OnResume` 方法会被调用。'
- en: We’ve learned about the lifecycle states of a .NET MAUI app and also learned
    that we can either subscribe to lifecycle events or use override methods to manage
    the app’s lifecycle. Let’s now focus on the configuration of resources during
    the app’s startup.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了 .NET MAUI 应用的生命周期状态，并且了解到我们可以订阅生命周期事件或使用覆盖方法来管理应用的生命周期。现在让我们关注应用启动时的资源配置。
- en: Configuring the resources
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置资源
- en: Resource management is one of the major differences between .NET MAUI and Xamarin.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 资源管理是 .NET MAUI 和 Xamarin 之间的主要区别之一。
- en: Cross-platform development presents unique challenges as each platform has its
    own method for managing resources. This diversity can pose significant management
    tasks for development teams. For instance, we must incorporate multiple image
    sizes to accommodate various resolutions.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 跨平台开发具有独特的挑战，因为每个平台都有自己管理资源的方法。这种多样性可以为开发团队带来重大的管理任务。例如，我们必须包含多种图像大小以适应不同的分辨率。
- en: In Xamarin, most of the resources are managed separately in platform-specific
    projects. If we want to add an image, we must add the image files with different
    sizes to all platform projects separately.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Xamarin 中，大多数资源都在平台特定的项目中单独管理。如果我们想添加一个图像，我们必须分别将不同大小的图像文件添加到所有平台项目中。
- en: .NET MAUI provides an elegant solution to manage resources effectively. The
    design goal of one single project for all supported platforms helps to manage
    resources in one place.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI 提供了一种优雅的解决方案来有效地管理资源。一个单一项目支持所有平台的设计目标有助于在一个地方管理资源。
- en: 'In .NET MAUI, resource files can be tagged into different categories using
    a build action based on the role they play in the project, as we can see in *Table
    2.2*:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在 .NET MAUI 中，可以根据资源在项目中所起的作用，使用基于构建操作的标签将资源文件分类到不同的类别中，正如我们在 *表 2.2* 中所看到的：
- en: '| **Resource Type** | **Build Action** | **Example** |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| **资源类型** | **构建操作** | **示例** |'
- en: '| Images | `MauiImage` | `dotnet_bot.svg` |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| 图像 | `MauiImage` | `dotnet_bot.svg` |'
- en: '| Icons | `MauiIcon` | `appicon.svg` |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| 图标 | `MauiIcon` | `appicon.svg` |'
- en: '| Splash screen image | `MauiSplashScreen` | `appiconfg.svg` |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| 启动画面图像 | `MauiSplashScreen` | `appiconfg.svg` |'
- en: '| Fonts | `MauiFont` | `OpenSans-Regular.ttf` |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| 字体 | `MauiFont` | `OpenSans-Regular.ttf` |'
- en: '| Style definition using external CSS | `MauiCss` | N/A |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| 使用外部 CSS 定义样式 | `MauiCss` | N/A |'
- en: '| Raw assets | `MauiAsset` | N/A |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| 原始资产 | `MauiAsset` | N/A |'
- en: '| XAML UI definition | `MauiXaml` | N/A |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| XAML UI 定义 | `MauiXaml` | N/A |'
- en: 'Table 2.2: .NET MAUI resource types'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2.2：.NET MAUI 资源类型
- en: The last three are not used frequently, so we will focus on examples using the
    more common resource types.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 最后三个使用频率不高，因此我们将重点关注使用更常见资源类型的示例。
- en: 'After adding a resource file, the build action can be set in the **Properties**
    window in Visual Studio. If we look at the project file, we can see the following
    `ItemGroup`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 添加资源文件后，可以在 Visual Studio 的**属性**窗口中设置构建操作。如果我们查看项目文件，我们可以看到以下`ItemGroup`：
- en: '[PRE14]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If we put resources according to the convention of default folder setup, the
    resources will be treated as the respective category and the build action will
    be set automatically.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们按照默认文件夹设置的约定放置资源，资源将被视为相应的类别，并且构建操作将自动设置。
- en: App icon
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用图标
- en: In our app setup, as we can see in the `ItemGroup` above, we have an SVG image
    file, `appicon.svg`, in the `Resources\AppIcon` folder, with the build action
    set to `MauiIcon`. At build time, this file is used to generate icon images on
    the target platform for various purposes, such as on the device or in the app
    store.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用设置中，如上`ItemGroup`所示，我们在`Resources\AppIcon`文件夹中有一个 SVG 图像文件`appicon.svg`，其构建操作设置为`MauiIcon`。在构建时，此文件用于为目标平台上的各种目的生成图标图像，例如在设备上或在应用商店中。
- en: 'It is possible to move this SVG file together with other images to the `Resources\Images`
    folder. In that case, we should use the following entry in the project file:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将此 SVG 文件与其他图像一起移动到`Resources\Images`文件夹中。在这种情况下，我们应该在项目文件中使用以下条目：
- en: '[PRE15]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The downside is that the build action treats the files in the same folder inconsistently
    – `appicon.svg` resides in the **Resources\AppIcon** folder instead of **Resources\Images**
    in our project.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 缺点是构建操作对同一文件夹中的文件处理不一致 - `appicon.svg`位于我们的项目中的`Resources\AppIcon`文件夹，而不是`Resources\Images`。
- en: Splash screen
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动屏幕
- en: 'The configuration of the splash screen is similar to configuration of the app
    icon. We have an SVG image file, `splash.svg`, in the `Resources/Splash` folder,
    with the build action set to `MauiSplashScreen`:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 启动屏幕的配置与应用图标的配置类似。我们在`Resources/Splash`文件夹中有一个 SVG 图像文件`splash.svg`，其构建操作设置为`MauiSplashScreen`：
- en: '[PRE16]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Resources like app icons, splash screens, and other images are simple and can
    be directly configured in the project file.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如应用图标、启动屏幕和其他图像等资源简单，可以直接在项目文件中进行配置。
- en: Some frequently used resources, such as custom fonts and services, may have
    to be configured in code, or in both code and project files. We will discuss the
    configuration of custom fonts in the next section and leave DI until *Chapter
    6*, *Software Design with Dependency Injection*.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常用资源，如自定义字体和服务，可能需要在代码中或同时在代码和项目文件中进行配置。我们将在下一节讨论自定义字体的配置，并将依赖注入留到*第 6 章*，*使用依赖注入的软件设计*。
- en: Setting custom font icons
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置自定义字体图标
- en: Custom fonts can be managed as part of resources. Using custom font icons, we
    can dramatically reduce the number of image resources in our app. In a mobile
    app, the visual representation is generally delivered through images. We use images
    in all kinds of navigation activities. In Android and iOS development, we need
    to manage image resources for different screen resolutions.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义字体可以作为资源的一部分进行管理。使用自定义字体图标，我们可以显著减少我们应用中的图像资源数量。在移动应用中，视觉表示通常通过图像来传递。我们在各种导航活动中使用图像。在
    Android 和 iOS 开发中，我们需要管理不同屏幕分辨率的图像资源。
- en: There are many advantages of using custom fonts as icons instead of images.
    Font icons are vector icons instead of bitmap icons. Vector icons are scalable,
    meaning you don’t need different images with different sizes and different resolutions
    based on the device. Icon font scaling can be handled through the `FontSize` property.
    The font file size is also much smaller than the images. A font file with hundreds
    of icons in it can be only a few KB in size.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 使用自定义字体作为图标而不是图像有许多优点。字体图标是矢量图标而不是位图图标。矢量图标是可缩放的，这意味着您不需要根据设备的不同大小和分辨率使用不同的图像。图标字体缩放可以通过`FontSize`属性来处理。字体文件的大小也比图像小得多。包含数百个图标的字体文件可能只有几KB大小。
- en: The icon color can be changed with the `TextColor` property. With static images,
    we are not able to change the icon color.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图标的颜色可以通过`TextColor`属性进行更改。对于静态图像，我们无法更改图标颜色。
- en: Finally, font files can be managed in the shared project, so we don’t have to
    manage fonts separately on different platforms.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，字体文件可以在共享项目中管理，因此我们不需要在不同的平台上分别管理字体。
- en: In both Xamarin.Forms and .NET MAUI, we can use a custom font (icon font) instead
    of images for application icons.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在Xamarin.Forms和.NET MAUI中，我们可以使用自定义字体（图标字体）而不是图像作为应用程序图标。
- en: 'In .NET MAUI, controls that display text typically have definable properties
    for configuring font settings. The properties that can be configured include:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET MAUI中，显示文本的控件通常具有可定义的属性来配置字体设置。可以配置的属性包括：
- en: '`FontAttributes`, which is an enumeration with three members: `None`, `Bold`,
    and `Italic`. The default value of this property is `None`.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FontAttributes`，这是一个有三个成员的枚举：`None`、`Bold`和`Italic`。此属性的默认值为`None`。'
- en: '`FontSize`, which is the property of the font size, and the type is `double`.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FontSize`，这是字体大小的属性，类型为`double`。'
- en: '`FontFamily`, which is the property of the font family, and the type is `string`.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FontFamily`，这是字体家族的属性，类型为`string`。'
- en: Custom font setup
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义字体设置
- en: The setup of custom fonts has two stages – adding font files and configuring
    them. Custom font files can be added to a shared project in both .NET MAUI and
    Xamarin.Forms. However, the configuration process differs between them. In Xamarin.Forms,
    the configuration is handled through `AssemblyInfo.cs`. In .NET MAUI, this is
    managed via .NET Generic Host.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义字体的设置分为两个阶段——添加字体文件和配置它们。在.NET MAUI和Xamarin.Forms中，都可以将自定义字体文件添加到共享项目中。然而，它们的配置过程有所不同。在Xamarin.Forms中，配置是通过`AssemblyInfo.cs`处理的。在.NET
    MAUI中，这是通过.NET通用宿主管理的。
- en: 'In Xamarin.Forms, the process for accomplishing this is as follows:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在Xamarin.Forms中，完成此操作的过程如下：
- en: 'Add the font file to the Xamarin.Forms shared project as an embedded resource
    (build action: `EmbeddedResource`).'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将字体文件添加到Xamarin.Forms共享项目作为嵌入资源（构建操作：`EmbeddedResource`）。
- en: Register the font file with the assembly in a file such as `AssemblyInfo.cs`
    using the `ExportFont` attribute. An optional alias can also be specified.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ExportFont`属性在`AssemblyInfo.cs`等文件中注册字体文件。也可以指定一个可选的别名。
- en: 'In .NET MAUI, the process is as follows:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET MAUI中，过程如下：
- en: 'Add the font files to the `Resources`->`Fonts` folder. The build action is
    set to **MauiFont**, as we can see in *Figure 2.5*:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将字体文件添加到`Resources`->`Fonts`文件夹。构建操作设置为**MauiFont**，正如我们在*图2.5*中看到的那样：
- en: '![](img/B21554_02_05.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21554_02_05.png)'
- en: 'Figure 2.5: .NET MAUI Resources'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.5：.NET MAUI资源
- en: Instead of registering the font file with the assembly, .NET MAUI initializes
    most of the resources through .NET Generic Host in the startup code, as shown
    in *Listing 2.7* at **(1)**. Font files are added using the `ConfigureFonts` method,
    which is an extension method of the `MauiAppBuilder` class.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代替在程序集注册字体文件，.NET MAUI通过启动代码中的.NET通用宿主初始化大部分资源，正如在*列表2.7*的**（1**）处所示的*图2.7*。字体文件通过`ConfigureFonts`方法添加，这是`MauiAppBuilder`类的一个扩展方法。
- en: 'In our project, we use the Font Awesome icon library from the following open-source
    project: [https://github.com/FortAwesome/Font-Awesome](https://github.com/FortAwesome/Font-Awesome).'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目中，我们使用以下开源项目中的Font Awesome图标库：[https://github.com/FortAwesome/Font-Awesome](https://github.com/FortAwesome/Font-Awesome)。
- en: The `fa-brands-400.ttf`, `fa-regular-400.ttf`, and `fa-solid-900.ttf` font files
    can be downloaded from the preceding website.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从前面的网站下载`fa-brands-400.ttf`、`fa-regular-400.ttf`和`fa-solid-900.ttf`字体文件。
- en: 'Let’s review the source code in *Listing 2.7* and see how to add these fonts
    to the app configuration:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾*列表2.7*中的源代码，看看如何将这些字体添加到应用程序配置中：
- en: '[PRE17]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Listing 2.7: `MauiProgram.cs` ([https://epa.ms/MauiProgram2-7](https://epa.ms/MauiProgram2-7))'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 列表2.7：`MauiProgram.cs` ([https://epa.ms/MauiProgram2-7](https://epa.ms/MauiProgram2-7))
- en: In the above code, we can add fonts by calling the `ConfigureFonts` **(1)**
    method on the `MauiAppBuilder` object. To pass arguments to `ConfigureFonts`,
    we call the extension method `AddFont` of interface `IFontCollection` to add a
    font.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们可以通过在`MauiAppBuilder`对象上调用`ConfigureFonts` **（1**）方法来添加字体。要向`ConfigureFonts`传递参数，我们调用接口`IFontCollection`的扩展方法`AddFont`来添加字体。
- en: Displaying font icons
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显示字体图标
- en: 'To display font icons in .NET MAUI applications, the font icon data can be
    defined in a `FontImageSource` object. This class, a derivative of the `ImageSource`
    class, comprises the properties shown in *Table 2.3*:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 要在.NET MAUI应用程序中显示字体图标，可以在`FontImageSource`对象中定义字体图标数据。这个类是`ImageSource`类的派生类，包含*表2.3*中显示的属性：
- en: '| **Property name** | **Type** | **Description** |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| **属性名称** | **类型** | **描述** |'
- en: '| `Glyph` | `string` | Unicode character value, such as `"&#xf007;"` |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| `Glyph` | `string` | Unicode 字符值，例如 `"&#xf007;"` |'
- en: '| `Size` | `double` | The size of the font in device-independent units |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| `Size` | `double` | 字体在设备无关单位中的大小 |'
- en: '| `FontFamily` | `string` | A string representing the font family, such as
    `FontAwesomeRegular` |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| `FontFamily` | `string` | 表示字体家族的字符串，例如 `FontAwesomeRegular` |'
- en: '| `Color` | `Color` | Font icon color in `Microsoft.Maui.Graphics.Color` |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| `Color` | `Color` | 字体图标颜色在 `Microsoft.Maui.Graphics.Color` |'
- en: 'Table 2.3: Properties of FontImageSource'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 表2.3：FontImageSource 属性
- en: 'The following XAML example has a single font icon being displayed in an `Image`
    view:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 XAML 示例显示了一个字体图标在 `Image` 视图中：
- en: '[PRE18]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If you are not familiar with the XAML syntax in the preceding example, don’t
    worry. We will cover it in the following chapter. In the preceding code, a `User`
    icon is displayed in an `Image` control, which is from the `FontAwesomeRegular`
    font family that we just added in the configuration. The `Glyph` of the `User`
    icon in the hexadecimal format is `\uf007`, presented here in C# escaped format.
    When we use it in XML, the escaped format we have to use is `&#xf007;`.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对前面示例中的 XAML 语法不熟悉，不要担心。我们将在下一章中介绍它。在前面代码中，一个 `User` 图标在 `Image` 控件中显示，该图标来自我们刚刚在配置中添加的
    `FontAwesomeRegular` 字体家族。`User` 图标的十六进制格式的 `Glyph` 是 `\uf007`，在这里以 C# 转义格式呈现。当我们将其用于
    XML 时，我们必须使用的转义格式是 `&#xf007;`。
- en: 'The equivalent C# code is as follows:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 相应的 C# 代码如下：
- en: '[PRE19]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In the preceding example, we referred to a font icon using a string representation
    of a hex number for its `Glyph`. However, this is not the most practical for real-world
    usage. It’s preferable to define font glyphs as C# string constants, allowing
    more meaningful references. Several approaches can be applied here. In our case,
    we make use of the open-source **IconFont2Code** tool to generate string constants.
    **IconFont2Code** can be found on GitHub using the following URL: [https://github.com/andreinitescu/IconFont2Code](https://github.com/andreinitescu/IconFont2Code).'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们使用十六进制数字的字符串表示形式来引用字体图标中的 `Glyph`。然而，这在实际应用中并不实用。最好将字体符号定义为 C# 字符串常量，以便进行更有意义的引用。这里可以应用几种方法。在我们的情况下，我们使用开源的
    **IconFont2Code** 工具来生成字符串常量。**IconFont2Code** 可以在 GitHub 上找到，使用以下 URL：[https://github.com/andreinitescu/IconFont2Code](https://github.com/andreinitescu/IconFont2Code)。
- en: 'In our project, we use Font Awesome. Through the **IconFont2Code** website,
    we can upload the font library from our project’s `Resources\Fonts` folder. **IconFont2Code**
    then generates the corresponding code for us, as demonstrated in the following
    example:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目中，我们使用 Font Awesome。通过 **IconFont2Code** 网站，我们可以从项目的 `Resources\Fonts`
    文件夹上传字体库。**IconFont2Code** 然后为我们生成相应的代码，如下例所示：
- en: '[PRE20]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We can save the generated C# files in the `Resources\Styles` folder. The preceding
    file can be found here: `Resources\Styles\FontAwesomeRegular.cs`.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将生成的 C# 文件保存在 `Resources\Styles` 文件夹中。前面的文件可以在这里找到：`Resources\Styles\FontAwesomeRegular.cs`。
- en: 'With the preceding `FontAwesomeRegular` static class, a font icon can be used
    just like the normal text in a XAML file:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的 `FontAwesomeRegular` 静态类中，字体图标可以像 XAML 文件中的普通文本一样使用：
- en: '[PRE21]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In the preceding code, we have added a circle plus icon to the `Button` control,
    which appears before the text `"Click me"`. In order to reference the icon name
    in the generated C# class, we introduce an `app` namespace, as defined here:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们向 `Button` 控件添加了一个圆形加号图标，该图标出现在文本 `"Click me"` 之前。为了在生成的 C# 类中引用图标名称，我们引入了一个
    `app` 命名空间，如下所示：
- en: '[PRE22]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: So far, we have created our project and configured the resources that we need.
    It’s time to build and test our app.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经创建了我们的项目并配置了我们需要的资源。现在是时候构建和测试我们的应用程序了。
- en: Building and debugging
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建和调试
- en: As we mentioned in *Chapter 1*, *Getting Started with .NET MAUI*, we cannot
    build and test every target using a single platform. Please refer to *Table 1.8*
    for the available build targets on Windows and macOS platforms. For the sake of
    simplicity, we will build and test targets Windows and Android on Windows. For
    iOS and macOS builds, we will do it on the macOS platform.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在 *第1章* 中提到的，*开始使用 .NET MAUI*，我们不能使用单个平台构建和测试每个目标。请参阅 *表1.8* 了解 Windows 和
    macOS 平台上的可用构建目标。为了简化，我们将在 Windows 上构建和测试 Windows 和 Android 的目标。对于 iOS 和 macOS
    构建，我们将在 macOS 平台上进行。
- en: Once we’ve set things up, we can start building and debugging our application.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们设置好一切，我们就可以开始构建和调试我们的应用程序。
- en: 'Let’s begin with building and testing on the Windows platform. We can choose
    the framework that we want to run or debug, depending on our needs, as depicted
    in *Figure 2.6*:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从 Windows 平台上的构建和测试开始。我们可以根据需要选择要运行或调试的框架，如图 *图 2.6* 所示：
- en: '![](img/B21554_02_06.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21554_02_06.png)'
- en: 'Figure 2.6: Building and debugging'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.6：构建和调试
- en: Windows
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows
- en: 'We can run or debug a Windows build on a local machine by choosing **net8.0-windows10.0.19041.0**
    as the framework. However, to accomplish this, we must first enable Developer
    Mode on Windows, if it’s not yet been activated. Please refer to *Figure 2.7*
    for guidance on enabling Developer Mode on Windows 10 or 11:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过选择**net8.0-windows10.0.19041.0**作为框架，在本地机器上运行或调试 Windows 构建。但是，为了完成此操作，我们必须首先在
    Windows 上启用开发者模式，如果尚未激活的话。请参阅 *图 2.7* 以获取在 Windows 10 或 11 上启用开发者模式的指导：
- en: Open the **Start**menu.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**开始**菜单。
- en: Search for **Developer settings** and select it.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索**开发者设置**并选择它。
- en: Turn on **Developer Mode**.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**开发者模式**。
- en: If you receive a warning message about Developer Mode, read it, and select **Yes**.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果收到有关开发者模式的警告消息，请阅读它，并选择**是**。
- en: '![Figure 2.7: Developer Mode](img/B21554_02_07.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.7：开发者模式](img/B21554_02_07.png)'
- en: 'Figure 2.7: Developer Mode'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7：开发者模式
- en: Android
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Android
- en: 'For Android builds, testing can be done using an Android emulator or device.
    However, prior to building or debugging, we need to connect a device or set up
    an instance of an emulator. For instructions on how to configure a device or create
    an emulator instance, please refer to the following Microsoft documentation: [https://learn.microsoft.com/en-us/dotnet/maui/](https://learn.microsoft.com/en-us/dotnet/maui/).'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Android 构建，可以使用 Android 模拟器或设备进行测试。然而，在构建或调试之前，我们需要连接设备或设置模拟器的一个实例。有关如何配置设备或创建模拟器实例的说明，请参阅以下
    Microsoft 文档：[https://learn.microsoft.com/en-us/dotnet/maui/](https://learn.microsoft.com/en-us/dotnet/maui/)。
- en: We can run or debug from Visual Studio (*Figure 2.6*) by selecting **net8.0-android**
    as the framework.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过选择**net8.0-android**作为框架，从 Visual Studio (*图 2.6*) 运行或调试。
- en: 'Alternatively, we can also build and run `net8.0-android` from the command
    line using the following command:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们也可以使用以下命令从命令行构建和运行 `net8.0-android`：
- en: '[PRE23]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![Figure 2.8: Running on Android and Windows](img/B21554_02_08.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.8：在 Android 和 Windows 上运行](img/B21554_02_08.png)'
- en: 'Figure 2.8: Running on Android and Windows'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.8：在 Android 和 Windows 上运行
- en: After we run the app on Android and Windows targets, we can see the preceding
    screen (*Figure 2.8*).
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android 和 Windows 目标上运行应用程序后，我们可以看到前面的屏幕 (*图 2.8*)。
- en: iOS and macOS
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: iOS 和 macOS
- en: We’re able to build and test iOS and macOS targets on a Mac computer. Given
    Microsoft’s announcement regarding the retirement of Microsoft Visual Studio 2022
    for Mac, we will proceed to demonstrate how to build and test iOS and macOS targets
    utilizing command-line operations.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能够在 Mac 计算机上构建和测试 iOS 和 macOS 目标。鉴于 Microsoft 关于退役 Microsoft Visual Studio
    2022 for Mac 的公告，我们将继续演示如何利用命令行操作构建和测试 iOS 和 macOS 目标。
- en: Building and testing the iOS target
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建 iOS 目标并进行测试
- en: 'To build and test the iOS target, we can use the following command in the project
    folder:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建和测试 iOS 目标，我们可以在项目文件夹中使用以下命令：
- en: '[PRE24]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To select a target iOS emulator, we need to provide the device ID using the
    following parameter:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择一个目标 iOS 模拟器，我们需要使用以下参数提供设备 ID：
- en: '[PRE25]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'To find the device ID, we can launch Xcode on a Mac computer and go to **Windows**
    -> **Devices and Simulators**, as shown in *Figure 2.9*:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到设备 ID，我们可以在 Mac 计算机上启动 Xcode 并转到**Windows** -> **设备和模拟器**，如图 *图 2.9* 所示：
- en: '![](img/B21554_02_09.png)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21554_02_09.png)'
- en: 'Figure 2.9: Devices and simulators in Xcode'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.9：Xcode 中的设备和模拟器
- en: 'As an addition to building on a Mac, it’s worth noting that iOS targets can
    also be built and tested using Visual Studio 2022 on Windows, provided the configuration
    is set up accordingly. Refer to the following Microsoft documentation for instructions
    on how to deploy an iOS app using hot restart: [https://learn.microsoft.com/en-us/dotnet/maui/ios/hot-restart](https://learn.microsoft.com/en-us/dotnet/maui/ios/hot-restart).'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在 Mac 上构建之外，值得注意的是，iOS 目标也可以在 Windows 上使用 Visual Studio 2022 进行构建和测试，前提是配置已相应设置。有关如何使用热重启部署
    iOS 应用程序的说明，请参阅以下 Microsoft 文档：[https://learn.microsoft.com/en-us/dotnet/maui/ios/hot-restart](https://learn.microsoft.com/en-us/dotnet/maui/ios/hot-restart)。
- en: Building and testing the macOS target
  id: totrans-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建 macOS 目标并进行测试
- en: 'For the macOS target, we can use the following command to build and test:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 macOS 目标，我们可以使用以下命令来构建和测试：
- en: '[PRE26]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In *Figure 2.10*, we can see a screenshot of our project in both iOS and macOS.
    The look and feel are similar to Android and Windows.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *图 2.10* 中，我们可以看到我们的项目在 iOS 和 macOS 上的截图。外观和感觉与 Android 和 Windows 类似。
- en: '![Figure 2.10: Running on iOS and macOS](img/B21554_02_10.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.10：在 iOS 和 macOS 上运行](img/B21554_02_10.png)'
- en: 'Figure 2.10: Running on iOS and macOS'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.10：在 iOS 和 macOS 上运行
- en: The environment setup for Android, iOS, and macOS involves platform-specific
    details. Please refer to the Microsoft documentation for detailed instructions.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: Android、iOS 和 macOS 的环境设置涉及平台特定的细节。请参阅 Microsoft 文档以获取详细说明。
- en: Our app works well now, but you can see that it is a very simple one with only
    one window. To lay a better foundation for our subsequent development, we will
    use Shell as the navigation framework. There is a good Shell-based template in
    Xamarin.Forms, and we can use it to create the initial code for our app.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序现在运行良好，但你可以看到它是一个非常简单的应用程序，只有一个窗口。为了为我们的后续开发打下更好的基础，我们将使用 Shell 作为导航框架。在
    Xamarin.Forms 中有一个很好的基于 Shell 的模板，我们可以用它来创建应用程序的初始代码。
- en: Migrating from Xamarin
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Xamarin 迁移
- en: 'In this section, we will showcase the process of migrating a Xamarin.Forms
    project template to .NET MAUI. It should be noted that this serves only as an
    example, given that there are many types of Xamarin projects. Therefore, only
    an example of migrating a Xamarin.Forms project to .NET MAUI is discussed in this
    chapter. For additional information on migrating Xamarin-native projects and other
    related topics, please refer to the Microsoft documentation: [https://learn.microsoft.com/en-us/dotnet/maui/migration/](https://learn.microsoft.com/en-us/dotnet/maui/migration/).'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将展示将 Xamarin.Forms 项目模板迁移到 .NET MAUI 的过程。需要注意的是，这只是一个示例，因为存在许多类型的 Xamarin
    项目。因此，本章只讨论了将 Xamarin.Forms 项目迁移到 .NET MAUI 的示例。有关迁移 Xamarin-native 项目和其他相关主题的更多信息，请参阅
    Microsoft 文档：[https://learn.microsoft.com/en-us/dotnet/maui/migration/](https://learn.microsoft.com/en-us/dotnet/maui/migration/)。
- en: Though we are primarily porting the Xamarin.Forms Shell template as an example
    in this chapter, this new project template is crucial for our subsequent developments.
    To provide further context, I will briefly introduce the planned migration of
    PassXYZ.Vault from Xamarin.Forms to .NET MAUI. This will outline the challenges
    we’ll need to tackle in this book, which should prepare you for the challenges
    you may encounter when migrating your own apps.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们在这个章节中主要将 Xamarin.Forms Shell 模板作为示例进行移植，但这个新的项目模板对我们后续的开发至关重要。为了提供更多背景信息，我将简要介绍
    PassXYZ.Vault 从 Xamarin.Forms 迁移到 .NET MAUI 的计划。这将概述我们在本书中需要克服的挑战，这应该能帮助你为迁移自己的应用程序时可能遇到的挑战做好准备。
- en: 'We can run the app that we have created successfully now. We are going to develop
    a password manager app named PassXYZ.Vault in the rest of this book. Version *1.x.x*
    of this app is implemented in Xamarin.Forms, and you can find it on GitHub: [https://github.com/passxyz/Vault](https://github.com/passxyz/Vault).'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以成功运行我们创建的应用程序。在本书的其余部分，我们将开发一个名为 PassXYZ.Vault 的密码管理应用程序。该应用程序的 *1.x.x*
    版本使用 Xamarin.Forms 实现，你可以在 GitHub 上找到它：[https://github.com/passxyz/Vault](https://github.com/passxyz/Vault)。
- en: 'Version *1.x.x* is developed using Xamarin.Forms *5.0.0*. We plan to rebuild
    it using .NET MAUI and will discuss the process in this book. The .NET MAUI release
    will be labeled as *2.x.x*, and the source code will be available at the following
    location: [https://github.com/passxyz/Vault2](https://github.com/passxyz/Vault2).'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '*1.x.x* 版本使用 Xamarin.Forms *5.0.0* 开发。我们计划使用 .NET MAUI 重新构建它，并在本书中讨论这个过程。.NET
    MAUI 的发布将标记为 *2.x.x*，源代码将在以下位置提供：[https://github.com/passxyz/Vault2](https://github.com/passxyz/Vault2)。'
- en: Both the *1.x.x* and *2.x.x* versions utilize Shell as the navigation framework,
    supported in .NET MAUI and Xamarin.Forms through `Microsoft.Maui.Controls.Shell`
    and `Xamarin.Forms.Shell`, respectively. Shell provides a consistent navigation
    user experience across all platforms. We will delve deeper into Shell and its
    navigation features in *Chapter 5*, *Navigation Using .NET MAUI Shell and NavigationPage*.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '*1.x.x* 和 *2.x.x* 版本都使用 Shell 作为导航框架，分别通过 `Microsoft.Maui.Controls.Shell` 和
    `Xamarin.Forms.Shell` 在 .NET MAUI 和 Xamarin.Forms 中得到支持。Shell 在所有平台上提供一致的导航用户体验。我们将在第
    5 章 *使用 .NET MAUI Shell 和 NavigationPage 进行导航* 中深入了解 Shell 及其导航功能。'
- en: 'Project templates created from the Visual Studio for both .NET MAUI and Xamarin.Forms
    incorporate Shell. However, the default .NET MAUI project template contains only
    the simplest form of Shell, as seen in *Listing 2.8*:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 由 Visual Studio 创建的 .NET MAUI 和 Xamarin.Forms 的项目模板都包含 Shell。然而，默认的 .NET MAUI
    项目模板只包含最简单的 Shell 形式，如图 2.8 所示：
- en: '[PRE27]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Listing 2.8: `AppShell.xaml` ([https://epa.ms/AppShell2-8](https://epa.ms/AppShell2-8))'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '列表 2.8: `AppShell.xaml` ([https://epa.ms/AppShell2-8](https://epa.ms/AppShell2-8))'
- en: '`MainPage` is displayed in `ShellContent`, presenting a basic UI without much
    content. In our app, we will employ the **MVVM pattern** to build our user interface
    via Shell. In order to do so, boilerplate code is required that encompasses both
    the MVVM pattern and the Shell navigation structure.'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '`MainPage` 在 `ShellContent` 中显示，呈现一个基本 UI，内容不多。在我们的应用程序中，我们将使用 **MVVM 模式**
    通过 Shell 构建用户界面。为了做到这一点，需要包含 MVVM 模式和 Shell 导航结构的样板代码。'
- en: The MVVM pattern is a frequently used UI design pattern in .NET MAUI app development.
    We will encounter it several times as we progress through the topics in this book.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: MVVM 模式是 .NET MAUI 应用程序开发中常用的 UI 设计模式。随着我们在这本书中继续探讨主题，我们将多次遇到它。
- en: We have the option of creating this code from scratch. However, the Xamarin.Forms
    template includes the boilerplate code that I used in version *1.x.x* of `PassXYZ.Vault`.
    Thus, the same project template can be created for .NET MAUI. This process also
    gives us an insight into how to migrate or reuse existing Xamarin.Forms code.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以选择从头开始创建此代码。然而，Xamarin.Forms 模板包括我在 `PassXYZ.Vault` 版本 *1.x.x* 中使用的样板代码。因此，可以为
    .NET MAUI 创建相同的项目模板。这个过程也让我们了解了如何迁移或重用现有的 Xamarin.Forms 代码。
- en: Migrating and reusing the Shell template from Xamarin.Forms
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 Xamarin.Forms 迁移和重用 Shell 模板
- en: Xamarin.Forms provides a more versatile Shell template that can be used to generate
    boilerplate code with either flyout or tabbed Shell navigation options. We can
    set up a new Xamarin.Forms project using this template. Then, we can implement
    this boilerplate code in the .NET MAUI application that we just created.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.Forms 提供了一个更通用的 Shell 模板，可以用来生成带有飞出或标签页 Shell 导航选项的样板代码。我们可以使用这个模板来设置一个新的
    Xamarin.Forms 项目。然后，我们可以在刚刚创建的 .NET MAUI 应用程序中实现这个样板代码。
- en: 'To create a new Xamarin.Forms project, follow these steps:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的 Xamarin.Forms 项目，请按照以下步骤操作：
- en: 'Launch Visual Studio 2022 and select **Create a new project**. This opens the
    **Create a new project** wizard. In the search box, we can type `Xamarin`, and
    all Xamarin-related project templates will be shown (see *Figure 2.11*):'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Visual Studio 2022 并选择 **创建新项目**。这打开 **创建新项目** 向导。在搜索框中，我们可以输入 `Xamarin`，所有与
    Xamarin 相关的项目模板都将显示（见图 2.11）：
- en: '![Figure 2.11: New Xamarin project](img/B21554_02_11.png)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.11：新 Xamarin 项目](img/B21554_02_11.png)'
- en: 'Figure 2.11: New Xamarin project'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.11：新 Xamarin 项目
- en: 'Select **Mobile App (Xamarin.Forms)** from the list and click **Next**. On
    the next screen, as shown in *Figure 2.12*, we can choose a different location
    and use the same project name, `PassXYZ.Vault`, and then click the **Create**
    button:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从列表中选择 **移动应用 (Xamarin.Forms**) 并点击 **下一步**。在下一屏幕，如图 2.12 所示，我们可以选择不同的位置并使用相同的项目名称
    `PassXYZ.Vault`，然后点击 **创建** 按钮：
- en: '![Figure 2.12: Configure the Xamarin project](img/B21554_02_12.png)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.12：配置 Xamarin 项目](img/B21554_02_12.png)'
- en: 'Figure 2.12: Configure the Xamarin project'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.12：配置 Xamarin 项目
- en: 'We have one more step, as shown in *Figure 2.13*. Let’s select the **Flyout**
    template and click **Create**:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还有一步，如图 2.13 所示。让我们选择 **飞出** 模板并点击 **创建**：
- en: '![Figure 2.13: Configure the Xamarin project – Flyout](img/B21554_02_13.png)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.13：配置 Xamarin 项目 – 飞出](img/B21554_02_13.png)'
- en: 'Figure 2.13: Configure the Xamarin project – Flyout'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.13：配置 Xamarin 项目 – 飞出
- en: 'After the new solution has been created, we can see that there are four projects
    in the solution, as shown in *Figure 2.14*:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 新解决方案创建后，我们可以看到解决方案中有四个项目，如图 2.14 所示：
- en: '**PassXYZ.Vault** – This is a .NET Standard project that is shared by other
    projects, and all platform-independent code should be here.'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PassXYZ.Vault** – 这是一个由其他项目共享的 .NET Standard 项目，所有平台无关的代码都应该在这里。'
- en: '**PassXYZ.Vault.Android** – This is the Android platform-specific project.'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PassXYZ.Vault.Android** – 这是一个特定于 Android 平台的项目。'
- en: '**PassXYZ.Vault.iOS** – This is the iOS platform-specific project.'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PassXYZ.Vault.iOS** – 这是一个特定于 iOS 平台的项目。'
- en: '**PassXYZ.Vault.UWP** – This is the UWP-specific project.'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PassXYZ.Vault.UWP** – 这是一个特定于 UWP 的项目。'
- en: We observe that the project structure of Xamarin.Forms is quite different from
    that of .NET MAUI. The solution consists of multiple projects, with resources
    managed separately in platform-specific projects. The bulk of the development
    work is carried out in the .NET Standard project, **PassXYZ.Vault**. We will focus
    on migrating and reusing the code present in this project.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 我们观察到，Xamarin.Forms 的项目结构与 .NET MAUI 的项目结构相当不同。解决方案由多个项目组成，平台特定的项目中分别管理资源。大部分的开发工作是在
    .NET Standard 项目中进行的，**PassXYZ.Vault**。我们将重点关注迁移和重用此项目中的代码。
- en: '![A screenshot of a computer  Description automatically generated](img/B21554_02_14.png)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![计算机屏幕截图  描述自动生成](img/B21554_02_14.png)'
- en: 'Figure 2.14: Xamarin.Forms project structure'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.14：Xamarin.Forms 项目结构
- en: 'The source code of this Xamarin.Forms project can be found here: [https://github.com/shugaoye/PassXYZ.Vault2/tree/xamarin](https://github.com/shugaoye/PassXYZ.Vault2/tree/xamarin).'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 此 Xamarin.Forms 项目的源代码可在此处找到：[https://github.com/shugaoye/PassXYZ.Vault2/tree/xamarin](https://github.com/shugaoye/PassXYZ.Vault2/tree/xamarin)。
- en: The migration process is relatively straightforward when it does not involve
    platform-specific code. We are tackling the simplest case here, but it’s important
    to note that production code might be far more complex than this example. Therefore,
    any migration should only occur after meticulous analysis.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 当不涉及平台特定代码时，迁移过程相对简单。我们在这里处理的是最简单的情况，但重要的是要注意，生产代码可能比这个例子复杂得多。因此，任何迁移都应在仔细分析后进行。
- en: Let’s concentrate on the .NET Standard project. Its content includes the boilerplate
    code required for the MVVM pattern and Shell UI – precisely what we need. We can
    copy the files highlighted in *Table 2.4* to the .NET MAUI project and adjust
    the namespaces in the source code accordingly.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们专注于 .NET Standard 项目。其内容包含用于 MVVM 模式和 Shell UI 的样板代码——这正是我们所需要的。我们可以将 *表
    2.4* 中突出显示的文件复制到 .NET MAUI 项目中，并相应地调整源代码中的命名空间。
- en: 'Below are the steps of the migration process:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是迁移过程的步骤：
- en: 'Please refer to *Table 2.4*, which shows a list of actions corresponding to
    the list of files and folders in the .NET Standard project:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请参考 *表 2.4*，它显示了与 .NET Standard 项目中的文件和文件夹列表相对应的操作列表：
- en: '| **Xamarin.Forms** | **Actions** | **.NET MAUI** |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| **Xamarin.Forms** | **操作** | **.NET MAUI** |'
- en: '| `App.xaml` | No | Keep the .NET MAUI version. It defines the instance of
    the `Application` class. |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| `App.xaml` | 无 | 保持 .NET MAUI 版本。它定义了 `Application` 类的实例。|'
- en: '| `AppShell.xaml` | Replace | Overwrite the .NET MAUI version and change namespaces
    to .NET MAUI. This file defines the Shell navigation hierarchy. |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
  zh: '| `AppShell.xaml` | 替换 | 覆盖 .NET MAUI 版本并将命名空间更改为 .NET MAUI。此文件定义了 Shell 导航层次结构。|'
- en: '| `Views/` | Copy | New folder in .NET MAUI project. Need to change namespaces.
    |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| `Views/` | 复制 | 在 .NET MAUI 项目中新建文件夹。需要更改命名空间。|'
- en: '| `ViewModels/` | Copy | New folder in .NET MAUI project. Need to change namespaces.
    |'
  id: totrans-298
  prefs: []
  type: TYPE_TB
  zh: '| `ViewModels/` | 复制 | 在 .NET MAUI 项目中新建文件夹。需要更改命名空间。|'
- en: '| `Services/` | Copy | Interface to export models. New folder in .NET MAUI
    project. Need to change namespaces. |'
  id: totrans-299
  prefs: []
  type: TYPE_TB
  zh: '| `Services/` | 复制 | 导出模型的接口。在 .NET MAUI 项目中新建文件夹。需要更改命名空间。|'
- en: '| `Models/` | Copy | New folder in .NET MAUI project. Need to change namespaces.
    |'
  id: totrans-300
  prefs: []
  type: TYPE_TB
  zh: '| `Models/` | 复制 | 在 .NET MAUI 项目中新建文件夹。需要更改命名空间。|'
- en: 'Table 2.4: Actions in the .NET Standard project'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2.4：.NET Standard 项目中的操作
- en: 'In the .NET MAUI project, please refer to *Table 2.5* to replace the following
    namespaces:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 .NET MAUI 项目中，请参考 *表 2.5* 替换以下命名空间：
- en: '| **Old namespace** | **New namespace** |'
  id: totrans-303
  prefs: []
  type: TYPE_TB
  zh: '| **旧命名空间** | **新命名空间** |'
- en: '|  |  |'
  id: totrans-304
  prefs: []
  type: TYPE_TB
  zh: '|  |  |'
- en: '| `using Xamarin.Forms` | `using Microsoft.Maui AND using Microsoft.Maui.Controls`
    |'
  id: totrans-305
  prefs: []
  type: TYPE_TB
  zh: '| `using Xamarin.Forms` | `using Microsoft.Maui AND using Microsoft.Maui.Controls`
    |'
- en: '| `using Xamarin.Forms.Xaml` | `using Microsoft.Maui.Controls.Xaml` |'
  id: totrans-306
  prefs: []
  type: TYPE_TB
  zh: '| `using Xamarin.Forms.Xaml` | `using Microsoft.Maui.Controls.Xaml` |'
- en: 'Table 2.5: Namespaces in .NET MAUI and Xamarin.Forms'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2.5：.NET MAUI 和 Xamarin.Forms 中的命名空间
- en: Test and fix any errors.
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试并修复任何错误。
- en: 'In *Figure 2.15*, we can see the list of files changed in the process:'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 *图 2.15* 中，我们可以看到在迁移过程中更改的文件列表：
- en: '![](img/B21554_02_15.png)'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B21554_02_15.png)'
- en: 'Figure 2.15: Changed files in migration (https://bit.ly/3NlfqvO)'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.15：迁移过程中更改的文件（https://bit.ly/3NlfqvO）
- en: For this straightforward case, all the necessary changes relate to the namespace.
    However, real-world situations may not always follow this pattern. Despite the
    simplicity of the process, it can still be somewhat daunting for newcomers to
    .NET MAUI. In fact, you are not required to carry out this process yourself. As
    an alternative, I’ve created a new .NET MAUI project template that you can use.
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于这个简单的案例，所有必要的更改都关联到命名空间。然而，在现实世界中的情况并不总是遵循这种模式。尽管这个过程很简单，但对于.NET MAUI的新手来说，它仍然可能有些令人畏惧。实际上，你不需要亲自执行这个过程。作为替代方案，我创建了一个新的.NET
    MAUI项目模板，您可以使用它。
- en: 'After building and testing this updated app, we’ll be able to view the outcome
    in the screenshot provided in *Figure 2.16*:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建和测试这个更新后的应用程序后，我们可以在*图2.16*提供的屏幕截图中查看结果：
- en: '![](img/B21554_02_16.png)'
  id: totrans-314
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21554_02_16.png)'
- en: 'Figure 2.16: PassXYZ.Vault with .NET MAUI Shell'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2.16*：PassXYZ.Vault与.NET MAUI Shell'
- en: 'In *Figure 2.16*, we can see that there are three pages included in the default
    Shell menu:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图2.16*中，我们可以看到默认Shell菜单中包含三个页面：
- en: '**About:** This is a page that informs users about the app’s functionality.'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关于**：这是一个告知用户应用程序功能的页面。'
- en: '**Browse:** This is the entry point of a list of items.'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**浏览**：这是项目列表的入口点。'
- en: '**Logout:** This is the link to the login page where you can log in or log
    out.'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注销**：这是登录页面的链接，您可以在那里登录或注销。'
- en: This boilerplate code will serve as the foundation for the further development
    of our project in this book. To encapsulate the work we’ve done in this section,
    I’ve created a corresponding Visual Studio project template. Utilizing this template
    allows us to generate the desired project structure with ease.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 这段样板代码将作为本书中我们项目进一步开发的基石。为了封装本节中我们所做的工作，我创建了一个相应的Visual Studio项目模板。使用这个模板可以轻松地生成所需的项目结构。
- en: 'Note that this example merely illustrates the basic migration process. In a
    real-life project, numerous other factors would need to be taken into account,
    such as:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这个例子仅仅说明了基本的迁移过程。在实际项目中，还需要考虑许多其他因素，例如：
- en: Moving resources (font, images, and so on) out of platform folders
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将资源（字体、图像等）从平台文件夹中移出
- en: Converting Customer Renderer to Handler
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Customer Renderer转换为Handler
- en: Updating dependencies (NuGet packages)
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新依赖项（NuGet包）
- en: Changing `DependencyService` to DI
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`DependencyService`更改为DI
- en: The above list is just an example. We can only find out all the considerations
    after a detailed analysis of a project.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 上述列表只是一个例子。我们只能在详细分析项目后找出所有考虑因素。
- en: Visual Studio project template
  id: totrans-327
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Visual Studio项目模板
- en: 'The project template can be downloaded as a Visual Studio extension package
    from the Visual Studio Marketplace at: [https://marketplace.visualstudio.com/items?itemName=shugaoye.maui](https://marketplace.visualstudio.com/items?itemName=shugaoye.maui).'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目模板可以从Visual Studio Marketplace下载为Visual Studio扩展包：[https://marketplace.visualstudio.com/items?itemName=shugaoye.maui](https://marketplace.visualstudio.com/items?itemName=shugaoye.maui)。
- en: 'When you go to the above URL, you will see the page shown in *Figure 2.17*:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 当您访问上述URL时，您将看到*图2.17*所示的页面：
- en: '![](img/B21554_02_17.png)'
  id: totrans-330
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21554_02_17.png)'
- en: 'Figure 2.17: Project template in Visual Studio Marketplace'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2.17*：Visual Studio Marketplace中的项目模板'
- en: 'After the installation of this project template, we can create a new .NET MAUI
    project, as shown in *Figure 2.18*:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装此项目模板后，我们可以创建一个新的.NET MAUI项目，如图*图2.18*所示：
- en: '![A computer screen shot of a computer screen  Description automatically generated](img/B21554_02_18.png)'
  id: totrans-333
  prefs: []
  type: TYPE_IMG
  zh: '![计算机屏幕截图的计算机屏幕截图 自动生成描述](img/B21554_02_18.png)'
- en: 'Figure 2.18: Creating a new .NET MAUI MVVM project'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2.18*：创建新的.NET MAUI MVVM项目'
- en: 'In the project created using this template, the project structure is the same
    as the one in this chapter. The source code of this project template can be found
    here: [https://github.com/passxyz/MauiTemplate](https://github.com/passxyz/MauiTemplate).'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此模板创建的项目，其项目结构与本章中的相同。此项目模板的源代码可以在以下位置找到：[https://github.com/passxyz/MauiTemplate](https://github.com/passxyz/MauiTemplate)。
- en: Summary
  id: totrans-336
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we created a new .NET MAUI project. We learned how to configure
    our .NET MAUI app using .NET Generic Host and adjusted the resources configuration
    to utilize a custom font (Font Awesome). We also learned about the .NET MAUI application
    lifecycle and tested the process of subscribing to lifecycle events by overriding
    the `CreateWindow` method and by creating a derived class of the `Window` class.
    To generate boilerplate code with MVVM pattern and Shell support, we created a
    new .NET MAUI project template. This walkthrough served to demonstrate how to
    migrate Xamarin.Forms code to .NET MAUI.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们创建了一个新的 .NET MAUI 项目。我们学习了如何使用 .NET 泛型宿主配置我们的 .NET MAUI 应用，并调整了资源配置以使用自定义字体（Font
    Awesome）。我们还了解了 .NET MAUI 应用程序的生命周期，并通过重写 `CreateWindow` 方法以及创建 `Window` 类的派生类来测试订阅生命周期事件的过程。为了生成具有
    MVVM 模式和 Shell 支持的样板代码，我们创建了一个新的 .NET MAUI 项目模板。这个教程旨在演示如何将 Xamarin.Forms 代码迁移到
    .NET MAUI。
- en: In our next chapter, we will learn how to create a user interface using XAML,
    which can be used to build user interfaces for WPF, UWP, Xamarin.Forms, and .NET
    MAUI. We will continue to create and enhance the user interfaces of our password
    manager app using XAML.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们接下来的章节中，我们将学习如何使用 XAML 创建用户界面，这可以用于构建 WPF、UWP、Xamarin.Forms 和 .NET MAUI 的用户界面。我们将继续使用
    XAML 创建和增强我们的密码管理器应用的用户界面。
- en: Learn more on Discord
  id: totrans-339
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Discord 上了解更多信息
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们社区的 Discord 空间，与作者和其他读者进行讨论：
- en: '[https://packt.link/cross-platform-app](https://packt.link/cross-platform-app)'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/cross-platform-app](https://packt.link/cross-platform-app)'
- en: '![](img/QR_Code166522361691420406.png)'
  id: totrans-342
  prefs: []
  type: TYPE_IMG
  zh: '![二维码](img/QR_Code166522361691420406.png)'
