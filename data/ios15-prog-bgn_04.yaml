- en: '*Chapter 3*: Conditionals and Optionals'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第三章*: 条件语句和可选类型'
- en: In the last chapter, you looked at data types, constants, variables, and operations.
    At this point, you are able to write simple programs that process letters and
    numbers. However, programs don't always proceed in sequence. Oftentimes, you will
    need to execute different instructions based on a condition. Swift allows you
    to do this by using **conditionals**, and you will learn how to use them in this
    chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了数据类型、常量、变量和操作。到目前为止，你能够编写简单的程序来处理字母和数字。然而，程序并不总是按顺序执行。很多时候，你需要根据条件执行不同的指令。Swift
    允许你通过使用 **条件语句** 来做到这一点，你也将在这章中学习如何使用它们。
- en: Another thing you may have noticed is that, in the last chapter, each variable
    or constant was immediately assigned a value. What if you require a variable where
    the value may not be present initially? You will need a way to create a variable
    that may or may not have a value. Swift allows you to do this by using **optionals**,
    and you will also learn about them in this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 另一件你可能注意到的事情是，在上一章中，每个变量或常量都被立即赋予了值。如果你需要一个可能最初没有值的变量，你将需要一个方法来创建一个可能或可能没有值的变量。Swift
    允许你通过使用 **可选类型** 来做到这一点，你也将在这章中了解它们。
- en: By the end of this chapter, you should be able to write programs that do different
    things based on different conditions, and to handle variables that may or may
    not have a value.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你应该能够编写根据不同条件执行不同操作的程序，并处理可能或可能没有值的变量。
- en: 'The following topics will be covered:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下内容将涵盖：
- en: Introducing conditionals
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍条件语句
- en: Introducing optionals and optional binding
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍可选类型和可选绑定
- en: Tip
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 小贴士
- en: Please spend some time understanding optionals. They can be daunting for the
    novice programmer.
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请花些时间了解可选类型。对于新手程序员来说，它们可能会有些令人畏惧。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The Xcode playground for this chapter is in the `Chapter03` folder of the code
    bundle for this book, which can be downloaded here:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的 Xcode 演示文稿位于本书代码包的 `Chapter03` 文件夹中，您可以通过以下链接下载：
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，看看代码的实际效果：
- en: '[https://bit.ly/3woRRKq](https://bit.ly/3woRRKq)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bit.ly/3woRRKq](https://bit.ly/3woRRKq)'
- en: Create a new playground and name it `ConditionalsAndOptionals`. You can type
    in and run all the code in this chapter as you go along. You'll start by learning
    about conditionals.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的演示文稿，并将其命名为 `ConditionalsAndOptionals`。你可以一边阅读一边在这个章节中输入和运行所有代码。你将从学习条件语句开始。
- en: Introducing conditionals
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍条件语句
- en: 'At times, you''ll want to execute different code blocks based on a specific
    condition, such as in the following scenarios:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你可能需要根据特定的条件执行不同的代码块，例如以下场景：
- en: Choosing between different room types at a hotel. The price for bigger rooms
    would be higher.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在酒店选择不同的房间类型。大房间的价格会更高。
- en: Switching between different payment methods at an online store. Different payment
    methods would have different procedures.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在在线商店之间切换不同的支付方式。不同的支付方式会有不同的程序。
- en: Deciding what to order at a fast-food restaurant. Preparation procedures for
    each food item would be different.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在快餐店决定要订购什么。每种食品的准备程序都会不同。
- en: To do this, you would use conditionals. In Swift, this is implemented using
    the `if` statement (for a single condition) and the `switch` statement (for multiple
    conditions).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，你需要使用条件语句。在 Swift 中，这是通过使用 `if` 语句（用于单个条件）和 `switch` 语句（用于多个条件）来实现的。
- en: Important information
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: For more information on conditionals, visit [https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html](https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 想了解更多关于条件语句的信息，请访问 [https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html](https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html)。
- en: Let's see how `if` statements are used to execute different tasks depending
    on a condition's value in the next section.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 `if` 语句是如何根据条件值执行不同任务的，在下一节中。
- en: Using if statements
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 `if` 语句
- en: 'An `if` statement executes a block of code if a condition is `true`, and optionally
    another block of code if the condition is `false`. An `if` statement looks like
    this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 `if` 语句会在条件为 `true` 时执行一段代码，如果条件为 `false`，则可选地执行另一段代码。`if` 语句看起来是这样的：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Let's implement an `if` statement now to see this in action. Imagine that you're
    programming an app for a restaurant. The app would allow you to check if a restaurant
    is open, search for a restaurant, and check to see if a customer is over the drinking
    age limit.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来实现一个`if`语句来观察其效果。想象一下你正在为一家餐厅编写一个应用。这个应用将允许你检查餐厅是否营业，搜索餐厅，以及检查顾客是否超过饮酒年龄限制。
- en: 'Follow these steps:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: To check if a restaurant is open, add the following code to your playground
    to create a constant and execute a statement if the constant's value is `true`.
    Click the `isRestaurantOpen`, and assigned `true` to it. Next, you have an `if`
    statement that checks the value stored in `isRestaurantOpen`. Since the value
    is `true`, the `print()` statement is executed and `Restaurant is open` is printed
    in the Debug area.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查餐厅是否营业，将以下代码添加到你的沙盒中，以创建一个常量，并在常量的值是`true`时执行一个语句。点击`isRestaurantOpen`，并将其赋值为`true`。接下来，你有一个检查存储在`isRestaurantOpen`中的值的`if`语句。由于值是`true`，`print()`语句被执行，并在Debug区域打印`Restaurant
    is open`。
- en: Try changing the value of `isRestaurantOpen` to `false` and run your code again.
    As the condition is now `false`, nothing will be printed to the Debug area.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试将`isRestaurantOpen`的值改为`false`并再次运行你的代码。由于当前条件是`false`，Debug区域将不会打印任何内容。
- en: 'You can also execute statements if a value is `false`. Let''s say the customer
    has searched for a particular restaurant which is not in the app''s database,
    so the app should display a message to say that the restaurant is not found. Type
    in the following code to create a constant and execute a statement if the constant''s
    value is `false`:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一个值是`false`，你也可以执行语句。比如说，如果顾客搜索的餐厅不在应用数据库中，应用应该显示一条消息说明餐厅未找到。输入以下代码创建一个常量，并在常量的值是`false`时执行一个语句：
- en: '[PRE1]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The constant `isRestaurantFound` is set to `false`. Next, the `if` statement
    is checked. The `isRestaurantFound == false` condition returns `true`, and `Restaurant
    was not found` is printed in the Debug area.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 常量`isRestaurantFound`被设置为`false`。接下来，检查`if`语句。`isRestaurantFound == false`条件返回`true`，并在Debug区域打印`Restaurant
    was not found`。
- en: Try changing the value of `isRestaurantFound` to `true`. As the condition is
    now `false`, nothing will be printed to the Debug area.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试将`isRestaurantFound`的值改为`true`。由于当前条件是`false`，Debug区域将不会打印任何内容。
- en: 'To execute one set of statements if a condition is `true`, and another set
    of statements if a condition is `false`, use the `else` keyword. Type in the following
    code, which checks if a customer at a bar is over the drinking age limit:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在条件为`true`时执行一组语句，在条件为`false`时执行另一组语句，请使用`else`关键字。输入以下代码，该代码检查酒吧中的顾客是否超过饮酒年龄限制：
- en: '[PRE2]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, `drinkingAgeLimit` is assigned the value `21` and `customerAge` is assigned
    the value `23`. In the `if` statement, `customerAge < drinkingAgeLimit` is checked.
    Since 23 < 21 returns `false`, the `else` statement is executed and `Over age
    limit` is printed in the Debug area. If you change the value of `customerAge`
    to `19`, `customerAge < drinkingAgeLimit` will return `true`, so `Under age limit`
    will be printed in the Debug area.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，`drinkingAgeLimit`被赋值为`21`，而`customerAge`被赋值为`23`。在`if`语句中，检查`customerAge
    < drinkingAgeLimit`。由于`23 < 21`返回`false`，所以执行`else`语句，并在Debug区域打印`Over age limit`。如果你将`customerAge`的值改为`19`，`customerAge
    < drinkingAgeLimit`将返回`true`，因此将在Debug区域打印`Under age limit`。
- en: Up to now, you have only been dealing with single conditions. What if there
    are multiple conditions? That's where `switch` statements come in, and you will
    learn about them in the next section.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你只处理了单一条件。如果有多个条件怎么办？这就是`switch`语句的用武之地，你将在下一节中学习它们。
- en: Using switch statements
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`switch`语句
- en: 'To understand `switch` statements, let''s start by implementing an `if` statement
    with multiple conditions first. Imagine that you''re programming a traffic light.
    There are three possible conditions for the traffic light—red, yellow, or green—and
    you want something different to happen based on the color of the light. To do
    this, you can chain multiple `if` statements together. Follow these steps:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解`switch`语句，我们先从实现一个带有多个条件的`if`语句开始。想象一下你正在编写一个交通灯程序。交通灯有三种可能的状态——红色、黄色或绿色，并且你希望根据灯光的颜色执行不同的操作。为此，你可以将多个`if`语句链接起来。按照以下步骤操作：
- en: Add the following code to your playground to implement a traffic light using
    multiple `if` statements and click the `if` condition, `trafficLightColor == "Red"`,
    returns `false`, so the `else` statement is executed. The second `if` condition,
    `trafficLightColor == "Yellow"`, returns `true`, so `Caution` is printed in the
    Debug area and no more `if` conditions are evaluated. Try changing the value of
    `trafficLightColor` to see different results.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到您的游乐场中，以使用多个`if`语句实现交通灯，并点击`if`条件`trafficLightColor == "Red"`，返回`false`，因此执行`else`语句。第二个`if`条件`trafficLightColor
    == "Yellow"`返回`true`，因此在调试区域打印出`Caution`，并且不再评估更多的`if`条件。尝试更改`trafficLightColor`的值以查看不同的结果。
- en: 'The code used here works, but it''s a little hard to read. In this case, a
    `switch` statement would be more concise and easier to comprehend. A `switch`
    statement looks like this:'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里使用的代码是有效的，但读起来有点困难。在这种情况下，`switch`语句会更简洁，更容易理解。`switch`语句看起来像这样：
- en: '[PRE3]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The value is checked and matched to a case, and code for that case is executed.
    If none of the cases match, the code in the `default` case is executed.
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 会对值进行检查并匹配到某个case，然后执行该case的代码。如果没有任何一个case匹配，则执行`default` case中的代码。
- en: 'Here''s how to write the `if` statement shown earlier as a `switch` statement.
    Type in the following code:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是如何将前面显示的`if`语句写成`switch`语句的方法。输入以下代码：
- en: '[PRE4]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The code here is much easier to read and understand when compared to the previous
    version. The value in `trafficLightColor` is `"Yellow"`, so `case "Yellow":` is
    matched and `Caution` is printed in the Debug area. Try changing the value of
    `trafficLightColor` to see different results.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的版本相比，这里的代码更容易阅读和理解。`trafficLightColor`中的值是`"Yellow"`，所以`case "Yellow":`匹配，并在调试区域打印出`Caution`。尝试更改`trafficLightColor`的值以查看不同的结果。
- en: 'There are two things to remember about `switch` statements:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`switch`语句有两件事需要记住：
- en: '`switch` statements in Swift do not fall through the bottom of each case and
    into the next one by default. In the example shown previously, once `case "Red":`
    is matched, `case "Yellow":`, `case "Green":` , and `default:` will not execute.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Swift中的`switch`语句默认不会从每个case的底部跌落到下一个case。在前面显示的例子中，一旦`case "Red":`匹配，`case
    "Yellow":`、`case "Green":`和`default:`将不会执行。
- en: '`switch` statements must cover all possible cases. In the example shown previously,
    any `trafficLightColor` value other than `"Red"`, `"Yellow"`, or `"Green"` will
    be matched to `default:` and `Invalid color` will be printed in the Debug area.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`switch`语句必须覆盖所有可能的case。在前面显示的例子中，任何除了`"Red"`、`"Yellow"`或`"Green"`之外的`trafficLightColor`值都会匹配到`default:`，并在调试区域打印出`Invalid
    color`。'
- en: This concludes the section on `if` and `switch` statements.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分关于`if`和`switch`语句的内容到此结束。
- en: In the next section, you'll learn about optionals, which allow you to create
    variables without initial values, and **optional binding**, which allows instructions
    to be executed if an optional has a value.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将学习关于可选值的内容，它允许你创建没有初始值的变量，以及**可选绑定**，它允许在可选值有值时执行指令。
- en: Introducing optionals and optional binding
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍可选值和可选绑定
- en: Up until now, every time you declared a variable or constant, you assigned a
    value to it immediately. But what if you want to declare a variable first and
    assign a value later? In this case, you would use optionals.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，每次你声明一个变量或常量时，你都会立即给它赋值。但如果你想先声明一个变量，然后稍后赋值怎么办？在这种情况下，你会使用可选值。
- en: Important information
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: For more information on optionals, visit [https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html](https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于可选值的信息，请访问[https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html](https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html)。
- en: Let's learn how to create and use optionals, and see how they are used in a
    program. Imagine you're writing a program where the user needs to enter the name
    of their spouse. Of course, if the user is not married, there would be no value
    for this. In this case, you can use an optional to represent the spouse's name.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们学习如何创建和使用可选值，并看看它们如何在程序中使用。想象你正在编写一个程序，其中用户需要输入他们配偶的名字。当然，如果用户没有结婚，那么这个值就不存在。在这种情况下，你可以使用可选值来表示配偶的名字。
- en: 'An optional may have one of two possible states. It can either contain a value,
    or not contain a value. If an optional contains a value, you can access the value
    inside it. The process of accessing an optional''s value is known as unwrapping
    the optional. Let''s see how this works. Follow these steps:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 可选可能有两种状态之一。它可以包含一个值，或者不包含值。如果可选包含一个值，你可以访问其中的值。访问可选值的这个过程称为解包可选。让我们看看这是如何工作的。按照以下步骤：
- en: 'Add the following code to your playground to create a variable and print its
    contents:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到你的沙盒中，以创建一个变量并打印其内容：
- en: '[PRE5]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Click the Play/Stop button to run it. Since Swift is type-safe, it will display
    an error, **Variable 'spouseName' used before being initialized**.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击播放/停止按钮来运行它。由于Swift是类型安全的，它将显示一个错误，**在初始化之前使用变量'spouseName'**。
- en: 'To resolve this issue, you could assign an empty string to `spouseName`. Modify
    your code as shown:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要解决这个问题，你可以将空字符串赋给`spouseName`。按照以下方式修改你的代码：
- en: '[PRE6]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Since `spouseName` should not have a value initially, let''s make it an optional.
    To do so, type a question mark after the type annotation and remove the empty
    string assignment:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于`spouseName`最初不应该有值，让我们将其设置为可选。为此，在类型注解后输入一个问号并移除空字符串赋值：
- en: '[PRE7]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The warning appears because the `print` statement is treating `spouseName`
    as being of type `Any` instead of `String?`. Click the yellow triangle to display
    possible fixes, and choose the first fix:![Figure 3.2: Expanded warning notification
    with the first fix selected'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 警告出现是因为`print`语句将`spouseName`视为`Any`类型而不是`String?`类型。点击黄色三角形以显示可能的修复方案，并选择第一个修复方案：![图3.2：选择第一个修复方案的展开警告通知
- en: '](img/Figure_3.2_B17469.jpg)'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_3.2_B17469.jpg)'
- en: 'Figure 3.2: Expanded warning notification with the first fix selected'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.2：选择第一个修复方案的展开警告通知
- en: The statement will change to `print(spouseName ?? default value)`. Note the
    use of the `??` operator. This assigns `default value` to `spouseName` if it does
    not contain a value.
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 语句将变为`print(spouseName ?? default value)`。注意`??`操作符的使用。如果`spouseName`没有值，它将分配`default
    value`。
- en: 'Replace the `default value` placeholder with `"No value in spouseName"` as
    shown. The warning will disappear. Run your program again and `"No value in spouseName"`
    will appear in the Results area:![Figure 3.3: Results area showing default value'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`default value`占位符替换为`"spouseName中没有值"`，如下所示。警告将消失。再次运行你的程序，"spouseName中没有值"将出现在结果区域：![图3.3：显示默认值的区域
- en: '](img/Figure_3.3_B17469.jpg)'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_3.3_B17469.jpg)'
- en: 'Figure 3.3: Results area showing default value'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.3：显示默认值的区域
- en: 'Let''s assign a value to `spouseName`. Modify the code as shown:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们给`spouseName`赋一个值。按照以下方式修改代码：
- en: '[PRE8]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add one more line of code to join `spouseName` to another string as shown:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一行代码以将`spouseName`与另一个字符串连接，如下所示：
- en: '[PRE9]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Click on the red circle to display possible fixes, and you''ll see the following:![Figure
    3.4: Expanded error notification'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击红色圆圈以显示可能的修复方案，你会看到以下内容：![图3.4：展开的错误通知
- en: '](img/Figure_3.4_B17469.jpg)'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_3.4_B17469.jpg)'
- en: 'Figure 3.4: Expanded error notification'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.4：展开的错误通知
- en: The second fix recommends `spouseName` has a value, but if `spouseName` is `nil`,
    your program will crash.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第二个修复方案建议`spouseName`有值，但如果`spouseName`是`nil`，你的程序将崩溃。
- en: 'Click the second fix, and you''ll see an exclamation mark appear after `spouseName`
    in the last line of code, which indicates the optional is force-unwrapped:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击第二个修复方案，你会在代码的最后一行看到`spouseName`后面出现一个感叹号，这表示可选被强制解包：
- en: '[PRE10]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: When your program runs, `Hello, Nia` is assigned to `greeting`, as shown in
    the Results area. This means that `spouseName` has been successfully unwrapped.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你的程序运行时，`Hello, Nia`被分配给`greeting`，如结果区域所示。这意味着`spouseName`已被成功解包。
- en: 'To see the effect of force-unwrapping a variable containing `nil`, set `spouseName`
    to `nil`:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要看到强制解包包含`nil`的变量的效果，将`spouseName`设置为`nil`：
- en: '[PRE11]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To see the effect of optional binding, modify your code as follows:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要看到可选绑定的效果，按照以下方式修改你的代码：
- en: '[PRE12]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To see the effect of optional binding when an optional contains `nil`, assign
    `nil` once more to `spouseName`:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要看到可选包含`nil`时的可选绑定效果，再次将`nil`赋给`spouseName`：
- en: '[PRE13]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This concludes the section on optionals and optional binding, and you can now
    create and use optional variables. Awesome!
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了关于可选和可选绑定的部分，你现在可以创建和使用可选变量了。太棒了！
- en: Summary
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You're doing great! You learned how to use `if` and `switch` statements, which
    means you are now able to write your own programs that do different things based
    on different conditions.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你做得很好！你已经学会了如何使用 `if` 和 `switch` 语句，这意味着你现在能够编写自己的程序，根据不同的条件执行不同的操作。
- en: You also learned about optionals and optional binding. This means you can now
    represent variables that may or may not have a value, and execute instructions
    only if a variable's value is present.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你还学习了可选值和可选绑定。这意味着你现在可以表示可能存在也可能不存在的变量，并且只有当变量的值存在时才执行指令。
- en: In the next chapter, you will study how to use a range of values instead of
    single values, and how to repeat program statements using loops.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何使用一系列值而不是单个值，以及如何使用循环重复程序语句。
