- en: Chapter 3. Exploring Various Frameworks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章 探索各种框架
- en: 'A framework is a collection of resources. It collects a static library and
    its header files into a single structure that Xcode can easily include into our
    projects. A framework is a dynamic library. In iOS, there are two kinds of frameworks:
    public frameworks and private frameworks. From iOS 3.1, all private and public
    libraries are combined into a big cache file. There are a lot of frameworks provided
    by Apple for different functionalities. The extension of the framework is `.framework`.
    For every unique feature, a framework is defined—for example, for using maps a
    `MapKit` framework is available, and for location, a `CoreLocation` framework
    is available. Various frameworks are present at the `<Xcode.app>Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/<iOS_SDK>/System/Library/Frameworks`
    directory, where `Xcode.app` is our application path (where we saved our app).'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 框架是一组资源的集合。它将静态库及其头文件收集到一个单一的结构中，Xcode可以轻松将其包含到我们的项目中。框架是动态库。在iOS中，有两种类型的框架：公开框架和私有框架。从iOS
    3.1开始，所有私有和公开库都合并到一个大缓存文件中。苹果为不同的功能提供了许多框架。框架的扩展名为`.framework`。对于每个独特的功能，都定义了一个框架——例如，使用地图时，有`MapKit`框架可用，使用位置时，有`CoreLocation`框架可用。各种框架位于`<Xcode.app>Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/<iOS_SDK>/System/Library/Frameworks`目录中，其中`Xcode.app`是我们的应用程序路径（我们保存应用程序的地方）。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Framework descriptions in a tabular form
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表格形式的框架描述
- en: Databases in iOS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iOS中的数据库
- en: Social integration
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社交集成
- en: Activities to understand every topic in a better way
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以更好的方式理解每个主题的活动
- en: 'Generally, frameworks are bundles that contain a linkable library (`.dylib`)
    and associated resources and headers for development. Each framework contains
    sample code and other resources associated with it. There are a number of frameworks
    provided by Apple. Frameworks are listed in the following table with their descriptions:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，框架是包含可链接库（`.dylib`）及其相关资源和头文件的包。每个框架都包含与其相关的示例代码和其他资源。苹果提供了许多框架。框架在以下表格中列出，并附有描述：
- en: '| Name | Description |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Accelerate.framework` | This framework handles the math, DSP, large numbers,
    and image processing. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| `Accelerate.framework` | 此框架处理数学、数字信号处理、大数和图像处理。|'
- en: '| `Accounts.framework` | This framework provides access to accounts in the
    `Accounts` database. It allows creation of accounts if none exist. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| `Accounts.framework` | 此框架提供对`Accounts`数据库中账户的访问。如果不存在账户，它允许创建账户。|'
- en: '| `AddressBook.framework` | This framework provides access to the `AddressBook`
    database. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `AddressBook.framework` | 此框架提供对`AddressBook`数据库的访问。|'
- en: '| `AddressBookUI.framework` | This framework contains classes for displaying
    the system-defined people Picker and editor interfaces. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `AddressBookUI.framework` | 此框架包含用于显示系统定义的人选选择器和编辑接口的类。|'
- en: '| `AdSupport.framework` | This framework provides access to the identifiers
    to serve adverts and a flag that indicates if limited tracking is on. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `AdSupport.framework` | 此框架提供访问用于广告的标识符以及一个表示是否启用了有限跟踪的标志。|'
- en: '| `AssetsLibrary.framework` | This framework gives access to user photos and
    videos. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `AssetsLibrary.framework` | 此框架提供对用户照片和视频的访问。|'
- en: '| `AudioToolbox.framework` | This framework provides an interface for recording,
    playing, and audio streaming. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `AudioToolbox.framework` | 此框架提供用于录制、播放和音频流的接口。|'
- en: '| `AudioUnit.framework` | This framework is used to load audio units and their
    uses. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `AudioUnit.framework` | 此框架用于加载音频单元及其用途。|'
- en: '| `AVFoundation.framework` | This framework is used for playing and recording
    audio and video. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `AVFoundation.framework` | 此框架用于播放和录制音频和视频。|'
- en: '| `CFNetwork.framework` | This framework is used to access networks through
    Wi-Fi or cellular networks. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `CFNetwork.framework` | 此框架用于通过Wi-Fi或蜂窝网络访问网络。|'
- en: '| `CoreAudio.framework` | This framework provides the datatypes used for Core
    Audio. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `CoreAudio.framework` | 此框架提供用于Core Audio的数据类型。|'
- en: '| `CoreBluetooth.framework` | This framework provides access to Bluetooth (hardware).
    |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `CoreBluetooth.framework` | 此框架提供对蓝牙（硬件）的访问。|'
- en: '| `CoreData.framework` | This framework contains the interface for application
    data model. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `CoreData.framework` | 此框架包含应用程序数据模型的接口。|'
- en: '| `CoreFoundation.framework` | This framework provides software services and
    basic management of data. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `CoreFoundation.framework` | 此框架提供软件服务和数据的基本管理。|'
- en: '| `CoreGraphics.framework` | This framework contains the API for the Quartz
    engine and gives a 2D view. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `CoreGraphics.framework` | 此框架包含Quartz引擎的API，并提供2D视图。|'
- en: '| `CoreImage.framework` | This framework is the interface used to manipulate
    images and video. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `CoreImage.framework` | 此框架是用于操作图像和视频的接口。|'
- en: '| `CoreLocation.framework` | This framework is the interface used to determine
    the user''s location. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `CoreLocation.framework` | 此框架是用于确定用户位置的接口。|'
- en: '| `CoreMedia.framework` | This framework includes the low-level routines for
    manipulating audio and video. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `CoreMedia.framework` | 此框架包含操作音频和视频的底层例程。|'
- en: '| `CoreMIDI.framework` | This framework includes the low-level routines for
    handling MIDI data. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `CoreMIDI.framework` | 此框架包含处理MIDI数据的底层例程。|'
- en: '| `CoreMotion.framework` | This framework is the interface to access accelerometer
    and gyrometric data. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `CoreMotion.framework` | 此框架是访问加速度计和陀螺仪数据的接口。|'
- en: '| `CoreTelephony.framework` | This framework allows access to Carrier information
    and information related to the current call. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `CoreTelephony.framework` | 此框架允许访问运营商信息和当前通话的相关信息。|'
- en: '| `CoreText.framework` | This framework contains a text layout and rendering
    engine. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `CoreText.framework` | 此框架包含文本布局和渲染引擎。|'
- en: '| `CoreVideo.framework` | This framework includes low-level routines for using
    audio and video. It is advised to not use it directly. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `CoreVideo.framework` | 此框架包含使用音频和视频的底层例程。建议不要直接使用它。|'
- en: '| `EventKit.framework` | This framework interface is used to access the calendar
    and events. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `EventKit.framework` | 此框架接口用于访问日历和事件。|'
- en: '| `EventKitUI.framework` | This framework contains classes for displaying the
    calendar''s interface. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `EventKitUI.framework` | 此框架包含用于显示日历界面的类。|'
- en: '| `ExternalAccessory.framework` | This framework is an interface used to communicate
    with the attached hardware. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `ExternalAccessory.framework` | 此框架是一个用于与附加硬件通信的接口。|'
- en: '| `Foundation.framework` | This framework contains the interface for managing
    Strings, Arrays, collections, and low-level datatypes. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `Foundation.framework` | 此框架包含管理字符串、数组、集合和底层数据类型的接口。|'
- en: '| `GameController.framework` | This framework is the interface to communicate
    with game-related hardware. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `GameController.framework` | 此框架是用于与游戏相关硬件通信的接口。|'
- en: '| `GameKit.framework` | This framework is used for peer-to-peer connection
    and to create social games. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `GameKit.framework` | 此框架用于点对点连接和创建社交游戏。|'
- en: '| `GLKit.framework` | This framework is used for building the OpenGL ES application.
    |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `GLKit.framework` | 此框架用于构建OpenGL ES应用程序。|'
- en: '| `GSS.framework` | This framework provides security-related services. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `GSS.framework` | 此框架提供安全相关服务。|'
- en: '| `iAd.framework` | This framework is used to display advertisements. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `iAd.framework` | 此框架用于显示广告。|'
- en: '| `ImageIO.framework` | This framework contains classes to read and write image
    data. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `ImageIO.framework` | 此框架包含读取和写入图像数据的类。|'
- en: '| `IOKit.framework` | This framework is a low-level framework and is used to
    communicate with the kernel and the hardware. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `IOKit.framework` | 此框架是一个底层框架，用于与内核和硬件通信。|'
- en: '| `JavaScriptCore` | This framework contains files for evaluating JavaScript
    code and parsing JSON. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `JavaScriptCore` | 此框架包含评估JavaScript代码和解析JSON的文件。|'
- en: '| `MapKit.framework` | This framework is used for embedding a map in our application
    and to use reverse geocoding. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `MapKit.framework` | 此框架用于在我们的应用程序中嵌入地图和使用反向地理编码。|'
- en: '| `MediaAccessibility.framework` | This framework was defined in iOS 7\. It
    manages the presentation of closed-caption content in media files. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `MediaAccessibility.framework` | 此框架在iOS 7中定义。它管理媒体文件中闭路电视内容的呈现。|'
- en: '| `MediaPlayer.framework` | This framework contains the interface for playing
    a video in full screen mode. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `MediaPlayer.framework` | 此框架包含全屏模式播放视频的接口。|'
- en: '| `MediaToolbox.framework` | This framework contains the interface for playing
    audio content. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `MediaToolbox.framework` | 此框架包含播放音频内容的接口。|'
- en: '| `MessageUI.framework` | The framework contains the interface for composing
    e-mails. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `MessageUI.framework` | 该框架包含用于编写电子邮件的接口。|'
- en: '| `MobileCoreServices.framework` | This framework defines UTIs supported by
    the system. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `MobileCoreServices.framework` | 此框架定义系统支持的UTIs。|'
- en: '| `MultipeerConnectivity.framework` | This framework was introduced in iOS
    7\. It is responsible for implementing peer-to-peer networking between devices.
    |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `MultipeerConnectivity.framework` | 此框架在iOS 7中引入。它负责在设备之间实现点对点网络。|'
- en: '| `NewsstandKit.framework` | This framework provides the interface for downloading
    magazines and newspapers in the background. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `NewsstandKit.framework` | 此框架提供了在后台下载杂志和报纸的接口。|'
- en: '| `OpenAL.framework` | This framework contains the interface for the cross-platform
    audio library. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `OpenAL.framework` | 此框架包含跨平台音频库的接口。|'
- en: '| `OpenGLES.framework` | This framework provides the interface for the OpenGL
    ES library and contains classes that are used for 2D and 3D graphics. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `OpenGLES.framework` | 此框架提供了 OpenGL ES 库的接口，并包含用于 2D 和 3D 图形的类。|'
- en: '| `PassKit.framework` | This framework contains interfaces for creating digital
    passes to replace things such as tickets, membership cards, and so on. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `PassKit.framework` | 此框架包含创建数字通行证的接口，用于替换如票、会员卡等物品。|'
- en: '| `QuickLook.framework` | This provides the interface for previewing a file.
    |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `QuickLook.framework` | 这提供了预览文件的接口。|'
- en: '| `SafariServices.framework` | This framework was introduced in iOS 7\. It
    supports the creation of reading list items in Safari. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `SafariServices.framework` | 此框架是在 iOS 7 中引入的。它支持在 Safari 中创建阅读列表项。|'
- en: '| `Security.framework` | This framework provides the interface for managing
    keys, trust policies, and certificates. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `Security.framework` | 此框架提供了管理密钥、信任策略和证书的接口。|'
- en: '| `Social.framework` | This framework contains the interface to communicate
    or integrate social network services. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `Social.framework` | 此框架包含用于通信或集成社交网络服务的接口。|'
- en: '| `SpriteKit.framework` | This framework was introduced in iOS 7\. It facilitates
    the creation of sprite-based animations. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `SpriteKit.framework` | 此框架是在 iOS 7 中引入的。它便于创建基于精灵的动画。|'
- en: '| `StoreKit.framework` | This framework is responsible for handling financial
    transactions associated with the app. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `StoreKit.framework` | 此框架负责处理与应用程序相关的财务交易。|'
- en: '| `SystemConfiguration.framework` | This framework contains the interfaces
    for determining whether the network is available or not. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `SystemConfiguration.framework` | 此框架包含确定网络是否可用的接口。|'
- en: '| `Twitter.framework` | This framework contains the interface for sending tweets.
    |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `Twitter.framework` | 此框架包含发送推文的接口。|'
- en: '| `UIKit.framework` | This framework contains the classes for iOS UI components
    and for the user interface layer of applications. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `UIKit.framework` | 此框架包含 iOS UI 组件和应用程序用户界面的类。|'
- en: '| `VideoToolbox.framework` | This framework contains the interfaces used by
    the device. It is advised to not use it directly. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `VideoToolbox.framework` | 此框架包含设备使用的接口。建议不要直接使用它。|'
- en: These are the various frameworks provided by Apple and we can use them as needed.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是苹果提供的各种框架，我们可以根据需要使用它们。
- en: Exploring various UI components with libraries
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用库探索各种 UI 组件
- en: 'You''ve already learned about UI in the previous chapter. Now we can start
    by exploring some UI components and the frameworks. We will make a simple `Student
    Registration` app by performing the following steps:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经在上一章中学习了 UI。现在我们可以通过探索一些 UI 组件和框架来开始。我们将通过以下步骤制作一个简单的“学生注册”应用：
- en: First of all, create a new single view project in Xcode.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在 Xcode 中创建一个新的单视图项目。
- en: Now, go to storyboard and navigate to **Editor** | **Embed In** | **Navigation
    Controller**, as shown in the following screenshot:![Exploring various UI components
    with libraries](img/1829OT_03_01.jpg)
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，转到故事板并导航到**编辑器** | **嵌入** | **导航控制器**，如图下截图所示：![使用库探索各种 UI 组件](img/1829OT_03_01.jpg)
- en: Now your storyboard looks like this:![Exploring various UI components with libraries](img/1829OT_03_02.jpg)
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您的故事板看起来像这样：![使用库探索各种 UI 组件](img/1829OT_03_02.jpg)
- en: Select the navigation bar of the second view by clicking on it and rename it
    to `Student Registration`.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击它来选择第二个视图的导航栏，并将其重命名为“学生注册”。
- en: Add one button to the view (name it `Add Student`) and set the color of the
    button text and background of the button from the Inspector panel on the right-hand
    side.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向视图中添加一个按钮（命名为“添加学生”），并从右侧的检查器面板设置按钮文本和背景颜色。
- en: Search for a new view controller in the interface builder and drag it beside
    the second view.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在界面构建器中搜索新的视图控制器，并将其拖到第二个视图旁边。
- en: For a new view controller, we need to add new class files. Go to **File** at
    the top of Xcode and then navigate to **File** | **New** | **File...**.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于新的视图控制器，我们需要添加新的类文件。转到 Xcode 顶部的**文件**，然后导航到**文件** | **新建** | **文件...**。
- en: Now, create a new **Objective-C class** file and give a suitable name to the
    class (for example, `StudentRegistration`), as shown in the following screenshot:![Exploring
    various UI components with libraries](img/1829OT_03_03.jpg)
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个新的**Objective-C类**文件，并为该类命名一个合适的名称（例如，`StudentRegistration`），如下面的截图所示：![使用库探索各种UI组件](img/1829OT_03_03.jpg)
- en: Go to the storyboard, select our third view, and give it a name that is similar
    to our new Objective-C class from the inspector element.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往故事板，选择我们的第三个视图，并在检查器元素中为其提供一个与我们的新Objective-C类相似的名称。
- en: Right-click on the button, select the **Action** option, drag to the new view
    (the third view), and select **Push**.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击按钮，选择**操作**选项，拖动到新视图（第三个视图），并选择**推送**。
- en: Now, drag four text fields in the third view as shown in the following screenshot.
    Select one text field and go to the inspector panel where you will find an option
    **Placeholder**. Here, enter text for all the text fields.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如以下截图所示，在第三个视图中拖动四个文本字段。选择一个文本字段，并转到检查器面板，在那里您将找到一个选项**占位符**。在这里，为所有文本字段输入文本。
- en: Find the bar button from the interface builder and drag it to the bar of the
    third view and name it (for example, `Save`).
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在界面构建器中找到工具栏按钮，并将其拖动到第三个视图的工具栏上，并命名它（例如，`Save`）。
- en: 'By following the preceding steps, our storyboard will look like this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循前面的步骤，我们的故事板将看起来像这样：
- en: '![Exploring various UI components with libraries](img/1829OT_03_04.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![使用库探索各种UI组件](img/1829OT_03_04.jpg)'
- en: 'Here is our simple UI, but this time we need to stretch our UI component. We
    can change the color of our navigation bar for better visibility. To change our
    navigation bar color, we need to apply the following code. We can insert the following
    code in the `didFinishLaunchingWithOptions:` method of `AppDelegate.m`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们的简单UI，但这次我们需要拉伸我们的UI组件。我们可以更改导航栏的颜色以提高可见性。要更改我们的导航栏颜色，我们需要应用以下代码。我们可以在`AppDelegate.m`中的`didFinishLaunchingWithOptions:`方法中插入以下代码：
- en: '[PRE0]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, we need some changes in our `StudentRegistration-Info.plist` file. Make
    the changes according to the following screenshot:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要在`StudentRegistration-Info.plist`文件中进行一些更改。根据以下截图进行更改：
- en: '![Exploring various UI components with libraries](img/1829OT_03_05.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![使用库探索各种UI组件](img/1829OT_03_05.jpg)'
- en: 'After running our project, the output will look like this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 运行我们的项目后，输出将看起来像这样：
- en: '![Exploring various UI components with libraries](img/1829OT_03_06.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![使用库探索各种UI组件](img/1829OT_03_06.jpg)'
- en: 'Now, tap on the **+ Add Student** button; it will push our app to another view
    and our screen will look like this:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击**+ 添加学生**按钮；它将推动我们的应用进入另一个视图，我们的屏幕将看起来像这样：
- en: '![Exploring various UI components with libraries](img/1829OT_03_07.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![使用库探索各种UI组件](img/1829OT_03_07.jpg)'
- en: Database integration
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库集成
- en: 'Databases are a way to save our data in computer memory. A database is a set
    of data held in computers, and can be accessible in many ways. In iOS, there is
    mainly only one type of database: **SQLite**.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库是将我们的数据保存在计算机内存中的方式。数据库是一组保存在计算机中的数据，可以通过多种方式访问。在iOS中，主要只有一种类型的数据库：**SQLite**。
- en: SQLite
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQLite
- en: SQLite is an embedded implementation of SQL. SQLite is an in-process library
    that implements a self-contained, zero-configuration, server-less, and transactional
    SQL database engine. The source code for SQLite exists in the public domain and
    is free for both private and commercial purposes. SQLite is available for several
    programming languages such as C, C++, Java, and so on. It is also available in
    several operating systems such as iOS, Android, Symbian, Blackberry, and so on.
    SQLite is used for handling data files or creating data files in iOS. It can be
    easily performed by using SQL queries. SQLite works on the principle of RDBMS
    in which data is stored in a table and the relationship is also stored inside
    the table.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite是SQL的嵌入式实现。SQLite是一个进程内库，它实现了一个自包含、零配置、无服务器和事务性的SQL数据库引擎。SQLite的源代码存在于公共领域，并且对私人用途和商业用途都是免费的。SQLite适用于多种编程语言，如C、C++、Java等。它也适用于多种操作系统，如iOS、Android、Symbian、Blackberry等。SQLite用于在iOS中处理数据文件或创建数据文件。它可以通过使用SQL查询轻松执行。SQLite基于RDBMS的原则工作，其中数据存储在表中，关系也存储在表中。
- en: 'So we can use SQLite in our project, a library and a framework are provided
    by Apple: `ibsqlite3.dylib` and `sqlite3.h` respectively. There are several functions
    of SQLite. The important functions are as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以在项目中使用SQLite，Apple提供了一个库和一个框架：`ibsqlite3.dylib`和`sqlite3.h`。SQLite有几个功能。重要的功能如下：
- en: '`sqlite3_open()`: This function creates and opens an empty database. If the
    database already exists, it will only open the database.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlite3_open()`: 此函数创建并打开一个空数据库。如果数据库已存在，它将仅打开数据库。'
- en: '`sqlite3_close()`: This function is used to close an opened SQLite database
    connection. It will free all the resources associated with the database connection.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlite3_close()`: 此函数用于关闭已打开的 SQLite 数据库连接。它将释放与数据库连接关联的所有资源。'
- en: '`sqlite3_prepare_v2()`: This function is needed to compile the SQL statement
    into byte code. It basically transforms a SQL statement in to an executable piece
    of code.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlite3_prepare_v2()`: 此函数用于将 SQL 语句编译成字节码。它基本上将 SQL 语句转换成可执行的代码片段。'
- en: '`sqlite3_step()`: This function will call a previously prepared SQL statement.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlite3_step()`: 此函数将调用之前准备好的 SQL 语句。'
- en: '`sqlite3_finalize()`: This function deletes a previously prepared SQL statement
    from memory.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlite3_finalize()`: 此函数从内存中删除之前准备的 SQL 语句。'
- en: '`sqlite3_exec()`: This combines the functionality of `sqlite3_prepare_v2()`,
    `sqlite3_step()`, and `sqlite3_finalize()` into a single function call.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqlite3_exec()`: 此函数将 `sqlite3_prepare_v2()`、`sqlite3_step()` 和 `sqlite3_finalize()`
    的功能合并为单个函数调用。'
- en: 'Let''s carry out a small activity to understand SQLite in a better way. We
    will extend the previous app. Open that app and proceed with the following steps:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进行一个小活动，以更好地理解 SQLite。我们将扩展之前的应用程序。打开该应用程序，按照以下步骤进行：
- en: Go to **Project Settings** | **General**. Now, scroll down and click on **+**
    to add framework. Search for SQLite framework and click on **Add**, as shown in
    the following screenshot:![SQLite](img/1829OT_03_08.jpg)
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 **项目设置** | **常规**。现在，向下滚动并点击 **+** 添加框架。搜索 SQLite 框架并点击 **添加**，如图所示：![SQLite](img/1829OT_03_08.jpg)
- en: 'Import the following header file for SQLite in the new class that we added
    in the previous steps:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在之前步骤中添加的新类中导入以下 SQLite 头文件：
- en: '[PRE1]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, make an object for SQLite in the interface part as follows:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在界面部分创建 SQLite 对象，如下所示：
- en: '[PRE2]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, link all the text fields and the **Save** button to the `.h` file of the
    newly added class file.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将所有文本字段和 **保存** 按钮链接到新添加的类文件的 `.h` 文件。
- en: 'Now, go to the `Save` method in the `.m` file and write the following code
    for SQLite integration:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，转到 `.m` 文件中的 `Save` 方法，并编写以下代码以实现 SQLite 集成：
- en: '[PRE3]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Compile and run your app, insert text in all the text fields, and click on **Save**,
    as shown in the following screenshot. In the console, the output will be **Database
    SAVED**.![SQLite](img/1829OT_03_09.jpg)
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译并运行您的应用程序，在所有文本字段中输入文本，然后点击 **保存**，如图所示。在控制台中，输出将是 **数据库已保存**。![SQLite](img/1829OT_03_09.jpg)
- en: Clicking on the **Save** button will clear all our text fields (as shown in
    the following screenshot) and save our inputs to the database:![SQLite](img/1829OT_03_10.jpg)
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **保存** 按钮将清除所有文本字段（如图所示）并将我们的输入保存到数据库中：![SQLite](img/1829OT_03_10.jpg)
- en: This is all there is to integrating a SQLite database with our App.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是将 SQLite 数据库与我们的应用程序集成的全部内容。
- en: Core Data
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Core Data
- en: It's used in thousands of applications and by millions of people, both on iOS
    and OS X. Core Data is maintained by Apple and is very well documented. It's a
    mature framework. Core Data takes advantage of the Objective-C language and its
    runtime, and easily integrates with the Core Foundation framework. The result
    is an easy-to-use framework for managing an object graph that is easy to use and
    is very efficient in terms of memory usage. Core Data is a powerful framework
    provided by Apple to include data in applications. It is even more preferable
    because it doesn't use processes and can easily maintain the relation between
    data.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 它被成千上万的应用程序和数百万的人使用，包括 iOS 和 OS X。Core Data 由苹果公司维护，并且有很好的文档记录。它是一个成熟的框架。Core
    Data 利用 Objective-C 语言及其运行时，并易于与 Core Foundation 框架集成。结果是，一个易于使用且在内存使用方面非常高效的框架，用于管理易于使用且内存使用效率高的对象图。Core
    Data 是苹果公司提供的强大框架，用于在应用程序中包含数据。它甚至更受欢迎，因为它不使用进程，并且可以轻松维护数据之间的关系。
- en: 'Apple defines a framework for Core Data known as `CoreData.framework`. Before
    using Core Data in our app, we need to add this framework in our project. Core
    Data is itself not a database of our application; it is a framework that manages
    an object graph. With Core Data, we can easily trace the objects in our apps to
    the table records in the database without firing any SQL query. In Core Data,
    we need to add three different instances to deal with the database, which are
    as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果定义了一个名为`CoreData.framework`的框架，用于Core Data。在我们应用中使用Core Data之前，我们需要将此框架添加到我们的项目中。Core
    Data本身不是我们应用程序的数据库；它是一个管理对象图的框架。使用Core Data，我们可以轻松地将我们应用中的对象追踪到数据库中的表记录，而无需执行任何SQL查询。在Core
    Data中，我们需要添加三个不同的实例来处理数据库，如下所示：
- en: '**Persistent store coordinator**: As the name suggests, it is a coordinator
    that coordinates between managing object contexts and low-level files saved in
    our database (SQLite file). We cannot use it directly; it will only be used while
    setting up `NSManageObjectContext`. Creating linkage for persistent store coordinates
    automatically creates linkage for SQLite files.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持久存储协调器**：正如其名所示，它是一个协调器，在管理对象上下文和存储在我们数据库（SQLite文件）中的低级文件之间进行协调。我们无法直接使用它；它只会在设置`NSManageObjectContext`时使用。为持久存储协调器创建链接会自动为SQLite文件创建链接。'
- en: '**Managed object context**: We can think of it as a scratch pad (a small, fast
    memory for the temporary storage of data). When we fetch objects from a persistent
    store, we get temporary copies into the scratch pad. Then we can use and modify
    those objects however we like without saving those data; the persistence remains
    unchanged.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**托管对象上下文**：我们可以将其视为一个草稿本（一个小型、快速的临时数据存储内存）。当我们从持久存储中检索对象时，我们会将其临时副本放入草稿本中。然后我们可以随意使用和修改这些对象，而不保存这些数据；持久性保持不变。'
- en: '**NSManageObjectModel**: A managed object model is an instance of the `NSManagedObjectModel`
    class. It describes a schema (contains definitions) for objects (also called entities).'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NSManageObjectModel**：一个托管对象模型是`NSManagedObjectModel`类的实例。它描述了一个对象（也称为实体）的模式（包含定义）。'
- en: 'Let''s understand Core Data with an activity:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个活动来了解Core Data：
- en: To create the example application project, launch Xcode and select the option
    to create a new project. In the new project window, select the **Empty Application**
    option. In the **Product Name** field, enter `CoreData`, enable the **Use Core
    Data** checkbox, and click on **Next** to select a location to store the project
    files, as shown in the following screenshot:![Core Data](img/1829OT_03_11.jpg)
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建示例应用程序项目，请启动Xcode并选择创建新项目的选项。在新项目窗口中，选择**空应用程序**选项。在**产品名称**字段中输入`CoreData`，启用**使用Core
    Data**复选框，然后点击**下一步**以选择存储项目文件的位置，如图所示：![Core Data](img/1829OT_03_11.jpg)
- en: In addition to the usual files that are present when creating a new project,
    this time an additional file named `CoreData.xcdatamodeld` is also created. This
    is the file where the entity descriptions for our data model are going to be stored.
    The entity description defines the model for our data, much in the way a schema
    defines the model of a database table. To create the entity for the `CoreData`
    application, select the `CoreData.xcdatamodeld` file to load the entity editor,
    as shown in the following screenshot:![Core Data](img/1829OT_03_12.jpg)
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了创建新项目时通常存在的文件外，这次还创建了一个名为`CoreData.xcdatamodeld`的附加文件。这个文件将用于存储我们数据模型的实体描述。实体描述定义了我们的数据模型，就像模式定义了数据库表的模式一样。要为`CoreData`应用程序创建实体，选择`CoreData.xcdatamodeld`文件以加载实体编辑器，如图所示：![Core
    Data](img/1829OT_03_12.jpg)
- en: To create a new entity, click on the **Add Entity** button located in the bottom
    panel. Double-click on the new **Entity** item that appears beneath the **Entities**
    heading and change the entity name to `Contacts`. With the entity created, the
    next step is to add some attributes that represent the data that is to be stored.
    To do so, click on the **Add Attribute** button. In the **Attributes** pane, name
    the attribute as `name` and set the type to `String`. Repeat these steps to add
    two other String attributes named `address` and `phone` respectively, as shown
    in the following screenshot:![Core Data](img/1829OT_03_13.jpg)
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建一个新的实体，点击位于底部面板中的 **添加实体** 按钮。在 **实体** 标题下双击新出现的 **实体** 项目，并将实体名称更改为 `Contacts`。实体创建后，下一步是添加一些属性来表示要存储的数据。为此，点击
    **添加属性** 按钮。在 **属性** 面板中，将属性命名为 `name` 并将其类型设置为 `String`。重复这些步骤添加另外两个名为 `address`
    和 `phone` 的 String 属性，如图所示：![Core Data](img/1829OT_03_13.jpg)
- en: Now, we need to create our own storyboard file and view controller class. To
    add a storyboard file, navigate to **File** | **New** | **File…** and, in the
    resulting dialog, select the **User Interface** category from beneath **iOS**
    in the left-hand-side panel. In the main panel, select the **Storyboard** option
    and click on **Next**, as shown in the following screenshot:![Core Data](img/1829OT_03_14.jpg)
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要创建自己的故事板文件和视图控制器类。要添加故事板文件，导航到 **文件** | **新建** | **文件…**，在弹出的对话框中，从左侧面板的
    **iOS** 下方选择 **用户界面** 类别。在主面板中，选择 **故事板** 选项，然后点击 **下一步**，如图所示：![Core Data](img/1829OT_03_14.jpg)
- en: Name the storyboard as `Main` (as shown in the following screenshot), select
    a location in the project for the new file, and then click on **Create**.![Core
    Data](img/1829OT_03_15.jpg)
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将故事板命名为 `Main`（如图所示），选择项目中的新文件位置，然后点击 **创建**。![Core Data](img/1829OT_03_15.jpg)
- en: 'Next, edit the `AppDelegate.m` file and modify the `didFinishLaunchingWithOptions`
    method so that it simply returns `YES` instead of creating a window for the application
    (since we are now using a storyboard file for the user interface, this is no longer
    needed):'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，编辑 `AppDelegate.m` 文件并修改 `didFinishLaunchingWithOptions` 方法，使其仅返回 `YES`，而不是为应用程序创建窗口（因为我们现在使用的是故事板文件来设计用户界面，这不再需要）：
- en: '[PRE4]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, we need a new Objective-C file. So add a new file from the menu and name
    it `CoreDataViewController`.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要一个新的 Objective-C 文件。因此，从菜单中添加一个新文件，并将其命名为 `CoreDataViewController`。
- en: In storyboard, drag `ViewController` from the interface builder and design it
    as shown in the following screenshot:![Core Data](img/1829OT_03_16.jpg)
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在故事板中，从界面构建器拖动 `ViewController` 并设计如图所示的界面：![Core Data](img/1829OT_03_16.jpg)
- en: Don't forget to give a name to this view from the inspector editor on the right-hand
    side of Xcode.
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不要忘记在 Xcode 右侧的检查器编辑器中为这个视图命名。
- en: 'Now, it is time to make connections between the storyboard and the newly added
    Objective-C file, (`CoreDataViewController.h`). We also need to import the `AppDelegate.h`
    class to our new class as follows:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，是时候在故事板和新增的 Objective-C 文件（`CoreDataViewController.h`）之间建立连接了。我们还需要将 `AppDelegate.h`
    类导入到我们的新类中，如下所示：
- en: '[PRE5]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Our `.h` class probably looks the following screenshot:'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们的 `.h` 类可能看起来如下所示：
- en: '![Core Data](img/1829OT_03_17.jpg)'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Core Data](img/1829OT_03_17.jpg)'
- en: 'When the user touches the **Save** button, the `Save` method is called. It
    is within this method, therefore, that we must implement the code to obtain the
    managed object context, and create and store managed objects containing the data
    entered by the user. Select the `CoreDataViewController.m` file, scroll down to
    the template `Save` method, and implement the code as follows:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户触摸 **保存** 按钮时，将调用 `Save` 方法。因此，我们必须在这个方法中实现代码以获取托管对象上下文，并创建和存储包含用户输入数据的托管对象。选择
    `CoreDataViewController.m` 文件，向下滚动到模板 `Save` 方法，并实现以下代码：
- en: '[PRE6]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The final step is to build and run the application. Click on the **Run** button
    located in the toolbar of the main Xcode project window and enter the example
    text in to the text fields, as shown in the following screenshot:![Core Data](img/1829OT_03_18.jpg)
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是构建和运行应用程序。点击主 Xcode 项目窗口工具栏中的 **运行** 按钮，并将示例文本输入到文本框中，如图所示：![Core Data](img/1829OT_03_18.jpg)
- en: After tapping on the **Save** button, our data is saved in the database and
    our label is changed into **Contact saved**, as shown in the following screenshot:![Core
    Data](img/1829OT_03_19.jpg)
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **保存** 按钮后，我们的数据将保存在数据库中，并且标签将变为 **联系人已保存**，如图所示：![Core Data](img/1829OT_03_19.jpg)
- en: Social integration in our application
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们应用中的社交集成
- en: 'Integration of social sites in an app is very common nowadays. In iOS 6, a
    new framework is introduced known as **Social.framework**. The social framework
    lets us integrate social networking services such as Facebook and Twitter in our
    application. We don''t have to download any SDK or use any API; Social framework
    handles everything. One class is important for integrating social networking services:
    `SLComposeViewController`. The `SLComposeViewController` class presents a standard
    view for users to compose tweet or Facebook posts. This class also allows users
    to share location without any additional code.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用中集成社交网站现在非常普遍。在 iOS 6 中，引入了一个名为 **Social.framework** 的新框架。社交框架让我们能够将 Facebook
    和 Twitter 等社交网络服务集成到我们的应用中。我们不需要下载任何 SDK 或使用任何 API；社交框架处理一切。对于集成社交网络服务，一个重要的类是
    `SLComposeViewController`。`SLComposeViewController` 类提供了一个标准的视图，供用户编写推文或 Facebook
    帖文。此类还允许用户在不添加任何额外代码的情况下分享位置。
- en: The work of the `SLComposeViewController` class is to get the Twitter or Facebook
    screen on our device to enable sharing.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`SLComposeViewController` 类的工作是在我们的设备上获取 Twitter 或 Facebook 的屏幕，以实现分享。'
- en: 'Now, in order to handle the API and connection, another class is available
    in Social framework: `SLRequest`. The `SLRequest` class allows iOS applications
    to interact directly with social network APIs through HTTP-based requests.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了处理 API 和连接，Social 框架中提供了一个新的类：`SLRequest`。`SLRequest` 类允许 iOS 应用通过基于 HTTP
    的请求直接与社交网络 API 交互。
- en: 'Let''s carry out one simple activity to understand social integration in a
    better way:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进行一项简单的活动，以更好地理解社交集成：
- en: Again, continue with the previous project. Open that project and add one new
    Objective-C class as we did earlier and name it.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，继续使用之前的项目。打开该项目，并添加一个新 Objective-C 类，就像我们之前做的那样，并给它命名。
- en: Drag a new view controller near or below the third view controller and add two
    buttons named `Tweet` and `Facebook` respectively.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的视图控制器拖动到第三个视图控制器附近或下方，并分别添加名为 `Tweet` 和 `Facebook` 的两个按钮。
- en: Add one more button in the second view below the **Add Student** button and
    name it (for example, `Share on Facebook or Twitter`).
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第二个视图中（在 **添加学生** 按钮下方）添加一个按钮，并给它命名（例如，`分享到 Facebook 或 Twitter`）。
- en: Now, give the new view (the fourth view) the same name as the new class in the
    inspector element.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在检查元素中将新的视图（第四个视图）的名称与新的类相同。
- en: Click on the **Share on Facebook or Twitter** button and choose the action and
    link it to the fourth (new) view. Storyboard will look like this:![Social integration
    in our application](img/1829OT_03_20.jpg)
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **分享到 Facebook 或 Twitter** 按钮，选择操作并将其链接到第四个（新）视图。故事板将看起来像这样：![我们应用中的社交集成](img/1829OT_03_20.jpg)
- en: Link both the buttons (**Tweet** and **Facebook**) to the new class.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个按钮（**Tweet** 和 **Facebook**）链接到新的类。
- en: Add a new framework, `Social.framework`, to our code.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的框架 `Social.framework` 添加到我们的代码中。
- en: 'Import the header to the new class `.h` file:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将头文件导入到新的 `.h` 类文件中：
- en: '[PRE7]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add the following code in the new class `.m` file:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新的 `.m` 类文件中添加以下代码：
- en: '[PRE8]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Compile and run the project. The output will look like the following screenshot:![Social
    integration in our application](img/1829OT_03_21.jpg)
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译并运行项目。输出结果将类似于以下截图：![我们应用中的社交集成](img/1829OT_03_21.jpg)
- en: Click on the **Share on Facebook or Twitter** button. The output will be as
    follows:![Social integration in our application](img/1829OT_03_22.jpg)
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **分享到 Facebook 或 Twitter** 按钮。输出结果如下：![我们应用中的社交集成](img/1829OT_03_22.jpg)
- en: Now, click on the **Tweet** button. The output will look like this:![Social
    integration in our application](img/1829OT_03_23.jpg)
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击 **Tweet** 按钮。输出结果如下：![我们应用中的社交集成](img/1829OT_03_23.jpg)
- en: This output appears because we didn't manage the settings in the simulator.
    When you set your account in **Settings**, it will able to post our tweet on Twitter;
    or when we run it on the actual device, it will work properly.
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种输出出现是因为我们没有在模拟器中管理设置。当你在 **设置** 中设置你的账户时，它将能够在我们 Twitter 上发布推文；或者当我们实际在设备上运行它时，它将正常工作。
- en: Now, click on the **Facebook** button, the output will be as follows:![Social
    integration in our application](img/1829OT_03_24.jpg)
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击 **Facebook** 按钮，输出结果如下：![我们应用中的社交集成](img/1829OT_03_24.jpg)
- en: This activity is only for sharing something on our post. For creating a login
    we need Facebook SDK. Logging in with Facebook not only allows you to attach a
    social characteristic into your app, but it can also be used as a login system
    instead of creating a custom one. To create a Facebook login, we need to download
    the Facebook SDK from [https://developers.facebook.com/docs/ios](https://developers.facebook.com/docs/ios).
    There are a lot of classes available in this SDK. Most tasks are handled by those
    classes. Developers don't have to bother about everything. They are only required
    to add the login view to the view controller.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动仅用于在我们的帖子中分享一些内容。为了创建登录功能，我们需要Facebook SDK。使用Facebook登录不仅可以将社交特性添加到您的应用中，还可以用作登录系统，而不是创建一个自定义的登录系统。要创建Facebook登录，我们需要从[https://developers.facebook.com/docs/ios](https://developers.facebook.com/docs/ios)下载Facebook
    SDK。此SDK中提供了许多类。大多数任务都由这些类处理。开发者无需担心所有事情。他们只需将登录视图添加到视图控制器中即可。
- en: 'This activity is a little complex and the method is also long, so you can go
    through the link: [http://www.appcoda.com/ios-programming-facebook-login-sdk/](http://www.appcoda.com/ios-programming-facebook-login-sdk/)
    and get appropriate examples of Facebook login. Follow the steps given in the
    link and you will get an output similar to the following screenshot:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动稍微复杂一些，方法也较长，因此您可以查看以下链接：[http://www.appcoda.com/ios-programming-facebook-login-sdk/](http://www.appcoda.com/ios-programming-facebook-login-sdk/)，获取Facebook登录的适当示例。按照链接中给出的步骤操作，您将得到类似于以下截图的输出：
- en: '![Social integration in our application](img/1829OT_03_25.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![我们应用中的社交集成](img/1829OT_03_25.jpg)'
- en: Summary
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned some more about the UI and how to integrate frameworks
    in your project. You also made a simple app, `Student Registration`, by exploring
    each section. And, at the end of the chapter, you created a fully-loaded app with
    a UI and its functionalities. You also learned about databases with social media
    integration.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了更多关于UI以及如何在项目中集成框架的知识。您通过探索每个部分，制作了一个简单的应用，`学生注册`。在章节的结尾，您创建了一个具有UI及其功能的完整应用。您还学习了关于数据库和社交媒体集成的知识。
- en: In next chapter, you will learn about new frameworks and APIs and various new
    concepts.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习关于新的框架和API以及各种新概念。
