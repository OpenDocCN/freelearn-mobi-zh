- en: Spring Modules for Android
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android的Spring模块
- en: This chapter will cover the modules and features that support Spring for Android
    and use REST in Android as a client. There are some modules that help request
    and retrieve REST APIs. They also provide security, such as *basic authentication*
    and *OAuth2*. Because of these securities, the resources of the server are secured
    and are therefore difficult to hack. Even a client needs to be granted permission
    from the owner to use the resources from the protected server. The modules also incorporate
    a strong OAuth-based authorization client and implementations for mainstream social
    websites, such as Google, Twitter, Facebook, and so on.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节将涵盖支持Spring for Android的模块和功能，以及在Android中使用REST作为客户端。有一些模块有助于请求和检索REST API。它们还提供安全功能，如*基本认证*和*OAuth2*。由于这些安全措施，服务器资源得到保护，因此难以被黑客攻击。即使客户端也需要从资源所有者那里获得权限才能使用受保护服务器的资源。这些模块还集成了强大的基于OAuth的授权客户端和主流社交网站（如Google、Twitter、Facebook等）的实现。
- en: 'This chapter covers the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节涵盖了以下主题：
- en: The `RestTemplate` module.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: The `RestTemplate` module.
- en: The Gradle and Maven repository
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: The Gradle and Maven repository
- en: '`RestTemplate` module'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RestTemplate`模块'
- en: Retrofit
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Retrofit
- en: Creating an Android app
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个Android应用
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The Android SDK is required to develop Android applications. The developers
    used Eclipse and the Android plugin to develop Android applications at the beginning
    of the Android development. But later, Google announced that Android Studio is
    the official tool for Android application development. It has all the vital modules,
    such as Gradle, Maven, Android SDK, NDK, Java JDK, and so on, so we don't have
    to utilize the Terminal command line. In [Chapter 1](bfdcd6b3-5a5a-4fc7-af79-67e780f46ccb.xhtml),
    *About the Environment*, we demonstrated how to download and create a sample Android
    application using Android Studio.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 开发Android应用需要Android SDK。开发者最初使用Eclipse和Android插件来开发Android应用。但后来，Google宣布Android
    Studio是Android应用开发的官方工具。它包含所有必要的模块，如Gradle、Maven、Android SDK、NDK、Java JDK等，因此我们不需要使用终端命令行。在[第1章](bfdcd6b3-5a5a-4fc7-af79-67e780f46ccb.xhtml)，*关于环境*中，我们展示了如何使用Android
    Studio下载和创建一个示例Android应用。
- en: The source code with an example for this chapter is available on GitHub at the
    following link: [https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter04](https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter04)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节的示例源代码可在GitHub上通过以下链接获取：[https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter04](https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter04)
- en: REST client module
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: REST客户端模块
- en: '**Representational State Transfer** (**REST**) is designed to take advantage
    of the existing protocols. The consistent systems of REST are often called **RESTful
    systems**. It can be used over almost every protocol, but it normally takes advantage
    of HTTP during the use of web APIs. It makes it simpler for systems to speak with
    one another. These systems are portrayed by how they are stateless and separate
    the concerns of the client and server. We will go in depth into what these terms
    mean and why they are advantageous qualities for services on the web.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**表示状态转移**（**REST**）旨在利用现有协议的优势。REST的一致性系统通常被称为**RESTful系统**。它几乎可以在任何协议上使用，但在使用Web
    API时通常利用HTTP。这使得系统之间的通信更加简单。这些系统通过它们无状态和分离客户端和服务器关注点的方式被描述。我们将深入探讨这些术语的含义以及为什么它们是Web服务有利的特性。'
- en: A RESTful web service is responded to with a payload formatted in either HTML,
    XML, JSON, or some other format. The response can affirm that a change has been
    made to the requested response, and the reaction can give hypertext links that
    are related to other resources, or a bundle of resources. At the point in which
    HTTP is utilized, as is normal, the tasks that are accessible are `GET`, `POST`,
    `PUT`, `DELETE`, and other predefined HTTP functions.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: A RESTful web service is responded to with a payload formatted in either HTML,
    XML, JSON, or some other format. The response can affirm that a change has been
    made to the requested response, and the reaction can give hypertext links that
    are related to other resources, or a bundle of resources. At the point in which
    HTTP is utilized, as is normal, the tasks that are accessible are `GET`, `POST`,
    `PUT`, `DELETE`, and other predefined HTTP functions.
- en: 'To use Spring for Android, you can use different HTTP libraries. Spring has
    suggested using `RestTemplate` for Android. This is now outdated and may not be
    supported for the newer Android version. However, now, you can find some libraries
    that are easier and more powerful, with lots of features. You can use a different
    HTTP library, such as  one of the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Spring for Android，您可以使用不同的HTTP库。Spring建议使用`RestTemplate`用于Android。这现在已经过时，可能不会支持较新的Android版本。然而，现在您可以找到一些更简单、更强大且功能丰富的库。您可以使用不同的HTTP库，例如以下之一：
- en: '`RestTemplate`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RestTemplate`'
- en: Retrofit
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Retrofit
- en: Volley
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Volley
- en: We will explore the use of all of these libraries in this chapter. In our upcoming
    chapters, we will use Retrofit because it's easier, updated, robust, and requires
    less code to be written. However, you can use any of them in your projects.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中探讨所有这些库的使用。在我们的后续章节中，我们将使用Retrofit，因为它更简单、更新、健壮，并且需要编写的代码更少。然而，您可以在项目中使用任何这些库。
- en: The RestTemplate module
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RestTemplate模块
- en: '`RestTemplate` is a robust and Java-based REST client. In Android application
    development, we can use the `RestTemplate` module, which will provide a template
    to request and retrieve a REST API. `RestTemplate` is Spring''s core class for
    synchronous client-side HTTP access. It''s intended to disentangle correspondence
    with HTTP servers and authorize RESTful standards.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`RestTemplate`是一个健壮的基于Java的REST客户端。在Android应用程序开发中，我们可以使用`RestTemplate`模块，它将提供一个模板来请求和检索REST
    API。`RestTemplate`是Spring的同步客户端HTTP访问的核心类。它的目的是解开与HTTP服务器的通信并授权RESTful标准。'
- en: '`RestTemplate` is the main class for synchronous RESTful HTTP requests. A native
    Android HTTP client library is used to retrieve requests. The default **`ClientHttpRequestFactory`, **which
    is utilized when you make another `RestTemplate` example, varies depending on
    the adaptation of Android on which your application is running.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`RestTemplate`是同步RESTful HTTP请求的主要类。使用一个本地的Android HTTP客户端库来检索请求。默认的**`ClientHttpRequestFactory`**，在您创建另一个`RestTemplate`示例时使用，取决于您的应用程序运行的Android版本。'
- en: Gradle and Maven repository
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gradle和Maven仓库
- en: To develop an Android application, we have to implement or compile a few dependencies.
    Android officially supports Gradle to implement or compile dependencies. Android
    also supports Maven, so if you want to use Maven, then you need to modify `pom.xml`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要开发Android应用程序，我们必须实现或编译一些依赖项。Android官方支持Gradle来实现或编译依赖项。Android也支持Maven，因此如果您想使用Maven，则需要修改`pom.xml`。
- en: You can check the latest version of the dependency at [https://mvnrepository.com/artifact/org.springframework.android/spring-android-core ](https://mvnrepository.com/artifact/org.springframework.android/spring-android-core)for
    implementing `spring-android-core`, which has the core modules for Android.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://mvnrepository.com/artifact/org.springframework.android/spring-android-core](https://mvnrepository.com/artifact/org.springframework.android/spring-android-core)检查实现`spring-android-core`的依赖项的最新版本，该依赖项包含了Android的核心模块。
- en: You can check the latest version of the dependency at [https://mvnrepository.com/artifact/org.springframework.android/spring-android-rest-template ](https://mvnrepository.com/artifact/org.springframework.android/spring-android-rest-template)for implementing `spring-android-rest-template`,
    which has the all modules for `RestTemplate`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://mvnrepository.com/artifact/org.springframework.android/spring-android-rest-template](https://mvnrepository.com/artifact/org.springframework.android/spring-android-rest-template)检查实现`spring-android-rest-template`的依赖项的最新版本，该依赖项包含了所有用于`RestTemplate`的模块。
- en: Now, we will look at the use of Gradle and Maven for the Android project.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将探讨在Android项目中使用Gradle和Maven的方法。
- en: Gradle
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gradle
- en: Gradle is a build system that's used to build Android bundles (APK files) by
    overseeing conditions and giving custom build logic. It is a JVM-based form framework,
    meaning that you can compose your own content in Java, which Android Studio makes
    use of.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle是一个构建系统，用于通过监控条件和提供自定义构建逻辑来构建Android包（APK文件）。它是一个基于JVM的框架，这意味着您可以使用Java编写自己的内容，Android
    Studio正是利用了这一点。
- en: In Android Studio, Gradle is a custom form apparatus that's used to fabricate
    Android bundles (APK files) by overseeing dependencies and giving custom form
    rationale. An APK file (Android application bundle) is an extraordinarily formatted
    compressed file that contains bytecode, resources (pictures, UI, XML, and so on),
    and manifest files.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中，Gradle是一个自定义的构建工具，用于通过监控依赖项和提供自定义构建逻辑来构建Android包（APK文件）。APK文件（Android应用程序包）是一个特殊格式的压缩文件，包含字节码、资源（图片、UI、XML等）和清单文件。
- en: 'The dependency command of how to implement these dependencies is shown in the
    following code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这些依赖项的依赖命令如下所示：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Maven
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Maven
- en: The Android Maven module is used to build applications for the Android OS and
    assemble libraries. These are to be used to create the **Android Archive Library**
    (**AAR**) and the inheritance APKLIB format, thus utilizing Apache Maven.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Android Maven 模块用于构建 Android OS 的应用程序和构建库。这些用于创建 **Android Archive Library**（**AAR**）和继承
    APKLIB 格式，从而使用 Apache Maven。
- en: 'Here is a code sample of how to add a dependency of Android in `pom.xml`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个如何在 `pom.xml` 中添加 Android 依赖项的代码示例：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: RestTemplate constructors
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RestTemplate 构造函数
- en: 'The four `RestTemplate` constructors are listed in the following code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码列出了四个 `RestTemplate` 构造函数：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This constructor has no parameter, by default. If you want to use a default
    set of message converters with another `RestTemplate` example, you can pass `TRUE`
    as a parameter. If you want to use another `ClientHttpRequestFactory`, then you
    need to pass it as a parameter.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此构造函数默认没有参数。如果您想使用另一个 `RestTemplate` 示例中的默认消息转换器集，可以将 `TRUE` 作为参数传递。如果您想使用另一个
    `ClientHttpRequestFactory`，则需要将其作为参数传递。
- en: RestTemplate functions
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RestTemplate 函数
- en: '`RestTemplate` gives a larger amount of functions. It has six primary HTTP functions,
    which makes it simple to conjure numerous RESTful services and authorize REST best
    practices. `RestTemplate`''s strategy name pursues a naming tradition; the initial
    segment demonstrates what the HTTP strategy is and the second part shows what
    will be returned. There is an interface called `ResponseErrorHandler` in  `RestTemplate` which
    is used to determine whether a particular response has an error or not. Here are
    the descriptions of the six HTTP functions.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`RestTemplate` 提供了大量的函数。它有六个主要的 HTTP 函数，这使得构建多个 RESTful 服务和授权 REST 最佳实践变得简单。`RestTemplate`
    的策略名称遵循一个命名传统；前缀部分展示了 HTTP 策略是什么，第二部分展示了将返回什么。在 `RestTemplate` 中有一个名为 `ResponseErrorHandler`
    的接口，用于确定特定响应是否有错误。以下是六个 HTTP 函数的描述。'
- en: HTTP GET
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP GET
- en: HTTP characterizes an arrangement of request functions to demonstrate the coveted
    activity to be performed for a given resource. The `GET` function requests a description
    of the predetermined resource and requests that utilizing `GET` should just retrieve
    data. `GET` is a standout among the most well-known HTTP functions.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 定义了一组请求函数，以展示针对给定资源的期望执行的活动。`GET` 函数请求预定资源的描述，并要求使用 `GET` 仅检索数据。`GET` 是最著名的
    HTTP 函数之一。
- en: 'Here are the common functions of HTTP `GET`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 HTTP `GET` 的常见函数：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here is an example of how to call these functions:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个如何调用这些函数的示例：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: HTTP POST
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP POST
- en: HTTP `POST` requests that the asset at the URI accomplishes something with the
    given substance. `POST` is often utilized to make another substance; however,
    it can likewise be utilized to refresh an element.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP `POST` 请求 URI 上的资产执行给定的操作。`POST` 通常用于创建新内容；然而，它也可以用于更新元素。
- en: 'Here are the common functions of HTTP `POST`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 HTTP `POST` 的常见函数：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here is an example of how to call these functions:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个如何调用这些函数的示例：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: HTTP PUT
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP PUT
- en: To store an element at a URI, the `PUT` function can create a new element or
    update a current one. A `PUT` request is idempotent. Idempotency is the fundamental
    contrast between the desires for `PUT` versus a `POST` request.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 URI 中存储一个元素，`PUT` 函数可以创建一个新的元素或更新现有的一个。`PUT` 请求是幂等的。幂等性是 `PUT` 请求与 `POST`
    请求的基本区别。
- en: 'Here are the common functions of HTTP `PUT`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 HTTP `PUT` 的常见函数：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here is an example of how to call the functions of HTTP `PUT`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个如何调用 HTTP `PUT` 函数的示例：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: HTTP DELETE
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP DELETE
- en: HTTP `DELETE` is a request function that is used to remove a resource. However,
    the resource does not have to be removed immediately. `DELETE` could be an asynchronous
    or long-running request.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP `DELETE` 是一个用于删除资源的请求函数。然而，资源不必立即删除。`DELETE` 可以是异步的或长时间运行的请求。
- en: 'Here are the common functions of HTTP `DELETE`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 HTTP `DELETE` 的常见函数：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here is an example of how to call these functions:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个如何调用这些函数的示例：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: HTTP OPTIONS
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP OPTIONS
- en: The HTTP `OPTIONS` function is utilized to depict the correspondence options
    for the target resource. The client can indicate a URL for the `OPTIONS` method,
    or a reference mark, `(*)`, to allude to the whole server.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP `OPTIONS` 函数用于描述目标资源的通信选项。客户端可以指定 `OPTIONS` 方法的 URL，或者使用参考标记 `(*)` 来引用整个服务器。
- en: 'Here are the common functions of HTTP `OPTIONS`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 HTTP `OPTIONS` 的常见功能：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here is an example of how to call the functions:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是如何调用函数的示例：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: HTTP HEAD
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP `HEAD`
- en: In the current version of Spring (4.3.10), `HEAD` is automatically supported.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前版本的 Spring（4.3.10）中，`HEAD` 被自动支持。
- en: '`@RequestMapping` functions mapped to `GET` are also implicitly mapped to `HEAD`,
    meaning that there is no need to have `HEAD` explicitly declared. An HTTP `HEAD`
    request is processed as if it were an HTTP `GET`, but instead of writing the body,
    only the number of bytes is counted, as well as the Content-Length header set.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 映射到 `GET` 的 `@RequestMapping` 函数也隐式映射到 `HEAD`，这意味着不需要显式声明 `HEAD`。HTTP `HEAD`
    请求的处理方式就像 HTTP `GET` 一样，但不同的是，不写入主体，只计算字节数以及 Content-Length 头。
- en: 'Here are the common functions of HTTP `HEAD`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 HTTP `HEAD` 的常见功能：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Retrofit
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Retrofit
- en: '**Retrofit** is a library that makes parsing an API reaction simple and better for
    utilization in the application. Retrofit is a REST client for Java and Android
    that makes it moderately simple to recover and transfer JSON by means of a REST-based
    web service. In Retrofit, you can arrange which converter is utilized for the
    information serialization. Normally, for JSON, you utilize Gson, but you can add
    custom converters to process XML or different conventions. Retrofit utilizes the
    `OkHttp` library for HTTP requests.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**Retrofit** 是一个库，它使解析 API 响应变得简单且易于在应用程序中使用。Retrofit 是一个 Java 和 Android 的
    REST 客户端，它通过基于 REST 的网络服务使恢复和传输 JSON 变得相对简单。在 Retrofit 中，你可以安排使用哪个转换器进行数据序列化。通常，对于
    JSON，你使用 Gson，但你可以添加自定义转换器来处理 XML 或其他格式。Retrofit 使用 `OkHttp` 库进行 HTTP 请求。'
- en: The use of Retrofit
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Retrofit 的使用
- en: 'To work with Retrofit, you will require the following three classes:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要与 Retrofit 一起使用，你需要以下三个类：
- en: A model class, which is utilized as a JSON model
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个模型类，用作 JSON 模型
- en: Interfaces that characterize the conceivable HTTP activities
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义可能 HTTP 请求的接口
- en: The `Retrofit.Builder` class, which utilizes the interface and the developer
    programming interface to permit characterizing the URL endpoint for HTTP activities.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Retrofit.Builder` 类，它使用接口和开发者编程接口来允许指定 HTTP 请求的 URL 端点。'
- en: Each function of an interface speaks to one conceivable programming interface
    call. It must have an HTTP annotation (`GET`, `POST`, `DELETE`, and so on) to
    determine the request type and the relative URL.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 接口中的每个函数代表一个可能的编程接口调用。它必须有一个 HTTP 注解（`GET`、`POST`、`DELETE` 等）来指定请求类型和相对 URL。
- en: Advantages of Retrofit
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Retrofit 的优势
- en: Retrofit is very easy to utilize. It basically gives you a chance to regard
    programming interface calls as straightforward Java method calls, so you just
    characterize which URLs to hit and the request/reaction parameters as Java classes.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Retrofit 非常容易使用。它基本上给你一个机会将编程接口调用视为简单的 Java 方法调用，因此你只需指定要访问的 URL 和请求/响应参数作为
    Java 类。
- en: The whole system call, plus JSON/XML parsing, is totally taken care of by Retrofit (with
    assistance from Gson for JSON parsing), alongside support for self-assertive formats
    with pluggable serialization/deserialization.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 整个系统调用，加上 JSON/XML 解析，完全由 Retrofit（在 Gson 的帮助下进行 JSON 解析）处理，同时支持可插拔的序列化和反序列化格式。
- en: Configuring Retrofit
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Retrofit
- en: Of course, Retrofit can just deserialize HTTP bodies into `OkHttp`'s `ResponseBody`
    type and it can acknowledge its `RequestBody` type for `@Body`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，Retrofit 可以将 HTTP 主体反序列化为 `OkHttp` 的 `ResponseBody` 类型，并且它可以接受其 `RequestBody`
    类型用于 `@Body`。
- en: 'Converters can be added in order to support different sorts. Seven kinds of
    modules adjust mainstream serialization libraries for your benefit. These include
    the following libraries:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 可以添加转换器以支持不同的类型。七种模块调整主流序列化库以供您使用。以下是一些库：
- en: '**Gson**: `com.squareup.retrofit2:converter-gson`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Gson**: `com.squareup.retrofit2:converter-gson`'
- en: '**Jackson**: `com.squareup.retrofit2:converter-jackson`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jackson**: `com.squareup.retrofit2:converter-jackson`'
- en: '**Moshi**: `com.squareup.retrofit2:converter-moshi`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Moshi**: `com.squareup.retrofit2:converter-moshi`'
- en: '**Protobuf**: `com.squareup.retrofit2:converter-protobuf`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Protobuf**: `com.squareup.retrofit2:converter-protobuf`'
- en: '**Wire**: `com.squareup.retrofit2:converter-wire`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Wire**: `com.squareup.retrofit2:converter-wire`'
- en: '**Simple XML**: `com.squareup.retrofit2:converter-simplexml`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Simple XML**: `com.squareup.retrofit2:converter-simplexml`'
- en: '**Scalars (primitives, boxed, and String)**: `com.squareup.retrofit2:converter-scalars`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Scalars (primitives, boxed, and String)**: `com.squareup.retrofit2:converter-scalars`'
- en: Downloading Retrofit
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载 Retrofit
- en: Download the latest JAR from [https://search.maven.org/remote_content?g=com.squareup.retrofit2&a=retrofit&v=LATEST](https://search.maven.org/remote_content?g=com.squareup.retrofit2&a=retrofit&v=LATEST).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 从 [https://search.maven.org/remote_content?g=com.squareup.retrofit2&a=retrofit&v=LATEST](https://search.maven.org/remote_content?g=com.squareup.retrofit2&a=retrofit&v=LATEST)
    下载最新的 JAR 文件。
- en: 'Alternatively, you can inject the dependency via Maven with the following code:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用以下代码通过 Maven 注入依赖项：
- en: '[PRE14]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Alternatively, you can use Gradle, as per the following code:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用以下代码使用 Gradle：
- en: '[PRE15]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: HTTP request functions
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP 请求函数
- en: Each function must have an HTTP annotation that gives the request function and
    relative URL. There are five built-in annotations—`GET`, `POST`, `PUT`, `DELETE`,
    and `HEAD`. The overall URL of the asset is indicated in the annotation.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 每个函数都必须有一个 HTTP 注解，该注解指定请求函数和相对 URL。有五个内置注解——`GET`、`POST`、`PUT`、`DELETE` 和 `HEAD`。资产的总体
    URL 由注解指示。
- en: Let's take a look at the use of these annotations. We are considering all the
    URLs based on GitHub API v3 ([https://developer.github.com/v3/](https://developer.github.com/v3/)).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这些注解的使用。我们考虑的是基于 GitHub API v3 的所有 URL ([https://developer.github.com/v3/](https://developer.github.com/v3/))。
- en: GET
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GET
- en: 'Let''s assume that you want to get a response to your details from your GitHub
    account. You need to use the following endpoint with the `@GET` function to get
    the user''s info:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想从您的 GitHub 账户获取详细信息响应。您需要使用以下端点以及 `@GET` 函数来获取用户信息：
- en: '[PRE16]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s assume that you want to create a new repo in your GitHub account. Here,
    you need to use the following endpoint with the `@POST` function:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想在您的 GitHub 账户中创建一个新的仓库。在这里，您需要使用以下端点以及 `@POST` 函数：
- en: '[PRE17]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: PUT
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PUT
- en: 'Let''s assume that you want to update a GitHub `Gist` object. You need to use
    the following endpoint with the `@PUT` function:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想更新 GitHub `Gist` 对象。您需要使用以下端点以及 `@PUT` 函数：
- en: '[PRE18]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: DELETE
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DELETE
- en: 'Let''s assume that you want to delete a repository from your GitHub account.
    In this case, you need to use the following endpoint with the `@DELETE` function:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想从您的 GitHub 账户删除一个仓库。在这种情况下，您需要使用以下端点以及 `@DELETE` 函数：
- en: '[PRE19]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: HEAD
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HEAD
- en: 'A request header can be refreshed progressively using the `@Header` annotation.
    If the value is invalid, the header will be overlooked:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `@Header` 注解逐步刷新请求头。如果值无效，则忽略该头：
- en: '[PRE20]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Creating an Android app
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Android 应用
- en: 'Let''s create a simple Android app as a client that will retrieve the REST
    API using the GitHub API. First of all, we need to create an app from Android
    Studio and put down our project and the company domain. Don''t forget to check **Include
    Kotlin support**. It will include all of the support of Kotlin. The following
    screenshot shows the **Create Android Project** window:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的 Android 应用程序作为客户端，该客户端将使用 GitHub API 获取 REST API。首先，我们需要在 Android
    Studio 中创建一个应用程序，并写下我们的项目和公司域名。别忘了勾选**包含 Kotlin 支持**。这将包括 Kotlin 的所有支持。以下截图显示了**创建
    Android 项目**窗口：
- en: '![](img/7bcaa137-45c0-45c7-bc1b-d99aec15152a.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7bcaa137-45c0-45c7-bc1b-d99aec15152a.png)'
- en: Then, select the minimum API version from the **Phone and Tablet** option. There
    is no need to add other options for this project. After clicking Next, in the
    **Add an Activity to Mobile **section, you can select **Empty Activity** and then,
    after renaming the **Activity Name** and layout, click Finish. After the build,
    you will be ready to start creating an Android app.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，从**手机和平板电脑**选项中选择最低 API 版本。对于此项目，无需添加其他选项。点击下一步后，在**添加到移动**部分，您可以选择**空活动**，然后重命名**活动名称**和布局，点击完成。构建完成后，您就可以开始创建
    Android 应用了。
- en: 'The final files of this project are shown in the following screenshot:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了此项目的最终文件：
- en: '![](img/6edfddbb-1421-48a1-b5b1-bf25f815c0c2.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6edfddbb-1421-48a1-b5b1-bf25f815c0c2.png)'
- en: Gradle information
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gradle 信息
- en: 'Here are the details of my Android Studio''s Gradle file:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我的 Android Studio 的 Gradle 文件详情：
- en: '[PRE21]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Gradle dependencies
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gradle 依赖项
- en: 'We will use Retrofit and its features, so we need to implement all the dependencies,
    as shown in the following code:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Retrofit 及其功能，因此需要实现所有依赖项，如下代码所示：
- en: '[PRE22]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Creating a model
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模型
- en: We will use the GitHub API. You can check all the REST API URLs at [https://api.github.com/](https://api.github.com/).
    We will use the simplest API, which has no security issues. We will show the list
    of a user's repositories. The API is [https://api.github.com/users/{user}/repos](https://api.github.com/users/%7Buser%7D/repos).
    You need a `GET` HTTP function with a username parameter.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用GitHub API。你可以检查所有REST API URL在[https://api.github.com/](https://api.github.com/)。我们将使用最简单的API，它没有安全问题。我们将显示用户仓库的列表。API是[https://api.github.com/users/{user}/repos](https://api.github.com/users/%7Buser%7D/repos)。你需要一个带有用户名的`GET`HTTP函数。
- en: 'The following screenshot shows the output of the REST API:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了REST API的输出：
- en: '![](img/2e4a3efe-9a90-438e-a6ff-3ebbcf9017b4.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2e4a3efe-9a90-438e-a6ff-3ebbcf9017b4.png)'
- en: The left-hand side of the preceding screenshot shows part of the content of
    a repo and the right-hand side is the collapsed total repo list.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张截图的左侧显示了仓库内容的一部分，右侧是折叠的仓库总列表。
- en: 'So, according to the API, we will create a user model for the client side.
    Here is the model class named `GitHubUserModel.kt`, where we will show only the
    name of the list of all the repos:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，根据API，我们将为客户端创建一个用户模型。这里是一个名为`GitHubUserModel.kt`的模型类，我们将只显示所有仓库列表的名称：
- en: '[PRE23]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Create an interface that will have the HTTP request functions. In this project, we
    will only use a `GET` function that retrieves all the details of the users. Here,
    we are using the `GET` Retrofit annotation to encode details about the parameters
    and the request function. For this function, our endpoint is `/users/{user}/repos`,
    where you need to add a parameter of the `userName` and it will provide a list
    of `UserModel`.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个将包含HTTP请求函数的接口。在这个项目中，我们只会使用一个`GET`函数来检索所有用户的详细信息。在这里，我们使用`GET`Retrofit注解来编码有关参数和请求函数的详细信息。对于这个函数，我们的端点是`/users/{user}/repos`，你需要添加一个`userName`参数，它将提供一个`UserModel`列表。
- en: 'Here is the code of the `GithubService` interface:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是`GithubService`接口的代码：
- en: '[PRE24]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Implementing a service
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现服务
- en: This class is responsible for the main task. It will be responsive for the control
    of all the tasks using the `Retrofit.builder` class and will configure it with
    the base of the given URL.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类负责主要任务。它将负责使用`Retrofit.builder`类控制所有任务，并将其配置为给定URL的基础。
- en: Here is the code of **`UserServiceImpl.kt`: **
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是`**UserServiceImpl.kt**`的代码：
- en: '[PRE25]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Here, our `baseUrl()` is `https://api.github.com/`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们的`baseUrl()`是`https://api.github.com/`。
- en: Calling callback
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调用回调
- en: Here, we are calling `CallBack<>` from the `MainActivity`. This callback will
    have the response of the REST API request.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们是从`MainActivity`调用`CallBack<>`。这个回调将包含REST API请求的响应。
- en: 'Let''s check the `MainActivity.kt` code:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查`MainActivity.kt`代码：
- en: '[PRE26]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: First of all, we need to initialize `GithubServiceImpl().getGithubServiceImpl(username,password)` so
    that we can call  `reposOfUser()` from  `UserService`. Here, I add my GitHub username
    in the parameter. Then, we will call `enqueue(retrofit2.Callback<T>)`, which will
    be executed asynchronously and send the request and get the response. It has two
    functions—`onResponse()` and `onFailure()`. If there is any server-related error,
    then it will call `onFailure()`, and if it gets the response and the resources,
    it will call `onResponse()`. We can use the resources of the `onResponse()` function
    for this.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要初始化`GithubServiceImpl().getGithubServiceImpl(username,password)`以便我们可以从`UserService`调用`reposOfUser()`。在这里，我在参数中添加了我的GitHub用户名。然后，我们将调用`enqueue(retrofit2.Callback<T>)`，这将异步执行并发送请求以获取响应。它有两个函数——`onResponse()`和`onFailure()`。如果有任何与服务器相关的错误，它将调用`onFailure()`，如果它收到响应和资源，它将调用`onResponse()`。我们可以使用`onResponse()`函数的资源。
- en: Here, we will get a response of the `UserModel` list. So, we can use this list
    to show our REST output in our application UI.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们将获取`UserModel`列表的响应。因此，我们可以使用这个列表在我们的应用程序UI中显示REST输出。
- en: Creating an interface
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个接口
- en: We will show a list of the user's details and the names of all the repos. Here,
    we will use `ListView.`
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将显示用户的详细信息以及所有仓库的名称。在这里，我们将使用`ListView`。
- en: 'Here is the code of the `acitivity_main.xml` file:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是`acitivity_main.xml`文件的代码：
- en: '[PRE27]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We will use this `listview` in the `onResponse()` function of `MainActivity`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`MainActivity`的`onResponse()`函数中使用这个`listview`。
- en: 'We will get the list and create a custom adapter to show the user list, as
    shown in the following code:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将获取列表并创建一个自定义适配器来显示用户列表，如下面的代码所示：
- en: '[PRE28]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Here, we get the list of repos and convert them into an array. Then, we create
    the native adapter for the list with `val adapter = ArrayAdapter<String>(this@MainActivity,
    android.R.layout.simple_list_item_1, listItems)` and set the adapter in our list
    with `displayList.adapter = adapter`.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们获取仓库列表并将它们转换为数组。然后，我们使用`val adapter = ArrayAdapter<String>(this@MainActivity,
    android.R.layout.simple_list_item_1, listItems)`创建列表的原生适配器，并在我们的列表中使用`displayList.adapter
    = adapter`设置适配器。
- en: You should never perform long-running tasks on the main thread. It will incur
    an **Application Not Responding** (**ANR**) message.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 你永远不应该在主线程上执行长时间运行的任务。这将导致出现**应用程序无响应**（**ANR**）消息。
- en: Mobile applications
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动应用
- en: 'So, after everything, run your server. Then, run your app. The following screenshot
    shows the output of our app:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在一切完成后，运行你的服务器。然后，运行你的应用。以下截图显示了我们的应用输出：
- en: '![](img/8ffb7df1-9c5d-4f8a-9556-88a7c0c99056.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8ffb7df1-9c5d-4f8a-9556-88a7c0c99056.png)'
- en: You can modify this as you wish, although you have to be careful about the endpoint
    and the model.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以随意修改，但要注意端点和模型。
- en: Summary
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have given a quick presentation of the ideas driving REST
    and the REST client modules. The RESTful HTTP way of dealing with uncovering functionality
    is unique. We have seen the different libraries of REST client functions. First,
    we saw what RestTemplate is and its implementation in an Android application.
    Now, we know about the constructors of RestTemplate and its functionalities. Furthermore,
    we have learned about Retrofit, allowing us to actualize Retrofit in an Android
    application. We have also seen the utilization of its functionalities. Lastly,
    we look at how to implement Retrofit to get data from a REST API.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们简要介绍了驱动REST和REST客户端模块的思想。RESTful HTTP处理未公开功能的方式是独特的。我们看到了不同的REST客户端函数库。首先，我们看到了RestTemplate是什么以及它在Android应用中的实现。现在，我们了解了RestTemplate的构造函数及其功能。此外，我们还学习了Retrofit，使我们能够在Android应用中实现Retrofit。我们还看到了其功能的利用。最后，我们探讨了如何实现Retrofit以从REST
    API获取数据。
- en: In the following chapters, we will develop a total project, including security,
    authorization/authentication, a database, and a custom REST API, with the Spring
    and Android application to deal with the API as a client. In these chapters, you
    will explore the full usage of the API and prepare to figure out how to make an
    API for a server and recover it from the client.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将开发一个完整的项目，包括安全、授权/身份验证、数据库和自定义REST API，使用Spring和Android应用作为客户端来处理API。在这些章节中，你将探索API的完整使用，并准备了解如何为服务器创建API并从客户端恢复它。
- en: Questions
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the difference between REST and RESTful?
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: REST和RESTful有什么区别？
- en: What is the architectural style for creating a web API?
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建Web API的架构风格是什么？
- en: What tools are required to test your web API?
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试你的Web API需要哪些工具？
- en: What are RESTful web services?
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是RESTful Web服务？
- en: What is a URI? What is the purpose of a URI in REST-based web services?
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是URI？URI在基于REST的Web服务中有什么作用？
- en: What does the HTTP Status Code `200` state?
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: HTTP状态码`200`表示什么？
- en: What does the HTTP Status Code `404` state?
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: HTTP状态码`404`表示什么？
- en: Further reading
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*Hands-On RESTful API Design Patterns and Best Practices* ([https://www.packtpub.com/application-development/hands-restful-api-design-patterns-and-best-practices](https://www.packtpub.com/application-development/hands-restful-api-design-patterns-and-best-practices)), by Pethuru
    Raj, Anupama Raman, and Harihara Subramanian'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《动手实践RESTful API设计模式和最佳实践》* ([https://www.packtpub.com/application-development/hands-restful-api-design-patterns-and-best-practices](https://www.packtpub.com/application-development/hands-restful-api-design-patterns-and-best-practices))，作者：Pethuru
    Raj, Anupama Raman, 和 Harihara Subramanian'
- en: '*Building a RESTful Web Service with Spring* ([https://www.packtpub.com/web-development/building-restful-web-service-spring](https://www.packtpub.com/web-development/building-restful-web-service-spring)),
    by Ludovic Dewailly'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《使用Spring构建RESTful Web服务》* ([https://www.packtpub.com/web-development/building-restful-web-service-spring](https://www.packtpub.com/web-development/building-restful-web-service-spring))，作者：Ludovic
    Dewailly'
