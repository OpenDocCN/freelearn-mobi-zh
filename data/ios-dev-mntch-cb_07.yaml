- en: Chapter 7. Multimedia Resources
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章. 多媒体资源
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下内容：
- en: Selecting images and videos
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择图像和视频
- en: Capturing media with the camera
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用相机捕获媒体
- en: Playing video
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放视频
- en: Playing music and sounds
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放音乐和声音
- en: Recording with the microphone
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用麦克风录制
- en: Managing multiple album items directly
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接管理多个相册项目
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: One of the most important features of today's smartphones and tablets is their
    ability to capture and manage multimedia resources. Be it photos, videos, or audio,
    an application targeted at these devices that can handle multimedia effectively
    is very important.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 今天智能手机和平板电脑最重要的功能之一是它们捕捉和管理多媒体资源的能力。无论是照片、视频还是音频，针对这些设备且能够有效处理多媒体的应用程序非常重要。
- en: In this chapter, we will learn how to manage media stored on the device. We
    will also see how to use the device's multimedia capturing devices (camera and
    microphone) to capture content and create an application that will provide a rich
    experience to the user.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何管理设备上存储的媒体。我们还将了解如何使用设备的多媒体捕获设备（相机和麦克风）来捕捉内容并创建一个将为用户提供丰富体验的应用程序。
- en: 'More specifically, we will discuss:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 更具体地说，我们将讨论以下内容：
- en: '`UIImagePickerController:` This is a controller that not only provides access,
    through a user interface, to the saved photos and videos on the device, but also
    a camera interface for capturing'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UIImagePickerController:` 这是一个控制器，不仅通过用户界面提供对设备上已保存的照片和视频的访问，还提供了一个用于捕获的相机界面'
- en: '`MPMoviePlayerController:` This is a controller that allows us to play and
    stream video files'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MPMoviePlayerController:` 这是一个允许我们播放和流式传输视频文件的控制器'
- en: '`MPMediaPickerController:` This is the default user interface for accessing
    the saved content, managed by the native iPod application'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MPMediaPickerController:` 这是访问已保存内容的默认用户界面，由原生iPod应用程序管理'
- en: '`MPMusicPlayerController:` This is the object responsible for playing the iPod
    content'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MPMusicPlayerController:` 这是一个负责播放iPod内容的对象'
- en: '`AVAudioPlayer:` This is the class that allows us to play sound files'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AVAudioPlayer:` 这是一个允许我们播放声音文件的类'
- en: '`AVAudioRecorder:` This is the class that allows us to use the microphone to
    record audio'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AVAudioRecorder:` 这是一个允许我们使用麦克风录制音频的类'
- en: '`ALAssetsLibrary:` This is the class that provides access to the device''s
    available assets and their metadata'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ALAssetsLibrary:` 这是一个提供对设备可用资源和其元数据的访问的类'
- en: Selecting images and videos
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择图像和视频
- en: In this recipe, we will learn how to provide the user with the ability to import
    images and videos from the device album.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何为用户提供从设备相册导入图像和视频的能力。
- en: Getting ready
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in MonoDevelop, and name it `ImagePickerApp`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在MonoDevelop中创建一个新的项目，并将其命名为`ImagePickerApp`。
- en: How to do it...
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Add a `UIImageView` and a `UIButton` on the main view of `MainController`.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainController`的主视图中添加一个`UIImageView`和一个`UIButton`。
- en: 'Override the `ViewDidLoad` method of the `MainController` class, and enter
    the following code in it:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 覆盖`MainController`类的`ViewDidLoad`方法，并在其中输入以下代码：
- en: '[PRE0]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Implement the handler methods for the `FinishedPickingMedia` and `Canceled`
    events:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现处理`FinishedPickingMedia`和`Canceled`事件的处理器方法：
- en: '[PRE1]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Compile and run the application on the simulator.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模拟器上编译并运行应用程序。
- en: 'Tap on the button to present the image picker, and select an image by tapping
    on its thumbnail. The image will be displayed in the image view. The `UIImagePickerController`
    is displayed in the following screenshot:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击按钮以显示图像选择器，并通过点击缩略图选择图像。图像将在图像视图中显示。`UIImagePickerController`在以下屏幕截图中显示：
- en: '![How to do it...](img/1468EXP_07_01.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/1468EXP_07_01.jpg)'
- en: How it works...
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `UIImagePickerController` is a special view controller that iOS provides
    for selecting images and videos that are saved on the device album, or from the
    camera.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`UIImagePickerController` 是iOS提供的一个特殊视图控制器，用于选择保存在设备相册中的图像和视频，或从相机中获取。'
- en: Note
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: By default, the iOS simulator does not have images stored in its album. To add
    images to the simulator, uncomment the method `AddImagesToAlbum` of the downloaded
    project source code and call it once, passing as a parameter the physical path
    on your computer that contains images.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，iOS模拟器中没有存储在相册中的图像。要将图像添加到模拟器中，取消注释已下载项目源代码中的`AddImagesToAlbum`方法，并调用一次，将包含图像的计算机上的物理路径作为参数传递。
- en: 'After initializing the image picker object, we need to subscribe to its `FinishedPickingMedia`
    event, which provides us with the media the user has selected. In the handler
    we assign to it, we get the selected image:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始化图片选择器对象后，我们需要订阅其`FinishedPickingMedia`事件，该事件为我们提供了用户所选的媒体。在分配给它的处理程序中，我们获取所选的图片：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `Info` property returns an `NSDictionary` object that contains various
    information about the picked media. We retrieve the image passing the constant
    `UIImagePickerController.OriginalImage` as a key. Because the values of the dictionary
    are of the type `NSObject`, we cast the return value to a `UIImage`. After we
    assign the image to the `UIImageView` to be displayed, we dismiss the controller:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`Info`属性返回一个包含有关所选媒体各种信息的`NSDictionary`对象。我们通过传递常量`UIImagePickerController.OriginalImage`作为键来检索图像。因为字典的值是`NSObject`类型，所以我们把返回值转换为`UIImage`。在我们将图像分配给要显示的`UIImageView`之后，我们关闭控制器：'
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `Canceled` event is triggered when the user taps on the controller's **Cancel**
    button. We must subscribe to it to dismiss the controller, because it will not
    be dismissed automatically when the user taps on the **Cancel** button.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击控制器的**取消**按钮时，会触发`Canceled`事件。我们必须订阅它以关闭控制器，因为它在用户点击**取消**按钮时不会自动关闭。
- en: There's more...
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We can define the source of images/videos the image picker will read from, through
    its `SourceType` property. In this example, we use `UIImagePickerController.PhotoLibrary`
    because the simulator does not support the camera hardware.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过图片选择器的`SourceType`属性定义图片选择器将从中读取的图片/视频的来源。在此示例中，我们使用`UIImagePickerController.PhotoLibrary`，因为模拟器不支持相机硬件。
- en: Picking videos
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择视频
- en: 'The `UIImagePickerController` displays only images by default. To support videos,
    its `MediaType` property must be set. It accepts a `string[]`, with the specified
    media names:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`UIImagePickerController`默认只显示图片。要支持视频，其`MediaType`属性必须被设置。它接受一个`string[]`，包含指定的媒体名称：'
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To determine the media type the user has picked, we check the `MediaType` key
    of the dictionary in the `FinishedPickingMedia` handler. If it is a video, we
    get its URL with the `MediaUrl` key:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定用户选择的媒体类型，我们在`FinishedPickingMedia`处理程序中的字典中检查`MediaType`键。如果是视频，我们使用`MediaUrl`键获取其URL：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: See also
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'In this chapter:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中：
- en: '*Capturing media with the camera*'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用相机捕捉媒体*'
- en: '*Managing album items directly*'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*直接管理相册项目*'
- en: Capturing media with the camera
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用相机捕捉媒体
- en: In this recipe, we will learn how to use the device camera for capturing media.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将学习如何使用设备相机来捕捉媒体。
- en: Getting ready
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Open the project `ImagePickerApp`, discussed in the previous task.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 打开之前任务中讨论的`ImagePickerApp`项目。
- en: Note
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The camera functionality is not available on iOS simulator. This example can
    only run on the device. Refer to [Chapter 14](ch14.html "Chapter 14. Deploying"),
    *Deploying* for More Information.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在iOS模拟器上不可用相机功能。此示例只能在设备上运行。有关更多信息，请参阅[第14章](ch14.html "第14章。部署")*部署*。
- en: How to do it...
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Inside the `ViewDidLoad` method, replace the following line:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ViewDidLoad`方法内部，替换以下行：
- en: '[PRE6]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'with this code block:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码块：
- en: '[PRE7]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the `FinishedPickingMedia` handler, add the following code before the dismissal
    of the image picker:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`FinishedPickingMedia`处理程序中，在关闭图片选择器之前添加以下代码：
- en: '[PRE8]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Compile and run the application on the device.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备上编译并运行应用程序。
- en: Tap the button to open the camera and take a picture. The picture will be saved
    to the device album.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击按钮打开相机并拍照。照片将被保存到设备相册中。
- en: How it works...
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Before presenting the camera viewfinder, we have to make sure that the device
    the application is running on actually has the appropriate hardware. We do this
    by calling the static `IsSourceTypeAvailable` method of the `UIImagePickerController`
    class:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在展示相机取景器之前，我们必须确保应用程序运行的实际设备确实具有适当的硬件。我们通过调用`UIImagePickerController`类的静态`IsSourceTypeAvailable`方法来完成此操作：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If it returns `true`, we set the source type to `Camera:`
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它返回`true`，我们将源类型设置为`Camera:`
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This will cause the image picker controller to start the camera device instead
    of loading the device albums.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致图片选择器控制器启动相机设备而不是加载设备相册。
- en: 'When the user takes a photo (or video), it is not automatically saved on the
    device. To save it, we use the `SaveToPhotosAlbum` method of the `UIImage` class.
    This method accepts a delegate of type `UIImage.SaveStatus`, which will report
    an error if something goes wrong:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户拍照（或录像）时，它不会自动保存在设备上。要保存它，我们使用`UIImage`类的`SaveToPhotosAlbum`方法。此方法接受一个类型为`UIImage.SaveStatus`的委托，如果发生错误，它会报告错误：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: There's more...
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: The camera view can also be customized. To disable the default camera controls,
    set the `ShowsCameraControls` property to `false`. Then, pass a custom view with
    the controls you want to the `CameraOverlayView` property. To trigger the shutter
    of the camera, call the `TakePicture` method.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 摄像头视图也可以自定义。要禁用默认的摄像头控件，将`ShowsCameraControls`属性设置为`false`。然后，将您想要的控件的自定义视图传递给`CameraOverlayView`属性。要触发摄像头的快门，请调用`TakePicture`方法。
- en: Image editing
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 图像编辑
- en: 'The camera supports a simple editing function, after capturing an image. This
    editing function allows the user to select a specific part of the image and even
    zoom to a specific area. To present the editing controls, set the `AllowsEditing`
    property to `true`. The edited image can be retrieved from the dictionary in the
    `FinishedPickingMedia` handler, passing the `UIImagePickerController.EditedImage`
    key. The editing interface is shown in the following screenshot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 摄像头支持简单的编辑功能，在捕获图像后。此编辑功能允许用户选择图像的特定部分，甚至可以放大到特定区域。要显示编辑控件，将`AllowsEditing`属性设置为`true`。编辑后的图像可以从`FinishedPickingMedia`处理程序中的字典中检索，传递`UIImagePickerController.EditedImage`键。编辑界面如下截图所示：
- en: '![Image editing](img/1468EXP_07_02.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图像编辑](img/1468EXP_07_02.jpg)'
- en: See also
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'In this chapter:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章：
- en: '*Selecting images and videos*'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*选择图像和视频*'
- en: Playing video
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 播放视频
- en: In this recipe, we will learn how to display a video player interface and play
    video files.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何显示视频播放器界面并播放视频文件。
- en: Getting ready
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in MonoDevelop and name it `PlayVideoApp`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在MonoDevelop中创建一个新的项目，并将其命名为`PlayVideoApp`。
- en: How to do it...
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Add a button on the main view of `MainController`.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainController`的主视图中添加一个按钮。
- en: Add a video file to the project, and set its **Build Action** to **Content**.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将视频文件添加到项目中，并将其**构建操作**设置为**内容**。
- en: 'Enter the following `using` directive in the `MainController.cs` file:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainController.cs`文件中输入以下`using`指令：
- en: '[PRE12]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Override the `ViewDidLoad` method of the `MainController` class, and enter
    the following code:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 覆盖`MainController`类的`ViewDidLoad`方法，并输入以下代码：
- en: '[PRE13]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Enter the following methods in the `MainController` class:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainController`类中输入以下方法：
- en: '[PRE14]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Compile and run the application on the simulator.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模拟器上编译并运行应用程序。
- en: Tap on the button and the video will load and start playing. Watch the messages
    displayed in the **Application Output** in MonoDevelop.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击按钮，视频将加载并开始播放。在MonoDevelop的**应用程序输出**中查看显示的消息。
- en: How it works...
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'The `MPMoviePlayerController` plays video files stored locally or streamed
    from the network. We initialize it with the constructor that accepts an `NSUrl`
    parameter:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`MPMoviePlayerController`播放存储在本地的视频文件或从网络流式传输的视频文件。我们使用接受`NSUrl`参数的构造函数来初始化它：'
- en: '[PRE15]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `NSUrl` object maps to the local file we have added to the project.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`NSUrl`对象映射到我们添加到项目中的本地文件。'
- en: 'After creating the instance, we define a frame for its view and add it to our
    view:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 创建实例后，我们为其视图定义一个框架并将其添加到我们的视图中：
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The highlighted code adds observers to the default notification center, so that
    we will be notified when the state of the playback changes or has finished. Then,
    we call its `Play` method and the view of the `MPMoviePlayerController` is displayed,
    and the video starts playing.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 突出的代码向默认的通知中心添加观察者，这样当播放状态改变或完成时，我们会收到通知。然后，我们调用它的`Play`方法，`MPMoviePlayerController`的视图就会显示，视频开始播放。
- en: 'Inside the `MoviePlayer_PlaybackStateChanged` method, we output the `PlaybackState`
    property:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MoviePlayer_PlaybackStateChanged`方法内部，我们输出`PlaybackState`属性：
- en: '[PRE17]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This property informs us of the status of the playback, such as `Paused, Playing,
    SeekingForward, SeekingBackward`, and so on.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性告诉我们播放状态，例如`Paused`、`Playing`、`SeekingForward`、`SeekingBackward`等。
- en: There's more...
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多...
- en: 'Apart from the ones used in this example, we can add observers for more notifications
    of an `MPMoviePlayerController`, some of which are:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这个例子中使用的之外，我们还可以为`MPMoviePlayerController`添加更多通知的观察者，其中一些是：
- en: '`DidEnterFullscreenNotification:` This notifies that the user has tapped the
    full-screen control, and the controller has entered `fullscreen` mode.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DidEnterFullscreenNotification:` 此通知表示用户点击了全屏控制，控制器已进入 `fullscreen` 模式。'
- en: '`DidExitFullscreenNotification:` This notifies that the controller has left
    `fullscreen` mode.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DidExitFullscreenNotification:` 此通知表示控制器已离开 `fullscreen` 模式。'
- en: '`DurationAvailableNotification:` This notifies that the controller has received
    information on the duration of the video.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DurationAvailableNotification:` 此通知表示控制器已收到视频持续时间的信息。'
- en: '`LoadStateDidChangeNotification:` This notification is useful for network playback
    and is triggered when the controller has finished preloading the media in the
    buffer.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LoadStateDidChangeNotification:` 此通知对于网络播放很有用，当控制器在缓冲区中完成预加载媒体时被触发。'
- en: '`NaturalSizeAvailableNotification:` This notification is triggered when the
    dimensions of the movie frame are made available. The size can be retrieved through
    the player''s `NaturalSize` property.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NaturalSizeAvailableNotification:` 当电影帧的尺寸可用时，此通知被触发。大小可以通过播放器的 `NaturalSize`
    属性检索。'
- en: '`NowPlayingMovieDidChangeNotification:` This notification is triggered when
    the video content of the player has changed. The current content is available
    through its `ContentUrl` property.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NowPlayingMovieDidChangeNotification:` 当播放器的视频内容发生变化时，此通知被触发。当前内容可以通过其 `ContentUrl`
    属性获取。'
- en: Wireless streaming
  id: totrans-116
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 无线流媒体
- en: Starting with iOS version 4.3, the `MPMoviePlayerController` can be used to
    stream video to Apple's AirPlay-enabled devices. To enable it, set its `AllowsAirPlay`
    property to `true`. When the `MPMoviePlayerController` is displayed, it will present
    an interface that will allow the user to select the devices it detects.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 从 iOS 版本 4.3 开始，`MPMoviePlayerController` 可以用来将视频流式传输到 Apple 的 AirPlay 兼容设备。要启用它，将其
    `AllowsAirPlay` 属性设置为 `true`。当 `MPMoviePlayerController` 显示时，它将提供一个界面，允许用户选择它检测到的设备。
- en: See also
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 相关内容
- en: 'In this chapter:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中：
- en: '*Playing music and sounds*'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*播放音乐和声音*'
- en: Playing music and sounds
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 播放音乐和声音
- en: In this recipe, we will learn how to play simple audio files and songs stored
    on the device.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何播放存储在设备上的简单音频文件和歌曲。
- en: Getting ready
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in MonoDevelop, and name it `PlayMusicApp`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MonoDevelop 中创建一个新的项目，并将其命名为 `PlayMusicApp`。
- en: Note
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This example will not work on the simulator. You will also need at least one
    song stored on the device.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例在模拟器上无法工作。您还需要在设备上至少存储一首歌曲。
- en: How to do it...
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Add three buttons on the view of `MainController`.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MainController` 的视图中添加三个按钮。
- en: 'Add the following `using` directive in the `MainController.cs` file:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MainController.cs` 文件中添加以下 `using` 指令：
- en: '[PRE18]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add two fields in the class:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类中添加两个字段：
- en: '[PRE19]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Override the `ViewDidLoad` method of the `MainController` class, and enter
    the following code:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重写 `MainController` 类的 `ViewDidLoad` 方法，并输入以下代码：
- en: '[PRE20]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add the following methods:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法：
- en: '[PRE21]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Compile and run the application on the device.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备上编译并运行应用程序。
- en: Tap the **Select songs** button, and select one or more songs.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **选择歌曲** 按钮，并选择一首或多首歌曲。
- en: How it works...
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `MPMediaPickerController` provides the same user interface as the native
    iPod application. The `MPMusicPlayerController` is responsible for playing the
    songs stored on the device.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`MPMediaPickerController` 提供与原生 iPod 应用程序相同的用户界面。`MPMusicPlayerController`
    负责播放设备上存储的歌曲。'
- en: 'We first initialize the media picker, passing the type of media we want it
    to look for in its constructor:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先初始化媒体选择器，通过其构造函数传递我们想要它查找的媒体类型：
- en: '[PRE22]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'After that, we subscribe to its `ItemsPicked` and `DidCancel` events so that
    we can capture feedback from the user:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们订阅其 `ItemsPicked` 和 `DidCancel` 事件，以便我们可以捕获用户的反馈：
- en: '[PRE23]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The highlighted code shows how to initialize the music player object. The option
    demonstrated here, `MPMusicPlayerController.ApplicationMusicPlayer`, creates an
    instance that is specific only to the application. The other option available,
    `MPMusicPlayerController.iPodMusicPlayer`, creates an instance that allows media
    to be played even if the application is in the background, similar to the iPod
    application.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 突出的代码显示了如何初始化音乐播放器对象。这里演示的选项 `MPMusicPlayerController.ApplicationMusicPlayer`
    创建了一个仅针对应用程序的实例。另一个可用的选项 `MPMusicPlayerController.iPodMusicPlayer` 创建了一个实例，允许在应用程序处于后台时播放媒体，类似于
    iPod 应用程序。
- en: 'In the `MediaPicker_ItemsPicked` handler, we set the songs that were picked
    by the user to the music player, through its `SetQueue` method:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `MediaPicker_ItemsPicked` 处理程序中，我们通过其 `SetQueue` 方法将用户选择的歌曲设置到音乐播放器中：
- en: '[PRE24]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: After that, we dismiss the modal media picker controller. Playing and stopping
    songs is achieved through the `Play()` and `Stop()` methods respectively of `MPMusicPlayerController`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们取消显示模态媒体选择器控制器。播放和停止歌曲分别通过 `MPMusicPlayerController` 的 `Play()` 和 `Stop()`
    方法实现。
- en: There's more...
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The `MPMusicPlayerController` holds information on the currently playing item.
    This information can be accessed through its `NowPlayingItem` property. It is
    of the type `MPMediaItem` and holds various types of information of the currently
    playing media. The following example gets the title of the song that is being
    played:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`MPMusicPlayerController` 包含有关当前播放项的信息。此信息可以通过其 `NowPlayingItem` 属性访问。它是 `MPMediaItem`
    类型，包含有关当前播放媒体的各种类型信息。以下示例获取正在播放的歌曲的标题：'
- en: '[PRE25]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Playing sound files
  id: totrans-152
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 播放声音文件
- en: The `MPMusicPlayerController` is an object that is specifically designed to
    manage and play items and playlists stored on the device's iPod library.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`MPMusicPlayerController` 是一个专门设计用来管理和播放存储在设备 iPod 库中的项目和播放列表的对象。'
- en: 'For playing simple sound files, MonoTouch provides another wrapper to iOS''
    class, `AVAudioPlayer`. The following is an example of its most simple usage:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 对于播放简单的声音文件，MonoTouch 为 iOS 的 `AVAudioPlayer` 类提供了一个包装器。以下是其最简单用法的示例：
- en: '[PRE26]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: See also
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参见
- en: 'In this chapter:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中：
- en: '*Playing video*'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*播放视频*'
- en: Recording with the microphone
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用麦克风录制
- en: In this recipe, we will learn how to use the device's microphone to record sounds.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将学习如何使用设备的麦克风来录制声音。
- en: Getting ready
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in MonoDevelop, and name it `RecordSoundApp`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MonoDevelop 中创建一个新的项目，并将其命名为 `RecordSoundApp`。
- en: Note
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This example will not work on the simulator.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例在模拟器上无法工作。
- en: How to do it...
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Add two buttons on the view of `MainController`.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MainController` 的视图中添加两个按钮。
- en: 'Enter the following `using` directives in the `MainController.cs` file:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MainController.cs` 文件中输入以下 `using` 指令：
- en: '[PRE27]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Override the `ViewDidLoad` method, and add the following code in it:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 覆盖 `ViewDidLoad` 方法，并在其中添加以下代码：
- en: '[PRE28]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Compile and run the application on the device.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备上编译并运行应用程序。
- en: Tap the **Start recording** button to start recording audio, for example, say
    something to record your voice.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **开始录制** 按钮开始录制音频，例如，可以说些话来录制你的声音。
- en: Tap the **Stop recording** button to stop recording and listen to the playback.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **停止录制** 按钮停止录制并播放回放。
- en: How it works...
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'The `AVAudioRecorder` class provides the recording functionality. It does this
    by streaming the captured audio directly to the filesystem. To initialize an instance
    of `AVAudioRecorder`, we use its static `ToUrl` method:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`AVAudioRecorder` 类提供了录制功能。它是通过将捕获的音频直接流式传输到文件系统来实现的。要初始化 `AVAudioRecorder`
    的实例，我们使用它的静态 `ToUrl` 方法：'
- en: '[PRE29]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: If the file that corresponds to the `NSUrl` variable already exists, it will
    be overwritten.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果与 `NSUrl` 变量对应的文件已经存在，它将被覆盖。
- en: 'The `recordingSettings` variable is of type `NSDictionary` and contains the
    settings for the output sound file. We must provide at least some minimal settings
    to the `AVAudioRecorder` upon initialization. Here, we set the sound format to
    plain wav:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`recordingSettings` 变量是 `NSDictionary` 类型，包含输出声音文件的设置。在初始化 `AVAudioRecorder`
    时，我们必须提供至少一些最小设置。在这里，我们将声音格式设置为纯 wav：'
- en: '[PRE30]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'To instruct the recorder to start recording, we just call its `Record()` method:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 要指示记录器开始录制，我们只需调用它的 `Record()` 方法：
- en: '[PRE31]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: When the user taps on the **Stop recording** button, the recording stops, and
    the saved sound starts playing with the `AVAudioPlayer:`
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击 **停止录制** 按钮时，录制停止，保存的声音开始通过 `AVAudioPlayer:` 播放。
- en: '[PRE32]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: There's more...
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The `AVAudioRecorder` class also provides sound metering options. To enable
    sound metering, set its `MeteringEnabled` property to `true`. We can then output
    the peak power in decibels on a specific channel. To do this for the first channel
    of our recording, add the following code right after the `Record()` method call:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`AVAudioRecorder` 类还提供了声音计测选项。要启用声音计测，将它的 `MeteringEnabled` 属性设置为 `true`。然后我们可以在特定通道上输出峰值功率（以分贝为单位）。为了对我们录制的第一个通道执行此操作，请在
    `Record()` 方法调用之后立即添加以下代码：'
- en: '[PRE33]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The `PeakPower` method accepts the zero-based index of the channel and returns
    the peak of the channel in decibels. Call `UpdateMeters()` right before calling
    the `PeakPower` method to get the most recent reading.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`PeakPower` 方法接受通道的零基索引并返回该通道的峰值（以分贝为单位）。在调用 `PeakPower` 方法之前，请立即调用 `UpdateMeters()`
    方法以获取最新的读数。'
- en: Note that enabling metering on the recorder uses CPU resources. Do not enable
    it if you do not intend on using the metering values.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在录制器上启用测光会使用 CPU 资源。如果您不打算使用测光值，请勿启用它。
- en: Record for a pre-defined amount of time
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 预定义时间录制
- en: To record audio for a pre-defined amount of time, without the need for the user
    to stop the recording, call the `RecordFor(double)` method. Its parameter specifies
    the amount of time in seconds for which to record.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 要录制预定义时间的音频，而无需用户停止录制，请调用 `RecordFor(double)` 方法。其参数指定了录制的时间（以秒为单位）。
- en: See also
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: 'In this chapter:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中：
- en: '*Playing music and sounds*'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*播放音乐和声音*'
- en: Managing multiple album items directly
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直接管理多个相册项目
- en: In this recipe, we will discuss programmatically accessing the device's photo
    album.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将讨论以编程方式访问设备的照片相册。
- en: Getting ready
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in MonoDevelop, and name it `ManageAlbumApp`.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MonoDevelop 中创建一个新的项目，并将其命名为 `ManageAlbumApp`。
- en: Note
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This example works on the simulator. At least one image must exist in the photo
    album.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例适用于模拟器。照片相册中必须至少存在一个图像。
- en: How to do it...
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Add a button on the main view of `MainController`.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MainController` 的主视图中添加一个按钮。
- en: 'Enter the following `using` directive in the `MainController.cs` file:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MainController.cs` 文件中输入以下 `using` 指令：
- en: '[PRE34]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Override the `ViewDidLoad` method, and enter the following code in it:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重写 `ViewDidLoad` 方法，并在其中输入以下代码：
- en: '[PRE35]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Add the following methods in the class:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类中添加以下方法：
- en: '[PRE36]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Compile and run the application.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译并运行应用程序。
- en: Tap the **Enumerate assets** button, and watch the URLs of saved photos being
    displayed in the **Application Output** pad.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **枚举资产** 按钮，并观察保存照片的 URL 在 **应用程序输出** 面板中显示。
- en: How it works...
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `ALAssetsLibrary` class provides access to the album items of the device.
    These items are represented by the `ALAsset` class and are divided into groups,
    represented by the `ALAssetGroup` class.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`ALAssetsLibrary` 类提供了对设备相册项的访问。这些项由 `ALAsset` 类表示，并按组划分，由 `ALAssetGroup` 类表示。'
- en: 'The first thing we need to do is to enumerate the asset groups. To do this,
    call the `Enumerate` method:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是枚举资产组。为此，调用 `Enumerate` 方法：
- en: '[PRE37]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The first parameter is of the type `ALAssetGroupTypes` and instructs the assets
    library on which asset groups to enumerate. Passing `ALAssetGroupTypes.All` means
    we want to enumerate all asset groups. The other two parameters are delegate types.
    The `GroupsEnumeration` method is where we read the group's data, while the `GroupsEnumerationFailure`
    will occur if an error occurs. When the `Enumerate` method is called for the first
    time, the user is asked to grant access to the application for accessing the device's
    assets. If the user denies access, the failure method will be triggered. The next
    time the `Enumerate` method gets called, the access message appears again.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是 `ALAssetGroupTypes` 类型，它指示资产库要枚举哪些资产组。传递 `ALAssetGroupTypes.All` 表示我们想要枚举所有资产组。其他两个参数是委托类型。`GroupsEnumeration`
    方法是我们读取组数据的地方，而 `GroupsEnumerationFailure` 将在发生错误时触发。当第一次调用 `Enumerate` 方法时，会要求用户授权应用程序访问设备的资产。如果用户拒绝访问，将触发失败方法。下次调用
    `Enumerate` 方法时，访问消息会再次出现。
- en: 'The signature of the `GroupsEnumeration` method is the following:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`GroupsEnumeration` 方法的签名如下：'
- en: '[PRE38]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The `assetGroup` parameter contains the group's information.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`assetGroup` 参数包含组的信息。'
- en: 'Note the `stop` parameter, which is declared as a `ref`. When the enumeration
    occurs, the method is being triggered once to return the first group and does
    not get called for the second time, no matter how many more groups exists. To
    force it to keep getting called to enumerate all groups, we have to set the `stop`
    variable to `false`. When all groups have been enumerated, the method gets called
    one last time, with the `assetGroup` variable set to `null`. So, we need to check
    this. To put all this in code:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 `stop` 参数，它被声明为 `ref`。当枚举发生时，方法会被触发一次以返回第一个组，并且第二次不会调用，无论还有多少组存在。为了强制它继续被调用以枚举所有组，我们必须将
    `stop` 变量设置为 `false`。当所有组都被枚举后，方法会最后一次被调用，此时 `assetGroup` 变量被设置为 `null`。因此，我们需要检查这一点。将这些放入代码中：
- en: '[PRE39]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Calling the `SetAssetsFilter` method on the instance of `ALAssetGroup` class,
    we instruct it to filter what types of assets we want it to look for. After this,
    the process is similar to the groups enumeration. The `ALAssetGroup` class also
    contains an `Enumerate` method. It accepts a parameter of a delegate type, represented
    here by the `AssetsEnumeration` method. Its implementation is similar to the `GroupsEnumeration`
    method:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `ALAssetGroup` 类的实例上调用 `SetAssetsFilter` 方法，我们指示它过滤我们希望它查找的资产类型。之后，过程与组枚举类似。`ALAssetGroup`
    类还包含一个 `Enumerate` 方法。它接受一个代表类型（在这里由 `AssetsEnumeration` 方法表示）的参数。其实现与 `GroupsEnumeration`
    方法类似：
- en: '[PRE40]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The `ALAsset` class contains various information and properties. Most information
    is stored in its `DefaultRepresentation` property, which is of the type `ALAssetRepresentation`.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`ALAsset` 类包含各种信息和属性。大部分信息存储在其 `DefaultRepresentation` 属性中，该属性的类型为 `ALAssetRepresentation`。'
- en: There's more...
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'If the asset we are interested in is an image, we can get the actual image
    through the `DefaultRepresentation` property:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们感兴趣的资产是一张图片，我们可以通过 `DefaultRepresentation` 属性获取实际图片：
- en: '[PRE41]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Reading EXIF data
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 读取 EXIF 数据
- en: 'We can read a photo''s **EXchangeable Image File format** (EXIF) metadata,
    through the `Metadata` property of `ALAssetRepresentation`, which is of the type
    `NSDictionary`, as follows:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过 `ALAssetRepresentation` 的 `Metadata` 属性读取照片的 **交换图像文件格式** (EXIF) 元数据，`Metadata`
    属性的类型为 `NSDictionary`，如下所示：
- en: '[PRE42]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Retrieving individual assets
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取单个资产
- en: We can also retrieve an individual asset if we know the asset's URL, through
    the `AssetForUrl` method of `ALAssetLibrary`.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们知道资产的 URL，我们也可以通过 `ALAssetLibrary` 的 `AssetForUrl` 方法检索单个资产。
- en: See also
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'In this chapter:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中：
- en: '*Selecting images and videos*'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*选择图片和视频*'
