- en: Chapter 4. Data Management
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章 数据管理
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Creating files
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建文件
- en: Using a SQLite database
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SQLite数据库
- en: Preparing for iCloud support
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备支持iCloud
- en: iCloud key/value data storage
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iCloud键/值数据存储
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Almost every application needs to have permanent data storage on the filesystem.
    In this chapter, we will discuss different ways of storing data. We will see how
    to create a **SQLite database** and manage data with it from within an iPhone
    application. Also, we will learn how to use an already existing database in a
    project.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎每个应用程序都需要在文件系统中拥有永久的数据存储。在本章中，我们将讨论不同的数据存储方式。我们将看到如何创建一个**SQLite数据库**，并在iPhone应用程序中使用它来管理数据。此外，我们还将学习如何在项目中使用现有的数据库。
- en: Note
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: SQLite ([http://www.sqlite.org](http://www.sqlite.org)) is a self-contained
    transactional database system. Each database is saved in a standalone file and
    there is no database server. In iOS, SQLite support is native.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite ([http://www.sqlite.org](http://www.sqlite.org)) 是一个自包含的事务型数据库系统。每个数据库都保存在一个独立的文件中，没有数据库服务器。在iOS中，SQLite支持是原生的。
- en: Following SQLite, we will have a look at **iCloud storage** and how to incorporate
    it in our apps.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍SQLite之后，我们将探讨**iCloud存储**以及如何在我们的应用程序中集成它。
- en: Creating files
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建文件
- en: In this recipe, we will learn how to create files on the filesystem of iOS devices.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何在iOS设备的文件系统中创建文件。
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new iPhone **Single View Application** in Xamarin Studio and name it
    `FileCreationApp`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在Xamarin Studio中创建一个新的iPhone**单视图应用程序**，并将其命名为`FileCreationApp`。
- en: How to do it…
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Follow the ensuing steps to complete this recipe:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤完成此菜谱：
- en: Open the `FileCreationAppViewController.xib` file in Interface Builder.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Interface Builder中打开`FileCreationAppViewController.xib`文件。
- en: Add a button and a label on its view.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在其视图中添加一个按钮和一个标签。
- en: 'Back in Xamarin Studio, enter the following code in the `ViewDidLoad` method
    of the controller class:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Xamarin Studio中，在控制器类的`ViewDidLoad`方法中输入以下代码：
- en: '[PRE0]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Compile and run the app on the simulator. Tap the button to fill the label with
    the contents of the file.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模拟器上编译并运行应用程序。点击按钮以将文件内容填充到标签中。
- en: How it works...
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'As one can see from the preceding code, we can use standard classes from the
    `System.IO namespace`, just like in desktop applications. We will set a path for
    the file we want to save. We will do this in the following line of code:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述代码所示，我们可以使用来自`System.IO命名空间`的标准类，就像在桌面应用程序中一样。我们将为要保存的文件设置一个路径。我们将在以下代码行中这样做：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In iOS, we do not have access to the whole filesystem, not even inside the
    application bundle. An exception will occur if we try to write inside a folder
    we do not have access to. So we use the `static Environment.GetFolderPath(SpecialFolder)`
    method and retrieve the `Personal` special folder, that corresponds to our app''s
    `Documents` folder. Note the use of `Path.Combine(string, string)` that combines
    two strings and returns a path. After that, we create a new instance of the `StreamWriter`
    class as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在iOS中，我们无法访问整个文件系统，甚至在应用程序包内部也不行。如果我们尝试在无法访问的文件夹中写入，将会发生异常。因此，我们使用`static Environment.GetFolderPath(SpecialFolder)`静态方法来检索与我们的应用程序的`Documents`文件夹相对应的`Personal`特殊文件夹。注意`Path.Combine(string,
    string)`的使用，它将两个字符串组合并返回一个路径。之后，我们按照以下方式创建`StreamWriter`类的新实例：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We write some text in the file with its `WriteLine(string)` method. To retrieve
    the text from the file, we create a new instance of the `StreamReader` class and
    read the text with its `ReadLine` method using the following code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用文件的`WriteLine(string)`方法在文件中写入一些文本。要从文件中检索文本，我们创建`StreamReader`类的新实例，并使用以下代码使用其`ReadLine`方法读取文本：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: There's more...
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: Practically, every available class in the `System.IO` namespace will work on
    Xamarin.iOS, as long as we have access to the target folder.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，`System.IO`命名空间中几乎每个可用的类在Xamarin.iOS上都会工作，只要我们有访问目标文件夹的权限。
- en: The Documents folder
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文档文件夹
- en: 'An app bundle''s `Documents` folder is relevant to the app alone. If the app
    is uninstalled from the device, its contents are also removed. Files created in
    this folder are automatically backed up to iCloud, unless we explicitly request
    that a particular file is excluded. This can be done by skipping the backup attribute
    of the file. For example, if we wanted to exclude the `MyFile.txt` file that we
    created, we would have to add the following code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序包的`Documents`文件夹仅与该应用程序相关。如果从设备中卸载应用程序，其内容也将被删除。在此文件夹中创建的文件将自动备份到iCloud，除非我们明确请求排除特定文件。这可以通过跳过文件的备份属性来完成。例如，如果我们想排除我们创建的`MyFile.txt`文件，我们就必须添加以下代码：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If the file does not exist when we call this method, the `error` object will
    contain the appropriate error information.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在调用此方法时文件不存在，`error`对象将包含适当的错误信息。
- en: If we would like to include a file to iCloud backup, we would just have to call
    the preceding method, passing `false` as the second argument.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想将文件包含到iCloud备份中，我们只需调用前面的方法，将`false`作为第二个参数传递。
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is important that we consider skipping the backup attribute for large files.
    Apple will reject apps that contain large files to be backed up to iCloud.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑跳过大型文件的备份属性是很重要的。苹果将拒绝包含要备份到iCloud的大型文件的应用程序。
- en: iCloud backup is the automatic procedure of iOS backup feature. It is primarily
    used for restoring a device from iCloud. Other than excluding or including files
    from iCloud backups, we have no other access to it. It is also different from
    iCloud storage, which we have access to and will be discussing later in this chapter.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: iCloud备份是iOS备份功能的自动程序。它主要用于从iCloud恢复设备。除了从iCloud备份中排除或包含文件之外，我们没有其他访问权限。它也与我们可以访问的iCloud存储不同，我们将在本章后面讨论。
- en: The Caches folder
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Caches文件夹
- en: The `Caches` folder (`Library/Caches/`) can be used for storing application-specific
    data that can be easily recreated by the application. Files in this folder are
    not backed up to iCloud and can be deleted by the system, if there is need for
    more space.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`Caches`文件夹（`Library/Caches/`）可以用于存储应用程序特定的数据，这些数据可以由应用程序轻松重建。此文件夹中的文件不会备份到iCloud，并且如果需要更多空间，系统可以将其删除。'
- en: 'We can get the full path of the `Caches` folder in an iOS app, through the
    `Environment.SpecialFolder.InternetCache` value, as shown in the following code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过`Environment.SpecialFolder.InternetCache`值在iOS应用程序中获取`Caches`文件夹的完整路径，如下面的代码所示：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: See also
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *iCloud key/value data storage* recipe
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*iCloud键/值数据存储*教程'
- en: Using a SQLite database
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SQLite数据库
- en: In this recipe, we will learn how to create a SQLite database file. We will
    create a table, insert some data into it, and then query the table to display
    the data on screen.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何创建SQLite数据库文件。我们将创建一个表，向其中插入一些数据，然后查询表以在屏幕上显示数据。
- en: Getting ready
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new iPhone **Single View Application** in Xamarin Studio and name it
    `SQLiteApp`. Add three buttons and a label on the view controller. Do not forget
    to connect them to the outlets.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在Xamarin Studio中创建一个新的iPhone**单视图应用程序**，并将其命名为`SQLiteApp`。在视图控制器上添加三个按钮和一个标签。不要忘记将它们连接到输出端口。
- en: How to do it...
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Perform the following steps:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: Add references to the assemblies `Mono.Data.Sqlite` and `System.Data`. The following
    screenshot shows how to add a reference to the project:![How to do it...](img/8924OT_04_01.jpg)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加对`Mono.Data.Sqlite`和`System.Data`程序集的引用。以下截图显示了如何向项目中添加引用：![如何操作...](img/8924OT_04_01.jpg)
- en: 'For creating the database and the table, enter the following method in the
    `SQLiteAppViewController` class:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了创建数据库和表，请在`SQLiteAppViewController`类中输入以下方法：
- en: '[PRE6]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add the following method for inserting data to the database:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法以向数据库中插入数据：
- en: '[PRE7]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add the following method for querying the data from the database:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法以从数据库查询数据：
- en: '[PRE8]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add the following code in the `ViewDidLoad` method:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ViewDidLoad`方法中添加以下代码：
- en: '[PRE9]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Compile and run the app on the simulator. Tap each button in sequence, to create,
    insert, and query the data from the database.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模拟器上编译并运行应用程序。按顺序点击每个按钮，以创建、插入和从数据库查询数据。
- en: How it works...
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'iOS provides native support for SQLite databases. We can access SQLite databases
    with Mono''s `Mono.Data.Sqlite` namespace:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: iOS为SQLite数据库提供了原生支持。我们可以通过Mono的`Mono.Data.Sqlite`命名空间访问SQLite数据库：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Inside the `CreateSQLiteDatabase` method, we first check if the file already
    exists using the following code so as to avoid destroying any data:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `CreateSQLiteDatabase` 方法内部，我们首先使用以下代码检查文件是否已存在，以避免破坏任何数据：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then we can continue with the creation of the database. We first create the
    file with the `SqliteConnection.CreateFile(string)` static method using the following
    code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以继续创建数据库。我们首先使用以下代码使用 `SqliteConnection.CreateFile(string)` 静态方法创建文件：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We connect to the newly created file by initializing a `SqliteConnection` object
    and calling its `Open()` method. The connection string for a SQLite database is
    `Data Source =` followed by the filename of the database, as shown in the following
    code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过初始化一个 `SqliteConnection` 对象并调用其 `Open()` 方法来连接新创建的文件。SQLite 数据库的连接字符串是 `Data
    Source =` 后跟数据库文件名，如下面的代码所示：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To create a table in the database, a `SqliteCommand` object is initialized.
    We pass a standard SQL string to its `CommandText` property and call the `ExecuteNonQuery()`
    method to execute the SQL as shown in the following code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要在数据库中创建表，初始化一个 `SqliteCommand` 对象。我们将一个标准的 SQL 字符串传递给其 `CommandText` 属性，并调用
    `ExecuteNonQuery()` 方法来执行 SQL，如下面的代码所示：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To insert data to the database, we use the following code in the `InsertData`
    method:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要向数据库中插入数据，我们在 `InsertData` 方法中使用以下代码：
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Finally, we query the data through a `SELECT` statement and retrieve it with
    the help of `SqliteDataReader`, as shown in the following code:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过 `SELECT` 语句查询数据，并通过 `SqliteDataReader` 获取数据，如下面的代码所示：
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: There's more...
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Note the usage of a `try-catch` block. It is provided to display a message to
    the user if something goes wrong with the creation of the database.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 注意使用 `try-catch` 块。它用于在创建数据库时出现错误时向用户显示消息。
- en: SQL table creation
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL 表创建
- en: In this recipe, we have created a simple table for our database with the name
    `Customers`. It contains three fields. The `FirstName` and `LastName` parameters
    are of type `VARCHAR(20)` while `ID` is of type `INTEGER` and is also the `PRIMARY
    KEY` of the table.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在此菜谱中，我们为我们的数据库创建了一个名为 `Customers` 的简单表。它包含三个字段。`FirstName` 和 `LastName` 参数的类型为
    `VARCHAR(20)`，而 `ID` 的类型为 `INTEGER`，也是表的 `PRIMARY KEY`。
- en: Apart from using SQL commands to create tables, we can create a SQLite database
    with various commercial or free GUI tools. A simple search on the internet will
    yield various results.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用 SQL 命令创建表之外，我们还可以使用各种商业或免费 GUI 工具创建 SQLite 数据库。在互联网上简单搜索即可得到各种结果。
- en: See also
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating files* recipe
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建文件* 菜单'
- en: The *Displaying data in a table* recipe in [Chapter 5](ch05.html "Chapter 5. Displaying
    Data"), *Displaying Data*
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第 5 章 *显示数据表格* 的 *Displaying data in a table* 菜单中，*Displaying Data*
- en: Preparing for iCloud support
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备 iCloud 支持
- en: With the release of iOS 5, Apple introduced iCloud. iCloud is a service that
    provides cloud storage to iOS users, in a variety of configurations. For app development,
    we can use iCloud storage to save information that can be shared among different
    instances of our app running on different devices under the same user account.
    In this recipe, we will learn how to prepare an app to provide iCloud storage
    support.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 iOS 5 的发布，Apple 引入了 iCloud。iCloud 是一项为 iOS 用户提供云存储的服务，具有各种配置。对于应用程序开发，我们可以使用
    iCloud 存储来保存可以在同一用户账户下运行在不同设备上的应用程序的不同实例之间共享的信息。在此菜谱中，我们将学习如何准备应用程序以提供 iCloud
    存储支持。
- en: Getting ready
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new iPhone **Single View Application** in Xamarin Studio and name it
    `KeyValueApp`. For this recipe, an App ID with iCloud enabled needs to exist on
    the developer account. Refer to [Chapter 14](ch14.html "Chapter 14. Deploying"),
    *Deploying*, for more information on how to create an App ID.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Xamarin Studio 中创建一个新的 iPhone **单视图应用程序** 并命名为 `KeyValueApp`。为此菜谱，开发账户中需要存在一个启用了
    iCloud 的 App ID。有关如何创建 App ID 的更多信息，请参阅第 14 章 *部署*，*Deploying*。
- en: How to do it...
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Perform the following steps:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: Double-click on the `Entitlements.plist` file to open it in Xamarin Studio.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击 `Entitlements.plist` 文件以在 Xamarin Studio 中打开它。
- en: Check the **Enable iCloud** checkbox.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **启用 iCloud** 复选框。
- en: If it asks you to choose an account, select your Apple developer account from
    the list.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果它要求您选择一个账户，请从列表中选择您的 Apple 开发者账户。
- en: After enabling iCloud, the **Use key-value store** checkbox should appear. Enable
    it. The **Entitlements.plist** file settings should now look like the following
    screenshot:![How to do it...](img/8924OT_04_02.jpg)
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用 iCloud 后，应出现**使用键值存储**复选框。启用它。**Entitlements.plist**文件设置现在应类似于以下截图：![如何操作...](img/8924OT_04_02.jpg)
- en: In the project options, under **iPhone Bundle Signing**, select **Entitlements.plist**
    for the **Custom entitlements** field. It is important to perform this step, despite
    the fact that the field might already be set.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目选项中，在**iPhone Bundle Signing**下，为**自定义权限**字段选择**Entitlements.plist**。执行此步骤很重要，尽管该字段可能已经设置。
- en: How it works...
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Enabling iCloud support is simply a matter of setting the appropriate setting
    for our project. By checking the **Enable iCloud** and **Use key-value store**
    checkboxes, Xamarin Studio adds the necessary keys in the **Entitlements.plist**
    file, that will allow the app to use iCloud storage.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 启用 iCloud 支持只是设置我们项目适当设置的问题。通过勾选**启用 iCloud**和**使用键值存储**复选框，Xamarin Studio 在**Entitlements.plist**文件中添加必要的键，这将允许应用程序使用
    iCloud 存储。
- en: There's more...
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: Although we can run iCloud-enabled apps on the simulator, the iCloud functionality
    will not work.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们可以在模拟器上运行启用 iCloud 的应用程序，但 iCloud 功能将无法工作。
- en: See also
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating profiles* recipe in [Chapter 14](ch14.html "Chapter 14. Deploying"),
    *Deploying*
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 14 章](ch14.html "第 14 章。部署")中的*创建配置文件*菜谱，*部署*'
- en: iCloud key/value storage
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: iCloud 键值存储
- en: In this recipe, we will learn how to save and retrieve small amounts of data
    that are suitable for storing app settings or anything that would be useful to
    be shared among different devices.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，我们将学习如何保存和检索适合存储应用程序设置或在不同设备间共享的有用数据的小量数据。
- en: Note
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Apps can only store up to a total of 1 MB of data with key/value store, in up
    to 1024 keys. So it cannot be used to back up files or similar functionality.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序只能使用键值存储存储最多 1 MB 的数据，最多 1024 个键。因此，它不能用于备份文件或类似功能。
- en: Getting ready
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will need two devices under the same iCloud account to actually see iCloud
    storage in action. On one device we will save some data, and on the second device
    we will load the data. If only one device is available, it is not an issue as
    it will work flawlessly because the data will just be loaded from local storage,
    instead of iCloud.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要两个处于同一 iCloud 账户下的设备才能真正看到 iCloud 存储的实际效果。在一个设备上我们将保存一些数据，在第二个设备上我们将加载这些数据。如果只有一个设备可用，这不会成问题，因为它将完美工作，因为数据将从本地存储加载，而不是从
    iCloud。
- en: How to do it...
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following are the steps to complete the recipe:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此菜谱的步骤如下：
- en: Create a new iPhone **Single View Application** in Xamarin Studio and enable
    it for iCloud, as shown in the previous recipe. Name the project `KeyValueApp`.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Xamarin Studio 中创建一个新的 iPhone **Single View Application** 并启用它以支持 iCloud，如前一个菜谱所示。将项目命名为`KeyValueApp`。
- en: Add two buttons and one label on the view controller.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在视图控制器上添加两个按钮和一个标签。
- en: 'Add the following code in the view controller''s `ViewDidLoad` method:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在视图控制器的`ViewDidLoad`方法中添加以下代码：
- en: '[PRE17]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Compile and run the app on the device. Tap the **Save** button to save the key
    and value to iCloud.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备上编译并运行应用程序。点击**保存**按钮将键和值保存到 iCloud。
- en: Tap the **Load** button to display the data on the label.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**加载**按钮以在标签上显示数据。
- en: If there is access to a second device, run the app on it and tap the **Load**
    button. The data will be retrieved from iCloud and displayed on the screen of
    the second device.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果有第二个设备，请在上面运行应用程序并点击**加载**按钮。数据将从 iCloud 中检索并在第二个设备的屏幕上显示。
- en: How it works...
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'To save key/value pairs to iCloud, we use the `NSUbiquitousKeyValueStore` class,
    which is responsible for handling the data. We retrieve the default key value
    store through the `DefaultStore` static property and call its `Save` method, as
    shown in the following code:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要将键值对保存到 iCloud，我们使用`NSUbiquitousKeyValueStore`类，该类负责处理数据。我们通过`DefaultStore`静态属性检索默认键值存储并调用其`Save`方法，如下面的代码所示：
- en: '[PRE18]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Calling the `Save` method pushes the data in a queue for being saved locally
    and then uploaded to iCloud. The `Synchronize` method syncs the key/value store
    and can basically be used to speed up the process of syncing the data. However,
    calling the method does not mean that the data will be synced right away. iOS
    is responsible for when the data will be synced and we have no control over it.
    However, iCloud is designed to provide a seamless syncing experience, so the delays
    are usually unnoticeable:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`Save`方法会将数据推送到队列以进行本地保存，然后上传到iCloud。`Synchronize`方法同步键/值存储，基本上可以用来加快数据同步的过程。然而，调用该方法并不意味着数据会立即同步。iOS负责决定何时同步数据，我们无法控制它。然而，iCloud旨在提供无缝的同步体验，因此延迟通常不易察觉：
- en: '[PRE19]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To load the data from iCloud, we simply call the `GetString` method, passing
    the key for which to retrieve the data using the following code:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要从iCloud加载数据，我们只需调用`GetString`方法，传递要检索数据的键，如下所示：
- en: '[PRE20]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: There's more...
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'iCloud key/value store only accepts a specific set of values, which are of
    the following types:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: iCloud键/值存储只接受一组特定的值，这些值类型如下：
- en: '`double`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`double`'
- en: '`bool`'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bool`'
- en: '`long`'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`long`'
- en: '`NSObject[]`'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NSObject[]`'
- en: '`NSDictionary`'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NSDictionary`'
- en: '`NSData`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NSData`'
- en: '`string`'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string`'
- en: Getting notified on key/value store changes
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在键/值存储中接收更改通知
- en: 'We can also get notified of when a key/value pair or set of pairs have been
    changed on another device. To do this, we need to add a notification observer,
    as shown in the following code:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在另一个设备上更改键/值对或一组对时收到通知。为此，我们需要添加一个通知观察者，如下所示：
- en: '[PRE21]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `NSUbiquitousKeyValueStoreChangeReason` enumeration contains the following
    values:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`NSUbiquitousKeyValueStoreChangeReason`枚举包含以下值：'
- en: '**ServerChange**: It shows if a value was changed on another device or not.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ServerChange**：它显示是否在其他设备上更改了值。'
- en: '**QuotaViolationChange**: The quota limit was reached. Some key/value pairs
    need to be removed.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**QuotaViolationChange**：配额限制已达到。一些键/值对需要被移除。'
- en: '**InitialSyncChange**: A key/value pair was discarded as the initial iCloud
    setup on the device has not been completed.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**InitialSyncChange**：由于设备上的初始iCloud设置尚未完成，因此丢弃了一个键/值对。'
- en: '**AccountChange**: The user has changed the iCloud account on the device. The
    whole key/value store is replaced with the one from the new iCloud account.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AccountChange**：用户已更改设备上的iCloud账户。整个键/值存储被新的iCloud账户中的存储所替换。'
- en: See also
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Preparing for iCloud* *support* recipe
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为iCloud准备*配方'
- en: The *Creating profiles* recipe in [Chapter 14](ch14.html "Chapter 14. Deploying"),
    *Deploying*
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第14章](ch14.html "第14章。部署")中的*创建配置文件*配方，*部署*'
