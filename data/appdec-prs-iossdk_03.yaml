- en: Chapter 3. Subclasses and Files
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章 子类和文件
- en: Parse provides you with the quick Plug and Play approach to get started with
    your application development. You can save and fetch data on Parse using `PFObject`,
    and any data field of your object can be accessed using the `objectForKey` method.
    To reduce the complexity along with improving readability and scalability to the
    codebase, you can use subclass for your `PFObject`. This also helps you to mold
    the application architecture in model view controller architecture. In this chapter,
    we will learn how to subclass `PFObject` along with ways of saving your files
    on the Parse Cloud.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Parse 为你提供了快速即插即用的方法来开始你的应用程序开发。你可以使用 `PFObject` 在 Parse 上保存和检索数据，并且你可以使用 `objectForKey`
    方法访问对象中的任何数据字段。为了减少代码的复杂性，同时提高代码的可读性和可扩展性，你可以为你的 `PFObject` 使用子类。这也帮助你将应用程序架构调整为模型视图控制器架构。在本章中，我们将学习如何子类化
    `PFObject` 以及在 Parse 云上保存文件的方法。
- en: Subclassing PFObject
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 子类化 PFObject
- en: 'PFObject can be subclassed to provide the flexibility to the code. Basically
    it helps you to mold the backend code in an object-oriented format to improve
    the readability and application architecture. It also helps to make your code
    re-usable. For example, you can save your data on Parse by following the traditional
    way:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: PFObject 可以被子类化以提供代码的灵活性。基本上，它帮助你以面向对象的方式塑造后端代码，以提高可读性和应用程序架构。它还有助于使你的代码可重用。例如，你可以通过以下传统方式在
    Parse 上保存你的数据：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After subclassing, you can transform the previous code into the following code:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 子类化之后，你可以将之前的代码转换为以下代码：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: By subclassing PFObject to create the `Course object`, you can easily interact
    with business objects. Additionally, by using the properties in the code, it increases
    the readability to your codebase, and, as a result, it simplifies your code architecture.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 通过子类化 PFObject 创建 `Course` 对象，你可以轻松地与业务对象交互。此外，通过在代码中使用属性，它增加了代码库的可读性，从而简化了你的代码架构。
- en: 'Perform the following steps to create a subclass of PFObject:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以创建 PFObject 的子类：
- en: Create a subclass of `PFObject` to follow the PFSubclassing protocol.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `PFObject` 的子类以遵循 PFSubclassing 协议。
- en: Implement the class method `parseClassName`. This method will return the name
    of the class as `string`, which you would pass to `initWithClassName:`.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现类方法 `parseClassName`。此方法将返回作为 `string` 的类名，你将传递给 `initWithClassName:`。
- en: The implementation file (`.m` file) imports `PFObject + Subclass`. This class
    includes all the methods in PFSubclassing.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现文件（`.m` 文件）导入 `PFObject + Subclass`。这个类包括 PFSubclassing 中的所有方法。
- en: In `ApplicationDelegate` before `userInfo setApplicationId:clientKey:` call
    the `[YourClass registerSubclass]` method.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ApplicationDelegate` 中的 `userInfo setApplicationId:clientKey:` 调用之前，调用 `[YourClass
    registerSubclass]` 方法。
- en: 'The following code demonstrates the `Course` subclass of `PFObject`:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码演示了 `PFObject` 的 `Course` 子类：
- en: '[PRE2]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Customizing properties and methods
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义属性和方法
- en: 'To encapsulate your custom business logic, you can add custom properties and
    methods to your `PFObject` subclass. By using the PFSubclassing approach, you
    can simplify and organize your code in one place instead of having it scattered
    in different classes. PFObject supports dynamic synthesis of the properties. You
    can declare properties as you would normally declare; however, this time you need
    to use `@dynamic` in place of `@synthesis` in your implementation file. Dynamic
    properties tell the compiler that the setter and getter methods are not implemented
    by class, but somewhere else as a superclass. Let''s say you need to add a property
    in your `Course` class. The following code will add the properties to your `Course`
    class:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了封装你的自定义业务逻辑，你可以在你的 `PFObject` 子类中添加自定义属性和方法。通过使用 PFSubclassing 方法，你可以将代码简化并组织在一个地方，而不是让它散布在不同的类中。PFObject
    支持属性的动态合成。你可以像通常声明属性一样声明属性；然而，这次你需要在实现文件中使用 `@dynamic` 代替 `@synthesis`。动态属性告诉编译器设置器和获取器方法不是由类实现的，而是在某个地方作为超类实现的。假设你需要在你
    `Course` 类中添加一个属性。以下代码将属性添加到你的 `Course` 类中：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can access the `courseName` and `courseDuration` properties using `course.courseName`
    or `[course courseName]`, whereas if you want to set the data to properties you
    can use `course.courseName = @"MBA"` or `[course setCourseName:@"MBA"]`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `course.courseName` 或 `[course courseName]` 来访问 `courseName` 和 `courseDuration`
    属性，而如果你想设置数据到属性，你可以使用 `course.courseName = @"MBA"` 或 `[course setCourseName:@"MBA"]`。
- en: 'In case you have `NSNumber` as a data type, you can implement it in the following
    way:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 `NSNumber` 作为数据类型，你可以按以下方式实现：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: While fetching the data you can use `course [object objectForKey:@"isGameOver"]`,
    which will return `NSNumber`, which can be accessed using `boolValue`. Whereas
    in case of an amount, you can access it using the `floatValue` method. The dynamic
    getter methods will automatically convert the `float` or `bool` value, and the
    dynamic setter methods will wrap all the primitive data type methods under `NSNumber`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在获取数据时，你可以使用`course [object objectForKey:@"isGameOver"]`，这将返回`NSNumber`，你可以通过`boolValue`来访问它。而在处理金额时，你可以使用`floatValue`方法来访问。动态获取器方法会自动将`float`或`bool`值转换为，而动态设置器方法会将所有原始数据类型方法封装在`NSNumber`下。
- en: Initializing subclasses
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化子类
- en: 'Create new objects using the `object` class method. This will automatically
    create an auto-released instance of provided types, and handles further subclassing.
    You can use this `objectWithoutDataWithObjectId:` method for creating the reference
    of the current object:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`object`类方法创建新对象。这将自动创建一个提供类型的自动释放实例，并处理进一步的子类化。你可以使用这个`objectWithoutDataWithObjectId:`方法来创建当前对象的引用：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The previous line of code will create a reference of your existing Parse object;
    that is `Course` in our case.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 上一行代码将创建一个对现有 Parse 对象的引用；在我们的例子中是`Course`。
- en: Creating queries
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建查询
- en: 'You can create a query for the subclass objects using the `query` class method.
    Parse provides you with the `PFQuery` class, which allows you to fetch and save
    data on the Parse Cloud. PFQuery provides you with lots of methods to set and
    get data from the Parse Cloud. Let''s say you need to create a query for your
    `Course` class, you need to use the following method to create a query:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`query`类方法为子类对象创建查询。Parse为你提供了`PFQuery`类，它允许你在Parse云上获取和保存数据。PFQuery为你提供了许多设置和获取Parse云上数据的方法。假设你需要为你的`Course`类创建一个查询，你需要使用以下方法来创建查询：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The previous code creates a query to fetch your `Course` class data with the
    `courseName` filter. You will get an array of all the courses subscribed by the
    current user. This operation will be executed asynchronously as we are executing
    this on the background thread. PFQuery provides you with variations of methods
    to fetch and save data on the Parse Cloud.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码创建了一个查询，使用`courseName`过滤器来获取你的`Course`类数据。你将得到一个当前用户订阅的所有课程的数组。此操作将异步执行，因为我们是在后台线程上执行此操作。PFQuery为你提供了各种方法来获取和保存Parse云上的数据。
- en: Handling files
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理文件
- en: In applications, sometimes we need to store our files and data in the database
    or backend. The file can be of any type, it can be our image file, video file,
    audio file or data file. Parse provides us with the Plug and Play feature to save
    data and files on the cloud.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序中，有时我们需要在数据库或后端存储我们的文件和数据。文件可以是任何类型，可以是我们的图片文件、视频文件、音频文件或数据文件。Parse为我们提供了即插即用的功能，以便在云上保存数据和文件。
- en: PFFile
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PFFile
- en: The Parse application can support any type of file such as images, video files,
    audio files or any other kind of data file, but their size should be less than
    10 megabytes. PFFile helps you to store your application-related files on the
    Parse Cloud.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Parse应用程序可以支持任何类型的文件，如图片、视频文件、音频文件或其他类型的数据文件，但它们的大小应该小于10兆字节。PFFile帮助你将应用程序相关的文件存储在Parse云上。
- en: 'For saving the data on the cloud, you need to convert your files into NSData.
    Then you can create a PFFile object from that and pass NSData to the PFFile object
    to save on the cloud:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在云上保存数据，你需要将你的文件转换为NSData。然后你可以从该数据创建一个PFFile对象，并将NSData传递给PFFile对象以在云上保存：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'PFFile provides the `fileWithName: data:` method to save your files on the
    Parse Cloud. You can save any kind of file on Parse such as images, text files,
    and data files. You need to convert all your files to NSData before saving them
    on Parse. In the previous code, we have converted our `Hello world!` string into
    NSData before saving it to the Parse Cloud. The filename should be in NSString
    format, in our case, we have used `brochure.txt` as the filename.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 'PFFile提供了`fileWithName: data:`方法来在Parse云上保存你的文件。你可以在Parse上保存任何类型的文件，如图片、文本文件和数据文件。在将文件保存到Parse之前，你需要将所有文件转换为NSData。在之前的代码中，我们在将`Hello
    world!`字符串保存到Parse云之前将其转换为NSData。文件名应该是NSString格式，在我们的例子中，我们使用了`brochure.txt`作为文件名。'
- en: 'In the previous lines of code, we have used the name of the file as `demo.txt`.
    Remember the following key points:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的代码行中，我们使用了文件名`demo.txt`。请记住以下关键点：
- en: You don't need to worry about the filename collision on the cloud, as Parse
    will automatically take care of these things by providing a unique identifier
    for all your files, so you can have multiple files of the same name.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您无需担心云端的文件名冲突，因为 Parse 会自动处理这些事情，为所有文件提供唯一的标识符，因此您可以拥有多个同名文件。
- en: It's recommended to provide an extension to your data files, as this will help
    Parse to understand your file format and handle the files appropriately. So while
    storing images you should use `.png` or `.jpg` as extensions.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建议为您的数据文件提供扩展名，因为这有助于 Parse 理解您的文件格式并适当处理文件。因此，在存储图片时，您应使用 `.png` 或 `.jpg` 作为扩展名。
- en: 'Now you can save your file to the cloud. All the save methods are available
    to PFFile as well. You can use any method that fits your requirement:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以将文件保存到云端。所有保存方法都适用于 PFFile。您可以使用适合您需求的任何方法：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'After successfully saving your file, you can associate your file with PFObject
    just as you associate other data:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功保存您的文件后，您可以像关联其他数据一样将您的文件与 PFObject 关联：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The previous lines of code will associate your `brochure` file with the `Course`
    class. You can fetch the same file from Parse by using the following code:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 上一行的代码将您的 `brochure` 文件与 `Course` 类关联。您可以使用以下代码从 Parse 获取相同的文件：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: To fetch data from the Parse Cloud you can use the `getData:` method and its
    variants. Parse provides you with all the variants of the `getData` method just
    like what we have seen for saving PFObject on the cloud.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 Parse 云端获取数据，您可以使用 `getData:` 方法及其变体。Parse 为您提供了 `getData` 方法的所有变体，就像我们之前看到的将
    PFObject 保存到云端一样。
- en: Saving images
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保存图片
- en: 'To save your images on the cloud, you have to convert your images into NSData
    and then you can save that data to the cloud. Let''s say you have an image and
    you have to save it to the cloud, then you should perform the following steps:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要将您的图片保存到云端，您必须将您的图片转换为 NSData，然后您可以将这些数据保存到云端。假设您有一个图片，您需要将其保存到云端，那么您应该执行以下步骤：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the previous lines of code, we started by converting an image file into NSData.
    Then we created a PFFile object with that data as the value for the image key
    named as `picture.png`. Then we called the `save` function on the PFFile object
    to save the file. So now this PFFile object can be used as a value for any other
    Parse object. Next we created an object on the `UserPhoto` class and saved the
    PFFile object as a value for our `imageFile` key. Then finally we have invoked
    the `save` method on the `UserPhoto` parse object.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一行的代码中，我们首先将一个图片文件转换为 NSData。然后我们创建了一个具有该数据作为 `picture.png` 图像键值的 PFFile 对象。然后我们在
    PFFile 对象上调用 `save` 函数来保存文件。因此，现在这个 PFFile 对象可以用作任何其他 Parse 对象的值。接下来，我们在 `UserPhoto`
    类上创建了一个对象，并将 PFFile 对象作为我们的 `imageFile` 键的值保存。然后最终我们在 `UserPhoto` Parse 对象上调用了
    `save` 方法。
- en: Tracking progress
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跟踪进度
- en: 'Parse helps you to track the progress of your uploads and downloads from your
    PFFile using the following provided methods:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Parse 帮助您通过以下提供的方法使用您的 PFFile 跟踪上传和下载的进度：
- en: 'Using the following method you can track the progress of the data you are saving
    on the cloud:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下方法，您可以跟踪您在云端保存的数据的进度：
- en: '[PRE12]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Using the following method you can track the progress while fetching data from
    the cloud:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下方法，您可以在从云端获取数据时跟踪进度：
- en: '[PRE13]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let''s take an example to illustrate how to use your application in progress
    tracking:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来说明如何使用您的应用程序进行进度跟踪：
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Summary
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we've explored the various ways to save our data to Parse.
    Data can be anything, such as an image file, audio file, video files or simple
    binary data files.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了将我们的数据保存到 Parse 的各种方法。数据可以是任何东西，例如图片文件、音频文件、视频文件或简单的二进制数据文件。
- en: We started by exploring the steps to subclass our PFObject. Then we learned
    about the `PFFile` class, which allows us to save our data to the cloud. We also
    learned about saving our data to the cloud and saving images to the cloud.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先探讨了子类化我们的 PFObject 的步骤。然后我们学习了 `PFFile` 类，它允许我们将数据保存到云端。我们还学习了将数据保存到云端以及将图片保存到云端的方法。
- en: Finally, we saw various ways to track the progress of our file.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们看到了跟踪我们文件进度的各种方法。
- en: In the next chapter, we will learn about Parse analytics and the various ways
    to track your application.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习关于 Parse 分析以及跟踪您应用程序的各种方法。
