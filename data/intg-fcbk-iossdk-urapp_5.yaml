- en: Chapter 5. Posting on Walls
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章. 墙上发布
- en: In this chapter we will implement the UI and the logic to enable the application
    to post on the current users' and their friends' walls.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将实现UI和逻辑，使应用程序能够发布当前用户及其朋友的墙上的帖子。
- en: We will start implementing the user interface that will allow the user to review
    the information to be posted before actually sending the data to the Facebook
    Platform. We will define the step to post on the current user's wall and customize
    the post dialog.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开始实现用户界面，使用户能够在实际将数据发送到Facebook平台之前审查要发布的信息。我们将定义在当前用户墙上发布帖子并自定义发布对话框的步骤。
- en: We will learn how to tag friends on posts, add context to posts (for example,
    location), and upload pictures on the Platform.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习如何在帖子中标记朋友，为帖子添加上下文（例如，位置），并在平台上上传图片。
- en: Creating the Post Dialog interface
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建发布对话框界面
- en: Creating a post on the Facebook Platform means publishing an action on the Facebook
    News Feed. This can be done using the Open Graph API, which is available in Facebook
    SDK 2.x, versus the new Native or Web Dialogs with Version 3.x of the framework.
    Note that you can still use Open Graph APIs to publish on your Feed.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在Facebook平台上创建帖子意味着在Facebook新闻源上发布一个动作。这可以通过Open Graph API完成，该API在Facebook SDK
    2.x中可用，与框架3.x版本的新原生或Web对话框相比。请注意，您仍然可以使用Open Graph API在您的新闻源上发布。
- en: 'In order to post on the Facebook News Feed, we first need to ask the user for
    permission to write on their feed; more specifically, `publish_actions`. Once
    the application is granted permission, we can use the following components:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在Facebook新闻源上发布，我们首先需要请求用户允许我们在他们的新闻源上写入；更具体地说，是`publish_actions`权限。一旦应用程序被授予权限，我们可以使用以下组件：
- en: '`FBNativeDialogs`: This is used to provide a native user interface. It is available
    on iOS 6 and above with a Facebook account set up on the device.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FBNativeDialogs`：此功能用于提供原生用户界面。它适用于iOS 6及以上版本，前提是在设备上设置了Facebook账户。'
- en: '`FBWebDialogs`: This is used to present Web Dialogs to publish on Open Graph.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FBWebDialogs`：此功能用于展示Web对话框以在Open Graph上发布。'
- en: Native Dialogs are the ideal choice to share information on the Platform because
    they require less code to write and offer more out-of-the-box features; for example,
    location tags and privacy settings (see the following screenshot).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 原生对话框是分享平台信息的理想选择，因为它们需要编写的代码更少，并提供了更多开箱即用的功能；例如，位置标签和隐私设置（见以下截图）。
- en: '![](img/kfNmAJlN.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/kfNmAJlN.jpg)'
- en: The Feed Share dialog
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 新闻源分享对话框
- en: The previous screenshot shows a Native Dialog with feed content and also offers
    the ability to tag the current location through the **Add Location** button and
    change the privacy settings using the **Friends** button.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张截图显示了一个带有新闻源内容的原生对话框，并且还提供了通过**添加位置**按钮标记当前位置和使用**朋友**按钮更改隐私设置的能力。
- en: Creating the book model
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建书籍模型
- en: Before starting to implement the actual share functionality, we need a way to
    pass the information from `LBViewController`, the book info controller, to the
    Facebook View Controller. In order to pass that information, we are going to create
    a new model class. Model is the type of class that is used to store information
    with no logic associated with it.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始实现实际的分享功能之前，我们需要一种方法将信息从`LBViewController`（书籍信息控制器）传递到Facebook视图控制器。为了传递这些信息，我们将创建一个新的模型类。模型是一种用于存储信息且不关联任何逻辑的类。
- en: 'To create a new model class, right-click on the main folder (aka `Group`) in
    Project Navigator, create a new group, and name it `models`. Right-click on `models`
    and create a new file. Choose the **Objective-C** class and set the **Class**
    field as `LBBook`, subclass of `NSObject`. Save these settings and we will have
    our new `LBBook` class in the `models` group. The following screenshot shows the
    project structure after creating the new `model` book class:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的模型类，在项目导航器中的主文件夹（即`Group`）上右键单击，创建一个新的组，并将其命名为`models`。在`models`上右键单击并创建一个新文件。选择**Objective-C**类并将**Class**字段设置为`LBBook`，它是`NSObject`的子类。保存这些设置后，我们将在`models`组中获得新的`LBBook`类。以下截图显示了创建新的`model`书籍类后的项目结构：
- en: '![](img/F6f7U6Th.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/F6f7U6Th.jpg)'
- en: Project structure after adding the LBBook class
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 添加LBBook类后的项目结构
- en: 'We need to populate the `model` class with the necessary properties to contain
    the book''s information. We need the following properties:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要填充`model`类以包含书籍信息所需的属性。我们需要以下属性：
- en: '`Title`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`标题`'
- en: '`Author`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`作者`'
- en: '`Review`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`评论`'
- en: '`Score`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`分数`'
- en: 'Open the `LBBook.h` file and add the preceding properties as shown in the following
    code snippet:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `LBBook.h` 文件并添加以下代码片段中的属性：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We do not need to customize the `LBBook.m` file. As mentioned before, we are
    going to use this class only as a container. No more coding is required for this
    model.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要自定义 `LBBook.m` 文件。如前所述，我们只将此类用作容器。对于此模型不需要更多编码。
- en: Passing information between controllers
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器之间的信息传递
- en: We need to collect the user inputs though the `LBViewController` interface.
    We can proceed following two different approaches. The first will require creating
    a reference for each of the UI input components in `LBViewController` and collecting
    the data when the user clicks on the **Go Social** button. The other technique
    will require updating the book information every time the user edits the book
    information through the interface. Both techniques need to have an instance of
    the `LBBook` class as a private property of the `LBViewController`. We are going
    to pursue the first approach and collect all information as the user clicks on
    the **Go Social** button.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要通过 `LBViewController` 接口收集用户输入。我们可以采取两种不同的方法。第一种方法需要为 `LBViewController`
    中的每个 UI 输入组件创建引用，并在用户点击 **Go Social** 按钮时收集数据。另一种技术需要在用户通过界面编辑书籍信息时更新书籍信息。两种技术都需要将
    `LBBook` 类的实例作为 `LBViewController` 的私有属性。我们将采取第一种方法，并在用户点击 **Go Social** 按钮时收集所有信息。
- en: 'Open `LBViewController.m` and import the `LBBook.h` file. The new book property
    will be private; therefore, edit the interface statement by adding the code as
    shown in the following code snippet:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `LBViewController.m` 文件并导入 `LBBook.h` 文件。新的书籍属性将是私有的；因此，通过添加以下代码片段中的代码来编辑接口声明：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In order to collect the book information provided by the user, we need to have
    references for each of the UI components in the `LBViewController.m` interface
    statement. To create these references, open Storyboard and select **Book Scene**.
    Open `LBViewController.m` as a file in the Assistant Editor window. Drag-and-drop
    each of the UI input controls within the `interface` statement to create a reference
    to it:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了收集用户提供的书籍信息，我们需要在 `LBViewController.m` 接口声明中对每个 UI 组件有引用。为了创建这些引用，打开 Storyboard
    并选择 **Book Scene**。在辅助编辑器窗口中打开 `LBViewController.m` 文件。将 `interface` 语句中的每个 UI
    输入控件拖放到其中以创建对其的引用：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As we already anticipated, we are going to collect the book information from
    the view after the user clicks on the **Go Social** button. We need to create
    a method to bind the button event. For the book scene, press and hold the *Ctrl*
    button and drag-and-drop the button within the `implementation.m` statement in
    the `LBViewController` file to create a handler method. Set the name of the new
    method as `onGoSocialClick`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经预料的，我们将在用户点击 **Go Social** 按钮后从视图中收集书籍信息。我们需要创建一个绑定按钮事件的函数。对于书籍场景，按住 *Ctrl*
    按钮并在 `LBViewController` 文件中的 `implementation.m` 语句内拖放按钮以创建处理方法。将新方法的名称设置为 `onGoSocialClick`。
- en: Within the new method, we need to collect the book information and populate
    the `LBBook` instance with such information. We first need to check if the book
    property is already initialized; if it is not, we need to take care of it. For
    each of the UI inputs, we are going to set the corresponding property in the `book`
    property.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在新方法中，我们需要收集书籍信息并将此类信息填充到 `LBBook` 实例中。我们首先需要检查书籍属性是否已经初始化；如果没有，我们需要处理它。对于每个
    UI 输入，我们将在 `book` 属性中设置相应的属性。
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding code snippet shows the final version of the `onGoSocialClick`
    method. Before setting any of the book properties, we need to check whether the
    corresponding UI input field is different from NIL; if so, we use an empty string.
    We should perform some sort of validation on the data provided; for example, the
    book title should not be empty. We are going to implement validation before posting
    the book information on the user's wall.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了 `onGoSocialClick` 方法的最终版本。在设置任何书籍属性之前，我们需要检查相应的 UI 输入字段是否与 NIL 不同；如果是，我们使用空字符串。我们应该对提供的数据进行某种形式的验证；例如，书籍标题不应为空。我们将在发布书籍信息到用户的墙之前实现验证。
- en: Now that we have the book variable populated with the current information provided
    by the user, we need to create a similar property in `LBFacebookViewController.h`
    but accessible from other classes. Using this approach, `LBViewController` can
    update book properties on `LBFacebookViewController` and the post methods will
    have access to such data.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将用户提供的当前信息填充到书变量中，我们需要在 `LBFacebookViewController.h` 中创建一个类似的属性，但这个属性可以从其他类中访问。使用这种方法，`LBViewController`
    可以更新 `LBFacebookViewController` 上的书属性，并且发布方法将能够访问这些数据。
- en: 'Open `LBFacebookViewController.h` and create a new `LBBook` property. This
    time the property will not be defined as `strong`, since we already have a `strong`
    reference to the same memory, but as `weak`. Memory management is out of the scope
    of this book. If you have any trouble understanding the `weak`/`strong` concept,
    you can take a look at the ARC documentation provided by Apple, which can be found
    at:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `LBFacebookViewController.h` 并创建一个新的 `LBBook` 属性。这次属性将不会定义为 `strong`，因为我们已经有一个对相同内存的
    `strong` 引用，而是定义为 `weak`。内存管理不在此书的范围之内。如果您对 `weak`/`strong` 概念有任何疑问，可以查看苹果提供的
    ARC 文档，该文档可以在以下位置找到：
- en: '[http://developer.apple.com/library/ios/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html](http://developer.apple.com/library/ios/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://developer.apple.com/library/ios/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html](http://developer.apple.com/library/ios/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html)'
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now we need to focus on passing the book object from `LBViewController` to `LBFacebookViewController`.
    We are going to use the segue that links the book scene with Facebook and overrides
    the segue handler method in `LBViewController`. First we need to define an identifier
    for the segue. Open Storyboard and select the segue between the book and the Facebook
    Scene. Open the Utilities Panel and within Attribute Inspector set the identifier
    for the segue as `GoSocialSegue`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要关注将书对象从 `LBViewController` 传递到 `LBFacebookViewController`。我们将使用连接书场景与
    Facebook 的 `segue` 并覆盖 `LBViewController` 中的 `segue` 处理方法。首先我们需要定义一个 `segue` 的标识符。打开
    Storyboard 并选择书和 Facebook 场景之间的 `segue`。打开实用工具面板，在属性检查器中设置 `segue` 的标识符为 `GoSocialSegue`。
- en: Using the segue, we can pass data from the source to the destination controller,
    which is exactly what we are going to do. Each time a segue is performed, the
    application calls a method in the source controller that can be overridden at
    our own convenience.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `segue`，我们可以从源控制器传递数据到目标控制器，这正是我们打算做的。每次执行 `segue` 时，应用程序都会调用源控制器中的一个方法，这个方法可以由我们自行覆盖。
- en: 'Open `LBFacebookViewController.m` and override the following method:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `LBFacebookViewController.m` 并覆盖以下方法：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If the current segue has the `GoSocialSegue` identifier, we can set the destination
    controller book property with the current `book` property defined in `LBViewController`.
    The following code snippet shows the code for the preceding method.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果当前的 `segue` 有 `GoSocialSegue` 标识符，我们可以设置目标控制器书属性为 `LBViewController` 中定义的当前
    `book` 属性。以下代码片段显示了前面方法的代码。
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding code, we double-check the segue destination `viewController`
    class type and set the `book` property with the current one.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们再次检查了 `segue` 目标 `viewController` 类类型，并使用当前的 `book` 属性设置了 `book` 属性。
- en: We are now able to pass book information from one controller to another.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在能够从一个控制器传递书信息到另一个控制器。
- en: Feed Share Dialogs
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分享对话框
- en: Now that we have the book information stored in `LBFacebookViewController`,
    we can create the Native and Web Feed dialogs in order to share information on
    the user's wall.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将书信息存储在 `LBFacebookViewController` 中，我们可以创建原生和 Web Feed 对话框，以便在用户的墙上分享信息。
- en: Before starting the implementation of the Feed Dialogs, we need to ask the user
    for `publish_action` permissions. When the application is granted publishing permissions,
    we can focus on the dialogs' implementation.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始实现 Feed 对话框之前，我们需要请求用户授予 `publish_action` 权限。当应用程序被授予发布权限时，我们可以专注于对话框的实现。
- en: We will use both Native and Web Dialogs to publish on a user's timeline.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用原生和 Web 对话框在用户的个人时间轴上发布信息。
- en: Upload action permission
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 上传操作权限
- en: We are going to check if our application has been granted publish action permissions
    every time the user is trying to create a new Feed on the Platform.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在用户尝试在平台上创建新的 Feed 时检查我们的应用程序是否已被授予发布操作权限。
- en: We need to create a new button that will allow the user to create a new Feed
    and send the current book information to Open Graph. The current Facebook Scene
    layout doesn't easily allow adding new components but we can always rearrange
    UI components in a different way. Open Storyboard and rearrange the Facebook Scene.
    The next picture shows the new Facebook scene layout.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个新的按钮，允许用户创建新的动态并发送当前书籍信息到 Open Graph。当前的 Facebook 场景布局不容易添加新组件，但我们可以以不同的方式重新排列
    UI 组件。打开故事板并重新排列 Facebook 场景。下一张图片显示了新的 Facebook 场景布局。
- en: '![](img/coVtgD7e.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/coVtgD7e.jpg)'
- en: The new Facebook Scene layout
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 Facebook 场景布局
- en: From the preceding screenshot, we can see that the profile picture, name, and
    e-mail labels are smaller and in different positions. Now drag-and-drop a new
    button above the **Friends** button and name it `Book on Feed`. The following
    screenshot shows the Facebook Scene with the new button.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的截图，我们可以看到个人资料图片、姓名和电子邮件标签较小，并且位置不同。现在将一个新的按钮拖放到**朋友**按钮上方，并将其命名为 `Book on
    Feed`。以下截图显示了带有新按钮的 Facebook 场景。
- en: '![](img/g381pgNM.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/g381pgNM.jpg)'
- en: The Book on Feed button
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 书籍在动态按钮
- en: This button should behave exactly like the **Friends** button; it will only
    be activated after the user logs in successfully; therefore, we need a reference
    of the button within the `LBFacebookViewController.m` file's `interface` statement.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 此按钮的行为应与**朋友**按钮完全一致；它只有在用户成功登录后才会激活；因此，我们需要在 `LBFacebookViewController.m` 文件的
    `interface` 语句中获取按钮的引用。
- en: '![](img/rVfaTdd3.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/rVfaTdd3.jpg)'
- en: The Book on Feed button reference
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 书籍在动态按钮引用
- en: We need to map the **Book on Feed** button's click event with a new method.
    Open Assistant Editor and with the `LBFacebookViewController.m` file open, hold
    the *Ctrl* button and create a connection within the `implementation` statement
    inside the file. This will allow the user to publish the current book information
    on News Feed.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将**书籍在动态**按钮的点击事件映射到一个新方法。打开辅助编辑器，在 `LBFacebookViewController.m` 文件打开时，按住
    *Ctrl* 键并在文件内的 `implementation` 语句中创建连接。这将允许用户在新闻源上发布当前书籍信息。
- en: '![](img/qoGgPgQz.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/qoGgPgQz.jpg)'
- en: The Book on Feed button's click handler reference
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 书籍在动态按钮的点击处理程序引用
- en: As we already anticipated, we need to ask the user for permission to publish
    on their News Feed. Asking for publishing permissions is pretty easy; we only
    need to call a method from the `FBSession` object. The `FBSession` object is a
    singleton component that keeps track of the current user's Facebook session status.
    The `FBLoginView` component interacts with `FBSession` every time the user logs
    in and out in order to keep the session up to date; therefore, we can use this
    session object to perform any request after the user has successfully logged in.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前预料的，我们需要请求用户允许在他们的新闻源上发布。请求发布权限相当简单；我们只需要从 `FBSession` 对象中调用一个方法。`FBSession`
    对象是一个单例组件，用于跟踪当前用户的 Facebook 会话状态。`FBLoginView` 组件在用户登录和登出时与 `FBSession` 交互，以保持会话更新；因此，我们可以在用户成功登录后使用此会话对象执行任何请求。
- en: Within the `onBookOnFeedClick` method, a publish action permission request will
    be sent to the user and the user's response will be saved on the Facebook Platform.
    Based on the user's response, the application will continue posting the current
    book information or display a message that alerts the user to the missing permission.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `onBookOnFeedClick` 方法中，将向用户发送发布动作权限请求，并将用户的响应保存在 Facebook 平台上。根据用户的响应，应用程序将继续发布当前书籍信息或显示一条消息，提醒用户缺少权限。
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The preceding screenshot shows how to check whether the application is already
    granted `publish_action` permission. If not, we will perform a request for publishing
    permission using the currently active Facebook sessions. When we ask for publish
    action permissions, we also need to define the audience for the new post; for
    example, `FBSessionDefaultAudienceEveryone`. The types of audience values we can
    set are the following:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示了如何检查应用程序是否已经获得 `publish_action` 权限。如果没有，我们将使用当前活动的 Facebook 会话执行发布权限请求。当我们请求发布动作权限时，我们还需要定义新帖子的受众；例如，`FBSessionDefaultAudienceEveryone`。我们可以设置的受众值类型如下：
- en: '`FBSessionDefaultAudienceNone`: This defines only Facebook Platform as the
    audience. No other users have access.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FBSessionDefaultAudienceNone`: 这定义了只有 Facebook 平台作为受众。其他用户没有访问权限。'
- en: '`FBSessionDefaultAudienceOnlyMe`: This defines the current user only as the
    audience for the new story.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FBSessionDefaultAudienceOnlyMe`: 这定义了当前用户仅作为新故事的受众。'
- en: '`FBSessionDefaultAudienceFriends`: This defines the user''s friends as the
    audience.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FBSessionDefaultAudienceFriends`：这定义了用户的朋友为受众。'
- en: '`FBSessionDefaultAudienceEveryone`: This defines the current post as public.
    Everyone can read it.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FBSessionDefaultAudienceEveryone`：这定义了当前帖子为公开。任何人都可以阅读。'
- en: 'The `completionHandler` method checks whether the user has given permission
    for the current action. If permission was given, the application will prompt a
    window interface with the new post information using the `publishCurrentBook`
    method, which will be discussed later in the Facebook and Native sections of this
    chapter. If the user doesn''t grant permissions, we will have to show an alert
    message through `showDeniedPermissionAlertMessage`. The following code snippet
    demonstrates the usage of the `showDeniedPermissionAlertMessage` method:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`completionHandler` 方法检查用户是否已授予当前操作权限。如果已授予权限，应用程序将使用 `publishCurrentBook`
    方法（将在本章的 Facebook 和原生部分中进一步讨论）通过窗口界面提示新的帖子信息。如果用户不授予权限，我们不得不通过 `showDeniedPermissionAlertMessage`
    显示一个警告消息。以下代码片段演示了 `showDeniedPermissionAlertMessage` 方法的用法：'
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Facebook Web Dialogs
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Facebook Web 对话框
- en: The Web Dialog class was introduced with Version 3 of the Facebook iOS SDK.
    For more details, visit [https://developers.facebook.com/docs/reference/ios/3.6/class/FBWebDialogs/](https://developers.facebook.com/docs/reference/ios/3.6/class/FBWebDialogs/).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Web 对话框类是在 Facebook iOS SDK 的第 3 版中引入的。有关更多详细信息，请访问 [https://developers.facebook.com/docs/reference/ios/3.6/class/FBWebDialogs/](https://developers.facebook.com/docs/reference/ios/3.6/class/FBWebDialogs/)。
- en: This type of dialog is supported across all iOS versions and without setting
    a Facebook account on the current device.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型对话框支持所有 iOS 版本，且无需在当前设备上设置 Facebook 账户。
- en: Web Dialog is a useful component to show the Feed Dialog that will allow users
    to publish a story to a profile's timeline. For more details on this, visit [https://developers.facebook.com/docs/reference/dialogs/feed/](https://developers.facebook.com/docs/reference/dialogs/feed/).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Web 对话框是一个有用的组件，可以显示 Feed 对话框，允许用户将故事发布到个人资料的时间轴上。有关此方面的更多详细信息，请访问 [https://developers.facebook.com/docs/reference/dialogs/feed/](https://developers.facebook.com/docs/reference/dialogs/feed/)。
- en: '`FBWebDialogs` provides static methods to publish information on the timeline
    and sends requests to friends.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`FBWebDialogs` 提供了用于在时间轴上发布信息和向朋友发送请求的静态方法。'
- en: 'In this part of the book, we are going to explore the implantation of the following
    method:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的这一部分，我们将探讨以下方法的实现：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We are going to use the current Facebook open session and the book information
    to populate the input parameters for the preceding method.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用当前的 Facebook 开放会话和书籍信息来填充前面方法的输入参数。
- en: Create a new method in the `LBFacebookViewController.m` file named `displayWebPostDialog`
    with `dictionary` as the input parameter. The following code snippet demonstrates
    the implementation of this method.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `LBFacebookViewController.m` 文件中创建一个名为 `displayWebPostDialog` 的新方法，其中 `dictionary`
    作为输入参数。以下代码片段演示了此方法的实现。
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When we call the static method `presentFeedDialogModallyWithSession`, the application
    will show the user a window with post information, similar to the following screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们调用静态方法 `presentFeedDialogModallyWithSession` 时，应用程序将向用户显示一个包含帖子信息的窗口，类似于以下截图：
- en: '![](img/W39kwaeg.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/W39kwaeg.jpg)'
- en: Post on the Timeline Dialog
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在时间轴对话框上发布
- en: The missing piece now is to understand which part of the code is calling `displayWebPostDialog`
    and passing the right information to populate the Facebook Web Dialog.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在缺少的部分是理解代码的哪一部分在调用 `displayWebPostDialog` 并传递正确的信息以填充 Facebook Web 对话框。
- en: Create the `publishCurrentBook` method within the `LBFacebookViewController.m`
    file. For now, the method will create the dictionary for the Web Dialog information
    populated with the book data and invoke the `displayWebPostDialog` method.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `LBFacebookViewController.m` 文件中创建名为 `publishCurrentBook` 的新方法。目前，该方法将创建一个字典，用于填充
    Web 对话框信息，并包含书籍数据，然后调用 `displayWebPostDialog` 方法。
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `publishCurrentBook` method reads the book information from the internal
    property book that was initialized by `onGoSocialSegue`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`publishCurrentBook` 方法从由 `onGoSocialSegue` 初始化的内部属性 `book` 中读取书籍信息。'
- en: 'The book fields will be used to populate the Web Dialog information. The following
    screenshot shows the map between the dictionary keys and the Web Dialog interface
    components:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 书籍字段将被用来填充 Web 对话框信息。以下截图显示了字典键与 Web 对话框界面组件之间的映射：
- en: '![](img/Yn7X7YMS.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Yn7X7YMS.jpg)'
- en: The Web dialog with book information
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 带有书籍信息的 Web 对话框
- en: 'The user will be able to add more information through the textbox and be able
    to confirm or cancel the story. The following screenshot shows the story on Facebook''s
    Timeline:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 用户将通过文本框添加更多信息，并能够确认或取消故事。以下屏幕截图显示了在 Facebook 时间轴上的故事：
- en: '![](img/PZwuQHRt.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/PZwuQHRt.jpg)'
- en: A user post on the Timeline
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 用户在时间轴上的帖子
- en: Publishing on a friend's wall
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在朋友的墙上发布
- en: We need to give the user the ability to choose which Facebook wall to post the
    story on, updating the UI and the logic. The **Book on Feed** button will trigger
    a UI alert message that will let us choose which Wall to use instead of trying
    to post the story. The feature to publish on a friend's Wall will only be available
    using `FBWebDialogs`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要给用户选择将故事发布到哪个 Facebook 墙的能力，更新 UI 和逻辑。**在动态信息上点击** 按钮将触发一个 UI 警告消息，让我们选择要使用的墙，而不是尝试发布故事。在朋友的墙上发布的功能只能通过
    `FBWebDialogs` 使用。
- en: 'Create a new method, `checkForPublishPermissionAndPublish`, within `LBFacebookViewController.m`.
    Move the content from the `onBookOnFeedClick` method to the new method just created.
    The following code shows the new method body:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `LBFacebookViewController.m` 文件中创建一个新的方法，名为 `checkForPublishPermissionAndPublish`。将
    `onBookOnFeedClick` 方法中的内容移动到刚刚创建的新方法中。以下代码展示了新方法的内容：
- en: '[PRE12]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We need to create the `UIAlertMessage` interface to allow the user to choose
    between Walls. In order to catch the user's response on the `UIAlertMessage` interface,
    we need to set `LBFacebookViewController` as `UIAlertViewDelegate`. The following
    code snippet shows the new delegate extension.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建 `UIAlertMessage` 接口，以便用户可以选择哪个墙。为了捕获用户在 `UIAlertMessage` 接口上的响应，我们需要将
    `LBFacebookViewController` 设置为 `UIAlertViewDelegate`。以下代码片段展示了新的代理扩展。
- en: '[PRE13]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Modify `onBookOnFeedClick` to display the alert message to the user as displayed
    in the following code.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 修改 `onBookOnFeedClick` 以向用户显示如下代码中的警告消息。
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the following screenshot, we are giving the user the option to choose between
    their wall or their friend''s wall:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下屏幕截图中，我们为用户提供选择他们自己的墙或朋友的墙的选项：
- en: '![](img/kmU18Oju.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/kmU18Oju.jpg)'
- en: UIAlertMessage – Wall options
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: UIAlertMessage – 墙选项
- en: 'In order to track a user''s choice, we will use two private properties:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟踪用户的选择，我们将使用两个私有属性：
- en: '`@property BOOL myWall`: This keeps track of which wall to post to.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@property BOOL myWall`: 这用于跟踪要发布到哪个墙。'
- en: '`@property (strong, nonatomic) id&lt;FBGraphUser&gt; selectedFriend`: This
    keeps track of which friend is currently selected. We will use this object to
    extract the Facebook user.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@property (strong, nonatomic) id<FBGraphUser> selectedFriend`: 这用于跟踪当前选中的朋友。我们将使用此对象来提取
    Facebook 用户。'
- en: Define the above variables within the `LBFacebookViewController.m` file.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `LBFacebookViewController.m` 文件中定义上述变量。
- en: Set the `myWall` variable as `false` within `viewDidLoad`. The `selectedFriend`
    variable will be set after clicking on the **Done** button in the **Friend Picker**
    component after the user chooses to post on a friend's wall.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `viewDidLoad` 中将 `myWall` 变量设置为 `false`。在用户选择在朋友的墙上发布后，点击 **完成** 按钮在 **朋友选择器**
    组件中，将设置 `selectedFriend` 变量。
- en: 'We now need to create the `UIAlertViewMessage` delegate method to catch the
    user''s response and choose the right Wall to post to, as displayed in the following
    screenshot:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要创建 `UIAlertViewMessage` 代理方法来捕获用户的响应并选择正确的墙进行发布，如下面的屏幕截图所示：
- en: '[PRE15]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `clickButtonAtIndex` `UIAlertViewDelegate` method was purposefully not overwritten.
    If the application were to try to run a modal view controller while the alert
    message is still visible, nothing would be displayed.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 故意没有覆盖 `clickButtonAtIndex` `UIAlertViewDelegate` 方法。如果应用程序在警告消息仍然可见时尝试运行模态视图控制器，则不会显示任何内容。
- en: If the user clicks on the **mine** button, the application sets the `myWall`
    variable to `true`. This will show the post view controller and will let the user
    publish the new story on his or her own Wall.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户点击 **我的** 按钮，应用程序将 `myWall` 变量设置为 `true`。这将显示发布视图控制器，并允许用户在自己的墙上发布新故事。
- en: If the user clicks on **cancel** to cancel the operation, we will set the `myWall`
    property to a `true` value and dismiss the alert message.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户点击 **取消** 来取消操作，我们将 `myWall` 属性设置为 `true` 值，并关闭警告消息。
- en: When a user clicks on the **friend's** button, the application will set the
    `myWall` property to `false` and `LBFriendPickerViewController` will be shown
    to the user in order to select a friend.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击 **朋友的** 按钮时，应用程序将 `myWall` 属性设置为 `false`，并将 `LBFriendPickerViewController`
    显示给用户，以便选择一个朋友。
- en: The following code snippet shows the implementation of a new function, `showFriendPickerViewControllerWithMultiSelection`,
    that will show the friend picker view controller.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了新函数`showFriendPickerViewControllerWithMultiSelection`的实现，该函数将显示朋友选择器视图控制器。
- en: '[PRE16]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The preceding method takes a Boolean value as input to enable or disable multiple
    selections. We will disable `multiSelection` when the user is trying to post a
    new story to a friend's wall.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的方法接受一个布尔值作为输入来启用或禁用多选。当用户尝试向朋友的墙发布新故事时，我们将禁用`multiSelection`。
- en: 'Update `onFriendsClick` using the new method created in the preceding code;
    see the output in the following code snippet:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面代码中创建的新方法更新`onFriendsClick`；请参见以下代码片段中的输出：
- en: '[PRE17]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We now need to update the `facebookViewControllerDoneWasPressed` delegate method
    in order to retrieve which user was selected and store the reference to `self.selectedFriend`.
    The application will only let the user post on a single friend's wall. Once the
    delegate method is called, we can easily check if a friend selection was made
    and post to a friend's wall. The following code snippet demonstrates the usage
    of the new delegate method.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要更新`facebookViewControllerDoneWasPressed`代理方法以检索被选中的用户并存储对`self.selectedFriend`的引用。应用程序将只允许用户在单个朋友的墙上发布。一旦代理方法被调用，我们就可以轻松检查是否进行了朋友选择并发布到朋友的墙上。以下代码片段演示了新代理方法的用法。
- en: '[PRE18]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If the `friendPickerViewController` selection array has at least one selection,
    we set the property `self.selectedFriend` with the first object in the friend's
    list selection. If more than one selection is returned, we reset the `self.myWall`
    property to `true`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`friendPickerViewController`选择数组至少有一个选择，我们将`self.selectedFriend`属性设置为朋友列表选择中的第一个对象。如果有多个选择返回，我们将`self.myWall`属性重置为`true`。
- en: When `LBFriendPickerViewController` is dismissed, we will show the publish interface
    with the friend's name as receiver of the new story if the `self.myWall` property
    is set to `false`; otherwise it shows nothing.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当`LBFriendPickerViewController`被关闭时，如果`self.myWall`属性设置为`false`，我们将显示带有朋友名字作为新故事接收者的发布界面；否则，不显示任何内容。
- en: The last step to perform is to add the wall recipient to the publish story interface.
    Update the `publishCurrentBook` method to check the `self.myWall` property. If
    that property is set to `false`, it means that the user is trying to post on a
    friend's wall. Therefore, we need to collect the friend's Facebook ID using the
    `self.selectedFriend` property. That information needs to be added to the information
    previously defined for the `displayWebDialod` method.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是向发布故事界面添加墙接收者。更新`publishCurrentBook`方法以检查`self.myWall`属性。如果该属性设置为`false`，这意味着用户正在尝试在朋友的墙上发布。因此，我们需要使用`self.selectedFriend`属性收集朋友的Facebook
    ID。这些信息需要添加到之前为`displayWebDialod`方法定义的信息中。
- en: '[PRE19]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The preceding code snippet shows how the application set the parameter `to`
    using the friend's Facebook ID. This will change the receiver of the new story.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了应用程序如何使用朋友的Facebook ID设置参数`to`，这将改变新故事的接收者。
- en: 'The following screenshot shows the final result:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了最终结果：
- en: '![](img/yA11XMbg.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/yA11XMbg.jpg)'
- en: FBWebDialog – posting on a friend's Wall
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: FBWebDialog – 在朋友的墙上发布
- en: Facebook Native Dialogs
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Facebook原生对话框
- en: We mentioned several times that Apple introduced Facebook integration for iOS6
    and later versions. With this version of iOS SDK, Facebook engineers introduced
    native components to interact with the Platform; for example, `FBNativeDialogs`.
    The Framework native components are based on `SLComposeViewController`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们多次提到，苹果为iOS6及以后版本引入了Facebook集成。在这个版本的iOS SDK中，Facebook工程师引入了原生组件来与平台交互；例如，`FBNativeDialogs`。框架原生组件基于`SLComposeViewController`。
- en: The `FBNativeDialog` provides a better user interface and interaction but has
    some limitations. For example, currently `FBNativeDialog` is not able to post
    on a friend's wall.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`FBNativeDialog`提供了更好的用户界面和交互，但也有一些限制。例如，目前`FBNativeDialog`无法在朋友的墙上发布。'
- en: First, as we already anticipated previously, the current iOS device needs to
    have a Facebook account set in order to use the native components.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，正如我们之前所预料的，当前的iOS设备需要设置一个Facebook账户才能使用原生组件。
- en: 'Create a new method, `displayNativePostDialog`, as demonstrated in the following
    code snippet:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的方法`displayNativePostDialog`，如下面的代码片段所示：
- en: '[PRE20]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The preceding method returns `true` when the current iOS device has a Facebook
    account associated with it. This method uses an image for the new story. You can
    drag-and-drop an image to your current project and reference it using the `imageNamed`
    method. You can also use the iOS APIs to acquire pictures from the camera or the
    media library. It is also possible to upload several pictures using their URLs.
    For more details on Facebook Native Dialogs, see [https://developers.facebook.com/docs/reference/ios/3.6/class/FBNativeDialogs/](https://developers.facebook.com/docs/reference/ios/3.6/class/FBNativeDialogs/).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 当当前iOS设备与Facebook账户相关联时，此方法返回`true`。此方法使用图像来创建新故事。您可以将图像拖放到当前项目中，并使用`imageNamed`方法引用它。您还可以使用iOS
    API从相机或媒体库获取图片。还有可能使用它们的URL上传多张图片。有关Facebook本地对话框的更多详细信息，请参阅[https://developers.facebook.com/docs/reference/ios/3.6/class/FBNativeDialogs/](https://developers.facebook.com/docs/reference/ios/3.6/class/FBNativeDialogs/)。
- en: 'We are going to invoke the `displayNativeDialog` method within `publishCurrentBook`
    as a first instruction. If that method returns `false`, meaning no Facebook integration
    on the current device, we will call `displayWebDialog`. The new `publishCurrentBook`
    method looks like the following code snippet:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`publishCurrentBook`方法中调用`displayNativeDialog`方法作为第一条指令。如果该方法返回`false`，表示当前设备没有Facebook集成，我们将调用`displayWebDialog`。新的`publishCurrentBook`方法看起来如下代码片段：
- en: '[PRE21]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following screenshot shows how the Native Share Dialog looks:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了本地分享对话框的外观：
- en: '![](img/ZutbOLYU.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ZutbOLYU.jpg)'
- en: The Native Share dialog
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 本地分享对话框
- en: The preceding screenshot shows the Native Dialog with an image set through the
    `displayWebDialog` code to the left. The Native Dialog offers the ability to change
    the audience by clicking on the **Friends** button and pass information about
    the current location of the user clicking on **Add Location**. We can also associate
    a Facebook album to the picture that we are going to upload.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图显示了通过`displayWebDialog`代码在左侧设置图像的本地对话框。本地对话框提供了通过点击**朋友**按钮更改受众的能力，并通过点击**添加位置**传递用户当前位置的信息。我们还可以将Facebook相册与我们即将上传的图片关联起来。
- en: '![](img/ht6Lv6oX.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ht6Lv6oX.jpg)'
- en: Story updated using Facebook's Native Share dialog
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Facebook的本地分享对话框更新故事
- en: The preceding screenshot shows the story updated using the Facebook Native dialog.
    Unfortunately, the post doesn't report the name of our social application and
    part of the book's information.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图显示了使用Facebook本地对话框更新的故事。不幸的是，帖子没有报告我们的社交应用程序的名称和书籍信息的一部分。
- en: In order to increase the visibility of our application on Facebook Platform,
    we should definitely opt for the Web dialog.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增加我们的应用程序在Facebook平台上的可见性，我们绝对应该选择Web对话框。
- en: Summary
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we learned how to use the two important components of the new
    Facebook SDK, Native and Web dialogs. We used both components to post on a user's
    or their friend's wall. We learned to ask and check for public permission before
    performing the publish action. We also implemented a way to publish information
    on users' News Feeds.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用新Facebook SDK的两个重要组件：本地和Web对话框。我们使用了这两个组件在用户的墙或其朋友的墙上发布内容。我们学习了在执行发布操作之前请求和检查公共权限。我们还实现了一种在用户新闻源上发布信息的方法。
- en: An important part of this chapter focused on how to use Storyboard to create
    a social posting interface and pass information between view controllers.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的一个重要部分集中在如何使用Storyboard创建社交发布界面并在视图控制器之间传递信息。
- en: The Web dialog is definitely recommended if we want to customize user experience
    and, of course, promote our application on users' feeds.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要定制用户体验并当然在用户的动态中推广我们的应用程序，Web对话框绝对推荐。
