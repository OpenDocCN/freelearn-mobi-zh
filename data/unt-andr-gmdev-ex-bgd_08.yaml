- en: Chapter 8. Special Effects – Sound and Particles
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章. 特效 – 声音和粒子
- en: '*In the previous chapter, we took a short break from our Space Fighter game
    to learn about physics and 2D games in Unity. We created a clone of Angry Birds.
    The birds utilized physics to fly through the air and destroy the pigs and their
    structures. We utilized parallax scrolling to make a pleasing background effect.
    We also created a level selection screen to load the game''s various scenes from.*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*在前一章中，我们从我们的太空战斗机游戏中短暂休息，学习关于物理和Unity中的2D游戏。我们创建了一个愤怒的小鸟克隆版。小鸟利用物理在空中飞行并摧毁猪和它们的结构。我们使用视差滚动来制作令人愉悦的背景效果。我们还创建了一个关卡选择屏幕，从游戏中加载各种场景。*'
- en: '*In this chapter, we return to the Space Fighter game. We are going to add
    many special effects that will round out the game experience. We start by learning
    about the controls that Unity provides when working with audio. We move on to
    add some background music to the game and warning sounds when anything gets too
    close. Next, we learn about particle systems, creating engine trails for our ship.
    Finally, we combine the effects of the chapter to create bullet blasts and explosions.*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*在本章中，我们回到太空战斗机游戏。我们将添加许多特殊效果，以完善游戏体验。我们首先学习Unity在处理音频时提供的控件。然后，我们添加一些背景音乐和警告声音，当任何东西太靠近时。接下来，我们学习粒子系统，为我们的飞船创建引擎尾迹。最后，我们将本章的效果结合起来，创建子弹爆炸和爆炸效果。*'
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Importing audio clips
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入音频剪辑
- en: Playing SFX
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放SFX
- en: Understanding 2D and 3D SFX
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解2D和3D特效
- en: Creating particle systems
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建粒子系统
- en: Open up your Space Fighter project and we will get started.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的太空战斗机项目，我们开始吧。
- en: Understanding audio
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解音频
- en: As with other assets, the Unity team has worked hard to make working with audio
    easy and pain-free. Unity is capable of importing and utilizing a broad range
    of audio formats, allowing you to keep your files in a format that you can edit
    in another program.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他资产一样，Unity团队努力使音频的使用变得简单且无痛苦。Unity能够导入和利用广泛的音频格式，允许你保持文件格式，以便你在其他程序中编辑。
- en: Import settings
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入设置
- en: Audio clips have a small assortment of important settings. They let you easily
    control the type and compression of files.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 音频剪辑有一系列重要的设置。它们允许你轻松控制文件的类型和压缩。
- en: '![Import settings](img/2014OT_08_01.png.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![导入设置](img/2014OT_08_01.png.jpg)'
- en: 'The following are the settings that we have to work with while importing audio
    clips:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入音频剪辑时，以下是我们必须处理的设置：
- en: '**Audio Format**: This controls whether the file is included in the **Native**
    format or is **Compressed** in the final game. **Native**, though larger in file
    size, is best for short sound effects because they can be loaded and played quickly.
    **Compressed** is better for longer sounds and music. They will have a smaller
    footprint in the final build.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**音频格式**：这控制文件是否以**原生**格式包含或是在最终游戏中**压缩**。**原生**格式虽然文件大小更大，但对于短音效来说最佳，因为它们可以快速加载和播放。**压缩**格式更适合长音效和音乐。它们在最终构建中占用的空间更小。'
- en: '**3D Sound**: This checkbox controls whether the file will be played in 2D
    or 3D. 2D sounds will be played at a constant volume no matter where the player
    is located—perfect for background music and voice overs. 3D sounds will be adjusted
    in volume based on their distance from the player—excellent for explosions and
    gun shots.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**3D声音**：此复选框控制文件是否以2D或3D播放。2D声音无论玩家位于何处都会以恒定音量播放——非常适合背景音乐和旁白。3D声音的音量会根据其与玩家的距离进行调整——非常适合爆炸和枪声。'
- en: '**Force to mono**: This checkbox will cause Unity to change a stereo file to
    a mono file.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**强制单声道**：此复选框将导致Unity将立体声文件更改为单声道文件。'
- en: '**Load type**: This controls how the file is loaded when the game is being
    played.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加载类型**：这控制游戏播放时文件的加载方式。'
- en: '**Load into memory**: This loads a **Native** file directly to the memory to
    be played.'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加载到内存中**：这会将**原生**文件直接加载到内存中以便播放。'
- en: '**Stream from disc**: This streams the audio as it is playing, such as streaming
    music or video from the Web.'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从磁盘流式传输**：这将在播放时流式传输音频，例如从网络流式传输音乐或视频。'
- en: '**Decompress on load**: This removes compression on the file when it is first
    needed. The overhead for this option makes it a very poor choice for large files.'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加载时解压缩**：这会在文件首次需要时移除压缩。此选项的开销使其对于大文件来说是一个非常糟糕的选择。'
- en: '**Compressed in memory**: This only decompresses the file as it is being played.
    When it is just being held in memory, the file remains compressed.'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存中压缩**: 这仅在播放时解压缩文件。当它只是保存在内存中时，文件保持压缩状态。'
- en: '**Hardware decoding**: This is only used for iOS devices to reduce processing
    cost.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**硬件解码**: 这仅用于iOS设备以降低处理成本。'
- en: '**Gapless looping**: This adjusts the compression method to remove the small
    pop of silence that some methods can introduce to a file.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无缝循环**: 这调整压缩方法以消除某些方法可能引入到文件中的小寂静声。'
- en: '**Compression**: This is the amount of data per second to compress the file
    to, resulting in a smaller-sized file. It is best to find a value that minimizes
    the file size while losing the least amount of quality.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**压缩**: 这是每秒压缩文件的数据量，从而生成一个更小的文件。最好找到一个值，在最小化文件大小的同时，损失的质量最少。'
- en: Audio Listener
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 音频监听器
- en: In order to actually hear anything in the game, every scene needs an **Audio
    Listener** component in it. By default, the `Main Camera` object (included first
    in any new scene) and any new camera you might create has an **Audio Listener**
    component attached. There can only be one **Audio Listener** component in your
    scene at a time. If there is more than one, or you try to play a sound when there
    isn't one, Unity will fill your console log with complaints. The **Audio Listener**
    component also gives the precise position for any 3D sound effects to key off.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在游戏中真正听到任何声音，每个场景都需要一个**音频监听器**组件。默认情况下，`主相机`对象（在任何新场景中首先包含）以及您可能创建的任何新相机都附加了一个**音频监听器**组件。您的场景中一次只能有一个**音频监听器**组件。如果有多个，或者在没有**音频监听器**的情况下尝试播放声音，Unity
    将会在控制台日志中填充投诉。**音频监听器**组件还提供了任何3D声音效果的精确位置。
- en: Audio Source
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 音频源
- en: The **Audio Source** component is like a speaker and controls the settings for
    playing any sound effect. If the clip is 3D, the position of this object to the
    **Audio Listener** component and the mode chosen determine the volume of the clip.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**音频源**组件就像一个扬声器，控制播放任何声音效果的设置。如果剪辑是3D的，则此对象到**音频监听器**组件的位置和选择的模式决定了剪辑的音量。'
- en: '![Audio Source](img/2014OT_08_02.png.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![音频源](img/2014OT_08_02.png.jpg)'
- en: 'The following are the various settings for an **Audio Source** component:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个**音频源**组件的各种设置：
- en: '**Audio Clip**: This is the sound file that this **Audio Source** component
    will play by default.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**音频剪辑**: 这是此**音频源**组件默认播放的声音文件。'
- en: '**Mute**: This is a quick way to toggle the volume of the playing sound on
    and off.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**静音**: 这是一种快速切换正在播放的声音音量开关的方法。'
- en: '**Bypass Effects**: This allows one to toggle any special filters applied to
    this **Audio Source** component.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绕过效果**: 这允许用户切换应用于此**音频源**组件的任何特殊过滤器。'
- en: '**Play On Awake**: This will cause the **Audio Clip** to immediately start
    playing when the scene loads or the object is spawned.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**唤醒时播放**: 这将在场景加载或对象生成时立即开始播放**音频剪辑**。'
- en: '**Loop**: This will cause the playing clip to repeat as it is played.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**循环**: 这将导致播放的剪辑在播放时重复。'
- en: '**Priority**: This dictates the relative importance of the files being played.
    **0** is most important and best for music, while **256** is least important.
    Depending on the system, only so many sounds can be played at once. The list of
    files to be played starts with the most important and ends when this limit is
    reached, excluding those with the lowest values if there are more sounds than
    the limit would allow.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优先级**: 这决定了正在播放的文件的相对重要性。**0**是最重要的，最适合音乐，而**256**是最不重要的。根据系统，一次只能播放这么多声音。要播放的文件列表从最重要的开始，直到达到这个限制，如果声音多于限制，则排除那些值最低的文件。'
- en: '**Volume**: This decides how loud the clip will be played.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**音量**: 这决定了剪辑播放的响度。'
- en: '**Pitch**: This scales the playback speed of the clip.![Audio Source](img/2014OT_08_03.png.jpg)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**音调**: 这调整剪辑的播放速度。![音频源](img/2014OT_08_03.png.jpg)'
- en: '**3D Sound Settings**: This contains the group of settings specific to the
    playing of 3D audio clips. The **Volume**, **Pan**, and **Spread** options can
    be adjusted using the graph at the end of the group. This allows one to create
    more dynamic transitions as the player approaches an **Audio Source** component.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**3D声音设置**: 这包含一组特定于播放3D音频剪辑的设置。可以使用组末尾的图表调整**音量**、**平衡**和**扩散**选项。这允许玩家在接近**音频源**组件时创建更动态的过渡。'
- en: '**Doppler Level**: This decides how much of the doppler effect to apply to
    moving sounds.'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多普勒水平**: 这决定了应用于移动声音的多普勒效应的程度。'
- en: '**Volume Rolloff**: This controls how the volume fades with distance.'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**音量衰减**：这控制了音量如何随距离衰减。'
- en: '**Logarithmic Rolloff**: This is a sudden and rapid falloff of the sound at
    a short distance from the source''s center.'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**对数衰减**：这是在源中心短距离处声音突然且迅速衰减。'
- en: '**Linear Rolloff**: This is an even falloff with distance, the loudest being
    at the **Min Distance** value and the quietest at the **Max Distance** value.'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**线性衰减**：这是一种距离上的均匀衰减，最响亮的是在**最小距离**值处，最安静的是在**最大距离**值处。'
- en: '**Custom Rolloff**: This allows you to create a custom falloff by adjusting
    the graph at the end of the group. It is also automatically chosen when the graph
    is adjusted.'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**自定义衰减**：这允许您通过调整组末尾的图表来创建自定义衰减。当调整图表时，它也会自动选择。'
- en: If the **Audio Listener** component is closer than the **Min Distance** value,
    the audio will be played at the current volume level. Outside this distance, the
    sound will fall off according to the **Rolloff Mode**.
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果**音频监听器**组件比**最小距离**值更近，则音频将以当前音量级别播放。在此距离之外，声音将根据**衰减模式**衰减。
- en: '**Pan Level**: This is the percentage of the 3D effects to be applied to this
    **Audio Source** component. This affects things such as the falloff and doppler
    effects.'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**声像水平**：这是应用于此**音频源**组件的3D效果的百分比。这影响诸如衰减和多普勒效应等因素。'
- en: '**Spread**: This adjusts the amount of area in speaker space that the sound
    covers. It becomes more important when working with more than one or two speakers.'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩散**：这调整了声音在扬声器空间中覆盖的区域量。当与一个或两个以上的扬声器一起工作时，它变得更加重要。'
- en: Beyond the **Max Distance** value, the sound will stop transitioning based on
    the graph at the bottom of the group.
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超过**最大距离**值，声音将停止根据组下方图表进行过渡。
- en: '**2D Sound Settings**: This groups the settings that are specific to 2D audio
    clips.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**2D音效设置**：这组成了特定于2D音频剪辑的设置。'
- en: '**Pan 2D**: This adjusts how evenly the sound comes out of each speaker, weighing
    it towards the left or right speaker'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**2D声像**：这调整了声音从每个扬声器中均匀输出的程度，偏向左或右扬声器。'
- en: Adding background music
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加背景音乐
- en: Now that we know about the available audio settings, it is time to put that
    knowledge into action. We will start by adding some background music. This will
    have to be a 2D sound effect so we can hear it comfortably no matter where the
    **Audio Source** component is. We will also create a short script to fade in the
    music to reduce the suddenness with which sound effects bombard the player.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经了解了可用的音频设置，现在是时候将这项知识付诸实践了。我们将从添加一些背景音乐开始。这将必须是一个2D音效，这样无论**音频源**组件在哪里，我们都能舒适地听到它。我们还将创建一个简短的脚本，以渐入音乐来减少声音效果对玩家的突然冲击。
- en: Time for action – adding background music
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是时候添加背景音乐了
- en: Let's get started with a single script to control our background music.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个控制我们背景音乐的单一脚本开始。
- en: We will start by creating a new script and naming it `FadeIn`.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先创建一个新的脚本，并将其命名为 `FadeIn`。
- en: This script begins with three variables. The first is the goal volume that the
    script has to reach. The second is the number of seconds the transition will take.
    The last is the time when the transition began.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此脚本以三个变量开始。第一个是脚本必须达到的目标音量。第二个是过渡所需的时间（秒数）。最后一个是在过渡开始时的时间。
- en: '[PRE0]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next, we make use of the `Awake` function. It begins by looking at the `audio`
    variable, which is automatically supplied by Unity, to check for an attached **Audio
    Source** component. If one cannot be found, the `gameObject` is destroyed and
    the function is exited.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们使用`Awake`函数。它首先查看由Unity自动提供的`audio`变量，以检查是否有附加的**音频源**组件。如果找不到，则销毁`gameObject`并退出函数。
- en: '[PRE1]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `Awake` function ends by setting its volume to `0` and playing it if it
    isn't already.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Awake`函数最后将音量设置为`0`，如果尚未播放，则播放它。'
- en: '[PRE2]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To cause the transition over time, we use the `Update` function. It will first
    check to see whether the `fadeStartTime` variable is below zero and set it to
    the current time if it is. This allows us to avoid the hiccup that can be caused
    by the initialization of a scene starting.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使过渡随时间进行，我们使用`Update`函数。它首先检查`fadeStartTime`变量是否小于零，如果是，则将其设置为当前时间。这允许我们避免场景初始化可能引起的卡顿。
- en: '[PRE3]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The function next checks to see if the transition's time has ended. If it has,
    the **Audio Source** component's volume is set to `maxVolume` and the script is
    destroyed to free resources.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，该功能会检查过渡的时间是否结束。如果已经结束，则将**音频源**组件的音量设置为`maxVolume`，并销毁脚本以释放资源。
- en: '[PRE4]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Finally, the current progress is calculated by finding the amount of time that
    has passed since the fade started and dividing it by the length of the transition.
    The resulting percentage of progress is multiplied by the value of `maxVolume`
    and applied to the **Audio Source** component's volume.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，通过计算从淡入开始经过的时间量并将其除以过渡的长度来计算当前进度。进度百分比乘以`maxVolume`的值，并应用于**音频源**组件的音量。
- en: '[PRE5]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Back in Unity, we need to create a new empty `GameObject` and name it `Background`.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Unity中，我们需要创建一个新的空`GameObject`，并将其命名为`背景`。
- en: To this object, add our `FadeIn` script and an **Audio Source** component.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向此对象添加我们的`淡入`脚本和**音频源**组件。
- en: If you have not already, create an `Audio` folder in your **Project** panel
    and import the four sound files included in **Starting Assets** for the chapter.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你还没有创建，请在你的**项目**面板中创建一个`音频`文件夹，并导入章节中包含的四个声音文件。
- en: Select the `Background` sound file and uncheck the **3D Sound** checkbox in
    the import settings.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`背景`声音文件，并在导入设置中取消选择**3D声音**复选框。
- en: Select your `Background` object in the **Hierarchy** window and drag the `Background`
    sound to the **Audio Clip** slot.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次**窗口中选择你的`背景`对象，并将`背景`声音拖到**音频剪辑**槽中。
- en: Make sure the **Play On Awake** and **Loop** checkboxes are checked on the **Audio
    Source** component. The **Volume** option also needs to be set to **0**, all to
    make the file play throughout the game but make no noise when starting.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在**音频源**组件上勾选**唤醒时播放**和**循环**复选框。**音量**选项也需要设置为**0**，这样文件就可以在整个游戏中播放，但在开始时没有声音。
- en: '*What just happened?*'
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We added background music to our game. In order for the sound to be constant
    and not directional, we utilized the music as 2D sound. We also created a script
    to fade the music in when the game starts. This eases the transition into the
    game for the player, preventing a sudden onslaught of sound.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在我们的游戏中添加了背景音乐。为了使声音保持恒定且不具有方向性，我们利用音乐作为2D声音。我们还创建了一个脚本，在游戏开始时淡入音乐。这使玩家更容易过渡到游戏，防止突然的声音冲击。
- en: Have a go hero – setting some mood
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下英雄 - 设置一些氛围
- en: Background music adds a lot to a game's experience. A horror scene is not nearly
    as scary without some scary music. Bosses are much less intimidating without their
    daunting music. Look for some good background music for your other games. Something
    light and cheery would work nicely for Angry Birds, while a piece that is more
    industrial and fast-paced would keep hearts racing through the Tank Battle game.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 背景音乐可以为游戏体验增色不少。没有一些恐怖音乐，恐怖场景就几乎不会那么吓人。没有他们令人敬畏的音乐，Boss就会显得不那么令人畏惧。为你的其他游戏寻找一些好的背景音乐。轻快愉快的音乐非常适合愤怒的小鸟，而更工业化和节奏更快的音乐则会让坦克大战游戏中的心跳加速。
- en: Creating an alarm system
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个警报系统
- en: To understand 3D audio effects, we are going to create an alarm system. As objects
    approach the ship, the alarm will increase in volume. The 3D effect will indicate
    the direction to the object relative to the ship. This gives the player the needed
    feedback when they can't see everything around them. There are several ways this
    effect can be achieved, but this one will demonstrate our ability to adjust the
    **Audio Source** component over time.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解3D音频效果，我们将创建一个警报系统。当物体接近飞船时，警报音量会增加。3D效果将指示物体相对于飞船的方向。这为玩家提供了当他们无法看到周围所有事物时所需的反馈。实现此效果有几种方法，但这种方法将展示我们调整**音频源**组件随时间变化的能力。
- en: Time for action – warning the player
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 警告玩家
- en: A single script attached to our objects in space will warn the player as the
    objects approach.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在空间中的物体上附加单个脚本，当物体接近时，会警告玩家。
- en: We start by creating a new script and name it `Alarm`.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先创建了一个新的脚本，并将其命名为`Alarm`。
- en: This script starts with a single variable. It will hold the distance value at
    which the sound will start to fade in.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此脚本从一个变量开始。它将保存声音开始淡入的距离值。
- en: '[PRE6]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Next, we create the `Update` function. It starts by checking for an **Audio
    Source** component and exiting the function early if there isn't one. The `audio`
    variable holds the reference to the attached **Audio Source** component.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们创建`Update`函数。它首先检查是否存在**音频源**组件，如果不存在，则提前退出函数。`audio`变量持有附加的**音频源**组件的引用。
- en: '[PRE7]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The function continues by calculating the distance to the player. Because the
    player never moves, we can just use the position's distance to the origin to make
    it simpler. We also use `sqrMagnitude`, which is the square of the length of the
    vector, because it is significantly faster to calculate. If the object is outside
    the range, the volume is set to `0` and the function is exited.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数继续通过计算玩家距离来执行。因为玩家从不移动，我们可以直接使用位置到原点的距离来简化它。我们还使用`sqrMagnitude`，即向量的长度的平方，因为它计算起来更快。如果对象超出范围，音量设置为`0`，并且函数退出。
- en: '[PRE8]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Finally, we calculate the new volume by dividing the distance by the square
    of `warningDist` value and subtracting the result from one. This will result in
    a rounded curve as it approaches maximum volume.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们通过将距离除以`warningDist`值的平方并从1中减去结果来计算新的音量。这将导致在接近最大音量时出现一个平滑的曲线。
- en: '[PRE9]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We now need to add the script to the relevant objects. To both the enemy ship
    and asteroid prefabs, add the `Alarm` script and an **Audio Source** component.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在需要将脚本添加到相关对象中。将`Alarm`脚本和**音频源**组件添加到敌舰和陨石预制体中。
- en: For the **Audio Clip** value, select the `Alarm` clip. Also, make sure both
    the **Play On Awake** and **Loop** checkboxes are checked.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**音频剪辑**值，选择`Alarm`剪辑。同时，确保**唤醒时播放**和**循环**复选框都被勾选。
- en: Next, we don't want the alarm to overpower other sounds in our game, so set
    the **Priority** option to **192**.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们不想让警报声压倒游戏中的其他声音，所以将**优先级**选项设置为**192**。
- en: To keep it from making any noise when the object is spawned, set the **Volume**
    option to **0**.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了防止在对象生成时产生任何噪音，将**音量**选项设置为**0**。
- en: In order for the script to fully control the **Audio Source** component's volume,
    expand the **3D Sound Settings** component. Select **Linear Rolloff** for **Volume
    Rolloff** and **495** for the **Min Distance** option.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了让脚本完全控制**音频源**组件的音量，展开**3D声音设置**组件。将**音量衰减**设置为**线性衰减**，将**最小距离**选项设置为**495**。
- en: '*What just happened?*'
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We created a script to warn the player when objects get too close. As they approach
    the player, the volume on their audio source is increased. As they move away from
    the player, the volume is reduced. By utilizing 3D audio clips, we can direct
    the player as to where the approaching object is coming from.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个脚本，当对象过于接近玩家时警告玩家。当它们接近玩家时，它们音频源的音量会增加。当它们远离玩家时，音量会降低。通过使用3D音频剪辑，我们可以引导玩家确定接近的对象来自何方。
- en: Have a go hero – differentiation
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下英雄 - 微分
- en: It is great that we can tell when objects are coming too close, but we can't
    tell what it is until we see it. Find some alternate alarm sounds. For each type
    of object that the player has to contend with, give it a different sound. This
    way, the player will know whether they need to start pulling some tricky maneuvers
    to dodge bullets or they are entering an asteroid field and need to fly carefully
    to avoid a collision.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们很高兴能够知道对象何时过于接近，但我们不能在看到它之前知道它是什么。找到一些替代警报声音。对于玩家必须应对的每种类型的对象，给它一个不同的声音。这样，玩家就会知道他们是否需要开始做一些复杂的机动来躲避子弹，或者他们是否进入了一个小行星带，需要小心飞行以避免碰撞。
- en: Understanding particle systems
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解粒子系统
- en: Particle systems add much to the final look of a game. They can take the form
    of fire, magic waves, rain, or the great many other effects you can dream up.
    They are often hard to create well, but are well worth the effort. Keep in mind,
    especially when working with the mobile platform, that less is more. Larger particles
    are more effective than a great amount of particles. If your particle system ever
    contains thousands of particles in a small space or is duplicated on itself to
    increase the effect, you need to rethink the design and find a more efficient
    solution.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 粒子系统可以为游戏的最终外观增添很多。它们可以呈现为火焰、魔法波浪、雨，或者你可以想象出的无数其他效果。它们通常很难制作得很好，但都是值得努力的。记住，尤其是在与移动平台一起工作时，少即是多。较大的粒子比大量的粒子更有效。如果你的粒子系统在狭小的空间中包含数千个粒子，或者为了增加效果而自我复制，你需要重新思考设计并找到更有效的解决方案。
- en: Particle system settings
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 粒子系统设置
- en: Every particle system contains a large variety of components, each with its
    own settings. Most of the available settings have the option to be **Constant**,
    **Curve**, **Random** **Between Two Constants**, and **Random Between Two Curves**.
    **Constant** will be a specific value. **Curve** will be a set value that changes
    along the curve over time. The two random settings select a random value between
    the respective value types. It may seem confusing at first but, as we work through
    them, they will become more understandable.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 每个粒子系统都包含大量组件，每个组件都有自己的设置。大多数可用设置都有选项可以选择为**常量**、**曲线**、**随机**、**两个常量之间的随机**和**两个曲线之间的随机**。**常量**将是一个特定的值。**曲线**将是一个随时间沿曲线变化的固定值。两个随机设置在相应的值类型之间选择一个随机值。一开始可能会觉得有些混乱，但当我们逐一了解它们时，它们将变得更加容易理解。
- en: As you will be able to see in the images and descriptions that follow, we will
    work through and gain an understanding of each piece of a particle system.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您将在接下来的图像和描述中看到的那样，我们将逐一了解并理解粒子系统的每个部分。
- en: 'As you will see in the following screenshot, we will work through and gain
    an understanding of each piece of a particle system:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您将在下面的屏幕截图中所看到的，我们将逐一了解并理解粒子系统的每个部分：
- en: '![Particle system settings](img/2014OT_08_04.png.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![粒子系统设置](img/2014OT_08_04.png.jpg)'
- en: The first portion, the **Initial** module, of the particle system holds all
    the settings used by every emitter in Unity.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 粒子系统的第一部分，即**初始**模块，包含了Unity中每个发射器使用的所有设置。
- en: '**Duration**: This is how long the emitter lasts. A looping system will repeat
    after this amount of time. A non-looping system will stop emitting after this
    length of time.'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续时间**: 这是发射器持续的时间。循环系统将在这段时间后重复。非循环系统将在这段时间后停止发射。'
- en: '**Looping**: This checkbox dictates whether or not the system loops.'
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**循环**: 此复选框决定了系统是否循环。'
- en: '**Prewarm**: This checkbox, if checked, will start a looping system as if it
    has already had a chance to loop for a while. This is useful in the case of torches
    that should already be lit, not start when the player enters the room.'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预加热**: 如果勾选此复选框，则将启动一个循环系统，就像它已经有机会循环一段时间一样。这对于火炬已经点燃，玩家进入房间时不应该开始的情况很有用。'
- en: '**Start Delay**: This will stop the particle system from emitting for the given
    number of seconds when it is initially triggered.'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**起始延迟**: 当最初触发时，这将停止粒子系统在给定秒数内发射。'
- en: '**Start Lifetime**: This is the number of seconds an individual particle begins
    with.'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**起始寿命**: 这是单个粒子开始时的秒数。'
- en: '**Start Speed**: This is how fast a particle will initially move when spawned.'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**起始速度**: 这是粒子生成时的初始移动速度。'
- en: '**Start Size**: This dictates how large a particle is when spawned. It is always
    better to use larger particles rather than more particles.'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**起始大小**: 这决定了粒子生成时的大小。总是使用较大的粒子而不是更多的粒子更好。'
- en: '**Start Rotation**: This will rotate the emitted particles.'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**起始旋转**: 这将旋转发射的粒子。'
- en: '**Start Color**: This is the color tint of the particles when spawned.'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**起始颜色**: 这是粒子生成时的颜色色调。'
- en: '**Gravity Multiplier**: This gives the particles a greater or lesser amount
    of the gravity effect.'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重力乘数**: 这给粒子提供了更多或更少的重力效果。'
- en: '**Inherit Velocity**: This will cause particles to gain a portion of their
    transform''s momentum if it is moving.'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**继承速度**: 如果它正在移动，这将使粒子获得其变换动量的一部分。'
- en: '**Simulation Space**: This determines whether the particles will stay with
    the game object as it is moved (that is, local) or will remain where they are
    in the world.'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模拟空间**: 这决定了粒子是随游戏对象移动（即本地）还是保持在它们在世界中的位置。'
- en: '**Play On Awake**: This checkbox, if checked, will cause the emitter to start
    emitting as soon as it is spawned or the scene starts.'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**唤醒时播放**: 如果勾选此复选框，则发射器将在生成或场景开始时立即开始发射。'
- en: '**Max Particles**: This limits the total number of particles that this system
    supports at a single time. This value only comes into play if the rate particles
    are emitted or their life span is great enough to overbalance their rate of destruction.'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最大粒子数**: 这限制了系统在单个时间点支持的粒子总数。如果粒子发射速率或其寿命足够大，以至于超过了它们的破坏速率，则此值才会发挥作用。'
- en: '![Particle system settings](img/2014OT_08_05.png.jpg)'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![粒子系统设置](img/2014OT_08_05.png.jpg)'
- en: The **Emission** module controls how fast the particles are emitted.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**发射**模块控制粒子发射的速度。'
- en: '**Rate**: If set to **Time**, this is the number of particles per second that
    are created. If set to **Distance**, this is the number of particles per unit
    of distance the system travels as it moves.'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**速率**：如果设置为**时间**，这是每秒创建的粒子数。如果设置为**距离**，这是系统移动时每单位距离创建的粒子数。'
- en: '**Bursts**: This is only used when the **Rate** option is set to **Time**.
    It allows you to set points in the system''s timeline when a specific number of
    particles will be emitted.'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**爆发**：仅在**速率**选项设置为**时间**时使用。它允许你设置系统时间轴上的点，在这一点上会发射特定数量的粒子。'
- en: '![Particle system settings](img/2014OT_08_06.png.jpg)'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![粒子系统设置](img/2014OT_08_06.png.jpg)'
- en: The **Shape** module controls how the system emits particles.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**形状**模块控制系统如何发射粒子。'
- en: '**Shape**: This dictates what form the emission point will take. Each option
    comes with a few more value fields that determine its size.'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**形状**：这决定了发射点将采取的形式。每个选项都附带一些额外的值字段，用于确定其大小。'
- en: '**Sphere**: This is the point from which particles are emitted in all directions.
    **Radius** determines the size of the sphere. **Emit from Shell** dictates whether
    the particles are emitted from the surface of the sphere or inside the volume.'
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**球体**：这是粒子从所有方向发射的点。**半径**决定了球体的大小。**从壳体发射**指定粒子是从球体的表面还是内部发射。'
- en: '**Hemisphere**: This is, as the name suggests, half of a sphere. **Radius**
    and **Emit from Shell** work the same here as they do for **Sphere**.'
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**半球**：正如其名所示，这是球体的一半。**半径**和**从壳体发射**在这里与**球体**相同。'
- en: '**Cone**: This emits particles in one direction. **Angle** determines whether
    the shape is closer to a cone or cylinder. **Radius** dictates the size of the
    emission point of the shape. **Emit From** will determine where the particles
    are emitted from. **Base** emits from the base disc of the shape. **Base Shell**
    emits from the base of the cone, but around the surface of the shape. **Volume**
    will emit from anywhere inside the shape and **Volume Shell** emits from the surface
    of the shape.'
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**圆锥**：这沿着一个方向发射粒子。**角度**决定了形状更接近圆锥还是圆柱。**半径**决定了形状发射点的尺寸。**发射位置**将确定粒子从哪里发射。**底部**从形状的底部圆盘发射。**底部壳体**从圆锥的底部但围绕形状的表面发射。**体积**将在形状内部任何地方发射，而**体积壳体**从形状的表面发射。'
- en: '**Box**: This emits particles from a cube-type shape. **Box X**, **Box Y**,
    and **Box Z** determine the size of the box.'
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**盒子**：这从立方体形状发射粒子。**盒子X**、**盒子Y**和**盒子Z**决定了盒子的大小。'
- en: '**Mesh**: This allows you to select a model to use as an emission point. All
    of the particles for the system will be emitted from the surface of the **Mesh**.'
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网格**：这允许你选择用作发射点的模型。系统的所有粒子都将从**网格**的表面发射。'
- en: '**Random Direction**: This determines whether a particle''s direction is determined
    by the surface normal of the shape chosen, or if it is chosen at random.'
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**随机方向**：这决定了粒子的方向是由所选形状的表面法线决定，还是随机选择。'
- en: '![Particle system settings](img/2014OT_08_07.png.jpg)'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![粒子系统设置](img/2014OT_08_07.png.jpg)'
- en: The **Velocity over Lifetime** module allows you to control the momentum of
    the particles after they have been spawned.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**生命周期内速度**模块允许你在粒子生成后控制粒子的动量。'
- en: '**X**, **Y**, and **Z**: These define the number of units per second along
    each axis of the particle''s momentum'
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**X**、**Y**和**Z**：这些定义了粒子动量沿每个轴每秒的单位数。'
- en: '**Space**: This dictates whether the velocity is applied locally to the system''s
    transform, or relative to the world'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**空间**：这决定了速度是应用于系统的局部变换，还是相对于世界。'
- en: '![Particle system settings](img/2014OT_08_08.png.jpg)'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![粒子系统设置](img/2014OT_08_08.png.jpg)'
- en: The **Limit Velocity over Lifetime** module dampens a particle's movement if
    it exceeds the specified value.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**限制生命周期内速度**模块在粒子的移动超过指定值时阻尼粒子的运动。'
- en: '**Separate Axis**: This allows you to define a value unique to each axis and
    whether that value is local or relative to the world'
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分离轴**：这允许你为每个轴定义一个独特的值，并确定该值是局部还是相对于世界的。'
- en: '**Speed**: This is how fast the particle has to be moving before the damp is
    applied'
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**速度**：这是在应用阻尼之前粒子必须移动的速度'
- en: '**Dampen**: This is the percentage of speed to cut the particle by. It is a
    value between zero and one'
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阻尼**：这是减少粒子速度的百分比。它是一个介于零和一之间的值。'
- en: '![Particle system settings](img/2014OT_08_09.png.jpg)'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![粒子系统设置](img/2014OT_08_09.png.jpg)'
- en: The **Force over Lifetime** module adds a constant amount of movement to each
    particle over the course of its life.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**生命周期内的力**模块在粒子的生命周期过程中为每个粒子添加一个恒定的移动量。'
- en: '**X**, **Y**, and **Z**: These define how much force to apply along each axis'
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**X**、**Y**和**Z**：这些定义了沿每个轴应用多少力'
- en: '**Space**: This dictates whether the force is applied local to the system''s
    transform or in the world space'
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**空间**：这决定了力是应用于系统的变换局部还是世界空间'
- en: If **X**, **Y**, and **Z** are random values, **Randomize** will cause the amount
    of force to apply to be randomly picked each frame, resulting in a statistical
    averaging of the random values
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果**X**、**Y**和**Z**是随机值，**随机化**将导致每帧随机选择应用力的量，从而实现随机值的统计平均
- en: '![Particle system settings](img/2014OT_08_10.png.jpg)'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![粒子系统设置](img/2014OT_08_10.png.jpg)'
- en: The **Color over Lifetime** module allows you to define a series of colors for
    the particle to transition through after it has been spawned.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**生命周期内的颜色**模块允许您在粒子生成后定义粒子过渡的颜色序列。'
- en: The **Color by Speed** module causes the particle to transition through the
    defined range of colors as its speed changes.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**颜色随速度变化**模块使粒子在速度变化时过渡到定义的颜色范围。'
- en: '**Color**: This is the set of colors to transition through'
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**颜色**：这是过渡的颜色集'
- en: '**Speed Range**: This defines how fast the particle must be going to be at
    the minimum and maximum ends of the **Color** range'
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**速度范围**：这定义了粒子在**颜色**范围的最小和最大端必须达到的速度'
- en: '![Particle system settings](img/2014OT_08_11.png.jpg)'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![粒子系统设置](img/2014OT_08_11.png.jpg)'
- en: The **Size over Lifetime** module changes the size of the particle over the
    course of its life.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**生命周期内的大小**模块在粒子的生命周期过程中改变粒子的尺寸。'
- en: The **Size by Speed** module adjusts the size of each particle based on how
    fast it is going.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**速度大小**模块根据粒子移动的速度调整每个粒子的尺寸。'
- en: '**Size**: This is the adjustment that the particles transition through'
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大小**：这是粒子过渡的调整'
- en: '**Speed Range**: This defines the min and max values for each of the **Size**'
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**速度范围**：这定义了每个**大小**的最小和最大值'
- en: '![Particle system settings](img/2014OT_08_12.png.jpg)'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![粒子系统设置](img/2014OT_08_12.png.jpg)'
- en: The **Rotation over Lifetime** module rotates particles over time after they
    have been spawned.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**生命周期内的旋转**模块在粒子生成后随时间旋转粒子。'
- en: The **Rotation by Speed** module rotates particles more as they go faster.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**速度随速度旋转**模块使粒子在速度更快时旋转更多。'
- en: '**Angular Velocity**: This is the number of rotations to apply'
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**角速度**：这是要应用的旋转次数'
- en: '**Speed Range**: This is the min and max range for the **Angular Velocity**
    value if it is not set to **Constant**'
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**速度范围**：这是如果未设置为**常数**，则**角速度**值的最大和最小范围'
- en: '![Particle system settings](img/2014OT_08_13.png.jpg)'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![粒子系统设置](img/2014OT_08_13.png.jpg)'
- en: The **External Forces** module multiplies the effect of Wind Zone objects. Wind
    Zones simulate the effects of wind on particle systems and Unity's trees.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**外部力**模块乘以风区对象的效果。风区模拟风对粒子系统和Unity树的影响。'
- en: The **Collision** module allows particles to collide and interact with the physical
    game world.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**碰撞**模块允许粒子碰撞并与其他物理游戏世界交互。'
- en: If set to **Planes**, you are able to define a number of flat surfaces for the
    particles to collide with. This is faster to process than World collisions.
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果设置为**平面**，您可以定义粒子要与之碰撞的多个平坦表面。这比世界碰撞处理得更快。
- en: '**Planes**: This is a list of transforms that define the surfaces to collide
    with. Particles will only collide with the local, positive y side of the transform.
    Any particles on the other side of the point will be destroyed.'
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**平面**：这是一个定义要与之碰撞的表面的变换列表。粒子只会与变换的局部、正Y侧碰撞。任何在点另一侧的粒子将被销毁。'
- en: '**Visualization**: This gives you the option to view the planes as a **Solid**
    surface or a **Grid** surface.'
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**可视化**：这提供了将平面视为**实体**表面或**网格**表面的选项。'
- en: '**Scale Plane**: This adjusts the size of the **Visualization** option. It
    does not affect the actual size of the surface to collide with.'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**缩放平面**：这调整了**可视化**选项的大小。它不会影响实际碰撞表面的实际大小。'
- en: '**Particle Radius**: This is used to define the size of the sphere used to
    calculate the particle''s collision with the planes.'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**粒子半径**：这是用来定义计算粒子与平面碰撞所使用的球体的大小。'
- en: If set to **World**, the particles will collide with every collider in your
    scene. This can become a lot for the processor to handle.
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果设置为**世界**，粒子将与场景中的每个碰撞器发生碰撞。这可能会对处理器造成很大负担。
- en: '**Collides With**: This defines a list of layers that will be collided with.
    Only colliders on layers that are checked in this list will be used for the collision
    calculation.'
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**碰撞对象**：这定义了将与哪些图层发生碰撞的图层列表。只有在此列表中检查的图层上的碰撞体才会用于碰撞计算。'
- en: '**Collision Quality**: This defines how precise the collision calculations
    are for this particle system. **High** will calculate precisely for every single
    particle. **Medium** will use an approximation and a limited number of new calculations
    each frame. **Low** just calculates less often than **Medium**.'
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**碰撞质量**：这定义了此粒子系统的碰撞计算的精确度。**高**将精确计算每个粒子。**中**将使用近似值和每帧有限的新计算。**低**的碰撞计算频率低于**中**。'
- en: If **Collision Quality** is set to **Medium** or **Low**, **Voxel Size** dictates
    how precise the system estimates the points of collision.
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果**碰撞质量**设置为**中**或**低**，则**体素大小**决定了系统估计碰撞点的精确度。
- en: '**Dampen**: This removes the defined fraction amount of speed from the particle
    when it collides with a surface.'
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**减慢速度**：当粒子与表面碰撞时，此功能会从粒子中移除定义的分数速度。'
- en: '**Bounce**: This allows the particle to maintain the defined fraction of its
    speed, specifically along the normal of the surface that was hit.'
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**弹跳**：这允许粒子保持其定义的分数速度，特别是沿着被撞击表面的法线方向。'
- en: '**Lifetime Loss**: This is the percentage of life. When the particle collides,
    this percentage of life is removed from the particle. When the particle''s life
    drops to zero over time, or through collision, it is removed.'
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**寿命损失**：这是生命百分比。当粒子碰撞时，这部分生命百分比将从粒子中移除。当粒子的生命随时间降至零或通过碰撞移除时，它将被移除。'
- en: If, after collision, the particle's speed is below the **Min Kill Speed** value,
    it is destroyed.
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果碰撞后粒子的速度低于**最小杀伤速度**值，则粒子将被销毁。
- en: If the **Send Collision Messages** checkbox is checked, scripts attached to
    the particle system and the object that was collided with will be alerted every
    frame that the collision took place. Only one message is sent per frame, not per
    particle.
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果勾选了**发送碰撞消息**复选框，则每帧都会向附加到粒子系统和与之碰撞的物体的脚本发出碰撞发生的警报。每帧只发送一条消息，而不是每个粒子。
- en: '![Particle system settings](img/2014OT_08_14.png.jpg)'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![粒子系统设置](img/2014OT_08_14.png.jpg)'
- en: The **Sub Emitters** module allows additional particle systems to be spawned
    at points in the life of each particle of this system.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**子发射器**模块允许在系统中每个粒子的生命周期中的特定点生成额外的粒子系统。'
- en: Any particle systems in the **Birth** list will be spawned and follow the particle
    when it is first created. This could be used to create a fireball or smoke trail.
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**出生列表**中的任何粒子系统都会在粒子首次创建时生成并跟随粒子。这可以用来创建火球或烟雾轨迹。'
- en: The **Collision** list spawns particle systems when the particle hits something.
    This could be used for rain drop splashes.
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**碰撞列表**：当粒子撞击物体时，会生成粒子系统。这可以用来生成雨滴溅起效果。'
- en: The **Death** list spawns particles when the particle is destroyed. It could
    be used to spawn the firework explosion.
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**死亡列表**：当粒子被销毁时，会生成粒子。这可以用来生成烟花爆炸。'
- en: '![Particle system settings](img/2014OT_08_15.png.jpg)'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![粒子系统设置](img/2014OT_08_15.png.jpg)'
- en: The **Texture Sheet Animation** module causes the particle to flip through a
    number of particles over the course of its life. The texture used is defined in
    the **Renderer** module.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**纹理图动画**模块使粒子在其生命周期内翻越多个粒子。使用的纹理在**渲染器**模块中定义。'
- en: '**Tiles**: This defines the number of rows and columns in the sheet. This will
    determine the total number of frames available.'
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**瓦片**：这定义了图中的行数和列数。这将确定可用的总帧数。'
- en: '**Animation**: This gives you the options of **Whole Sheet** and **Single Row**.
    If set to **Single Row**, the row used can either be chosen at random or specified
    using the **Random Row** checkbox and **Row** value.'
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动画**：这提供了**整个图**和**单行**的选项。如果设置为**单行**，则使用的行可以是随机选择的，也可以通过勾选**随机行**复选框和**行**值来指定。'
- en: '**Frame over Time**: This defines how the particle transitions between frames.
    If set to **Constant**, the system will only use a single frame.'
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**帧随时间变化**：这定义了粒子在帧之间的转换方式。如果设置为**恒定**，系统将只使用单个帧。'
- en: '**Cycles**: This is the number of times the particle will loop through the
    animation over the course of its life.'
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**循环次数**：这是粒子在其生命周期内循环动画的次数。'
- en: '![Particle system settings](img/2014OT_08_16.png.jpg)'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![粒子系统设置](img/2014OT_08_16.png.jpg)'
- en: The **Renderer** module dictates how the particle is drawn on the screen.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**渲染器**模块决定了粒子如何在屏幕上绘制。'
- en: '**Render Mode**: This defines which method a particle should use to orient
    itself in the game world.'
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**渲染模式**: 这定义了粒子应该使用哪种方法在游戏世界中定位自己。'
- en: '**Billboard**: This will always face directly at the camera.'
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**横幅**: 这将始终朝向相机。'
- en: '**Stretched Billboard**: This will face particles at the camera, but stretch
    them based on the speed of the camera, the particle''s speed, or by a specific
    value.'
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**拉伸横幅**: 这将朝向相机面对粒子，但根据相机的速度、粒子的速度或特定的值拉伸它们。'
- en: '**Horizontal Billboard**: This is flat on the XZ plane of the game world.'
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**水平横幅**: 这在游戏世界的XZ平面上是平的。'
- en: '**Vertical Billboard**: This will always face the player, but will always stay
    straight along the y axis.'
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**垂直横幅**: 这将始终朝向玩家，但始终沿y轴保持直线。'
- en: If set to **Mesh**, you can define a model to be used as a particle rather than
    a flat plane.
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果设置为 **网格**, 你可以定义一个用作粒子而不是平面模型的模型。
- en: '**Normal Direction**: This is used for the lighting and shading of the particles
    by adjusting the normal of each plane. A value of **1** points the normals directly
    at the camera while a value of **0** points them towards the center of the screen.'
  id: totrans-201
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**正常方向**: 这用于通过调整每个平面的法线来对粒子进行照明和着色。值为**1**时，法线直接指向相机，而值为**0**时，法线指向屏幕中心。'
- en: '**Material**: This defines the material used to render the particles.'
  id: totrans-202
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**材料**: 这定义了用于渲染粒子的材料。'
- en: '**Sort Mode**: This dictates what order the particles should be drawn in, by
    distance or age.'
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**排序模式**: 这决定了粒子应该按照距离或年龄的顺序绘制。'
- en: '**Sorting Fudge**: This causes particle systems to be drawn earlier than normal.
    The higher the value, the earlier it will be drawn on the screen. This affects
    whether the system appears in front of or behind other particle systems or partially
    transparent objects.'
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**排序微调**: 这会导致粒子系统比正常情况下更早地绘制。值越高，它将在屏幕上越早绘制。这影响系统是否出现在其他粒子系统或半透明对象之前或之后。'
- en: '**Cast Shadows**: This determines if the particles will block light.'
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**投射阴影**: 这确定粒子是否会阻挡光线。'
- en: '**Receive Shadows**: This determines if the particles are affected by the shadows
    cast by other objects.'
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**接收阴影**: 这确定粒子是否受到其他物体投射的阴影的影响。'
- en: '**Max Particle Size**: This is the total amount of screen space a single particle
    is allowed to fill. No matter what the real size of the particle is, it will never
    fill more than this space of the screen.'
  id: totrans-207
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最大粒子大小**: 这是单个粒子允许填充的屏幕空间总量。无论粒子的实际大小如何，它永远不会填充超过这个屏幕空间。'
- en: Creating engine trails
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建引擎尾迹
- en: To enforce the player's impression that their ship is moving, we need to create
    some trails for the ship's engines. This exhaust will trail out as if the ship
    is moving even though it is not. By making the particle systems part of the group
    of objects that make up the ship, the engine trails will move and leave particles
    as one would expect them to.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 为了加强玩家对他们的船正在移动的印象，我们需要为船的引擎创建一些尾迹。这种排气将像船在移动一样拖出，即使它没有移动。通过使粒子系统成为组成船的物体组的一部分，引擎尾迹将移动并留下预期的粒子。
- en: Time for action – adding engine trails
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 添加引擎尾迹
- en: Engine trails can easily be added and controlled with the use of only a particle
    system.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 可以仅使用粒子系统轻松添加和控制引擎尾迹。
- en: To begin with, we need to create a new particle system. Do this by going to
    the top of the Unity Editor and navigating to **GameObject** | **Create Other**
    | **Particle System**.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个新的粒子系统。通过前往Unity编辑器的顶部并导航到**GameObject** | **Create Other** | **Particle
    System**来实现这一点。
- en: Rename the new particle system to `EngineTrail`.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的粒子系统重命名为 `EngineTrail`。
- en: First we look at the **Initial** module. We need the **Looping** and **Prewarm**
    checkboxes checked. This will keep the ship looking as if it is moving throughout
    the game and remove the build up the system would otherwise need to create the
    effect.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们来看一下**初始**模块。我们需要勾选**循环**和**预加热**复选框。这将使船在整个游戏中看起来像是在移动，并消除系统在创建效果时通常需要的累积。
- en: Next, we need to control the distance the particles travel. Do this by setting
    the **Start Lifetime** option to **3** and the **Start Speed** option to **1**.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要控制粒子移动的距离。通过将**开始寿命**选项设置为**3**和**开始速度**选项设置为**1**来实现这一点。
- en: To keep the particles sized and positioned properly in space, we need to set
    the **Start Size** option to **0.8** and choose **World** for **Simulation Space**.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了保持粒子在空间中的大小和位置适当，我们需要将**开始大小**选项设置为**0.8**，并将**模拟空间**选择为**世界**。
- en: Now we move on to the **Shape** module. We want the particles to fly straight
    out from the engines. So we use a value of **0** for the **Angle** option and
    **0.2** for the **Radius** option.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们转向**形状**模块。我们希望粒子从引擎中直线飞出。因此，我们将**角度**选项的值设置为**0**，将**半径**选项的值设置为**0.2**。
- en: Exhaust tends to fade in color and dissipate in density over time. To achieve
    this effect, activate the **Color over Lifetime** and **Size over Lifetime** modules.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 排气通常随着时间的推移在颜色上逐渐变淡，在密度上逐渐消散。为了达到这种效果，激活**生命周期内颜色**和**生命周期内大小**模块。
- en: For the **Color** option, set the **Alpha** option to **0** at the beginning
    of the gradient and **255** a short way in. As to colors, select a vibrant blue
    at the beginning, transitioning to white, and then gray at the end.![Time for
    action – adding engine trails](img/2014OT_08_17.png.jpg)
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**颜色**选项，在渐变开始时将**Alpha**选项设置为**0**，在短距离内设置为**255**。至于颜色，开始时选择鲜艳的蓝色，过渡到白色，然后到灰色。![添加引擎尾迹的行动时间](img/2014OT_08_17.png.jpg)
- en: For the **Size** option, select a linear slope that is maximum at the beginning
    and minimum at the end. This is most easily done by clicking on the curve, to
    the right of the **Size** label, and selecting the third option from the bottom
    of the **Particle System Curves** window at the bottom of the **Inspector** window.![Time
    for action – adding engine trails](img/2014OT_08_18.png.jpg)
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**大小**选项，选择一个线性斜率，在开始时最大，在结束时最小。这最简单的方法是在**大小**标签右侧点击曲线，然后在**检查器**窗口底部的**粒子系统曲线**窗口中选择从底部起的第三个选项。![添加引擎尾迹的行动时间](img/2014OT_08_18.png.jpg)
- en: Now, in the **Scene** window, duplicate the `EngineTrail` object three times
    and position them behind the engines of the ship. Be sure to rotate them so the
    particles are emitted away from the ship.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在**场景**窗口中，将`EngineTrail`对象复制三次，并将它们放置在飞船引擎后面。确保将它们旋转，以便粒子从飞船中发射出来。
- en: Finally, make all of them children of the player's ship. If this step is skipped,
    they will not follow the ship as it moves.![Time for action – adding engine trails](img/2014OT_08_19.png.jpg)
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将它们全部设置为玩家的飞船的子对象。如果跳过这一步，它们将不会随着飞船的移动而移动。![添加引擎尾迹的行动时间](img/2014OT_08_19.png.jpg)
- en: '*What just happened?*'
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: We put into practice what we learned about particle systems to create trails
    for our space ship's engines. Because they are children of the ship and simulate
    in world space, they move with the ship and trail off as one would expect.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将关于粒子系统的知识付诸实践，为我们的宇宙飞船引擎创建尾迹。因为它们是船的子对象，并在世界空间中模拟，所以它们会随着船移动，并像预期的那样逐渐消失。
- en: Have a go hero – more trails
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试英雄 - 更多尾迹
- en: The enemy ships have engines too. Try adding trails to the enemy ships. Be careful
    about picking the local or world space to simulate in. Because the ships move
    to make it look like the player is moving, simulating in world space could have
    some unusual side effects.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 敌舰也有引擎。尝试为敌舰添加尾迹。注意选择本地空间或世界空间进行模拟。因为船只移动是为了让玩家看起来在移动，所以在世界空间中模拟可能会有一些不寻常的副作用。
- en: If you gave the player a turbo boost effect earlier, it is time to add some
    extra effects to it now. Try changing the length of the trails when the player
    is boosting. Perhaps the ship taps into a special type of fuel when it boosts.
    If it burns a different color, then the trails would have to be a different color,
    or series of colors, when the player is boosting.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你之前为玩家添加了涡轮增压效果，现在是时候为它添加一些额外的效果了。尝试在玩家加速时改变尾迹的长度。也许当飞船加速时，它会利用一种特殊的燃料。如果它燃烧的颜色不同，那么当玩家加速时，尾迹的颜色或颜色系列也必须不同。
- en: Putting it together
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将其组合
- en: So far, we learned about audio effects and particle systems on their own. They
    each can add a lot to the scene, setting the mood and giving that touch of polish
    that sets a game apart. But there are many effects that cannot stand on their
    own as one or the other. Explosions, for example, are simply not that impressive
    unless you have both the visual and auditory effects.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们学习了关于音频效果和粒子系统的基础知识。它们各自可以为场景增添很多，设定氛围，并给游戏带来独特的光泽。但是，有许多效果不能单独作为一项或另一项存在。例如，爆炸如果没有视觉和听觉效果，就根本不会那么令人印象深刻。
- en: Explosions
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 爆炸
- en: It is so much more satisfying to destroy enemies when they explode. It takes
    both a particle effect and the sound effect to make a proper explosion. We will
    start by creating an explosion prefab. Then we will update the player's shooting
    to spawn the explosion when asteroids and enemy ships are destroyed.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 当敌人爆炸时摧毁他们要满足得多。要制造一个合适的爆炸，需要粒子效果和声音效果。我们将首先创建一个爆炸预制体。然后我们将更新玩家的射击，以便在摧毁小行星和敌舰时产生爆炸。
- en: Time for action – adding explosions
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加爆炸的时间
- en: A single particle system and script will allow us to create some nice explosions
    that can be used everywhere.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 一个单独的粒子系统和脚本可以让我们创建一些可以在任何地方使用的漂亮的爆炸效果。
- en: We first need some new textures to make the explosion look like fire. Luckily,
    Unity provides a multitude of basic particle textures. To include them in your
    project, go to the top of the Unity Editor and navigate to **Assets** | **Import
    Package** | **Particles**.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先需要一些新的纹理来让爆炸看起来像火焰。幸运的是，Unity提供了多种基本的粒子纹理。要将它们包含到你的项目中，请前往Unity编辑器的顶部，导航到**Assets**
    | **Import Package** | **Particles**。
- en: In the resulting window, select **Import** and wait for Unity to finish importing
    them. This package is a great resource, including both textures and complete particle
    systems. However, all of the particle systems included use the old system that
    will be phased out of Unity over the next few versions. Despite this, we can still
    make full use of the included materials.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的窗口中，选择**导入**并等待Unity完成导入。这个包是一个很好的资源，包括纹理和完整的粒子系统。然而，包含的所有粒子系统都使用即将被Unity淘汰的旧系统。尽管如此，我们仍然可以充分利用包含的材料。
- en: Create a new `particleSystem` object and name it `Explosion`.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`particleSystem`对象并将其命名为`Explosion`。
- en: First, in the **Initial** module, we need to make the effect last for a short
    time. Set the **Duration** to **0.5** and the **Start Lifetime** option to **1**.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在**初始**模块中，我们需要让效果持续一段时间。将**持续时间**设置为**0.5**，将**开始生命周期**选项设置为**1**。
- en: To keep the particles close together, use a value of **0.5** for the **Start
    Speed** option.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了让粒子更靠近，将**开始速度**选项的值设置为**0.5**。
- en: Tip
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: When we are done with this system, it will not loop. However, it is easier to
    see what we are working with if we let it loop for now.
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当我们完成这个系统后，它将不会循环。然而，如果我们现在让它循环，更容易看到我们在处理什么。
- en: Next, we need more particles, so go to the **Emission** module. Set the **Rate**
    option to **120** to generate the proper amount.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要更多的粒子，所以前往**发射**模块。将**速率**选项设置为**120**以生成适当数量的粒子。
- en: An explosion is generally round, so we need to adjust the **Shape** module next.
    Select **Sphere** for the **Shape** setting and set the **Radius** option to **0.5**.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 爆炸通常是圆形的，所以我们需要调整**形状**模块。将**形状**设置选择为**球体**，并将**半径**选项设置为**0.5**。
- en: Now for the **Color over Lifetime** module. An explosion is bright at the beginning
    and fades to brown, followed by black as it burns. For the **Color** option, start
    with an army green color, followed by faded yellow, then medium brown, and finally
    black at the end. Also, cause **Alpha** to fade in at the beginning and out at
    the end. This keeps the particles from popping in and out of existence.![Time
    for action – adding explosions](img/2014OT_08_20.png.jpg)
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来是**生命周期内颜色变化**模块。爆炸开始时很亮，然后逐渐变成棕色，随后在燃烧过程中变为黑色。对于**颜色**选项，从军绿色开始，然后是淡黄色，接着是中棕色，最后在结束时变为黑色。同时，让**Alpha**在开始时逐渐出现，在结束时逐渐消失。这样可以防止粒子突然出现和消失。![添加爆炸的时间
    - 添加爆炸](img/2014OT_08_20.png.jpg)
- en: Next, we need a fire material for our particles. For the **Material** setting
    in the **Renderer** module, select the **Fire Smoke** material. It can also be
    found in your **Project** window by going to **Standard Assets** | **Particles**
    | **Sources** | **Materials**.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要为我们的粒子创建一个火焰材质。在**渲染器**模块的**材质**设置中，选择**火焰烟雾**材质。你也可以在**项目**窗口中找到它，通过导航到**Standard
    Assets** | **Particles** | **Sources** | **Materials**。
- en: Once we are satisfied with the look of the system, make sure the **Play On Awake**
    checkbox is checked and the **Looping** checkbox is not checked in the **Initial**
    module.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们对系统的外观感到满意，确保在**初始**模块中勾选**在启动时播放**复选框，并且不要勾选**循环**复选框。
- en: As with the asteroids and enemy ships, the explosion needs to move around our
    player as they move. It also needs to destroy itself when it is done emitting.
    So, create a new script and name it `Explosion`.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与小行星和敌舰一样，爆炸需要随着玩家的移动而移动。它还需要在完成发射后自行销毁。因此，创建一个新的脚本并将其命名为`Explosion`。
- en: This script is short and only includes two functions. The first function, `Update`,
    checks to see if the `particleSystem` object is missing or has finished playing.
    If either is true, the `gameObject` is destroyed.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个脚本很短，只包含两个函数。第一个函数`Update`检查`particleSystem`对象是否存在或是否已经播放完毕。如果任一条件为真，则销毁`gameObject`。
- en: '[PRE10]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The second function, `LateUpdate`, simply uses the `PlayerShip.Rotate` function,
    which we created in [Chapter 6](ch06.html "Chapter 6. Specialties of the Mobile
    Device – Touch and Tilt"), *Specialities of the Mobile Device – Touch and Tilt*,
    to move the explosion for the player's movement. This is the same way we move
    the asteroids and enemy ships around as the player moves.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个函数`LateUpdate`简单地使用我们创建在[第6章](ch06.html "第6章. 移动设备的特性 – 触摸和倾斜")中，即*移动设备的特性
    – 触摸和倾斜*的`PlayerShip.Rotate`函数，来移动爆炸效果以匹配玩家的移动。这与玩家移动时移动小行星和敌舰的方式相同。
- en: '[PRE11]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Return to Unity and add the script to the `Explosion` object.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回Unity，并将脚本添加到`Explosion`对象中。
- en: Next, add an **Audio Source** component to the object.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，向对象添加一个**音频源**组件。
- en: For this component, we need the **Play On Awake** checkbox checked. Also select
    **Linear Rolloff** for the **Volume Rolloff** mode and **10** for the **Min Distance**,
    both found under **3D Sound Settings**.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这个组件，我们需要勾选**在激活时播放**复选框。同时，在**3D声音设置**下选择**线性衰减**作为**音量衰减模式**，并将**最小距离**设置为**10**。
- en: And, of course, select the **Explosion** sound effect for the source's audio
    clip. These settings will cause the sound to play as soon as the explosion is
    spawned.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当然，为源音频剪辑选择**爆炸**声音效果。这些设置将使声音在爆炸生成时立即播放。
- en: To complete the explosion's creation, turn the object into a prefab and delete
    the instance from the scene.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要完成爆炸效果的创建，将对象转换为预制体，并从场景中删除实例。
- en: Next, we need to update the `TouchShoot` script to utilize the explosion. Open
    it now.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要更新`TouchShoot`脚本以利用爆炸效果。现在打开它。
- en: To the beginning, we add a variable to hold a reference to the explosion.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们在代码中添加一个变量来保存对爆炸的引用。
- en: '[PRE12]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: After the line where we make use of the `Physics.Raycast` function and before
    we destroy the shot object, add this line. If there is a reference to the explosion,
    it uses the `Instantiate` function to spawn a new instance of the explosion and
    sets its position and rotation to that of the object that was shot.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用`Physics.Raycast`函数的行之后，在我们销毁射击对象之前，添加以下行。如果存在对爆炸的引用，它将使用`Instantiate`函数生成一个新的爆炸实例，并将其位置和旋转设置为被射击对象的位置和旋转。
- en: '[PRE13]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Back in Unity, find the instance of the `TouchShoot` script component on the
    player's ship. Add the reference to the `Explosion` prefab in the new **Explosion**
    slot.![Time for action – adding explosions](img/2014OT_08_21.png.jpg)
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到Unity中，找到玩家飞船上的`TouchShoot`脚本组件实例。在新的**爆炸**槽中添加对`Explosion`预制体的引用。![行动时间 –
    添加爆炸](img/2014OT_08_21.png.jpg)
- en: '*What just happened?*'
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We created an explosion. Unity provides us with a slew of particle textures
    with which we can create a multitude of effects. There are also a few particle
    systems already created, including an explosion. However, that explosion uses
    the old system and will not be included in Unity for much longer. We also updated
    our enemy ships and asteroids so they spawn the explosions when they are destroyed
    by the player.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 我们引发了一场爆炸。Unity为我们提供了一系列的粒子纹理，我们可以用它们创建出多种效果。此外，还有一些已经创建好的粒子系统，包括爆炸效果。然而，那个爆炸效果使用的是旧系统，并且很快就不会再包含在Unity中了。我们还更新了我们的敌舰和小行星，以便当它们被玩家摧毁时能够引发爆炸。
- en: Have a go hero – more types of explosions
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 大胆尝试吧 – 更多类型的爆炸
- en: One explosion is alright, but it is odd that the asteroids explode in the same
    manner as the ships. Different gases, fuels, and rock compositions all burn in
    different colors and with varying amounts of vigor. Create some more explosions
    for the different objects flying around your space. Change the colors and size
    to suit what is exploding. Also, explore other sound effects that provide differing
    auditory clues as to what is exploding. Finally, try to create a multi-explosion
    system. Perhaps the shots from the player cause the first explosion, and a chain
    reaction causes explosions in the weapon hold and engine compartment. To achieve
    this, take a look at using subemitters, or spawn a couple of different particle
    systems around the ship when it is destroyed.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 一个爆炸是可以的，但奇怪的是，小行星的爆炸方式与飞船相同。不同的气体、燃料和岩石成分以不同的颜色和不同程度的强度燃烧。为围绕你的太空中的不同物体创建更多的爆炸。更改颜色和大小以适应爆炸物。此外，探索其他声音效果，以提供有关爆炸的不同听觉线索。最后，尝试创建一个多爆炸系统。也许玩家的射击会导致第一个爆炸，而连锁反应会导致武器库和发动机舱中的爆炸。为了实现这一点，查看使用子发射器，或者当飞船被摧毁时在飞船周围生成几个不同的粒子系统。
- en: Creating laser blasts
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建激光束
- en: Being able to destroy objects and see them explode is great. It gives the player
    a reward for performing a simple action. However, when one fires a gun of any
    sort, you expect a reaction from it, whether or not anything is hit. To that end,
    we are going to create a muzzle-flash-type effect for the player's ship. Every
    time they tap the screen to fire, some particle systems will flash and a sound
    effect will play.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 能够摧毁物体并看到它们爆炸是很好的。这为玩家执行简单动作提供了奖励。然而，当开枪时，无论是否击中目标，你都会期望它有反应。为此，我们将为玩家的飞船创建一种类似于枪口闪光的效果。每次他们轻触屏幕开火时，一些粒子系统都会闪烁，并播放声音效果。
- en: Time for action – adding laser blasts
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 添加激光束
- en: A muzzle flash generally consists of two parts. The first is a straight blast,
    forward along the barrel. The second is a fan around the base of the first.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 脸部闪光通常由两部分组成。第一部分是沿着枪管向前直射的直线冲击波。第二部分是围绕第一部分底部的扇形。
- en: To begin, create a new `particleSystem` object and rename it as `LineBlast`;
    we will now proceed to make the first part.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个新的`particleSystem`对象并将其重命名为`LineBlast`；我们现在将开始制作第一部分。
- en: The flash does not last for very long, so find the **Duration** option in the
    **Initial** module and set it to **0.1**.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 闪光不会持续很长时间，因此请在**初始**模块中找到**持续时间**选项并将其设置为**0.1**。
- en: Next, we need to set the **Start Lifetime** option to **0.1** so the particles
    do not stay on screen for very long.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要将**起始寿命**选项设置为**0.1**，这样粒子就不会在屏幕上停留很长时间。
- en: The flash does not move away from the muzzle, so set the **Start Speed** option
    to **1**, keeping the particles close.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 闪光不会从枪口移开，因此将**起始速度**选项设置为**1**，以保持粒子靠近。
- en: The particles need to be sized to correspond with the size of our ship's muzzle.
    Set the **Start Size** option to **0.2** to keep them small.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 粒子的大小需要与我们的飞船枪口的大小相匹配。将**起始大小**选项设置为**0.2**以保持它们较小。
- en: It is no fun if our laser blasts are just white, so change the **Start Color**
    value to an appropriate color for your lasers.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们的激光束只是白色，那就没有乐趣了，所以将**起始颜色**值更改为适合你的激光的适当颜色。
- en: Last up for the **Initial** module is to uncheck the **Play On Awake** checkbox,
    keeping the system from triggering immediately when loaded.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一个要调整的是**初始**模块，取消选中**播放唤醒**复选框，以防止系统在加载时立即触发。
- en: Next we need to adjust the **Emission** module. The flash occurs in a burst,
    so set the **Rate** option to **0**.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要调整**发射**模块。闪光是突发性的，因此将**速率**选项设置为**0**。
- en: To make the burst, click on the **+** sign to the right of the **Bursts** list.
    A value of **5** will work well.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建爆发，点击**爆发**列表右侧的**+**号。**5**的值将工作得很好。
- en: Next we adjust the **Shape** module to emit the particles along a straight line.
    To this end, set the **Angle** option to **0** and the **Radius** option to **0.01**.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们调整**形状**模块以沿直线发射粒子。为此，将**角度**选项设置为**0**，将**半径**选项设置为**0.01**。
- en: Finally, we need to adjust the **Renderer** module. To stretch out the particles,
    change the **Render Mode** option to **Stretched Billboard** and set the **Length
    Scale** option to **-4.5**.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要调整**渲染器**模块。为了拉长粒子，将**渲染模式**选项更改为**拉伸公告板**，并将**长度缩放**选项设置为**-4.5**。
- en: Now that we are satisfied with the way this system looks, uncheck the **Looping**
    checkbox in the **Initial** module.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们对系统的外观感到满意，请在**初始**模块中取消选中**循环**复选框。
- en: Now create the second `particleSystem` object and rename it as `SpreadBlast`.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建第二个`particleSystem`对象，并将其重命名为`SpreadBlast`。
- en: These particles should last for as long as those of the first system. So, in
    the **Initial** module, set the **Duration** option to **0.1**, **Start Lifetime**
    to **0.1**, **Start Speed** to **1**, **Start Size** to **0.2**, and uncheck **Play
    On Awake**.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些粒子应该持续与第一个系统一样长的时间。因此，在**Initial**模块中，将**Duration**选项设置为**0.1**，**Start Lifetime**设置为**0.1**，**Start
    Speed**设置为**1**，**Start Size**设置为**0.2**，并取消选中**Play On Awake**。
- en: To make these particles distinct from the line, set the **Start Color** value
    to a slightly darker color.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使这些粒子与线条区分开来，将**Start Color**值设置为略暗的颜色。
- en: Next, in the **Emission** module, set the **Rate** option to **0** and add the
    **Bursts** option with a **Particles** value of **30**.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在**Emission**模块中，将**Rate**选项设置为**0**，并添加**Bursts**选项，其**Particles**值为**30**。
- en: For the **Shape** module, set the **Angle** option to **60** and the **Radius**
    option to **0.01**. This causes the particles to fan out when spawned.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**Shape**模块，将**Angle**选项设置为**60**，将**Radius**选项设置为**0.01**。这导致粒子在生成时向外扩散。
- en: For the **Renderer** module, set the **Render Mode** option to **Stretched Billboard**
    and the **Length Scale** option to **-3**.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**Renderer**模块，将**Render Mode**选项设置为**Stretched Billboard**，将**Length Scale**选项设置为**-3**。
- en: Finally, once we are satisfied with the look of the system, again uncheck the
    **Looping** checkbox in the **Initial** module.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，一旦我们对系统的外观感到满意，再次在**Initial**模块中取消选中**Looping**复选框。
- en: Before we put the particle systems in place, we need to create a script. Create
    a new one and name it `LaserBlast`. This script will trigger the particle systems
    and the audio clip to play.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在放置粒子系统之前，我们需要创建一个脚本。创建一个新的脚本并将其命名为`LaserBlast`。此脚本将触发粒子系统和音频剪辑的播放。
- en: This script starts with a single variable. This variable holds the list of systems
    to be triggered when the script is told to fire.
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此脚本从单个变量开始。此变量保存当脚本被指示发射时将被触发的系统列表。
- en: '[PRE14]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Next we have the only function in the script, `Fire`. It starts by making sure
    there is an **Audio Source** component on the same `GameObject`. If it is present,
    `PlayOneShot` is called using the source's clip. This function plays the passed
    file once without blocking the playing of other clips.
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，脚本中只有一个函数，即`Fire`。它首先确保在同一个`GameObject`上有一个**Audio Source**组件。如果存在，则使用源剪辑调用`PlayOneShot`。此函数播放传入的文件一次，而不会阻止其他剪辑的播放。
- en: '[PRE15]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The function continues by looping through the list of particle systems and using
    `Play` to trigger them if they exist.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数继续通过遍历粒子系统列表，并使用`Play`来触发它们（如果它们存在）。
- en: '[PRE16]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Next, we need to update the `TouchShoot` script. It needs to call the `Fire`
    function on the `LaserBlast` script when the player touches the screen. To that
    end, we first add the `lasers` variable to hold the list of objects that need
    to be triggered.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要更新`TouchShoot`脚本。它需要在玩家触摸屏幕时调用`LaserBlast`脚本中的`Fire`函数。为此，我们首先添加`lasers`变量来保存需要触发的对象列表。
- en: '[PRE17]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: To the beginning of the `Update` function, we add the `didFire boolean` value.
    It will keep the lasers from being triggered more than once per frame.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Update`函数的开始处，我们添加`didFire boolean`值。这将防止激光在每个帧中触发多次。
- en: '[PRE18]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We next set the Boolean to true after the `if` statement where we check to see
    if the touch's phase value is found to be equal to `TouchPhase.Began`.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们接下来在检查触摸阶段值是否等于`TouchPhase.Began`的`if`语句之后将布尔值设置为真。
- en: '[PRE19]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: At the end of the `Update` function, if the `didFire boolean` is true, the `Fire`
    function that we will be writing shortly is called.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Update`函数的末尾，如果`didFire boolean`为真，我们将调用稍后要编写的`Fire`函数。
- en: '[PRE20]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Last up for the script, we add the `Fire` function. This function simply loops
    through the `lasers` array and calls their `Fire` function if they exist.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，对于脚本，我们添加`Fire`函数。此函数简单地遍历`lasers`数组，并在它们存在的情况下调用它们的`Fire`函数。
- en: '[PRE21]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now that we have all of the pieces, we need to put them together. Start by creating
    a new empty `GameObject` and naming it `LaserBlast`.
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经拥有了所有部件，我们需要将它们组合起来。首先创建一个新的空`GameObject`，并将其命名为`LaserBlast`。
- en: Next, make the `LineBlast` and `SpreadBlast` particle systems children of this
    new object. Be sure to set their positions and rotations to `0`.
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将`LineBlast`和`SpreadBlast`粒子系统设置为这个新对象的子对象。确保将它们的定位和旋转设置为`0`。
- en: Add our `LaserBlast` script to the object of the same name and add the two particle
    systems to the **Particles** list on the script component.
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们的`LaserBlast`脚本添加到同名对象中，并将两个粒子系统添加到脚本组件的**Particles**列表中。
- en: Next, add an **Audio Source** component to the object. Select the **Laser**
    sound effect for the **Audio Clip** value.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，向对象添加一个**音频源**组件。将**音频剪辑**值选择为**激光**声音效果。
- en: Finally for this object, expand the **3D Sound Settings** group and select **Linear
    Rolloff** for the **Volume Rolloff** value; otherwise, we will not be able to
    hear it.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，对于这个对象，展开**3D声音设置**组，并将**音量衰减**值设置为**线性衰减**；否则，我们将无法听到它。
- en: Position the laser blast in front of the muzzles of the player's ship. Duplicate
    it as needed to cover all the points. Also, make sure their local z axis points
    forward along the muzzles.
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将激光束放置在玩家飞船的炮口前方。根据需要复制，以覆盖所有点。同时，确保它们的局部z轴沿着炮口向前。
- en: Next, make all of your `LaserBlast` objects children of the player's ship so
    they keep moving with it.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将所有的`LaserBlast`对象设置为玩家飞船的子对象，这样它们就会随着飞船移动。
- en: Finally, add the objects to the **Lasers** list on the `TouchShoot` script component.![Time
    for action – adding laser blasts](img/2014OT_08_22.png.jpg)
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将对象添加到`TouchShoot`脚本组件上的**激光**列表中。![行动时间 – 添加激光束](img/2014OT_08_22.png.jpg)
- en: '*What just happened?*'
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We created laser blasts for the player. Every time the player touches the screen,
    they are triggered. This way the player can tell that they are shooting even if
    they fail to hit anything. It is a quick and short effect, but adds a lot to the
    final experience.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为玩家创建了激光束。每次玩家触摸屏幕时，它们都会被触发。这样玩家就可以知道他们在射击，即使他们没有击中任何东西。这是一个快速而短暂的效果，但为最终体验增添了大量内容。
- en: Have a go hero – more types of lasers
  id: totrans-316
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 英雄试炼 – 更多类型的激光
- en: The player can shoot lasers, now the enemy needs to too. Add some laser blasts
    to the enemy ships. Also, it is time to replace their sphere bullets with something
    better. Create a plasma ball to replace the sphere bullets. A smaller, looping
    version of the explosion could work for the ball. An appropriately colored version
    of the engine trails could work for the ball's trail as it flies towards the player.
    It might also be a good idea to add the alarms to the bullets. This way the player
    knows when they are about to be blasted out of the game.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 玩家现在可以射击激光了，敌人也需要这样做。向敌舰添加一些激光束。同时，是时候用更好的东西替换他们的球形子弹了。创建一个等离子球来替换球形子弹。爆炸的小型循环版本可以用于球体。发动机尾迹的适当着色版本可以用作球体飞向玩家时的轨迹。也许给子弹添加警报也是个好主意。这样玩家就知道他们即将被从游戏中击飞出去。
- en: Summary
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about special effects in Unity, specifically audio
    and particle systems. We started with understanding how Unity handles audio files.
    By adding background music and an alarm system, we put what was learned into practice.
    We moved on to understanding particle systems, and created engine trails for our
    player's ship. Finally, we put the two skill sets together and created explosions
    and laser blasts. Particle systems and audio effects add a lot to the final polish
    and look of a game.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了Unity中的特效，特别是音频和粒子系统。我们从了解Unity如何处理音频文件开始。通过添加背景音乐和警报系统，我们将所学知识付诸实践。然后，我们转向了解粒子系统，并为玩家的飞船创建了引擎尾迹。最后，我们将两项技能结合在一起，创建了爆炸和激光束。粒子系统和音频效果为游戏的最终润色和外观增添了大量内容。
- en: In the next chapter, we complete our experience together by taking a look at
    optimization in Unity. We will take a look at the tools provided for tracking
    performance. We will also create our own tool to track specific parts of script
    performance. We will also create our own tool to track specific parts of script
    performance. We will explore asset compression and other points that we can change
    to minimize the application footprint. Finally, key points will be discussed for
    minimizing lag.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过查看Unity中的优化来共同完成我们的体验。我们将查看用于跟踪性能的工具。我们还将创建自己的工具来跟踪脚本性能的特定部分。我们还将创建自己的工具来跟踪脚本性能的特定部分。我们将探索资产压缩和其他我们可以更改以最小化应用程序大小的点。最后，我们将讨论减少延迟的关键点。
