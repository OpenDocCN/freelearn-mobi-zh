- en: Chapter 8. More Features and Advances in SQLite
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章。SQLite 的更多特性和进展
- en: This chapter will explore some new features in SQLite, and it will also cover
    the recent advances made in this database. This chapter will show you how SQLite
    is exposed to other languages and frameworks and discuss the extensions of the
    C API, the usage of **PhoneGap**, and other cross-platform development environments.
    This chapter will also outline SQLite's other features and how SQLite has advanced
    to ensure that all those who use it can master it quickly.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将探讨 SQLite 的一些新特性，并介绍该数据库的最新进展。本章将展示 SQLite 如何暴露给其他语言和框架，并讨论 C API 的扩展、**PhoneGap**
    的使用以及其他跨平台开发环境。本章还将概述 SQLite 的其他特性以及 SQLite 如何发展以确保所有使用它的人都能快速掌握它。
- en: You will also look at how SQLite has changed in recent years, how it has advanced
    to be integrated with a variety of existing technologies, and how its simple,
    easy-to-use formula has guaranteed its popularity to others. The amount of apps
    that use database technology, without disclosing the backend or local database,
    is incredible. SQLite, as will be shown later, has advanced to new levels and
    kept its simplicity but with developers pushing it to achieve new heights and
    popularity.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 您还将了解 SQLite 在近年来的变化，它如何与各种现有技术集成，以及其简单、易用的公式如何保证其在其他领域的流行。使用数据库技术的应用程序数量令人难以置信，而这些应用程序没有公开后端或本地数据库。如后文所示，SQLite
    已经发展到新的水平，保持了其简单性，但同时也被开发者推向了新的高度和流行度。
- en: '**Firefox** and SQLite extensions to their browsers are available for administration
    purposes. SQLite has gone through several code changes, and in the future, it
    will continue to do so or be overtaken by something newer.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**Firefox** 和 SQLite 扩展可用于浏览器管理目的。SQLite 已经经历了几次代码变更，未来它将继续如此发展，或者被更新的技术所取代。'
- en: Adobe's Enterprise Management system works with PhoneGap, which uses SQLite.
    Because of its simple setup, there are several cases of SQLite using different
    technologies and integrating well.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Adobe 的企业管理系统与使用 SQLite 的 PhoneGap 兼容。由于其简单的设置，有多个案例展示了 SQLite 与不同技术的结合，并且整合良好。
- en: The growth of relational database management systems to this date have been
    very strong, and if the data requires industrial strength, storage, and application,
    SQLite is the right format. However, in more recent years, solutions such as NOSQL,
    which purely rely on the data selected from technologies such as REST APIs or
    web services, have not used **RDBMS** (**relational database management system**)
    to store their data. It will be retrieved and held in a file type structure, in
    effect, as its own version of RDMS. SQLite does not have the industrial support
    of tools like **database backup** or **database recovery**. In a world of mobile
    devices where the growth has been intensive and beating all types of expectation,
    SQLite is by far the easiest and quickest one to use with a minimum time spent
    learning.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，关系型数据库管理系统的发展非常强劲，如果数据需要工业级的存储、应用，SQLite 是正确的格式。然而，在最近几年，如 NOSQL 这样的解决方案，它们完全依赖于从
    REST API 或网络服务等技术中选择的数据，并没有使用 **RDBMS**（关系数据库管理系统）来存储它们的数据。数据将被检索并保存在文件类型结构中，实际上是其自己的
    RDMS 版本。SQLite 没有像 **数据库备份** 或 **数据库恢复** 这样的工业级工具支持。在一个移动设备增长迅速、超越所有类型预期的世界里，SQLite
    是迄今为止使用最简单、最快的一个，学习时间最少。
- en: The **Firefox SQLite Manager** facility is a good software extension to the
    browser. Once installed, it can serve as an aid to various processes of the database
    administrator.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**Firefox SQLite 管理器**功能是浏览器的良好软件扩展。一旦安装，它可以作为数据库管理员各种过程的辅助工具。'
- en: Its simplicity and flexibility make it great for developing and testing. There
    is no mechanism to ensure performance, and it is possible to tune up the library.
    SQLite is great for embedded applications that are somewhat fixed, single user,
    mobile users, and gaming information storage.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 它的简单性和灵活性使其非常适合开发和测试。没有机制来确保性能，但可以调整库。SQLite 对于某些固定、单用户、移动用户和游戏信息存储的嵌入式应用来说非常出色。
- en: It is easy to download and install SQLite. Once this is done, it gets fired
    up to work.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 的下载和安装非常简单。一旦完成，它就会启动并开始工作。
- en: PhoneGap plugins
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PhoneGap 插件
- en: Before starting to develop a software for PhoneGap with SQLite, the environment
    must be set up properly for the PhoneGap framework to work correctly with SQLite.
    The PhoneGap environment will enable the SQLite database to be set up and connected
    with Xcode, toward the end, to produce an iOS application.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用SQLite为PhoneGap开发软件之前，必须正确设置环境，以便PhoneGap框架能够正确地与SQLite一起工作。PhoneGap环境将使SQLite数据库能够设置并连接到Xcode，最终生成iOS应用程序。
- en: There is also a native SQLite plugin for PhoneGap, called **Brodysoft** (refer
    to [https://build.phonegap.com/plugins/2368](https://build.phonegap.com/plugins/2368)),
    that provides an interface for the storage and usage of the standard Web SQL database
    standards.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一个名为**Brodysoft**（参考[https://build.phonegap.com/plugins/2368](https://build.phonegap.com/plugins/2368)）的本地SQLite插件，它提供了一个用于存储和使用的标准Web
    SQL数据库标准的接口。
- en: 'As the demand for mobile technology, mobile apps, and mobile development grows,
    the need for further advancement, with products such as PhoneGap, will be demanding
    the following, for example:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 随着对移动技术、移动应用程序和移动开发的不断增长，对进一步发展的需求，例如使用PhoneGap等产品，将要求以下内容：
- en: PhoneGap will have increased application size limits
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PhoneGap将提高应用程序的大小限制
- en: It will have support for different plugins, including the Cordova plugins repository
    `plugins.cordova.io`
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将支持不同的插件，包括Cordova插件仓库`plugins.cordova.io`
- en: Additional PhoneGap plugins may not have to go through an approval process and
    can be approved easily
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些额外的PhoneGap插件可能不需要经过审批流程，并且可以轻松获得批准
- en: There will be a facility to upload your own plugins to your own development
    area so that you can test them privately
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将提供一个上传您自己的插件到您自己的开发区域的功能，以便您可以私下测试它们
- en: To support additional plugins, which are more than 600 on the PhoneGap environment,
    the `source` attribute can be used.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持超过600个在PhoneGap环境中的额外插件，可以使用`source`属性。
- en: PhoneGap plugins, unlike before, can contain compiled components such as frameworks,
    `.jar` files, and other related binaries. There is a lot of documentation about
    this procedure on the PhoneGap site. PhoneGap is now moving ahead with an `Amazon
    Mobile Ad Network` plugin, which will allow developers to monetize their app.
    This is because the `Amazon Ads` API has been created to be used within applications
    to facilitate advertising, and is a platform for this sole purpose. It will be
    used across different tablets, mobile devices, different utilities, and game apps.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: PhoneGap插件，与之前不同，可以包含编译后的组件，例如框架、`.jar`文件和其他相关二进制文件。关于这个过程的文档在PhoneGap网站上有很多。PhoneGap现在正在推进一个`Amazon
    Mobile Ad Network`插件，这将允许开发者将应用程序货币化。这是因为`Amazon Ads` API已被创建用于在应用程序内进行广告，并且是一个仅为此目的的平台。它将跨不同的平板电脑、移动设备、不同的实用程序和游戏应用程序使用。
- en: The `cordova.xml` file used by **Cordova** or PhoneGap is the main parameter
    file where configuration changes are made to the environment.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**Cordova**或PhoneGap使用的`cordova.xml`文件是主要参数文件，其中配置更改应用于环境。'
- en: 'For example, using the native Cordova/PhoneGap plugin for Android and iOS,
    the HTML5 Web SQL API can be used to code directly, as shown in the following.
    Here, the code is waiting to see if the API has been loaded before attempting
    to open the database:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用本地的Cordova/PhoneGap插件为Android和iOS，可以直接使用HTML5 Web SQL API进行编码，如下所示。在这里，代码正在等待API加载完成后再尝试打开数据库：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'There is a plugin available and developed for the PhoneGap system [https://github.com/litehelpers/Cordova-sqlite-storage](https://github.com/litehelpers/Cordova-sqlite-storage).
    In order to use this plugin, add the following code to your `config.xml` file:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个为PhoneGap系统开发并提供的插件[https://github.com/litehelpers/Cordova-sqlite-storage](https://github.com/litehelpers/Cordova-sqlite-storage)。为了使用此插件，请将以下代码添加到您的`config.xml`文件中：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This plugin is compatible with both iOS and Android operating systems and also
    works with Cordova.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此插件与iOS和Android操作系统兼容，并且也支持Cordova。
- en: 'The following piece of code is essential to ensure that a check is done, to
    see if the device is ready and if Cordova is ready to load:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段对于确保进行设备是否就绪以及Cordova是否就绪加载的检查至关重要：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Using the preceding plugin, it makes the inclusion of SQL directly into HTML5
    easier and faster, as shown in the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面的插件，它使得将SQL直接包含到HTML5中变得更容易、更快，如下所示：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It becomes easy to add the necessary HTML content, and this works with both
    iOS and Android. The relationship between HTML5, SQLite, and PhoneGap to compile
    is an advancement of technology.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 添加必要的HTML内容变得容易，并且这适用于iOS和Android。HTML5、SQLite和PhoneGap之间的编译关系是技术进步的体现。
- en: Not all the aspects of the `ALTER TABLE` statement are implemented in SQLite,
    and there is no support for the `GRANT` or `REVOKE` statements.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 并非`ALTER TABLE`语句的所有方面都在SQLite中实现，并且没有对`GRANT`或`REVOKE`语句的支持。
- en: Extensions to the C API
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C API的扩展
- en: SQLite binding functionality extends the popularity and diversity of the SQLite
    language, but it is not supported by the core developers of the database. Instead,
    the SQLite community takes care of these integrations, and is well-documented
    online. Scripting languages, such as Perl, PHP, and Python or Java, work nicely
    with SQLite.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite绑定功能扩展了SQLite语言的流行度和多样性，但并不受数据库核心开发者的支持。相反，SQLite社区负责这些集成，并且在线上有很好的文档记录。脚本语言，如Perl、PHP、Python或Java，与SQLite配合得很好。
- en: 'The C API interface specification for SQLite has several interface elements
    and can be grouped into the following categories:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite的C API接口规范有几个接口元素，可以归纳为以下几类：
- en: Category one has a list of objects and datatypes utilized by the SQLite library.
    There are over a dozen objects and datatypes in it. The most meaningful and common
    ones are the database object called `sqlite3` and the prepare statement called
    `sqlite3_stmt.`
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一类包含SQLite库使用的对象和数据类型列表。其中包含十多个对象和数据类型。最有意义且最常见的是名为`sqlite3`的数据库对象和名为`sqlite3_stmt`的预处理语句。
- en: Category two will have its list of constants used by SQLite and are referenced
    by the usage of the `#defines` syntax in the `sqlite3.h` header file. These are
    standard constants, such as `SQLITE_OPEN_READONLY.`
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二类将包含SQLite使用的常量列表，这些常量通过`sqlite3.h`头文件中`#defines`语法的使用来引用。这些是标准常量，例如`SQLITE_OPEN_READONLY`。
- en: Category three is a list of all the functions available and the methods they
    use within the objects, for returning values and usage of standard constants.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三类是所有可用函数及其在对象中使用的方法列表，用于返回值和使用标准常量。
- en: For example, the `int sqlite3_sleep(int);` function is based on the number of
    milliseconds that it will suspend the execution of an instruction.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`int sqlite3_sleep(int);`函数基于它将暂停指令执行的毫秒数。
- en: As mobiles become more powerful, there will always be an alteration to the amount
    of memory resources that SQLite can handle or use. The technology that is used
    within SQLite is called page cache. Now, page caching is important since this
    is how memory is used and set up for the SQLite performance. It has one I/O algorithm
    and two search algorithms. There is a binary search that uses the index of the
    table and full on brutal attack to read the full table. Since the limited decisions
    were made about how to write and implement them, and since it is more general
    and not designed for any specific application, the performance generally may not
    be equal to what is expected.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 随着移动设备的日益强大，SQLite可以处理或使用的内存资源量总会发生变化。SQLite内部使用的技术称为页面缓存。现在，页面缓存变得很重要，因为这是SQLite性能使用和设置内存的方式。它有一个I/O算法和两个搜索算法。有一个二分搜索使用表的索引，以及全表遍历的暴力攻击来读取整个表。由于对如何编写和实现它们的限制性决策，以及它更通用且未针对任何特定应用设计，性能通常可能不会达到预期。
- en: 'Although, SQLite does have an optimizer, it is not the most advanced of its
    type, but it is practical. In the following example, we see the creation of two
    tables and a join. We will use the `EXPLAIN` statement and then ask SQLite to
    see how it would get the results. As the results will begin to show, it will use
    one of the category formats discussed earlier in this section, which is just a
    major scan. It will only work properly if there is a `SELECT` statement with `JOIN`
    but with an index or a key on a simple query. On a complex query, you need to
    use the `EXPLAIN` statement. We just select one column from the first table and
    a scan of the whole table takes place:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管SQLite确实有一个优化器，但它不是最先进的，但它是实用的。在以下示例中，我们将看到两个表的创建和一个连接。我们将使用`EXPLAIN`语句，然后让SQLite显示它将如何获取结果。随着结果的开始显示，它将使用本节前面讨论的类别格式之一，即主要扫描。它只有在存在带有`JOIN`的`SELECT`语句且有索引或键的简单查询时才能正常工作。在复杂查询中，需要使用`EXPLAIN`语句。我们只从第一个表中选择一列，整个表进行扫描：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In terms of page cache, SQLite, as mentioned earlier, uses a disk with a page-based
    format. The cache along with SQLite is pulled from disk. There is no automatic
    recycling of pages; it can be reused once the page is empty. Also, if a page is
    reused again and again, it will become fragmented, and its data will be spread
    across the database file, which will decrease in terms of the performance.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面缓存方面，如前所述，SQLite 使用基于页面的磁盘格式。缓存与 SQLite 一起从磁盘中拉取。没有自动回收页面；一旦页面为空，就可以重用。此外，如果一个页面被反复重用，它将变得碎片化，其数据将在数据库文件中分散，这将在性能方面降低。
- en: As mentioned previously in this book, there is **Core Data** from Apple, standard
    for iOS, but SQLite, which is free, is the dominant and cross-platform database
    solution for mobile.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如本书之前所述，有来自苹果的 **Core Data**，这是 iOS 的标准，但免费的 SQLite 是移动设备上占主导地位且跨平台的数据库解决方案。
- en: 'With the advancement of new frameworks, there is a new technology, which aims
    to replace both: SQLite and Core Data. It is called **Realm**. It is free for
    both iOS and Android and would be a good product to investigate. While the others
    maybe limited, this product must ensure that it is easy to set up, use, and administer.
    So far, it is being used by a variety of large e-commerce and data sites, such
    as Pinterest or BBC. [Realm.io](http://Realm.io) is the location for this database
    software, is modern API for today''s changeable market.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 随着新框架的发展，出现了一种新技术，旨在取代 SQLite 和 Core Data：它被称为 **Realm**。它对 iOS 和 Android 都是免费的，并且是一个值得调查的好产品。虽然其他产品可能有限制，但这款产品必须确保它易于设置、使用和管理。到目前为止，它已被各种大型电子商务和数据网站使用，例如
    Pinterest 或 BBC。[Realm.io](http://Realm.io) 是这款数据库软件的位置，是适应今天多变市场的现代 API。
- en: With Realm, there is a plugin for **Xcode**, which seems to hook in and work
    well as per the demo. There is a complete API reference, which works with Objective-C,
    Swift, and Java. Realm also has its own Realm Browser from the Apple app store,
    which is used as an app to manage the databases, such as the Firefox plugin for
    SQLite.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Realm 中，有一个针对 **Xcode** 的插件，看起来在演示中钩入并运行良好。有一个完整的 API 参考文档，它与 Objective-C、Swift
    和 Java 一起工作。Realm 还有一个来自苹果应用商店的自己的 Realm 浏览器，它被用作管理数据库的应用程序，例如 SQLite 的 Firefox
    插件。
- en: Write Ahead Logging with SQLite
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQLite 的预写日志
- en: '**Write Ahead Logging** with SQLite, also known as **WAL**, is the standard
    method that states how SQLite implements the `rollback` and `commit` processes
    with this mobile database system. The disk access and input and output operations
    are more sequential, using the `WAL` methods. Using `WAL` will involve less of
    the `fsync()` functions and operations. It means it is more likely to work properly
    on different operating systems and smartphones. `WAL` is faster on most operations
    and provides better concurrencies, as there are no conflicts with processes reading
    and writing at the same time with a big reduction in any data block.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**Write Ahead Logging**（预写日志）与 SQLite，也称为 **WAL**，是 SQLite 实现该移动数据库系统中 `rollback`
    和 `commit` 流程的标准方法。磁盘访问以及输入输出操作更加顺序化，使用的是 `WAL` 方法。使用 `WAL` 将会减少 `fsync()` 函数和操作的使用。这意味着它在不同的操作系统和智能手机上更有可能正常工作。`WAL`
    在大多数操作上更快，并且提供了更好的并发性，因为没有冲突会发生在同时进行读写操作的过程中，任何数据块都将大幅减少。'
- en: 'As much as there are advantages, there are also limitations to this method.
    `WAL` does not work efficiently with very large transactions, but much better
    with smaller transactions. For transactions of around 100 megabytes, it will work
    fine, but over a gigabyte, it will start to reduce its efficiency. There is also
    another issue: `WAL` could fail operations if it encounters a *disk full* error,
    although, an extra operation is **checkpointing**, which is embedded as a part
    of the system. Developers need to be aware of this checkpointing.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这种方法有很多优点，但也有局限性。`WAL` 在处理非常大的事务时效率不高，但处理较小的事务时则要好得多。对于大约 100 兆字节的事务，它将运行良好，但超过
    1 吉字节，它将开始降低其效率。还有一个问题：如果 `WAL` 遇到 **磁盘满** 错误，它可能会失败操作，尽管，一个额外的操作是 **检查点**，它是作为系统的一部分嵌入的。开发者需要意识到这一点。
- en: '`WAL` and `rollback` may be slower than the current/traditional method of operation.
    This is because of the amount of reads and low attempts of writes on the database.
    This is only in the range of 1-2%. Another disadvantage is that the database page
    size cannot be changed when using the WAL mode even if it is an empty database.
    To resolve the problem, you have to restore from a backup using the provided **BACKUP
    API**, and you must be in a rollback journal mode in order to succeed. There is
    also a problem reading the **read-only WAL** databases.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`WAL` 和 `rollback` 可能比当前/传统的方法操作要慢。这是因为数据库的读取量和低写入尝试量。这仅限于 1-2% 的范围内。另一个缺点是，在使用
    WAL 模式时，即使数据库为空，也无法更改数据库页面大小。为了解决这个问题，你必须使用提供的 **BACKUP API** 从备份中恢复，并且你必须处于回滚日志模式才能成功。还有读取
    **只读 WAL** 数据库的问题。'
- en: '`WAL` works by creating and writing up a copy of the original database with
    no changes into a new/separate rollback journal file. Changes are then directly
    made to the database file. If there is a crash and the system has to perform the
    `rollback` operation, then the unchanged original version is played back to the
    database file, which will change to its original state. The `commit` operation
    is done when the rollback journal is deleted. It is quite an effective procedure.
    Transactions writing to disk are always fast because the content is written only
    once.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`WAL` 的工作原理是通过创建并写入一个不包含任何更改的原始数据库副本到一个新的/独立的回滚日志文件中。然后直接对数据库文件进行更改。如果发生崩溃并且系统必须执行
    `rollback` 操作，那么未更改的原始版本将被回放到数据库文件中，使其恢复到原始状态。当删除回滚日志文件时，执行 `commit` 操作。这是一个非常有效的程序。向磁盘写入事务总是很快，因为内容只写入一次。'
- en: The B-tree usage with SQLite
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQLite 中 B 树的使用
- en: The arbitrary storage of leaf nodes and its location on the actual disk will
    not link up or respond to the index order or any logical positioning. Therefore,
    a database search algorithm is used with the right structure, to change the position
    and quickly output a balanced search tree or, in short, a B-tree. Each branch
    of data will have its leaf nodes that link or refer to the memory location that
    is used to store each and every table of the database.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 叶节点的任意存储及其在物理磁盘上的位置不会与索引顺序或任何逻辑位置链接或响应。因此，使用正确的结构，数据库搜索算法被用来改变位置并快速输出一个平衡搜索树，简而言之，就是一个
    B 树。每个数据分支都将有其叶节点，这些叶节点将链接或引用用于存储数据库中每个表的内存位置。
- en: B-tree allows sequential access, deletions, and insertions, based on the general
    binary search tree in a node that can have two or more children. When data is
    removed or added, the number of child nodes will change, and in order to maintain
    a specific range, some internal nodes may join or split. Every internal node within
    a B-tree structure will have a number of keys. Each of these keys will have a
    value and will be divided into subtrees. B-tree is a good way to search for data
    with a key associated to find the right data, but it is inefficient at search
    data with a query string; it uses an index to speed up this searching. B-trees
    are an efficient way of searching data with a key, and when executed correctly,
    they become very quick. This is an explanation about B-tree and how it is applied
    with SQLite.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: B 树允许基于节点中的一般二叉搜索树进行顺序访问、删除和插入，节点可以有两个或更多子节点。当数据被移除或添加时，子节点数量会发生变化，为了保持特定的范围，一些内部节点可能会合并或分裂。B
    树结构中的每个内部节点都将有一个键的数量。每个键都将有一个值，并将被分成子树。B 树是查找与键关联的数据的好方法，但它在搜索带有查询字符串的数据时效率不高；它使用索引来加速这种搜索。B
    树是搜索带有键的数据的有效方法，并且当正确执行时，它们变得非常快。这是关于 B 树及其在 SQLite 中应用的解释。
- en: Creating a simple Swift
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个简单的 Swift
- en: With the advent of Swift and Swift2, there is the use of an environment called
    a **playground** now. It is a place where you can set up a quick environment with
    some code and then see the results. It is a quick, new way to use the new setup.
    When you start, it will have a main window and the results on the second, split
    one.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 Swift 和 Swift2 的出现，现在有一个称为 **playground** 的环境被使用。这是一个你可以设置一个带有一些代码的快速环境并查看结果的地方。这是一种快速、新的使用新设置的方法。当你开始时，它将有一个主窗口和第二个，分割的结果窗口。
- en: 'In Xcode, navigate to **New** | **Playground** and the following screenshot
    will be shown. Give a name to your playground. You can have several running of
    them under different platforms, so a meaningful name would be useful:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Xcode 中，导航到 **新建** | **Playground**，以下截图将显示。给你的 playground 起一个名字。你可以在不同的平台上运行多个
    playground，因此一个有意义的名字会有所帮助：
- en: '![Creating a simple Swift](img/4725_08_01.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![创建简单的Swift](img/4725_08_01.jpg)'
- en: 'Once this is created and the **Next** button is clicked on, the following screen
    will appear. Here, you can create the code, test ideas and code snippets, and
    just try it out. It is a great and simple idea, which will help motivate existing
    developers, and create new developers for the future:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建完成并点击**下一步**按钮，就会出现以下屏幕。在这里，您可以创建代码，测试想法和代码片段，并尝试运行。这是一个既简单又伟大的想法，将有助于激励现有开发者，并为未来的开发者创造机会：
- en: '![Creating a simple Swift](img/4725_08_02.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![创建简单的Swift](img/4725_08_02.jpg)'
- en: As you can see from the preceding screenshot, there is a split page on the right-hand
    side, which can be adjusted as per requirement. The code appears on the left-hand
    side, and the results appear on the right-hand side. In the preceding code, a
    call to `UIKIT` is made; the next line creates a variable called `str` and has
    a default string value of `Hello playground`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个截图所示，右侧有一个分页，可以根据要求进行调整。代码出现在左侧，结果出现在右侧。在前面的代码中，调用了 `UIKIT`；下一行创建了一个名为 `str`
    的变量，其默认字符串值为 `Hello playground`。
- en: '**UIKit** is the core foundation of iOS framework that is used for on app development.
    After `var` is defined as `str` to equal `Hello Playground` in order to change,
    it should be defined as `str = New Playground`, which will reassign the variable
    to a new value. Creating a default system, using the `var` statement, and then
    assigning it, shows that the default variable value can be changed. However, if
    you use the `let` statement to say `let str =new play` and straight after that
    add `str =newnewplay line`, the system would throw an error, because you cannot
    change the value of a constant with the `let` command.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**UIKit** 是用于应用程序开发的iOS框架的核心基础。将 `var` 定义为 `str` 等于 `Hello Playground` 以便更改后，应将其定义为
    `str = New Playground`，这将重新分配变量为新值。使用 `var` 语句创建默认系统，然后分配它，表明默认变量值可以被更改。然而，如果您使用
    `let` 语句说 `let str =new play` 并紧接着添加 `str =newnewplay line`，系统会抛出错误，因为您不能使用 `let`
    命令更改常量的值。'
- en: The playground can accept different types of data types, as you would imagine,
    making it a fun but productive way to get into development or test new ideas.
    In the next simple example, a variable called `age`, with a datatype of `int`,
    is set up.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 演示场可以接受不同类型的数据类型，正如您所想象的，这使得它成为进入开发或测试新想法的有趣而富有成效的方式。在下一个简单的例子中，设置了一个名为 `age`
    的变量，其数据类型为 `int`。
- en: 'A default value of `25` is given to this value. Then, take the value of age
    and multiply it by `10`, and you will get a new value of `250`, as shown in the
    following screenshot. This is the beauty of the playground:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 给这个值赋予一个默认值 `25`。然后，将年龄值乘以 `10`，您将得到一个新的值 `250`，如以下截图所示。这是演示场的美丽之处：
- en: '![Creating a simple Swift](img/4725_08_03.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![创建简单的Swift](img/4725_08_03.jpg)'
- en: 'Swift has a good range of comparison operators, just as most languages, but
    you can use the `=` and `>` ways or the `<` way as well, as shown the following
    screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Swift拥有丰富的比较运算符，就像大多数语言一样，但您可以使用 `=` 和 `>` 方式，也可以使用 `<` 方式，如以下截图所示：
- en: '![Creating a simple Swift](img/4725_08_04.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![创建简单的Swift](img/4725_08_04.jpg)'
- en: 'The Swift interpolation is also easier with Swift. By creating a variable and
    then using the command to print the name , for example, by using the `\(name)`
    where name is variable name, as shown in the following screenshot. It is easy,
    but it is good to practice this again and again so that the information is locked
    inside your mind:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Swift的字符串插值也更容易，通过创建一个变量然后使用命令打印名称，例如，使用 `\(name)`（其中 `name` 是变量名），如以下截图所示。这很简单，但反复练习是很好的，这样信息就能在您的脑海中固定下来：
- en: '![Creating a simple Swift](img/4725_08_05.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![创建简单的Swift](img/4725_08_05.jpg)'
- en: 'As shown in the following screenshot, the usage of the `+` concatenation does
    not work in Swift, especially the merging of string, doubles, or integers. But
    the expression in the next image clearly shows how `\` between the `name`, `age`,
    or `latitude` can be a part of the correct syntax, expressing the output properly:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下截图所示，在Swift中，`+` 连接运算符的使用不起作用，尤其是字符串、双精度浮点数或整数的合并。但下一张图清楚地显示了在 `name`、`age`
    或 `latitude` 之间的 `\` 可以成为正确语法的部分，正确地表达输出：
- en: '![Creating a simple Swift](img/4725_08_06.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![创建简单的Swift](img/4725_08_06.jpg)'
- en: 'The use of arrays is easier in Swift, and these arrays will store a collection
    of data, such as a grid, as a part of a big collection of information. An array
    called `oddNumbers` will have four figures, such as `(3, 5, 7, 9)`. There will
    be another array called `songs`, as shown here:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Swift 中使用数组更为简便，这些数组将存储数据集合，例如网格，作为大量信息集合的一部分。一个名为 `oddNumbers` 的数组将包含四个数字，例如
    `(3, 5, 7, 9)`。还有一个名为 `songs` 的数组，如下所示：
- en: '![Creating a simple Swift](img/4725_08_07.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![创建简单的 Swift](img/4725_08_07.jpg)'
- en: The Swift language is vast and has many examples, but we can't cover all of
    them in this short chapter. This chapter will show you the updates from SQLite,
    PhoneGap, and some updates on Swift.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 语言非常广泛，有许多示例，但我们无法在本章中涵盖所有内容。本章将向您展示 SQLite、PhoneGap 的更新以及 Swift 的一些更新。
- en: 'For example, the `for` loop is an easier one to use, which is clearly shown
    in the following scrweenshot. In this statement, the print statement would have
    run 10 times as shown in the following screenshot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`for` 循环更容易使用，这在以下屏幕截图中有明确的展示。在这个语句中，打印语句将运行 10 次，如以下屏幕截图所示：
- en: '![Creating a simple Swift](img/4725_08_08.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![创建简单的 Swift](img/4725_08_08.jpg)'
- en: 'Here is another example of trying to use the `for` command where the number
    in the loop is not required and `_` is used instead. But, the `str` print command
    has completed its execution five times because the word `gone` was sought, printed,
    and concatenated, as shown in the following screenshot:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是尝试使用 `for` 命令的另一个例子，其中循环中的数字不是必需的，而是使用 `_` 代替。但是，`str` 打印命令已经执行了五次，因为寻找并打印了单词
    `gone`，如以下截图所示：
- en: '![Creating a simple Swift](img/4725_08_09.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![创建简单的 Swift](img/4725_08_09.jpg)'
- en: As mentioned previously, the use of playgrounds will be—as the name suggests—
    *Swift and fun to use*.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，使用游乐场将——正如其名所示——*Swift 且有趣*。
- en: Just cut and paste it in code and then run it. From Xcode 7 and beyond, the
    actual code that you can put into playgrounds will be rich, have comments, and
    be much more than pseudo coding, because it can be added into your apps.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 只需将其粘贴到代码中，然后运行即可。从 Xcode 7 及以后版本开始，你可以放入游乐场的实际代码将是丰富的、有注释的，并且远不止伪代码，因为它可以添加到你的应用程序中。
- en: You will be able to add rich text features, comments, and other necessary text
    that will aid the development and creativity of the programming process.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你将能够添加丰富的文本功能、注释以及其他有助于编程过程开发和创造性的文本。
- en: Imagine that when an update of an API is released, it will be a great and fast
    way to look at the API and write or hack some code to make it work in playground.
    Apart from being informative and quick, it will also serve as a training tool
    for you and your colleagues. It will boost training sessions, and enable developers
    to try new ideas and programming code without hindrance to others and their common
    projects.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，当 API 更新发布时，这将是一种查看 API 并编写或修改一些代码以使其在游乐场中工作的极好且快速的方式。除了提供信息和快速之外，它还将作为你和你同事的培训工具。它将提高培训课程，并使开发者能够在不影响他人及其共同项目的情况下尝试新想法和编程代码。
- en: What a beautifully interactive and modern way to learn and use the existing
    programming skills to gain new knowledge. The usage and availability of an interactive
    debugging console in Swift allows a change/enhancement to the product that modernizes
    its efforts.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种多么美丽、互动且现代的学习和使用现有编程技能以获取新知识的方式。Swift 中交互式调试控制台的使用和可用性允许对产品进行改变/增强，从而现代化其努力。
- en: Since it was designed from the ground up, Swift aimed to be quick, fast in action
    and coding, and work with both the Objective-C interoperability and Swift to include
    and shared libraries, code, and values, as modern 21st century compiler will aid
    its dominance in the coming years. Objective-C and Swift code can co-exist and
    work together or separately.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它是从头开始设计的，Swift 致力于快速、行动迅速且编码迅速，并且与 Objective-C 兼容性以及 Swift 一起包括和共享库、代码和值，因为现代
    21 世纪的编译器将有助于其在未来几年的主导地位。Objective-C 和 Swift 代码可以共存并协同工作或单独工作。
- en: The built-in high performance compiler has been created to maximize the Apple
    hardware, protocols, and network availability. It is optimized to run very quickly
    and improve development and compilation speeds.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 内置的高性能编译器是为了最大化苹果硬件、协议和网络可用性而创建的。它已优化以非常快速地运行并提高开发和编译速度。
- en: As part of its portfolio, the Swift language is one of the most modern languages,
    using the "best of" other scripting languages and removing problems such as poor
    performance, or syntax related issues to move on from the C and Objective-C code
    paradigm. There are many languages out there. But Swift is the only one where
    you can code and learn in a modern way. By learning now, you are preparing for
    the near future, where this language will be popular. It is a full successor to
    Objective-C and C-related languages.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 作为其产品组合的一部分，Swift语言是最现代的语言之一，它采用了其他脚本语言的“最佳”部分，并消除了诸如性能不佳或与语法相关的问题，从而超越了C和Objective-C代码范式。世界上有许多语言。但Swift是唯一一种你可以用现代方式编码和学习的语言。通过现在学习，你正在为不久的将来做准备，那时这种语言将变得流行。它是Objective-C和C相关语言的完全继任者。
- en: Swift has been designed to be modern and opt out of the functionality that would
    actually stop a programmer developing. So, all the stops for slow development
    are extinct. For example, all values are, by default, not null. The use of safety
    for the language has been encouraged and built as part of the software, for example,
    a variable uses the `var` statement, and the `let` statement will be there for
    constants. When defining any "Swift" object for example, the value won't be nil
    because the compiler will deal with it and set it as a part of the safety regime.
    Enforcing these types of niceties encourages better, professional, cleaner, fun,
    and innovative code.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Swift被设计成现代的，并摒弃了那些实际上会阻止程序员发展的功能。因此，所有阻碍缓慢发展的因素都已消失。例如，所有值默认情况下都不是null。语言的安全性得到了鼓励，并作为软件的一部分构建，例如，变量使用`var`语句，而`let`语句将用于常量。例如，在定义任何“Swift”对象时，值不会是nil，因为编译器会处理它并将其作为安全制度的一部分。强制这些类型的细微之处鼓励编写更好、更专业、更干净、更有趣和更具创新性的代码。
- en: 'Swift has a superbly modern and much-improved error-handling model that will
    provide a clear and concise way to develop and gain modern skills using state-of-the-art,
    object-oriented technology. It also captures any necessary error so that the program
    does not crash, and deal with it. It works nicely with **NSError** and other related
    iOS frameworks. For example, see the following:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Swift拥有一个卓越的现代且改进的错误处理模型，它将提供一种清晰简洁的方式来使用最先进、面向对象的技术开发和获得现代技能。它还捕获任何必要的错误，以便程序不会崩溃，并处理它。它与**NSError**和其他相关iOS框架配合得很好。例如，请参见以下内容：
- en: '[PRE5]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Swift2 has now been made open source, which will encourage many more users,
    on many different platforms, to architect, design, and develop software. It will
    enable Apple to get into areas of development often used by their competitors
    in the market place. It will have a huge following, and more so when those faithful
    Objective-C programmers change to Swift.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Swift2现在已被开源，这将鼓励更多不同平台上的用户进行软件的架构、设计和开发。这将使苹果能够进入市场上竞争对手经常使用的开发领域。它将拥有庞大的追随者，尤其是当那些忠诚的Objective-C程序员转向Swift时。
- en: New, interesting, and heavy duty code can be written in Swift using some great
    and powerful language/syntax, with commands such as `repeat`, `defer`, and `guard`.
    Apple is also providing a migration tool to convert code to new playgrounds and
    application development code for easy execution. These are some of the benefits
    that await us for development using Swift2.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 使用一些出色的强大语言/语法，如`repeat`、`defer`和`guard`，可以在Swift中编写新颖、有趣和功能强大的代码。苹果还提供了一种迁移工具，可以将代码转换为新的游乐场和应用程序开发代码，以便轻松执行。这些是使用Swift2进行开发所期待的一些好处。
- en: Swift is designed to be modern, Swift2 uses information, functionality, and
    the compiler development from modern research, programming languages, and previous
    experience of different Apple development, product and coding skills. A modern
    approach, and the ability to structure extensions and protocols, will ensure that
    it is around for some time.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Swift的设计目标是现代的，Swift2采用了来自现代研究、编程语言以及不同苹果开发、产品和编码技能的先验经验的信息、功能以及编译器开发。一种现代的方法，以及结构扩展和协议的能力，将确保其存在一段时间。
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned some advanced aspects and future advances of SQLite
    and how it fits with the current cross-platform development. The chapter outlines
    the changes of SQLite and its growth and links with PhoneGap. PhoneGap also has
    integrated with content management systems, such as Adobe Enterprise Manager,
    which has had several advances in technology, and client license purchases have
    rocketed its popularity. In this chapter, you have also touched on what is possible
    in the new Swift language and how it will affect the future of games, apps, and
    utilities.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了SQLite的一些高级方面和未来的进步，以及它是如何与当前跨平台开发相匹配的。本章概述了SQLite的变化及其增长与PhoneGap的联系。PhoneGap还与内容管理系统集成，例如Adobe
    Enterprise Manager，该系统在技术方面取得了几个进步，并且客户端许可证的购买激增了其知名度。在本章中，你还触及了新Swift语言中可能实现的内容以及它将如何影响游戏、应用程序和实用程序的未来。
