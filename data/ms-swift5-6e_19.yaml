- en: '19'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '19'
- en: Swift Formatting and Style Guide
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Swift格式和风格指南
- en: Throughout my development experience, every time I learned a new programming
    language, there was usually some mention of how the code for that language should
    be written and formatted. Early in my development career (which was a long time
    ago), these recommendations were very basic formatting recommendations, being
    about things such as how to indent your code, or having one statement per line.
    It really wasn't until the last 10-12 years that I started to see complex and
    detailed formatting and style guides for different programming languages. Today,
    you would be hard-pressed to find a development shop with more than two or three
    developers that does not have a style/formatting guide for each language that
    they use. Even companies that do not create their own style guides generally refer
    back to some standard guide published by other companies, such as Google, Oracle,
    or Microsoft. These style guides help teams to write consistent and easy-to-maintain
    code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的开发经验中，每次我学习一门新的编程语言时，通常都会提到如何编写和格式化该语言的代码。在我的开发生涯早期（那是很久以前），这些推荐非常基础，主要是关于如何缩进代码，或者每行只有一个语句等。实际上，直到最近10-12年，我才开始看到不同编程语言的复杂和详细的格式和风格指南。如今，你很难找到一个拥有超过两三个开发者的开发机构，他们没有为每种使用的语言制定风格/格式指南。即使不创建自己的风格指南的公司，通常也会参考其他公司发布的某些标准指南，如Google、Oracle或Microsoft。这些风格指南帮助团队编写一致且易于维护的代码。
- en: 'In this chapter, you will learn the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习以下内容：
- en: What a style guide is
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是风格指南
- en: What makes a good style guide
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么使一个好的风格指南
- en: Why it is important to use a style guide
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么使用风格指南很重要
- en: How to create a sample style guide
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建一个示例风格指南
- en: What is a programming style guide?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是编程风格指南？
- en: Coding styles are very personal, and every developer has their own preferred
    style. These styles can vary from language to language, from person to person,
    and over time. The personal nature of coding styles can make it difficult to have
    a consistent and readable code base when numerous individuals are contributing
    to the code.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 编程风格非常个人化，每个开发者都有自己的首选风格。这些风格可以从一种语言到另一种语言，从一个人到另一个人，随着时间的推移而变化。编程风格的个人性质可能会使得当众多个人共同贡献代码时，难以保持代码库的一致性和可读性。
- en: While most developers might have their own preferred styles, the recommended
    or preferred style between languages can vary. As an example, in C#, when we name
    a method or function, it is preferred that we use Pascal case, which is similar
    to camel case except the first letter is capitalized. In most other languages,
    such as C, Objective-C, and Java, it is also recommended that we use camel case,
    where the first letter is lowercase.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然大多数开发者可能都有自己的首选风格，但不同语言之间推荐或首选的风格可能不同。例如，在C#中，当我们命名一个方法或函数时，建议我们使用Pascal大小写，这与驼峰式大小写类似，只是首字母大写。在大多数其他语言中，如C、Objective-C和Java，也建议我们使用驼峰式大小写，首字母小写。
- en: The best applications are coded so they are easy to maintain and the code is
    easy to read. It is hard for large projects and companies with many developers
    to have code that is easy to maintain and read if every developer uses their own
    coding style. This is why companies and projects with multiple developers usually
    adopt programming style guidelines for each language that they use.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳的应用程序编写得易于维护，代码易于阅读。如果每个开发者都使用自己的编程风格，那么对于大型项目和拥有许多开发者的公司来说，要拥有易于维护和阅读的代码是很困难的。这就是为什么拥有多个开发者的公司和项目通常为每种使用的语言采用编程风格指南。
- en: A programming style guide defines a set of rules and guidelines that a developer
    should follow while writing applications with a specific language within a project
    or company. These style guides can differ greatly between companies or projects
    and reflect how a company or project expects code to be written. These guides
    can also change over time. It is important to follow these style guides to maintain
    a consistent code base.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 编程风格指南定义了一套规则和指南，开发者在编写项目或公司中特定语言的程序时应该遵循。这些风格指南在公司或项目之间可能差异很大，反映了公司或项目期望代码的编写方式。这些指南也可能随时间而变化。遵循这些风格指南以保持代码库的一致性是很重要的。
- en: A lot of developers do not like the idea of being told how they should write
    code, and claim that as long as their code functions correctly, it shouldn't matter
    how they format it. This type of philosophy doesn't work in a coding team for
    the same reason it doesn't work in a sports team. What do you think would happen
    if all the players on a basketball team believed that they could all play the
    way they wanted to play and the team was better when they did their own thing?
    That team would probably lose a lot of games. It is impossible for a basketball
    team (or any sports team, for that matter) to win consistently unless all team
    members are working together. It is up to the coach to make sure that everyone
    is working together and executing the same game plan, just as it is up to the
    team leader of a development project to make sure all the developers are writing
    code according to the adopted style guide.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发者不喜欢被告知他们应该如何编写代码的想法，并声称只要他们的代码能正确运行，他们的代码格式如何并不重要。这种哲学在编码团队中不起作用，原因和它在运动队中不起作用的原因相同。您认为如果一支篮球队的所有球员都认为他们可以按照自己的方式打球，并且当他们都按照自己的方式打球时球队会表现得更好，会发生什么？那支球队可能会输掉很多比赛。一支篮球队（或任何运动队）要想持续获胜，除非所有队员都一起合作。确保每个人都在一起合作并执行相同的比赛计划的责任在于教练，就像在开发项目的团队领导确保所有开发者都按照采用的风格指南编写代码一样。
- en: API Design Guide
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API设计指南
- en: 'Apple has released API Design Guidelines for Swift. This defines how APIs should
    be designed and is different from a language style guide. A language style guide
    defines how code should be written for a particular language; an API design guide
    defines how APIs should be designed. If you are creating an API that will be used
    by other Swift developers, you should become familiar with Apple''s API Design
    Guidelines, which can be found here: [https://swift.org/documentation/api-design-guidelines/](https://swift.org/documentation/api-design-guidelines/).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果已经发布了Swift的API设计指南。这定义了API应该如何设计，并且与语言风格指南不同。语言风格指南定义了特定语言的代码应该如何编写；API设计指南定义了API应该如何设计。如果您正在创建将被其他Swift开发者使用的API，您应该熟悉苹果的API设计指南，该指南可以在以下位置找到：[https://swift.org/documentation/api-design-guidelines/](https://swift.org/documentation/api-design-guidelines/)。
- en: Your style guide
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 您的风格指南
- en: The style guide that we define in this book is just a guide. It reflects the
    author's opinion on how Swift code should be written and is meant to be a good
    starting point for creating your own style guide. If you really like this guide
    and adopt it as it is, great. If there are parts that you do not agree with and
    you change them within your guide, that is great as well.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中定义的风格指南只是一个指南。它反映了作者对如何编写Swift代码的看法，并旨在成为创建您自己的风格指南的一个良好起点。如果您真的喜欢这个指南并直接采用它，那太好了。如果您对其中某些部分不同意，并在您的指南中进行了修改，那也很好。
- en: The appropriate style for you and your team is the one that you and your team
    feel comfortable with, and it may or may not be different from the guide in this
    book. Don't be afraid to adjust your style guide as needed. One thing that is
    noticeable in the style guide within this chapter, and most good style guides,
    is that there is very little explanation about why each item is preferred or not
    preferred. Style guides should give enough details so that the reader understands
    the preferred and non-preferred methods for each item but should also be small
    and compact to make them easy and quick to read. If a developer has questions
    about why a particular method is preferred, they should bring that concern up
    with the development group. With that in mind, let's get started with the guide.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对您和您的团队来说，合适的风格是您和您的团队感到舒适的风格，它可能和本书中的指南不同。不要害怕根据需要调整您的风格指南。在本章的风格指南中，以及在大多数优秀的风格指南中，一个明显的特点是关于为什么每个项目被推荐或不推荐的解释非常少。风格指南应该提供足够的细节，以便读者了解每个项目的推荐和非推荐方法，但同时也应该小巧紧凑，以便易于阅读和快速阅读。如果一个开发者对为什么某个特定方法被推荐有疑问，他们应该将这个疑问提出给开发团队。考虑到这一点，让我们开始指南的学习。
- en: Do not use semicolons at the end of statements
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不要在语句的末尾使用分号
- en: 'Unlike a lot of languages, Swift does not require semicolons at the end of
    statements. Therefore, we should not use them. Let''s look at the following code:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 与许多语言不同，Swift不需要在语句的末尾使用分号。因此，我们不应该使用它们。让我们看看以下代码：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Do not use parentheses for conditional statements
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不要在条件语句中使用括号
- en: 'Unlike a lot of languages, parentheses are not required around conditional
    statements; therefore, we should avoid using them unless they are needed for clarification.
    Let''s look at the following code:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 与许多语言不同，条件语句周围不需要括号；因此，除非需要澄清，否则我们应该避免使用它们。让我们看看以下代码：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Naming
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命名
- en: We should always use descriptive names with camel case for custom types, methods,
    variables, constants, and so on. Let's look at some general naming rules.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该始终使用描述性的驼峰命名法为自定义类型、方法、变量、常量等命名。让我们看看一些通用的命名规则。
- en: Custom types
  id: totrans-27
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 自定义类型
- en: 'Custom types should have a descriptive name that describes what the type is
    for. The name should be in Pascal case. Here are examples of proper names and
    non-proper names based on our style guide:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义类型应该有一个描述性的名称，描述该类型的作用。名称应使用帕斯卡大小写。以下是根据我们的风格指南的适当名称和非适当名称的示例：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Functions and methods
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 函数和方法
- en: 'Function names should be descriptive, describing the function or method. They
    should be in camel case. Here are some examples of proper and non-proper names:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 函数名应该是描述性的，描述函数或方法。它们应该使用驼峰命名法。以下是一些适当名称和非适当名称的示例：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Constants and variables
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 常量和变量
- en: Constants and variables should have a descriptive name. They should begin with
    a lowercase letter and be in camel case. The only exception is when the constant
    is global; in that case, the name of the constant should contain all uppercase
    characters with the words separated by underscores. I have seen numerous guides
    that frown upon having all-uppercase names, but I personally like them for constants
    in the global scope, because it stands out that they are globally, not locally,
    scoped.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 常量和变量应该有一个描述性的名称。它们应该以小写字母开头，并使用驼峰命名法。唯一的例外是当常量是全局的；在这种情况下，常量的名称应包含所有大写字母，单词之间用下划线分隔。我见过许多不赞成使用全大写名称的指南，但我就个人而言，我喜欢在全局作用域中的常量使用全大写名称，因为这样它们是全球作用域，而不是局部作用域。
- en: 'Here are some examples of proper and non-proper names:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些适当名称和非适当名称的示例：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Indenting
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缩进
- en: 'Indenting width in Xcode, by default, is defined as four spaces, and tab width
    is also defined as four spaces. We should leave this as the default. The following
    screenshot shows the indentation setting in Xcode:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在Xcode中，默认的缩进宽度定义为四个空格，制表符宽度也定义为四个空格。我们应该将其保留为默认设置。以下截图显示了Xcode中的缩进设置：
- en: '![A screenshot of a cell phone screen with text  Description automatically
    generated](img/B16683_19_01.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![带有文本的手机屏幕截图，自动生成描述](img/B16683_19_01.png)'
- en: 'Figure 19.1: Indentations'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.1：缩进
- en: We should add an extra blank line between functions/methods. We should also
    use a blank line to separate functionality within a function or method. That being
    said, using many blank lines within a function or method might indicate that we
    should break the function into multiple functions.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应在函数/方法之间添加额外的空白行。我们还应使用空白行来分隔函数或方法内的功能。也就是说，在函数或方法内使用过多的空白行可能表明我们应该将函数分解成多个函数。
- en: Comments
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释
- en: 'We should use comments as needed to explain how and why our code is written.
    We should use block comments before custom types and functions. We should use
    double slashes to comment our code in one line. Here is an example of how comments
    should be written:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该根据需要使用注释来解释我们的代码是如何和为什么被编写的。我们应在自定义类型和函数之前使用块注释。我们应使用双斜杠来注释单行代码。以下是如何编写注释的示例：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When we are commenting methods, we should also use documentation tags, which
    will generate documentation in Xcode, as shown in the preceding example. At a
    minimum, we should use the following tags if they apply to our method:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们注释方法时，我们还应该使用文档标签，这些标签将在Xcode中生成文档，如前例所示。至少，如果适用，我们应该使用以下标签：
- en: '**Parameter**: This is used for parameters'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**参数（Parameter）**: 这用于参数'
- en: '**Returns**: This is used for what is returned'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**返回（Returns）**: 这用于描述返回的内容'
- en: '**Throws**: This is used to document errors that may be thrown'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**抛出（Throws）**: 这用于记录可能抛出的错误'
- en: Using the self keyword
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`self`关键字
- en: 'Since Swift does not require us to use the `self` keyword when accessing properties
    or invoking methods of an object, we should avoid using it unless we need to distinguish
    between an instance property and local variables. Here is an example of when you
    should use the `self` keyword:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Swift在访问对象的属性或调用对象的方法时不需要我们使用`self`关键字，因此除非我们需要区分实例属性和局部变量，否则我们应该避免使用它。以下是一个你应该使用`self`关键字的示例：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here is an example of when not to use the `self` keyword:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个不使用`self`关键字示例：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Constants and variables
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 常量和变量
- en: The difference between constants and variables is that the value of a constant
    never changes, whereas the value of a variable may change. Wherever possible,
    we should define constants rather than variables.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 常量与变量的区别在于常量的值永远不会改变，而变量的值可能会改变。 wherever possible，我们应该定义常量而不是变量。
- en: One of the easiest ways of doing this is by defining everything as a constant
    by default, and then changing the definition to a variable only after you reach
    a point in your code that requires you to change it. In Swift, you will get a
    warning if you define a variable and then never change the value within your code.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 做这件事最简单的方法是将所有内容默认定义为常量，然后在代码中需要更改定义的地方将其更改为变量。在Swift中，如果你定义了一个变量但从未在代码中更改其值，你会收到一个警告。
- en: Optional types
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可选类型
- en: Only use optional types when absolutely necessary. If there is no absolute need
    for a nil value to be assigned to a variable, we should not define it as an optional.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在绝对必要时才使用可选类型。如果没有绝对必要将nil值分配给变量，我们就不应该将其定义为可选。
- en: Using optional binding
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用可选绑定
- en: We should avoid forced unwrapping of optionals, as there is rarely any need
    to do this. We should preferably use optional binding or optional chaining rather
    than forced unwrapping.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该避免强制解包可选，因为这很少是必要的。我们最好使用可选绑定或可选链而不是强制解包。
- en: 'The following examples show the preferred and non-preferred methods where the
    `myOptional` variable is defined as an optional:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了定义`myOptional`变量为可选时的首选和非首选方法：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If there are several optionals that we need to unwrap, we should include them
    in the same `if-let` or `guard` statement, rather than unwrapping them on separate
    lines. There are times, however, when our business logic may require us to handle
    nil values differently, and this may require us to unwrap the optionals on separate
    lines. The following examples show the preferred and non-preferred methods:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要解包多个可选，我们应该将它们包含在同一个`if-let`或`guard`语句中，而不是在单独的行上解包。然而，有时我们的业务逻辑可能需要我们以不同的方式处理nil值，这可能需要我们在单独的行上解包可选。
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Using optional chaining
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用可选链
- en: 'When we need to unwrap multiple layers, we should use optional chaining over
    multiple optional binding statements. The following example shows the preferred
    and non-preferred methods:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要解包多层时，我们应该使用可选链而不是多个可选绑定语句。以下示例展示了首选和非首选方法：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Using type inference
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用类型推断
- en: 'Rather than defining variable types, we should let Swift infer the type. The
    only time we should define the variable or constant type is when we are not giving
    it a value while defining it. Let''s look at the following code:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是定义变量类型，我们应该让Swift推断类型。我们定义变量或常量类型的唯一情况是我们没有在定义时给它赋值。让我们看看以下代码：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Using shorthand declarations for collections
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用集合的简写声明
- en: 'When declaring native Swift collection types, we should use the shorthand syntax,
    and, unless absolutely necessary, we should initialize the collection. The following
    example shows the preferred and non-preferred methods:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当声明原生Swift集合类型时，我们应该使用简写语法，并且除非绝对必要，否则我们应该初始化集合。以下示例展示了首选和非首选方法：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Using switch rather than multiple if statements
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用switch语句而不是多个if语句
- en: 'Wherever possible, we should prefer to use a single `switch` statement over
    multiple `if` statements. The following example shows the preferred and non-preferred
    methods:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: wherever possible，我们应该更倾向于使用单个`switch`语句而不是多个`if`语句。以下示例展示了首选和非首选方法：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Don't leave commented-out code in your application
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不要在应用程序中留下注释掉的代码
- en: If we comment out a block of code while we attempt to replace it, once we are
    comfortable with the changes we should remove the code that we commented out.
    Having large blocks of code commented out can make the code base look messy and
    make it harder to follow.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在尝试替换代码块时注释掉该代码块，一旦我们对更改感到满意，我们应该移除我们注释掉的代码。大量注释掉的代码块会使代码库看起来杂乱无章，并使其更难跟踪。
- en: Summary
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: When we are developing an application in a team environment, it is important
    to have a well-defined coding style that is adhered to by everyone on the team.
    This allows us to have a code base that is easy to read and maintain.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在团队环境中开发应用程序时，拥有一个由团队中每个人遵守的良好定义的编码风格非常重要。这使我们能够拥有一个易于阅读和维护的代码库。
- en: If a style guide remains static for too long, it means that it is probably not
    keeping up with the latest changes within the language. What is considered "too
    long" is different for each language. For example, with the C language, too long
    will be defined in years, since the language is very stable; however, with Swift,
    the language is relatively new, and changes come pretty often, so "too long" can
    probably be defined as a couple of months.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个风格指南长时间保持不变，这可能意味着它可能没有跟上语言中的最新变化。对于每种语言，“太长时间”的定义是不同的。例如，对于C语言，太长时间将以年为单位定义，因为该语言非常稳定；然而，对于Swift，该语言相对较新，变化发生得相对频繁，因此“太长时间”可能被定义为几个月。
- en: It is recommended that we keep our style guides in a version control system
    so that we can refer to older versions if need be. This allows us to pull older
    versions of the style guide and refer back to them when we are looking at older
    code.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 建议我们将风格指南保存在版本控制系统之中，这样在需要时我们可以参考旧版本。这使我们能够拉取风格指南的旧版本，并在查看旧代码时回溯参考。
- en: It is recommended, not only with Swift but other languages as well, that you
    use a lint tool to check and enforce good coding practices. For Swift, there is
    a great tool called SwiftLint ([https://github.com/realm/SwiftLint](https://github.com/realm/SwiftLint)),
    which has a command-line tool.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅在Swift中，在其他语言中也是如此，建议您使用代码检查工具来检查和强制执行良好的编码实践。对于Swift，有一个名为SwiftLint ([https://github.com/realm/SwiftLint](https://github.com/realm/SwiftLint))
    的优秀工具，它有一个命令行工具。
- en: As you work on a style guide for your organization, you may want to keep an
    eye on Swift Evolution Proposal SE-0250 ([https://github.com/apple/swift-evolution/blob/master/proposals/0250-swift-style-guide-and-formatter.md](https://github.com/apple/swift-evolution/blob/master/proposals/0250-swift-style-guide-and-formatter.md)).
    This proposal is to create an official Swift style guide and formatter. If this
    proposal is accepted and an official style guide is released, then you should
    adopt those guidelines.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在为您的组织编写风格指南时，您可能需要关注Swift进化提案SE-0250 ([https://github.com/apple/swift-evolution/blob/master/proposals/0250-swift-style-guide-and-formatter.md](https://github.com/apple/swift-evolution/blob/master/proposals/0250-swift-style-guide-and-formatter.md))。该提案旨在创建一个官方的Swift风格指南和格式化工具。如果这个提案被接受并且发布了官方的风格指南，那么您应该采用这些指南。
