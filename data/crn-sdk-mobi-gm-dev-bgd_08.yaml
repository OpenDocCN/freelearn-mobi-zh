- en: Chapter 8. Operation Storyboard
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章：操作Storyboard
- en: We've taken our game Egg Drop and explored ways to create game physics to react
    with collision detection and tracking other useful data such as lives and a points
    system. We also worked with customizing physical bodies and creating names for
    our display objects that apply to the game score count.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们已经将我们的游戏“鸡蛋掉落”进行了扩展，探索了创建游戏物理的方法，以便与碰撞检测反应，并跟踪其他有用的数据，如生命值和得分系统。我们还与自定义物理体合作，并为我们的显示对象创建名称，这些名称适用于游戏得分计数。
- en: Next, we'll be adding a menu system that incorporates an introduction to the
    game and also applying a pause menu during gameplay and saving high scores when
    the game is over.
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 接下来，我们将添加一个菜单系统，该系统包括对游戏的介绍，并在游戏过程中应用暂停菜单，以及在游戏结束后保存高分。
- en: We're on our way to completing an application that has the necessary elements
    that will be ready for the App Store or Google Play Store.
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们正在完成一个具有必要元素的应用程序，使其准备好发布到App Store或Google Play Store。
- en: 'In this chapter, we will learn the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下主题：
- en: Saving high scores
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存高分
- en: Adding a pause menu
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加暂停菜单
- en: Changing scenes with Storyboard API
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Storyboard API更改场景
- en: Adding a loading screen
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加加载屏幕
- en: Adding a main menu and options menu
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加主菜单和选项菜单
- en: So let's keep on going!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续前进！
- en: Continuation of Egg Drop
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: “鸡蛋掉落”的继续
- en: We have finished the main game portion of Egg Drop as the base of our application.
    Now it's time for us to include how to pause action mid-game and also how to save
    high scores. We're also going to add some new scenes that will help us introduce
    and transition to the game in an easy and quick fashion.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了“鸡蛋掉落”游戏的主游戏部分，作为我们应用程序的基础。现在是我们包括如何在游戏中途暂停动作以及如何保存高分的时候了。我们还将添加一些新的场景，这将帮助我们以简单快捷的方式介绍和过渡到游戏。
- en: In the Chapter 8 `Resources` folder, grab all the image and file assets inside
    and copy them to your current `Egg Drop` project folder. You can download the
    project files accompanying this book from the Packt website. We'll be using these
    files to add the final touches to our game.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在第8章的“资源”文件夹中，获取所有图像和文件资源，并将它们复制到您当前的“鸡蛋掉落”项目文件夹中。您可以从Packt网站下载与本书配套的项目文件。我们将使用这些文件为我们的游戏添加最后的修饰。
- en: Data saving
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据保存
- en: Saving file information is used in many aspects of game development. We use
    it to save high scores, game settings such as sound on/off, locking/unlocking
    levels, and so on. They're not necessary to have, but good to have if you'd like
    to have those features included in your applications.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件信息在游戏开发的许多方面都有应用。我们用它来保存高分、游戏设置，如声音开/关、锁定/解锁关卡等。它们不是必需的，但如果您想在应用程序中包含这些功能，那么它们是很好的。
- en: In Corona SDK, applications are sandboxed, meaning that your files (application
    images, data, and preferences) are stored in a location that no other application
    can access. Your files will reside in an app-specific directory for documents,
    resources, or temporary files. This restriction is related to the files on your
    device, not when you are coding on your Mac or PC.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在Corona SDK中，应用程序是沙盒化的，这意味着您的文件（应用程序图像、数据和首选项）存储在一个其他应用程序无法访问的位置。您的文件将驻留在特定于应用程序的目录中，用于文档、资源或临时文件。这种限制与您的设备上的文件有关，而与您在Mac或PC上编码无关。
- en: BeebeGames Class for saving and loading values
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BeebeGames类用于保存和加载数值
- en: 'We''ll be using BeebeGames Class, created by Jonathan Beebe. It provides many
    easy and useful functions to use for games. Some of the notable functions included
    incorporate a simple way of saving and loading data that we''ll be able add into
    our game. More information on BeebeGames Class can be found at: [http://developer.anscamobile.com/code/beebegames-class](http://developer.anscamobile.com/code/beebegames-class).
    You can download the file from the link and take a look at other methods relating
    to animation, transitions, timers, and so on, incase you would like to use them
    for future use. For now, we''ll be focusing on the methods for easy saving and
    loading values for our game.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用由乔纳森·比比（Jonathan Beebe）创建的BeebeGames类。它提供了许多简单且有用的功能，可用于游戏。其中一些值得注意的功能包括一种简单的保存和加载数据的方式，我们将将其添加到我们的游戏中。有关BeebeGames类的更多信息，请参阅：[http://developer.anscamobile.com/code/beebegames-class](http://developer.anscamobile.com/code/beebegames-class)。您可以从链接下载文件，并查看与动画、过渡、计时器等相关的方法，以防您将来需要使用它们。目前，我们将专注于为我们的游戏轻松保存和加载值的方法。
- en: 'Example of saving and loading values:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 保存和加载数值的示例：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Getting paths to files
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取文件路径
- en: The paths to these files are unique to your application. To create file paths,
    you use the `system.pathForFile` function. The following generates an absolute
    path to the icon file for your application using the application's resource directory
    as the base directory for `Icon.png:`
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件的路径对于你的应用程序是唯一的。要创建文件路径，你使用`system.pathForFile`函数。以下代码使用应用程序的资源目录作为`Icon.png`的基目录生成应用程序图标的绝对路径：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In general, your files must reside in one of three possible base directories:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你的文件必须位于以下三个可能的基目录之一：
- en: '`system.DocumentsDirectory` should be used for files that need to persist between
    application sessions.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该使用`system.DocumentsDirectory`来保存需要在应用程序会话之间持久化的文件。
- en: '`system.TemporaryDirectory` is a temporary directory. Files written to this
    directory are not guaranteed to exist in subsequent application sessions. They
    may or may not exist.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`system.TemporaryDirectory`是一个临时目录。写入此目录的文件在后续的应用程序会话中不一定存在。它们可能存在，也可能不存在。'
- en: '`system.ResourceDirectory` is the directory where all application assets exist.
    Note that you should never create, modify, or add files to this directory.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`system.ResourceDirectory`是所有应用程序资源存在的目录。请注意，你不应该在此目录中创建、修改或添加文件。'
- en: Note
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'More information on files can be found at: [http://developer.anscamobile.com/content/files](http://developer.anscamobile.com/content/files).'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多关于文件的信息可以在：[http://developer.anscamobile.com/content/files](http://developer.anscamobile.com/content/files)。
- en: Reading files
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 读取文件
- en: To read files, the `io` library is used. This library allows you to open files
    given an absolute path.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要读取文件，使用`io`库。这个库允许你根据绝对路径打开文件。
- en: Writing files
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 写入文件
- en: To write files, you follow many of the same steps as reading a file. Instead
    of using a read method, you write data (strings or numbers) to a file.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要写入文件，你遵循与读取文件相同的许多步骤。而不是使用读取方法，你将数据（字符串或数字）写入文件。
- en: Time for action—saving and loading the high score
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是时候行动了——保存和加载高分
- en: When the **Game Over** screen displays, we're going to save and load the values
    of our final score and highest score.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当**游戏结束**屏幕显示时，我们将保存和加载最终得分和最高分的值。
- en: Open up your `main.lua` file that we created for Egg Drop. We'll continue using
    the same file and add in more code with the new alterations to the game.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们为Egg Drop创建的`main.lua`文件。我们将继续使用相同的文件，并添加更多代码，以对游戏进行新的修改。
- en: Add in two new variables, `local highScoreText` and `local highScore` where
    all the other initialised variables are located near the top of the code.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在所有其他初始化变量附近的位置添加两个新变量，`local highScoreText`和`local highScore`。
- en: '[PRE2]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Introduce the `saveValue()` function after the pre-loaded sound files.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在预加载的声音文件之后介绍`saveValue()`函数。
- en: '[PRE3]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Add in the `loadValue()` function.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`loadValue()`函数。
- en: '[PRE4]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: At the end of the `callGameOver()` function, create an `if` statement to compare
    the `gameScore` and `highScore`. Save the highest score using the `saveValue()`
    function.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`callGameOver()`函数的末尾，创建一个`if`语句来比较`gameScore`和`highScore`。使用`saveValue()`函数保存最高分。
- en: '[PRE5]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Next, add in the `highScoreText` display text in the same `callGameOver()` function
    to show the high score at the end of the game.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在相同的`callGameOver()`函数中添加`highScoreText`显示文本，以在游戏结束时显示最高分。
- en: '[PRE6]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: At the end of the `gameStart()` function, have the high score loaded using the
    `loadValue()` function.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`gameStart()`函数的末尾，使用`loadValue()`函数加载高分。
- en: '[PRE7]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Time for action—saving and loading the high score](img/1888_08_01.jpg)'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![是时候行动了——保存和加载高分](img/1888_08_01.jpg)'
- en: What just happened?
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: After initializing the `saveValue()` and `loadValue()` functions in the game
    level, we created an `if` statement to compare the `gameScore`, which is the current
    score during gameplay and the `highScore`, which is the highest score accrued
    so far. When the outcome of `gameScore` is higher, then it replaces the `highScore`
    data saved.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏级别中初始化了`saveValue()`和`loadValue()`函数后，我们创建了一个`if`语句来比较`gameScore`，这是游戏过程中的当前分数，以及`highScore`，这是迄今为止获得的最高分。当`gameScore`的结果更高时，它将替换保存的`highScore`数据。
- en: In order to save the value, a data file needs to be created. We created a variable
    called `local highScoreFilename = "highscore.data"`. We called the `saveValue()`
    function using `highScoreFilename` as a parameter. `tostring(highScore)` will
    be converted to a string.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保存值，需要创建一个数据文件。我们创建了一个名为`local highScoreFilename = "highscore.data"`的变量。我们使用`highScoreFilename`作为参数调用`saveValue()`函数。`tostring(highScore)`将被转换为字符串。
- en: When the **Game Over** screen is visible, `highScoreText` displays the value
    saved from `highScore` above the `gameScore` that is achieved. Adding a high score
    gives the player an incentive to top the highest score and to add the replay value
    to the game.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当**游戏结束**屏幕可见时，`highScoreText`显示从`highScore`保存的值，位于获得的`gameScore`上方。添加高分可以给玩家一个挑战最高分的动力，并为游戏增加重玩价值。
- en: In the `gameStart()` function, it's important to have the value of `highScore.data`
    loaded at the start of gameplay. By using the same data file we created to save
    `highScore`, we can also use it to load the value throughout the game. To load
    the value, `local highScore` calls `loadValue(highScoreFileName)`. This takes
    the information from `highScore.data`. To obtain the value, `tonumber(loadedHighScore)`
    converts it to an integer from a string and can be used to display the value of
    `highScore`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在`gameStart()`函数中，在游戏开始时加载`highScore.data`中的值非常重要。通过使用我们创建的保存`highScore`的相同数据文件，我们也可以在整个游戏中使用它来加载值。要加载值，`local
    highScore`调用`loadValue(highScoreFileName)`。这将从`highScore.data`中获取信息。为了获取值，`tonumber(loadedHighScore)`将其从字符串转换为整数，并可以用来显示`highScore`的值。
- en: Pausing the game
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 暂停游戏
- en: Have you ever found yourself in the middle of playing a game and all of sudden
    you have to take a bathroom break or your hand cramps up? Obviously, any of those
    situations require you to avert your attention from your game progress and you
    need to stop the current action temporarily to attend to those needs. This is
    when a pause button comes in handy so you can stop the action in that moment in
    time and continue where you left off when you're ready to play again.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '你是否曾在玩游戏的过程中突然需要去洗手间或者手抽筋？显然，任何这些情况都需要你将注意力从游戏进度中移开，并且你需要暂时停止当前动作来满足这些需求。这时暂停按钮就派上用场了，你可以停止那一刻的动作，在你准备好再次玩游戏时继续。 '
- en: Time for action—pausing the game
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——暂停游戏
- en: It's more than just making a button, it's also pausing all the action onscreen,
    including physics and timers.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这不仅仅是创建一个按钮，还包括暂停屏幕上的所有动作，包括物理效果和计时器。
- en: Add in the variables `local pauseBtn` and `local pauseBG` where all the other
    variables are initialized near the beginning of the code. Preload the `btnSound`
    audio after `gameOverSound` near the top of the script.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码开始附近初始化所有其他变量的位置添加变量`local pauseBtn`和`local pauseBG`。在脚本顶部附近的`gameOverSound`之后预加载`btnSound`音频。
- en: '[PRE8]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Within the `hud()` function and after the `scoreText` chunk, create another
    function that will run the event for the pause button. Call the function `onPauseTouch(event)`.
    Pause the physics in the game by setting `gameIsActive` to `false` and have the
    pause elements appear on screen.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`hud()`函数和`scoreText`块之后创建另一个函数，该函数将运行暂停按钮的事件。将函数命名为`onPauseTouch(event)`。通过将`gameIsActive`设置为`false`暂停游戏中的物理效果，并让暂停元素出现在屏幕上。
- en: '[PRE9]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: When the game is unpaused, have the physics become active again and remove all
    pause display objects.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当游戏暂停后，让物理效果再次激活并移除所有暂停显示对象。
- en: '[PRE10]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Add the `pauseBtn` UI button and `pauseBG` display object after the `onPauseTouch()`
    function.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onPauseTouch()`函数之后添加`pauseBtn` UI按钮和`pauseBG`显示对象。
- en: '[PRE11]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In order for `pauseBtn` to display during gameplay, make it visible and active
    in the `gameActivate()` function.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了在游戏过程中显示`pauseBtn`，需要在`gameActivate()`函数中将其设置为可见和激活状态。
- en: '[PRE12]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: When the game is over, disable `pauseBtn` in the `callGameOver()` function.
    Place the code right after the `physics.pause()` line.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当游戏结束时，在`callGameOver()`函数中禁用`pauseBtn`。将代码放在`physics.pause()`行之后。
- en: '[PRE13]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![Time for action—pausing the game](img/1888_08_02.jpg)'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间——暂停游戏](img/1888_08_02.jpg)'
- en: What just happened?
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We created the `onPauseTouch(event)` function to control all pause events that
    occur within gameplay. To pause all the motion in game, we changed the boolean
    of `gameIsActive` to `false` and `physics.pause()` to stop all the eggs that are
    falling from moving. Next, the timer is paused for `startDrop` so any eggs falling
    from the sky won't accumulate over time as long as the pause function is still
    active.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了`onPauseTouch(event)`函数来控制游戏过程中发生的所有暂停事件。为了暂停游戏中的所有运动，我们将`gameIsActive`的布尔值更改为`false`，并将`physics.pause()`用于停止所有下落的鸡蛋。接下来，暂停`startDrop`计时器，这样只要暂停函数仍然有效，从天空下落的鸡蛋就不会随着时间的推移而积累。
- en: A slightly transparent overlay called `shade` is called to appear when the pause
    button is pressed. This will avert the attention of the user from the game scene
    and allow the user to differentiate when the gameplay is not active.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当按下暂停按钮时，会调用一个名为`shade`的略微透明的覆盖层出现。这将使用户的注意力从游戏场景中转移开，并允许用户在游戏活动不活跃时进行区分。
- en: The **Game Paused** banner also displays on top of the screen by making it visible
    and active. `pauseBG` is pushed ahead of the display hierarchy by `pauseBG:toFront()`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使它可见并激活，**游戏暂停**横幅也会显示在屏幕顶部。`pauseBG`通过`pauseBG:toFront()`被推到显示层次结构的前面。
- en: To unpause, we reversed the process of how the pause display items appear. When
    `pauseBtn` is pressed for the second time, `shade` is taken away by `display.remove(shade);
    shade = nil. pauseBG.isVisible` and `pauseBG.isActive` are both set to `false`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要取消暂停，我们需要逆转暂停显示项出现的流程。当`pauseBtn`第二次被按下时，通过`display.remove(shade); shade =
    nil. pauseBG.isVisible`和`pauseBG.isActive`都将设置为`false`。
- en: Remember when we set `gameIsActive` to `false?` Well, it's time to set it back
    to `true`. This also means resuming physics with `physics.start()`. The timer
    is resumed by local function `resumeGame()` and calls `timer.resume(startDrop)`
    within the function.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 记得我们设置`gameIsActive`为`false`的时候吗？嗯，现在是时候将其设置回`true`了。这也意味着通过`physics.start()`恢复物理。计时器通过局部函数`resumeGame()`恢复，并在函数内部调用`timer.resume(startDrop)`。
- en: The `pauseBtn` and `pauseBG` display objects are inserted at the end of the
    `if` statement block. `pauseBtn` is then shown as visible and active once the
    game is playable. It is invisible and inactive when the **Game Over** screen appears.
    This is because there are no other touch events that interfere when the game is
    over.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`pauseBtn`和`pauseBG`显示对象被插入到`if`语句块的末尾。一旦游戏可玩，`pauseBtn`就会显示为可见和激活。当**游戏结束**屏幕出现时，它是不可见和无效的。这是因为当游戏结束时没有其他触摸事件会干扰。'
- en: Storyboard API
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Storyboard API
- en: 'The Storyboard API provides an easy solution for developers to control scenes
    with or without transitions. This is a great scene-management library for displaying
    menu systems and even managing multiple levels in a game. Storyboard also comes
    with a variety of transition effects. A listing of them can be found on the `storyboard.gotoScene()`
    API reference page at: [http://developer.anscamobile.com/reference/index/storyboardgotoscene](http://developer.anscamobile.com/reference/index/storyboardgotoscene).'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Storyboard API 为开发者提供了一个简单的方法来控制带有或没有过渡的场景。这是一个用于显示菜单系统，甚至管理游戏中多个级别的优秀场景管理库。Storyboard
    还附带了一系列过渡效果。它们可以在` storyboard.gotoScene()` API 参考页面找到：[http://developer.anscamobile.com/reference/index/storyboardgotoscene](http://developer.anscamobile.com/reference/index/storyboardgotoscene)。
- en: 'More information on the Storyboard API can be found on the *Anscamobile* website
    at: [http://developer.anscamobile.com/content/storyboard](http://developer.anscamobile.com/content/storyboard).'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于 Storyboard API 的信息可以在 *Anscamobile* 网站上找到：[http://developer.anscamobile.com/content/storyboard](http://developer.anscamobile.com/content/storyboard)。
- en: 'Our scene management will look similar to the scene template displayed at:
    [http://developer.anscamobile.com/reference/index/scene-template](http://developer.anscamobile.com/reference/index/scene-template).'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的场景管理将类似于在[http://developer.anscamobile.com/reference/index/scene-template](http://developer.anscamobile.com/reference/index/scene-template)显示的场景模板。
- en: You can also download the *Storyboard Sample Code* from [https://github.com/ansca/Storyboard-Sample](http://https://github.com/ansca/Storyboard-Sample)
    and run the project file in the Corona simulator to get familiar with how it works.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以从[https://github.com/ansca/Storyboard-Sample](http://https://github.com/ansca/Storyboard-Sample)下载*Storyboard
    示例代码*，并在 Corona 模拟器中运行项目文件，以熟悉其工作方式。
- en: Game development with Storyboard API
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Storyboard API 进行游戏开发
- en: You may wonder how we're going to apply Storyboard with Egg Drop. It's really
    simple actually. We'll have to alter some lines in our game code to make it compatible
    with Storyboard and create some new scenes for the menu system that is applied
    before gameplay.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会想知道我们如何将 Storyboard 应用于 Egg Drop。实际上，这非常简单。我们需要修改一些游戏代码以使其与 Storyboard 兼容，并为在游戏开始前应用的菜单系统创建一些新场景。
- en: Time for action—altering the game file
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——修改游戏文件
- en: We're going to rename our current `main.lua` file to `maingame.lua` and put
    some additional lines into our game code.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把当前的`main.lua`文件重命名为`maingame.lua`，并将一些额外的行添加到我们的游戏代码中。
- en: Tip
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Be sure to change the filename within your Egg Drop project folder.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保更改 Egg Drop 项目文件夹内的文件名。
- en: Remove the following lines near the top of the code. We'll hide the status bar
    in another scene that we'll create later on in this chapter. The `gameGroup` display
    group will be altered to fit within the Storyboard parameters.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码顶部附近删除以下行。我们将在本章后面创建的另一个场景中隐藏状态栏。`gameGroup` 显示组将被调整以适应 Storyboard 参数。
- en: '[PRE14]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: At the very top of the code, implement Storyboard by adding `local storyboard
    = require( "storyboard" )` and `local scene = storyboard.newScene()` so we can
    call scene events.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码的最顶部，通过添加 `local storyboard = require( "storyboard" )` 和 `local scene = storyboard.newScene()`
    来实现 Storyboard，这样我们就可以调用场景事件。
- en: '[PRE15]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: After `local loadValue = function( strFilename )`, add in the `createScene()`
    event. We will also add back in our `gameGroup` display group, but under the scene's
    view property. Also, add `in storyboard.removeScene( "loadgame" )`. The`"loadgame"`
    scene will be introduced later on in this chapter.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `local loadValue = function( strFilename )` 之后，添加 `createScene()` 事件。我们还将把我们的
    `gameGroup` 显示组添加回来，但放在场景的视图属性下。同时，添加 `in storyboard.removeScene( "loadgame" )`。`"loadgame"`
    场景将在本章后面介绍。
- en: '[PRE16]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: After the `createScene()` event, create the `enterScene()` event and add it
    before the `gameActivate()` function. `enterScene()` will transition all our gameplay
    functions onscreen. Include `gameGroup` in the scene's view property as well.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `createScene()` 事件之后，创建 `enterScene()` 事件，并在 `gameActivate()` 函数之前添加它。`enterScene()`
    将过渡所有屏幕上的游戏功能。同时，在场景的视图属性中包含 `gameGroup`。
- en: '[PRE17]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: After the `gameStart()` function, remove the `return gameGroup` line.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `gameStart()` 函数之后，删除 `return gameGroup` 行。
- en: '[PRE18]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, close `function scene: enterScene( event )` with `end`.'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '接下来，使用 `end` 关闭 `function scene: enterScene( event )`。'
- en: '[PRE19]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Create the `exitScene()` and `destroyScene()` events.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `exitScene()` 和 `destroyScene()` 事件。
- en: '[PRE20]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Lastly, create event listeners for all the scene events and add `return scene`
    at the end of the code.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，为所有场景事件创建事件监听器，并在代码末尾添加 `return scene`。
- en: '[PRE21]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: What just happened?
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: 'Using Storyboard API will help us transition scenes a lot easily and quickly.
    Every time you want to load a new scene into view, `require("storyboard")` needs
    to be added. `local scene = storyboard.newScene()` will allow us to call the scene
    events: `createScene(), enterScene(), exitScene()`, and `destroyScene()`.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Storyboard API 将帮助我们更容易、更快地切换场景。每次你想将新场景加载到视图中时，都需要添加 `require("storyboard")`。`local
    scene = storyboard.newScene()` 将允许我们调用场景事件：`createScene()`、`enterScene()`、`exitScene()`
    和 `destroyScene()`。
- en: At the very end of the game code, we added event listeners to all the scene
    events and `return scene`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏代码的末尾，我们添加了所有场景事件的事件监听器，并添加了 `return scene`。
- en: The format for how each scene is managed with Storyboard will look similar to
    the preceding code. Most of the game code will be dispatched during a scene is
    displayed by the `createScene()` and `enterScene()` events. When you want to clean
    or unload listeners, audio, assets, and so on, the `exitScene()` and `destroyScene()`
    events are used.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Storyboard 管理每个场景的格式将类似于前面的代码。大部分游戏代码将在 `createScene()` 和 `enterScene()`
    事件触发场景显示时被分发。当你想要清理或卸载监听器、音频、资源等时，将使用 `exitScene()` 和 `destroyScene()` 事件。
- en: Organizing the game
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织游戏
- en: We've been used to having the `main.lua` as our main source file to show every
    detail of our game code. It's time to organize it efficiently with the help of
    Storyboard API.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经习惯了将 `main.lua` 作为我们的主要源文件来展示游戏代码的每一个细节。现在是时候借助 Storyboard API 高效地组织它了。
- en: Time for action—adding the new main.lua file
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是时候添加新的 main.lua 文件了
- en: While using Storyboard, our `main.lua` file is still vital since it is the first
    thing that Corona SDK looks at to launch an application in the simulator. We're
    going add some lines of code that will change scenes for our game.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Storyboard 的同时，我们的 `main.lua` 文件仍然至关重要，因为它是 Corona SDK 在模拟器中启动应用程序时首先查看的文件。我们将添加一些代码来更改游戏中的场景。
- en: Create a brand new file called `main.lua` and let's add back in our status bar.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个全新的文件名为 `main.lua`，并让我们把状态栏添加回来。
- en: '[PRE22]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Import Storyboard and load the first scene called `loadmainmenu`. We will create
    this scene in the next couple of sections.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 Storyboard 并加载名为 `loadmainmenu` 的第一个场景。我们将在接下来的几节中创建这个场景。
- en: '[PRE23]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: What just happened?
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: In order to incorporate Storyboard throughout the application, we called the
    `local storyboard = require ( "storyboard" )` module. The scene will be changed
    with `storyboard.gotoScene( "loadmainmenu" )`, which is a loading screen directing
    the user to the main menu screen.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在整个应用程序中整合 Storyboard，我们调用了 `local storyboard = require ( "storyboard" )`
    模块。场景将通过 `storyboard.gotoScene( "loadmainmenu" )` 进行更改，这是一个引导用户到主菜单屏幕的加载屏幕。
- en: New game transitions
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新的游戏过渡
- en: Now that we have introduced Storyboard API, we can apply some long-awaited transitions
    that will be helpful to our game. One way to approach this is by transitioning
    out of the game once it is over.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了Storyboard API，我们可以应用一些期待已久的过渡效果，这将有助于我们的游戏。一种方法是在游戏结束后过渡出游戏。
- en: Time for action—changing screens after the game is over
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作时间——游戏结束后切换屏幕
- en: Now that we have renamed our game file, let's add in a scene transition so that
    our game is not stuck on the **Game Over** screen once gameplay is over.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经重命名了我们的游戏文件，让我们添加一个场景过渡，这样我们的游戏在游戏结束后就不会卡在 **Game Over** 屏幕上了。
- en: 'In our `maingame.lua` file, add in a new variable called `local menuBtn` where
    all the other variables are initialized in the beginning of the code. Inside the
    `callGameOver()` function, add the following lines after the `highScoreText` code:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 `maingame.lua` 文件中，添加一个名为 `local menuBtn` 的新变量，其中所有其他变量都在代码的开始部分初始化。在 `callGameOver()`
    函数内部，在 `highScoreText` 代码之后添加以下行：
- en: '[PRE24]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '![Time for action—changing screens after the game is over](img/1888_08_03.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![操作时间——游戏结束后切换屏幕](img/1888_08_03.jpg)'
- en: What just happened?
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: In order to transition out of the **Game Over** screen, a menu button was created
    to change scenes. Inside the `onMenuTouch()` function, upon`"release"` of the
    button, we called `storyboard.gotoScene( "mainmenu", "fade", 500 )`. This will
    allow the application to transition to the main menu, which we will create later
    on in this chapter.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从 **Game Over** 屏幕过渡出来，创建了一个菜单按钮来改变场景。在 `onMenuTouch()` 函数中，当按钮 `release`
    时，我们调用了 `storyboard.gotoScene( "mainmenu", "fade", 500 )`。这将允许应用程序过渡到主菜单，我们将在本章后面创建它。
- en: Have a go hero—restarting the game
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 英雄试炼——重新开始游戏
- en: Now that you're well aware of how Storyboard API works with changing scenes
    and using UI buttons to transition between them, how about creating a button that
    restarts the game after the **Game Over** screen appears. So far, the application
    allows the user to go back to the menu screen once the game has reached an end.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了Storyboard API如何与场景切换以及使用UI按钮在它们之间进行过渡，那么在 **Game Over** 屏幕出现后创建一个重新开始游戏的按钮如何？到目前为止，应用程序允许用户在游戏结束时返回到菜单屏幕。
- en: 'Within the `callGameOver()` function, a new local function needs to be created
    that will run an event using the UI button system to change scenes with Storyboard.
    Hint: You can''t call the same scene over if you''re currently in it.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `callGameOver()` 函数内，需要创建一个新的本地函数，该函数将使用UI按钮系统运行一个事件来使用Storyboard改变场景。提示：如果你当前正在该场景中，你不能调用相同的场景。
- en: Creating a loading screen
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建加载界面
- en: Loading screens provide feedback that the program is in the process of loading.
    This is helpful by informing the user that the next screen is underway so they
    don't assume the application crashed, especially if the next screen is loading
    a large amount of data.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 加载界面提供了程序正在加载的反馈。这通过通知用户下一个屏幕正在加载，因此他们不会假设应用程序崩溃，特别是如果下一个屏幕正在加载大量数据。
- en: Time for action—adding the loading screen
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作时间——添加加载界面
- en: We'll be placing loading screens when the application launches and before the
    game level starts. This tells the user that more content or information is on
    its way.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序启动以及游戏关卡开始之前，我们将放置加载界面。这告诉用户还有更多内容或信息正在到来。
- en: Create a new file called `loadmainmenu.lua` in your project folder.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的项目文件夹中创建一个名为 `loadmainmenu.lua` 的新文件。
- en: Import Storyboard and add in the `storyboard.newScene()` function.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 Storyboard 并添加 `storyboard.newScene()` 函数。
- en: '[PRE25]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Create two local variables called `myTimer` and `loadingImage`. Add in the `createScene()`
    event and a `screenGroup` display group.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建两个名为 `myTimer` 和 `loadingImage` 的本地变量。在 `createScene()` 事件和 `screenGroup`
    显示组中添加。
- en: '[PRE26]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Create the `enterScene()` event and add in a `screenGroup` display group.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `enterScene()` 事件并添加 `screenGroup` 显示组。
- en: '[PRE27]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Introduce the `loadingImage` display object.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 介绍 `loadingImage` 显示对象。
- en: '[PRE28]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Create another local function called `goToMenu()` and call `storyboard.gotoScene(
    "mainmenu", "zoomOutInFadeRotate", 500 )` to change the scene to`"mainmenu"`.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为 `goToMenu()` 的本地函数，并调用 `storyboard.gotoScene( "mainmenu", "zoomOutInFadeRotate",
    500 )` 来将场景更改为 `"mainmenu"`。
- en: '[PRE29]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Use the timer function and have it call `goToMenu()` in 1000 milliseconds once.
    Define it with the timerID, `myTimer`. Close the `enterScene()` event with `end.`
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用计时器函数，并在 1000 毫秒后调用 `goToMenu()` 一次。使用计时器ID `myTimer` 定义它。使用 `end` 关闭 `enterScene()`
    事件。
- en: '[PRE30]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Call the `exitScene()` and the `destroyScene()` events. In the `exitScene()`
    event, cancel `myTimer`.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用 `exitScene()` 和 `destroyScene()` 事件。在 `exitScene()` 事件中，取消 `myTimer`。
- en: '[PRE31]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Add event listeners for all the scene events and `return scene`. Save and close
    the file.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为所有场景事件添加事件监听器并`return scene`。保存并关闭文件。
- en: '[PRE32]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Create a new file called `loadgame.lua` in your project folder. We'll be making
    another loading screen that occurs right before the game scene, `maingame.lua`.
    Use `storyboard.gotoScene( "maingame", "flipFadeOutIn", 500 )` to transition scenes.
    Save and close your file.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的项目文件夹中创建一个名为`loadgame.lua`的新文件。我们将创建另一个加载屏幕，该屏幕出现在游戏场景`maingame.lua`之前。使用`storyboard.gotoScene(
    "maingame", "flipFadeOutIn", 500 )`来切换场景。保存并关闭文件。
- en: '[PRE33]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '![Time for action—adding the loading screen](img/1888_08_04.jpg)'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![操作时间——添加加载屏幕](img/1888_08_04.jpg)'
- en: What just happened?
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: In the `loadmainmenu.lua` file, once `loadingImage` is added to the screen,
    we created the `goToMenu()` function to change scenes to`"mainmenu"` and use the
    transition`" zoomOutInFadeRotate"` that zooms out and rotates the loading screen
    image as it fades to the background. `myTimer = timer.performWithDelay( 1000,
    goToMenu, 1 )` performs the function in 1000 milliseconds (one second) and runs
    it once. This is long enough to view the image and have it fade out.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在`loadmainmenu.lua`文件中，一旦`loadingImage`被添加到屏幕上，我们创建了`goToMenu()`函数来将场景切换到`"mainmenu"`，并使用过渡`"
    zoomOutInFadeRotate"`，该过渡在淡入背景时放大并旋转加载屏幕图像。`myTimer = timer.performWithDelay(
    1000, goToMenu, 1 )`在1000毫秒（一秒）后执行函数，并只运行一次。这足以查看图像并使其淡出。
- en: All display objects enter the scene by `function scene:enterScene( event ).
    loadingImage` is placed in `screenGroup`. To make sure we have no timers running
    after the scene change, `myTimer` stops running with the use of `timer.cancel(myTimer)`
    under `function scene:exitScene()`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 所有显示对象都通过`function scene:enterScene( event ). loadingImage`进入场景。为了确保场景变化后没有定时器在运行，`myTimer`通过使用`timer.cancel(myTimer)`在`function
    scene:exitScene()`中停止运行。
- en: The code for `loadgame.lua` is similar to `loadmainmenu.lua`. For this file,
    Storyboard transitions scenes to `maingame.lua`, the gameplay file.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`loadgame.lua`的代码与`loadmainmenu.lua`类似。对于此文件，Storyboard将场景过渡到`maingame.lua`，即游戏文件。'
- en: Creating a main menu
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建主菜单
- en: A main menu or title screen is one of the first impressions a player sees before
    playing the game. It usually shows small snippets of images or scenery that correlate
    with the actual game and also displays the title of the application.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 主菜单或标题屏幕是玩家在玩游戏之前看到的第一个印象之一。它通常会显示与实际游戏相关的小图像或风景片段，并显示应用程序的标题。
- en: There are buttons such as **Start** or **Play** that urge the player to go into
    the game if they choose to and some secondary buttons such as **Options** to view
    settings and other information that may be included in relation to the app.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 有如**Start**或**Play**之类的按钮，鼓励玩家在愿意的情况下进入游戏，以及一些次要按钮如**Options**，用于查看设置和其他相关信息，这些信息可能与应用程序相关。
- en: Time for action—adding a main menu
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作时间——添加主菜单
- en: We're going to create the frontend of our game by introducing the game title,
    **Play** button, and **Options** button that will transition throughout different
    scenes in the application with ease.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过引入游戏标题、**Play**按钮和**Options**按钮来创建游戏的前端，这些按钮可以轻松地在应用程序的不同场景之间切换。
- en: Create a new file called `mainmenu.lua` and import Storyboard and UI modules,
    the `storyboard.newScene()` function, and the variables for timer and audio.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`mainmenu.lua`的新文件，并导入Storyboard和UI模块，`storyboard.newScene()`函数以及计时器和音频的变量。
- en: '[PRE34]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Create the `createScene()` event. Add in the line, `storyboard.removeScene(
    "maingame" )` and `storyboard.removeScene( "options" )`, which will remove the`"maingame"
    and "options"` scene. Removing`"maingame"` will occur after the player has transitioned
    from the main game screen and is sent to the main menu screen. Removing`"options"`
    will occur after the player has transitioned from the options screen and is sent
    to the main menu screen.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`createScene()`事件。添加以下行，`storyboard.removeScene( "maingame" )`和`storyboard.removeScene(
    "options" )`，这将移除`"maingame"`和`"options"`场景。移除`"maingame"`将在玩家从主游戏屏幕过渡到主菜单屏幕后发生。移除`"options"`将在玩家从设置屏幕过渡到主菜单屏幕后发生。
- en: '[PRE35]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Add in the `enterScene()` event and the `backgroundImage` display object.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`enterScene()`事件和`backgroundImage`显示对象。
- en: '[PRE36]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Introduce the `playBtn` display object and create a function called `onPlayTouch(event)`
    that uses `storyboard.gotoScene()` to change the scene to`"loadgame"`. Use the`"fade"`
    effect to change scenes.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 引入`playBtn`显示对象，并创建一个名为`onPlayTouch(event)`的函数，该函数使用`storyboard.gotoScene()`将场景切换到`"loadgame"`。使用`"fade"`效果来切换场景。
- en: '[PRE37]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Transition the `playBtn` display object to `y = 260` in 500 milliseconds using
    the `easing.inOutExpo` transition. Have it initialized through `btnAnim`.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `easing.inOutExpo` 过渡，将 `playBtn` 显示对象在 500 毫秒内过渡到 `y = 260`。通过 `btnAnim`
    初始化。
- en: '[PRE38]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Introduce the `optBtn` display object and create a function called `onOptionsTouch(event)`.
    Use `storyboard.gotoScene()` to transition the scene to`"options"` using the`"crossFade"`
    effect.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 介绍 `optBtn` 显示对象并创建一个名为 `onOptionsTouch(event)` 的函数。使用 `storybook.gotoScene()`
    通过 `"crossFade"` 效果将场景过渡到 `"options"`。
- en: '[PRE39]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Transition the `optBtn` display object to `y = 280` in 500 milliseconds using
    the `easing.inOutExpo` transition. Have it initialized through `btnAnim`. Close
    the `scene:enterScene( event )` function with `end`.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `easing.inOutExpo` 过渡，将 `optBtn` 显示对象在 500 毫秒内过渡到 `y = 280`。通过 `btnAnim`
    初始化。使用 `end` 关闭 `scene:enterScene( event )` 函数。
- en: '[PRE40]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Create the `exitScene()` event and cancel the `btnAnim` transition. Also, create
    the `destroyScene()` event.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `exitScene()` 事件并取消 `btnAnim` 过渡。同时，创建 `destroyScene()` 事件。
- en: '[PRE41]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Add the event listeners for all the scene events and `return scene`. Save and
    close your file.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为所有场景事件添加事件监听器，并使用 `return scene` 保存并关闭文件。
- en: '[PRE42]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '![Time for action—adding a main menu](img/1888_08_05.jpg)'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![是时候添加主菜单了](img/1888_08_05.jpg)'
- en: What just happened?
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: On the main menu screen, we added an image that displays the game title, a **Play**
    button, and an **Options** button. The **Options** button is still not functional
    at this time. The `onPlayTouch()` function transitions the scene to`"loadgame"`.
    This will change scenes to `loadgame.lua`. The **Play** button is placed at x
    = 240; y = 440, (middle and offscreen). When the scene loads, `playBtn` transitions
    to y = 260 so it pops up from the bottom of the screen in 500 milliseconds.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在主菜单屏幕上，我们添加了一个显示游戏标题、**Play** 按钮和**选项**按钮的图像。**选项**按钮目前尚未启用。`onPlayTouch()`
    函数将场景过渡到 `"loadgame"`。这将场景更改为 `loadgame.lua`。**Play** 按钮放置在 x = 240; y = 440（中间和屏幕外）。当场景加载时，`playBtn`
    过渡到 y = 260，使其从屏幕底部弹出，耗时 500 毫秒。
- en: The **Options** button does a similar thing. `optBtn` is placed towards the
    right side of the stage and pops up at y = 280 in 500 milliseconds.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**选项**按钮做类似的事情。`optBtn` 放置在舞台的右侧，并在 500 毫秒内弹出至 y = 280。'
- en: The `btnAnim` transition is cancelled by `transition.cancel( btnAnim )` through
    the `scene:exitScene()` function. Cleaning timers, transitions, and event listeners
    is important to do every time you change scenes so potential memory leaks do not
    occur while in the application.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `scene:exitScene()` 函数，使用 `transition.cancel( btnAnim )` 取消 `btnAnim` 过渡。清理计时器、过渡和事件监听器在每次更改场景时都很重要，以防止在应用程序中发生潜在的内存泄漏。
- en: Creating an options menu
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个选项菜单
- en: An options menu allows users to change various settings in the game or include
    other information that can't be displayed in the main menu. Games can vary from
    having many options to only having a few. Sometimes an options menu can be called
    a settings menu, which offers the same type of customization to the player's experience.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 选项菜单允许用户更改游戏中的各种设置或包含无法在主菜单中显示的其他信息。游戏可以有多个选项，也可以只有一个。有时选项菜单也可以称为设置菜单，它为玩家提供相同类型的定制体验。
- en: Time for action—adding an options menu
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是时候添加选项菜单了
- en: We'll be adding an options menu that can be accessed through the main menu.
    We're going to add a new UI button called **Credits**, which will direct the user
    to the credits screen once it is pressed.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加一个可以通过主菜单访问的选项菜单。我们将添加一个名为 **Credits** 的新 UI 按钮，当按下时，将用户引导到信用屏幕。
- en: Create a new file called `options.lua` and import Storyboard and UI modules,
    the `storyboard.newScene()` function, and the variables for timer and audio.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `options.lua` 的新文件，并导入 Storyboard 和 UI 模块、`storybook.newScene()` 函数以及计时器和音频变量。
- en: '[PRE43]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Create the `createScene()` event. Add in, `storyboard.removeScene ( "mainmenu"
    )`, which will remove the`"mainmenu"` scene. This will occur after the player
    has transitioned from the main menu screen and is sent to the options screen.
    Next, add in `storyboard.removeScene( "creditsScreen" )`. This will remove the`"creditsScreen"`
    after the player has transitioned from the credits screen back to the options
    screen.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `createScene()` 事件。添加 `storyboard.removeScene ( "mainmenu" )`，这将移除 `"mainmenu"`
    场景。这将在玩家从主菜单屏幕过渡到选项屏幕后发生。接下来，添加 `storyboard.removeScene( "creditsScreen" )`。这将在玩家从信用屏幕过渡回选项屏幕后移除
    `"creditsScreen"`。
- en: '[PRE44]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Add in the `enterScene()` event and the `backgroundImage` display object.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `enterScene()` 事件和 `backgroundImage` 显示对象。
- en: '[PRE45]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Create a button for the credits screen. Transition the `creditsBtn` display
    object to y = 260 in 500 milliseconds using the `easing.inOutExpo` transition.
    Have it initialized through `btnAnim`.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为致谢屏幕创建一个按钮。使用 `easing.inOutExpo` 过渡将 `creditsBtn` 显示对象过渡到 y = 260，持续 500 毫秒。通过
    `btnAnim` 初始化它。
- en: '[PRE46]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Create the **Close** button that loads the main menu. Close the `scene:enterScene
    ( event )` with `end`.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个加载主菜单的**关闭**按钮。使用 `end` 关闭 `scene:enterScene ( event )`。
- en: '[PRE47]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Create the `exitScene()` event and cancel the `btnAnim` transition. Also, create
    the `destroyScene()` event. Add the event listeners to all the scene events and
    `return scene`. Save and close your file.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `exitScene()` 事件并取消 `btnAnim` 过渡。同时，创建 `destroyScene()` 事件。将事件监听器添加到所有场景事件和
    `return scene`。保存并关闭你的文件。
- en: '[PRE48]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '![Time for action—adding an options menu](img/1888_08_06.jpg)'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![是时候添加一个选项菜单了](img/1888_08_06.jpg)'
- en: What just happened?
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: In this scene, `creditsBtn` will operate in a similar fashion like how our main
    menu was created. The **Credits** button is still not functional at this time.
    In the `onCreditsTouch()` function, the scene is transitioned to`"creditsScreen"`
    and uses`"crossFade"` as the effect. From the offscreen position, `creditsBtn`
    transitions to y=260 in 500 milliseconds when the scene is loaded.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个场景中，`creditsBtn` 将以类似于创建主菜单的方式操作。**致谢**按钮目前仍然不可用。在 `onCreditsTouch()` 函数中，场景过渡到
    `"creditsScreen"`，并使用 `"crossFade"` 作为效果。当场景加载时，从屏幕外位置，`creditsBtn` 在 500 毫秒内过渡到
    y=260。
- en: A **Close** button is created for this scene so the user will have a way to
    go back to the previous screen. With the `onCloseTouch()` function, Storyboard
    changes the scene to`"mainmenu"` upon`"release"` of `closeBtn`. The main menu
    screen will display upon pressing the **Close** button. The `btnAnim` transition
    is cancelled through the `scene:exitScene()` function.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 为此场景创建了一个**关闭**按钮，以便用户有返回上一个屏幕的方法。使用 `onCloseTouch()` 函数，当 `closeBtn` 被释放时，Storyboard
    将场景切换到 `"mainmenu"`。按下**关闭**按钮时将显示主菜单屏幕。通过 `scene:exitScene()` 函数取消 `btnAnim`
    过渡。
- en: Creating a credits screen
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个致谢屏幕
- en: A credits screen usually shows and lists all the people involved in the production
    of the game. It can include other information in the form of thanking certain
    individuals and programs used to create the final project.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 致谢屏幕通常会显示并列出参与游戏制作的所有人。它还可以以感谢某些个人和用于创建最终项目的程序的形式包含其他信息。
- en: Time for action—adding a credits screen
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是时候添加一个致谢屏幕了
- en: The credits screen we'll be creating will be based on a touch event that transitions
    to the previous screen from which it was introduced.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要创建的致谢屏幕将基于一个从引入它的上一个屏幕过渡到该屏幕的触摸事件。
- en: Create a new file call `creditsScreen.lua` and import Storyboard, the `storyboard.newScene()`
    function, and the `backgroundImage` variable.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `creditsScreen.lua` 的新文件，并导入 Storyboard、`storyboard.newScene()` 函数和 `backgroundImage`
    变量。
- en: '[PRE49]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Create the `createScene()` event. Add in the line, `storyboard.removeScene (
    "options" )`, which will remove the`"options"` scene. This will occur after the
    player has transitioned from the options screen and is sent to the credits screen.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `createScene()` 事件。添加 `storyboard.removeScene ( "options" )` 行，这将删除 `"options"`
    场景。这将在玩家从选项屏幕过渡到致谢屏幕后发生。
- en: '[PRE50]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Add in the `enterScene()` event and `backgroundImage` display object.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `enterScene()` 事件和 `backgroundImage` 显示对象。
- en: '[PRE51]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Create a local function called `changeToOptions()` with an event parameter.
    Have the function change the scene with Storyboard back to the options screen
    using a touch event on `backgroundImage`. Close the `scene:enterScene( event )`
    function with `end`.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `changeToOptions()` 的局部函数，带有事件参数。让该函数通过在 `backgroundImage` 上的触摸事件使用 Storyboard
    将场景切换回选项屏幕。使用 `end` 关闭 `scene:enterScene( event )` 函数。
- en: '[PRE52]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Create the `exitScene()` and `destroyScene()` events. Add the event listeners
    to all the scene events and `return scene`. Save and close your file.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `exitScene()` 和 `destroyScene()` 事件。将事件监听器添加到所有场景事件和 `return scene`。保存并关闭你的文件。
- en: '[PRE53]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '![Time for action—adding a credits screen](img/1888_08_07.jpg)'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![是时候添加一个致谢屏幕了](img/1888_08_07.jpg)'
- en: What just happened?
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: The credits screen works with an event listener. The `changeToOptions(event)`
    function will tell Storyboard to change the scene to`"options"` using `storyboard.gotoScene
    ( "options", "crossFade", 500 )`. At the end of the function, `backgroundImage`
    will activate the event listener when the screen is touched. `backgroundImage`
    is inserted into the `screenGroup` under the `scene:enterScene( event )` function.
    Egg Drop is now fully operable using Storyboard. Run the game in the simulator.
    You'll be able to transition to all the scenes we have created in this chapter
    as well as play the game.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 信用屏幕使用事件监听器。`changeToOptions(event)` 函数将告诉Storyboard将场景更改为 `"options"`，使用 `storyboard.gotoScene
    ( "options", "crossFade", 500 )`。在函数的末尾，`backgroundImage` 将在屏幕被触摸时激活事件监听器。`backgroundImage`
    被插入到 `screenGroup` 中，在 `scene:enterScene( event )` 函数之下。现在鸡蛋掉落游戏已经完全可以使用Storyboard操作。在模拟器中运行游戏。你将能够过渡到本章中创建的所有场景，并玩这个游戏。
- en: Have a go hero—adding more levels
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试英雄——添加更多关卡
- en: Now that Egg Drop is completed and has a working menu system, challenge yourself
    by creating more levels. Minor alterations will have to be added to incorporate
    some placement for additional levels. Remember to apply Storyboard when changing
    scenes.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 现在鸡蛋掉落游戏已经完成，并且拥有一个工作的菜单系统，通过创建更多关卡来挑战自己。为了加入额外的关卡，需要添加一些位置上的小改动。记得在改变场景时应用Storyboard。
- en: 'Try creating the following:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试创建以下内容：
- en: Level select screen
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 级别选择屏幕
- en: Level number buttons to add additional levels
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加额外关卡的关卡编号按钮
- en: When creating new levels, refer to the format as shown in `maingame.lua`. New
    levels can be altered by changing the interval of how fast the egg falls from
    the sky or maybe adding other game assets that fall but have to be avoided so
    there is no penalty during gameplay. There are so many possibilities on adding
    your own spin with this game framework. Give it a try!
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建新关卡时，参考 `maingame.lua` 中的格式。可以通过改变鸡蛋从天空掉落的速度间隔或添加其他需要避免的游戏资源来改变新关卡。在这个游戏框架中，有如此多的可能性来添加自己的特色。试试看吧！
- en: Pop quiz—game transitions and scenes
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 突击测验——游戏过渡和场景
- en: Which function do you call to change scenes with Storyboard?
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你调用哪个函数来使用Storyboard改变场景？
- en: a. `storyboard()`
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: a. `storybook()`
- en: b. `storyboard.gotoScene()`
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: b. `storybook.gotoScene()`
- en: c. `storyboard(changeScene)`
  id: totrans-235
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: c. `storyboard(changeScene)`
- en: d. None of the above
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: d. 以上都不是
- en: Which function converts any argument into a number?
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个函数可以将任何参数转换为数字？
- en: a. `tonumber()`
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: a. `tonumber()`
- en: b. `print()`
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: b. `print()`
- en: c. `tostring()`
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: c. `tostring()`
- en: d. nil
  id: totrans-241
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: d. nil
- en: How do you pause a timer?
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何暂停计时器？
- en: a. `timer.cancel()`
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: a. `timer.cancel()`
- en: b. `physics.pause()`
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: b. `physics.pause()`
- en: c. `timer.pause( timerID )`
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: c. `timer.pause( timerID )`
- en: d. None of the above
  id: totrans-246
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: d. 以上都不是
- en: How do you resume a timer?
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何恢复计时器？
- en: a. `resume()`
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: a. `resume()`
- en: b. `timer.resume( timerID )`
  id: totrans-249
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: b. `timer.resume( timerID )`
- en: c. `timer.performWithDelay()`
  id: totrans-250
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: c. `timer.performWithDelay()`
- en: d. None of the above
  id: totrans-251
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: d. 以上都不是
- en: Summary
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Congratulations! We have a game that is complete enough to go into the App Store
    or Google Play Store. Of course not using this exact game, but we have learned
    enough material to create one. It's a great accomplishment to have completed game
    framework, especially in the short amount of time it took to create something
    so simple.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！我们有一个足够完整的游戏可以进入App Store或Google Play Store。当然，不是使用这个确切的游戏，但我们已经学到了足够的材料来创建一个。完成游戏框架是一项伟大的成就，尤其是在如此短的时间内完成这样简单的事情。
- en: 'Here are some skills you learned:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些你学到的技能：
- en: Saving high scores using `saveValue()` and `loadValue()`
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `saveValue()` 和 `loadValue()` 保存高分
- en: Understanding how to pause physics/timers
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解如何暂停物理/计时器
- en: Displaying the pause menu
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示暂停菜单
- en: Changing scenes with the Storyboard API
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Storyboard API改变场景
- en: Creating transitions between scenes using loading screens
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用加载屏幕创建场景之间的过渡
- en: Using a main menu to introduce the game title and submenus
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用主菜单介绍游戏标题和子菜单
- en: This chapter was an important milestone to achieve. Everything that we have
    gone over in the previous chapters was applied to this sample game. The great
    thing about it is that it took only less than a day's worth of development to
    code. The art assets on the other hand are a different story.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是一个重要的里程碑。我们在前几章中学到的所有内容都应用到了这个示例游戏中。最棒的是，它只用了不到一天的开发时间来编写代码。另一方面，艺术资源则是另一回事。
- en: We still have quite a few more things to learn of what Corona SDK is capable
    of. In the next chapter, we'll go over more in detail on how to optimize our game
    assets for high-resolution devices. We're also going to go over how to post messages
    on Facebook and Twitter and sync our applications with Openfeint!
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有许多关于Corona SDK功能需要学习。在下一章中，我们将更详细地介绍如何优化我们的游戏资源以适应高分辨率设备。我们还将介绍如何在Facebook和Twitter上发布消息，以及如何将我们的应用程序与Openfeint同步！
