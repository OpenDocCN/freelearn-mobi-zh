- en: Chapter 7. Working with Different Multimedia Resources
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章.处理不同的多媒体资源
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Selecting images and video from the camera roll
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从相册选择图片和视频
- en: Capturing media with the camera
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用相机捕获媒体
- en: Playing video with AppleTV integration
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用AppleTV集成播放视频
- en: Playing music using the MediaPlayer framework
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用MediaPlayer框架播放音乐
- en: Using the iOS device microphone to record
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用iOS设备麦克风进行录音
- en: Animating views
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画视图
- en: Drawing customized text
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制自定义文本
- en: Drawing lines and curves
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制线条和曲线
- en: Drawing and filling shapes
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制和填充形状
- en: Applying color effects using Core Image
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Core Image应用颜色效果
- en: Applying transition effects
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用过渡效果
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: 'The **Core Image** framework is a hardware-accelerated framework that provides
    an easier way for you to enhance your photos and videos using the several built-in
    filters: color effects, distortions, and transitions, as well as several advanced
    features: auto-enhance, red-eye reduction, and facial recognition.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**Core Image**框架是一个硬件加速框架，它提供了一种更简单的方法，让您可以使用几个内置过滤器（颜色效果、扭曲和过渡）以及一些高级功能（自动增强、红眼减少和面部识别）来增强您的照片和视频。'
- en: In this chapter, we will take a closer look into these frameworks and how these
    can be used to apply image filter effects using the `CIFilter` class, as well
    as implementing Airplay to allow us to output content to another device using
    Apple TV. We will learn how to use the **AVFoundation** framework to record and
    play back audio content using the iOS device's built-in microphone. Finally, we
    will learn how we can use the **CoreGraphics** framework to enable us to draw
    shapes, and textual information to our view.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将更深入地探讨这些框架以及如何使用`CIFilter`类应用图像过滤效果，以及实现Airplay，使我们能够使用Apple TV将内容输出到另一台设备。我们将学习如何使用**AVFoundation**框架通过iOS设备的内置麦克风录制和播放音频内容。最后，我们将学习如何使用**CoreGraphics**框架使我们能够绘制形状和文本信息到视图中。
- en: Selecting images and video from the camera roll
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从相册选择图片和视频
- en: In this recipe, we will learn how to give the user the ability to select images
    and videos from the iOS device's photo album.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将学习如何让用户能够从iOS设备的相册中选择图片和视频。
- en: Getting ready
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new **Single View Application**, and name it **MediaPickerExample**.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的**单视图应用程序**，并将其命名为**MediaPickerExample**。
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To begin, follow these simple steps as outlined in the following order:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，按照以下顺序遵循以下简单步骤：
- en: Select the `ViewController.xib` files from the **Project** **Navigator** window.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目导航器**窗口中选择`ViewController.xib`文件。
- en: From the **Object Library**, select and drag a `UIToolbar` object, and add this
    to our view and select the **Item** button located within our toolbar.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**对象库**中选择并拖动一个`UIToolbar`对象，并将其添加到我们的视图中，并选择工具栏中的**项目**按钮。
- en: From the **Attributes Inspector** section, change the **Identifier** property
    to **Organize**.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**属性检查器**部分，将**标识符**属性更改为**组织**。
- en: Create an outlet for this `UIBarButtonItem`, and name it `btnBrowse`.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此`UIBarButtonItem`创建一个出口，并将其命名为`btnBrowse`。
- en: Create the action method for the **Organize** button and name it `btnBrowse`.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为**组织**按钮创建一个动作方法，并将其命名为`btnBrowse`。
- en: From the **Object Library**, select and drag a `UIImageView` object, and add
    this to our view and resize it so that it fills the area of the screen.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**对象库**中选择并拖动一个`UIImageView`对象，并将其添加到我们的视图中，并调整大小以填充屏幕区域。
- en: Create an outlet for this `UIImageView`, and name it `imageView.`
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此`UIImageView`创建一个出口，并将其命名为`imageView`。
- en: Our next step is to create the code functionality that will be responsible for
    allowing images and videos to be selected when the **Organize** button is clicked.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的下一步是创建代码功能，该功能将负责在点击**组织**按钮时允许选择图片和视频。
- en: Open the `ViewController.h` interface file from the **Project** **Navigator**.
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目导航器**打开`ViewController.h`接口文件。
- en: 'Next, modify the interface file as shown by the highlighted code sections in
    the following code snippet:'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，根据以下代码片段中突出显示的代码部分修改界面文件：
- en: '[PRE0]'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Open the `ViewController.m` implementation file from the `Project` `Navigator`,
    and enter in the following highlighted code sections.
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目导航器**打开`ViewController.m`实现文件，并输入以下突出显示的代码部分。
- en: '[PRE1]'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, modify the `btnBrowse:` method as shown in the code snippet:'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，根据代码片段修改`btnBrowse:`方法：
- en: '[PRE2]'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, create the following code sections, as specified in the code snippet:'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，根据代码片段中的指定创建以下代码部分：
- en: '[PRE3]'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Then, **Build** and **Run** the application by choosing **Product | Run** from
    the **Product** menu, or alternatively pressing *Command + R*.
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过从**产品**菜单中选择**产品 | 运行**，或者按*Command + R*来**构建**和**运行**应用程序。
- en: When the compilation completes, click on the **Organize** button to present
    the image picker, and select an image by clicking on its thumbnail. The image
    will be displayed in the image view. Alternatively, if you choose a video, the
    full path will be displayed within the console window.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译完成后，点击**组织**按钮以显示图片选择器，通过点击其缩略图来选择一个图片。图片将在图像视图中显示。或者，如果您选择了一个视频，完整路径将在控制台窗口中显示。
- en: How it works...
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In this recipe, we start by extending our class, to include each of the following
    class protocols: `UIImagePickerControllerDelegate`, `UINavigationControllerDelegate`
    so that we can access each of their respective properties and methods. We can
    check to see if we are able to access the iOS device''s photo library using the
    `isSourceTypeAvailable` property of the `UIImagePickerController` class, and initialize
    the properties of the `ImagePicker` class to only display images from our photo
    library. Next, we make the delegate point to itself and then set the `sourceType`
    property to use the camera, and then set the value of the `cameraDevice` property
    to use the rear camera and display the camera interface, and the `UIImagePickerController`
    object is dismissed.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们首先扩展我们的类，包括以下每个类协议：`UIImagePickerControllerDelegate`、`UINavigationControllerDelegate`，以便我们可以访问它们各自的属性和方法。我们可以通过检查`UIImagePickerController`类的`isSourceTypeAvailable`属性来查看我们是否能够访问iOS设备的照片库，并将`ImagePicker`类的属性初始化为仅显示来自我们照片库的图片。接下来，我们将代理指向自身，然后将`sourceType`属性设置为使用相机，并将`cameraDevice`属性的值设置为使用后置相机并显示相机界面，然后关闭`UIImagePickerController`对象。
- en: In our next section, we declare a delegate method for our image picker controller
    `imagePickerControllerDidCancel` that will be responsible for handling and taking
    care of closing the camera session without making an image selection, or taking
    a picture whenever the **Cancel** button has been clicked. Finally, we perform
    a check to determine the type of media that has been chosen from the photo library
    using the `UIImagePickerControllerMediaType` property of `UIImagePickerController`,
    and determine if we have selected either an image or a movie.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们为我们的图片选择器控制器声明一个代理方法`imagePickerControllerDidCancel`，它将负责处理和照顾关闭相机会话，不进行图像选择，或者当点击**取消**按钮时拍照。最后，我们通过使用`UIImagePickerControllerMediaType`属性检查`UIImagePickerController`中选择的媒体类型，并确定我们是否选择了图像或电影。
- en: If we selected an image, we create a thumbnail image representation of the video,
    and set the `image` property of the `imageView` control. If a video has been chosen,
    we obtain the file location of the chosen file, using the `UIImagePickerControllerMediaURL`
    method, and display this within our console window.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们选择了一张图片，我们将创建一个视频的缩略图图像表示，并将`imageView`控制的`image`属性设置为该图片。如果选择了一个视频，我们使用`UIImagePickerControllerMediaURL`方法获取所选文件的文件位置，并在我们的控制台窗口中显示这个位置。
- en: See also
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Capturing media with the camera* recipe
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用相机捕捉媒体**菜谱'
- en: Capturing media with the camera
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用相机捕捉媒体
- en: In this recipe, we will learn how to use the iOS device camera for capturing
    media.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何使用iOS设备的相机来捕捉媒体。
- en: Getting ready
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Following on from our previous recipe, create a new **Single View Application,**
    and name it **CameraPickerExample**.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的菜谱基础上，创建一个新的**单视图应用程序**，并将其命名为**CameraPickerExample**。
- en: How to do it...
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To begin, follow these simple steps as outlined in the following order:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，按照以下顺序执行以下简单步骤：
- en: Select the `ViewController.xib` files from the **Project** **Navigator** window.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目导航器**窗口中选择`ViewController.xib`文件。
- en: From the **Object Library**, select and drag a `UIToolbar` object, and add this
    to our view and click on the **Item** button located within our toolbar.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**对象库**中选择并拖动一个`UIToolbar`对象，并将其添加到我们的视图中，然后点击工具栏中的**项目**按钮。
- en: From the **Attributes Inspector** section, change the **Identifier** property
    to **Camera**.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**属性检查器**部分，将**标识符**属性更改为**Camera**。
- en: Create an outlet for this `UIBarButtonItem`, and name it `btnCamera`.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为这个`UIBarButtonItem`创建一个出口，并将其命名为`btnCamera`。
- en: Create the action method for the **Camera** button and name it `btnCamera`.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为**Camera**按钮创建一个动作方法，并将其命名为`btnCamera`。
- en: Our next step is to create the code functionality that will be responsible for
    displaying the camera view when the **Camera** button is clicked.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们接下来的步骤是创建代码功能，该功能将在点击**相机**按钮时负责显示相机视图。
- en: Open the `ViewController.h` interface file from the **Project** **Navigator**.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目导航器**打开`ViewController.h`接口文件。
- en: 'Next, modify the interface file as shown by the highlighted code sections in
    the following code snippet:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，按照以下代码片段中突出显示的代码部分修改接口文件：
- en: '[PRE4]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Open the `ViewController.m` implementation file from the **Project** **Navigator**
    window, and enter in the following highlighted code sections:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目导航器**窗口打开`ViewController.m`实现文件，并输入以下突出显示的代码部分：
- en: '[PRE5]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, modify the `btnCamera:` method as shown in the code snippet:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，按照代码片段中显示的修改`btnCamera:`方法：
- en: '[PRE6]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then, create the following code sections, as specified in the code snippet:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，根据代码片段中的说明创建以下代码部分：
- en: '[PRE7]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Then, **Build** and **Run** the application by choosing **Product | Run** from
    the **Product** menu, or alternatively pressing *Command + R*.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过从**产品**菜单选择**产品 | 运行**或按*Command + R*来**构建**和**运行**应用程序。
- en: When the compilation completes, click on the **Camera** button to open the camera
    and take a picture. The picture will be saved to the iOS device's photo album.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译完成后，点击**相机**按钮打开相机并拍照。照片将被保存在iOS设备的相册中。
- en: How it works...
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In this recipe, we start by extending our class, to include each of the following
    class protocols: `UIImagePickerControllerDelegate`, `UINavigationControllerDelegate`
    so that we can access each of their respective properties and methods. We then
    check to see if we are able to access the iOS device''s camera using the `isSourceTypeAvailable`
    property of the `UIImagePickerController` class and then create a new instance
    of our `UIImagePickerController` class. Next, we make the delegate point to itself
    and then set the `sourceType` property to use the camera, and then set the value
    of the `cameraDevice` property to use the rear camera. Finally, we display the
    camera interface, and the `UIImagePickerController` object is dismissed. Next,
    we declare a delegate method for our image picker controller `imagePickerControllerDidCancel`
    that will be responsible for handling and taking care of closing the camera session
    without making an image selection, or taking a picture whenever the **Cancel**
    button has been clicked on.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们首先扩展我们的类，包括以下每个类协议：`UIImagePickerControllerDelegate`，`UINavigationControllerDelegate`，以便我们可以访问它们各自的属性和方法。然后，我们检查是否能够使用`UIImagePickerController`类的`isSourceTypeAvailable`属性访问iOS设备的相机，然后创建我们`UIImagePickerController`类的新实例。接下来，我们将委托指向自身，然后将`sourceType`属性设置为使用相机，并将`cameraDevice`属性的值设置为使用后置摄像头。最后，我们显示相机界面，并关闭`UIImagePickerController`对象。接下来，我们声明一个用于我们的图像选择器控制器的委托方法`imagePickerControllerDidCancel`，该方法将负责处理和照顾关闭相机会话，不进行图像选择，或当点击**取消**按钮时拍照。
- en: Next, when the user takes a photo using the camera, it is not automatically
    saved on the device. To save it, we call the `UIImageWriteToSavedPhotosAlbum`
    method of the `UIImage` class. This method accepts a delegate of type `UIImageconextInfo`,
    which will report an error and immediately call the `didFinishSavingWithError:`
    method if something goes wrong to handle the type of error.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，当用户使用相机拍照时，它不会自动保存在设备上。要保存它，我们调用`UIImageWriteToSavedPhotosAlbum`方法，这是`UIImage`类的方法。此方法接受一个类型为`UIImageconextInfo`的委托，如果出现问题将报告错误并立即调用`didFinishSavingWithError:`方法来处理错误类型。
- en: See also
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Selecting images and video from the camera roll* recipe
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*从相册选择图片和视频*的食谱'
- en: Playing video with Apple TV integration
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Apple TV集成播放视频
- en: The **AirPlay** framework is an updated framework that lets you stream audio
    and video content from any iOS device out to any Airplay-enabled device that is
    capable of playing audio and video such as television sets and audio systems.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**AirPlay**框架是一个更新的框架，允许您从任何iOS设备流式传输音频和视频内容到任何启用了AirPlay功能的设备，这些设备能够播放音频和视频，例如电视和音频系统。'
- en: Starting with iOS 5, developers now have the flexibility to incorporate Airplay
    content into their applications, and have this information presented out to a
    nearby Apple TV receiver. In this section, we will take a look at how to create
    a simple application to playback video content on an iOS device, and then take
    a look at the steps involved to output this to an Apple TV device.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 从iOS 5开始，开发者现在可以灵活地将Airplay内容集成到他们的应用程序中，并将此信息输出到附近的Apple TV接收器。在本节中，我们将探讨如何创建一个简单的应用程序，在iOS设备上播放视频内容，然后查看将内容输出到Apple
    TV设备的步骤。
- en: Getting ready
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Following on from our previous recipe, create a new **Single View Application**,
    and name it **PlayVideoExample**.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的菜谱之后，创建一个新的**单视图应用程序**，并将其命名为**PlayVideoExample**。
- en: How to do it...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To begin, follow these simple steps as outlined in the following order:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，按照以下顺序遵循以下简单步骤：
- en: Add a reference to the `MediaPlayer.framework` to your project.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将对`MediaPlayer.framework`的引用添加到您的项目中。
- en: Select the `ViewController.xib` files from the **Project** **Navigator** window.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目导航器**窗口选择`ViewController.xib`文件。
- en: From the **Object Library**, drag a `UIButton` object, and add this to our view.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**对象库**中拖动一个`UIButton`对象，并将其添加到我们的视图中。
- en: From the **Attributes Inspector** section, change the **Title** property to
    **Play Video**.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**属性检查器**部分，将**标题**属性更改为**播放视频**。
- en: Create an outlet for this `UIButton`, and name it `btnPlayVideo`.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此`UIButton`创建一个出口，并命名为`btnPlayVideo`。
- en: Create the action method for the **Play Video** button and name it `btnPlayVideo`.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为**播放视频**按钮创建一个动作方法，并命名为`btnPlayVideo`。
- en: Our next step is to create the code functionality that will be responsible for
    playing the video when the **Play Video** button is clicked.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们接下来的步骤是创建当**播放视频**按钮被点击时负责播放视频的代码功能。
- en: Open the `ViewController.h` interface file from the **Project** **Navigator**
    window.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目导航器**窗口打开`ViewController.h`接口文件。
- en: 'Next, create the following code sections as highlighted in the code snippet:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建以下代码部分，如代码片段中突出显示的：
- en: '[PRE8]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Open the `ViewController.m` implementation file from the **Project** **Navigator**
    window, and enter in the following highlighted code sections:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目导航器**窗口打开`ViewController.m`实现文件，并输入以下突出显示的代码部分：
- en: '[PRE9]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, modify the `btnPlayVideo:` method as shown in the code snippet:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改`btnPlayVideo:`方法，如代码片段所示：
- en: '[PRE10]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, create the `moviePlaybackComplete:` as method shown in the code snippet:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建名为`moviePlaybackComplete:`的方法，如代码片段所示：
- en: '[PRE11]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Then, **Build** and **Run** the application by choosing **Product | Run** from
    the **Product** menu, or alternatively pressing *Command + R*.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过选择**产品**菜单中的**产品 | 运行**或按*Command + R*来**构建**和**运行**应用程序。
- en: 'When the compilation completes, the following screenshot shows what the icon
    looks like when **AirPlay** has been enabled:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 编译完成后，以下截图显示了**AirPlay**启用时的图标：
- en: '![How to do it...](img/3349OT_07_01.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/3349OT_07_01.jpg)'
- en: How it works...
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we declared a variable (`NSString`) `moviePath` that will contain
    the file path to our movie file and then create a (`NSURL`) `movieURL` that converts
    our file path to an object that is needed by the `MPMoviePlayerController` method
    when it is being initialized.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，我们声明了一个变量（`NSString`）`moviePath`，它将包含电影文件的文件路径，然后创建一个（`NSURL`）`movieURL`，将文件路径转换为初始化`MPMoviePlayerController`方法时所需的对象。
- en: Next, we set up a notification method to determine when the video playback completes
    by using a notification method called `MPMoviePlayerPlaybackDidFinishNotification`
    to the `NSNotificationCenter` property which the calls the `moviePlaybackComplete:`
    method and then add the `MPMoviePlayerController` view to our custom view controller,
    so that it will appear on the screen and then use the `respondsToSelector:` method
    of the `MPMoviePlayerController` object to cater for older iOS devices that don't
    support the `allowsAirPlay` property.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们设置一个通知方法，通过使用名为`MPMoviePlayerPlaybackDidFinishNotification`的通知方法到`NSNotificationCenter`属性，调用`moviePlaybackComplete:`方法，然后将`MPMoviePlayerController`视图添加到我们的自定义视图控制器中，以便它出现在屏幕上，然后使用`MPMoviePlayerController`对象的`respondsToSelector:`方法来处理不支持`allowsAirPlay`属性的旧iOS设备。
- en: In order to provide AirPlay functionality we enable a special property on our
    `MPMoviePlayerController` object, by setting the `allowsAirPlay` property to `YES`
    and then specify that we want to display our video in full screen.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供 AirPlay 功能，我们在 `MPMoviePlayerController` 对象上启用一个特殊属性，通过将 `allowsAirPlay`
    属性设置为 `YES`，然后指定我们想要全屏显示我们的视频。
- en: 'We then tell the `moviePlayerController` method to commence playback and then
    modify the `scalingMode` property of the `MPMoviePlayerController` object. By
    setting this property, it will determine how the movie image adapts to fill the
    playback size that you have defined. The following scaling modes currently exist,
    and are displayed here:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们告诉 `moviePlayerController` 方法开始播放，并修改 `MPMoviePlayerController` 对象的 `scalingMode`
    属性。通过设置此属性，它将确定电影图像如何适应填充您定义的播放大小。以下是目前存在的缩放模式，并在此处显示：
- en: '`MPMovieScalingModeNone`'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MPMovieScalingModeNone`'
- en: '`MPMovieScalingModeAspectFit`'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MPMovieScalingModeAspectFit`'
- en: '`MPMovieScalingModeAspectFill`'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MPMovieScalingModeAspectFill`'
- en: '`MPMovieScalingModeFill`'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MPMovieScalingModeFill`'
- en: Finally, we create the `moviePlaybackComplete:` method and retrieve the object
    using the `[notificationobject]` statement and then reference it with the new
    `moviePlayerController` pointer. We then send a message back to the `NSNotificationCenter`
    method that removes the observer we previously registered within our `playVideo`
    method. We finally proceed with cleaning up our custom view controller from our
    display.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们创建 `moviePlaybackComplete:` 方法，并使用 `[notificationobject]` 语句检索对象，然后使用新的
    `moviePlayerController` 指针引用它。然后我们向 `NSNotificationCenter` 方法发送消息，移除我们在 `playVideo`
    方法中先前注册的观察者。我们最后清理我们的自定义视图控制器。
- en: Note
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information on the `MPMoviePlayerController` class, you can refer
    to the Apple Developer Documentation at the following location: [https://developer.apple.com/library/ios/#documentation/mediaplayer/reference/MPMoviePlayerController_Class/Reference/Reference.html](https://developer.apple.com/library/ios/#documentation/mediaplayer/reference/MPMoviePlayerController_Class/Reference/Reference.html)`#//apple_ref/occ/cl/MPMoviePlayerController`'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 `MPMoviePlayerController` 类的更多信息，您可以参考以下位置的 Apple 开发者文档：[https://developer.apple.com/library/ios/#documentation/mediaplayer/reference/MPMoviePlayerController_Class/Reference/Reference.html](https://developer.apple.com/library/ios/#documentation/mediaplayer/reference/MPMoviePlayerController_Class/Reference/Reference.html)`#//apple_ref/occ/cl/MPMoviePlayerController`
- en: See also
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Playing music using the MediaPlayer framework* recipe
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 MediaPlayer 框架播放音乐* 食谱'
- en: Playing music using the MediaPlayer framework
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 MediaPlayer 框架播放音乐
- en: In this recipe we will learn how to play songs that are stored on the iOS device.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将学习如何播放存储在 iOS 设备上的歌曲。
- en: Getting ready
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Following on from our previous recipe, create a new **Single View Application**,
    and name it **MusicPlayerExample**.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的食谱基础上，创建一个新的 **单视图应用程序**，并将其命名为 **MusicPlayerExample**。
- en: How to do it...
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'To begin, follow these simple steps as outlined in the following order:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请按照以下顺序遵循以下简单步骤：
- en: Add a reference to the `MediaPlayer.framework` to your project.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `MediaPlayer.framework` 添加到您的项目中。
- en: Select the `ViewController.xib` files from the **Project** **Navigator** window.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **项目导航器** 窗口中选择 `ViewController.xib` 文件。
- en: From the **Object Library** window, select and drag a `UIToolbar` object, and
    add this to our view and select the **Item** button located within our toolbar.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **对象库** 窗口中，选择并拖动一个 `UIToolbar` 对象，并将其添加到我们的视图中，并选择工具栏中的 **项目** 按钮。
- en: From the **Attributes Inspector** section, change the **Title** property to
    read **Browse**.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **属性检查器** 部分更改 **标题** 属性，使其显示为 **浏览**。
- en: Create outlets for this `UIBarButtonItem`, and name it `btnBrowse`.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此 `UIBarButtonItem` 创建出口，并将其命名为 `btnBrowse`。
- en: Create the `action` method for the **Browse** button and name it `btnBrowse`.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 **浏览** 按钮创建 `action` 方法，并将其命名为 `btnBrowse`。
- en: From the **Object Library** window, select and drag a `UIBarButtonItem` object,
    and add this next to the **Browse** button within our toolbar.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **对象库** 窗口中，选择并拖动一个 `UIBarButtonItem` 对象，并将其添加到我们的工具栏中的 **浏览** 按钮旁边。
- en: From the **Attributes Inspector** section, change **Title** property to read
    **Play**.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **属性检查器** 部分更改 **标题** 属性，使其显示为 **播放**。
- en: Create the outlets for this `UIBarButtonItem`, and name it `btnPlay`.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此 `UIBarButtonItem` 创建出口，并将其命名为 `btnPlay`。
- en: Create the `action` method for the **Play** button and name it `btnPlay`.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 **播放** 按钮的 `action` 方法，并将其命名为 `btnPlay`。
- en: Our next step is to create the code functionality that will be responsible for
    playing music, when songs are selected and played from the Media Library.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的下一步是创建代码功能，该功能将负责在从媒体库中选择并播放歌曲时播放音乐。
- en: Open the `ViewController.h` interface file from the **Project** **Navigator**
    window.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目导航器**窗口中打开`ViewController.h`接口文件。
- en: 'Next, create the following code sections as highlighted in the code snippet:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建以下代码部分，如代码片段中突出显示：
- en: '[PRE12]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Open the `ViewController.m` implementation file from the **Project** **Navigator**
    window, and enter the following highlighted code sections:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目导航器**窗口中打开`ViewController.m`实现文件，并输入以下突出显示的代码部分：
- en: '[PRE13]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, modify the `viewDidLoad:` method as shown in the code snippet:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，按照代码片段中的修改`viewDidLoad:`方法：
- en: '[PRE14]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, create the following code sections, as specified in the code snippet:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建以下代码部分，如代码片段中指定：
- en: '[PRE15]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Then, **Build** and **Run** the application by choosing **Product | Run** from
    the **Product** menu, or alternatively pressing *Command + R*.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过从**产品**菜单中选择**产品 | 运行**或按*Command + R*键，**构建**和**运行**应用程序。
- en: When the compilation completes, click on the **Browse** button, and select one
    or more songs, then press the **Play** to play the chosen songs.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译完成后，点击**浏览**按钮，选择一首或多首歌曲，然后按**播放**来播放所选歌曲。
- en: How it works...
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In this recipe, we start by extending our class, to include each of the following
    class protocols: `MPMediaPickerControllerDelegate` so that we can access each
    of their respective properties and methods. We then initialize the media picker
    and pass the type of media we want it to look for and then initialize and create
    an instance of the `MPMusicPlayerController` class. Next, we declare our `btnBrowse`
    method that will display the iOS device music library interface, and allows for
    multiple files to be selected. In our `btnPlay:` method, we check to see if any
    songs are currently being played, which is determined by checking the `playbackState`
    property. Playing and stopping of songs is achieved through the `play` and `stop`
    methods of the `MPMusicPlayerController` class object. In the `mediaPicker:didPickMediaItems:`
    method, we set the songs that were picked by the user to the music player, through
    the use of the `setQueueWithItemCollection:` method and dismiss the modal media
    picker controller.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们首先扩展我们的类，包括以下每个类协议：`MPMediaPickerControllerDelegate`，以便我们可以访问它们各自的属性和方法。然后，我们初始化媒体选择器，并传递我们希望它查找的媒体类型，然后初始化并创建`MPMusicPlayerController`类的实例。接下来，我们声明我们的`btnBrowse`方法，该方法将显示iOS设备音乐库界面，并允许选择多个文件。在我们的`btnPlay:`方法中，我们检查是否有歌曲正在播放，这是通过检查`playbackState`属性来确定的。通过`MPMusicPlayerController`类对象的`play`和`stop`方法实现歌曲的播放和停止。在`mediaPicker:didPickMediaItems:`方法中，我们通过使用`setQueueWithItemCollection:`方法将用户选择的歌曲设置到音乐播放器中，并通过关闭模态媒体选择器控制器来关闭。
- en: See also
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Playing video with Apple TV integration* recipe
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Apple TV集成播放视频*配方'
- en: The *Capturing media with the camera* recipe
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用相机捕获媒体*配方'
- en: Using the iOS device's microphone to record
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用iOS设备的麦克风录音
- en: In this recipe we will learn how we can use the iOS device's microphone to record
    sounds.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将学习如何使用iOS设备的麦克风来录音。
- en: Getting ready
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Following on from our previous recipe, create a new **Single View Application,**
    and name it **RecorderExample**.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的配方之后，创建一个新的**单视图应用程序**，并将其命名为**RecorderExample**。
- en: How to do it...
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To begin, follow these simple steps as outlined in the following order:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，按照以下顺序遵循以下简单步骤：
- en: Add a reference to the `AVFoundation.framework` to your project.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`AVFoundation.framework`引用添加到您的项目中。
- en: Select the `ViewController.xib` files from the **Project** **Navigator** window.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目导航器**窗口中选择`ViewController.xib`文件。
- en: From the **Object Library** window, select and drag a `UIToolbar` object, and
    add this to our view and select the **Item** button located within our toolbar.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**对象库**窗口中，选择并拖动一个`UIToolbar`对象，并将其添加到我们的视图中，然后选择工具栏内的**项目**按钮。
- en: From the **Attributes Inspector** section, change the **Title** property to
    read **Start Recording**.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**属性检查器**部分，将**标题**属性更改为**开始录音**。
- en: Create the outlet for this `UIBarButtonItem`, and name it `btnStart`.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此`UIBarButtonItem`创建出口，并将其命名为`btnStart`。
- en: Create the `action` method for the button, and name it `startRecord`.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为按钮创建`action`方法，并将其命名为`startRecord`。
- en: From the **Object Library** window, select and drag a `UIBarButtonItem` object,
    and add this to the right of the **Start Recording** button within our toolbar.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**对象库**窗口中，选择并拖动一个`UIBarButtonItem`对象，并将其添加到工具栏中**开始录音**按钮的右侧。
- en: From the **Attributes Inspector** section, change the **Title** property to
    read **Play**.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**属性检查器**部分，将**标题**属性更改为读取**播放**。
- en: Create the outlet for this `UIBarButtonItem`, and name it `btnPlay`.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此`UIBarButtonItem`创建出口，并将其命名为`btnPlay`。
- en: Create the `action` method for the button, and name it `startPlayback`.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为按钮创建`action`方法，并将其命名为`startPlayback`。
- en: Our next step is to create the code functionality that will be responsible for
    recording and playback our audio content.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们下一步要创建的代码功能将负责录音和播放我们的音频内容。
- en: Open the `ViewController.h` interface file from the Project Navigator window.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目导航器窗口打开`ViewController.h`接口文件。
- en: 'Next, create the following code sections as highlighted in the code snippet:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建以下代码部分，如代码片段中突出显示：
- en: '[PRE16]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Open the `ViewController.m` implementation file from the **Project** **Navigator**
    window, and enter in the following highlighted code sections:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目导航器**窗口打开`ViewController.m`实现文件，并输入以下突出显示的代码部分：
- en: '[PRE17]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, modify the `viewDidLoad:` method as shown in the code snippet:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改`viewDidLoad:`方法，如代码片段所示：
- en: '[PRE18]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then, create the following code sections, as specified in the code snippet:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建以下代码部分，如代码片段中指定：
- en: '[PRE19]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Then, **Build** and **Run** the application by choosing **Product | Run** from
    the **Product** menu, or alternatively pressing *Command + R*.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过选择**产品**菜单中的**产品 | 运行**或按*Command + R*来**构建**和**运行**应用程序。
- en: When the compilation completes, click on the **Start Recording** button to record
    your voice sample, and then press the **Play** button to hear the playback of
    your recording.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译完成后，点击**开始录音**按钮来录制你的声音样本，然后按下**播放**按钮来听你录音的回放。
- en: How it works...
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we start by creating an instance of the `AVAudioRecorder` class
    when the application is first launched. This method is then initialized with a
    URL pointing the default filename to which the recorded audio is saved, and declare
    an `NSDictionary` object to initialize and set up the recording settings for the
    audio. Next, we use the `NSSearchPathForDirectoriesInDomains` class to identify
    the application's document directory, then construct a URL to a file in that location
    named `RecorderExample.caf`, and prepare the `aRecorder` instance to begin recording
    when the user requests it.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们首先在应用程序首次启动时创建`AVAudioRecorder`类的实例。然后，使用指向默认文件名的URL初始化此方法，并声明一个`NSDictionary`对象来初始化和设置音频的录音设置。接下来，我们使用`NSSearchPathForDirectoriesInDomains`类来识别应用程序的文档目录，然后构造一个指向该位置名为`RecorderExample.caf`的文件的URL，并准备`aRecorder`实例在用户请求时开始录音。
- en: Next, in our `startRecord` method, we use the `aRecorder` object to determine
    if we are currently recording. If we have determined that we are not recording,
    we change the text of our `startRecord` method to display **Stop Recording**,
    disable the `btnPlay` button, and then set up our `aRecorder` object to begin
    the recording. If we are currently recording, we change the text of our `startRecord`
    method to display **Start Recording** button and disable the `btnPlay` button,
    and stop our `aRecorder` object from recording.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在我们的`startRecord`方法中，我们使用`aRecorder`对象来确定我们是否正在录音。如果没有在录音，我们将`startRecord`方法的文本更改为显示**停止录音**，禁用`btnPlay`按钮，然后设置我们的`aRecorder`对象开始录音。如果我们正在录音，我们将`startRecord`方法的文本更改为显示**开始录音**按钮，并禁用`btnPlay`按钮，并停止`aRecorder`对象的录音。
- en: In our next step, we initialize the `aPlayer` object to play the file recording
    using the URL method of the `aRecorder` object and set up our `aPlayer` object
    to use the `prepareToPlay` method, before calling the `Play` method to start the
    playback. If we have decided that we are currently playing our voice recording,
    we make a call to the `stop` method on our `aPlayer` object, which ceases playback.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的下一步中，我们初始化`aPlayer`对象，使用`aRecorder`对象的URL方法播放文件录音，并在调用`Play`方法开始播放之前设置我们的`aPlayer`对象以使用`prepareToPlay`方法。如果我们已经决定我们现在正在播放我们的声音录音，我们就在我们的`aPlayer`对象上调用`stop`方法，这将停止播放。
- en: Note
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information on the `AVFoundation` class, refer to the Apple Developer
    Documentation located at the following location: [https://developer.apple.com/library/ios/#documentation/AVFoundation/Reference/AVAudioRecorder_ClassReference/Reference/Reference.html](https://developer.apple.com/library/ios/#documentation/AVFoundation/Reference/AVAudioRecorder_ClassReference/Reference/Reference.html)`#//apple_ref/occ/cl/AVAudioRecorder`'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 `AVFoundation` 类的更多信息，请参阅位于以下位置的 Apple 开发者文档：[https://developer.apple.com/library/ios/#documentation/AVFoundation/Reference/AVAudioRecorder_ClassReference/Reference/Reference.html](https://developer.apple.com/library/ios/#documentation/AVFoundation/Reference/AVAudioRecorder_ClassReference/Reference/Reference.html)`#//apple_ref/occ/cl/AVAudioRecorder`
- en: See also
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Playing music using the MediaPlayer framework* recipe
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 MediaPlayer 框架播放音乐* 的教程'
- en: Animating views
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 视图动画
- en: In this recipe we will learn how we can use the `UIKit` animations to move a
    `UILabel` control on the screen.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何使用 `UIKit` 动画在屏幕上移动 `UILabel` 控件。
- en: Getting ready
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Following on from our previous recipe, create a new **Single View Application,**
    and name it **AnimateViewExample**.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的教程基础上，创建一个新的 **单视图应用程序**，并将其命名为 **AnimateViewExample**。
- en: How to do it...
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'To begin, follow these simple steps as outlined in the following order:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，按照以下顺序执行以下简单步骤：
- en: Select the `ViewController.xib` files from the **Project** **Navigator** window.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **项目导航器** 窗口选择 `ViewController.xib` 文件。
- en: From the **Object Library** window, drag a `UILabel` object onto the view.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **对象库** 窗口，将一个 `UILabel` 对象拖放到视图中。
- en: Resize the `UILabel` control so that its contents fill the width of the view.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整 `UILabel` 控件的大小，使其内容填充视图的宽度。
- en: Next, create the outlet for this `UILabel`, and name it `lblAnimateMsg`.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为这个 `UILabel` 创建一个出口，并将其命名为 `lblAnimateMsg`。
- en: Next, from the **Object** **Library** window, drag a `UIButton` object onto
    the view, and place it underneath the `UILabel` that we added previously.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从 **对象库** 窗口，将一个 `UIButton` 对象拖放到视图中，并将其放置在我们之前添加的 `UILabel` 下方。
- en: From the **Attributes Inspector** section, modify the **Title** property to
    read **Start**.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **属性检查器** 部分中，修改 **标题** 属性，使其显示为 **开始**。
- en: Next, create an outlet for this `UIButton`, and name it `btnAnimate`.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为这个 `UIButton` 创建一个出口，并将其命名为 `btnAnimate`。
- en: Next, create the action method for the **Start** button and name it `doAnimation`.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为 **开始** 按钮创建动作方法，并将其命名为 `doAnimation`。
- en: After adding the button, save the document by choosing **File | Save** from
    the menu bar.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加按钮后，通过从菜单栏选择 **文件 | 保存** 来保存文档。
- en: Our next step is to create the code functionality that will be responsible for
    animating our `UILabel` control when the **Start** button is pressed.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们接下来的步骤是创建代码功能，该功能将在按下 **开始** 按钮时负责动画 `UILabel` 控件。
- en: Open the `ViewController.m` implementation file from the **Project** **Navigator**
    window.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **项目导航器** 窗口打开 `ViewController.m` 实现文件。
- en: 'Create the following variable declaration as highlighted in the code snippet:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建以下变量声明，如代码片段中突出显示：
- en: '[PRE20]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, modify the `viewDidLoad:` method as shown in the following code snippet:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改 `viewDidLoad:` 方法，如下代码片段所示：
- en: '[PRE21]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, modify the `doAnimation:` method as shown in the following code snippet:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改 `doAnimation:` 方法，如下代码片段所示：
- en: '[PRE22]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next, create the `doAnimationStop:` method as shown in the code snippet:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建 `doAnimationStop:` 方法，如下代码片段所示：
- en: '[PRE23]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Then, **Build** and **Run** the application by choosing **Product | Run** from
    the **Product** menu, or alternatively pressing *Command + R*.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过从 **产品** 菜单选择 **产品 | 运行** 或按 *Command + R* 来 **构建** 和 **运行** 应用程序。
- en: When the compilation completes, the iOS Simulator will appear. Tap the **Start**
    button to see the label start to animate and display the message when the animation
    completes.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译完成后，iOS 模拟器将出现。点击 **开始** 按钮以查看标签开始动画，并在动画完成后显示消息。
- en: How it works...
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, we looked at how we can use the `UIKit` framework to perform
    animations on objects within the view. We start by saving the original position
    of our label and storing this into a variable called `origPos` and then create
    a new variable `AnimateFrame` that will be used to specify the height to which
    our label will animate within.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们探讨了如何使用 `UIKit` 框架在视图中的对象上执行动画。我们首先保存标签的原始位置，并将其存储在一个名为 `origPos` 的变量中，然后创建一个新的变量
    `AnimateFrame`，该变量将用于指定标签将动画到的具体高度。
- en: In our next step, we begin marking the start of our animation block using the
    `beginAnimations` method and then specify a name for the animation, before setting
    the graphics context to `nil`. Next, we specify the length of the animation in
    seconds using the `setAnimationDuration` property, and then set the animation
    delegate object.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的下一步中，我们开始使用 `beginAnimations` 方法标记动画块的开始，然后指定动画的名称，在将图形上下文设置为 `nil` 之前。接下来，我们使用
    `setAnimationDuration` 属性指定动画的长度（以秒为单位），然后设置动画代理对象。
- en: Next, we define the default easing functions that will be applied to the animation
    at its start and ending points by using the `setAnimationCurve` method. Then,
    we set up a selector object that gets called when the animation completes. Finally,
    we stop our animation block using the `commitAnimations` method to mark the end
    of our animations. Finally, in our `doAnimationStop:` method, we restore the label
    control to the original location for the next time round.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们通过使用 `setAnimationCurve` 方法定义动画开始和结束点将应用到的默认缓动函数。然后，我们设置一个选择器对象，当动画完成时将被调用。最后，我们使用
    `commitAnimations` 方法停止动画块，以标记动画的结束。最后，在我们的 `doAnimationStop:` 方法中，我们将标签控件恢复到下一次循环的原始位置。
- en: Note
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information on the `UIKit` framework, you can refer to the Apple Developer
    Documentation location at the following URL: [https://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIKit_Framework/_index.html](https://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIKit_Framework/_index.html)'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 `UIKit` 框架的更多信息，您可以参考以下 Apple 开发者文档位置：[https://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIKit_Framework/_index.html](https://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIKit_Framework/_index.html)
- en: See also
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Using Xcode to create an iOS project* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    and Installing the iOS SDK Development Tools"), *Getting and Installing the iOS
    SDK Development Tools*
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Xcode 创建 iOS 项目](https://wiki.example.org/ch01.html "第 1 章。获取和安装 iOS SDK
    开发工具")中的 *使用 Xcode 创建 iOS 项目* 菜单，*获取和安装 iOS SDK 开发工具*'
- en: The *Creating outlets to Interface Builder objects* recipe in [Chapter 1](ch01.html
    "Chapter 1. Getting and Installing the iOS SDK Development Tools"), *Getting and
    Installing the iOS SDK Development Tools*
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 1 章](ch01.html "第 1 章。获取和安装 iOS SDK 开发工具")中的 *创建到 Interface Builder 对象的出口*
    菜单，*获取和安装 iOS SDK 开发工具*'
- en: Drawing customized text
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制自定义文本
- en: In this recipe we will take a look at how easy it is to draw stylized text with
    an outline on to the view.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，我们将看看如何轻松地在视图中绘制带有轮廓的样式化文本。
- en: Getting ready
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Following on from our previous recipe, create a new **Single View Application,**
    and name it **DrawTextExample**.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的菜谱基础上，创建一个新的 **单视图应用程序**，并将其命名为 **DrawTextExample**。
- en: How to do it...
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To begin, follow these simple steps as outlined in the following order:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，按照以下顺序遵循以下简单步骤：
- en: Select the `DrawTextExample` folder, choose **File | New | File…**
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 `DrawTextExample` 文件夹，选择 **文件 | 新建 | 文件…**
- en: Select the **Objective-C class** template from the list of available templates.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从可用的模板列表中选择 **Objective-C 类** 模板。
- en: Click on the **Next** button to proceed to the next step in the wizard.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **下一步** 按钮以进入向导的下一步。
- en: Enter in `DrawTextView` as the name of the class name to be created.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `DrawTextView` 作为要创建的类名。
- en: Ensure that you have selected `UIView` as the type of subclass to create from
    the **Subclass of** drop-down list.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您已从 **子类类型** 下拉列表中选择 `UIView` 作为要创建的子类的类型。
- en: Click on the **Next** button to proceed to the next step of the wizard.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **下一步** 按钮以进入向导的下一步。
- en: Then, click on the **Create** button to save the file to the folder location
    specified.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击 **创建** 按钮以将文件保存到指定的文件夹位置。
- en: We have successfully finished creating our `DrawTextView` class. Our next step
    is to implement the functionality and methods used by this class.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已成功完成创建我们的 `DrawTextView` 类。我们的下一步是实现该类使用的功能和方法。
- en: Open the `DrawTextView.m` implementation file from the **Project** **Navigator**
    window.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **项目导航器** 窗口中打开 `DrawTextView.m` 实现文件。
- en: Modify the `drawRect:` method as shown in the following code snippet.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改如下代码片段所示的 `drawRect:` 方法。
- en: '[PRE24]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Our next step is to create the code functionality that will be responsible for
    adding our custom view as a sub-view to our existing view controller.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一步是创建代码功能，该功能将负责将我们的自定义视图作为子视图添加到现有的视图控制器中。
- en: Open the `ViewController.m` implementation file from the **Project** **Navigator**
    window.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Project** **Navigator**窗口打开`ViewController.m`实现文件。
- en: 'Include the following class reference as highlighted in the code snippet:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码片段中突出显示以下类引用：
- en: '[PRE25]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Next, modify the `viewDidLoad:` method as shown in the following code snippet:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，按照以下代码片段修改`viewDidLoad:`方法：
- en: '[PRE26]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Then, **Build** and **Run** the application by choosing **Product | Run** from
    the **Product** menu, or alternatively pressing *Command + R*.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过从**Product**菜单中选择**Product | Run**或按*Command + R*，**构建**和**运行**应用程序。
- en: When the compilation completes, the iOS Simulator appears and displays the text
    we created within this recipe. The image has been rotated within the device.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 编译完成后，iOS模拟器出现并显示在这个菜谱中创建的文本。图像已在设备中旋转。
- en: '![How to do it...](img/3349OT_07_02.jpg)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/3349OT_07_02.jpg)'
- en: How it works...
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, we created a new custom `DrawTextView` class that inherits from
    the `UIView` class. We then modify the `drawRect:` method that will be used to
    draw our text to the view. We then declare the variable `context` that will be
    used to obtain the current graphics context using the `UIGraphicsGetCurrentContext`
    function.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们创建了一个新的自定义`DrawTextView`类，它继承自`UIView`类。然后我们修改了`drawRect:`方法，该方法将用于将文本绘制到视图中。然后我们声明了变量`context`，它将使用`UIGraphicsGetCurrentContext`函数来获取当前的图形上下文。
- en: Next, we clear the view using the `CGContextClearRect` function and set the
    color of our text and pass the `FillStroke` value to our `CGContextSetTextDrawingMode`
    method and then call our `drawAtPoint:` method to draw the text using the font
    details specified by the `UIFont` class. Finally, we initialize our `DrawTextView`
    custom class and then add this as a subview using the same dimensions of our parent
    view controller.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用`CGContextClearRect`函数清除视图，并设置文本的颜色，将`FillStroke`值传递给我们的`CGContextSetTextDrawingMode`方法，然后调用我们的`drawAtPoint:`方法来使用`UIFont`类指定的字体细节绘制文本。最后，我们初始化我们的`DrawTextView`自定义类，并将其作为子视图添加，尺寸与父视图控制器相同。
- en: Note
  id: totrans-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information on the `CoreGraphics` class, you can refer to the Apple
    Developer Documentation location at the following URL: [https://developer.apple.com/library/ios/#documentation/coregraphics/reference/coregraphics_framework/_index.html](https://developer.apple.com/library/ios/#documentation/coregraphics/reference/coregraphics_framework/_index.html)'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`CoreGraphics`类的更多信息，您可以参考以下网址的Apple开发者文档位置：[https://developer.apple.com/library/ios/#documentation/coregraphics/reference/coregraphics_framework/_index.html](https://developer.apple.com/library/ios/#documentation/coregraphics/reference/coregraphics_framework/_index.html)
- en: See also
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Drawing lines and curves* recipe
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*绘制线条和曲线*菜谱'
- en: Drawing lines and curves
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制线条和曲线
- en: In this recipe we will take a look at how easy it is to draw lines and curves
    to our view.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将看看如何轻松地将线条和曲线绘制到视图中。
- en: Getting ready
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Following on from our previous recipe, create a new **Single View Application,**
    and name it **LinesCurvesExample**. Create a custom view and name it `LinesCurvesView`.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的菜谱之后，创建一个新的**Single View Application**，并将其命名为**LinesCurvesExample**。创建一个自定义视图，并将其命名为`LinesCurvesView`。
- en: How to do it...
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To begin, follow these simple steps as outlined in the following order:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请按照以下顺序遵循以下简单步骤：
- en: Open the `LinesCurvesView.m` implementation file from the **Project** **Navigator**
    window.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Project** **Navigator**窗口打开`LinesCurvesView.m`实现文件。
- en: Modify the `drawRect:` method as shown in the following code snippet:.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下代码片段修改`drawRect:`方法：
- en: '[PRE27]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Our next step is to create the code functionality that will be responsible for
    adding our custom view as a subview to our existing view controller.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的下一步是创建代码功能，该功能将负责将我们的自定义视图作为子视图添加到现有的视图控制器中。
- en: Open the `ViewController.m` implementation file from the **Project** **Navigator**
    window.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Project** **Navigator**窗口打开`ViewController.m`实现文件。
- en: Add a reference to our `LinesCurvesView.h` interface file like we did previously.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加对之前所做的`LinesCurvesView.h`接口文件的引用。
- en: 'Next, modify the `viewDidLoad:` method as shown in the following code snippet:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，按照以下代码片段修改`viewDidLoad:`方法：
- en: '[PRE28]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Then, **Build** and **Run** the application by choosing **Product | Run** from
    the **Product** menu, or alternatively pressing *Command + R*.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过从**Product**菜单中选择**Product | Run**或按*Command + R*，**构建**和**运行**应用程序。
- en: When the compilation completes, the iOS Simulator will appear. The following
    screenshot displays our line and curve that we created within this recipe. I have
    rotated this image within the device.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译完成时，iOS模拟器将出现。以下截图显示了我们在本菜谱中创建的线条和曲线。我已经在设备内旋转了这张图片。
- en: '![How to do it...](img/3349OT_07_03.jpg)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/3349OT_07_03.jpg)'
- en: How it works...
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we created a new custom `linesCurvesView` class that inherits
    from the `UIView` class. We then modified the `drawRect:` method and proceeded
    to declare a variable `context` used to obtain the current graphics context using
    the `UIGraphicsGetCurrentContext` function just like we did in our preceding example.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们创建了一个新的自定义`linesCurvesView`类，它继承自`UIView`类。然后我们修改了`drawRect:`方法，并继续声明一个变量`context`，该变量用于使用`UIGraphicsGetCurrentContext`函数获取当前的图形上下文，就像我们在先前的示例中所做的那样。
- en: In our next step, we proceed to set the line width, color, and add the line
    using the `CGContextAddLineToPoint` method which accepts the starting and ending
    points of each line and call the `CGContextStrokePath` method to display the line
    to the view.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的下一步中，我们继续设置线宽、颜色，并使用`CGContextAddLineToPoint`方法添加线条，该方法接受每条线的起始点和终点，并调用`CGContextStrokePath`方法将线条显示到视图中。
- en: In order to add a curve to our view, we repeat the steps accordingly and then
    call the `CGContextMoveToPoint` method, which moves the current point, and we
    call the `CGContextAddCurveToPoint` method so that a curve will happen at the
    current point, which has been determined by the `CGContextMoveToPoint` method.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将曲线添加到我们的视图中，我们相应地重复这些步骤，然后调用`CGContextMoveToPoint`方法，该方法移动当前点，然后我们调用`CGContextAddCurveToPoint`方法，以便在由`CGContextMoveToPoint`方法确定的当前点处发生曲线。
- en: Next, we call `CGContextStrokePath` method to display the curve to the view.
    Finally, we initialize our `LinesCurvesView` custom class and then add this as
    a subview using the same dimensions of our parent view controller.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们调用`CGContextStrokePath`方法将曲线显示到视图中。最后，我们初始化我们的`LinesCurvesView`自定义类，然后使用与父视图控制器相同的尺寸将其添加为子视图。
- en: See also
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Drawing customize text* recipe
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*绘制自定义文本*菜谱'
- en: The *Adding and customizing views* recipe in [Chapter 2](ch02.html "Chapter 2. User
    Interfaces – Creating the UI"), *User Interfaces - Creating the UI*
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章。用户界面 – 创建用户界面")的*添加和自定义视图*菜谱中，*用户界面 - 创建用户界面*
- en: Drawing and filling shapes
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制和填充形状
- en: In this recipe we will take a look at how easy it is to draw and fill a series
    of shapes on to the screen.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将看看如何在屏幕上绘制和填充一系列形状是多么容易。
- en: Getting ready
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Following on from our previous recipe, create a new **Single View Application,**
    and name it **ShapesDrawExample**. Create a custom view and name it **ShapesView**.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的菜谱基础上，创建一个新的**单视图应用程序**，并将其命名为**ShapesDrawExample**。创建一个自定义视图，并将其命名为**ShapesView**。
- en: How to do it...
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To begin, follow these simple steps as outlined in the following order:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，按照以下顺序遵循以下简单步骤：
- en: Open the `ShapesView.m` implementation file from the **Project** **Navigator**
    window.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目导航器**窗口打开`ShapesView.m`实现文件。
- en: Modify the `drawRect:` method as shown in the following code snippet.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改以下代码片段中的`drawRect:`方法。
- en: '[PRE29]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Our next step is to create the code functionality that will be responsible for
    adding our custom view as a subview to our existing view controller.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们下一步是创建代码功能，该功能将负责将我们的自定义视图作为子视图添加到现有的视图控制器中。
- en: Open the `ViewController.m` implementation file from the **Project** **Navigator**
    window.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目导航器**窗口打开`ViewController.m`实现文件。
- en: Add a reference to our `ShapesView.h` interface file like we did previously.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加对之前所做的`ShapesView.h`接口文件的引用。
- en: 'Next, modify the `viewDidLoad:` method as shown in the following code snippet:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改以下代码片段中的`viewDidLoad:`方法：
- en: '[PRE30]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Then, **Build** and **Run** the application by choosing **Product | Run** from
    the **Product** menu, or alternatively pressing *Command + R*.
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过从**产品**菜单中选择**产品 | 运行**或按*Command + R*来**构建**和**运行**应用程序。
- en: When the compilation completes, the iOS Simulator will appear. The following
    screenshot displays each of our colored shapes filled. I have rotated this image
    within the device.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译完成时，iOS模拟器将出现。以下截图显示了我们的每个着色形状都已填充。我已经在设备内旋转了这张图片。
- en: '![How to do it...](img/3349OT_07_04.jpg)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/3349OT_07_04.jpg)'
- en: How it works...
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we created a new custom `ShapesView` class that inherits from
    the `UIView` class. We then modified the `drawRect:` method and declared a variable
    `context` used to obtain the current graphics context using the `UIGraphicsGetCurrentContext`
    function just like we did in our previous example. In our next step, we proceed
    to set the fill color of our circle by using the `CGContextSetFillColorWithColor`
    method and proceed to call the `CGContextAddEllipseInRect` method while passing
    the `CGRectMake` object. The `CGRectMake` method defines the bounding rectangle
    of the circle. Next, we call the `CGContextFillPath` method, which fills the object,
    and displays it to the screen.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们创建了一个新的自定义 `ShapesView` 类，它继承自 `UIView` 类。然后我们修改了 `drawRect:` 方法，并声明了一个变量
    `context`，用于使用 `UIGraphicsGetCurrentContext` 函数获取当前的图形上下文，就像我们在之前的例子中做的那样。在我们的下一步中，我们通过使用
    `CGContextSetFillColorWithColor` 方法设置圆的填充颜色，然后调用 `CGContextAddEllipseInRect` 方法，并传递
    `CGRectMake` 对象。`CGRectMake` 方法定义了圆的边界矩形。接下来，我们调用 `CGContextFillPath` 方法，该方法填充对象，并将其显示到屏幕上。
- en: Whenever you proceed to define a rectangle, you need to use the `CGContextAddRect`
    method and specify the dimensions using the `CGRectMake` method as we did when
    defining our circle. Next, we define our triangle by specifying the first point
    of the triangle using the `CGContextMoveToPoint` method and then proceed to call
    the `CGContextAddLineToPoint` method for each vertex that makes up the triangle,
    before specifying the color for our triangle and use the `CGContextFillPath` method
    to display the triangle object to the screen. Finally, we initialize our `LinesCurvesView`
    custom class and then add this as a subview using the same dimensions of our parent
    view controller.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你需要定义一个矩形时，你需要使用 `CGContextAddRect` 方法，并使用 `CGRectMake` 方法指定尺寸，就像我们在定义圆时做的那样。接下来，我们通过使用
    `CGContextMoveToPoint` 方法指定三角形的第一点来定义我们的三角形，然后对构成三角形的每个顶点调用 `CGContextAddLineToPoint`
    方法，在指定三角形的颜色后，使用 `CGContextFillPath` 方法将三角形对象显示到屏幕上。最后，我们初始化我们的 `LinesCurvesView`
    自定义类，然后使用与父视图控制器相同的尺寸将其添加为子视图。
- en: See also
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Drawing lines and curves* recipe
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*绘制线条和曲线* 菜谱'
- en: The *Adding and customizing views* recipe in [Chapter 2](ch02.html "Chapter 2. User
    Interfaces – Creating the UI"), *User Interfaces — Creating the UI*
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [第 2 章](ch02.html "第 2 章。用户界面 - 创建用户界面") 的 *添加和自定义视图* 菜谱中，*用户界面 - 创建用户界面*
- en: Applying color effects using Core Image
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Core Image 应用颜色效果
- en: In this recipe we will take a look at how we can use Core Image to apply color
    effects to an image.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将看看我们如何使用 Core Image 将颜色效果应用到图像上。
- en: Getting ready
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Following on from our previous recipe, create a new **Single View Application**,
    and name it **ColorEffectsExample**.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的菜谱之后，创建一个新的 **单视图应用程序**，并将其命名为 **ColorEffectsExample**。
- en: How to do it...
  id: totrans-305
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To begin, follow these simple steps as outlined in the following order:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请按照以下顺序遵循以下简单步骤：
- en: Add a reference to the `CoreImage.framework` to your project.
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `CoreImage.framework` 添加到你的项目中。
- en: Select the `ViewController.xib` files from the **Project** **Navigator** window.
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **项目导航器** 窗口中选择 `ViewController.xib` 文件。
- en: From the **Object** **Library** window, drag a `UIImageView` object onto the
    view.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **对象库** 窗口中，将一个 `UIImageView` 对象拖放到视图中。
- en: Resize the control accordingly so that it takes up the entire area of the screen,
    and set the image view **Mode** to **Scale to Fill** from within the **Attributes
    Inspector** tab.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据需要调整控件的大小，使其占据整个屏幕区域，并在 **属性检查器** 选项卡中将图像视图 **模式** 设置为 **缩放填充**。
- en: Next, create the outlet for this `UIImageView`, and name it `imageView`.
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为这个 `UIImageView` 创建出口，并将其命名为 `imageView`。
- en: Our next step is to create the code functionality that will be responsible for
    applying the various color effects to the image.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们下一步要创建的代码功能将负责将各种颜色效果应用到图像上。
- en: Open the `ViewController.h` interface file from the **Project** **Navigator**
    window.
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **项目导航器** 窗口中打开 `ViewController.h` 接口文件。
- en: 'Next, modify the interface file as shown by the highlighted code sections in
    the following code snippet:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改接口文件，如下面的代码片段中突出显示的代码所示：
- en: '[PRE31]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Open the `ViewController.m` implementation file from the **Project** **Navigator**
    window, and enter in the following highlighted code sections:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **项目导航器** 窗口中打开 `ViewController.m` 实现文件，并输入以下突出显示的代码部分：
- en: '[PRE32]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Next, modify the `viewDidLoad:` method as shown in the following code snippet:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改 `viewDidLoad:` 方法，如下面的代码片段所示：
- en: '[PRE33]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Next, create the `touchesBegan:` method as shown in the code snippet:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建如代码片段中所示的`touchesBegan:`方法：
- en: '[PRE34]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Next, create the `actionSheet:` method as shown in the code snippet:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建如代码片段中所示的`actionSheet:`方法：
- en: '[PRE35]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Then, **Build** and **Run** the application by choosing **Product | Run** from
    the **Product** menu, or alternatively pressing *Command + R*.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过从**产品**菜单中选择**产品 | 运行**或按*Command + R*来**构建**和**运行**应用程序。
- en: When the compilation completes, the iOS Simulator will appear. Tap the iOS device
    screen to see the various image options appear. The following screenshot shows
    the Sepia Tone effect applied to the image.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译完成后，iOS模拟器将出现。轻触iOS设备屏幕以查看各种图像选项。以下截图显示了应用于图像的棕褐色调效果。
- en: '![How to do it...](img/3349OT_07_05.jpg)'
  id: totrans-326
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/3349OT_07_05.jpg)'
- en: How it works...
  id: totrans-327
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we started by extending our class to include the class protocol
    for the `UIActionSheetDelegate` class so that we can access the protocol's respective
    methods. We then initialized our `imageView` control by rendering the default
    image to use as defined by our `#define` directive and created the `touchesBegan:`
    method, and initialize an `actionSheet` variable that sets up a list of options
    that can be chosen from, and then applied to the image. Next, we create the `actionSheet:clickedButtonAtIndex:`
    method that will be used to determine what button has been selected from the action
    sheet options panel, which is derived by the `buttonIndex` property. Next, we
    declare a `CIContext` variable context. This variable will be used for rendering
    the `cImage` image object to the view.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们首先通过扩展我们的类以包括`UIActionSheetDelegate`类的类协议，以便我们可以访问协议的相关方法。然后，我们通过渲染由我们的`#define`指令定义的默认图像来初始化我们的`imageView`控件，并创建了`touchesBegan:`方法，初始化了一个设置可选列表的`actionSheet`变量，并将这些选项应用于图像。接下来，我们创建了`actionSheet:clickedButtonAtIndex:`方法，该方法将用于确定从动作表选项面板中选择了哪个按钮，该按钮是通过`buttonIndex`属性派生的。接下来，我们声明了一个`CIContext`变量`context`。这个变量将用于将`cImage`图像对象渲染到视图中。
- en: We then declared an `inputImage` variable object of type `CIImage`, which contains
    a pointer to the image within our `imageView` and declared an `CIImageoutputImage`
    variable that will be used to apply the image filter changes, and then output
    this modified `imageView` control. We then declare a `CIFilter` variable called
    `filter`, which will contain the type of filter effect to use.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后声明了一个类型为`CIImage`的`inputImage`变量对象，它包含指向`imageView`中图像的指针，并声明了一个`CIImageoutputImage`变量，该变量将用于应用图像过滤器更改，然后输出修改后的`imageView`控件。我们随后声明了一个名为`filter`的`CIFilter`变量，它将包含要使用的过滤器效果类型。
- en: Note
  id: totrans-330
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information on the `CoreImage` `filters`, please refer to the following:
    [https://developer.apple.com/library/ios/#documentation/GraphicsImaging/Reference/CoreImageFilterReference/Reference/reference.html](https://developer.apple.com/library/ios/#documentation/GraphicsImaging/Reference/CoreImageFilterReference/Reference/reference.html)'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`CoreImage` `过滤器`的更多信息，请参阅以下链接：[https://developer.apple.com/library/ios/#documentation/GraphicsImaging/Reference/CoreImageFilterReference/Reference/reference.html](https://developer.apple.com/library/ios/#documentation/GraphicsImaging/Reference/CoreImageFilterReference/Reference/reference.html)
- en: See also
  id: totrans-332
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Applying transition effects* recipe
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*应用过渡效果*配方'
- en: Applying transition effects
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用过渡效果
- en: In this recipe we will take a look at how we can apply transition effects to
    create a water ripple effect to an image.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将探讨如何应用过渡效果以创建图像的水波纹效果。
- en: Getting ready
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Following on from our previous recipe, create a new **Single View Application**,
    and name it **TransitionsExample**.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的配方基础上，创建一个新的**单视图应用程序**，并将其命名为**TransitionsExample**。
- en: How to do it...
  id: totrans-338
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To begin, follow these simple steps as outlined in the following order:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，按照以下顺序执行以下简单步骤：
- en: Add a reference to the `QuartzCore.framework` to your project.
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`QuartzCore.framework`引用添加到您的项目中。
- en: Select the `ViewController.xib` files from the **Project** **Navigator** window.
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目导航器**窗口中选择`ViewController.xib`文件。
- en: From the **Object** **Library** window, drag a `UIImageView` object onto the
    view.
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**对象库**窗口中，将一个`UIImageView`对象拖放到视图中。
- en: Resize the control accordingly so that it takes up the entire area of the screen,
    and set the image view **Mode** to **Aspect Fill** from within the **Attributes
    Inspector** tab.
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据需要调整控件的大小，使其占据整个屏幕区域，并在**属性检查器**选项卡中将图像视图**模式**设置为**填充**。
- en: Next, create the outlet for this `UIImageView`, and name it `imageView`.
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为这个`UIImageView`创建一个出口，并将其命名为`imageView`。
- en: Our next step is to create the code functionality that will be responsible for
    applying the transition effects to the image.
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们下一步要创建的代码功能将负责将过渡效果应用到图像上。
- en: Open the `ViewController.m` implementation file from the **Project** **Navigator**
    window.
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目导航器**窗口打开`ViewController.m`实现文件。
- en: 'Include the `QuartzCore` class reference as highlighted in the code snippet:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含代码片段中突出显示的`QuartzCore`类引用：
- en: '[PRE36]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Next, modify the `viewDidLoad:` method as shown in the following code snippet:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改如以下代码片段所示的`viewDidLoad:`方法：
- en: '[PRE37]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Next, create the `touchesBegan:` method as shown in the code snippet:'
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建如代码片段所示的`touchesBegan:`方法：
- en: '[PRE38]'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Then, **Build** and **Run** the application by choosing **Product | Run** from
    the **Product** menu, or alternatively pressing *Command + R*.
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过选择**产品**菜单中的**产品 | 运行**或按*Command + R*组合键来**构建**和**运行**应用程序。
- en: When the compilation completes, the iOS Simulator will appear. Tap the iOS device
    screen to see the water rippling effect applied to the image as can be seen in
    the following image, which has been rotated within the device.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译完成后，iOS模拟器将出现。轻触iOS设备屏幕，可以看到应用在图像上的水波纹效果，如图所示，图像已在设备内部旋转。
- en: '![How to do it...](img/3349OT_07_06.jpg)'
  id: totrans-355
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/3349OT_07_06.jpg)'
- en: How it works...
  id: totrans-356
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we learned how easy it was to apply transition effects to an
    image contained within a view. We first start by declaring a variable called animation
    that will be responsible for handling the transition animations for our `UIView`
    layer. In the next step, we specify the duration of our ripple effect that will
    be used to define how long, in seconds, a single iteration of an animation will
    take to display.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们学习了如何轻松地将过渡效果应用到视图中的图像。我们首先声明一个名为animation的变量，该变量将负责处理`UIView`层的过渡动画。在下一步中，我们指定了涟漪效果的持续时间，这将用来定义动画的单次迭代显示需要多少秒。
- en: Next, we create the `touchesBegan:` method, which gets called when the user
    places their finger on the screen. Next, we specify the type of animation that
    we want to use is the `rippleEffect` transition effect and then apply the animation
    effect to our view.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建`touchesBegan:`方法，当用户将手指放在屏幕上时会被调用。然后，我们指定我们想要使用的动画类型是`rippleEffect`过渡效果，并将动画效果应用到我们的视图中。
- en: Note
  id: totrans-359
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information on the `QuartzCore` framework, refer to the following
    URL: [https://developer.apple.com/library/ios/#documentation/GraphicsImaging/Reference/QuartzCoreRefCollection/_index.html](https://developer.apple.com/library/ios/#documentation/GraphicsImaging/Reference/QuartzCoreRefCollection/_index.html)'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`QuartzCore`框架的更多信息，请参考以下URL：[https://developer.apple.com/library/ios/#documentation/GraphicsImaging/Reference/QuartzCoreRefCollection/_index.html](https://developer.apple.com/library/ios/#documentation/GraphicsImaging/Reference/QuartzCoreRefCollection/_index.html)
- en: See also
  id: totrans-361
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Applying color effects using Core Image* recipe
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Core Image应用颜色效果*配方'
