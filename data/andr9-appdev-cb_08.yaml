- en: Alerts and Notifications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 警报和通知
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Lights, Action, and Sound - getting the user's attention!
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 光、动作和声音——吸引用户的注意力！
- en: Creating a Toast with a custom layout
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自定义布局创建Toast
- en: Displaying a message box with AlertDialog
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用AlertDialog显示消息框
- en: Displaying a progress dialog
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示进度对话框
- en: Lights, Action, and Sound Redux using Notifications
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用通知的“光、动作和声音Redux”
- en: Creating a Media Player Notification
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建媒体播放器通知
- en: Making a Flashlight with a Heads-Up Notification
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用抬头通知制作手电筒
- en: Notifications with Direct Reply
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许直接回复的通知
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Android provides many ways to notify your user, including both visual and non-visual
    methods. Keep in mind, notifications distract your user, so it's a good idea to
    be very judicious when using any notification. Users like to be in control of
    their device (it is theirs, after all), so give them the option to enable and
    disable notifications as they desire. Otherwise, your user might get annoyed and
    uninstall your app altogether.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Android提供了许多通知用户的方法，包括视觉和非视觉方法。请记住，通知会分散用户的注意力，因此在使用任何通知时都应非常谨慎。用户喜欢控制自己的设备（毕竟，这是他们的），因此请给他们提供按需启用和禁用通知的选项。否则，您的用户可能会感到烦恼，甚至完全卸载您的应用程序。
- en: 'We''ll start by reviewing the following non-UI-based notification options:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先回顾以下基于非UI的通知选项：
- en: Flash LED
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 闪烁LED
- en: Vibrate phone
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 振动手机
- en: Play ringtone
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放铃声
- en: 'Then, we''ll move on to visual notifications, including the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将转向视觉通知，包括以下内容：
- en: Toasts
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Toasts
- en: AlertDialog
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AlertDialog
- en: ProgressDialog
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进度对话框
- en: Status Bar Notifications
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态栏通知
- en: 'The recipes that follow will show you how to implement each of these notifications
    in your own applications. It''s worth reading the following link to understand
    best practices when using notifications:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的食谱将向您展示如何在您的应用程序中实现这些通知中的每一个。阅读以下链接了解使用通知的最佳实践是值得的：
- en: Refer to Android Notification Design Guidelines at [http://developer.android.com/design/patterns/notifications.html](http://developer.android.com/design/patterns/notifications.html).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[Android通知设计指南](http://developer.android.com/design/patterns/notifications.html)。
- en: Lights, Action, and Sound – getting the user's attention!
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 光、动作和声音——吸引用户的注意力！
- en: Most of the recipes in this chapter use the `Notification` object to alert your
    users, so this recipe will show an alternative approach for when you don't actually
    need a notification.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的大多数食谱都使用`Notification`对象来提醒用户，因此这个食谱将展示在您实际上不需要通知时的替代方法。
- en: 'As the recipe title implies, we''re going to use lights, action, and sound:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如食谱标题所暗示的，我们将使用灯光、动作和声音：
- en: '**Lights**: Normally, you''d use the LED device, but that is only available
    through the `Notification` object, which we''ll demonstrate later in the chapter.
    Instead, we''ll take this opportunity to use `setTorchMode()` (added in API 23-Android
    6.0), to use the camera flash as a flashlight. (Note: as you''ll see in the code,
    this feature will only work on an Android 6.0 device with a camera flash.)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灯光**：通常，您会使用LED设备，但这只能通过`Notification`对象来实现，我们将在本章后面演示。相反，我们将利用这个机会使用`setTorchMode()`（自API
    23-Android 6.0添加），将相机闪光灯用作手电筒。（注意：正如您将在代码中看到的，此功能仅在具有闪光灯的Android 6.0设备上工作。）'
- en: '**Action**: We''ll vibrate the phone.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动作**：我们将使手机振动。'
- en: '**Sound**: We''ll use the `RingtoneManager` to play the default notification
    sound.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**声音**：我们将使用`RingtoneManager`播放默认的通知声音。'
- en: As you'll see, the code for each of these is quite simple.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您将看到的，这些代码相当简单。
- en: As demonstrated in the following *Lights, Action, and Sound Redux using Notifications*
    recipe, all three options, LED, vibrate, and sounds, are available through the
    `Notification` object. The `Notification` object would certainly be the most appropriate
    method to provide alerts and reminders when the user is not actively engaged in
    your app. But for those times when you want to provide feedback while they are
    using your app, these options are available. The vibrate option is a good example;
    if you want to provide haptic feedback to a button press (common with keyboard
    apps), call the vibrate method directly.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下*使用通知的“光、动作和声音Redux”食谱*所示，所有三个选项，LED、振动和声音，都可通过`Notification`对象获得。当用户没有积极使用您的应用程序时，`Notification`对象无疑是提供警报和提醒的最合适方法。但有时您想在用户使用应用程序时提供反馈，这些选项是可用的。振动选项是一个很好的例子；如果您想为按钮按下提供触觉反馈（常见于键盘应用程序），请直接调用振动方法。
- en: Getting ready
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `LightsActionSound`. When
    prompted for the API level, we need API 21 or above to compile the project. Select
    Empty Activity when prompted for the Activity Type.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建一个新的项目，命名为 `LightsActionSound`。当提示 API 级别时，我们需要 API 21 或更高版本来编译项目。当被提示活动类型时，选择空活动。
- en: How to do it...
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'We''ll use three buttons to initiate each action, so start by opening `activity_main.xml`
    and perform the following steps:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用三个按钮来启动每个动作，所以首先打开 `activity_main.xml` 并执行以下步骤：
- en: 'Replace the existing layout XML with the following layout:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下布局替换现有的布局 XML：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the following permission to the Android Manifest:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 AndroidManifest.xml 中添加以下权限：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Open `ActivityMain.java` and add the following global variables:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `ActivityMain.java` 并添加以下全局变量：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add the following method to get the Camera ID:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法以获取摄像头 ID：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add the following code to the `onCreate()` method:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `onCreate()` 方法中添加以下代码：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, add the code to handle each of the button clicks:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加代码来处理每个按钮点击：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You're ready to run the application on a physical device. The code presented
    here will need Android 6.0 (or higher) to use the flashlight option.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你已经准备好在物理设备上运行应用程序了。这里展示的代码需要 Android 6.0（或更高版本）才能使用手电筒选项。
- en: How it works...
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'As you can see from the previous paragraphs, most of the code is related to
    finding and opening the camera to use the flash feature. `setTorchMode()` was
    introduced in API 23, which is why we have the API version check:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如前几段所示，大部分代码都与查找和打开摄像头以使用闪光灯功能相关。`setTorchMode()` 是在 API 23 中引入的，这就是为什么我们需要进行
    API 版本检查的原因：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This app demonstrates using the new `camera2` libraries, which were introduced
    in Lollipop (API 21). Both the `vibrate` and `ringtone` methods have been available
    since API 1.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序演示了使用在 Lollipop（API 21）中引入的新 `camera2` 库。`vibrate` 和 `ringtone` 方法自 API
    1 以来一直可用。
- en: The `getCameraId()` method is where we check for the camera. We want an outward-facing
    camera with a flash. If one is found, the ID is returned; otherwise, it is null.
    If the camera id is null, we disable the button.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`getCameraId()` 方法是我们检查摄像头的地方。我们想要一个带有闪光灯的外置摄像头。如果找到了，就返回其 ID；否则，返回 null。如果摄像头
    ID 为 null，我们将禁用按钮。'
- en: 'To play the sound, we use the `Ringtone` object from the `RingtoneManager`.
    Besides being relatively easy to implement, another benefit to this method is
    that we can use the default notification sound, which we get with this code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要播放声音，我们使用 `RingtoneManager` 中的 `Ringtone` 对象。除了相对容易实现之外，这种方法的好处是我们可以使用默认的通知声音，我们通过以下代码获取它：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This way, if the user changes their preferred notification sound, we use it
    automatically.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，如果用户更改了他们首选的通知声音，我们将自动使用它。
- en: 'Last is the call to vibrate the phone. This was the simplest code to use, but
    it does require permission, which we added to the Manifest:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最后是振动手机的调用。这是最简单的代码，但它确实需要权限，我们已经将其添加到 Manifest 中：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: There's more...
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In a production-level application, you wouldn't want to simply disable the button
    if you didn't have to. In this case, there are other means to use the camera flash
    as a flashlight. For additional examples on using the camera, see [Chapter 12](1949a5cc-7bc6-4348-8ae1-896b238c3090.xhtml), *Multimedia*,
    where we'll see `getCameraId()` used again.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个生产级别的应用程序中，如果你不需要禁用按钮，你不会想要简单地禁用按钮。在这种情况下，有其他方法可以使用摄像头闪光灯作为手电筒。有关使用摄像头的其他示例，请参阅
    [第 12 章](1949a5cc-7bc6-4348-8ae1-896b238c3090.xhtml)，*多媒体*，我们将再次看到 `getCameraId()`
    的使用。
- en: See also
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: Refer to the *Lights, Action, and Sound Redux using Notifications* recipe later
    in this chapter to see the equivalent features using the `Notification` object
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考本章后面的 *使用通知的“灯光、动作和声音 Redux”* 菜单，以查看使用 `Notification` 对象的等效功能。
- en: Refer to [Chapter 12](1949a5cc-7bc6-4348-8ae1-896b238c3090.xhtml), *Multimedia*,
    for examples using the new camera API and other sound options
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考第 12 章 [多媒体](1949a5cc-7bc6-4348-8ae1-896b238c3090.xhtml)，以了解使用新摄像头 API 和其他声音选项的示例。
- en: Creating a Toast with a custom layout
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个带有自定义布局的 Toast
- en: We've used Toasts quite a bit already in previous chapters as they provide a
    quick and easy way to display information, both for user notification and for
    ourselves when debugging.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在之前的章节中多次使用 Toast，因为它们提供了一种快速且简单的方式来显示信息，无论是用于用户通知还是用于调试时的自我提醒。
- en: The previous examples have all used the simple one-line syntax, but Toasts aren't
    limited to this. Toasts, like most components in Android, can be customized, as
    we'll demonstrate in this recipe.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的例子都使用了简单的单行语法，但Toast并不局限于这一点。Toast，就像Android中的大多数组件一样，可以进行自定义，正如我们将在本食谱中展示的那样。
- en: 'Android Studio offers a shortcut for making a simple Toast statement. As you
    start to type the Toast command, you''ll see the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio提供了一个快捷键来创建简单的Toast语句。当你开始输入Toast命令时，你会看到以下内容：
- en: '![](img/44c7d353-5999-4177-b8c5-b866050de1ba.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/44c7d353-5999-4177-b8c5-b866050de1ba.png)'
- en: 'Press *Enter* to auto-complete. Then, press *Ctrl* + spacebar and you''ll see
    the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 按下 *Enter* 键以自动完成。然后，按下 *Ctrl* + 空格键，你将看到以下内容：
- en: '![](img/c01f19dc-45f8-49b0-9d3e-88fec8c5996d.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c01f19dc-45f8-49b0-9d3e-88fec8c5996d.png)'
- en: 'When you press Enter again, it will auto-complete with the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当你再次按下Enter键时，它会自动完成以下内容：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In this recipe, we''ll use the Toast Builder to change the default layout,
    and gravity to create a custom Toast, as shown in the following screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将使用Toast构建器来更改默认布局，并使用重力创建一个自定义Toast，如图下截图所示：
- en: '![](img/bb3c59dd-5a32-45f0-a14f-ef9f48f8e85b.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bb3c59dd-5a32-45f0-a14f-ef9f48f8e85b.png)'
- en: Getting ready
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `CustomToast`. Use the default
    Phone & Tablet options and select Empty Activity when prompted for the Activity
    Type.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新的项目，并将其命名为`CustomToast`。使用默认的Phone & Tablet选项，并在提示活动类型时选择Empty
    Activity。
- en: How to do it...
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''re going to change the shape of the Toast to a square and create a custom
    layout to display an image and text message. Start by opening `activity_main.xml`
    and follow these steps:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将改变Toast的形状为正方形，并创建一个自定义布局来显示图像和文本消息。首先打开`activity_main.xml`并按照以下步骤操作：
- en: 'Replace the existing `&lt;TextView&gt;` element with a `&lt;Button&gt;` as
    follows:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将现有的`&lt;TextView&gt;`元素替换为以下内容的`&lt;Button&gt;`：
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Create a new drawable resource file in the `res/drawable` folder named `border_square.xml` using
    the following code:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`res/drawable`文件夹中创建一个新的可绘制资源文件，命名为`border_square.xml`，使用以下代码：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Create a new layout resource file in the `res/layout` folder named `toast_custom.xml`
    with the following code:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`res/layout`文件夹中创建一个新的布局资源文件，命名为`toast_custom.xml`，使用以下代码：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, open `ActivityMain.java` and add the following method:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`ActivityMain.java`并添加以下方法：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Run the program on a device or emulator.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备或模拟器上运行程序。
- en: How it works...
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This custom Toast changes the default gravity and shape, and adds an image just
    to show that "it can be done."
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这个自定义Toast改变了默认的重力和形状，并添加了一个图像，仅为了展示“它可以做到”。
- en: The first step is to create a new Toast layout, which we do by inflating our
    `custom_toast` layout. Once we have the new layout, we need to get the `TextView`
    so we can set our message, which we do with the standard `setText()` method. With
    this done, we create a Toast object and set the individual properties. We set
    the Toast gravity with the `setGravity()` method. The gravity determines where
    on the screen our Toast will display. We specify our custom layout with the `setView()`
    method call. And just like in the single-line variation, we display the Toast
    with the `show()` method.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是创建一个新的Toast布局，我们通过填充我们的`custom_toast`布局来实现。一旦我们有了新的布局，我们需要获取`TextView`以便我们可以设置我们的消息，我们使用标准的`setText()`方法来完成。完成此操作后，我们创建一个Toast对象并设置单个属性。我们使用`setGravity()`方法设置Toast的重力。重力决定了Toast将在屏幕上的哪个位置显示。我们使用`setView()`方法调用指定我们的自定义布局。就像在单行变体中一样，我们使用`show()`方法显示Toast。
- en: See also
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: For a Kotlin version, see the *Creating a Toast in Kotlin* recipe in [Chapter
    16](939d2c0b-84d8-4093-a827-641186032dee.xhtml), *Getting Started with Kotlin*
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Kotlin版本，请参阅[第16章](939d2c0b-84d8-4093-a827-641186032dee.xhtml)中的*Creating
    a Toast in Kotlin*食谱，*Kotlin入门*。
- en: Displaying a message box with AlertDialog
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示带有AlertDialog的消息框
- en: 'In [Chapter 4](271b832c-648f-4a10-967e-aac99272e9a9.xhtml), *Menus*, we created
    a theme to make an Activity look like a dialog. In this recipe, we''ll demonstrate
    how to create a dialog using the `AlertDialog` class. `AlertDialog` offers a Title,
    up to three buttons, and a list or custom layout area, as shown in the following
    example:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](271b832c-648f-4a10-967e-aac99272e9a9.xhtml)的*Menus*中，我们创建了一个主题来使Activity看起来像对话框。在本食谱中，我们将演示如何使用`AlertDialog`类创建对话框。`AlertDialog`提供了一个标题，最多三个按钮，以及一个列表或自定义布局区域，如图下示例所示：
- en: '![](img/8b2eb26c-250a-4baf-830a-12322aad6f53.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8b2eb26c-250a-4baf-830a-12322aad6f53.png)'
- en: The button arrangement can vary depending on the OS version.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮排列可能因操作系统版本而异。
- en: Getting ready
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `AlertDialog`. Use the default
    Phone & Tablet options and select the Empty Activity option when prompted for
    the Activity Type.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新的项目，并将其命名为`AlertDialog`。使用默认的Phone & Tablet选项，并在提示活动类型时选择Empty
    Activity选项。
- en: How to do it...
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To demonstrate, we''ll create a Confirm Delete dialog to prompt the user for
    confirmation after pressing the Delete button. Start by opening the `main_activity.xml`
    layout file and follow these steps:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，我们将创建一个确认删除对话框，在按下删除按钮后提示用户确认。首先打开`main_activity.xml`布局文件，并按照以下步骤操作：
- en: 'Add the following `&lt;Button&gt;`:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下`&lt;Button&gt;`：
- en: '[PRE14]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add the `confirmDelete()` method to `ActivityMain.java`; this is called by
    the button:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`confirmDelete()`方法添加到`ActivityMain.java`中；这个方法是由按钮调用的：
- en: '[PRE15]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Run the application on a device or emulator.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备或模拟器上运行应用程序。
- en: How it works...
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This dialog is meant to serve as a simple confirmation dialog, such as confirming
    a delete action. Basically, just create an `AlertDialog.Builder` object and set
    the properties as needed. We use a Toast message to indicate the user selection.
    We don't even have to close the dialog; it's taken care of by the base class.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 此对话框旨在作为简单的确认对话框，例如确认删除操作。基本上，只需创建一个`AlertDialog.Builder`对象并按需设置属性。我们使用Toast消息来指示用户选择。我们甚至不需要关闭对话框；这由基类处理。
- en: There's more...
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多...
- en: 'As shown in the recipe introduction screenshot, the `AlertDialog` also has
    a third button, called the Neutral button, which can be set using the following
    method:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如食谱介绍截图所示，`AlertDialog`还有一个第三个按钮，称为中性按钮，可以使用以下方法设置：
- en: '[PRE16]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Add an icon
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加图标
- en: 'To add an icon to the dialog, use the `setIcon()` method. The following is
    an example:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要向对话框添加图标，请使用`setIcon()`方法。以下是一个示例：
- en: '[PRE17]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Introduced in Android 4.3, the mipmap folder is a drawable folder for storing
    bitmaps that should not be modified/converted during APK optimization. This is
    the recommended location for storing app icons so the launcher can have the best
    available image when displaying the app icon.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Android 4.3中引入的mipmap文件夹是一个用于存储不应在APK优化期间修改/转换的位图的drawable文件夹。这是存储应用图标的首选位置，以便启动器在显示应用图标时可以显示最佳图像。
- en: Using a list
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用列表
- en: 'We can also create a list of items to select from with various list setting
    methods, including the following:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用各种列表设置方法创建一个可供选择的项列表，包括以下方法：
- en: '[PRE18]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As you can see, there are also methods for single-choice (using a radio button)
    and multi-choice lists (using a checkbox).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，还有用于单选（使用单选按钮）和多选列表（使用复选框）的方法。
- en: You can't use both the Message and the Lists, as `setMessage()` will take priority.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您不能同时使用消息和列表，因为`setMessage()`将具有优先级。
- en: Custom layout
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义布局
- en: 'Finally, we can also create a custom layout, and set it using the following:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还可以创建一个自定义布局，并使用以下方法设置它：
- en: '[PRE19]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If you use a custom layout and replace the standard buttons, you are also responsible
    for closing the dialog. Use `hide()` if you plan to reuse the dialog and `dismiss()`
    when finished to release the resources.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用自定义布局并替换标准按钮，您也负责关闭对话框。如果您计划重用对话框，请使用`hide()`；完成时使用`dismiss()`来释放资源。
- en: Displaying a progress dialog
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示进度对话框
- en: '`ProgressDialog` has been available since API 1 and is widely used. As we''ll
    demonstrate in this recipe, it''s simple to use, but keep this message in mind
    (posted on the Android Dialog Guidelines site at [http://developer.android.com/guide/topics/ui/dialogs.html](http://developer.android.com/guide/topics/ui/dialogs.html)):'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`ProgressDialog`自API 1以来一直可用，并且被广泛使用。正如我们将在本食谱中展示的那样，它很简单，但请记住这条信息（发布在Android对话框指南网站上[http://developer.android.com/guide/topics/ui/dialogs.html](http://developer.android.com/guide/topics/ui/dialogs.html)）：'
- en: Android includes another dialog class called ProgressDialog that shows a dialog
    with a progress bar. However, if you need to indicate loading or indeterminate
    progress, you should instead follow the design guidelines for Progress & Activity
    and use a ProgressBar in your layout.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Android还包括另一个名为`ProgressDialog`的对话框类，它显示带有进度条的对话框。然而，如果您需要指示加载或不确定的进度，您应遵循进度和活动的设计指南，并在布局中使用进度条。
- en: This message doesn't mean `ProgressDialog` is deprecated or is bad code. It's
    suggesting that the use of `ProgressDialog` should be avoided since the user cannot
    interact with your app while the dialog is displayed. If possible, use a layout
    that includes a progress bar (so other views are still usable), instead of stopping
    everything with `ProgressDialog`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这条消息并不意味着 `ProgressDialog` 已被弃用或代码不好。它只是建议应该避免使用 `ProgressDialog`，因为用户在对话框显示时无法与你的应用交互。如果可能的话，使用包含进度条的布局（这样其他视图仍然可用），而不是使用
    `ProgressDialog` 停止一切。
- en: The Google Play app provides a good example. When adding items to download,
    Google Play shows a progress bar, but it's not a dialog so the user can continue
    interacting with the app, even adding more items to download. If possible, use
    that approach instead.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Google Play 应用提供了一个很好的例子。当添加下载项目时，Google Play 会显示一个进度条，但它不是一个对话框，因此用户可以继续与应用交互，甚至可以添加更多要下载的项目。如果可能的话，请使用那种方法。
- en: 'There are times when you may not have that luxury; for example, after placing
    an order, the user is going to expect an order confirmation. (Even with Google
    Play, you still see a confirmation dialog when actually purchasing apps.) So,
    remember to avoid the progress dialog if possible. But, for those times when something
    must complete before continuing, this recipe provides an example of how to use
    `ProgressDialog`. The following screenshot shows `ProgressDialog` from the recipe:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候你可能没有这样的奢侈；例如，在下单后，用户会期待订单确认。（即使使用 Google Play，在购买应用时仍然会看到确认对话框。）所以，如果可能的话，请避免使用进度对话框。但是，对于那些必须在继续之前完成的事情，这个配方提供了一个如何使用
    `ProgressDialog` 的示例。以下截图显示了配方中的 `ProgressDialog`：
- en: '![](img/640a6b6f-9297-470f-8b50-d305d54b35c4.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/640a6b6f-9297-470f-8b50-d305d54b35c4.png)'
- en: Getting ready
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `ProgressDialog`. Use the
    default Phone & Tablet options and select Empty Activity when prompted for the
    Activity Type.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建一个新的项目，命名为 `ProgressDialog`。使用默认的“手机和平板”选项，并在提示活动类型时选择“空活动”。
- en: How to do it...
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Since this is just a demonstration of using the ProgressDialog, we will create
    a button to show the dialog. To simulate waiting for a server response, we will
    use a delayed message to dismiss the dialog. To start, open `activity_main.xml`
    and follow these steps:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于这只是一个使用 `ProgressDialog` 的演示，我们将创建一个按钮来显示对话框。为了模拟等待服务器响应，我们将使用延迟消息来关闭对话框。首先，打开
    `activity_main.xml` 并按照以下步骤操作：
- en: 'Replace `&lt;TextView&gt;` with the following `&lt;Button&gt;`:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `<TextView>` 替换为以下 `<Button>`：
- en: '[PRE20]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Open `MainActivity.java` and add the following two global variables:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `MainActivity.java` 并添加以下两个全局变量：
- en: '[PRE21]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add the `showDialog()` method referenced by the button click:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加由按钮点击引用的 `showDialog()` 方法：
- en: '[PRE22]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Run the program on a device or emulator. When you press the Show Dialog button,
    you'll see the dialog shown in the screen from the Introduction.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备或模拟器上运行程序。当你按下“显示对话框”按钮时，你将看到屏幕上从介绍部分显示的对话框。
- en: How it works...
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'We use the `ProgressDialog` class to display our dialog. The options should
    be self-explanatory, but this setting is worth nothing:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `ProgressDialog` 类来显示对话框。选项应该是自解释的，但这个设置值得注意：
- en: '[PRE23]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Normally, a dialog can be canceled using the back key, but when this is set
    to false, the user is stuck on the dialog until it is hidden/dismissed from the
    code. To simulate a delayed response from a server, we use a `Handler` and the
    `postDelayed()` method. After the specified milliseconds (30,000 in this case,
    to represent 30 seconds), the `run()` method will be called, which will dismiss
    our dialog.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，可以通过返回键取消对话框，但将此设置为 false 时，用户将卡在对话框上，直到它从代码中隐藏/消失。为了模拟服务器响应的延迟，我们使用 `Handler`
    和 `postDelayed()` 方法。在指定的毫秒数（本例中为 30,000 毫秒，代表 30 秒）后，将调用 `run()` 方法，这将关闭我们的对话框。
- en: There's more...
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We used the default `ProgressDialog` settings for this recipe, which creates
    an indeterminate dialog indicator, for example, the continuously spinning circle.
    If you can measure the task at hand, such as loading files, you can use a determinate
    style instead.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为这个配方使用了默认的 `ProgressDialog` 设置，它创建了一个不确定的对话框指示器，例如，持续旋转的圆圈。如果你可以测量手头的任务，例如加载文件，你可以使用确定样式。
- en: 'Add and run this line of code:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 添加并运行以下代码行：
- en: '[PRE24]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'With `STYLE_HORIZONTAL`, you''ll see the percentage dialog shown here:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `STYLE_HORIZONTAL`，你将看到这里显示的百分比对话框：
- en: '![](img/aa026cdc-5be9-4900-ba94-2fb059044c13.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/aa026cdc-5be9-4900-ba94-2fb059044c13.png)'
- en: Lights, Action, and Sound Redux using Notifications
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用通知重置灯光、动作和声音
- en: You're probably already familiar with Notifications as they've become a prominent
    feature (even making their way to the desktop environment) and for good reason.
    They provide an excellent way to raise information for your user. They provide
    the least intrusive option of all the alerts and notification options available.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经熟悉通知了，因为它们已经成为一个突出的功能（甚至进入桌面环境），而且有很好的理由。它们为用户提供了一种极好的方式来传达信息。它们提供了所有可用警报和通知选项中最不干扰的选项。
- en: 'As we saw in the first recipe, *Lights, Action, and Sound - getting the user''s
    attention!* Lights, vibration, and sound are all very useful means of getting
    the user''s attention. That''s why the `Notification` object includes support
    for all three options, as we''ll demonstrate in this recipe. Given this ability
    to get your user''s attention, care should still be taken not to abuse your user.
    Otherwise, they''ll likely uninstall your app. It''s generally a good idea to
    give your users the option to enable/disable notifications and even how to present
    the notification: with sound or without, and so on.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在第一个菜谱中看到的，*灯光、动作和声音 - 引起用户的注意！* 灯光、振动和声音都是吸引用户注意的非常有用的手段。这就是为什么 `Notification`
    对象包含了所有三种选项的支持，正如我们将在本菜谱中展示的那样。鉴于这种吸引用户注意的能力，我们仍然应该注意不要滥用用户。否则，他们可能会卸载你的应用。通常，给用户选择启用/禁用通知以及如何显示通知（带声音或不带声音等）的选项是一个好主意。
- en: Getting ready
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `LightsActionSoundRedux`.
    Use the default Phone & Tablet options and select Empty Activity when prompted
    for the Activity Type.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建一个新的项目，并将其命名为 `LightsActionSoundRedux`。使用默认的 Phone & Tablet
    选项，并在提示活动类型时选择 Empty Activity。
- en: How to do it...
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'We''ll need permission to use the vibrate option, so start by opening the Android
    Manifest file, and follow the remaining steps:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要权限来使用振动选项，所以首先打开 Android Manifest 文件，然后按照以下剩余步骤操作：
- en: 'Add the following permission:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下权限：
- en: '[PRE25]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Open `activity_main.xml` and replace the existing `&lt;TextView&gt;` with the
    following button:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `activity_main.xml` 并将现有的 `<TextView>` 替换为以下按钮：
- en: '[PRE26]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, open `MainActivity.java` and add the following declaration to the class:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开 `MainActivity.java` 并将以下声明添加到类中：
- en: '[PRE27]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Next, add the method to handle the button click:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加处理按钮点击的方法：
- en: '[PRE28]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Run the program on a physical device to experience all the notification effects.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在物理设备上运行程序以体验所有通知效果。
- en: How it works...
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We combined all three actions into a single notification, simply because we
    could. You don''t have to use all three extra notification options or even any.
    Only the following are required:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将所有三种动作组合成一个单一的通知，仅仅是因为我们可以这样做。你不必使用所有三个额外的通知选项，甚至不需要任何。以下是需要的内容：
- en: '[PRE29]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: If you don't set both the icon and text, the notification will not show.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有设置图标和文本，通知将不会显示。
- en: We used `NotificationCompat` to build our notification. This comes from the
    support library and makes it easier to be backward-compatible with older OS versions.
    If we request a notification feature that is not available on the user's version
    of OS, it will simply be ignored.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了 `NotificationCompat` 来构建我们的通知。这来自支持库，使得与较旧 OS 版本向后兼容变得更容易。如果我们请求一个用户 OS
    版本上不可用的通知功能，它将被简单地忽略。
- en: 'These three lines of code produce our extra notification options:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这三条代码行生成了我们的额外通知选项：
- en: '[PRE30]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: It's worth noting that we use the same sound URI with the notification as we
    did with the `RingtoneManager` from the earlier *Lights, Action, and Sound* recipe.
    The vibrate feature also required the same vibrate permission as the previous
    recipe, but notice the value we send is different. Instead of sending just a duration
    for the vibration, we are sending a vibrate pattern. The first value represents
    the `off` duration (in milliseconds); the next value represents the vibration
    `on` duration and repeats.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，我们使用与之前 *灯光、动作和声音* 菜谱中的 `RingtoneManager` 相同的声音 URI 来创建通知。振动功能也要求相同的振动权限，但请注意我们发送的值是不同的。我们不是只发送振动的持续时间，而是发送一个振动模式。第一个值代表
    `off` 持续时间（以毫秒为单位）；下一个值代表振动 `on` 持续时间，并重复。
- en: 'As you can see in the following line of code:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下代码行所示：
- en: '[PRE31]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If the app is running on Android 8 Oreo (API 26) or greater, there are two
    parts to creating a notification: the notification itself along with the notification
    channel (or "category" as the user will see in the settings). The notification
    "category" feature was added to Android 8 to make it easier for the user to manage
    the many notifications being displayed by apps. Prior to this feature being added,
    notifications were either on or off for an app. The user had no way to allow only
    certain notification types.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用正在运行Android 8 Oreo（API 26）或更高版本，创建通知有两个部分：通知本身以及通知通道（或用户在设置中看到的“类别”）。通知“类别”功能是在Android
    8中添加的，以便用户更容易管理由应用显示的许多通知。在此功能添加之前，通知对于应用要么开启要么关闭。用户没有方法来允许仅某些通知类型。
- en: If the user is running on Android 8 or greater, we need to create the channel
    and channel characteristics. Keep in mind, once the channel is created, the properties
    cannot be changed. For example, if you don't have sound enabled when you first
    create the channel, changing it later will have no effect. (This applies across
    app restarts as well.)
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户正在运行Android 8或更高版本，我们需要创建通道和通道特性。请注意，一旦通道创建，其属性就不能更改。例如，如果你在首次创建通道时没有启用声音，之后更改它将没有任何效果。（这也适用于应用重启后。）
- en: On devices with LED notification, you won't see the LED notification while the
    screen is active.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在具有LED通知的设备上，当屏幕处于活动状态时，你不会看到LED通知。
- en: There's more...
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This recipe shows the basics of a notification, but like many features on Android,
    options have expanded with later OS releases. (Keep in mind the following Toasts
    can vary in appearance based on the OS version and manufacturer.)
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱展示了通知的基本知识，但像Android上的许多功能一样，选项在后续的操作系统版本中有所扩展。（请注意，以下Toast的外观可能会根据操作系统版本和制造商而有所不同。）
- en: Adding a button to the notification using addAction()
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`addAction()`向通知添加按钮
- en: 'There are several design considerations you should keep in mind when adding
    action buttons, as listed in the Notification Guidelines link in the chapter introduction.
    You can add a button (up to three) using the `addAction()` method on the notification
    builder. The following is an example of a notification with one action button:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加操作按钮时，你应该考虑几个设计因素，这些因素在章节引言中提到的通知指南链接中有详细说明。你可以在通知构建器上使用`addAction()`方法添加一个按钮（最多三个）。以下是一个包含一个操作按钮的通知示例：
- en: '![](img/6e246da9-4ff0-4da8-859a-e73f7d2d0106.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6e246da9-4ff0-4da8-859a-e73f7d2d0106.png)'
- en: 'Here''s the code to create this notification:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这是创建此通知的代码：
- en: '[PRE32]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'An `Action` requires three parameters: the image, the text, and `PendingIntent`.
    The first two items are for the visual display, while the third item, `PendingIntent`,
    is called when the user presses the button.'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`Action`需要三个参数：图像、文本和`PendingIntent`。前两项用于视觉显示，而第三项`PendingIntent`在用户按下按钮时被调用。
- en: 'The previous code creates a very simple `PendingIntent;` it just launches the
    app. This is probably the most common intent for notifications and is often used
    when the user presses the notification. To set the notification intent, use the
    following code:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码创建了一个非常简单的`PendingIntent`；它只是启动应用。这可能是通知中最常见的意图，通常在用户按下通知时使用。要设置通知意图，请使用以下代码：
- en: '[PRE33]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: A button action would probably require more information as it should take the
    user to the specific item in your app. You should also create an application back-stack
    for the best user experience.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮操作可能需要更多信息，因为它应该将用户带到应用中的特定项目。你还应该创建一个应用程序回退栈以获得最佳用户体验。
- en: Expanded notifications
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展通知
- en: Expanded notifications were introduced in Android 4.1 (API 16) and are available
    by using the `setStyle()` method on the Notification Builder. If the user's OS
    does not support expanded notifications, the notification will appear as a normal
    notification.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展通知是在Android 4.1（API 16）中引入的，可以通过在通知构建器上使用`setStyle()`方法来使用。如果用户的操作系统不支持扩展通知，通知将显示为正常通知。
- en: 'The three expanded styles currently available in the `NotificationCompat` library
    include the following:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 目前在`NotificationCompat`库中可用的三种扩展样式包括以下内容：
- en: 'InboxStyle: Large-format notifications that include a list of strings'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: InboxStyle：包含字符串列表的大格式通知
- en: 'BigPictureStyle: Large-format notification that includes a large image attachment'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BigPictureStyle：包含大图像附件的大格式通知
- en: 'BigTextStyle: Large-format notifications that include a lot of text'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BigTextStyle：包含大量文本的大格式通知
- en: 'Here''s an example of each notification style, and the code used to create
    the example:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是每种通知样式的示例以及创建示例所使用的代码：
- en: '`InboxStyle`: Large-format notifications that include a list of strings'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`InboxStyle`: 包含字符串列表的大格式通知'
- en: '![](img/7863ea24-8119-4393-bad7-0f81497304a8.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7863ea24-8119-4393-bad7-0f81497304a8.png)'
- en: 'Here''s the code for this style:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是此样式的代码：
- en: '[PRE34]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '`BigPictureStyle`: Large-format notification that includes a large image attachment'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`BigPictureStyle`: 包含大图像附件的大格式通知'
- en: '![](img/5dfd9531-454b-47f3-9ea0-de07aa5c3d2a.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5dfd9531-454b-47f3-9ea0-de07aa5c3d2a.png)'
- en: 'Check out the code for this style:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 查看此样式的代码：
- en: '[PRE35]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '`BigTextStyle` : Large-format notifications that include a lot of text'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`BigTextStyle` : 包含大量文本的大格式通知'
- en: '![](img/0bcb4f9b-22ad-43d4-a5b1-889f1210f523.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0bcb4f9b-22ad-43d4-a5b1-889f1210f523.png)'
- en: Here's how the code for this style would look.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是这个样式的代码示例。
- en: '[PRE36]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Lock screen notifications
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 锁屏通知
- en: 'Android 5.0 (API 21) and above can show notifications on the lock screen, based
    on the user''s lock screen visibility. Use `setVisibility()` to specify the notification
    visibility using the following values:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: Android 5.0（API 21）及以上版本可以根据用户的锁屏可见性显示通知。使用 `setVisibility()` 方法通过以下值指定通知可见性：
- en: '`VISIBILITY_PUBLIC`: All content can be displayed.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VISIBILITY_PUBLIC`: 可以显示所有内容。'
- en: '`VISIBILITY_SECRET`: No content should be displayed.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VISIBILITY_SECRET`: 不应显示任何内容。'
- en: '`VISIBILITY_PRIVATE`: Display the basic content (title and icon) but the rest
    is hidden.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VISIBILITY_PRIVATE`: 显示基本内容（标题和图标），其余内容隐藏。'
- en: See also
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: See the *Creating a Media Player Notification* and *Making a Flashlight with
    a
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参见 *创建媒体播放器通知* 和 *制作手电筒*
- en: Heads-Up Notification* recipes for additional notification options with Android
    5.0
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Android 5.0 的 *Heads-Up Notification* 食谱，用于提供额外的通知选项
- en: (API 21) and greater.
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: （API 21）及以上。
- en: Creating a Media Player Notification
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建媒体播放器通知
- en: This recipe is going to take a look at the new Media Player style introduced
    in Android 5.0 (API 21). Unlike the previous recipe, *Lights, Action, and Sound
    Redux using Notifications, *which used `NotificationCompat`, this recipe does
    not, as this style is not available in the support library.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱将探讨 Android 5.0（API 21）中引入的新媒体播放器样式。与之前的食谱不同，*使用通知的“灯光、动作和声音重制”，*该食谱使用了 `NotificationCompat`，而本食谱没有使用，因为此样式在支持库中不可用。
- en: 'Here''s a screenshot showing how the notification will appear:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是通知将如何显示的截图：
- en: '![](img/8a015041-d7d2-4b11-9df8-9e8d0f57d483.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8a015041-d7d2-4b11-9df8-9e8d0f57d483.png)'
- en: 'This screenshot shows an example of the Media Player Notification on a lock
    screen:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 此截图显示了锁屏上的媒体播放器通知示例：
- en: '![](img/c28438ff-e154-4c08-902f-16a25e0a76c8.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c28438ff-e154-4c08-902f-16a25e0a76c8.png)'
- en: Getting ready
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Create a new project in Android Studio and call it `MediaPlayerNotification`. In
    the Target Android Devices dialog, select API 21: Android 5.0 (Lollipop), or higher,
    for this project. Select Empty Activity on the Add an Activity to Mobile dialog.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建一个新的项目，并将其命名为 `MediaPlayerNotification`。在“目标 Android 设备”对话框中，选择
    API 21：Android 5.0（Lollipop）或更高版本，为此项目选择。在“添加活动到移动设备”对话框中选择“空活动”。
- en: How to do it...
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We just need a single button to call our code to send the notification. Open
    `activity_main.xml` and follow these steps:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要一个按钮来调用我们的代码以发送通知。打开 `activity_main.xml` 并按照以下步骤操作：
- en: 'Replace the existing `&lt;TextView&gt;` with the following button code:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将现有的 `&lt;TextView&gt;` 替换为以下按钮代码：
- en: '[PRE37]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Open `MainActivity.java` and add the `showNotification()` method:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `MainActivity.java` 并添加 `showNotification()` 方法：
- en: '[PRE38]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Add the following method to create the channel for Android O and later:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法以创建 Android O 及更高版本的通道：
- en: '[PRE39]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Run the program on a device or emulator.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备或模拟器上运行程序。
- en: How it works...
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The first detail to note is that we decorate our `showNotification()` method
    with the following:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要注意的是，我们用以下方式装饰我们的 `showNotification()` 方法：
- en: '[PRE40]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'This tells the compiler we know we are using deprecated calls. (Without this,
    the compiler will flag the code.) We follow this with an API check, using this
    call:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉编译器我们知道我们正在使用已弃用的调用。（如果没有这个，编译器将标记代码。）我们随后进行 API 检查，使用以下调用：
- en: '[PRE41]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The icon resource was changed in API 23, but we want this application to run
    on API 21 (Android 5.0) and later, so we still need to call the old methods when
    running on API 21 and API 22.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 图标资源在 API 23 中已更改，但我们要使此应用程序在 API 21（Android 5.0）及更高版本上运行，因此当在 API 21 和 API
    22 上运行时，我们仍然需要调用旧方法。
- en: If the user is running on Android 6.0 (or higher), we use the new `Icon` class
    to create our icons; otherwise, we use the old constructor. (You'll notice the
    IDE shows deprecated calls with a strikethrough.) Checking the current OS version
    during runtime is a common strategy for remaining backward-compatible.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户正在运行Android 6.0（或更高版本），我们使用新的`Icon`类来创建我们的图标；否则，我们使用旧的构造函数。（您会注意到IDE显示带有删除线的已弃用调用。）在运行时检查当前操作系统版本是保持向后兼容的常见策略。
- en: We create three actions using `addAction()` to handle the media player functionality.
    Since we don't really have a media player going, we use the same intent for all
    the actions, but you'll want to create separate intents in your application.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`addAction()`创建三个操作来处理媒体播放器功能。由于我们实际上并没有媒体播放器，所以我们使用相同的意图为所有操作，但您可能希望在您的应用程序中为每个操作创建单独的意图。
- en: 'To make the notification visible on the lock screen, we need to set the visibility
    level to `VISIBILITY_PUBLIC`, which we do with the following call:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 要使通知在锁屏上可见，我们需要将可见性级别设置为`VISIBILITY_PUBLIC`，这可以通过以下调用完成：
- en: '[PRE42]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'This call is worth noting:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 这个调用值得注意：
- en: '[PRE43]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Just as the method name implies, this sets the actions to show when the notification
    is shown with a reduced layout. (See the lock screen image in the recipe introduction.)
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 正如方法名所暗示的，这设置了在通知以简化布局显示时显示的操作。（参见菜谱介绍中的锁屏图像。）
- en: There's more...
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'We only created the visual notification in this recipe. If we were creating
    an actual media player, we could instantiate a `MediaSession` class and pass in
    the session token with this call:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们只创建了视觉通知。如果我们正在创建实际的媒体播放器，我们可以实例化一个`MediaSession`类，并通过此调用传入会话令牌：
- en: '[PRE44]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: This will allow the system to recognize the media content and react accordingly,
    such as updating the lock screen with the current album artwork.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许系统识别媒体内容并相应地做出反应，例如更新锁屏上的当前专辑封面。
- en: See also
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: MediaSession developer documents: [https://developer.android.com/reference/android/media/session/MediaSession.html](https://developer.android.com/reference/android/media/session/MediaSession.html)
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 媒体会话开发者文档：[https://developer.android.com/reference/android/media/session/MediaSession.html](https://developer.android.com/reference/android/media/session/MediaSession.html)
- en: The *Lock Screen Visibility* section in the *Lights, Action, and Sound Redux
    using Notifications* recipe discusses visibility options
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在“使用通知的灯光、动作和声音Redux”菜谱中的“锁屏可见性”部分讨论了可见性选项
- en: Making a Flashlight with a Heads-Up Notification
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建带有抬头通知的手电筒
- en: Android 5.0-Lollipop (API 21) introduced a new type of notification called the
    Heads-Up Notification. Many people do not care for this new notification as it
    can be extremely intrusive, as it forces its way on top of other apps. (See the
    following screenshot.) Keep this in mind when using this type of notification.
    We're going to demonstrate the Heads-Up Notification with a Flashlight as this
    demonstrates a good use case scenario.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: Android 5.0-Lollipop（API 21）引入了一种新的通知类型，称为抬头通知。许多人不喜欢这种新的通知，因为它可能非常侵扰性，因为它强迫其方式覆盖其他应用。（参见以下截图。）在使用此类通知时请记住这一点。我们将通过使用手电筒来演示抬头通知，因为这演示了一个良好的用例场景。
- en: 'Here''s a screenshot showing the Heads-Up Notification we''ll create further
    on:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个截图，显示了我们将要创建的抬头通知：
- en: '![](img/f6feface-55d9-4290-8bb2-ad20ce00e8e9.png)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f6feface-55d9-4290-8bb2-ad20ce00e8e9.png)'
- en: If you have a device running Android 6.0, you may have noticed the new Flashlight
    settings option. As a demonstration, we're going to create something similar in
    this recipe.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的设备正在运行Android 6.0，您可能已经注意到了新的手电筒设置选项。作为演示，我们将在本菜谱中创建类似的内容。
- en: Getting ready
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `FlashlightWithHeadsUp`.
    When prompted for the API level, we need API 23 (or higher) for this project.
    Select Empty Activity when prompted for the Activity Type.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新的项目，并将其命名为`FlashlightWithHeadsUp`。当提示API级别时，我们需要为该项目选择API
    23（或更高）。当被提示选择活动类型时，选择空活动。
- en: How to do it...
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Our activity layout will consist of just a `ToggleButton` to control the flashlight
    mode. We''ll be using the same `setTorchMode()` code as the *Lights, Action, and
    Sound - getting the user''s attention!* recipe presented earlier, and will add
    a Heads-Up Notification. We''ll need permission to use the vibrate option, so
    start by opening the Android Manifest and following these steps:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的活动布局将只包含一个 `ToggleButton` 来控制手电筒模式。我们将使用之前在 *灯光、动作和声音 - 引起用户的注意!* 菜单中展示的相同的
    `setTorchMode()` 代码，并添加一个抬头通知。我们需要权限来使用振动选项，所以首先打开 Android Manifest 并按照以下步骤操作：
- en: 'Add the following permission:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下权限：
- en: '[PRE45]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Specify that we only want a single instance of `MainActivity` by adding `android:launchMode="singleInstance"`
    to the `&lt;MainActivity&gt;` element. It will look as follows:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `&lt;MainActivity&gt;` 元素中添加 `android:launchMode="singleInstance"` 以指定我们只想有一个
    `MainActivity` 的实例。它将看起来如下：
- en: '[PRE46]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'With the changes to `AndroidManifest` done, open the `activity_main.xml` layout
    and replace the existing `&lt;TextView&gt;` element with this `&lt;ToggleButton&gt;`
    code:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在完成对 `AndroidManifest` 的修改后，打开 `activity_main.xml` 布局，并用以下 `&lt;ToggleButton&gt;`
    代码替换现有的 `&lt;TextView&gt;` 元素：
- en: '[PRE47]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Now, open `ActivityMain.java` and add the following global variables:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开 `ActivityMain.java` 并添加以下全局变量：
- en: '[PRE48]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Add the following code to `onCreate()` to set up the camera:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `onCreate()` 中添加以下代码以设置相机：
- en: '[PRE49]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Add the following method to handle the response when the user presses the notification:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法来处理用户按下通知时的响应：
- en: '[PRE50]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Add the method to get the camera ID:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加获取相机 ID 的方法：
- en: '[PRE51]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Add these two methods to handle the flashlight mode:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下两个方法来处理手电筒模式：
- en: '[PRE52]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Finally, add this method to create the notification:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，添加以下方法来创建通知：
- en: '[PRE53]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: You're ready to run the application on a physical device. As noted previously,
    you'll need an Android 6.0 (or higher) device, with an outward-facing camera flash.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在可以运行应用程序在物理设备上了。如前所述，你需要一个 Android 6.0（或更高版本）的设备，并且有一个外置的相机闪光灯。
- en: How it works...
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Since this recipe uses the same flashlight code as *Lights, Action, and Sound
    - getting the user''s attention!*, we''ll jump to the `showNotification()` method.
    Most notification builder calls are the same as in previous examples, but there
    are two significant differences:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个菜谱使用了与 *灯光、动作和声音 - 引起用户的注意!* 相同的手电筒代码，我们将跳转到 `showNotification()` 方法。大多数通知构建器调用与之前的示例相同，但有两大显著差异：
- en: '[PRE54]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Notifications will not be escalated to Heads-Up Notifications unless the priority
    is set to `HIGH` (or above) and uses either vibrate or sound.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 除非优先级设置为 `HIGH`（或更高），并且使用振动或声音，否则通知不会被提升为抬头通知。
- en: 'Note this from the Developer documentation at [http://developer.android.com/reference/android/app/Notification.html#headsUpContentView](http://developer.android.com/reference/android/app/Notification.html#headsUpContentView):'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 注意开发者文档中的以下内容 [http://developer.android.com/reference/android/app/Notification.html#headsUpContentView](http://developer.android.com/reference/android/app/Notification.html#headsUpContentView)：
- en: '"At its discretion, the system UI may choose to show this as a heads-up notification."'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '"系统用户界面可以自行决定是否将其显示为抬头通知。"'
- en: 'We create a `PendingIntent` as we''ve done previously, but here we set the
    action with the following:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 我们像之前一样创建了一个 `PendingIntent`，但在这里我们使用以下方式设置动作：
- en: '[PRE55]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: We set the app to only allow a single instance in the `AndroidManifest` file,
    as we don't want to start a new instance of the app when the user presses the
    notification. The `PendingIntent` we created sets the action, which we check in
    the `onNewIntent()` callback. If the user opens the app without pressing the notification,
    they can still disable the flashlight with the `ToggleButton`.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `AndroidManifest` 文件中将应用设置为只允许单个实例，因为我们不希望在用户按下通知时启动应用的新实例。我们创建的 `PendingIntent`
    设置了动作，我们在 `onNewIntent()` 回调中检查这个动作。如果用户在没有按下通知的情况下打开应用，他们仍然可以使用 `ToggleButton`
    禁用手电筒。
- en: There's more...
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'You may have noticed the following line of code:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到了以下代码行：
- en: '[PRE56]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '`.setAutoCancel()` tells the OS to automatically remove the notification when
    the user clicks on it. This is great if the user presses the notification to turn
    off the light, but what happens if they use the toggle button? The light will
    turn off as it should, but they are left with a useless notification. To fix that,
    we can add a new method to cancel the notification:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '`.setAutoCancel()` 告诉操作系统在用户点击通知时自动移除通知。如果用户按下通知来关闭灯光，这很好，但如果他们使用切换按钮会发生什么呢？灯光会像预期的那样关闭，但他们将留下一个无用的通知。为了解决这个问题，我们可以添加一个新的方法来取消通知：'
- en: '[PRE57]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Then we call it when they press the button. Here''s how `clickLight()` will
    look:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在他们按下按钮时调用它。以下是`clickLight()`将看起来如何：
- en: '[PRE58]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: See also
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: Refer to the earlier *Lights, Action, and Sound - getting the user's attention!*
    recipe for more information on the torch API
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考之前关于*使用灯光、动作和声音 - 吸引用户注意!*的食谱，以获取有关火炬API的更多信息
- en: Refer to the earlier *Lights, Action, and Sound Redux using Notifications* recipe for
    more Notification examples
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考之前关于*使用通知的灯光、动作和声音重置*的食谱，以获取更多通知示例
- en: Notifications with Direct Reply
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支持直接回复的通知
- en: One of the most exciting new features introduced in Android N was inline reply,
    called Direct Reply. With Direct Reply, users can respond without leaving the
    Notification Bar!
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: Android N中引入的最令人兴奋的新功能之一是内联回复，称为直接回复。使用直接回复，用户可以在不离开通知栏的情况下进行回复！
- en: In this recipe, we’ll add the ability to create an inline reply by passing a
    RemoteInput to the `addRemoteInput()` method.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将通过将RemoteInput传递给`addRemoteInput()`方法来添加创建内联回复的能力。
- en: Getting ready
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Create a new project in Android Studio and call it `DirectReply`. In the Target
    Android Devices dialog, select the Phone & Tablet option and choose API 24: Android
    Nougat 7.0 (or later) for the Minimum SDK. Select Empty Activity when prompted
    for the Activity Type.'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新的项目，并将其命名为`DirectReply`。在目标Android设备对话框中，选择手机和平板选项，并选择API
    24：Android Nougat 7.0（或更高版本）作为最小SDK。当提示活动类型时，选择空活动。
- en: How to do it...
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Our app will consist of a single button on the main screen to initiate the
    initial notification. Start by opening `activity_main.xml` and follow these steps:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用将包含主屏幕上的单个按钮，用于启动初始通知。首先打开`activity_main.xml`并按照以下步骤操作：
- en: 'Replace the existing `TextView` with the button XML:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将现有的`TextView`替换为按钮XML：
- en: '[PRE59]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Now, open `MainActivity.java` and add the following code to the class:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`MainActivity.java`并将以下代码添加到类中：
- en: '[PRE60]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Add the following code to the existing `onCreate()` method:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到现有的`onCreate()`方法中：
- en: '[PRE61]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Override the `onNewIntent()` method as follows:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下重写`onNewIntent()`方法：
- en: '[PRE62]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Add the following method to handle the button click:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法以处理按钮点击：
- en: '[PRE63]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Add the `getReplyText()` method:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`getReplyText()`方法：
- en: '[PRE64]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: You’re ready to run the application on a device or emulator.
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在可以开始在设备或模拟器上运行应用程序了。
- en: How it works...
  id: totrans-323
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Adding the Inline Reply option to a notification is actually very simple. We
    start with a Notification object as we've done in the previous recipes. (We're
    using NotifcationCompat from the support library to provide greater backward compatibility.)
    When creating the Action, call the `addRemoteInput()` method, passing in a RemoteInput.
    RemoteInput is where you define they key to retrieve the user input text. After
    the user enters a reply, the OS calls the PendingIntent, passing the data back
    to your app in an Intent. Use `RemoteInput.getResultsFromIntent()` to retrieve
    the user text as we did in the `getReplyText()` method.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 将直接回复选项添加到通知实际上非常简单。我们从一个通知对象开始，就像之前食谱中做的那样。（我们使用支持库中的NotifcationCompat以提供更好的向后兼容性。）在创建动作时，调用`addRemoteInput()`方法，传入一个RemoteInput。RemoteInput是定义检索用户输入文本键的地方。在用户输入回复后，操作系统调用PendingIntent，通过Intent将数据传回您的应用。使用`RemoteInput.getResultsFromIntent()`来检索用户文本，就像我们在`getReplyText()`方法中所做的那样。
- en: See also
  id: totrans-325
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The Notifications Overview guide at [https://developer.android.com/guide/topics/ui/notifiers/notifications](https://developer.android.com/guide/topics/ui/notifiers/notifications)
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅[https://developer.android.com/guide/topics/ui/notifiers/notifications](https://developer.android.com/guide/topics/ui/notifiers/notifications)中的通知概览指南
