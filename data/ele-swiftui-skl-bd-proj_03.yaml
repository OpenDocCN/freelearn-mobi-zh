- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: iPhone Project – Tax Calculator Functionality
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: iPhone 项目 – 税费计算器功能
- en: In this chapter, we will work on implementing the tax calculation and page navigation
    functionality in our first project, the tax calculator. In the previous chapter,
    we looked at the design of the calculator and broke it down into two views and
    all the components required. We then implemented all the components using SwiftUI.
    At the end of the previous chapter, we effectively only had a fancy wireframe.
    Now, we will implement all the functionality to provide navigation between the
    two views, calculating the tax breakdown and displaying the calculation.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将致力于在我们的第一个项目——税费计算器中实现税费计算和页面导航功能。在前一章中，我们探讨了计算器的设计，并将其分解为两个视图以及所有所需的组件。然后，我们使用
    SwiftUI 实现了所有组件。在前一章的结尾，我们实际上只拥有一个花哨的线框图。现在，我们将实现所有功能，以在两个视图之间提供导航，计算税费分解并显示计算结果。
- en: 'This chapter will be split into the following sections:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将分为以下部分：
- en: Navigating from `ContentView` to `ResultsView`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 `ContentView` 导航到 `ResultsView`
- en: Input validation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入验证
- en: Calculating tax breakdown
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算税费分解
- en: Extra tasks
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 额外任务
- en: By the end of this chapter, you will have created a fully functional tax calculator
    that can be used as a foundation. I’ll provide exercises as we reach the end of
    the chapter to implement more advanced functionality within the tax calculator.
    The code is yours to use, modify, and distribute as you see fit. This will transition
    nicely into our next project, the iPad gallery app.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将创建一个功能齐全的税费计算器，可以作为基础。当达到本章的结尾时，我将提供练习来在税费计算器中实现更多高级功能。代码由你使用、修改和按需分发。这将很好地过渡到我们的下一个项目，即
    iPad 图库应用。
- en: Technical Requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter requires you to download Xcode version 14 or above from Apple’s
    App Store.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章要求您从 Apple 的 App Store 下载 Xcode 版本 14 或更高版本。
- en: To install Xcode, just search for `Xcode` in the App Store, and select and download
    the latest version. Open Xcode and follow any additional installation instructions.
    Once Xcode has opened and launched, you’re ready to go.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Xcode，只需在 App Store 中搜索 `Xcode`，选择并下载最新版本。打开 Xcode 并遵循任何额外的安装说明。一旦 Xcode
    打开并启动，你就可以开始了。
- en: 'Version 14 of Xcode has the following features/requirements:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode 14 版本具有以下功能/要求：
- en: Includes SDKs for iOS 16, iPadOS 16, macOS 12.3, tvOS 16, and watchOS 9
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含 iOS 16、iPadOS 16、macOS 12.3、tvOS 16 和 watchOS 9 的 SDK
- en: Supports on-device debugging in iOS 11 or later, tvOS 11 or later, and watchOS
    4 or later
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持 iOS 11 或更高版本、tvOS 11 或更高版本和 watchOS 4 或更高版本的设备上的调试
- en: Requires a Mac running macOS Monterey 12.5 or later
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要 macOS Monterey 12.5 或更高版本的 Mac
- en: For further information regarding the technical details, please refer to [*Chapter
    1*](B18783_01.xhtml#_idTextAnchor014).
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关技术细节的更多信息，请参阅 [*第 1 章*](B18783_01.xhtml#_idTextAnchor014)。
- en: 'The code files for this chapter and the previous chapter to use as a base can
    be found here: [https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects](https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章和前一章使用的代码文件，作为基础，可以在此处找到：[https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects](https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects)
- en: Navigating from ContentView to ResultsView
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 ContentView 导航到 ResultsView
- en: In this section, we will finally implement the navigational system for moving
    from `ContentView` to `ResultsView` and back again.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将最终实现从 `ContentView` 到 `ResultsView` 以及返回的导航系统。
- en: If you recall back to the previous chapter, when viewing the UI for the `ResultsView`,
    we were forced to use the Live Preview Window instead of running the application.
    The reason was that there was no functionality for navigating from `ContentView`
    to `ResultsView`. We have already added the button for calculating the tax, but
    we need to implement the code for the button triggering the navigation.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你回忆起前一章，当查看 `ResultsView` 的 UI 时，我们被迫使用实时预览窗口而不是运行应用程序。原因是没有任何从 `ContentView`
    导航到 `ResultsView` 的功能。我们已添加了计算税费的按钮，但我们需要实现触发导航的按钮代码。
- en: 'First, we need to wrap our `VStack` in `ContentView` in a `NavigationView`.
    The `NavigationView` allows us to present a stack of views which is very useful
    for navigation, as it effectively has a history of all previous views, allowing
    an easy and extendable navigation system:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要将 `ContentView` 中的 `VStack` 包装在 `NavigationView` 中。`NavigationView` 允许我们展示一系列视图，这对于导航非常有用，因为它实际上记录了所有之前视图的历史，从而允许一个简单且可扩展的导航系统：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We have now implemented `NavigationView`, which allows us to use our existing
    code and design for navigation. There is one extra piece of code we require –
    a `GoToResultsView` function. An empty version has been added to the preceding
    code. We will use it later in this chapter.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经实现了`NavigationView`，这允许我们使用现有的代码和设计进行导航。我们需要一个额外的代码片段 – 一个`GoToResultsView`函数。一个空版本已经被添加到前面的代码中。我们将在本章的后面使用它。
- en: 'As of now, this won’t have any effect on our application, as we need to modify
    the button to become a `NavigationLink`, which is basically a fancy button allowing
    us to navigate between views. Fortunately for us, it can be styled in any way
    we desire, but first let’s implement a basic `NavigationLink`. To do this, replace
    the button code in `ContentView` with the following code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，这不会对我们的应用程序产生任何影响，因为我们需要修改按钮以成为`NavigationLink`，它基本上是一个高级按钮，允许我们在视图之间导航。幸运的是，它可以以我们希望的方式样式化，但首先让我们实现一个基本的`NavigationLink`。为此，将`ContentView`中的按钮代码替换为以下代码：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let’s break down the code we just added. The first parameter it takes is the
    destination for the application’s view system, so the new view that will be pushed
    onto the stack. We have specified `ResultsView` but you could easily specify a
    simple component, which would create its own view. The next parameter is called
    `label`; this is similar to the label specified in the button itself. Currently,
    we have a `Text` component, which looks like this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解我们刚刚添加的代码。它接受的第一个参数是应用程序视图系统的目标，即将被推入堆栈的新视图。我们指定了`ResultsView`，但你也可以轻松指定一个简单的组件，这将创建它自己的视图。下一个参数称为`label`；这与按钮本身中指定的标签类似。目前，我们有一个`Text`组件，它看起来像这样：
- en: '![Figure 3.1 – Basic NavigationLink button](img/Figure_3.01_B18783.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图3.1 – 基本NavigationLink按钮](img/Figure_3.01_B18783.jpg)'
- en: Figure 3.1 – Basic NavigationLink button
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.1 – 基本NavigationLink按钮
- en: 'Let’s style the `NavigationLink` button and modify the code to look as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为`NavigationLink`按钮添加样式并修改代码，使其看起来如下：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We have added five main style aspects to the button. Let’s take a look at each
    one:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为按钮添加了五个主要样式方面。让我们看看每一个：
- en: '`.bold( )`: Makes the text bold'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.bold()`: 使文本加粗'
- en: '`.frame( width: 200, height: 50 )`: Sets the size of the button'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.frame(width: 200, height: 50)`: 设置按钮的大小'
- en: '`.background( Color.blue )`: Sets the background color to blue'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.background(Color.blue)`: 将背景颜色设置为蓝色'
- en: '`.foregroundColor( Color.white )`: Sets the text color to white'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.foregroundColor(Color.white)`: 将文本颜色设置为白色'
- en: '`.cornerRadius( 10 )`: Makes the button’s corners rounded, giving a more natural,
    iOS-like feel'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.cornerRadius(10)`: 使按钮的角落圆润，给人一种更自然、类似iOS的感觉'
- en: 'After these styles have been applied to the application and, more specifically,
    the button, it will look like the following figure:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在将这些样式应用到应用程序以及更具体地说，按钮上之后，它将看起来像以下图示：
- en: '![Figure 3.2 – NavigationLink button styled](img/Figure_3.02_B18783.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图3.2 – 导航Link按钮样式](img/Figure_3.02_B18783.jpg)'
- en: Figure 3.2 – NavigationLink button styled
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.2 – 导航Link按钮样式
- en: 'We will now add a navigation title. This provides a nice consistent method
    for adding a title/header to the view. This is simple – add the following code
    to the bottom of the `VStack`, just after the padding:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将添加一个导航标题。这提供了一个很好的统一方法来为视图添加标题/头部。这很简单 – 将以下代码添加到`VStack`的底部，紧接在填充之后：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Running the application will show the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序将显示以下内容：
- en: '![Figure 3.3 – Navigation title](img/Figure_3.03_B18783.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图3.3 – 导航标题](img/Figure_3.03_B18783.jpg)'
- en: Figure 3.3 – Navigation title
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3 – 导航标题
- en: 'Navigating to `ResultsView` by clicking the **Calculate Tax** button will show
    that the back button’s text in the top left is now the same as the navigation
    title that was added. This can be seen in the following screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击**计算税费**按钮导航到`ResultsView`将显示，左上角的返回按钮文本现在与添加的导航标题相同。这可以在以下屏幕截图中看到：
- en: '![Figure 3.4 – Updated back button text](img/Figure_3.04_B18783.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图3.4 – 更新后的返回按钮文本](img/Figure_3.04_B18783.jpg)'
- en: Figure 3.4 – Updated back button text
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4 – 更新后的返回按钮文本
- en: 'Let’s now update `ResultsView` to use a navigation title instead of a `Text`
    component for the heading of the page. First, we need to remove the `Text` component
    with the following code from `ResultsView`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将更新`ResultsView`以使用导航标题而不是`Text`组件作为页面的标题。首先，我们需要从`ResultsView`中移除以下代码中的`Text`组件：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now that `ResultsView` has no title, let’s add the navigation link. Like before,
    add the following code after the `VStack`, right after the padding:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，由于`ResultsView`没有标题，让我们添加导航链接。像之前一样，在`VStack`之后，紧接在填充之后添加以下代码：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This little addition will change `ResultsView` as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个小小的添加将使 `ResultsView` 发生如下变化：
- en: '![Figure 3.5 – ResultsView navigation title](img/Figure_3.05_B18783.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.5 – ResultsView 导航标题](img/Figure_3.05_B18783.jpg)'
- en: Figure 3.5 – ResultsView navigation title
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5 – ResultsView 导航标题
- en: 'So, we have added a fair bit of code. This is what the `ContentView` and `ResultsView`
    code should look like before we move on:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经添加了大量代码。这是我们继续之前，`ContentView` 和 `ResultsView` 代码应该看起来的样子：
- en: ContentView
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: ContentView
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: ResultsView
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: ResultsView
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Wow, we have done a lot. Take the time to pat yourself on the back. All this
    allowed us to implement a seamless yet familiar navigation system. We learned
    how to implement a navigation system to navigate to `ResultsView` and back to
    `ContentView` easily.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，我们做了很多。花点时间给自己鼓掌。所有这些都使我们能够实现一个无缝且熟悉的导航系统。我们学习了如何实现导航系统，以便轻松地导航到 `ResultsView`
    并返回 `ContentView`。
- en: In the next section, we will validate the salary to make sure we do not pass
    through any data that is incorrect.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将验证薪水以确保我们不会传递任何错误的数据。
- en: Validating salary input
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证薪水输入
- en: 'As of now, if you press the **Calculate Tax** button, it takes the user to
    the results page from the front page. However, it does this regardless of input,
    so it will go to the next page even if there is no salary. The following validation
    checks must be done for it to be an acceptable value:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，如果您按下 **计算税** 按钮，它会将用户从首页带到结果页面。然而，它不考虑输入，所以即使没有薪水，它也会转到下一页。以下验证检查必须完成，才能使其成为一个可接受的价值：
- en: Does it contain a value that is a number?
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是否包含一个数值？
- en: Is the value above 0 (this rules out negatives)?
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该值是否大于 0（这排除了负数）？
- en: 'You might be wondering why we can’t just check whether the salary is above
    0 as we have chosen a decimal keypad. There are two main reasons for this:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道为什么我们不能只检查薪水是否大于 0，因为我们选择了十进制键盘。这主要有两个原因：
- en: The user can insert decimal points in a way that makes the input `4.5.6..`.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可以以使输入变为 `4.5.6..` 的方式插入小数点。
- en: Even though the user cannot directly type text due to the keyboard being a decimal
    pad, they can still copy it from another application and paste it into our calculator,
    thus breaking the number-only `TextField`. You may think it’s worth just disabling
    pasting but it’s important to retain this functionality, as the user may legitimately
    want to paste a number instead of typing it out, especially if it isn’t a simple
    small number.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽管由于键盘是十进制键盘，用户不能直接输入文本，但他们仍然可以从其他应用程序复制并粘贴到我们的计算器中，从而破坏只允许数字的 `TextField`。您可能认为禁用粘贴是值得的，但保留此功能很重要，因为用户可能确实希望粘贴一个数字而不是手动输入，尤其是如果它不是一个简单的较小数字。
- en: If not correctly handled, the application will crash upon the user pressing
    the **Calculate Tax** button. The way we will achieve these conditions is explained
    in the following sections.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有正确处理，当用户按下 **计算税** 按钮时，应用程序将崩溃。我们将如何在以下章节中解释实现这些条件的方式。
- en: Using a variable to track if the salary is valid
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用变量跟踪薪水是否有效
- en: 'We will add a Boolean variable after the salary string to track whether the
    salary is valid; if it is, then `ResultsView` will be displayed. The salary string
    is only checked when the **Calculate Tax** button is pressed. Add the following
    code before the body:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在薪水字符串后面添加一个布尔变量来跟踪薪水是否有效；如果是，则显示 `ResultsView`。只有当按下 **计算税** 按钮时，才会检查薪水字符串。在主体之前添加以下代码：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: isActive NavigationLink
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: isActive 导航链接
- en: 'Now we will link the `isSalaryValid` variable created previously with `NavigationLink`
    using the `isActive` parameter. Update the `NavigationLink` code to look like
    the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将之前创建的 `isSalaryValid` 变量与 `NavigationLink` 通过 `isActive` 参数链接起来。更新 `NavigationLink`
    代码如下：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`isActive` is a simple concept – if `true`, it immediately takes you to the
    destination view, and if it is `false`, then nothing happens.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`isActive` 是一个简单的概念——如果为 `true`，则立即带您到目标视图，如果为 `false`，则不发生任何操作。'
- en: In the following section, we will validate the salary.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下部分，我们将验证薪水。
- en: Validating the salary
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证薪水
- en: 'Firstly, we will override the tap gesture and call a custom function called
    `GoToResultsView`. Add the following code to the end of all text properties:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将重写点击手势并调用一个名为 `GoToResultsView` 的自定义函数。将以下代码添加到所有文本属性的最后：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Finally, we must check whether the string is valid, then navigate to the results
    view. Add the following function to handle this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们必须检查字符串是否有效，然后导航到结果视图。添加以下函数来处理此操作：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let’s unpack this function to see what it does:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们展开这个函数来看看它做了什么：
- en: '`if ( Float( salary ) != nil )`: Checks whether the salary is a number. This
    is accomplished by casting the string to a `Float`. If unsuccessful, it is `nil`
    – this allows us to check for this. This also includes validating an empty string.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if ( Float( salary ) != nil )`：检查薪水是否是一个数字。这是通过将字符串转换为 `Float` 来实现的。如果失败，它将是
    `nil` – 这允许我们检查这一点。这也包括验证空字符串。'
- en: '`if ( Float( salary )! > 0 )`: Checks whether the salary is greater than zero.
    The exclamation mark says that the variable salary is definitely a `Float` to
    avoid any problems, as it’s already been checked we can do this.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if ( Float( salary )! > 0 )`：检查薪水是否大于零。感叹号表示变量薪水肯定是一个 `Float`，以避免任何问题，因为我们已经检查过我们可以这样做。'
- en: '`isSalaryValid = true`: Sets the `isSalaryValid` check variable to `true`,
    which triggers `ResultsView` and loads it up.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isSalaryValid = true`：将 `isSalaryValid` 检查变量设置为 `true`，这会触发 `ResultsView`
    并加载它。'
- en: 'All of these additions should result in the following code in the following
    `ContentView` file:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些添加都应该在以下 `ContentView` 文件中产生以下代码：
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: With the preceding code, we validated the salary, and a variable was used to
    track the status of the validation, which allowed us to navigate to `ResultsView`
    when it was validated.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面的代码，我们验证了薪水，并使用一个变量来跟踪验证状态，这使得当它被验证时，我们可以导航到 `ResultsView`。
- en: In the next section, we will pass the salary between `ContentView` and `ResultsView`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将把薪水在 `ContentView` 和 `ResultsView` 之间传递。
- en: Passing the salary through to ResultsView
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将薪水传递到 ResultsView
- en: As of now, when we click `ResultsView` is still using dummy data. Let’s change
    that by passing in the salary we validated in the previous section. Doing this
    is simple when using State and Bind. The salary variable in `ContentView` is already
    a state variable, simply meaning when it changes, the part of the view linked
    to it also changes and vice versa. When we change the text in the `TextField`
    salary, our application updates the state variable. We can use a binding variable
    in `ResultsView`, which allows us to pass in data between views.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，当我们点击 `ResultsView` 时，它仍然使用的是虚拟数据。让我们通过传递上一节中验证的薪水来改变这一点。当使用 State 和 Bind
    时，这样做很简单。`ContentView` 中的薪水变量已经是一个状态变量，这意味着当它改变时，与之关联的视图部分也会改变，反之亦然。当我们更改 `TextField`
    中的薪水文本时，我们的应用程序会更新状态变量。我们可以在 `ResultsView` 中使用一个绑定变量，这允许我们在视图之间传递数据。
- en: 'First, in `ResultsView`, add the following line above the `taxBreakdown` array:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在 `ResultsView` 中，在 `taxBreakdown` 数组上方添加以下行：
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This simply declares a `salary` variable of type `String`, which is the same
    format as the `salary` variable in `ContentView`. `@Binding` just states that
    it is expecting this value to be passed in.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是声明了一个类型为 `String` 的 `salary` 变量，其格式与 `ContentView` 中的 `salary` 变量相同。`@Binding`
    只是表明它期望传递这个值。
- en: 'Now we must update `NavigationLink` to pass in the `salary` variable from `ContentView`
    to `ResultsView` like so:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须更新 `NavigationLink` 以将 `salary` 变量从 `ContentView` 传递到 `ResultsView`，如下所示：
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Though we have completed all the binding, if we try and run the application,
    the following error will be thrown:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们已经完成了所有的绑定，如果我们尝试运行应用程序，将会抛出以下错误：
- en: '![Figure 3.6 – Preview error](img/Figure_3.06_B18783.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.6 – 预览错误](img/Figure_3.06_B18783.jpg)'
- en: Figure 3.6 – Preview error
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.6 – 预览错误
- en: 'This error relates to the preview view, which appears usually to the right
    of the code. Without this, the preview cannot run. To fix this error, we can give
    a default hardcoded value just for the preview. Update the code as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这个错误与预览视图有关，通常它出现在代码的右侧。没有这个，预览无法运行。为了修复这个错误，我们可以为预览提供一个默认的硬编码值。按照以下方式更新代码：
- en: '[PRE15]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now once we run the application, we get no errors because we solved the missing
    argument error, and can move on to calculating the tax breakdown from the salary
    we passed through.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们运行应用程序后，我们没有得到任何错误，因为我们解决了缺失参数的错误，可以继续从我们传递的薪水计算税项分解。
- en: Note
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you would like to test to make sure the variable has been passed through,
    you can use a breakpoint or `print` statement. I will let you do that as an extra
    task.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要测试确保变量已经传递，你可以使用断点或 `print` 语句。我将让你作为一个额外任务来完成这个。
- en: Calculating tax breakdown
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算税项分解
- en: 'In the previous chapter, we passed through the `salary` variable, but we still
    need to calculate the tax. I will be doing it in line with the UK income tax rates
    of 2023/2024, but this can be adapted easily for any other tax system. In the
    following table, we have the tax rates for 2023/2024:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们传递了`salary`变量，但我们仍然需要计算税款。我将按照2023/2024年的英国所得税率进行计算，但这可以很容易地适应任何其他税制。以下表格中列出了2023/2024年的税率：
- en: '| **Income** | **Tax rate** |  |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| **收入** | **税率** |  |'
- en: '| Up to £12,570 | 0% | Personal allowance |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| 低于£12,570 | 0% | 个人免税额 |'
- en: '| £12,571 to £37,700 | 20% | Basic rate |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| £12,571至£37,700 | 20% | 基本税率 |'
- en: '| £37,701 to £150,000 | 40% | Higher rate |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| £37,701至£150,000 | 40% | 高税率 |'
- en: '| over £150,000 | 45% | Additional rate |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| 超过£150,000 | 45% | 附加税率 |'
- en: Table 3.1 – Tax brackets
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 表3.1 – 税率区间
- en: As there are brackets and not a single fixed tax, we will need to do a few calculations
    to figure out the exact tax to be deducted. On top of the income tax, there is
    also national insurance tax. National insurance tax isn’t so simple as there are
    different categories, but let’s keep it at a simple 13%, which it roughly is.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 由于存在括号且没有单一的固定税率，我们需要进行一些计算来确定应扣除的确切税款。除了所得税外，还有国家保险税。国家保险税并不简单，因为存在不同的类别，但让我们将其保持在简单的13%，这大致就是其数值。
- en: Note
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: There are definitely more aspects to calculating tax, such as pension contributions,
    student loans, and so on; however, we will leave it at this.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 计算税款肯定还有更多方面，例如养老金缴纳、学生贷款等；然而，我们将就此为止。
- en: Tax calculation
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 税款计算
- en: 'Let’s implement a formula in `ResultsView` to calculate the income tax. Add
    the following code at the start of the body:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`ResultsView`中实现一个公式来计算所得税。在主体开始处添加以下代码：
- en: '[PRE16]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We check each tax bracket and calculate the tax accordingly. Next, we will
    calculate the national insurance. First, add another double variable below `incomeTax`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们检查每个税率区间并相应地计算税款。接下来，我们将计算国家保险。首先，在`incomeTax`下方添加另一个double变量：
- en: '[PRE17]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now we can simply calculate it by multiplying the salary by `0.13` to get `13%`.
    Add the following code below the income tax calculation:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以简单地通过将工资乘以`0.13`来计算`13%`。在所得税计算下方添加以下代码：
- en: '[PRE18]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now that we have all of the taxes calculated, we can move on to working out
    the post-tax salary. This is simple – we just subtract the income tax and national
    insurance tax from the salary. Add the following code beneath the previous code:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经计算了所有税款，我们可以继续计算税后工资。这很简单——我们只需从工资中减去所得税和国家保险税。在之前的代码下方添加以下代码：
- en: '[PRE19]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let’s format these values into strings, which will be used when displaying
    the tax figures. Add the following code below `post-tax` `salary` calculation:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这些值格式化为字符串，这些字符串将在显示税款时使用。在`post-tax` `salary`计算下方添加以下代码：
- en: '[PRE20]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This creates a string from the respective numbers rounded to two decimal places.
    Next, move the `taxBreakdown` hardcoded pie chart array beneath the formatted
    strings, and update it as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从相应的数字中创建一个字符串，四舍五入到两位小数。接下来，将硬编码的饼图数组`taxBreakdown`移动到格式化字符串下方，并按如下方式更新：
- en: '[PRE21]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We are using let instead of var as it won’t need to be changed.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用let而不是var，因为它不需要被更改。
- en: 'Now we are finally ready to start updating each component in the UI. First,
    we will update the `Text` components, which display the `Before Tax` and `After
    Tax` figures like so:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们终于准备好开始更新UI中的每个组件。首先，我们将更新`Text`组件，这些组件显示`税前`和`税后`金额，如下所示：
- en: '[PRE22]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Finally, update `ProgressView` to display the correct percentage and value
    for the tax and salary:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，更新`ProgressView`以显示税款和工资的正确百分比和值：
- en: '[PRE23]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The reason for dividing the `postTaxSalary` and `incomeTax` variables by `salaryNum`
    and multiplying it by `100` is to work out the percentage for `ProgressView`.
    Before running, update the `VStack` to be returned. There seems to be an issue
    with the code, causing conflicts for the compiler. To resolve this, we need to
    explicitly state what to draw by returning it:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 将`postTaxSalary`和`incomeTax`变量除以`salaryNum`并乘以`100`的原因是为了计算出`ProgressView`的百分比。在运行之前，更新要返回的`VStack`。似乎代码中存在一个问题，导致编译器出现冲突。为了解决这个问题，我们需要明确指出要绘制的内容，通过返回它来解决问题：
- en: '[PRE24]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If we run our application and insert the salary of £100,000, `ResultsView`
    will appear as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行我们的应用程序并插入£100,000的工资，`ResultsView`将如下所示：
- en: '![Figure 3.7 – ResultsView updated](img/Figure_3.07_B18783.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图3.7 – 结果视图已更新](img/Figure_3.07_B18783.jpg)'
- en: Figure 3.7 – ResultsView updated
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.7 – 结果视图已更新
- en: 'That definitely was tiring, all that code. For reference, here is what the
    `ContentView` and `ResultsView` code should look like before moving on:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 那肯定很累，这么多代码。为了参考，以下是移动到下一步之前 `ContentView` 和 `ResultsView` 代码应该看起来像什么：
- en: 'ContentView:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: ContentView：
- en: '[PRE25]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'ResultsView:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: ResultsView：
- en: '[PRE26]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In the next section, we will fix an error that occurs in `ContentView`; see
    whether you can figure out what the error is.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将修复 `ContentView` 中出现的错误；看看您是否能找出错误是什么。
- en: Fixing the ContentView binding error
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修复 ContentView 绑定错误
- en: 'There is an error in `ContentView`. It can be triggered by following these
    steps:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`ContentView` 中存在一个错误。可以通过以下步骤触发：'
- en: Navigate to `ResultsView` by clicking the **Calculate** **Tax** button.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击 **计算** **税** 按钮导航到 `ResultsView`。
- en: Go back to `ContentView` by pressing the back arrow on the top left.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击左上角的返回箭头回到 `ContentView`。
- en: 'Input invalid data, which can be any of the following:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入无效数据，可以是以下任何一种：
- en: Delete all the text in `TextField`
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除 `TextField` 中的所有文本
- en: Space character
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 空格字符
- en: Any non-numerical character
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任何非数字字符
- en: Two or more decimal points
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 两个或多个小数点
- en: 'Once these steps are complete, the following error will appear:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，将出现以下错误：
- en: '![Figure 3.8 – Invalid input error](img/Figure_3.08_B18783.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.8 – 无效输入错误](img/Figure_3.08_B18783.jpg)'
- en: Figure 3.8 – Invalid input error
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.8 – 无效输入错误
- en: 'This occurs because the variable is bound to `ResultsView`, which uses the
    value numerically. As the input is no longer numerical, it crashes. The problem
    is that `Double( salary )` returns `nil` and forces it to be assigned using `!`,
    which makes it crash. We will default assign a value of `0` to the `salaryNum`
    variable and if it’s not `nil`, then cast the salary string as `Double`. Update
    the code as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为变量绑定到 `ResultsView`，它使用数值来使用该值。由于输入不再是数值，它崩溃了。问题是 `Double( salary )` 返回
    `nil` 并强制使用 `!` 来分配，这导致它崩溃。我们将默认将 `salaryNum` 变量的值设置为 `0`，如果它不是 `nil`，则将工资字符串作为
    `Double` 进行转换。按照以下方式更新代码：
- en: '[PRE27]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Alternatively, you can use the coalescing operator to reduce the preceding
    check as follows: `let salaryNum = Double( salary ) ?? 0`. For more information
    on the coalescing operator, visit [https://docs.swift.org/swift-book/documentation/the-swift-programming-language/basicoperators/#Nil-Coalescing-Operator](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/basicoperators/#Nil-Coalescing-Operator).'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用合并运算符来减少前面的检查，如下所示：`let salaryNum = Double( salary ) ?? 0`。有关合并运算符的更多信息，请访问
    [https://docs.swift.org/swift-book/documentation/the-swift-programming-language/basicoperators/#Nil-Coalescing-Operator](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/basicoperators/#Nil-Coalescing-Operator)。
- en: First, we change the variable to `var` instead of `let` as it needs to be modifiable
    just for checking whether the cast equates to `nil`. Then, we check that it’s
    not `nil` and assign the value accordingly. *Assigning 0 won’t have any effect
    as the view isn’t visible at this time*. Now if you run the application, it won’t
    crash if you followed the preceding steps.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将变量更改为 `var` 而不是 `let`，因为它需要可修改性，以便检查是否等于 `nil`。然后，我们检查它不是 `nil` 并相应地分配值。*分配
    0 不会产生任何影响，因为此时视图不可见*。现在，如果您按照前面的步骤运行应用程序，它不会崩溃。
- en: In the next section, we will rename `ContentView`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将重命名 `ContentView`。
- en: Renaming ContentView to FrontView
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 ContentView 重命名为 FrontView
- en: In this small section, we will change `ContentView`’s name to `FrontView`. The
    default name of `ContentView` doesn’t provide much information to us. We will
    rename it `FrontView`. You could rename the file and manually change every occurrence
    of `ContentView` to `FrontView`, which wouldn’t be too tedious in an application
    this size. However, in a larger and more complex application, it would take away
    a lot of valuable development time. We can use Xcode’s renaming tool to aid us.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个小节中，我们将把 `ContentView` 的名称改为 `FrontView`。`ContentView` 的默认名称对我们来说没有提供太多信息。我们将将其重命名为
    `FrontView`。您可以将文件重命名并手动将 `ContentView` 的每个实例更改为 `FrontView`，这在这样一个规模的应用程序中不会太繁琐。然而，在一个更大、更复杂的应用程序中，这将耗费很多宝贵的开发时间。我们可以使用
    Xcode 的重命名工具来帮助我们。
- en: 'Simply go to any reference to `ContentView` in the application’s code, right-click
    it, and go to **Refactor** | **Rename…**:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 简单地转到应用程序代码中任何对 `ContentView` 的引用，右键单击它，然后转到 **重构** | **重命名…**：
- en: '![Figure 3.9 – Rename… button](img/Figure_3.09_B18783.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.9 – 重命名… 按钮](img/Figure_3.09_B18783.jpg)'
- en: Figure 3.9 – Rename… button
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.9 – 重命名… 按钮
- en: 'In the next view, set the name to `FrontView` and press *Enter*:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个视图中，将名称设置为 `FrontView` 并按 *Enter* 键：
- en: '![Figure 3.10 – Xcode renaming tool](img/Figure_3.10_B18783.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.10 – Xcode 重命名工具](img/Figure_3.10_B18783.jpg)'
- en: Figure 3.10 – Xcode renaming tool
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.10 – Xcode 重命名工具
- en: Renaming files and updating all references is as easy as that. This also works
    for variables and functions; feel free to use it whenever you need to.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 重命名文件和更新所有引用就像那样简单。这也适用于变量和函数；请随时使用。
- en: We have now completed the calculator application; in the next section, you will
    see some of the extra tasks for you to complete.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了计算器应用程序；在下一节中，您将看到一些额外的任务，供您完成。
- en: Extra tasks
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 额外任务
- en: 'Now that the application is complete, here is a list of tasks for you to complete
    to enhance your application and also to test your knowledge of the concepts learned
    in this chapter:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应用程序已经完成，以下是一些任务列表，用于增强您的应用程序并测试您对本章所学概念的理解：
- en: Show an error when submitting an invalid salary
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交无效薪水时显示错误
- en: Formatting salary and tax components with commas
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用逗号格式化薪水和税收组件
- en: Abstracting tax brackets and percentages to make the app more dynamic
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽象税级和百分比以使应用程序更具动态性
- en: Pie chart labeling
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 饼图标签
- en: Different types of tax
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的税收类型
- en: Corporation tax
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公司税
- en: Inheritance tax
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 税收继承
- en: Provide more inputs for the current salary calculator such as pension contributions
    and student loans
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为当前薪水计算器提供更多输入，例如养老金贡献和助学贷款
- en: Back button styling
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回按钮样式
- en: Note
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 备注
- en: If at any point you require help, feel free to join my Discord group at [https://discord.gg/7e78FxrgqH](https://discord.gg/7e78FxrgqH).
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在任何时候您需要帮助，请随时加入我的 Discord 群组 [https://discord.gg/7e78FxrgqH](https://discord.gg/7e78FxrgqH)。
- en: We will summarize what we have covered in this chapter. However, before that,
    I will provide additional code for the extra tasks for you to implement at your
    own leisure.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将总结本章所涵盖的内容。然而，在总结之前，我将提供额外的代码，供您在空闲时自行实现额外任务。
- en: Different tax options
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不同的税收选项
- en: 'To add different tax options to your code, you can modify `ResultsView` to
    include a picker or segmented control for selecting different tax options. Here’s
    an example of how you can modify your code to add a picker for tax options:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 要将不同的税收选项添加到您的代码中，您可以通过修改 `ResultsView` 来包括选择不同税收选项的拾取器或分段控件。以下是如何修改您的代码以添加税收选项拾取器的示例：
- en: '[PRE28]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'import SwiftUIstruct FrontView: View {'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 'import SwiftUIstruct FrontView: View {'
- en: '@State private var salary: String = ""'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '@State private var salary: String = ""'
- en: '@State private var isSalaryValid: Bool = false'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '@State private var isSalaryValid: Bool = false'
- en: '@State private var selectedGeography: Geography = .country("USA") // Default
    geography'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '@State private var selectedGeography: Geography = .country("USA") // 默认地理位置'
- en: enum Geography {
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: enum Geography {
- en: case country(String)
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: case country(String)
- en: case state(String, String) // Country, State
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: case state(String, String) // 国家，州
- en: 'var displayText: String {'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 'var displayText: String {'
- en: switch self {
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: switch self {
- en: 'case .country(let country):'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 'case .country(let country):'
- en: return country
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: return country
- en: 'case .state(let country, let state):'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 'case .state(let country, let state):'
- en: return "\(state), \(country)"
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: return "\(state), \(country)"
- en: '}'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'var body: some View {'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 'var body: some View {'
- en: NavigationView {
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: NavigationView {
- en: VStack {
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: VStack {
- en: Text("Annual Salary")
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Text("年度薪水")
- en: .padding(.bottom, 75.0)
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: .padding(.bottom, 75.0)
- en: 'TextField("", text: $salary)'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 'TextField("", text: $salary)'
- en: '.frame(width: 200.0)'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '.frame(width: 200.0)'
- en: '.border(Color.black, width: 1)'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '.border(Color.black, width: 1)'
- en: .padding(.bottom, 75.0)
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: .padding(.bottom, 75.0)
- en: .keyboardType(.decimalPad)
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: .keyboardType(.decimalPad)
- en: 'Picker("Geography", selection: $selectedGeography) {'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 'Picker("地理位置", selection: $selectedGeography) {'
- en: Text("USA").tag(Geography.country("USA"))
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: Text("USA").tag(Geography.country("USA"))
- en: Text("California, USA").tag(Geography.state("USA", "California"))
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: Text("加利福尼亚，美国").tag(Geography.state("USA", "California"))
- en: // Add more geography options as needed
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: // 根据需要添加更多地理位置选项
- en: '}'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .pickerStyle(SegmentedPickerStyle())
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: .pickerStyle(SegmentedPickerStyle())
- en: .padding(.bottom, 75.0)
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: .padding(.bottom, 75.0)
- en: 'NavigationLink(destination: ResultsView(salary: $salary, geography: selectedGeography),
    isActive: $isSalaryValid) {'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 'NavigationLink(destination: ResultsView(salary: $salary, geography: selectedGeography),
    isActive: $isSalaryValid) {'
- en: Text("Calculate Tax")
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: Text("计算税")
- en: .bold()
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: .bold()
- en: '.frame(width: 200, height: 50)'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '.frame(width: 200, height: 50)'
- en: .background(Color.blue)
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: .background(Color.blue)
- en: .foregroundColor(Color.white)
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: .foregroundColor(Color.white)
- en: .cornerRadius(10)
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: .cornerRadius(10)
- en: .onTapGesture {
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: .onTapGesture {
- en: goToResultsView()
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: goToResultsView()
- en: '}'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .padding()
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: .padding()
- en: .navigationTitle("Main Page")
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: .navigationTitle("主页")
- en: '}'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: func goToResultsView() {
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: func goToResultsView() {
- en: if let salaryFloat = Float(salary), salaryFloat > 0 {
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: if let salaryFloat = Float(salary), salaryFloat > 0 {
- en: isSalaryValid = true
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: isSalaryValid = true
- en: '}'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'struct ResultsView: View {'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 'struct ResultsView: View {'
- en: 'var salary: String'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 'var salary: String'
- en: 'var geography: FrontView.Geography'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 'var geography: FrontView.Geography'
- en: 'var body: some View {'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 'var body: some View {'
- en: VStack {
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: VStack {
- en: Text("Results")
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: Text("结果")
- en: .font(.title)
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: .font(.title)
- en: .padding()
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: .padding()
- en: 'Text("Salary: \(salary)")'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 'Text("工资: \(salary)")'
- en: .padding()
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: .padding()
- en: 'Text("Geography: \(geography.displayText)")'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 'Text("地区: \(geography.displayText)")'
- en: .padding()
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: .padding()
- en: // Calculate and display tax breakdown based on the selected geography
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: // 根据所选地区计算并显示税收分解
- en: Spacer()
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: Spacer()
- en: '}'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .navigationTitle("Results")
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: .navigationTitle("结果")
- en: '}'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'struct ContentView_Previews: PreviewProvider {'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 'struct ContentView_Previews: PreviewProvider {'
- en: 'static var previews: some View {'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 'static var previews: some View {'
- en: FrontView()
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: FrontView()
- en: '}'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE30]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: import SwiftUIimport SwiftUICharts
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: import SwiftUIimport SwiftUICharts
- en: 'struct ResultsView: View {'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 'struct ResultsView: View {'
- en: '@Binding var salary: String'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '@Binding var salary: String'
- en: 'var geography: FrontView.Geography'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 'var geography: FrontView.Geography'
- en: 'var body: some View {'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 'var body: some View {'
- en: 'let salaryNum: Double = Double(salary) ?? 0'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 'let salaryNum: Double = Double(salary) ?? 0'
- en: 'let taxBreakdown = calculateTaxBreakdown(for: salaryNum, in: geography)'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 'let taxBreakdown = calculateTaxBreakdown(for: salaryNum, in: geography)'
- en: let salaryString = formatCurrency(salaryNum)
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: let salaryString = formatCurrency(salaryNum)
- en: let postTaxSalaryString = formatCurrency(taxBreakdown.postTaxSalary)
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: let postTaxSalaryString = formatCurrency(taxBreakdown.postTaxSalary)
- en: let incomeTaxString = formatCurrency(taxBreakdown.incomeTax)
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: let incomeTaxString = formatCurrency(taxBreakdown.incomeTax)
- en: let nationalInsuranceTaxString = formatCurrency(taxBreakdown.nationalInsuranceTax)
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: let nationalInsuranceTaxString = formatCurrency(taxBreakdown.nationalInsuranceTax)
- en: return VStack {
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: return VStack {
- en: PieChart()
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: PieChart()
- en: .data(taxBreakdown.chartData)
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: .data(taxBreakdown.chartData)
- en: '.chartStyle(ChartStyle(backgroundColor: .white, foregroundColor: ColorGradient(.blue,
    .purple)))'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '.chartStyle(ChartStyle(backgroundColor: .white, foregroundColor: ColorGradient(.blue,
    .purple)))'
- en: Text("Before Tax")
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: Text("税前")
- en: '.font(.system(size: 32))'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '.font(.system(size: 32))'
- en: .padding(.vertical)
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: .padding(.vertical)
- en: Text(salaryString)
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: Text(salaryString)
- en: '.font(.system(size: 32))'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '.font(.system(size: 32))'
- en: .padding(.vertical)
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: .padding(.vertical)
- en: Text("After Tax")
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: Text("税后")
- en: '.font(.system(size: 32))'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '.font(.system(size: 32))'
- en: .padding(.vertical)
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: .padding(.vertical)
- en: Text(postTaxSalaryString)
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: Text(postTaxSalaryString)
- en: '.font(.system(size: 32))'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '.font(.system(size: 32))'
- en: .padding(.vertical)
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: .padding(.vertical)
- en: Group {
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: Group {
- en: Text("Post Tax Salary")
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: Text("税后工资")
- en: 'ProgressView(postTaxSalaryString, value: taxBreakdown.postTaxPercentage, total:
    100)'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 'ProgressView(postTaxSalaryString, value: taxBreakdown.postTaxPercentage, total:
    100)'
- en: Text("Tax")
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: Text("税收")
- en: 'ProgressView(incomeTaxString, value: taxBreakdown.incomeTaxPercentage, total:
    100)'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 'ProgressView(incomeTaxString, value: taxBreakdown.incomeTaxPercentage, total:
    100)'
- en: Text("National Insurance")
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: Text("国家保险")
- en: 'ProgressView(nationalInsuranceTaxString, value: taxBreakdown.nationalInsurancePercentage,
    total: 100)'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 'ProgressView(nationalInsuranceTaxString, value: taxBreakdown.nationalInsurancePercentage,
    total: 100)'
- en: '}'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: .padding()
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: .padding()
- en: .navigationBarTitle("Summary")
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: .navigationBarTitle("总结")
- en: '}'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'private func calculateTaxBreakdown(for salary: Double, in geography: FrontView.Geography)
    -> TaxBreakdown {'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 'private func calculateTaxBreakdown(for salary: Double, in geography: FrontView.Geography)
    -> TaxBreakdown {'
- en: 'var incomeTax: Double = 0'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 'var incomeTax: Double = 0'
- en: 'var nationalInsuranceTax: Double = 0'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 'var nationalInsuranceTax: Double = 0'
- en: if salary > 12570 {
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: if salary > 12570 {
- en: if salary > 37700 {
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: if salary > 37700 {
- en: if salary > 150000 {
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: if salary > 150000 {
- en: incomeTax += (37700 - 12571) * 0.2
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: incomeTax += (37700 - 12571) * 0.2
- en: incomeTax += (150000 - 37701) * 0.4
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: incomeTax += (150000 - 37701) * 0.4
- en: incomeTax += (salary - 150000) * 0.45
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: incomeTax += (salary - 150000) * 0.45
- en: '} else {'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '} else {'
- en: incomeTax += (37700 - 12571) * 0.2
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: incomeTax += (37700 - 12571) * 0.2
- en: incomeTax += (salary - 37700) * 0.4
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: incomeTax += (salary - 37700) * 0.4
- en: '}'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '} else {'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '} else {'
- en: incomeTax += (salary - 12570) * 0.2
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: incomeTax += (salary - 12570) * 0.2
- en: '}'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: nationalInsuranceTax = salary * 0.13
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: nationalInsuranceTax = salary * 0.13
- en: let postTaxSalary = salary - incomeTax - nationalInsuranceTax
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: let postTaxSalary = salary - incomeTax - nationalInsuranceTax
- en: 'let chartData: [(String, Double)] = [("Post Tax Salary", postTaxSalary), ("Tax",
    incomeTax), ("National Insurance", nationalInsuranceTax)]'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 'let chartData: [(String, Double)] = [("税后工资", postTaxSalary), ("税收", incomeTax),
    ("国家保险", nationalInsuranceTax)]'
- en: let totalSalary = salary + nationalInsuranceTax
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: let totalSalary = salary + nationalInsuranceTax
- en: let postTaxPercentage = postTaxSalary / totalSalary * 100
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: let postTaxPercentage = postTaxSalary / totalSalary * 100
- en: let incomeTaxPercentage = incomeTax / totalSalary * 100
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: let incomeTaxPercentage = incomeTax / totalSalary * 100
- en: let nationalInsurancePercentage = nationalInsuranceTax / totalSalary * 100
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: let nationalInsurancePercentage = nationalInsuranceTax / totalSalary * 100
- en: 'return TaxBreakdown(postTaxSalary: postTaxSalary, incomeTax: incomeTax, nationalInsuranceTax:
    nationalInsuranceTax, chartData: chartData, postTaxPercentage: postTax'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 'return TaxBreakdown(postTaxSalary: postTaxSalary, incomeTax: incomeTax, nationalInsuranceTax:
    nationalInsuranceTax, chartData: chartData, postTaxPercentage: postTax'
- en: 'Percentage, incomeTaxPercentage: incomeTaxPercentage, nationalInsurancePercentage:
    nationalInsurancePercentage)'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 'Percentage, incomeTaxPercentage: incomeTaxPercentage, nationalInsurancePercentage:
    nationalInsurancePercentage)'
- en: '}'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'private func formatCurrency(_ value: Double) -> String {'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 'private func formatCurrency(_ value: Double) -> String {'
- en: let formatter = NumberFormatter()
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: let formatter = NumberFormatter()
- en: formatter.numberStyle = .currency
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: formatter.numberStyle = .currency
- en: formatter.currencySymbol = "£"
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: formatter.currencySymbol = "£"
- en: 'return formatter.string(from: NSNumber(value: value)) ?? ""'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 'return formatter.string(from: NSNumber(value: value)) ?? ""'
- en: '}'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: struct TaxBreakdown {
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: struct TaxBreakdown {
- en: 'var postTaxSalary: Double'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 'var postTaxSalary: Double'
- en: 'var incomeTax: Double'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 'var incomeTax: Double'
- en: 'var nationalInsuranceTax: Double'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 'var nationalInsuranceTax: Double'
- en: 'var chartData: [(String, Double)]'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 'var chartData: [(String, Double)]'
- en: 'var postTaxPercentage: Double'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 'var postTaxPercentage: Double'
- en: 'var incomeTaxPercentage: Double'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 'var incomeTaxPercentage: Double'
- en: 'var nationalInsurancePercentage: Double'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 'var nationalInsurancePercentage: Double'
- en: '}'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'struct ResultsView_Previews: PreviewProvider {'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 'struct ResultsView_Previews: PreviewProvider {'
- en: 'static var previews: some View {'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 'static var previews: some View {'
- en: 'ResultsView(salary: .constant("100"), geography: .country("USA"))'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 'ResultsView(salary: .constant("100"), geography: .country("USA"))'
- en: '}'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In this updated code, `ResultsView` now accepts a `geography` parameter of type
    `FrontView.Geography`. The `calculateTaxBreakdown(for:in:)` function is added
    to calculate the tax breakdown based on the salary and selected geography.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个更新的代码中，`ResultsView`现在接受一个类型为`FrontView.Geography`的`geography`参数。添加了`calculateTaxBreakdown(for:in:)`函数，用于根据工资和选定的地理位置计算税收分解。
- en: The tax breakdown is stored in the `TaxBreakdown` struct, which includes the
    post-tax salary, income tax, national insurance tax, chart data, and percentage
    values for each tax category.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 税收分解存储在`TaxBreakdown`结构体中，该结构体包括税后工资、所得税、国家保险税、图表数据和每个税类百分比。
- en: The `formatCurrency(_:)` function is used to format currency values with the
    pound sign (£).
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '`formatCurrency(_:)`函数用于使用英镑符号（£）格式化货币值。'
- en: The calculated tax breakdown is used to populate the `PieChart` and `ProgressView`
    components to display the tax breakdown and percentages.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 计算出的税收分解用于填充`PieChart`和`ProgressView`组件，以显示税收分解和百分比。
- en: Please note that the tax calculation logic in the code provided is based on
    the initial logic and may not be accurate or applicable to real-world tax calculations.
    It serves as an example structure for integrating tax breakdown calculations into
    your SwiftUI code.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，提供的代码中的税收计算逻辑基于初始逻辑，可能不准确或不适用于现实世界的税收计算。它作为将税收分解计算集成到您的SwiftUI代码中的示例结构。
- en: Summary
  id: totrans-363
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we implemented all the calculator’s functionality. We linked
    all the UI components that we implemented in the previous chapter. First, we provided
    a means to navigate to and from `ResultsView`. Then, we checked the salary input
    to make sure it was above zero and didn’t contain any invalid characters. Once
    validated, we passed the salary from `ContentView` to `ResultsView`. Using the
    salary, we calculated the tax breakdown in `ResultsView`, fixed an annoying error,
    and renamed `ContentView` to `FrontView`. Finally, we also implemented a few extra
    tasks for our tax calculator app.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们实现了计算器的所有功能。我们将上一章中实现的所有UI组件链接起来。首先，我们提供了一种导航到`ResultsView`和从`ResultsView`返回的方法。然后，我们检查工资输入以确保它大于零且不包含任何无效字符。一旦验证通过，我们就将从`ContentView`传递工资到`ResultsView`。使用工资，我们在`ResultsView`中计算税收分解，修复了一个令人烦恼的错误，并将`ContentView`重命名为`FrontView`。最后，我们还为我们的税收计算器应用实现了一些额外的任务。
- en: In the next chapter, we’ll start our next application, which will be a photo
    gallery for the iPad. We will leverage many of the skills learned already, so
    feel free to take a moment and go back over anything you didn’t fully understand.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始我们的下一个应用，这将是一个适用于iPad的相册。我们将利用已经学到的许多技能，所以请随时花点时间回顾一下你还没有完全理解的内容。
