- en: Chapter 10. Adding the Camera App Integration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章：添加相机应用集成
- en: 'Another exciting feature of mobile computing is that most Android devices have
    some types of camera that can be used to capture photos and/or videos. This chapter
    will walk you through the steps required to add the ability to capture and upload
    a picture of a POI and will include the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 移动计算的一个令人兴奋的特性是，大多数Android设备都有一些类型的相机，可以用来捕捉照片和/或视频。本章将指导您完成添加捕捉和上传POI图片功能所需的步骤，并将包括以下主题：
- en: Approaches to integrate with a device camera
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与设备相机集成的方法
- en: Camera permissions and features
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相机权限和功能
- en: Capturing and displaying a photo
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捕获和显示照片
- en: Uploading an image using an HTTP multipart form upload
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HTTP多部分表单上传上传图片
- en: Picking an integration approach
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择集成方法
- en: 'The Android platform provides two different ways to integrate a device''s camera
    feature to your app:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Android平台提供了两种不同的方式来集成设备相机功能到您的应用中：
- en: Using existing camera apps to integrate using the `Intent` method
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用现有的相机应用通过`Intent`方法进行集成
- en: Creating your own custom activity that interacts directly with the camera using
    the Android API
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自己的自定义活动，直接使用Android API与相机交互
- en: The second approach allows a high degree of control over how the camera view
    is presented to the user, and how the user interacts with the view. However, the
    first approach is very straightforward to implement as it reuses the existing
    device camera apps to capture the picture. We will go with the `Intent` method
    as it represents a very practical way to add camera integration.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法允许对相机视图如何呈现给用户以及用户如何与视图交互有很高的控制度。然而，第一种方法实现起来非常直接，因为它重用了现有的设备相机应用来捕捉图片。我们将采用`Intent`方法，因为它代表了一种非常实用的添加相机集成的方式。
- en: Permissions and features
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 权限和功能
- en: 'Before getting into the details of integrating the device camera feature, we
    will discuss more about the general permissions and features related to the camera
    in more depth. The following table contains the various permissions that may be
    required. In our case, we need not specify any of these because we are using the
    `Intent` method, where the external camera app will capture the picture for us.
    The external camera app needs to specify the required camera permissions:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入讨论集成设备相机功能的具体细节之前，我们将更详细地讨论与相机相关的通用权限和功能。以下表格包含了可能需要的各种权限。在我们的案例中，我们不需要指定这些权限，因为我们使用的是`Intent`方法，外部相机应用会为我们捕捉图片。外部相机应用需要指定所需的相机权限：
- en: Permission
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 权限
- en: Description
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 描述
- en: '`CAMERA`'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`CAMERA`'
- en: This is required for apps that request permission to use the device's camera;
    this is not required if you make use of the `Intent` method
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这是请求使用设备相机权限的应用所需的；如果您使用的是`Intent`方法，则不需要此权限
- en: '`WRITE_EXTERNAL_STORAGE`'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`WRITE_EXTERNAL_STORAGE`'
- en: This permission is required to save images or videos to the device's external
    storage (SD card)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此权限是必需的，以便将图像或视频保存到设备的外部存储（SD卡）
- en: '`RECORD_AUDIO`'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`RECORD_AUDIO`'
- en: If your app records audio with video capture
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用在视频捕获时记录音频
- en: Camera-specific features can be set up in an app's manifest file using the `&lt;uses-feature&gt;`
    element. The `&lt;uses-feature&gt;` declaration is used to inform about the set
    of hardware and software features on which your application depends. You may specify
    the `required=true` to declare that your application cannot function without the
    declared feature. The feature declaration is used for information purpose only.
    There is no validation done by the Android system before installing the app.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用应用清单文件中的`<uses-feature>`元素来设置应用特定的功能。`<uses-feature>`声明用于通知关于应用所依赖的硬件和软件功能集合。您可以指定`required=true`来声明应用没有声明的功能将无法运行。功能声明仅用于信息目的。在安装应用之前，Android系统不会进行验证。
- en: 'The following table depicts the set of features you may define in your application
    manifest declaration:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格展示了您可以在应用程序清单声明中定义的一组功能：
- en: Feature
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 功能
- en: Description
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 描述
- en: '`android.hardware.camera`'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`android.hardware.camera`'
- en: The application uses the device's camera. If the device supports multiple cameras,
    the application uses the camera that faces away from the screen.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 应用使用设备的相机。如果设备支持多个相机，应用将使用面向屏幕背面的相机。
- en: '`android.hardware.camera.autofocus`'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`android.hardware.camera.autofocus`'
- en: Subfeature. The application uses the device camera's autofocus capability.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 子功能。应用使用设备相机的自动对焦功能。
- en: '`android.hardware.camera.flash`'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`android.hardware.camera.flash`'
- en: Subfeature. The application uses the device camera's flash.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 子功能。应用程序使用设备摄像头的闪光灯。
- en: '`android.hardware.camera.front`'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`android.hardware.camera.front`'
- en: Subfeature. The application uses a front-facing camera on the device.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 子功能。应用程序使用设备的前置摄像头。
- en: '`android.hardware.camera.any`'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`android.hardware.camera.any`'
- en: The application uses at least one camera, which can face in any direction. Use
    this in preference to `android.hardware.camera` if a back-facing camera is not
    required.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序至少使用一个可以朝任何方向的摄像头。如果不需要后置摄像头，请优先使用此功能`android.hardware.camera`。
- en: In our case, we will not specify any features as requirements, but at runtime,
    we will check whether an external app is available to capture a photo.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们不会指定任何功能作为要求，但在运行时，我们将检查是否有外部应用程序可用于捕获照片。
- en: Configuring the emulator
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置模拟器
- en: If you are using the emulator for development, you will need to configure it
    to have a camera. If the computer you are using has a webcam, the emulator can
    use it as the camera; otherwise, you can choose to have an emulated camera.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用模拟器进行开发，您需要配置它以拥有摄像头。如果您使用的计算机有网络摄像头，模拟器可以使用它作为摄像头；否则，您可以选择使用模拟摄像头。
- en: 'To configure the emulator for a camera, perform the following steps:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置模拟器以使用摄像头，请执行以下步骤：
- en: From the main menu, navigate to **Tools** and open **Android Emulator Manager**.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从主菜单导航到**工具**并打开**Android模拟器管理器**。
- en: Select the emulator you have been working with and choose **Edit**.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您一直在使用的模拟器并选择**编辑**。
- en: In the middle of the Edit AVD dialog, you will see two dropdowns; one for **Front
    Camera** and one for **Back Camera**. Make your selections and click on **OK**:![](img/aJ42xZHe.jpg)
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑AVD对话框的中间，您将看到两个下拉菜单；一个用于**前置摄像头**，一个用于**后置摄像头**。做出您的选择并点击**确定**：![](img/aJ42xZHe.jpg)
- en: Extending the data service
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展数据服务
- en: Since we have decided to use an external camera app to capture the picture,
    it will take care of saving the picture after it has been captured. We will have
    to provide the storage path where the image will be saved. To save the POI images,
    we will use a naming scheme such as `poiimage&lt;poi id&gt;.jpg`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已决定使用外部摄像头应用程序来捕获图片，它将在捕获图片后负责保存图片。我们将必须提供图像将保存的存储路径。为了保存POI图像，我们将使用类似于`poiimage<poi
    id>.jpg`的命名方案。
- en: Let's now extend the `POIService` class with the following additional methods.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们扩展`POIService`类，添加以下附加方法。
- en: Implementing GetFileName()
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现GetFileName()
- en: 'Let''s implement the `GetFileName()` method in `POIService.cs` that will take
    care of providing the absolute path for saving the images in device memory. The
    absolute path includes the location and the filename. The image files will be
    named as `poiimage&lt;poi id&gt;.jpg`. The following listing shows how the filename
    can be constructed:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`POIService.cs`中实现`GetFileName()`方法，该方法将负责提供在设备内存中保存图像的绝对路径。绝对路径包括位置和文件名。图像文件将被命名为`poiimage<poi
    id>.jpg`。以下列表显示了如何构造文件名：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Implementing GetImage()
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现GetImage()
- en: As discussed in the previous sections, the saving of an image can be done by
    the camera intent. However, we need to write two helper methods to read and delete
    the image from device storage.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如前几节所述，图像的保存可以通过相机意图完成。但是，我们需要编写两个辅助方法来从设备存储中读取和删除图像。
- en: 'Let''s add the `GetImage()` helper method that will be used to read the POI
    image from the device memory location, where it was saved earlier. Add the following
    listing to the `POIService.cs` class:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个`GetImage()`辅助方法，它将被用来从设备内存位置读取POI图像，该位置是之前保存的。将以下列表添加到`POIService.cs`类中：
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Implementing DeleteImage()
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现DeleteImage()
- en: After a user deletes the `poi` object by clicking on the delete action bar button,
    currently the POI will be deleted from the server. It is a good idea to delete
    the corresponding POI image from device memory once the delete from the server
    side is successful.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 用户通过点击删除操作栏按钮删除`poi`对象后，目前POI将从服务器删除。一旦从服务器端删除成功，删除设备内存中的相应POI图像是一个好主意。
- en: 'The following helper method is used to delete the image based on its POI ID:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下辅助方法用于根据其POI ID删除图像：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this chapter, we are not dealing with the delete POI; however, to incorporate
    the changes as described earlier, you need to call the `DeleteImage()` method
    in `DeletePOIAsync()`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们不处理删除POI；然而，为了实现前面描述的更改，您需要在`DeletePOIAsync()`中调用`DeleteImage()`方法：
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Capturing an image from POIDetailFragment
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从POIDetailFragment捕获图像
- en: 'We are now ready to take on the task of capturing a photo. This will involve
    the following tasks:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备承担拍照的任务。这涉及到以下任务：
- en: Adding new user interface widgets to initiate capturing a photo and displaying
    it
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加新的用户界面小部件以启动拍照并显示照片
- en: Building a photo intent to navigate to an external camera app to capture a photo
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个导航到外部相机应用以拍照的拍照 Intent
- en: Processing the results of the photo intent and displaying a photo once it is
    successfully captured
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理拍照 Intent 的结果并在成功捕获照片后显示照片
- en: The following sections describe the details of each step.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分描述了每个步骤的详细信息。
- en: Adding UI elements
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加 UI 元素
- en: There are a few new UI elements that we will need to add to support capturing
    an image; we need an `ImageButton` element to initiate the process of capturing
    an image, and we also need an `ImageView` element to display the captured POI
    image. The `ImageButton` widget can be added adjacent to the location and map
    buttons, and the `ImageView` element can be placed as the first widget above the
    **Name** field.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加一些新的 UI 元素来支持图像捕获；我们需要一个 `ImageButton` 元素来启动捕获图像的过程，还需要一个 `ImageView`
    元素来显示捕获的 POI 图像。`ImageButton` 小部件可以添加到位置和地图按钮旁边，而 `ImageView` 元素可以放置在 **名称** 字段上方的第一个小部件。
- en: 'The following list shows the definition of the `ImageView`, which should be
    placed inside the `LinearLayout` before the POI name text field:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表显示了 `ImageView` 的定义，它应该放置在 `LinearLayout` 中 POI 名称文本字段之前：
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a private reference object in `POIDetailFragment` and assign the reference
    in `OnCreateView()`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `POIDetailFragment` 中创建一个私有引用对象，并在 `OnCreateView()` 中分配引用：
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, we need a button that initiates the camera. We will start by copying the
    `ic_new_picture.png` icon from the `assets` folder to the project's `drawable`
    folder and adding it to the project in the same manner, as we did in the previous
    chapters.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要一个启动相机的按钮。我们将首先将 `ic_new_picture.png` 图标从 `assets` 文件夹复制到项目的 `drawable`
    文件夹，并以与之前章节相同的方式将其添加到项目中。
- en: 'Add the following button definition to the `LinearLayout` that contains the
    other two buttons:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下按钮定义添加到包含其他两个按钮的 `LinearLayout` 中：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output of the preceding layout changes should look like the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 前述布局更改的输出应类似于以下截图：
- en: '![](img/qvGeG67L.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/qvGeG67L.jpg)'
- en: 'Create a private reference object in `POIDetailFragment` and assign the reference
    in `OnCreateView()` as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `POIDetailFragment` 中创建一个私有引用对象，并按如下方式在 `OnCreateView()` 中分配引用：
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Notice that in the preceding code snippets, we are assigning the `NewPhotoClicked()`
    event listener to the `photoImageButton` button. We will complete the `NewPhotoClicked()`
    method implementation in the following sections in this chapter.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在前述代码片段中，我们将 `NewPhotoClicked()` 事件监听器分配给 `photoImageButton` 按钮。我们将在本章接下来的部分完成
    `NewPhotoClicked()` 方法的实现。
- en: Creating the camera Intent
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建相机 Intent
- en: 'To start an external camera app to capture a photo, we rely on the `Intent`
    class again, this time combined with an action. The following listing depicts
    creating an `Intent` class with the image capture action:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动外部相机应用以拍照，我们再次依赖 `Intent` 类，这次结合了一个动作。以下列表展示了创建具有图像捕获动作的 `Intent` 类：
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `MediaStore` class contains the metadata for all the available media on
    both internal and external storage devices. The `MediaStore.ActionImageCapture`
    action tells the Android platform that you want to capture a photo and are willing
    to use any existing app that provides these capabilities.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`MediaStore` 类包含内部和外部存储设备上所有可用媒体的元数据。`MediaStore.ActionImageCapture` 动作告诉 Android
    平台，您想要捕获照片，并且愿意使用任何提供这些功能的现有应用。'
- en: Checking for registered camera apps
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查已注册的相机应用
- en: 'In Chapter 9, *Making POIApp Location Aware*, we used `PackageManager` to check
    whether there is a map app installed to handle our intent. We now need to perform
    the same check for an app that can handle our `ActionImageCapture` intent. The
    following listing shows the logic we need:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 9 章“使 POIApp 具有位置感知能力”中，我们使用 `PackageManager` 检查是否安装了可以处理我们 intent 的地图应用。我们现在需要执行相同的检查以确定可以处理我们的
    `ActionImageCapture` intent 的应用。以下列表显示了我们需要执行的逻辑：
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Providing additional information with the Intent
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过 Intent 提供附加信息
- en: Before we start the intent, we need to provide some information to the camera
    app that processes our request; specifically, a filename and location, and the
    maximum size of the resulting photo. You must be careful about providing the value
    of the maximum size; this can be a potential threat that can cause out of memory
    exceptions. We do this by adding `Extras` to the intent. The `MediaStore` class
    defines a number of standard `Extras` that can be added to an intent to control
    how an external app fulfils the intent.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们启动意图之前，我们需要向处理我们请求的相机应用提供一些信息；具体来说，是一个文件名和位置，以及结果照片的最大尺寸。你必须小心提供最大尺寸的值；这可能会引起内存溢出异常的潜在威胁。我们通过向意图添加`Extras`来完成此操作。`MediaStore`类定义了多个标准`Extras`，可以将它们添加到意图中，以控制外部应用如何满足意图。
- en: Providing a filename and location
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提供文件名和位置
- en: The `MediaStore.ExtraOutput` extra can be used to control the filename and location
    that the external camera app should use in order to capture an image. We previously
    added the `GetFileName()` method in the `POIService` class to provide the file
    path information. However, the camera app expects the file path as an instance
    of `Android.Net.Uri`; and hence, we will need to convert the string path to an
    instance of `Android.Net.Uri`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`MediaStore.ExtraOutput`额外可以用来控制外部相机应用在捕获图像时应使用的文件名和位置。我们之前在`POIService`类中添加了`GetFileName()`方法来提供文件路径信息。然而，相机应用期望文件路径是一个`Android.Net.Uri`实例；因此，我们需要将字符串路径转换为`Android.Net.Uri`实例。'
- en: 'This is a two-step process. First, we create a `Java.IO.File` object using
    the string path from the data service and then create an `Android.Net.Uri` object.
    The following listing shows how to accomplish the construction of the URI and
    set up the `MediaStore.ExtraOutput` extra:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个两步过程。首先，我们使用来自数据服务的字符串路径创建一个`Java.IO.File`对象，然后创建一个`Android.Net.Uri`对象。以下列表展示了如何完成URI的构建和设置`MediaStore.ExtraOutput`额外：
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Providing a size limit
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提供大小限制
- en: 'The `MediaStore.ExtraSizeLimit` extra limits the image size. It is much more
    straightforward to set up as shown here:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`MediaStore.ExtraSizeLimit`额外限制图像大小。如所示，设置起来更为直接：'
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Starting the Intent
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动意图
- en: We are now ready to invoke the camera app by starting the intent by calling
    the `StartActivity()` method. Unlike the map app, in the case of a camera intent,
    we expect the results back from the activity. We are expecting the camera app
    to provide either a photo or a notification that the user cancelled to capture
    the photo. This can be accomplished by calling `StartActivityForResult()` by passing
    in the intent. The `StartActivityForResults()` method works in conjunction with
    an `OnActivityResult()` activity callback to communicate the results of the intent.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好通过调用`StartActivity()`方法启动相机应用。与地图应用不同，在相机意图的情况下，我们期望从活动中返回结果。我们期望相机应用提供一张照片或用户取消拍照的通知。这可以通过传递意图调用`StartActivityForResult()`来实现。`StartActivityForResults()`方法与`OnActivityResult()`活动回调协同工作，以通信意图的结果。
- en: 'The following listing depicts the calling of `StartActivityForResult()`:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表展示了调用`StartActivityForResult()`的方法：
- en: '[PRE12]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Notice the second parameter of `StartActivityForResult()`. It is an integer
    value named `requestCode` that will be returned as a parameter to `OnActivityResult()`
    in the callback and help you identify the original reason for launching an intent.
    The best practice is to define a constant value to pass in for each `requestCode`
    that could potentially cause `OnActivityResult()` to be called.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`StartActivityForResult()`的第二个参数。它是一个名为`requestCode`的整数值，它将在回调中的`OnActivityResult()`作为参数返回，并帮助您识别启动意图的原始原因。最佳实践是为每个可能引起`OnActivityResult()`被调用的`requestCode`定义一个常量值来传递。
- en: Note that when we call the `StartActivityForResult()` method from the fragment,
    the result will always be returned to the `OnActivityResult()` method of the activity
    that hosts `POIDetailsFragment`. However, in this case, we are looking for the
    results in `POIDetailsFragment` itself. For this, we need to override the `OnActivityResult()`
    method in all of the hosting activities, and call `base.OnActivityResult` to fire
    the callback to the `OnActivityResult()` method declared on the fragment.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当我们从片段中调用`StartActivityForResult()`方法时，结果将始终返回到托管`POIDetailsFragment`的活动`OnActivityResult()`方法。然而，在这种情况下，我们正在`POIDetailsFragment`本身中寻找结果。为此，我们需要覆盖所有托管活动的`OnActivityResult()`方法，并调用`base.OnActivityResult`来触发回调到片段上声明的`OnActivityResult()`方法。
- en: Completing the NewPhotoClicked() method
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完成NewPhotoClicked()方法
- en: 'We have covered a number of topics related to starting the camera app in a
    somewhat fragmented fashion. The following listing is the complete implementation
    of `NewPhotoClicked()`:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以某种碎片化的方式覆盖了许多与启动相机应用相关的主题。以下列表是`NewPhotoClicked()`的完整实现：
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Processing the results of the Intent
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理Intent的结果
- en: 'The initiating activity is notified of the results of an intent via the `OnActivityResult()`
    callback method. Let''s add the following callback to both `POIListActivity` and
    `POIDetailActivity` to trigger the callback back to `POIDetailFragment`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 启动活动通过`OnActivityResult()`回调方法通知intent的结果。让我们向`POIListActivity`和`POIDetailActivity`添加以下回调以触发回调到`POIDetailFragment`：
- en: '[PRE14]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, let''s override the `OnActivityResult` method in the `POIDetailFragment`
    class. The following listing shows the signature of the `OnActivityResult()` method:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在`POIDetailFragment`类中重写`OnActivityResult`方法。以下列表显示了`OnActivityResult()`方法的签名：
- en: '[PRE15]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We discussed `requestCode` in the previous section. The `resultCode` parameter
    indicates the result of the intent that was launched and is of type **Result**,
    which can have the following values:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一节讨论了`requestCode`。`resultCode`参数表示启动的intent的结果，其类型为**Result**，可以有以下值：
- en: Value
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 值
- en: Meaning
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 意义
- en: '`RESULT_OK`'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`RESULT_OK`'
- en: The activity completed the request successfully
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 活动成功完成了请求
- en: '`REQUEST_CANCELED`'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`REQUEST_CANCELED`'
- en: The activity was canceled, generally, by a user action
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 活动通常由用户操作取消
- en: '`REQUEST_FIRST_USER`'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`REQUEST_FIRST_USER`'
- en: The first value that can be used for a custom meaning
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 可以用于自定义意义的第一个值
- en: 'The third parameter, `data`, is of type `Intent` and can be used to pass additional
    information back from the activity that was launched. In our case, we are only
    concerned with `requestCode` and `resultCode`. The following listing shows the
    implementation of `OnActivityResult()` in `POIDetailFragment`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个参数`data`是`Intent`类型，可以用来从启动的活动传递额外的信息。在我们的案例中，我们只关心`requestCode`和`resultCode`。以下列表显示了`POIDetailFragment`中`OnActivityResult()`的实现：
- en: '[PRE16]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Notice that when `resultCode` is `RESULT_OK`, we load the photo that was captured
    into a Bitmap object and then set the image for `_poiImageView`. This causes the
    image to be displayed at the top of the `POIDetailFragment` layout. If `resultCode`
    is not `RESULT_OK`, we display a toast message to the user, indicating that the
    action was canceled.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当`resultCode`是`RESULT_OK`时，我们将捕获的图片加载到Bitmap对象中，然后设置给`_poiImageView`。这导致图片在`POIDetailFragment`布局的顶部显示。如果`resultCode`不是`RESULT_OK`，我们向用户显示一个toast消息，指示操作已取消。
- en: We are making use of `GetImage()` in `POIService` to retrieve the image from
    the memory. It is a simple utility method that accepts a POI ID and loads `Android.Graphics.Bitmap`
    using the Android utility class `BitmapFactory`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用`GetImage()`在`POIService`中从内存中检索图片。这是一个简单的实用方法，它接受一个POI ID并使用Android实用类`BitmapFactory`加载`Android.Graphics.Bitmap`。
- en: So far, we have added a lot of code. Run `POIApp`, and from the `POIDetails`
    page, click on the add image button to invoke the camera. Notice that the captured
    image will be displayed on the `POIDetails` screen.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经添加了很多代码。运行`POIApp`，从`POIDetails`页面点击添加图片按钮以调用相机。注意，捕获的图片将在`POIDetails`屏幕上显示。
- en: Upload an image using an HTTP multipart
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用HTTP多部分上传上传图片
- en: The last functionality we are left to incorporate in the `POIApp` sample application
    is to upload the captured POI image to the server. Currently, we are saving only
    the POI details on Cloud, and the POI images are stored locally on the user's
    device memory. It would be nice to upload the image to the server so that we don't
    lose the images when a user deletes them locally from a device.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`POIApp`示例应用程序中要实现的最后一项功能是将捕获的POI图片上传到服务器。目前，我们只将POI详情保存在云上，POI图片存储在用户的设备内存中。将图片上传到服务器会很好，这样我们就不必担心当用户从设备上本地删除它们时丢失图片。
- en: If the user has captured the photo of the POI and it is available locally on
    the device memory, then the save action will post the image along with the data
    using multipart form upload. Otherwise, it will post just the POI JSON data for
    the save operation.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户已经捕获了POI的图片并且它可在设备内存中本地使用，那么保存操作将使用多部分表单上传将图片和数据一起发布。否则，它将只发布用于保存操作的POI
    JSON数据。
- en: 'Before we create a multipart form data request, let''s first understand the
    web service API specification. The following block describes the web service API
    requirements for a multipart form upload:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建多部分表单数据请求之前，让我们首先了解Web服务API规范。以下块描述了多部分表单上传的Web服务API要求：
- en: '[PRE17]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Notice that the preceding API specification uses the `multipart/form-data` encoding
    type. Earlier in this book, for uploading the POI JSON object we used the HTTP
    `POST` method, but now we need to send the POI data along with the Bitmap stream,
    which cannot be uploaded with the `POST` method. We need to use `multipart/form-data`
    encoding type through which we can attach an image, along with several other message
    contents.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，前面的API规范使用了`multipart/form-data`编码类型。在这本书的早期部分，我们使用HTTP `POST`方法上传POI JSON对象，但现在我们需要发送POI数据和位图流，这些数据不能使用`POST`方法上传。我们需要使用`multipart/form-data`编码类型，通过它可以附加图像以及其他消息内容。
- en: A standard delimiter called `boundary` separates each part of a multipart message.
    Each part of the message can define its own standard headers, such as `Content-Type`
    and `Content-Disposition`, providing the name of the file whose value it contains.
    The multipart delimiters and header fields are always 7-bit ASCII, in any case.
    The content of the image is present right below the `Content-Type` header, followed
    by the value of the POI JSON string.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 一个名为`boundary`的标准分隔符用于分隔多部分消息的每一部分。消息的每一部分都可以定义自己的标准头，例如`Content-Type`和`Content-Disposition`，提供包含其值的文件名。多部分分隔符和头字段始终是7位ASCII，不区分大小写。图像内容位于`Content-Type`头下方，接着是POI
    JSON字符串的值。
- en: For more detailed information on multipart `Content-Type`, search for **RFC
    1341(MIME)** and visit [http://www.w3.org/Protocols/rfc1341/7_2_Multipart.html](http://www.w3.org/Protocols/rfc1341/7_2_Multipart.html).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 想要获取关于多部分`Content-Type`的更详细信息，请搜索**RFC 1341(MIME**)并访问[http://www.w3.org/Protocols/rfc1341/7_2_Multipart.html](http://www.w3.org/Protocols/rfc1341/7_2_Multipart.html)。
- en: 'Now that we understand the API specification to upload the image along with
    the POI data, let''s proceed with the implementation:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了上传图像和POI数据的API规范，让我们继续实施：
- en: 'Create an overloaded method for `CreateOrUpdatePOIAsync()` in the `POIService`
    class that takes two arguments: object of `PointOfInterest`, and the POI image
    `bitmap`:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`POIService`类中为`CreateOrUpdatePOIAsync()`方法创建一个重载版本，该方法接受两个参数：`PointOfInterest`对象和POI图像`bitmap`：
- en: '[PRE18]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add the following snippets to convert the POI object to a JSON object and then
    to `StringContent`. I don''t need to give you an explanation as we have already
    done a similar thing while posting the POI data:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码片段以将POI对象转换为JSON对象，然后转换为`StringContent`。由于我们已经在发送POI数据时做过类似的事情，因此不需要解释：
- en: '[PRE19]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now convert the Bitmap image to a byte array in order to send it as `ByteArrayContent`
    via the multipart form upload:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将位图图像转换为字节数组，以便通过多部分表单上传发送`ByteArrayContent`：
- en: '[PRE20]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Notice that the `bitmap.Compress()` writes a compressed version of the Bitmap
    to the specified stream. The second integer argument indicates the compression
    quality ranging from `0` to `100`, where `0` means low quality and `100` being
    the maximum (lowest quality).
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，`bitmap.Compress()`方法将位图的压缩版本写入指定的流。第二个整数参数表示压缩质量，范围从`0`到`100`，其中`0`表示低质量，而`100`是最大值（最低质量）。
- en: 'Add the following additional content headers such as media content type and
    content disposition. The POI image name is sent in the `poiimage&lt;poid&gt;.jpg`
    format. The server that saves the image in the database will use this name:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下附加内容头，如媒体内容类型和内容处置。POI图像名称以`poiimage<poid>.jpg`格式发送。将图像保存到数据库的服务器将使用此名称：
- en: '[PRE21]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now that we are ready with both the POI data and and image content, we can
    add both the chunks to the `MultipartFormDataContent`. The `boundary` is a random
    string used as a delimiter to separate each part of the message body:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了POI数据和图像内容，可以将这两个块添加到`MultipartFormDataContent`中。`boundary`是一个随机字符串，用作分隔符，以分隔消息体的每一部分：
- en: '[PRE22]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Declare a string constant that represents the web service endpoint to upload
    the POI image using multipart:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个表示上传POI图像的Web服务端点的字符串常量，使用多部分：
- en: '[PRE23]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Let''s now proceed to upload the form content to the server using the `HttpClient`
    class in the `PostAsync()` method. The following code snippet demonstrates posting
    data to the server using the `HttpClient` class:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们继续使用`HttpClient`类中的`PostAsync()`方法上传表单内容到服务器。以下代码片段演示了如何使用`HttpClient`类向服务器发送数据：
- en: '[PRE24]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The result of the upload request is sent back to the `POIDetailFragment`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 上传请求的结果会发送回`POIDetailFragment`。
- en: Now that we have the method ready to upload the image along with the POI JSON
    data, let's change the logic in the `POIDetailFragment` class in the `SavePOI()`
    method. Currently, the save action validates the user input and calls `CreateOrUpdatePOIAsync()`
    by passing the POI object.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了上传图像以及POI JSON数据的方法，让我们改变`POIDetailFragment`类中的`SavePOI()`方法中的逻辑。目前，保存操作验证用户输入并通过传递POI对象调用`CreateOrUpdatePOIAsync()`。
- en: 'Now if the user has captured the POI image using the camera, let''s instead
    call the newly created overridden version of `CreateOrUpdatePOIAsync()` by passing
    the Bitmap, POI, and activity instance. Add the following logic to the `SavePOI()`
    method:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果用户使用摄像头捕获了POI图像，让我们改为调用新创建的覆盖版本的`CreateOrUpdatePOIAsync()`，并传递Bitmap、POI和活动实例。将以下逻辑添加到`SavePOI()`方法中：
- en: '[PRE25]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'To make our application memory efficient, it is a good idea to dispose the
    Bitmap instance after you''re done with it. Add the following code to dispose
    the Bitmap memory:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的应用程序内存效率更高，在你完成使用Bitmap实例后销毁它是好主意。将以下代码添加到销毁Bitmap内存中：
- en: '[PRE26]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: We have now completed the `POIApp` app that exercises many of the Xamarin.Android
    features you will need to utilize for developing a professional app. While the
    app is relatively simple in nature, we hope that it provides a good starter guide
    for the Android app development. I wish you good luck with the Xamain.Android
    development! Happy coding!
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了`POIApp`应用程序，该应用程序练习了您在开发专业应用程序时需要利用的许多Xamarin.Android功能。虽然该应用程序在本质上相对简单，但我们希望它能提供一个良好的Android应用程序开发的入门指南。祝您Xamarin.Android开发顺利！编码愉快！
- en: Summary
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we completed `POIApp` by adding integration with the camera.
    We now have an app that demonstrates many of the features of the Android platform.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过添加与摄像头的集成完成了`POIApp`。现在我们有一个演示了Android平台许多功能的App。
- en: In the last chapter, we will discuss the various app distribution channels and
    steps to prepare your application for deployment.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们将讨论各种应用分发渠道以及准备应用程序部署的步骤。
