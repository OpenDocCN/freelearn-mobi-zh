- en: Chapter 9. Error Handling and Security
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 9 章。错误处理和安全
- en: While dealing with the cloud code, it's possible that a user could send invalid
    parameters in his/her queries. To handle such conditions on the cloud code, we
    have to send an error code in response to such queries. Errors can be in several
    forms, such as timeouts, ACL lists, undefined operations, and many more.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理云代码时，用户可能在查询中发送无效的参数。为了处理云代码上的此类条件，我们必须向这些查询发送错误代码。错误可以有多种形式，例如超时、ACL 列表、未定义的操作等等。
- en: 'In this chapter, we will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Error handling in order to enhance your application stability to handle such
    errors and respond accordingly
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了增强应用程序的稳定性以处理此类错误并相应地响应的错误处理
- en: The measures to enhance the security of the data
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提高数据安全性的措施
- en: The way to export your Parse data
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导出你的 Parse 数据的方法
- en: Error handling
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误处理
- en: While working with Parse, you may come across two types of errors. The first
    is the logical error, which can occur because of the way you are using the SDK.
    This kind of error will usually raise an exception called `NSException`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Parse 的时候，你可能会遇到两种类型的错误。第一种是逻辑错误，这可能是由于你使用 SDK 的方式引起的。这种类型的错误通常会引发一个名为 `NSException`
    的异常。
- en: 'Let''s say in the case of logging in, the ideal login process is to provide
    a username and password before calling `signUp` on the `PFUser` class. So, according
    to the following code, you are bypassing the username and password and calling
    `signUp` directly:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 假设在使用登录的情况下，理想的登录流程是在调用 `PFUser` 类上的 `signUp` 方法之前提供用户名和密码。所以，根据以下代码，你绕过了用户名和密码，直接调用
    `signUp`：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In such cases, the operation will throw an `NSInternalInconsistencyException`
    because `signUp` was called without username and password properties.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，操作将抛出 `NSInternalInconsistencyException` 异常，因为 `signUp` 方法被调用时没有用户名和密码属性。
- en: 'Errors can also occur while interacting with the Parse Cloud over the network.
    The error can be either because of connection with the Parse Cloud or it can be
    because of any requested operation. Let''s look at another example:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Parse 云交互时，也可能会发生错误。错误可能是由于与 Parse 云的连接，也可能是由于任何请求的操作。让我们看看另一个例子：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the previous code, we are trying to fetch the object which is not available
    on the Parse Cloud. In such cases, Parse will throw an error in the dictionary
    format where the error code is readable through `error.code`, and the message
    is readable through `error.userinfo`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们正在尝试获取在 Parse 云上不可用的对象。在这种情况下，Parse 将以字典格式抛出错误，其中错误代码可以通过 `error.code`
    读取，消息可以通过 `error.userinfo` 读取。
- en: 'The following code demonstrates the `callback` method for the previous method
    call:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码演示了前一个方法调用的 `callback` 方法：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding code, you will notice that we are using `kPFErrorObjectNotFound`
    for checking the error code. Parse provides various predefined constants for the
    errors. You can find all the predefined error codes in the `PFConstants` header
    file.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，你会注意到我们正在使用 `kPFErrorObjectNotFound` 来检查错误代码。Parse 提供了各种预定义的常量用于错误处理。你可以在
    `PFConstants` 头文件中找到所有预定义的错误代码。
- en: 'There may be several other possible reasons for the query failure, such as
    the device being unable to connect to the Parse Cloud server. In such cases, you
    will receive an error message in response with the description of the error. For
    this the `callback` method will be something like the following piece of code:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 查询失败可能有其他几个可能的原因，例如设备无法连接到 Parse 云服务器。在这种情况下，你将收到一个包含错误描述的错误消息。为此，`callback`
    方法将类似于以下代码片段：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When you have sent `NSNumber` in response to the cloud code, its Boolean value
    is used to check whether the operation was successful or not. For example, you
    have invoked a `cloud` function to fetch the average marks of a student. In this
    case the `callback` method should be similar to the following method:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当你向云代码发送 `NSNumber` 作为响应时，其布尔值用于检查操作是否成功。例如，你调用了一个 `cloud` 函数来获取学生的平均分数。在这种情况下，`callback`
    方法应该类似于以下方法：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the previous method, if the Boolean value for the result is `true`, the operation
    succeeds, else it fails with an error. Error handling is the same for all the
    foreground tasks as well.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个方法中，如果结果布尔值为 `true`，则操作成功，否则操作失败并带有错误。错误处理对所有前台任务都是相同的。
- en: The request timeout for all the commotions is 10 seconds, so the synchronous
    calls will not hang for long period of time. The connection timeout is the same
    for synchronous and asynchronous tasks.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 所有通信的请求超时时间为10秒，因此同步调用不会长时间挂起。同步和异步任务都使用相同的连接超时。
- en: Parse provides you with the list of Error codes along with their explanations.
    You can check this list at [https://www.parse.com/docs/ios/api/Classes/PFConstants.html](https://www.parse.com/docs/ios/api/Classes/PFConstants.html).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Parse为您提供错误代码列表及其解释。您可以在[https://www.parse.com/docs/ios/api/Classes/PFConstants.html](https://www.parse.com/docs/ios/api/Classes/PFConstants.html)上查看此列表。
- en: Securing your application data
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护您的应用程序数据
- en: 'It is considered best practice in the software industry to secure your application
    data as much as possible. For securing your data, you can specify an access control
    list provided by Parse to provide security to your object based on the user. It''s
    recommended to enable an anonymous user automatically when the application is
    launched. It''s also recommended to provide public writability only on the required
    objects. Such settings will protect your application data from unauthorized access.
    Following code will illustrate the usage of security in your application:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件行业中，尽可能保护您的应用程序数据被认为是最佳实践。为了保护您的数据，您可以使用Parse提供的访问控制列表，根据用户为对象提供安全性。建议在应用程序启动时自动启用匿名用户。还建议仅在所需的对象上提供公共可写性。此类设置将保护您的应用程序数据免受未经授权的访问。以下代码将说明在您的应用程序中使用安全性的用法：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It's recommended to provide ACL to all your objects, as you have already learned
    in [Chapter 6](ch06.html "Chapter 6. Users and Roles"), *Users and Roles*.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您在[第6章](ch06.html "第6章。用户和角色")“用户和角色”中学习到的内容，建议为所有对象提供ACL。
- en: 'You can secure your application even more by customizing the following settings
    on your **App Settings** page:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在您的**应用设置**页面上自定义以下设置来进一步增强您的应用程序的安全性：
- en: Disable all the login mechanisms if you aren't using them. For example, if your
    app allows the user to log in using Facebook only, then disable all the other
    login methods from the settings.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您不使用它们，请禁用所有登录机制。例如，如果您的应用程序仅允许用户使用Facebook登录，那么请从设置中禁用所有其他登录方法。
- en: Provide your Facebook **App Id** and Twitter **Consumer Key** information in
    your Parse application settings page to enable server-side validation for user
    login attempts.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的Parse应用程序设置页面上提供您的Facebook**应用ID**和Twitter**消费者密钥**信息，以启用服务器端验证用户登录尝试。
- en: Exporting data
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导出数据
- en: 'Parse also allows you to export your database. For exporting your data, navigate
    to the **Settings** page of the application and click on the **Export Data** button.
    Once you click on the **Export Data** button, Parse will compress all your data
    and export it to your e-mail ID, which is used for login. Exported data is in
    JSON format. The ZIP file will contain all your class objects in a separate file.
    The following is the example data of the `Class` object exported from Parse:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Parse还允许您导出您的数据库。要导出数据，请导航到应用程序的**设置**页面并点击**导出数据**按钮。一旦您点击**导出数据**按钮，Parse将压缩所有数据并将其导出到您的电子邮件ID，该ID用于登录。导出的数据是JSON格式。ZIP文件将包含所有类对象在一个单独的文件中。以下是从Parse导出的`Class`对象的示例数据：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Summary
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored the Parse Cloud code and its various implementations
    to simplify the application development on the mobile end.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了Parse云代码及其各种实现，以简化移动端的应用程序开发。
- en: We started by exploring the types of errors and the ways to handle them in your
    project.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先探索了在项目中处理错误类型和方式。
- en: Then, we learned how to enhance the application security.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们学习了如何增强应用程序的安全性。
- en: Finally, we have seen the way to export our data from Parse.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们看到了如何从Parse导出我们的数据。
