- en: Chapter 2. Installing LevelDB and Building for iOS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 2 章。安装 LevelDB 并为 iOS 构建
- en: The basics of getting LevelDB downloaded and unpacked are the same as in the
    beginning of [Chapter 1](ch01.html "Chapter 1. Downloading LevelDB and Building
    with OS X"), *Downloading LevelDB and Building with OS X*, but we will be rebuilding
    the library and need to vary the build steps a bit for iOS. Building for iOS is
    referred to as **cross-compilation** as the code being generated is for a different
    processor architecture from that running the compiler.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 下载并解压 LevelDB 的基本步骤与 [第 1 章](ch01.html "第 1 章。下载 LevelDB 并在 OS X 上构建") 中所述的相同，即
    *下载 LevelDB 并在 OS X 上构建*，但我们将重新构建库，并且需要根据 iOS 进行一些构建步骤的调整。为 iOS 构建被称为 **交叉编译**，因为生成的代码是为与编译器运行的处理器架构不同的架构。
- en: Building the static LevelDB library for iOS
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 iOS 构建静态 LevelDB 库
- en: 'To start with, we are going to rebuild the `libleveldb.a` file. This time,
    we are building without snappy and building for multiple architectures: the 32
    bit x86 for the simulator and armv6 and armv7 for iOS devices. We''ll finish by
    renaming it for iOS.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将重新构建 `libleveldb.a` 文件。这次，我们将不带 snappy 进行构建，并为多个架构构建：模拟器的 32 位 x86 和 iOS
    设备的 armv6 和 armv7。最后，我们将将其重命名为 iOS。
- en: 'First up, remove snappy compression in a terminal in your snappy directory:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在 snappy 目录的终端中移除 snappy 压缩：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now change the directory back to your LevelDB source and clean, then try making
    for iOS. If you are using LevelDB 1.10, this will fail due to a bug in the makefile:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将目录切换回您的 LevelDB 源目录，并清理，然后尝试为 iOS 构建。如果您使用的是 LevelDB 1.10，这将因 makefile 中的错误而失败：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The bug that occurs in LevelDB 1.10 is fixed in LevelDB 1.14.0
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: LevelDB 1.10 中出现的错误已在 LevelDB 1.14.0 中修复
- en: 'The makefile included with LevelDB v1.10 has a bug (logged as issue 177 [https://code.google.com/p/leveldb/issues/detail?id=177](https://code.google.com/p/leveldb/issues/detail?id=177)),
    because the command-line compilers moved after Xcode 4.3\. Apple moved these several
    times and so different vintages of open source projects run into this problem.
    You can grab the associated `MakefileASD` from the Packt Publishing website or
    edit a copy of makefile as described:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: LevelDB v1.10 版本中包含的 makefile 存在一个错误（记录为问题 177 [https://code.google.com/p/leveldb/issues/detail?id=177](https://code.google.com/p/leveldb/issues/detail?id=177)），因为命令行编译器在
    Xcode 4.3 之后移动了。苹果将这些编译器移动了多次，因此不同的开源项目版本会遇到这个问题。您可以从 Packt Publishing 网站获取相关的
    `MakefileASD` 或按照以下描述编辑 makefile 的副本：
- en: 'Open makefile in a text editor and go down to the end where there is a section
    starting with:'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开 makefile，并向下滚动到以下部分：
- en: '[PRE2]'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You need to change the two lines starting with:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要更改以下开始的两个行：
- en: '[PRE3]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: And just remove the `$(DEVICEROOT)/usr/bin/` so they start with `$(CC)` and
    `$(CXX)`.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 并且只需移除 `$(DEVICEROOT)/usr/bin/`，使它们从 `$(CC)` 和 `$(CXX)` 开始。
- en: 'Assuming you save this file as `MakefileASD`, you can repeat the make:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设您将此文件保存为 `MakefileASD`，您可以重复 make：
- en: '[PRE4]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This generates and then copies the static library `libleveldb_IOS.a` with the
    standard C++11 libc++ library, instead of the default, so it matches a default
    Xcode project. If you look at the log, you will see the `lipo` command is used
    to combine binaries of different processor type. You can also use `lipo` to check
    a library:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成并复制静态库 `libleveldb_IOS.a`，使用标准的 C++11 libc++ 库，而不是默认库，因此它与默认的 Xcode 项目相匹配。如果您查看日志，您将看到使用了
    `lipo` 命令来组合不同处理器类型的二进制文件。您也可以使用 `lipo` 检查库：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Lipo can inspect or operate on either individual object files or compiled libraries.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Lipo 可以检查或操作单个目标文件或编译库。
- en: Creating a minimal iOS Testbed
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建最小的 iOS 测试平台
- en: To start with, we're going to create the simplest iOS program possible that
    can run and show feedback on the device. It will just display an alert to indicate
    we have made a database.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个尽可能简单的 iOS 程序，该程序可以在设备上运行并显示反馈。它将仅显示一个警报，表示我们已创建数据库。
- en: If you're keeping things together with a workspace, as recommended in an earlier
    chapter, open up that workspace in Xcode.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您像前一章中推荐的那样使用工作区来组织项目，请在 Xcode 中打开该工作区。
- en: Now navigate to **File** | **New** | **Project…** which presents a template
    chooser. Choose an iOS application in the left panel and click on **Empty Application**
    in the icons provided, then click on **Next**. Leave the **Use Automatic Reference
    Counting** checkbox checked and uncheck **Include Unit Tests**. Make sure you
    specify the **Product Name** and **Company Identifier**. You will see as you type
    in those entries that the Bundle Identifier is being generated from them, for
    example, `Packt.LevelDB-iOS-Sample02`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，导航到**文件** | **新建** | **项目…**，这将显示模板选择器。在左侧面板中选择 iOS 应用程序，然后点击提供的图标中的**空应用程序**，然后点击**下一步**。确保勾选**使用自动引用计数**复选框，并取消勾选**包含单元测试**。确保指定**产品名称**和**公司标识符**。当你输入这些条目时，你会看到捆绑标识符是从它们生成的，例如，`Packt.LevelDB-iOS-Sample02`。
- en: Click in the project navigator to select the **AppDelegate** (for example, `GSwLDBAppDelegate.m`)
    source. This is the only program source we're going to customize for this test.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目导航器中点击以选择**AppDelegate**（例如，`GSwLDBAppDelegate.m`）源文件。这是我们为这次测试将要定制的唯一程序源文件。
- en: 'For a simple test like this we just need to customize the method `application:
    didFinishLaunchingWithOptions` which initially contains:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '对于这样一个简单的测试，我们只需要定制方法 `application: didFinishLaunchingWithOptions`，它最初包含：'
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Before the `return` statement, add the lines:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `return` 语句之前，添加以下行：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Choose one of the **Simulator** schemes from the pop-up near the **Run** button.
    And click on **Run** to compile and see the app run and show the little alert.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 从**运行**按钮附近的弹出菜单中选择一个**模拟器**方案，然后点击**运行**以编译并看到应用程序运行并显示小警报。
- en: Adding LevelDB to the iOS Testbed
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 LevelDB 添加到 iOS 测试平台
- en: 'We basically repeat the steps done for the OS X project:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们基本上重复了为 OS X 项目所做的步骤：
- en: Add the include paths to find the LevelDB headers, `/usr/local/include`, into
    the **User Header Search Paths**
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将查找 LevelDB 标头的包含路径 `/usr/local/include` 添加到**用户头文件搜索路径**
- en: Add the library `/usr/local/lib/libleveldb_IOS.a` into the **Link Binary With
    Libraries** panel
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将库 `/usr/local/lib/libleveldb_IOS.a` 添加到**链接二进制与库**面板
- en: Add `/usr/local/lib` to the **Library Search Paths**
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `/usr/local/lib` 添加到**库搜索路径**
- en: To include some C++ code into our Objective-C file we need to tell the compiler
    to treat it as Objective-C++ which is done by changing the file extension from
    `.m` to `.mm`. Click on the filename in the project navigator and hit *Enter*
    to be able to edit the name.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要将一些 C++ 代码包含到我们的 Objective-C 文件中，我们需要告诉编译器将其视为 Objective-C++，这可以通过将文件扩展名从 `.m`
    更改为 `.mm` 来实现。在项目导航器中点击文件名，然后按 *Enter* 键以能够编辑名称。
- en: 'Now you can add the `#include` statements as we did in `Sample01`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以像在 `Sample01` 中那样添加 `#include` 语句：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add the same database statements as we did in OS X, so the entire method looks
    like the following code:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 添加与我们在 OS X 中所做的相同的数据库语句，这样整个方法看起来就像以下代码：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You can again click on **Run** and see that this runs within the simulator.
    After it runs, go and have a look in the directory `/tmp/testdbios` and you will
    see your files created there. However, this works only because the simulator is
    running with full access to your OS X filesystem. You can't create files in arbitrary
    directories in this way on an iOS device.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以再次点击**运行**并看到它在模拟器中运行。运行后，去查看目录 `/tmp/testdbios`，你将看到那里创建的文件。然而，这之所以可行，是因为模拟器是以对
    OS X 文件系统完全访问的方式运行的。你无法以这种方式在 iOS 设备上的任意目录中创建文件。
- en: 'Plug in a registered iOS device and change the **Scheme** to point to that
    device so you can run on the device. Now run the application. You will see the
    application appear but not the expected alert. The Xcode **Output** window shows
    an error message like:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 连接一个已注册的 iOS 设备，并将**方案**更改为指向该设备，以便可以在设备上运行应用程序。现在运行应用程序。你会看到应用程序出现，但没有预期的警报。Xcode
    的**输出**窗口显示一个错误消息，例如：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is because the app can't access the path `/tmp`. The iOS filesystem is
    guarded with a **sandbox** for every application and within that are some directories
    with different significance to the OS. Some are caches that can be flushed without
    your application being told if space runs low. Some are synchronized to iCloud.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为应用程序无法访问路径 `/tmp`。iOS 文件系统为每个应用程序都配备了**沙盒**，其中包含一些对操作系统具有不同意义的目录。其中一些是缓存，当空间不足时可以清除，而无需通知你的应用程序。还有一些是同步到
    iCloud 的。
- en: For now, we will put our data into the standard cache area `NSCachesDirectory`
    (which currently maps to `Library/Caches`). This is for temporary data and may
    be flushed.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将数据放入标准缓存区域 `NSCachesDirectory`（当前映射到 `Library/Caches`），这是用于临时数据，可能会被清除。
- en: 'Add the following helper method earlier in your `GSwLDBAppDelegate.mm` source
    file:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 `GSwLDBAppDelegate.mm` 源文件中尽早添加以下辅助方法：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now fix our database opening code, replacing the line:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在修复我们的数据库打开代码，替换以下行：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'With these two lines, which use our helper to find the cache directory:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这两行代码，这些代码使用我们的辅助方法来查找缓存目录：
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Running on the device now will work and show the alert. Running on the simulator
    still works but is putting the file in a location that will vary. If you put a
    breakpoint on the last line you can see the value of `tempPath` in the debugger
    on a device, which will appear as:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在设备上运行将正常工作并显示警报。在模拟器上运行仍然有效，但会将文件放在一个会变化的位置。如果你在最后一行设置断点，你可以在设备上的调试器中看到 `tempPath`
    的值，它将显示为：
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'But in the simulator, it''s an absolute path on your desktop, like:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 但在模拟器中，它是在你的桌面上的绝对路径，例如：
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In this path, the simulator type varies and the next directory down is the iOS
    version, then eventually the library directory from which it's the same as on
    a device.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个路径中，模拟器类型会变化，下一个目录是 iOS 版本，然后最终是库目录，这与设备上的相同。
- en: Summary
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Once again we built the LevelDB static library and learned how to choose a different
    standard C++ library to match Xcode's defaults. Creating a trivial iOS application,
    we were able to link it with a LevelDB library suitable for both simulator and
    iOS devices. We then saw how that runs in the simulator compared to the sandboxed
    filesystem of a device.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 再次构建 LevelDB 静态库，并学习了如何选择一个不同的标准 C++ 库以匹配 Xcode 的默认设置。创建一个简单的 iOS 应用程序，我们能够将其与适用于模拟器和
    iOS 设备的 LevelDB 库链接起来。然后我们看到了它在模拟器中的运行情况与设备上沙盒文件系统的对比。
