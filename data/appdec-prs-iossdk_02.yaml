- en: Chapter 2. Parse Objects and Queries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章：Parse 对象和查询
- en: Parse helps you to manage your complete backend structure for mobile applications
    and discard the requirement of developing complex server-side code and their maintenance.
    Parse provides you with the database structures in the form of objects. It saves
    all your data in the form of objects and will return the same object while retrieving
    back from Parse.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Parse 帮助你管理移动应用程序的完整后端结构，并取消开发复杂服务器端代码及其维护的需求。Parse 以对象的形式提供数据库结构。它以对象的形式保存所有你的数据，并在从
    Parse 检索时返回相同的对象。
- en: Every application has a different and specific **Application ID** associated
    with the **Client Key**, which remains same for all the applications of the same
    user.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 每个应用程序都有一个与 **Client Key** 相关的不同且特定的 **Application ID**，对于同一用户的同一应用程序，该 ID 保持不变。
- en: Parse is based on object-oriented principles. All the operations on Parse will
    be done in the form of objects. Parse saves your data in the form of objects you
    send, and helps you to fetch the data in the same format again. In this chapter,
    you will learn about objects and operations that can be performed on Parse objects.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Parse 基于面向对象的原则。所有对 Parse 的操作都将以对象的形式进行。Parse 以你发送的对象的形式保存你的数据，并帮助你以相同的格式再次获取数据。在本章中，你将了解对象以及可以在
    Parse 对象上执行的操作。
- en: In this chapter, we will learn how to work with Parse objects along with writing
    queries to set and get data from Parse.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何与 Parse 对象一起工作，并编写查询以从 Parse 设置和获取数据。
- en: Parse objects
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Parse 对象
- en: All the data in Parse is saved in the form of PFObject. When you fetch any data
    from Parse by firing a query, the result will be in the form of PFObject. The
    detailed concept of PFObject is explained in the following section.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Parse 中的所有数据都以 PFObject 的形式保存。当你通过执行查询从 Parse 获取任何数据时，结果将以 PFObject 的形式呈现。PFObject
    的详细概念将在以下章节中解释。
- en: PFObject
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PFObject
- en: Data stored on Parse is in the form of objects and it's developed around PFObject.
    PFObject can be defined as the key-value (dictionary format) pair of JSON data.
    The Parse data is schemaless, which means that you don't need to specify ahead
    of time what keys exist on each PFObject. Parse backend will take care of storing
    your data simply as a set of whatever key-value pair you want.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 存储在 Parse 上的数据以对象的形式存在，并且围绕 PFObject 开发。PFObject 可以定义为 JSON 数据的关键值（字典格式）对。Parse
    数据是无模式的，这意味着你不需要提前指定每个 PFObject 上存在的键。Parse 后端将负责以你想要的任意键值对集合的形式简单地存储你的数据。
- en: 'Let''s say you are tracking the visited count of the username with a user ID
    using your application. A single PFObject could contain the following code:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在使用你的应用程序跟踪具有用户 ID 的用户名的访问次数。一个单一的 PFObject 可以包含以下代码：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Parse accepts only string as `Key`. Values can be strings, numbers, Booleans,
    or even arrays, and dictionaries—anything that can be JSON encoded.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Parse 只接受字符串作为 `Key`。值可以是字符串、数字、布尔值，甚至是数组、字典——任何可以 JSON 编码的内容。
- en: The class name of PFObject is used to distinguish different sorts of data. Let's
    say you call the `visitedCounts` object of the user. Parse recommends you to write
    your class name `NameYourClassLikeThis` and `nameYourKeysLikeThis` just to provide
    readability to the code. As you have seen in the previous example, we have used
    `visitedCounts` to represent the visited count key.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: PFObject 的类名用于区分不同类型的数据。比如说，你调用用户的 `visitedCounts` 对象。Parse 建议你编写类名 `NameYourClassLikeThis`
    和 `nameYourKeysLikeThis`，以便提供代码的可读性。正如你在前面的示例中看到的，我们使用了 `visitedCounts` 来表示访问次数键。
- en: Operations on Parse objects
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对 Parse 对象的操作
- en: You can perform save, update, and delete operations on Parse objects. Following
    is the detailed explanation of the operations that can be performed on Parse objects.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以对 Parse 对象执行保存、更新和删除操作。以下是对可以在 Parse 对象上执行的操作的详细说明。
- en: Saving objects
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保存对象
- en: 'To save your `User` table on the Parse Cloud with additional fields, you need
    to follow the coding convention similar to the `NSMutableDictionary` method. After
    updating the data you have to call the `saveInBackground` method to save it on
    the Parse Cloud. Here is the example that explains how to save additional data
    on the Parse Cloud:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Parse 云上保存你的 `User` 表并添加额外的字段，你需要遵循类似于 `NSMutableDictionary` 方法的编码约定。更新数据后，你必须调用
    `saveInBackground` 方法将其保存到 Parse 云。以下是一个示例，说明如何在 Parse 云上保存额外的数据：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Just after executing the preceding piece of code, your data is saved on the
    Parse Cloud. You can check your data in **Data Browser** of your application on
    Parse. It should be something similar to the following line of code:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行上述代码后，您的数据已保存到Parse Cloud。您可以在Parse应用程序的**数据浏览器**中检查您的数据。它应该类似于以下代码行：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'There are two things to note here:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两点需要注意：
- en: You don't have to configure or set up a new class called User before running
    your code. Parse will automatically create the class when it first encounters
    it.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在运行您的代码之前，您不需要配置或设置一个新的名为User的类。Parse将在第一次遇到它时自动创建该类。
- en: 'There are also a few fields you don''t need to specify, those are provided
    as a convenience:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有一些字段您不需要指定，这些字段作为便利提供：
- en: '`objectId` is a unique identifier for each saved object.'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`objectId`是每个保存对象的唯一标识符。'
- en: '`createdAt` and `updatedAt` represent the time that each object was created
    and last modified in the Parse Cloud. Each of these fields is filled in by Parse,
    so they don''t exist on PFObject until a save operation has completed.'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`createdAt`和`updatedAt`表示每个对象在Parse Cloud中被创建和最后修改的时间。这些字段中的每一个都是由Parse填充的，因此它们在PFObject上不存在，直到保存操作完成。'
- en: Note
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can provide additional logic after the success or failure of the callback
    operation using the `saveInBackgroundWithBlock` or `saveInBackgroundWithTarget:selector:`
    methods provided by Parse:'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以使用Parse提供的`saveInBackgroundWithBlock`或`saveInBackgroundWithTarget:selector:`方法在回调操作成功或失败后提供额外的逻辑：
- en: '[PRE3]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.PacktPub.com](http://www.PacktPub.com). If you
    purchased this book elsewhere, you can visit [http://www.PacktPub.com/support](http://www.PacktPub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.PacktPub.com](http://www.PacktPub.com)的账户下载所有已购买的Packt书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.PacktPub.com/support](http://www.PacktPub.com/support)并注册，以便将文件直接通过电子邮件发送给您。
- en: Fetching objects
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取对象
- en: To fetch the saved data from the Parse Cloud is even easier than saving data.
    You can fetch the data from the Parse Cloud in the following way.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从Parse Cloud获取保存的数据甚至比保存数据更容易。您可以通过以下方式从Parse Cloud获取数据。
- en: 'You can fetch the complete object from its `objectId` using PFQuery. Methods
    to fetch data from the cloud are asynchronous. You can implement this either by
    using block-based or callback-based methods provided by Parse:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用PFQuery从其`objectId`获取完整对象。从云中获取数据的方法是异步的。您可以通过使用Parse提供的基于块的或基于回调的方法来实现：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s analyze each line in here, as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐行分析如下：
- en: 'Line 1: It creates a query object pointing to the class name given in the argument.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第1行：它创建一个指向参数中给出的类名的查询对象。
- en: 'Line 2: It calls an asynchronous method on the query object created in line
    1 to download the complete object for `objectId`, provided as an argument. As
    we are using the block-based method, we can provide code inside the block, which
    will execute on success or failure.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第2行：它在第1行创建的查询对象上调用异步方法，以获取作为参数提供的`objectId`的完整对象。由于我们使用的是基于块的方法，我们可以在块内提供代码，该代码将在成功或失败时执行。
- en: 'Line 3: It reads data from `PFObject` that we got in response to the query.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第3行：它从查询响应中获取的`PFObject`读取数据。
- en: 'Parse provides some common values of all Parse objects as properties:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Parse提供了一些所有Parse对象的公共值作为属性：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To refresh the current Parse object, type:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要刷新当前Parse对象，请输入：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This method can be called on any Parse object, which is useful when you want
    to refresh the data of the object. Let's say you want to re-authenticate a user,
    so you can call the `refresh` method on the user object to refresh it.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法可以在任何Parse对象上调用，这在您想要刷新对象数据时很有用。比如说，您想重新验证用户，那么您可以在用户对象上调用`refresh`方法来刷新它。
- en: Saving objects offline
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 离线保存对象
- en: 'Parse provides you with the functions to save your data when the user is offline.
    So when the user is not connected to the Internet, the data will be saved locally
    in the objects, and as soon as the user is connected to the Internet, data will
    be saved automatically on the Parse Cloud. If your application is forcefully closed
    before establishing the connection, Parse will try again to save the object next
    time the application is opened. For such operations, Parse provides you with the
    `saveEventually` method, so that you will not lose any data even when the user
    is not connected to the Internet. Eventually all calls are executed in the order
    the request is made. The following code demonstrates the `saveEventually` call:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Parse为你提供了在用户离线时保存数据的函数。因此，当用户未连接到互联网时，数据将保存在本地对象中，一旦用户连接到互联网，数据将自动保存到Parse云上。如果你的应用程序在建立连接之前被强制关闭，Parse将在下次应用程序打开时再次尝试保存对象。对于此类操作，Parse为你提供了`saveEventually`方法，这样即使用户未连接到互联网，你也不会丢失任何数据。最终所有调用都是按照请求的顺序执行的。以下代码演示了`saveEventually`调用：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Updating objects
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新对象
- en: For updating objects on Parse, we just need to feed the new data to Parse by
    calling any of the save functions.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在Parse上更新对象，我们只需要通过调用任何保存函数将新数据提供给Parse。
- en: 'For example, suppose you have `objectId` of the object saved on Parse. We can
    fetch the corresponding `PFObject` using `PFQuery` from Parse:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你有一个保存在Parse上的对象的`objectId`。我们可以使用Parse的`PFQuery`获取相应的`PFObject`：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: After executing the previous code, the Parse client will automatically detect
    the fields that are changed and will send only the changed fields to Parse for
    update. Here, we are using the `saveInBackground` method to asynchronously save
    our data on the Parse Cloud.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前面的代码后，Parse客户端将自动检测已更改的字段，并将仅更改的字段发送到Parse进行更新。在这里，我们使用`saveInBackground`方法异步地将我们的数据保存到Parse云上。
- en: Updating counters
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新计数器
- en: 'In some cases, you may want to update the counters such as in the case of a
    game score. Then, in those cases, for incrementing the value of the key, you can
    use the `incrementKey` method, and for decrementing the value, you can use the
    `decrementKey` method over PFObject:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，你可能需要更新计数器，例如在游戏得分的情况下。然后，在这些情况下，为了增加键的值，你可以使用`incrementKey`方法，而对于减少值，你可以使用PFObject上的`decrementKey`方法：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can even increase or decrease the value of counters by any specific number
    by using the following line of code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以使用以下行代码按任何特定数字增加或减少计数器的值：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The previous line of code will increment the `"score"` key by `8`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 上一行代码将`"score"`键增加`8`。
- en: Storing data in an array format
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以数组格式存储数据
- en: 'To store data in array format, Parse provides several methods for saving the
    data. To add the data into your existing value of key, you can use the following
    code snippet. This code will add the `"flying"` object in your `"skills"` key:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要以数组格式存储数据，Parse提供了几种保存数据的方法。要将数据添加到键的现有值中，你可以使用以下代码片段。此代码将`"flying"`对象添加到`"skills"`键中：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following line of code will add the provided array of objects to the existing
    array on the cloud. (It can have duplicate data for the value of key.):'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '以下行代码将提供的对象数组添加到现有的云数组中。（键的值可以包含重复数据）： '
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the previous line of code, the data of the array will be appended to the
    existing cloud data without any check for the uniqueness of the value of the array.
    In case you want to avoid the duplicate values to be saved on the cloud, you can
    use the `addUniqueObjectsFromArray` method to save your array. This method will
    ensure that only unique values are saved on the cloud for the key. The following
    line of code will add the provided array of objects to the existing array if they
    are not already added:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一行代码中，数组的数据将被追加到现有的云数据中，而不检查数组值的唯一性。如果你想要避免在云上保存重复的值，你可以使用`addUniqueObjectsFromArray`方法来保存你的数组。此方法将确保只为键保存唯一的值。以下行代码将在提供的对象数组尚未添加的情况下将其添加到现有数组中：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Deleting objects
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除对象
- en: 'The following line of code will help you to delete objects from the Parse Cloud.
    This method will delete your object asynchronously:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行代码将帮助你从Parse云中删除对象。此方法将异步删除你的对象：
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You can use the `deleteInBackgroundWithBlock:` method to get a callback after
    the deletion of the object.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`deleteInBackgroundWithBlock:`方法在对象删除后获得回调。
- en: 'The following code will delete the object in the background and return the
    success or error message in response:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将删除背景中的对象，并返回响应中的成功或错误消息：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Relations and data types
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关系和数据类型
- en: Just like our relations in the database, we have multiple tables that have a
    relationship with each other. Parse provides us with the facility to establish
    relations in between our Parse classes as well. Relations in Parse are explained
    in detail in the following section.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们的数据库中的关系一样，我们有多张相互关联的表。Parse为我们提供了在Parse类之间建立关系的便利。Parse中的关系将在以下部分中详细解释。
- en: Relations
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关系
- en: You can add a relationship between two Parse objects. To implement this, we
    can add one `PFObject` as the value of another `PFObject`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在两个Parse对象之间添加关系。为此，我们可以在另一个`PFObject`中将一个`PFObject`作为值添加。
- en: 'Let''s take an example, we have both `Course` and `Student` objects, and we
    can associate a course with a student by establishing the relationship between
    both of their classes:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举一个例子，我们有两个`Course`和`Student`对象，我们可以通过在它们的类之间建立关系来将课程与学生关联起来：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Relations between objects can also be achieved by using `objectId`s as well:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`objectId`也可以实现对象之间的关系：
- en: '[PRE17]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Data types
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据类型
- en: Parse supports all the data type formats such as `NSString`, `NSData`, `NSNumber`,
    `PFObject`, `NSDate`, `NSNull`, and `NSData`. You can even create nested objects
    in the form of `NSDictionary` and `NSArray` to store structured data within a
    single `PFObject`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Parse支持所有数据类型格式，如`NSString`、`NSData`、`NSNumber`、`PFObject`、`NSDate`、`NSNull`和`NSData`。您甚至可以使用`NSDictionary`和`NSArray`的形式创建嵌套对象，以在单个`PFObject`中存储结构化数据。
- en: 'Let''s create some random variables shown as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一些如下所示的随机变量：
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Working with queries
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理查询
- en: To fetch the saved data from the cloud, we can use the queries to get the required
    data.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要从云端获取保存的数据，我们可以使用查询来获取所需的数据。
- en: 'Let''s begin with simple queries. We can fetch data from Parse asynchronously
    by executing these simple lines of code:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从简单的查询开始。我们可以通过执行以下简单的代码行异步地从Parse获取数据：
- en: '[PRE19]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Suppose you want to filter the results while fetching from Parse, you can add
    conditions over the query object and retrieve the `NSArray` of the filtered `PFObject`.
    You can use the following method to find the data from the Parse Cloud:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想在从Parse获取结果时过滤结果，您可以在查询对象上添加条件，并检索过滤后的`PFObject`的`NSArray`。您可以使用以下方法从Parse云端查找数据：
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Or you can use:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 或者您可以使用：
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Both methods are asynchronous and will execute callback on the main thread.
    There is one method called `[query findObjects]`; this method will block the thread
    on which it is executed.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法都是异步的，将在主线程上执行回调。有一个名为`[query findObjects]`的方法；此方法将阻塞执行它的线程。
- en: 'For example, if you want to fetch the list of students registered for an MBA
    course, we can use the following code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您想获取注册MBA课程的学生的列表，我们可以使用以下代码：
- en: '[PRE22]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Using predicates
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用谓词
- en: 'To add constraint to the result of the query we can use the following methods:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要向查询结果添加约束，我们可以使用以下方法：
- en: '[PRE23]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The following types of predicate features are supported by Parse:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Parse支持以下类型的谓词功能：
- en: You can use comparisons such as =, !=, <, >, <=, >=, and BETWEEN with a key
    and a constant
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用与键和常量一起使用的比较，如=、!=、<、>、<=、>=和BETWEEN
- en: Containment predicates, such as x IN {1, 2, 3}
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含谓词，例如x IN {1, 2, 3}
- en: Key-existence predicates, such as x IN SELF
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存在性谓词，例如x IN SELF
- en: BEGINSWITH expressions
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以BEGINWITH开头的表达式
- en: Compound predicates with AND, OR, and NOT
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用AND、OR和NOT组合的复合谓词
- en: Sub-queries with "key IN %@", subquery
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用“key IN %@”的子查询，subquery
- en: 'The following types of predicates are not supported by Parse:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下类型的谓词不受Parse支持：
- en: Aggregate operations, such as ANY, SOME, ALL, or NONE
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚合操作，例如ANY、SOME、ALL或NONE
- en: Regular expressions, such as LIKE, MATCHES, CONTAINS, or ENDSWITH
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正则表达式，如LIKE、MATCHES、CONTAINS或ENDSWITH
- en: Predicates comparing one key to another
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较两个键的谓词
- en: Complex predicates with many ORed clauses
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有许多OR子句的复杂谓词
- en: Adding query constraints
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加查询约束
- en: 'There are various ways to add constraint to the query results. Following are
    the few ways to implement constraints:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种方法可以添加查询结果的约束。以下是一些实现约束的方法：
- en: 'To find all the students excluding the specified one in the query, Parse provides
    the `whereKey:notEqualTo:` method to get the selective filtered data from the
    Parse Cloud. This method is available in various combinations. The following code
    will get the objects where the student name is not John Simon:'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了找到查询中排除的指定学生之外的所有学生，Parse提供了一个`whereKey:notEqualTo:`方法来从Parse云端获取选择性过滤数据。此方法有多种组合方式。以下代码将获取学生姓名不是John
    Simon的对象：
- en: '[PRE24]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We can add multiple constraints to the same query, the resultant objects will
    match to all the constraints:'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在同一个查询中添加多个约束，结果对象将匹配所有约束：
- en: '[PRE25]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You can limit the result of the query by setting the `limit` of the query object:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过设置查询对象的`limit`来限制查询的结果：
- en: '[PRE26]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'If you want to get only the first object of the result, you can use `getFirstObject`
    or `getFirstObjectInBackground`. Both methods will return the first object from
    the array of objects received in response:'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您只想获取结果中的第一个对象，可以使用`getFirstObject`或`getFirstObjectInBackground`。这两种方法都将返回从响应中接收到的对象数组中的第一个对象：
- en: '[PRE27]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You can skip the result by setting `skip`. This can be used for pagination
    as well:'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过设置`skip`来跳过结果。这也可以用于分页：
- en: '[PRE28]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Parse provides you with an easy way of sorting numbers and strings. It allows
    you to control the order in which the results are returned:'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Parse提供了一个简单的方法来排序数字和字符串。它允许您控制返回结果的顺序：
- en: '[PRE29]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You can filter the results by providing the comparisons in the queries:'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过在查询中提供比较来过滤结果：
- en: '[PRE30]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You can filter the results based on the different values as well. You can provide
    the array of the values that should appear in the results:'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以根据不同的值过滤结果。您可以为结果提供应出现在结果中的值的数组：
- en: '[PRE31]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Relational and complex queries
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关系和复杂查询
- en: You can fire the queries on relational schema to perform operations on the Parse
    data. Following are the various ways to fetch data from Parse under a relational
    model.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在关系模式上执行操作来触发查询。以下是在关系模型下从Parse获取数据的各种方式：
- en: Array-based queries
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于数组的查询
- en: 'If you have keys with data in the array format, you can find objects where
    array contains value `x`:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有数组格式的数据键，您可以找到包含值`x`的对象：
- en: '[PRE32]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'If you want to fetch the data matching multiple values of array, you can use
    the following code:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想获取匹配数组多个值的匹配数据，可以使用以下代码：
- en: '[PRE33]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: String-based queries
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于字符串的查询
- en: 'You can use `where:hasPrefix:` to add the constraint to the query result:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`where:hasPrefix:`在查询结果中添加约束：
- en: '[PRE34]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Relational queries
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关系查询
- en: 'You can fetch the objects from Parse where the fields match the particular
    PFObject. Parse provides a method `whereKey:equalTo:` to fetch data from a query.
    Let''s say you want to fetch a list of students who are enrolled for the MBA course:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从Parse中获取与特定PFObject字段匹配的对象。Parse提供了一个`whereKey:equalTo:`方法来从查询中获取数据。假设您想获取已报名MBA课程的学生名单：
- en: '[PRE35]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'In case you want to fetch multiple types of related objects in a single query,
    Parse provides you with the `includeKey:` method to fetch these kinds of relational
    results. For example, if you want to fetch the names of the top-scorer students,
    and you want to fetch their courses at the same time, you can use the following
    code snippet to get the desired results:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在单个查询中获取多种相关对象，Parse提供了一个`includeKey:`方法来获取这类关系结果。例如，如果您想获取得分最高的学生名单，并且想同时获取他们的课程，您可以使用以下代码片段来获取所需结果：
- en: '[PRE36]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Counting objects
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计数对象
- en: 'There can be some cases in which you just need to know the count of the resultant
    array. For this you don''t need to query the complete data using the `findObjects`
    method. Parse provides you with the `countObjects` method to fetch the count of
    the data available on Parse for the query:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，您可能只需要知道结果数组的计数。为此，您不需要使用`findObjects`方法查询完整数据。Parse提供了一个`countObjects`方法来获取Parse上查询数据的计数：
- en: '[PRE37]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Compound queries
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复合查询
- en: If you want to fetch the objects as the result of several queries, Parse provides
    the `orQueryWithSubqueries:` method to fetch these kinds of result.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想获取多个查询的结果对象，Parse提供了一个`orQueryWithSubqueries:`方法来获取这类结果。
- en: 'Let''s say you need to get the list of names of the top-scorer and the least-scorer
    students; the following code snippet gives the desired output:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您需要获取得分最高和最低学生的名单；以下代码片段给出了所需输出：
- en: '[PRE38]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Caching queries
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓存查询
- en: Caching the data is a process where we store the data received from the remote
    API calls temporally on a device. So, for the same request, you do not need to
    fetch the data again and again. Caching improves the efficiency, performance,
    and reduces load on the server with minimal API calls.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存数据是一个过程，我们将从远程 API 调用接收到的数据临时存储在设备上。因此，对于相同的请求，你不需要反复获取数据。缓存通过最小化的 API 调用提高了效率、性能，并减少了服务器的负载。
- en: Once data is requested through a query from Parse, it is recommended to cache
    it, to reduce the number of hits to the Parse Cloud. You can cache the result
    on the disk. This feature will help you to show data in an offline mode or when
    the application is just launched and data is not fetched yet. Parse automatically
    handles flushing the cache when memory is low.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦通过查询从 Parse 请求数据，建议缓存它，以减少对 Parse 云的访问次数。你可以在磁盘上缓存结果。此功能将帮助你以离线模式显示数据或在应用程序刚刚启动且数据尚未获取时。
- en: 'By default, `PFQuery` doesn''t cache queries; however, you can enable caching
    of the `PFQuery` by setting the property `query.cachePolicy`. Let''s take an example,
    if network reachability is not available, you can add an automatic fallback to
    cached data:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`PFQuery` 不缓存查询；然而，你可以通过设置属性 `query.cachePolicy` 来启用 `PFQuery` 的缓存。让我们举一个例子，如果网络可达性不可用，你可以添加一个自动回退到缓存数据：
- en: '[PRE39]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Parse provides you with the following caching policies:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Parse 为你提供了以下缓存策略：
- en: '| `kPFCachePolicyIgnoreCache` | It is the default cache policy. The query does
    not load from the cache nor does it save results to the cache. |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| `kPFCachePolicyIgnoreCache` | 这是默认的缓存策略。查询既不加载缓存也不将结果保存到缓存中。|'
- en: '| `KPFCachePolicyCacheOnly` | The query only loads from the cache, ignoring
    the network. If there are no cached results, that causes a `PFError`. |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `KPFCachePolicyCacheOnly` | 查询只从缓存加载，忽略网络。如果没有缓存结果，将导致 `PFError`。|'
- en: '| `KPFCachePolicyNetworkOnly` | It does not load from the cache, but it saves
    results to the cache. |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `KPFCachePolicyNetworkOnly` | 它不加载缓存，但将结果保存到缓存中。|'
- en: '| `KPFCachePolicyCacheElseNetwork` | It tries to load from the cache, but if
    the query fails, it loads results from the network. If neither cache nor network
    succeeds, there is a `PFError`. |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `KPFCachePolicyCacheElseNetwork` | 它尝试从缓存加载，但如果查询失败，则从网络加载结果。如果缓存和网络都未成功，则会有
    `PFError`。|'
- en: '| `KPFCachePolicyNetworkElseCache` | This query first tries to load from the
    network, but if it fails, it loads results from the cache. If neither network
    nor cache succeeds, you will get a `PFError`. |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `KPFCachePolicyNetworkElseCache` | 这个查询首先尝试从网络加载，如果失败，则从缓存中加载结果。如果网络和缓存都未成功，你将得到一个
    `PFError`。|'
- en: '| `KPFCachePolicyCacheThenNetwork` | This query first loads from the cache,
    then loads from the network. In this case, the callback will be called twice—first
    with the cached results, then with the network results. Since it returns two results
    at different times, this cache policy cannot be used synchronously with `findObjects`.
    |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| `KPFCachePolicyCacheThenNetwork` | 这个查询首先从缓存加载，然后从网络加载。在这种情况下，回调将被调用两次——首先使用缓存结果，然后使用网络结果。由于它在不同时间返回两个结果，因此此缓存策略不能与
    `findObjects` 同步使用。|'
- en: 'Caching behavior can be controlled using the following operations on the cache:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下操作在缓存上控制缓存行为：
- en: 'It helps you to check the cached result for a query:'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它帮助你检查查询的缓存结果：
- en: '[PRE40]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'It clears cached results for the query object:'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它清除查询对象的缓存结果：
- en: '[PRE41]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'It clears all the cache of the `PFQuery`:'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它清除 `PFQuery` 的所有缓存：
- en: '[PRE42]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'You can control the time for which the cache result will exist:'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以控制缓存结果存在的时长：
- en: '[PRE43]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Summary
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored Parse objects and the way to query the data available
    on Parse.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了 Parse 对象以及查询 Parse 上可用数据的方式。
- en: We started by exploring Parse objects and the ways to save these objects on
    the cloud.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先探索了 Parse 对象以及将这些对象保存到云上的方法。
- en: Then, we learned about the queries which will help us to fetch the saved data
    on Parse.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们学习了查询，这些查询将帮助我们从 Parse 获取保存的数据。
- en: Finally, we saw various ways to implement queries and the constraints by which
    we can reduce the complexity of the queries.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们看到了实现查询和约束的多种方式，这些方式可以帮助我们减少查询的复杂性。
- en: In the next chapter, we will learn the various ways to save our files on the
    Parse Cloud, along with the subclassing concepts on Parse objects.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习在 Parse 云上保存我们的文件的各种方法，以及 Parse 对象的子类化概念。
