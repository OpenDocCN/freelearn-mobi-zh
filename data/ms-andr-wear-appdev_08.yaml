- en: Chapter 8. Creating Custom UI
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章 创建自定义UI
- en: '|   | *"I have said that she had no face, but that meant she had a thousand
    faces."*                                                                     
                        |   |'
  id: totrans-1
  prefs: []
  type: TYPE_TB
  zh: '|   | *"我说她没有脸，但这意味着她有一千张脸。"*                                             
                                                |   |'
- en: '|   | --*C. S. Lewis* |'
  id: totrans-2
  prefs: []
  type: TYPE_TB
  zh: '|   | --*C. S. Lewis* |'
- en: In this chapter, we will cover the design principles that are central to the
    Android Wear UI spaces and go over a few common Wear UI patterns. We then extend
    the `OnThisDay` activity to present the feed in a user-friendly format.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍对Android Wear UI空间至关重要的设计原则，并简要介绍一些常见的Wear UI模式。然后我们将扩展`OnThisDay`活动，以用户友好的格式展示信息流。
- en: Note
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The code accompanying this chapter is available for reference on GitHub ([https://github.com/siddii/mastering-android-wear/tree/master/Chapter_8](https://github.com/siddii/mastering-android-wear/tree/master/Chapter_8)).
    For the sake of brevity, only code snippets are included as needed. The reader
    is encouraged to download the referenced code from GitHub and follow along as
    they progress through the chapter.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章伴随的代码可在GitHub上参考（[https://github.com/siddii/mastering-android-wear/tree/master/Chapter_8](https://github.com/siddii/mastering-android-wear/tree/master/Chapter_8)）。为了简洁起见，仅包含所需的代码片段。鼓励读者从GitHub下载引用的代码，并在阅读本章时跟随。
- en: Android Wear UI design
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android Wear UI设计
- en: By now, it should be clear to us that wearable apps cannot always follow the
    same UI patterns that their handheld counterparts might. Wearable devices have
    a significantly smaller form factor and interacting with them places heavier constraints
    on user actions. For this reason, the Android Wear user interface APIs are functionally
    divided into *Suggest* functions and *Demand* functions.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，我们应该已经清楚，可穿戴应用并不总是可以遵循其手持设备对应的应用相同的UI模式。可穿戴设备具有显著较小的形态因素，与之交互对用户动作施加了更重的限制。因此，Android
    Wear用户界面API在功能上分为*建议*函数和*需求*函数。
- en: The *Suggest* functions are embodied by the `Context` stream—a stream of information
    presented in a manner that is proactive and suggestive. Users are shown a vertical
    list of informational cards, which can be scrolled through until the user wishes
    to interact with a specific card.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*建议* 函数体现在`Context`流中——以一种主动和提示的方式呈现的信息流。用户会看到一个信息卡片的垂直列表，可以滚动浏览，直到用户希望与特定的卡片交互。'
- en: The *Demand* functions are reflected in the cue card metaphor. A cue card can
    be opened by saying **OK Google**, or, we can open it by tapping on the background
    of the home screen. Each voice command activates a type of voice intent, which
    in turn can be associated with multiple applications.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*需求* 函数体现在提示卡隐喻中。提示卡可以通过说出“**OK Google**”来打开，或者，我们也可以通过轻触主屏幕的背景来打开它。每个语音命令激活一种语音意图，而这种意图又可以与多个应用程序相关联。'
- en: When presented with intent, the user will have the opportunity to choose which
    application they would like the intent activated for. Applications can respond
    by adding/updating a stream card or launching another application.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户面对意图时，他们将有选择他们希望激活该意图的应用程序的机会。应用程序可以通过添加/更新流卡片或启动另一个应用程序来响应。
- en: Common UI patterns
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见UI模式
- en: We will touch upon the most commonly implemented UI patterns in Android Wear
    development.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将简要介绍在Android Wear开发中最常实现的UI模式。
- en: Cards
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 卡片
- en: The cards that are displayed in the Context stream can be standard notifications,
    single-action cards, or an expandable stack that groups related notifications
    together. In each case, an icon located at the top-right edge of the card indicates
    the application that the card is associated with.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在上下文流中显示的卡片可以是标准通知、单操作卡片，或者是一个可展开的堆叠，将相关的通知分组在一起。在每种情况下，卡片右上角的位置都有一个图标，表示该卡片关联的应用程序。
- en: In some cases, a single notification card does not suffice and more details
    may be needed. A swipe from right to left can reveal detail cards in addition
    to the main Context stream card. A swipe from left to right on a card causes it
    to be removed from the Context stream.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，单个通知卡不足以满足需求，可能需要更多细节。从右向左滑动可以显示详细卡片，除了主要上下文流卡片之外。在卡片上从左向右滑动会导致它从上下文流中移除。
- en: It is noteworthy that notifications dismissed on the wearable will cause them
    to be dismissed on a paired handheld as well due to the synchronized state shared
    by paired devices.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，在可穿戴设备上取消的通知也会因为配对设备之间共享的同步状态而在配对的手持设备上取消。
- en: A card can optionally display action buttons to the right of detail cards. These
    actions may run on the wearable itself. Alternatively, they may be delegated to
    the companion handheld or they can cause a full-screen activity to run.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 卡片可以可选地显示在详细卡片右侧的操作按钮。这些操作可以在可穿戴设备上运行。或者，它们可以委托给伴侣手持设备，或者它们可以导致全屏活动运行。
- en: Countdowns and confirmations
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 倒计时和确认
- en: When a user taps on an action button shown to the right of a detail card, the
    system can display a confirmation animation when the action completes.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击显示在详细卡片右侧的操作按钮时，系统可以在操作完成后显示确认动画。
- en: In some cases, it may be desired to give the user a chance to interrupt an action
    before it executes. One way to address this is to display a customizable countdown
    animation prior to the action invocation.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，可能希望给用户一个在操作执行之前中断操作的机会。解决这一问题的方法之一是在操作调用之前显示一个可定制的倒计时动画。
- en: Some actions may be critical in nature and it may be desired to highlight this
    by showing the user a confirmation step. The user would then have to confirm their
    intention to execute the action.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一些操作可能是关键性的，可能希望通过向用户显示确认步骤来突出显示这一点。然后用户必须确认他们执行该操作的意思。
- en: As developers, we should always weigh the option to delegate any heavy lifting
    work to the companion handheld whenever it is possible to do so. If this is the
    case for an action invoked on a card in the Context stream, then we may choose
    to display an animation on the wearable once the action button has been tapped
    by the user and the corresponding app has been launched on the handheld device.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，我们应该始终权衡在可能的情况下将任何繁重的工作委托给伴侣手持设备的选项。如果对上下文流中卡片上调用的操作这样做，那么我们可以在用户点击操作按钮并在手持设备上启动相应的应用程序后，在可穿戴设备上显示动画。
- en: There is also the option to have on-card actions. These are actions that execute
    on the card itself. These are ideal when there is only one possible action that
    a tap can have. For instance, a car icon displaying on a notification showing
    an address can only imply directions and is thus a good candidate to be an on-card
    action. An on-card action should be unambiguous in its purpose.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以选择在卡片上执行操作。这些是在卡片本身上执行的操作。当只有一个可能的操作可以由点击执行时，这些操作是理想的。例如，显示在通知中的地址上的汽车图标只能表示方向，因此是一个很好的候选者，可以作为卡片上的操作。卡片上的操作在其目的上应该是明确的。
- en: The alternative (that is, when there are multiple possible actions) is to invoke
    them via action buttons to the right of a detail card. For instance, in the case
    of a person's name, an on-card action is ambiguous, so separate action buttons
    would work better, for example, for actions such as call, e-mail, show details,
    and so on.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种选择（即当有多个可能的操作时）是通过详细卡片右侧的操作按钮调用它们。例如，在人的姓名的情况下，卡片上的操作是不明确的，因此单独的操作按钮会更好，例如，用于呼叫、电子邮件、显示详细信息等操作。
- en: Card stacks
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 卡片堆叠
- en: Some cards may be related and it makes sense to group them together in a stack.
    For instance, to display new mail notifications, a card stack can group all new
    mail notifications together.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一些卡片可能相关，将它们分组在一起在堆叠中是有意义的。例如，为了显示新邮件通知，卡片堆叠可以将所有新邮件通知分组在一起。
- en: Users would click on the card stack to make it fan out and display the top edge
    of each card in the stack. Further tapping on a fanned-out card will open the
    card to its fully expanded state in the vertical list that is the Context stream.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以点击卡片堆叠使其展开并显示堆叠中每张卡片的上边缘。进一步点击展开的卡片将在上下文流中的垂直列表中将其展开到完全展开状态。
- en: When the user swipes vertically away from a card stack, all the cards in the
    stack return to their fully collapsed state and the singular stack displays again
    in the Context stream.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户垂直滑动远离卡片堆叠时，堆叠中的所有卡片都会恢复到完全折叠状态，并且单个堆叠再次在上下文中显示。
- en: 2D Pickers
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2D 选择器
- en: The 2D Picker is a flexible UI pattern used in Android Wear apps. It allows
    us to build one-dimensional lists of cards or two-dimensional grids of cards,
    as dictated by requirements.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 2D 选择器是一种灵活的 UI 模式，用于 Android Wear 应用。它允许我们根据需求构建一维卡片列表或二维卡片网格。
- en: Furthermore, the direction of the scroll can be set as either horizontal or
    vertical. Data presented to the user is distributed across pages, and each page
    then corresponds to a card.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，可以设置滚动方向为水平或垂直。呈现给用户的数据分布在页面上，然后每一页对应一张卡片。
- en: One intuitive presentation is to display a vertical list of cards to the user
    comprising (say) results of a search. Each card in the vertical list presents
    a small amount of information, and more information can be obtained by scrolling
    horizontally from it to display subsequent cards containing the remaining pages
    of information.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一种直观的展示方式是将包含（例如）搜索结果的垂直卡片列表显示给用户。垂直列表中的每个卡片都展示少量信息，并且可以通过水平滚动从它获取更多信息，以显示包含剩余信息页面的后续卡片。
- en: The 2D Picker pattern is implemented by adding an instance of a `GridViewPager`
    element to the layout of the activity in question. This pager must then have an
    adapter set for it of the `GridPagerAdapter` type.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向相关活动的布局中添加一个 `GridViewPager` 元素实例来实现 2D 选择器模式。然后，此页面必须为其设置一个 `GridPagerAdapter`
    类型的适配器。
- en: To make things simpler, an abstract class extending the `GridPageAdapter` class
    named `FragmentGridPageAdapter` defines the common behavior your adapter will
    need, so all you have to do is extend the `FragmentGridPageAdapter` class to implement
    your own adapter to provide a set of pages to populate the `GridViewPager` element
    with.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使事情更简单，一个扩展 `GridPageAdapter` 类的抽象类名为 `FragmentGridPageAdapter` 定义了您的适配器将需要的常见行为，因此您只需扩展
    `FragmentGridPageAdapter` 类来实现您自己的适配器，以提供一组页面来填充 `GridViewPager` 元素。
- en: When using a 2D Picker presentation, we must ensure that we optimize it to get
    the speed. This can be done by keeping the cards simple and minimizing the number
    of cards in the picker.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 2D 选择器演示时，我们必须确保我们优化它以获得速度。这可以通过保持卡片简单并最小化选择器中的卡片数量来实现。
- en: The 2D Picker should be destroyed when the user makes a selection. Users may
    also initiate an exit from a 2D picker by swiping down on the first card or swiping
    right on a left-most card.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户做出选择时，应该销毁 2D 选择器。用户还可以通过在第一张卡片上向下滑动或在最左侧的卡片上向右滑动来从 2D 选择器中退出。
- en: Selection lists
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择列表
- en: This is a common pattern whereby possible choices are presented in a simple
    scrollable list. Users select an item from the list and thereby invoke an action.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个常见的模式，其中可能的选项以简单的可滚动列表的形式呈现。用户从列表中选择一个项目，从而触发一个动作。
- en: The Android Wear UI library provides an implementation of a list that is optimized
    for wearables, namely the `WearableListView` element. To create a list of this
    kind, you add a `WearableListView` element to your activity's layout definition and
    then set its adapter to an instance of your custom layout implementation.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Android Wear UI 库提供了一个针对可穿戴设备优化的列表实现，即 `WearableListView` 元素。要创建此类列表，您需要将 `WearableListView`
    元素添加到您的活动布局定义中，然后将其适配器设置为您的自定义布局实现的实例。
- en: Revisiting the OnThisDay activity
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 再次访问 OnThisDay 活动
- en: Note that our initial implementation of the `OnThisDayActivity` activity from
    [Chapter 5](part0041.xhtml#aid-173721 "Chapter 5. Synchronizing Data"), *Synchronizing
    Data*, utilized a `TextView` method within a `ScrollView` method. Let's spruce
    that up using a few simple UI patterns we introduced in this chapter. We will
    intentionally keep this code simple to give you a chance to grasp the new API
    classes we use. You are encouraged to contrive use cases and experiment with more
    interesting patterns such as the 2D Picker.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们最初在 [第 5 章](part0041.xhtml#aid-173721 "第 5 章。同步数据")，*同步数据* 中实现的 `OnThisDayActivity`
    活动使用了 `ScrollView` 方法内的 `TextView` 方法。让我们使用本章中介绍的一些简单 UI 模式来改进它。我们将故意保持此代码简单，以便您有机会掌握我们使用的新的
    API 类。我们鼓励您构思用例并尝试更多有趣的模式，如 2D 选择器。
- en: Enough talk. It's time to write some code. We're now ready to improve our initial
    *On this day* feed presentation with a vertical list comprising cards. Each card
    can be dismissed by a swipe from left to right. The result is a far more usable
    application.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 谈话已经足够。现在是时候编写一些代码了。我们现在准备好通过一个包含卡片并可以左右滑动的垂直列表来改进我们的初始 *On this day* 首页展示。每个卡片都可以通过从左到右的滑动来取消。
- en: The OnThisDayActivity activity
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OnThisDayActivity 活动
- en: 'The following `showOnThisDay` method creates and sets up a `GridViewPager`
    instance that properly handles the layout depending on the display:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 `showOnThisDay` 方法创建并设置一个 `GridViewPager` 实例，该实例根据显示正确处理布局：
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `DotsPageIndicator` is a page indicator for the `GridViewPager` class that
    helps to identify the current page with respect to the available pages on the
    current row. Dots represent pages; the current page can be distinguished by a
    dot of a distinct color and/or size.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`DotsPageIndicator` 是 `GridViewPager` 类的一个页面指示器，它有助于根据当前行上的可用页面来识别当前页面。点代表页面；当前页面可以通过一个不同颜色和/或大小的点来区分。'
- en: The activity layout
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动布局
- en: 'The following activity layout shows the declaration of a `GridViewPage`r element where
    previously (in [Chapter 5](part0041.xhtml#aid-173721 "Chapter 5. Synchronizing
    Data"), *Synchronizing Data*) we had a `TextView` method within a `ScrollView`
    method:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的活动布局显示了之前（在第 5 章（*Synchronizing Data*，第 5.5.1 节）中）我们有一个 `TextView` 方法在 `ScrollView`
    方法内的声明：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We define an `OnThisDayGridPagerAdapter` class extending the `FragmentGridPagerAdapter`
    class. An instance of this class is set as the adapter attribute of the `GridViewPager`
    element. A private inner class named `Row` is used as a convenience container
    for Fragment objects:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了一个名为 `OnThisDayGridPagerAdapter` 的类，它扩展了 `FragmentGridPagerAdapter` 类。这个类的实例被设置为
    `GridViewPager` 元素的适配器属性。一个名为 `Row` 的私有内部类被用作 Fragment 对象的便利容器：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We run the application and choose the **On this day…** activity, as shown in
    the following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们运行应用程序并选择 **On this day…** 活动功能，如下面的截图所示：
- en: '![The activity layout](img/image00202.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![活动布局](img/image00202.jpeg)'
- en: 'Each item from the feed result is now presented as a card in a scrollable vertical
    list, as shown in the following screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在从源结果中获取的每个项目都显示为一个可滚动的垂直列表中的卡片，如下面的截图所示：
- en: '![The activity layout](img/image00203.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![活动布局](img/image00203.jpeg)'
- en: 'You can take a look at the second example by just scrolling vertically:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过垂直滚动查看第二个示例：
- en: '![The activity layout](img/image00204.jpeg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![活动布局](img/image00204.jpeg)'
- en: Summary
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we went over Android Wear design principles and surveyed the
    common UI patterns that the majority of wearable applications implement. We then
    put the API to use by writing some code to augment the **On this day...** activity
    of the `Today` app from [Chapter 5](part0041.xhtml#aid-173721 "Chapter 5. Synchronizing
    Data"), *Synchronizing Data*, with a `GridViewPager` component that displays a
    list of cards and lets the user interact with them.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了 Android Wear 设计原则，并调查了大多数可穿戴应用程序实现的常见 UI 模式。然后我们通过编写一些代码来使用 API，增强了来自第
    5 章（*Synchronizing Data*，第 5.5.1 节）的 `Today` 应用程序的 **On this day...** 活动功能，使用了一个显示卡片列表并允许用户与之交互的
    `GridViewPager` 组件。
