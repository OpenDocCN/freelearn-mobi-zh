- en: '*Chapter 13*: Getting Started with MVC and Collection Views'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 13 章*：MVC 和集合视图入门'
- en: In the previous chapter, you modified the cells inside the **Explore** screen,
    the **Restaurant List** screen, and the **Locations** screen to match the app
    tour in [*Chapter 9*](B17469_09_Final_VK_ePub.xhtml#_idTextAnchor133)*, Setting
    Up the User Interface*. You have completed the initial UI for the *Let's Eat*
    app, and this concludes *Part 2* of this book.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你修改了 **探索** 屏幕内、**餐厅列表** 屏幕和 **位置** 屏幕中的单元格，以匹配 [*第 9 章*](B17469_09_Final_VK_ePub.xhtml#_idTextAnchor133)
    中的应用导览，“设置用户界面”。你已经完成了 *Let's Eat* 应用的初始 UI，这标志着本书第二部分的结束。
- en: This chapter begins *Part 3* of this book, where you will focus on the code
    that makes your app work. In this chapter, you will learn about the **Model-View-Controller
    (MVC)** design pattern and how the different parts of an app interact with one
    another. Then, you'll implement a collection view programmatically (which means
    implementing it using code instead of storyboards) using a playground, to understand
    how collection views work. Finally, you'll revisit the collection views you implemented
    in the **Explore** and **Restaurant List** screens, so you can see what the differences
    are between implementing them in storyboard and implementing them programmatically.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章开始本书的第三部分，你将专注于使你的应用工作的代码。在本章中，你将学习 **模型-视图-控制器 (MVC**) 设计模式以及应用的各个部分如何相互交互。然后，你将使用
    playground 以编程方式实现集合视图（这意味着使用代码而不是 storyboards 来实现），以了解集合视图的工作原理。最后，你将回顾在 **探索**
    和 **餐厅列表** 屏幕中实现的集合视图，以便你可以看到在 storyboards 中实现它们和在编程方式中实现它们的区别。
- en: By the end of this chapter, you'll understand the MVC design pattern, learn
    how a create a collection view controller programmatically and learn how to use
    collection view delegates and data source protocols.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将理解 MVC 设计模式，学习如何以编程方式创建集合视图控制器，以及如何使用集合视图代理和数据源协议。
- en: 'The following topics will be covered:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 将涵盖以下主题：
- en: Understanding the Model-View-Controller design pattern
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解模型-视图-控制器设计模式
- en: Exploring controllers and classes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索控制器和类
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The resource files and completed Xcode project for this chapter are in the
    `Chapter13` folder of the code bundle for this book, which can be downloaded here:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的资源文件和完成的 Xcode 项目位于本书代码包的 `Chapter13` 文件夹中，可以在此处下载：
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
- en: 'Take a look at the following video to see the code in action:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 观看以下视频，看看代码的实际效果：
- en: '[https://bit.ly/3wsOeCZ](https://bit.ly/3wsOeCZ)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bit.ly/3wsOeCZ](https://bit.ly/3wsOeCZ)'
- en: Create a new playground and call it `CollectionViewBasics`. You can use this
    playground to type in and run all the code in this chapter as you go along. Before
    you do, let's take a look at the Model-View-Controller design pattern, an approach
    commonly used to write iOS apps.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的 playground 并将其命名为 `CollectionViewBasics`。你可以使用这个 playground 在阅读本章时输入和运行所有代码。在这样做之前，让我们看一下模型-视图-控制器设计模式，这是一种常用的
    iOS 应用编写方法。
- en: Understanding the Model-View-Controller design pattern
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解模型-视图-控制器设计模式
- en: 'The **Model-View-Controller** (**MVC**) design pattern is a common approach
    used to build iOS apps. MVC divides an app into three different parts:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**模型-视图-控制器**（**MVC**）设计模式是构建 iOS 应用的一种常用方法。MVC 将应用分为三个不同的部分：'
- en: '**Model**: This handles data storage and representation, and data processing
    tasks.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型**：这处理数据存储和表示，以及数据处理任务。'
- en: '**View**: This includes all the things that are on the screen that the user
    can interact with.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**：这包括用户可以与之交互的所有屏幕上的内容。'
- en: '**Controller**: This manages the flow of information between model and view.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器**：这管理模型和视图之间信息流的流动。'
- en: One notable feature of MVC is that view and model do not interact with one another;
    instead, all communication is managed by the controller.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: MVC 的一个显著特点是视图和模型不会相互交互；相反，所有通信都由控制器管理。
- en: For example, imagine you're at a restaurant. You look at a menu and choose something
    you want. Then, a waiter comes, takes your order, and sends it to the cook. The
    cook prepares your order, and, when it is done, the waiter takes the order and
    brings it out to you. In this scenario, the menu is the view, the waiter is the
    controller, and the cook is the model. Also, note that all interactions between
    you and the kitchen are only through the waiter; there is no interaction between
    you and the cook.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，想象你正在一家餐厅。你查看菜单并选择你想要的东西。然后，服务员过来，接收你的订单，并将其发送给厨师。厨师准备你的订单，当它完成时，服务员取走订单并将其带给你。在这个场景中，菜单是视图，服务员是控制器，厨师是模型。此外，请注意，你与厨房之间的所有互动都只通过服务员进行；你与厨师之间没有互动。
- en: Important Information
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: To find out more about MVC, go to [https://en.wikipedia.org/wiki/Model–view–controller](https://en.wikipedia.org/wiki/Model-view-controller).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于MVC的信息，请访问[https://en.wikipedia.org/wiki/Model–view–controller](https://en.wikipedia.org/wiki/Model-view-controller)。
- en: To see how MVC works, let's learn more about controllers and classes. You will
    see what it takes to implement a view controller that is required to manage a
    collection view, which is used in the **Explore** screen and the **Restaurant
    List** screen.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解MVC是如何工作的，让我们更多地了解控制器和类。你将看到实现一个必须管理集合视图的视图控制器需要什么，这个视图控制器用于**探索**屏幕和**餐厅列表**屏幕。
- en: Exploring controllers and classes
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索控制器和类
- en: So far, you have implemented view controller scenes in `the Main storyboard
    file` using Interface Builder. You added `ExploreViewController`, a view controller
    that manages the collection view inside the `RestaurantListViewController`, a
    view controller that manages the collection view inside the **Restaurant List**
    screen, to your project. However, you still haven't learned how the code you added
    to each view controller works, so let's look at that now.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经在`主故事板文件`中使用Interface Builder实现了视图控制器场景。你将`ExploreViewController`，一个管理`RestaurantListViewController`中集合视图的视图控制器，以及`RestaurantListViewController`，一个管理**餐厅列表**屏幕中集合视图的视图控制器，添加到了你的项目中。然而，你还没有学习如何你的代码在各个视图控制器中工作，所以现在让我们看看这一点。
- en: Tip
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: You may wish to re-read [*Chapter 10*](B17469_10_Final_VK_ePub.xhtml#_idTextAnchor155),
    *Building Your User Interface*, where you created the `ExploreViewController`
    class, and [*Chapter 11*](B17469_11_Final_VK_ePub.xhtml#_idTextAnchor171), *Finishing
    Up Your User Interface*, where you created the `RestaurantListViewController`
    class.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能希望重新阅读[*第10章*](B17469_10_Final_VK_ePub.xhtml#_idTextAnchor155)，*构建你的用户界面*，其中你创建了`ExploreViewController`类，以及[*第11章*](B17469_11_Final_VK_ePub.xhtml#_idTextAnchor171)，*完成你的用户界面*，其中你创建了`RestaurantListViewController`类。
- en: When a typical iOS app is launched, the view controller for the first screen
    to be displayed is loaded. The view controller has a `view` property, and automatically
    loads the view instance assigned to its `view` property. That view may have subviews,
    which are also loaded. If one of the subviews is a collection view, it will have
    `dataSource` and `delegate` properties. The `dataSource` property is assigned
    to an object that provides data to the collection view. The `delegate` property
    is assigned to an object that handles user interaction with the collection view.
    Typically, the view controller for the collection view will also be assigned to
    the collection view's `dataSource` and `delegate` properties. The method calls
    that a collection view will send to its view controller are declared in the `UICollectionViewDataSource`
    and `UICollectionViewDelegate` protocols. Remember that protocols only provide
    method declarations; the implementation of those method calls are in the view
    controller. The view controller will then provide the requested data for the collection
    view or handle the user interaction.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个典型的iOS应用启动时，将加载要显示的第一个屏幕的视图控制器。视图控制器有一个`view`属性，并自动加载分配给其`view`属性的视图实例。该视图可能有子视图，这些子视图也会被加载。如果一个子视图是集合视图，它将具有`dataSource`和`delegate`属性。`dataSource`属性被分配给一个为集合视图提供数据的对象。`delegate`属性被分配给一个处理与集合视图用户交互的对象。通常，集合视图的视图控制器也会被分配到集合视图的`dataSource`和`delegate`属性。集合视图将向其视图控制器发送的方法调用在`UICollectionViewDataSource`和`UICollectionViewDelegate`协议中声明。请记住，协议只提供方法声明；这些方法调用的实现是在视图控制器中。然后，视图控制器将为集合视图提供所需的数据或处理用户交互。
- en: Let's take a closer look at collection views and collection view protocols in
    the next section.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，让我们更仔细地看看集合视图和集合视图协议。
- en: Understanding collection views
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解集合视图
- en: A collection view displays an ordered collection of collection view cells using
    customizable layouts.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 收集视图通过可定制的布局显示有序的收集视图单元格集合。
- en: Important Information
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: To learn more about collection views, you can refer to [https://developer.apple.com/documentation/uikit/uicollectionview](https://developer.apple.com/documentation/uikit/uicollectionview).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于收集视图的信息，您可以参考 [https://developer.apple.com/documentation/uikit/uicollectionview](https://developer.apple.com/documentation/uikit/uicollectionview)。
- en: The layout for the collection view is dictated by `UICollectionViewFlowLayout`.
    It determines the flow direction and size of the elements in a collection view.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 收集视图的布局由 `UICollectionViewFlowLayout` 决定。它决定了收集视图中元素的方向和大小。
- en: Important Information
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: To learn more about `UICollectionViewFlowLayout`, you can refer to [https://developer.apple.com/documentation/uikit/uicollectionviewflowlayout](https://developer.apple.com/documentation/uikit/uicollectionviewflowlayout).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 `UICollectionViewFlowLayout` 的信息，您可以参考 [https://developer.apple.com/documentation/uikit/uicollectionviewflowlayout](https://developer.apple.com/documentation/uikit/uicollectionviewflowlayout)。
- en: The data displayed by a collection view is normally provided by a view controller.
    A view controller providing data for a collection view must conform to the `UICollectionViewDataSource`
    protocol. This protocol declares a list of methods that tells the collection view
    how many cells to display and what to display in each cell. It also covers the
    creation and configuration of supplementary views (such as the collection view
    section header).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 收集视图显示的数据通常由视图控制器提供。为收集视图提供数据的视图控制器必须遵守 `UICollectionViewDataSource` 协议。该协议声明了一系列方法，告诉收集视图显示多少个单元格以及每个单元格中显示什么。它还涵盖了辅助视图（如收集视图分区标题）的创建和配置。
- en: Important Information
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: To learn more about the `UICollectionViewDataSource` protocol, you can refer
    to [https://developer.apple.com/documentation/uikit/uicollectionviewdatasource](https://developer.apple.com/documentation/uikit/uicollectionviewdatasource).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 `UICollectionViewDataSource` 协议的信息，您可以参考 [https://developer.apple.com/documentation/uikit/uicollectionviewdatasource](https://developer.apple.com/documentation/uikit/uicollectionviewdatasource)。
- en: To provide user interaction, a view controller for a collection view must also
    conform to the `UICollectionViewDelegate` protocol, which declares a list of methods
    which are triggered when a user interacts with the collection view.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供用户交互，收集视图的视图控制器还必须遵守 `UICollectionViewDelegate` 协议，该协议声明了一系列在用户与收集视图交互时被触发的方法。
- en: Important Information
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: To learn more about the `UICollectionViewDelegate` protocol, you can refer to
    [https://developer.apple.com/documentation/uikit/uicollectionviewdelegate](https://developer.apple.com/documentation/uikit/uicollectionviewdelegate).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 `UICollectionViewDelegate` 协议的信息，您可以参考 [https://developer.apple.com/documentation/uikit/uicollectionviewdelegate](https://developer.apple.com/documentation/uikit/uicollectionviewdelegate)。
- en: To understand how collection views work, you'll implement a view controller
    that controls a collection view in your `CollectionViewBasics` playground. You
    will then compare this with the implementation for the view controllers in the
    **Explore** and **Restaurant List** screens in the next section. As there is no
    storyboard in the playground, you can't add UI elements the way you have done
    in previous chapters. Instead, you will add them programmatically.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解收集视图的工作原理，您将在 `CollectionViewBasics` 游乐场中实现一个控制收集视图的视图控制器。然后，您将比较下一节中 **探索**
    和 **餐厅列表** 屏幕中的视图控制器实现。由于游乐场中没有故事板，您不能像之前章节中那样添加 UI 元素。相反，您将按编程方式添加它们。
- en: Important Information
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: Adding model objects to a collection view will be covered in the next chapter,
    [*Chapter 14*](B17469_14_Final_VK_ePub.xhtml#_idTextAnchor201)*, Getting Data
    into Collection Views*.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章（[*第14章*](B17469_14_Final_VK_ePub.xhtml#_idTextAnchor201)，“将数据放入收集视图”）中，将介绍如何将模型对象添加到收集视图中。
- en: 'You''ll start by creating the `CollectionViewExampleController` class, an implementation
    of a view controller that manages a collection view. After that, you''ll create
    an instance of `CollectionViewExampleController` and make it display a collection
    view containing a single collection view cell in the playground''s live view.
    Follow these steps:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您将首先创建 `CollectionViewExampleController` 类，这是一个视图控制器，用于管理收集视图。之后，您将创建一个 `CollectionViewExampleController`
    实例，并在游乐场的实时视图中显示包含单个收集视图单元格的收集视图。按照以下步骤操作：
- en: 'Open your `CollectionViewBasics` playground that you have created at the beginning
    of this chapter. At the very top of the playground, remove the `var` statement
    and add an `import PlaygroundSupport` statement. Your playground should now contain
    the following:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您在本章开头创建的 `CollectionViewBasics` 游乐场。在游乐场的最顶部，删除 `var` 语句并添加 `import PlaygroundSupport`
    语句。您的游乐场现在应包含以下内容：
- en: '[PRE0]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the following code after the `import` statements to declare the `CollectionViewExampleController`
    class:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `import` 语句之后添加以下代码以声明 `CollectionViewExampleController` 类：
- en: '[PRE1]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This class is a subclass of `UIViewController`, a class that Apple provides
    to manage views on the screen.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此类是 `UIViewController` 的子类，这是一个苹果公司提供的用于管理屏幕上视图的类。
- en: 'Add the following code inside the curly braces to add an optional property,
    `collectionView`, to the `CollectionViewExampleController` class:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在大括号内添加以下代码以向 `CollectionViewExampleController` 类添加一个可选属性，`collectionView`：
- en: '[PRE2]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: An instance of a collection view will be assigned to this property later.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将为该属性分配一个集合视图的实例。
- en: 'Verify that your code looks like the following:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您的代码看起来如下：
- en: '[PRE3]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the next section, you'll learn how to set the number of cells for a collection
    view to display, and how to set the contents of each cell.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将学习如何设置集合视图显示的单元格数量以及如何设置每个单元格的内容。
- en: Conforming to the UICollectionViewDataSource protocol
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 遵循 `UICollectionViewDataSource` 协议
- en: A collection view displays a grid of collection view cells on the screen. However,
    before it can do this, it needs to know how many cells to display, and what to
    put in each cell. To provide this information to the collection view, you will
    make the `CollectionViewExampleController` class conform to the `UICollectionViewDataSource`
    protocol.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 集合视图在屏幕上显示一个集合视图单元格的网格。然而，在它能够这样做之前，它需要知道要显示多少个单元格以及每个单元格中要放置什么内容。为了向集合视图提供这些信息，您将使
    `CollectionViewExampleController` 类遵循 `UICollectionViewDataSource` 协议。
- en: 'This protocol has two required methods:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此协议有两个必需的方法：
- en: '`collectionView(_:numberOfItemsInSection:)` is called by the collection view
    to determine how many collection view cells should be displayed.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collectionView(_:numberOfItemsInSection:)` 由集合视图调用，以确定应显示多少个集合视图单元格。'
- en: '`collectionView(_:cellForItemAt:)` is called by the collection view to determine
    what to display in each collection view cell.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collectionView(_:cellForItemAt:)` 由集合视图调用，以确定在每个集合视图单元格中显示什么。'
- en: 'Let''s add some code to make `CollectionViewExampleController` conform to the
    `UICollectionViewDataSource` protocol. Follow these steps:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一些代码使 `CollectionViewExampleController` 遵循 `UICollectionViewDataSource`
    协议。按照以下步骤操作：
- en: 'To make `CollectionViewExampleController` adopt the `UICollectionViewDataSource`
    protocol, type a comma after the superclass declaration and then type `UICollectionViewDataSource`.
    When you are done, your code should look like the following:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使 `CollectionViewExampleController` 采用 `UICollectionViewDataSource` 协议，在超类声明后输入一个逗号，然后输入
    `UICollectionViewDataSource`。完成时，您的代码应如下所示：
- en: '[PRE4]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'An error will appear because you have not yet implemented the two required
    methods. Click on the error icon:![Figure 13.1: Editing area showing error icon'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于您尚未实现两个必需的方法，将出现错误。点击错误图标：![图13.1：显示错误图标的编辑区域
- en: '](img/Figure_13.01_B17469.jpg)'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_13.01_B17469.jpg)'
- en: 'Figure 13.1: Editing area showing error icon'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图13.1：显示错误图标的编辑区域
- en: 'The error message states that the required methods for the `UICollectionViewDataSource`
    protocol are missing. Click on the **Fix** button to add the required methods:![Figure
    13.2: Error explanation and Fix button'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误消息表明缺少 `UICollectionViewDataSource` 协议的必需方法。点击 **修复** 按钮以添加必需的方法：![图13.2：错误解释和修复按钮
- en: '](img/Figure_13.02_B17469.jpg)'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_13.02_B17469.jpg)'
- en: 'Figure 13.2: Error explanation and Fix button'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图13.2：错误解释和修复按钮
- en: 'Verify that your code looks like the following:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您的代码看起来如下：
- en: '[PRE5]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In a class definition, convention dictates that properties are declared at
    the top of the class, before any method declarations. Rearrange the code so that
    the `collectionView` property declaration is at the top, as follows:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类定义中，惯例规定属性应在类顶部声明，在所有方法声明之前。重新排列代码，使 `collectionView` 属性声明位于顶部，如下所示：
- en: '[PRE6]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In `collectionView(_:numberOfItemsInSection:)`, click on the word `code` and
    type `1`. The completed method should look as follows:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `collectionView(_:numberOfItemsInSection:)` 中，点击单词 `code` 并输入 `1`。完成的方法应如下所示：
- en: '[PRE7]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In `collectionView(_:cellForItemAt:)`, click on the word `code` and modify
    the method as follows:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `collectionView(_:cellForItemAt:)` 中，点击单词 `code` 并按如下方式修改方法：
- en: '[PRE8]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here is how this method works. Imagine you have 1,000 items to display in a
    collection view. You don't need 1,000 collection view cells; you only need just
    enough to fill the screen. Collection view cells that scroll off the top of the
    screen can be reused to display items that appear at the bottom of the screen.
    To make sure you are using the right type of cell, you use a reuse identifier
    to identify a cell type. The reuse identifier needs to be registered with the
    collection view, which you will do later. The next line of code sets the cell's
    background color to red, and the line after that returns the cell, which is then
    displayed on the screen. The process is repeated for the number of cells given
    in the first method, which, in this case, is 1.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面是这个方法的工作原理。想象一下，你需要在集合视图中显示1,000个项目。你不需要1,000个集合视图单元格；你只需要足够多的单元格来填满屏幕。滚动出屏幕顶部的集合视图单元格可以重用来显示屏幕底部的项目。为了确保你使用的是正确的单元格类型，你使用重用标识符来识别单元格类型。重用标识符需要与集合视图注册，你将在稍后进行注册。下一行代码将单元格的背景颜色设置为红色，下一行代码返回单元格，然后单元格在屏幕上显示。这个过程会重复进行，直到第一行方法中指定的单元格数量，在这种情况下是1。
- en: 'Verify that your `CollectionViewExampleController` class looks like the following:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认你的`CollectionViewExampleController`类看起来如下：
- en: '[PRE9]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You have completed the implementation of the `CollectionViewExampleController`
    class. In the next section, you'll learn how to create an instance of this class.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经完成了`CollectionViewExampleController`类的实现。在下一节中，你将学习如何创建此类的实例。
- en: Creating a CollectionViewExampleController instance
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建`CollectionViewExampleController`实例
- en: 'Now that you have declared and defined the `CollectionViewExampleController`
    class, you will write a method to create an instance of it. Follow these steps:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经声明并定义了`CollectionViewExampleController`类，你需要编写一个方法来创建它的实例。按照以下步骤操作：
- en: 'Type in the following code after the `collectionView` variable declaration
    to declare a new method:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`collectionView`变量声明之后输入以下代码以声明一个新的方法：
- en: '[PRE10]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This declares a new method, `createCollectionView()` which you'll use to create
    an instance of a collection view and assign it to the `collectionView` property.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这声明了一个新的方法`createCollectionView()`，你将使用它来创建集合视图的实例并将其分配给`collectionView`属性。
- en: 'Type in the following code after the opening curly brace to define the body
    of this method:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在大括号开头的代码之后输入以下代码以定义此方法的主体：
- en: '[PRE11]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This creates a new collection view instance and assigns it to `collectionView`.
    The dimensions of this collection view are exactly the same as its enclosing view,
    with the default flow layout. The flow layout dictates the order the collection
    view cells are displayed, which is left to right.
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将创建一个新的集合视图实例并将其分配给`collectionView`。这个集合视图的尺寸与其包含视图完全相同，并使用默认的流布局。流布局决定了集合视图单元格的显示顺序，即从左到右。
- en: 'Go to the next line, and then type in the following code to set the collection
    view''s `dataSource` property to an instance of `CollectionViewExampleController`:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入下一行，然后输入以下代码以将集合视图的`dataSource`属性设置为`CollectionViewExampleController`的一个实例：
- en: '[PRE12]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `dataSource` property of a collection view will specify which object contains
    the implementation of the required `UIViewControllerDataSource` methods.
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 集合视图的`dataSource`属性将指定哪个对象包含所需的`UIViewControllerDataSource`方法的实现。
- en: 'Go to the next line, and then type in the following code to set the collection
    view''s background color to white:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入下一行，然后输入以下代码以将集合视图的背景颜色设置为白色：
- en: '[PRE13]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Go to the next line, and then type in the following code to set the identifier
    for the collection view cells in the collection view to `BoxCell`:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入下一行，然后输入以下代码以将集合视图中单元格的标识符设置为`BoxCell`：
- en: '[PRE14]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This identifier will be used in the `collectionView(_:cellForItemAt:)` method
    to identify the type of collection view cells to be reused.
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此标识符将在`collectionView(_:cellForItemAt:)`方法中使用，以识别要重用的集合视图单元格的类型。
- en: 'Go to the next line, and then type in the following code to add the collection
    view as a subview to the view of the `CollectionViewExampleController` instance:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入下一行，然后输入以下代码将集合视图添加为`CollectionViewExampleController`实例视图的子视图：
- en: '[PRE15]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: When an instance of a view controller is loaded into memory, its view is also
    loaded, along with any subviews. In this case, the `CollectionViewExampleController`
    instance will automatically load its view, and since the collection view is a
    subview of its view, the collection view will also be loaded.
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当一个视图控制器实例被加载到内存中时，其视图也会被加载，以及任何子视图。在这种情况下，`CollectionViewExampleController`实例将自动加载其视图，由于集合视图是其视图的子视图，因此集合视图也将被加载。
- en: 'Verify that the completed method looks like the following:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认完成的方法看起来如下：
- en: '[PRE16]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now you need a suitable place to call this method. View controllers have a
    `view` property. The view assigned to the `view` property will be automatically
    loaded when the view controller is loaded. After a view has been loaded successfully,
    the view controller''s `viewDidLoad()` method will be called. You will override
    the `viewDidLoad()` method in your `CollectionViewControllerExample` class to
    call `createCollectionView()`. Follow these steps:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你需要一个合适的地方来调用此方法。视图控制器有一个`view`属性。分配给`view`属性的视图将在视图控制器加载时自动加载。在视图成功加载后，将调用视图控制器的`viewDidLoad()`方法。你将在`CollectionViewControllerExample`类中重写`viewDidLoad()`方法以调用`createCollectionView()`。按照以下步骤操作：
- en: 'Type in the following code just before the `createCollectionView()` method:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`createCollectionView()`方法之前输入以下代码：
- en: '[PRE17]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This sets the size of the live view, creates a collection view instance, assigns
    it to `collectionView` and adds it as a subview to the view of the `CollectionViewExampleController`
    instance. The collection view then calls the data source methods to determine
    how many collection view cells to display, and what to display in each cell.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这设置了实时预览的大小，创建了一个集合视图实例，将其分配给`collectionView`，并将其作为子视图添加到`CollectionViewExampleController`实例的视图中。然后，集合视图会调用数据源方法以确定要显示多少个集合视图单元格以及每个单元格中显示什么内容。
- en: '`collectionView(_:numberOfItemsInSection:)` returns `1`, so a single collection
    view cell will be displayed.'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`collectionView(_:numberOfItemsInSection:)`返回`1`，因此将显示单个集合视图单元格。'
- en: '`collectionView(_:cellForItemAt:)` creates the cell, sets the background color
    of the cell to red, and returns it for display.'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`collectionView(_:cellForItemAt:)`创建单元格，将单元格的背景颜色设置为红色，并将其返回以供显示。'
- en: 'Verify that your completed playground looks like this:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认你的完成后的playground看起来如下：
- en: '[PRE18]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now it''s time to see it in action. Type the following after all the other
    code in the playground:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是时候看到它的实际效果了。在playground中的所有其他代码之后输入以下内容：
- en: '[PRE19]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This command creates the instance of `CollectionViewExampleController` and displays
    its view in the playground's live view. The `createCollectionView()` method will
    create a collection view and add it as a subview to the `CollectionViewExampleController`
    instance's view, and it will appear on the screen.
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令创建`CollectionViewExampleController`的实例，并在playground的实时预览中显示其视图。`createCollectionView()`方法将创建一个集合视图并将其作为子视图添加到`CollectionViewExampleController`实例的视图中，它将出现在屏幕上。
- en: 'Run the playground. If you don''t see a representation of the collection view
    on your screen, you will need to turn on the playground''s live view. Click the
    Adjust Editor Options button:![Figure 13.3: Adjust Editor Options button'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行playground。如果你在屏幕上没有看到集合视图的表示，你需要打开playground的实时预览。点击调整编辑器选项按钮：![图13.3：调整编辑器选项按钮
- en: '](img/Figure_13.03_B17469.jpg)'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_13.03_B17469.jpg)'
- en: 'Figure 13.3: Adjust Editor Options button'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图13.3：调整编辑器选项按钮
- en: 'Make sure that **Live View** is selected:![Figure 13.4: Adjust Editor Options
    menu with Live View selected'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保已选择**实时预览**：![图13.4：选择实时预览的编辑器选项菜单
- en: '](img/Figure_13.04_B17469.jpg)'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_13.04_B17469.jpg)'
- en: 'Figure 13.4: Adjust Editor Options menu with Live View selected'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图13.4：选择实时预览的编辑器选项菜单
- en: 'You will see the collection view displaying one red collection view cell in
    the live view:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将在实时预览中看到集合视图显示一个红色集合视图单元格：
- en: '![Figure 13.5: Playground live view showing collection view with one collection
    view cell'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.5：显示包含一个集合视图单元格的集合视图的Playground实时预览'
- en: '](img/Figure_13.05_B17469.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.05_B17469.jpg)'
- en: 'Figure 13.5: Playground live view showing collection view with one collection
    view cell'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.5：显示包含一个集合视图单元格的集合视图的Playground实时预览
- en: You've just created a view controller for a collection view, created an instance
    of it and displayed a collection view in the playground's live view. Good job!
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚创建了一个集合视图的视图控制器，创建了一个其实例，并在playground的实时预览中显示了一个集合视图。做得好！
- en: In the next section, you'll revisit how collection view controllers are used
    in the **Explore** and **Restaurant List** screens, which you implemented in [*Chapter
    10*](B17469_10_Final_VK_ePub.xhtml#_idTextAnchor155)*, Building Your User Interface*,
    and [*Chapter 11*](B17469_11_Final_VK_ePub.xhtml#_idTextAnchor171)*, Finishing
    Up Your User Interface*. Using what you have learned in this section as a reference,
    you should be able to understand how they work.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将重新审视在 **探索** 和 **餐厅列表** 屏幕中使用集合视图控制器的方式，这些屏幕是在 [*第10章*](B17469_10_Final_VK_ePub.xhtml#_idTextAnchor155)*，构建用户界面*
    和 [*第11章*](B17469_11_Final_VK_ePub.xhtml#_idTextAnchor171)*，完成用户界面* 中实现的。使用本节学到的知识作为参考，您应该能够理解它们是如何工作的。
- en: Revisiting the Explore and Restaurant List screens
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新审视探索和餐厅列表屏幕
- en: 'Remember the `ExploreViewController` class that you added in [*Chapter 10*](B17469_10_Final_VK_ePub.xhtml#_idTextAnchor155)*,
    Building Your User Interface*, and the `RestaurantListViewController` class that
    you added in[*Chapter 11*](B17469_11_Final_VK_ePub.xhtml#_idTextAnchor171)*, Finishing
    Up Your User Interface*? Both of these are examples of view controllers that manage
    a collection view. Note that the code in both of them is very similar to that
    in your playground. The differences are as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 记得您在 [*第10章*](B17469_10_Final_VK_ePub.xhtml#_idTextAnchor155)*，构建用户界面* 中添加的
    `ExploreViewController` 类，以及您在[*第11章*](B17469_11_Final_VK_ePub.xhtml#_idTextAnchor171)*，完成用户界面*
    中添加的 `RestaurantListViewController` 类？这两个都是管理集合视图的视图控制器示例。请注意，这两个中的代码与您在游乐场中的代码非常相似。区别如下：
- en: You set the cell background color programmatically in `collectionView(_:cellForItemAt:)`,
    instead of setting it in the Attributes inspector.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您在 `collectionView(_:cellForItemAt:)` 中通过编程方式设置单元格的背景颜色，而不是在属性检查器中设置。
- en: You created and assigned the collection view to the `collectionView` property
    in `CollectionViewExampleController` programmatically.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您通过编程方式在 `CollectionViewExampleController` 中创建并分配集合视图到 `collectionView` 属性。
- en: 'You set the dimensions of the collection view programmatically in `UICollectionView(frame:
    collectionViewLayout:)`, instead of using the Size inspector.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您在 `UICollectionView(frame:collectionViewLayout:)` 中通过编程方式设置集合视图的尺寸，而不是使用尺寸检查器。
- en: You connected the data source outlet to the view controller programmatically,
    instead of using the Connections inspector.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您通过编程方式将数据源出口连接到视图控制器，而不是使用连接检查器。
- en: You set the background color of the collection view programmatically, instead
    of using the Attributes inspector.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过编程方式设置集合视图的背景颜色，而不是使用属性检查器。
- en: You set the reuse identifier for the collection view cell programmatically,
    instead of using the Attributes inspector.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过编程方式设置集合视图单元格的重用标识符，而不是使用属性检查器。
- en: You added the collection view as a subview of the view for `CollectionViewExampleController`
    programmatically, instead of dragging in a **Collection View** object from the
    Library.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您通过编程方式将集合视图作为 `CollectionViewExampleController` 视图的子视图添加，而不是从库中拖入 **集合视图**
    对象。
- en: Open the `LetsEat` project. Review [*Chapter 10*](B17469_10_Final_VK_ePub.xhtml#_idTextAnchor155)*,
    Building Your User Interface* and [*Chapter 11*](B17469_11_Final_VK_ePub.xhtml#_idTextAnchor171)*,
    Finishing Up Your User Interface,* once more, in order to compare and contrast
    the implementation of the collection view using the storyboard, and by doing the
    implementation programmatically as you have done in this chapter.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `LetsEat` 项目。再次回顾 [*第10章*](B17469_10_Final_VK_ePub.xhtml#_idTextAnchor155)*，构建用户界面*
    和 [*第11章*](B17469_11_Final_VK_ePub.xhtml#_idTextAnchor171)*，完成用户界面*，以便比较和对照使用故事板实现的集合视图，以及像本章中那样通过编程实现。
- en: Summary
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about the MVC design pattern and collection view
    controllers in detail. You then revisited the collection views used in the **Explore**
    and **Restaurant List** screens and learned how they work.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您详细学习了 MVC 设计模式和集合视图控制器。然后，您重新审视了在 **探索** 和 **餐厅列表** 屏幕中使用的集合视图，并学习了它们是如何工作的。
- en: You should now understand the MVC design pattern, how to create a collection
    view controller, and how to use the collection view data source protocol. This
    will enable you to implement collection view controllers for your own apps.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该理解了 MVC 设计模式、如何创建集合视图控制器以及如何使用集合视图数据源协议。这将使您能够为您的应用程序实现集合视图控制器。
- en: Up to this point, you have set up the views and view controllers for the `ExploreViewController`
    instance so that it may be displayed by the collection view in the **Explore**
    screen.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经为`ExploreViewController`实例设置了视图和视图控制器，以便它可以通过**探索**屏幕中的集合视图进行显示。
