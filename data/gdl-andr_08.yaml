- en: Chapter 8. Setting Up Continuous Integration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章. 设置持续集成
- en: '**Continuous integration** (**CI**) is a development practice that requires
    the developers in a team to integrate their work regularly, often multiple times
    per day. Every push to the main repository is verified by an automated build.
    This practice helps with detecting problems as soon as possible, thereby speeding
    up development, and increasing the quality of the code. The great Martin Fowler
    wrote an article about the subject that explains the concepts and describes the
    best practices ([http://martinfowler.com/articles/continuousIntegration.html](http://martinfowler.com/articles/continuousIntegration.html))'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续集成** (**CI**) 是一种开发实践，要求团队中的开发人员定期集成他们的工作，通常每天多次。每次向主仓库的推送都会通过自动构建进行验证。这种做法有助于尽早发现问题，从而加快开发速度，并提高代码质量。伟大的马丁·福勒（Martin
    Fowler）就这一主题撰写了一篇文章，解释了概念并描述了最佳实践（[http://martinfowler.com/articles/continuousIntegration.html](http://martinfowler.com/articles/continuousIntegration.html)）'
- en: There are several options to set up CI for Android. The most widely used are
    **Jenkins**, **TeamCity**, and **Travis CI**. Jenkins has the biggest ecosystem,
    with around a thousand available plugins. It is also an open source effort with
    a lot of contributors. TeamCity is a product from JetBrains, the company that
    also created IntelliJ IDEA. Travis CI is a relatively new player, and is mostly
    focused on open source projects.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为 Android 设置 CI 有几种选择。最常用的有 **Jenkins**、**TeamCity** 和 **Travis CI**。Jenkins
    拥有最大的生态系统，大约有一千个可用的插件。它也是一个拥有众多贡献者的开源项目。TeamCity 是 JetBrains 公司的产品，该公司还创建了 IntelliJ
    IDEA。Travis CI 是一个相对较新的参与者，主要关注开源项目。
- en: We will look at these CI systems and how to make Gradle work on them. At the
    end of the chapter, we will mention some Gradle tricks to make CI easier, regardless
    of the chosen CI system.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨这些 CI 系统，以及如何让 Gradle 在这些系统上工作。在本章结束时，我们将提到一些 Gradle 技巧，以使 CI 更容易，无论选择的
    CI 系统是什么。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Jenkins
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins
- en: TeamCity
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TeamCity
- en: Travis CI
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Travis CI
- en: Further automation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进一步自动化
- en: Jenkins
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins
- en: Jenkins was originally released as Hudson in 2005 by Sun Microsystems. Over
    the years, it grew to become the most popular CI system in the Java community.
    Shortly after Sun Microsystems was acquired by Oracle, there was a conflict between
    Oracle and the Java community regarding Hudson. When that could not be resolved,
    the community continued to work on the project under the name Jenkins because
    the name Hudson is owned by Oracle.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 最初于 2005 年由 Sun Microsystems 以 Hudson 的名称发布。多年来，它已成为 Java 社区中最受欢迎的 CI
    系统。在 Sun Microsystems 被甲骨文公司收购后不久，Oracle 与 Java 社区在 Hudson 问题上发生了冲突。当这个问题无法解决时，社区继续以
    Jenkins 的名义在该项目上工作，因为 Hudson 这个名字归 Oracle 所有。
- en: The power of Jenkins lies in its plugin system. Everyone who has a need for
    new functionality in the build system can create a new plugin that extends the
    capabilities of Jenkins. This is also why setting up an automated build for Android
    apps or libraries is quite straightforward.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 的强大之处在于其插件系统。任何需要构建系统新功能的人都可以创建一个新的插件，以扩展 Jenkins 的功能。这也是为什么为 Android
    应用程序或库设置自动构建相当简单的原因。
- en: Setting up Jenkins
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 Jenkins
- en: If you do not already have Jenkins installed and running on your build machine,
    download it from the website ([https://jenkins-ci.org](https://jenkins-ci.org))
    and follow the steps.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有在你的构建机器上安装并运行 Jenkins，请从网站 ([https://jenkins-ci.org](https://jenkins-ci.org))
    下载它，并按照步骤操作。
- en: Before you can get started with the actual Jenkins setup, you need to make sure
    you have all the required libraries for building Android apps and libraries. To
    build anything in Java, you need to download and install the JDK first, which
    can be downloaded from the Java website ([http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始实际的 Jenkins 设置之前，你需要确保你有构建 Android 应用程序和库所需的全部库。要在 Java 中构建任何内容，你首先需要下载并安装
    JDK，它可以从 Java 网站 ([http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html))
    下载。
- en: You also need to make sure you have the Android SDK and build tools installed.
    It is not necessary to install an IDE on your build server, unless you plan on
    opening the project on the build machine. If you just want to install the SDK
    tools, you can download those from the Android developer website ([https://developer.android.com/sdk/index.html#Other](https://developer.android.com/sdk/index.html#Other)).
    Once you have downloaded and installed the package, you need to run the `android`
    executable in the SDK directory, so you can install the APIs and build tools you
    need.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要确保你已经安装了 Android SDK 和构建工具。在你的构建服务器上安装 IDE 不是必需的，除非你计划在构建机器上打开项目。如果你只想安装
    SDK 工具，你可以从 Android 开发者网站下载它们（[https://developer.android.com/sdk/index.html#Other](https://developer.android.com/sdk/index.html#Other)）。一旦你下载并安装了包，你需要在
    SDK 目录中运行 `android` 可执行文件，这样你就可以安装所需的 API 和构建工具。
- en: 'Once Java and the Android SDK are installed, you need to configure these in
    Jenkins. Start by opening your web browser and navigating to Jenkins'' home page
    on your build server. Go to **Manage Jenkins** | **Configure System** and scroll
    to **Global properties**. Add two environment variables, `ANDROID_HOME` and `JAVA_HOME`,
    and set their values to the correct directories, as shown in this screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了 Java 和 Android SDK，你需要在 Jenkins 中配置这些。首先打开你的网络浏览器，导航到构建服务器上的 Jenkins 主页。转到
    **管理 Jenkins** | **配置系统** 并滚动到 **全局属性**。添加两个环境变量 `ANDROID_HOME` 和 `JAVA_HOME`，并将它们的值设置为正确的目录，如图所示：
- en: '![Setting up Jenkins](img/B01061_08_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![设置 Jenkins](img/B01061_08_01.jpg)'
- en: You also need to install the Gradle plugin. Go to **Manage Jenkins** | **Manage
    Plugins**, navigate to the **Available** tab, and search for `Gradle`. When you
    locate the Gradle plugin, simply check the box and click on **Download now and
    install after restart**. This plugin makes it possible to create build steps that
    involve Gradle.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要安装 Gradle 插件。转到 **管理 Jenkins** | **管理插件**，导航到 **可用** 选项卡，并搜索 `Gradle`。当你找到
    Gradle 插件时，只需勾选复选框，然后点击 **现在下载并在重启后安装**。此插件使得创建涉及 Gradle 的构建步骤成为可能。
- en: Configuring the build
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置构建
- en: Once you have installed everything you need, you can create a CI project in
    Jenkins. The first thing you should do is to set up the VCS repository, so that
    Jenkins knows where to get the source code for your project. You can set up Jenkins
    to build your app or library automatically based on repository activity, using
    build triggers, or you can choose to only do manual builds. To perform the actual
    build, you need to add a new build step that invokes a Gradle script. You can
    configure Jenkins to use the Gradle Wrapper, which is present by default in Android
    projects. Using the Gradle Wrapper not only eliminates the need for manually installing
    Gradle on your build server, it also makes sure that any updates of Gradle are
    handled automatically. It is a good idea to also check the **Make gradlew executable**
    box. This solves an issue with permission for executing the Gradle Wrapper, when
    the project is created on a Microsoft Windows machine.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了所有必需的组件，你就可以在 Jenkins 中创建一个 CI 项目。你应该做的第一件事是设置 VCS 仓库，这样 Jenkins 就知道从哪里获取你项目的源代码。你可以设置
    Jenkins 根据仓库活动自动构建你的应用程序或库，使用构建触发器，或者你可以选择只进行手动构建。要执行实际的构建，你需要添加一个新的构建步骤来调用 Gradle
    脚本。你可以配置 Jenkins 使用默认存在于 Android 项目中的 Gradle Wrapper。使用 Gradle Wrapper 不仅消除了在构建服务器上手动安装
    Gradle 的需要，还确保了 Gradle 的任何更新都会自动处理。检查 **使 gradlew 可执行** 复选框也是一个好主意。这解决了在 Microsoft
    Windows 机器上创建项目时执行 Gradle Wrapper 的权限问题。
- en: You can enter a nice description for the build step, and optionally add two
    switches `info` and `stacktrace`. The `info` switch is used to print out more
    information of the build process, which can be useful in case something goes wrong.
    If the build causes an exception, the `stacktrace` switch prints out the stack
    trace of this exception. Sometimes you might need more detailed information, in
    which case you can use the `full-stacktrace` switch instead.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以为构建步骤输入一个不错的描述，并可选地添加两个开关 `info` 和 `stacktrace`。`info` 开关用于打印构建过程的更多信息，这在出现问题时可能很有用。如果构建引发异常，`stacktrace`
    开关将打印出此异常的堆栈跟踪。有时你可能需要更详细的信息，在这种情况下，你可以使用 `full-stacktrace` 开关。
- en: 'To finalize the configuration, specify the Gradle tasks you want to execute.
    First, execute the `clean` task, to make sure there is no output left from any
    previous builds. Second, execute the `build` task, which triggers a build of all
    variants. The Jenkins configuration should look like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最终确定配置，请指定您想要执行的任务。首先，执行`clean`任务，以确保没有留下任何来自之前构建的输出。其次，执行`build`任务，这将触发所有变体的构建。Jenkins配置应如下所示：
- en: '![Configuring the build](img/B01061_08_02.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![配置构建](img/B01061_08_02.jpg)'
- en: Once you have saved the project configuration, you can run the build.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 保存项目配置后，您可以运行构建。
- en: Note
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If your build server is installed on a 64-bit Linux machine, you might run
    into this exception `java.io.IOException: Cannot run program "aapt": error=2,
    No such file or directory`. This is because AAPT is a 32 bit application and needs
    some extra libraries in order to run on a 64 bit machine. To install the necessary
    libraries, use this command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您的构建服务器安装在64位Linux机器上，您可能会遇到这个异常`java.io.IOException: Cannot run program
    "aapt": error=2, No such file or directory`。这是因为AAPT是一个32位应用程序，需要在64位机器上运行时需要一些额外的库。要安装必要的库，请使用以下命令：'
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If the build finishes without any issues, it creates APKs for all your build
    variants. You can use specific Gradle tasks to distribute these APKs. We will
    mention automatic distribution at the end of the chapter, as it is not specific
    to any build system.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果构建没有问题完成，它将为所有构建变体创建APK。您可以使用特定的Gradle任务来分发这些APK。我们将在本章末尾提到自动分发，因为它并不特定于任何构建系统。
- en: '![Configuring the build](img/B01061_08_03.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![配置构建](img/B01061_08_03.jpg)'
- en: TeamCity
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TeamCity
- en: Unlike Jenkins, TeamCity is a proprietary product that is free to use only for
    open source projects. It is created and managed by JetBrains. This is the same
    company that also created IntelliJ IDEA, which is the IDE that Android Studio
    is based on. TeamCity supports Android builds with Gradle out of the box.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 与Jenkins不同，TeamCity是一个专有产品，仅对开源项目免费使用。它由JetBrains创建和管理。这家公司还创建了IntelliJ IDEA，这是Android
    Studio基于的IDE。TeamCity默认支持使用Gradle进行Android构建。
- en: Setting up TeamCity
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置TeamCity
- en: If you do not have a running TeamCity installation yet, download it from the
    JetBrains website ([https://www.jetbrains.com/teamcity](https://www.jetbrains.com/teamcity))
    and follow the steps.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有安装TeamCity，请从JetBrains网站下载它（[https://www.jetbrains.com/teamcity](https://www.jetbrains.com/teamcity)）并按照步骤操作。
- en: To get started with building Android apps and libraries with TeamCity, you need
    to make sure the JDK, the Android SDK, and the Android build tools are installed
    on your build server. You can find the instructions for this in the *Jenkins*
    section. You also need to add `ANDROID_HOME` to the environment variables of the
    machine, and point it to the Android SDK directory.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用TeamCity构建Android应用程序和库，您需要确保JDK、Android SDK和Android构建工具已安装到您的构建服务器上。您可以在*Jenkins*部分找到这些说明。您还需要将`ANDROID_HOME`添加到机器的环境变量中，并指向Android
    SDK目录。
- en: Unlike Jenkins, TeamCity does not require any plugins to trigger Gradle builds,
    as TeamCity has built-in support for running Gradle.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 与Jenkins不同，TeamCity不需要任何插件来触发Gradle构建，因为TeamCity内置了对运行Gradle的支持。
- en: Configuring the build
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置构建
- en: 'To set up an Android build, you start by creating a new project. All you need
    to provide is a name. Once the project is created, you can start configuring it.
    First, you need to add a VCS root so that TeamCity can find the source code for
    your project. Then you need to create a new build configuration. You also need
    to attach the VCS root to the build configuration. When that is set up, you can
    add a new build step. If you press the **Auto-detect build steps** button, TeamCity
    will try to determine the necessary build steps, based on the content of the project.
    In case of a Gradle-based Android project, the result looks like this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置Android构建，您首先需要创建一个新的项目。您需要提供的只是名称。一旦项目创建完成，您就可以开始配置它。首先，您需要添加一个VCS根，以便TeamCity可以找到您项目的源代码。然后您需要创建一个新的构建配置。您还需要将VCS根附加到构建配置上。设置完成后，您可以添加一个新的构建步骤。如果您按下**自动检测构建步骤**按钮，TeamCity将尝试根据项目的内容确定必要的构建步骤。对于基于Gradle的Android项目，结果看起来像这样：
- en: '![Configuring the build](img/B01061_08_04.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![配置构建](img/B01061_08_04.jpg)'
- en: TeamCity detects that the project uses Gradle, and even that the Gradle wrapper
    is present. You can just select the Gradle build step, and add it to the build
    configuration. If you do not need to do anything advanced, this is enough to make
    sure your Android app gets built. You can test the configuration by opening the
    project overview and clicking on the **Run…** button for the Android project.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: TeamCity 会检测到项目使用 Gradle，甚至 Gradle Wrapper 也存在。你只需选择 Gradle 构建步骤，并将其添加到构建配置中。如果你不需要进行任何高级操作，这足以确保你的
    Android 应用被构建。你可以通过打开项目概览并点击 Android 项目的 **运行…** 按钮来测试配置。
- en: Travis CI
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Travis CI
- en: If your project's repository is hosted on GitHub, you can use Travis CI for
    your automated builds. Travis CI ([https://travis-ci.org](https://travis-ci.org))
    is an open source hosted continuous integration system, and is free to use for
    public repositories. There is a paid plan for private repositories, but in this
    book we will only look at the free option.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的项目仓库托管在 GitHub 上，你可以为你的自动化构建使用 Travis CI。Travis CI ([https://travis-ci.org](https://travis-ci.org))
    是一个开源的托管持续集成系统，对于公共仓库是免费的。对于私有仓库有一个付费计划，但在这本书中，我们只会查看免费选项。
- en: Travis detects when a new commit is pushed to the repository and starts a new
    build automatically. By default, Travis builds all branches, not just the master
    branch. It also builds pull requests automatically; a useful feature for open
    source projects.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Travis 会检测到当有新的提交推送到仓库时，并自动启动新的构建。默认情况下，Travis 会构建所有分支，而不仅仅是 master 分支。它还会自动构建拉取请求；这对于开源项目来说是一个有用的功能。
- en: Because of how Travis works internally, you cannot configure the build server
    itself. Instead, you need to create a configuration file that contains all the
    information that Travis needs to build your app or library.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Travis 内部的工作方式，你不能配置构建服务器本身。相反，你需要创建一个包含 Travis 构建应用或库所需的所有信息的配置文件。
- en: Configuring the build
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置构建
- en: If you want to enable Travis builds for your project, you first need to log
    in to Travis CI and connect your account to GitHub. Once that is done, you need
    to enable the project you want to build in the settings.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想为你的项目启用 Travis 构建，首先你需要登录到 Travis CI 并将你的账户与 GitHub 连接。一旦完成，你需要在设置中启用你想要构建的项目。
- en: 'In order to configure the build process, Travis requires you to create a file
    called `.travis.yml` that contains the entire setup. To configure an Android project,
    you need to define the language and add a few Android-specific properties:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了配置构建过程，Travis 需要你创建一个名为 `.travis.yml` 的文件，该文件包含整个设置。为了配置 Android 项目，你需要定义语言并添加一些
    Android 特定的属性：
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The language setting specifies which kind of build process you want to run.
    In this case, you are building an Android app. The Android-specific properties
    include the version of the build tools and the Android SDK version that need to
    be used. Travis will download those prior to running the `build` tasks. If you
    make use of the support library or Google Play Services, you need to specify that
    explicitly because Travis needs to download the repositories for those dependencies
    as well.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 语言设置指定了你想要运行哪种构建过程。在这种情况下，你正在构建一个 Android 应用。Android 特定的属性包括需要使用的构建工具版本和 Android
    SDK 版本。Travis 将在运行 `build` 任务之前下载这些工具。如果你使用了支持库或 Google Play 服务，你需要明确指定这一点，因为
    Travis 需要下载这些依赖项的仓库。
- en: Note
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is not mandatory to configure the build tools and SDK version, but you will
    encounter fewer issues if you make sure the version aligns with what you have
    specified in the `build.gradle` file.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 配置构建工具和 SDK 版本不是强制性的，但如果你确保版本与你在 `build.gradle` 文件中指定的版本一致，你会遇到更少的问题。
- en: 'If you create an Android project on Microsoft Windows, the Gradle Wrapper file
    is known to have issues with permissions. Therefore, it is a good idea to fix
    the permission before running the actual build script. You can add a prebuild
    step like this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在一个 Microsoft Windows 上创建 Android 项目，Gradle Wrapper 文件已知存在权限问题。因此，在运行实际的构建脚本之前修复权限是一个好主意。你可以添加一个预构建步骤，如下所示：
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To start the build itself, add this line to the Travis configuration file:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始实际的构建，将以下行添加到 Travis 配置文件中：
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This command will run the Gradle Wrapper, just like you would on a developer
    machine, and execute the `clean` and `build` tasks.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将运行 Gradle Wrapper，就像你在开发机上做的那样，并执行 `clean` 和 `build` 任务。
- en: 'When you are done configuring the Travis build, you can commit and push the
    file to the project''s GitHub repository. If everything is set up correctly, Travis
    will start the build process, which you can follow on the Travis website. This
    is what it looks like when a project is successfully built:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成 Travis 构建的配置后，你可以提交并将文件推送到项目的 GitHub 仓库。如果一切设置正确，Travis 将开始构建过程，你可以在 Travis
    网站上跟踪。以下是项目成功构建时的样子：
- en: '![Configuring the build](img/B01061_08_05.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![配置构建](img/B01061_08_05.jpg)'
- en: 'Travis also sends an e-mail report after every build. This can be especially
    useful if you are the maintainer of an open source library that regularly gets
    pull requests. The report e-mail from Travis looks like this when a build is successful:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Travis 也会在每次构建后发送电子邮件报告。如果你是定期收到拉取请求的开源库的维护者，这可能特别有用。当构建成功时，Travis 的报告电子邮件看起来是这样的：
- en: '![Configuring the build](img/B01061_08_06.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![配置构建](img/B01061_08_06.jpg)'
- en: You will quickly notice that Travis has a big downside, and that is speed. Travis
    does not give you one specific machine, but boots up a vanilla virtual machine
    for every build you trigger. This means for every new build, Travis has to download
    and install the Android SDK and build tools, before it can start building your
    app or library.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你会很快注意到 Travis 有一个很大的缺点，那就是速度。Travis 不会给你一台特定的机器，而是为每个你触发的构建启动一个纯净的虚拟机。这意味着对于每个新的构建，Travis
    都必须下载和安装 Android SDK 和构建工具，然后才能开始构建你的应用或库。
- en: On the upside, Travis is free and public, which makes it perfect for open source
    projects. Travis also builds pull requests automatically, which can give you peace
    of mind when someone submits a patch to your code.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 从积极的一面来看，Travis 是免费且公开的，这使得它非常适合开源项目。Travis 还会自动构建拉取请求，这可以在有人提交补丁到你的代码时给你带来安心。
- en: Further automation
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步自动化
- en: Most modern continuous integration systems support Gradle, either by default
    or through a plugin. This means that instead of just building your app or library,
    you can create all kinds of Gradle tasks to further automate the build. The advantage
    of defining extra build steps with Gradle tasks, instead of in the CI system itself
    is that the extra build steps become much more portable. It is easy to run a custom
    Gradle task on your development machine. A custom Jenkins build step, on the other
    hand, is impossible to run without having Jenkins installed. Having extra build
    steps in a certain CI system also makes it harder to switch to a different CI
    system. Gradle tasks can also easily be ported to different projects. In this
    section, we will look at a few ways to further automate building and deploying
    apps and libraries, using Gradle tasks and plugins.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数现代持续集成系统默认支持 Gradle，或者通过插件支持。这意味着你不仅可以构建你的应用或库，还可以创建各种 Gradle 任务来进一步自动化构建。与在
    CI 系统本身中定义额外的构建步骤相比，使用 Gradle 任务定义额外的构建步骤的优势在于，这些额外的构建步骤变得更加便携。在开发机器上运行自定义 Gradle
    任务很容易。另一方面，没有安装 Jenkins，自定义 Jenkins 构建步骤是无法运行的。在某个 CI 系统中拥有额外的构建步骤也使得切换到不同的 CI
    系统变得更加困难。Gradle 任务也可以轻松地移植到不同的项目中。在本节中，我们将探讨使用 Gradle 任务和插件进一步自动化构建和部署应用和库的几种方法。
- en: The SDK manager plugin
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SDK 管理插件
- en: An issue you might run into at some point is that the Android SDK on the build
    server is not up to date. When you update the SDK version for your app or library,
    you also need to install the new SDK on the build server. If you have multiple
    build agents, this becomes a real hassle.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会遇到的一个问题是构建服务器上的 Android SDK 没有更新。当你更新你的应用或库的 SDK 版本时，你还需要在构建服务器上安装新的 SDK。如果你有多个构建代理，这会变得非常麻烦。
- en: Thanks to community efforts, there is a Gradle plugin that takes care of checking
    whether the build depends on an Android SDK version that is not present. If the
    SDK is not present, the plugin will download it automatically.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了社区的努力，有一个 Gradle 插件负责检查构建是否依赖于一个不存在的 Android SDK 版本。如果 SDK 不存在，插件会自动下载它。
- en: The SDK manager plugin will download not only the compilation SDK specified
    in the build configuration file, but also the correct version of the build tools
    and platform tools. If your project has a dependency on the support library or
    Google Play Services, the plugin will download the specified version of those
    as well.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: SDK 管理插件不仅会下载构建配置文件中指定的编译 SDK，还会下载正确的构建工具和平台工具版本。如果你的项目依赖于支持库或 Google Play 服务，插件还会下载这些指定的版本。
- en: The SDK manager plugin is an open source plugin, you can find the source code
    for it on GitHub ([https://github.com/JakeWharton/sdk-manager-plugin](https://github.com/JakeWharton/sdk-manager-plugin)).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: SDK 管理器插件是一个开源插件，你可以在 GitHub 上找到它的源代码（[https://github.com/JakeWharton/sdk-manager-plugin](https://github.com/JakeWharton/sdk-manager-plugin)）。
- en: Running tests
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行测试
- en: If you want to run unit tests (JUnit or Robolectric) during the build process
    on the build server, you simply need to add the corresponding tasks to the Gradle
    execution. If you want to run any functional tests, you will need an emulator
    to install your app on, so you can run the tests with `gradlew connectedAndroidTest`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在构建服务器上构建过程中运行单元测试（JUnit 或 Robolectric），你只需将相应的任务添加到 Gradle 执行中。如果你想运行任何功能测试，你需要一个模拟器来安装你的应用，然后你可以使用
    `gradlew connectedAndroidTest` 运行测试。
- en: The simplest option for running an emulator is to just launch an emulator on
    the build server, and keep it open all the time. Unfortunately, this is not an
    optimal solution, because the Android emulators are quite prone to random crashes,
    especially when you keep them open for multiple days.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 运行模拟器的最简单方法是直接在构建服务器上启动一个模拟器，并始终保持其开启状态。不幸的是，这不是一个最佳解决方案，因为 Android 模拟器很容易发生随机崩溃，尤其是在你连续多天保持其开启状态时。
- en: If you are using Jenkins, there is a plugin called **Android Emulator Plugin**
    ([https://wiki.jenkins-ci.org/display/JENKINS/Android+Emulator+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Android+Emulator+Plugin))
    that can be configured to launch an emulator for every build of your app or library.
    TeamCity also has a lively plugin ecosystem, and there is a plugin called **Android
    Emulator** that helps setting up an emulator in the same way as the Jenkins plugin.
    You can find it, along with other TeamCity plugins, on the official TeamCity plugins
    page ([https://confluence.jetbrains.com/display/TW/TeamCity+Plugins](https://confluence.jetbrains.com/display/TW/TeamCity+Plugins)).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用 Jenkins，有一个名为 **Android Emulator Plugin** ([https://wiki.jenkins-ci.org/display/JENKINS/Android+Emulator+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Android+Emulator+Plugin))
    的插件，可以配置为为你的应用或库的每个构建启动一个模拟器。TeamCity 也有一个活跃的插件生态系统，其中有一个名为 **Android Emulator**
    的插件，它以与 Jenkins 插件相同的方式帮助设置模拟器。你可以在官方 TeamCity 插件页面上找到它，以及其他 TeamCity 插件（[https://confluence.jetbrains.com/display/TW/TeamCity+Plugins](https://confluence.jetbrains.com/display/TW/TeamCity+Plugins)）。
- en: 'Travis CI has the ability to start an emulator, but this is an experimental
    functionality. If you want to try it anyway, add this snippet to your `.travis.yml`
    configuration file to launch an Android emulator during your Travis builds:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Travis CI 有启动模拟器的功能，但这是一个实验性功能。如果你想尝试，请将以下片段添加到你的 `.travis.yml` 配置文件中，以便在 Travis
    构建过程中启动 Android 模拟器：
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `android-wait-for-emulator` instruction tells Travis to wait for the emulator
    to start. When the emulator is booted, `adb shell input keyevent 82 &` is executed
    to unlock the screen. After that, you can just tell Gradle to run the tests.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`android-wait-for-emulator` 指令告诉 Travis 等待模拟器启动。当模拟器启动后，执行 `adb shell input
    keyevent 82 &` 来解锁屏幕。之后，你只需告诉 Gradle 运行测试即可。'
- en: Continuous deployment
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续部署
- en: To help developers with automatic deployment of Android apps, Google released
    the Google Play Developer API, an API for pushing APKs to Google Play programmatically
    ([https://developers.google.com/android-publisher](https://developers.google.com/android-publisher)).
    This API removes the need for you to open a browser, log in to Google Play, and
    upload APKs using the web interface. Instead of creating your own publishing script
    based on the Google Play Developer API, you can use one of the many plugins to
    push APKs to Google Play directly after a successful build, straight from the
    build system.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助开发者自动部署 Android 应用，Google 发布了 Google Play 开发者 API，这是一个用于程序化地将 APK 推送到 Google
    Play 的 API ([https://developers.google.com/android-publisher](https://developers.google.com/android-publisher))。此
    API 消除了你需要打开浏览器、登录 Google Play 并使用网页界面上传 APK 的需求。而不是基于 Google Play 开发者 API 创建自己的发布脚本，你可以在构建成功后直接从构建系统中使用许多插件之一将
    APK 推送到 Google Play。
- en: There is a Jenkins plugin called **Google Play Android Publisher** ([https://wiki.jenkins-ci.org/display/JENKINS/Google+Play+Android+Publisher+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Google+Play+Android+Publisher+Plugin))
    that can handle this for you. A better option, though, is to use a Gradle plugin,
    so that you can execute the publishing task from any device and any kind of continuous
    integration system. Some people in the Android community created a Gradle plugin
    built around the Google Play Developer API that enables you to configure the entire
    publishing process. You can find the Gradle Play Publisher Gradle plugin source
    code on GitHub ([https://github.com/Triple-T/gradle-play-publisher](https://github.com/Triple-T/gradle-play-publisher)).
    It is also available through Maven Central or JCenter.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个名为**Google Play Android Publisher**的Jenkins插件([https://wiki.jenkins-ci.org/display/JENKINS/Google+Play+Android+Publisher+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Google+Play+Android+Publisher+Plugin))可以为您处理这些任务。然而，更好的选择是使用Gradle插件，这样您就可以从任何设备以及任何类型的持续集成系统中执行发布任务。Android社区的一些人创建了一个围绕Google
    Play开发者API构建的Gradle插件，它使您能够配置整个发布过程。您可以在GitHub上找到Gradle Play Publisher Gradle插件的源代码([https://github.com/Triple-T/gradle-play-publisher](https://github.com/Triple-T/gradle-play-publisher))。它也通过Maven
    Central或JCenter提供。
- en: 'To start using this plugin, add this to your main `build.gradle` file:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用此插件，请将以下内容添加到您的`main build.gradle`文件中：
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then apply the plugin in your Android module''s `build.gradle` file:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在您的Android模块的`build.gradle`文件中应用此插件：
- en: '[PRE6]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When you apply the Gradle Play Publisher plugin to your build, you will have
    a few new tasks to your availability:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将Gradle Play Publisher插件应用到构建中时，您将获得一些新的可用任务：
- en: '`publishApkRelease` uploads the APK and the recent changes'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`publishApkRelease`上传APK和最近的变化'
- en: '`publishListingRelease` uploads the descriptions and images'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`publishListingRelease` 上传描述和图片'
- en: '`publishRelease` uploads everything'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`publishRelease`上传所有内容'
- en: If you have different build variants, you can also execute a variant-specific
    version of these tasks, for example, `publishApkFreeRelease` and `publishApkPaidRelease`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有不同的构建变体，您还可以执行特定于变体的这些任务的版本，例如`publishApkFreeRelease`和`publishApkPaidRelease`。
- en: To get access to the Google Play Developer API, you need to set up a service
    account. This setup is out of the scope of this book, but it is required if you
    want to use the Gradle Play Publisher plugin. To get started, follow the steps
    in the documentation for the Google Play Developer API at [https://developers.google.com/android-publisher/getting_started](https://developers.google.com/android-publisher/getting_started).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取访问Google Play开发者API的权限，您需要设置一个服务帐户。此设置超出了本书的范围，但如果您想使用Gradle Play Publisher插件，则这是必需的。要开始，请遵循[https://developers.google.com/android-publisher/getting_started](https://developers.google.com/android-publisher/getting_started)中Google
    Play开发者API文档中的步骤。
- en: 'Once you have created a service account, you can enter the credentials in your
    build configuration file like this:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您创建了服务帐户，您可以在构建配置文件中输入凭证，如下所示：
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `play` block is for properties that are specific for the Gradle Play Publisher
    plugin. In addition to the service account credentials, you can also specify the
    track the APK should push to:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`play`块用于Gradle Play Publisher插件特有的属性。除了服务帐户凭证外，您还可以指定APK应推送到的轨道：'
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The default track is `alpha`, but you can change it to `beta` or `production`
    instead.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 默认轨道是`alpha`，但您也可以将其更改为`beta`或`production`。
- en: Beta distribution
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 贝塔分布
- en: There are a lot of options for beta testing of Android apps, such as the beta
    track on the Google Play store itself. Another option is **Crashlytics** ([https://crashlytics.com](https://crashlytics.com)),
    which has a very nice integration with Gradle. The team at Crashlytics created
    a custom plugin that not only creates new Gradle tasks to publish builds to their
    platform, but also hooks into the Android plugin's tasks to handle ProGuard mapping.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Android应用的beta测试有很多选项，例如Google Play商店本身的beta轨道。另一个选项是**Crashlytics**([https://crashlytics.com](https://crashlytics.com))，它与Gradle有很好的集成。Crashlytics团队创建了一个自定义插件，不仅创建新的Gradle任务以将构建发布到他们的平台，而且还挂钩到Android插件的任务以处理ProGuard映射。
- en: To get started with Crashlytics, follow the steps on their website. Once you
    have set it up, it will start hooking into your builds. The Crashlytics plugin
    exposes a new task called `crashlyticsUploadDistributionInternal` that can be
    used to upload APKs to Crashlytics. To push a new version of your app, you first
    need to build it using the `build` or `assemble` tasks. Once the APK is ready,
    you can upload it to Crashlytics using the `crashlyticsUploadDistributionInternal`
    task. The Crashlytics plugin creates an upload task for every build variant in
    your project.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 Crashlytics，请遵循他们网站上的步骤。一旦设置完成，它将开始连接到你的构建。Crashlytics 插件暴露了一个名为 `crashlyticsUploadDistributionInternal`
    的新任务，可以用来将 APK 上传到 Crashlytics。要推送你应用的新版本，你首先需要使用 `build` 或 `assemble` 任务来构建它。一旦
    APK 准备就绪，你可以使用 `crashlyticsUploadDistributionInternal` 任务将其上传到 Crashlytics。Crashlytics
    插件为项目中的每个构建变体创建一个上传任务。
- en: Thanks to the custom Gradle plugin, it is very easy for developers to get started
    with Crashlytics. It also makes it a breeze to upload your test builds to Crashlytics,
    because you just need to execute one extra task during the build process. This
    is a great example of how powerful the proper use of Gradle can be, and how a
    good Gradle plugin can make developers' lives a lot easier.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了自定义 Gradle 插件，开发者开始使用 Crashlytics 非常容易。它还使得将测试构建上传到 Crashlytics 变得非常简单，因为你在构建过程中只需要执行一个额外的任务。这是一个很好的例子，说明了正确使用
    Gradle 的强大之处，以及一个好的 Gradle 插件如何让开发者的生活变得更加轻松。
- en: Summary
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we introduced a few popular continuous integration systems,
    and explained how we can use them to automate building Android apps and libraries.
    You learned how to configure the CI systems to build Android projects using Gradle.
    Then we looked at several Gradle plugins to help us further automate the build
    and deployment processes, and we explained how to run tests automatically on the
    build server.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了几种流行的持续集成系统，并解释了如何使用它们来自动化构建 Android 应用和库。你学习了如何配置 CI 系统，使用 Gradle
    构建 Android 项目。然后我们探讨了几个 Gradle 插件，以帮助我们进一步自动化构建和部署过程，并解释了如何在构建服务器上自动运行测试。
- en: In the next chapter, we will look at some more advanced features of Gradle and
    optimizations for Gradle-based builds. We will also see how we can migrate a big
    Ant build configuration by using Ant tasks directly from Gradle, and porting them
    to Gradle in small steps.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨 Gradle 的一些更高级的功能以及基于 Gradle 的构建优化。我们还将了解如何通过直接使用 Gradle 中的 Ant 任务，并逐步将它们移植到
    Gradle 中，来迁移一个大的 Ant 构建配置。
