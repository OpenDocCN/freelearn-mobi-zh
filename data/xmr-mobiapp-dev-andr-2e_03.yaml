- en: Chapter 3. Creating the Points Of Interest App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章 创建兴趣点应用
- en: 'In this chapter, we will move to the practical side of creating an app and
    cover the facilities that Xamarin.Android provides developers for creating, executing,
    and debugging applications. This chapter covers the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将转向创建应用的实践方面，并介绍Xamarin.Android为开发者提供的创建、执行和调试应用程序的设施。本章涵盖了以下主题：
- en: An overview of the sample app
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例应用的概述
- en: Installing and configuring Xamarin.Android
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置Xamarin.Android
- en: Creating the sample app
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建示例应用
- en: Running and debugging apps
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行和调试应用
- en: The sample POIApp
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例POIApp
- en: 'In this chapter, we will begin by building a sample **Points Of Interest**
    (**POIApp**) app that will be completed through the remaining chapters of this
    book. This app will allow the user to capture, save, and manage the `POIApp` and
    it supports the following features:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将首先构建一个示例**兴趣点**（**POIApp**）应用，该应用将通过本书剩余章节完成。此应用将允许用户捕捉、保存和管理`POIApp`，并支持以下功能：
- en: It captures information about the `POIApp`, including name, description, address,
    latitude, longitude, and photos
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它捕捉关于`POIApp`的信息，包括名称、描述、地址、纬度、经度和照片
- en: It captures the address, latitude, and longitude of the `POIApp` using the devices
    location capabilities
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用设备的定位功能捕捉`POIApp`的地址、纬度和经度
- en: It captures and saves a photo of the `POIApp` using the devices camera
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用设备的相机捕捉并保存`POIApp`的照片
- en: It saves details of the `POIApp` on the Cloud
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在云上保存`POIApp`的详细信息
- en: It fetches and displays a list of the `POIApp` from the Cloud
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它从云中检索并显示`POIApp`的列表
- en: It stores/caches the `POIApp` for offline viewing
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它存储/缓存`POIApp`以供离线查看
- en: Installing Xamarin.Android
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Xamarin.Android
- en: Before we move on, we need to get Xamarin.Android installed. This section walks
    you through installing the latest Xamarin development platform (Xamarin.Android
    Version 5.1.3 and Xamarin Studio Version 5.9.3) on the Mac operating system.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，我们需要安装Xamarin.Android。本节将指导您在Mac操作系统上安装最新的Xamarin开发平台（Xamarin.Android版本5.1.3和Xamarin
    Studio版本5.9.3）。
- en: Tip
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: At the time of writing this book, the installation instructions presented in
    this chapter are accurate. However, the tools are being updated rapidly, so these
    instructions may be out of date by the time you read this. You can refer to the
    official Xamarin website for the updated installation instructions.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，本章中提供的安装说明是准确的。然而，工具正在快速更新，因此这些说明在您阅读时可能已过时。您可以参考官方Xamarin网站以获取更新的安装说明。
- en: You may choose to install Xamarin.Android and work through the samples on Windows
    OS; in which case, you will encounter only minor deviations in some of the directions.
    If you choose to install on the Windows operating system, you may refer to the
    installation guide from the official Xamarin developer portal at [http://developer.xamarin.com/guides/android/getting_started/installation/windows/](http://developer.xamarin.com/guides/android/getting_started/installation/windows/).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择在Windows操作系统上安装Xamarin.Android并完成示例；在这种情况下，您将遇到一些方向上的微小偏差。如果您选择在Windows操作系统上安装，您可以参考官方Xamarin开发者门户上的安装指南，网址为[http://developer.xamarin.com/guides/android/getting_started/installation/windows/](http://developer.xamarin.com/guides/android/getting_started/installation/windows/)。
- en: 'To install Xamarin.Android, perform the following steps:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Xamarin.Android，请执行以下步骤：
- en: The Xamarin Studio IDE and Xamarin.Android platforms are the prerequisites to
    develop an Android application using Xamarin. Go to the download section of [http://xamarin.com/](http://xamarin.com/),
    fill in your personal details, download the unified installer for your operating
    system, and launch it:![](img/gwSDQ08o.jpg)
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用Xamarin开发Android应用，Xamarin Studio IDE和Xamarin.Android平台是必备条件。请访问[http://xamarin.com/](http://xamarin.com/)的下载部分，填写您的个人信息，下载适用于您操作系统的统一安装程序，并启动它：![](img/gwSDQ08o.jpg)
- en: Click on the installer page and the agreement page until you come to the **Product
    Selection** page. The installer allows the installation of both Xamarin.Android
    and Xamarin.iOS, as shown in the following screenshot:![](img/p4RVHvwp.jpg)
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击安装程序页面和协议页面，直到到达**产品选择**页面。安装程序允许安装Xamarin.Android和Xamarin.iOS，如下截图所示：![](img/p4RVHvwp.jpg)
- en: Xamarin.iOS will not be needed for the exercises in this book; you may uncheck
    Xamarin.iOS for the installer window and click on **Continue**.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本书的练习中不需要Xamarin.iOS；您可以在安装程序窗口中取消选中Xamarin.iOS，然后点击**继续**。
- en: Now the installer will proceed to configure the installation directory. You
    may either change the installation location on your computer, or continue with
    the installation:![](img/yQTqASqe.jpg)
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在安装程序将继续配置安装目录。你可以更改计算机上的安装位置，或者继续安装:![](img/yQTqASqe.jpg)
- en: Next, the prerequisites for the installation will be listed, as shown in the
    following screenshot. It requires installing the Mono framework, the Android SDK,
    Xamarin Studio, and the Xamarin.Android component. Click on **Continue** to proceed
    with the installation:![](img/MiJEzsQf.jpg)
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将列出安装的先决条件，如下面的截图所示。它需要安装 Mono 框架、Android SDK、Xamarin Studio 和 Xamarin.Android
    组件。点击 **继续** 以继续安装:![](img/MiJEzsQf.jpg)
- en: You will now see the Android SDK agreement page. Just accept and click on **Continue**
    for installation. An installation progress page will be displayed depicting the
    component installation in progress:![](img/pE7iykJy.jpg)
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在将看到 Android SDK 协议页面。只需接受并点击 **继续** 以进行安装。将显示一个安装进度页面，描述组件安装的进度:![](img/pE7iykJy.jpg)
- en: Note
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: During installation of Xamarin.Android, if you're encountering Android SDK download
    issues, please ensure that downloads are not blocked by your corporate network
    or firewall. For such events, you can download and install the standalone Android
    SDK from [https://developer.android.com/sdk/index.html](https://developer.android.com/sdk/index.html).
    Once Android SDK is installed on your computer, you can resume with Xamarin package
    installer.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在安装 Xamarin.Android 期间，如果你遇到 Android SDK 下载问题，请确保下载没有被你的企业网络或防火墙阻止。对于此类事件，你可以从
    [https://developer.android.com/sdk/index.html](https://developer.android.com/sdk/index.html)
    下载和安装独立的 Android SDK。一旦 Android SDK 安装在你的计算机上，你就可以继续使用 Xamarin 软件包安装程序。
- en: As each component is installed, a check mark will be placed next to the component,
    and once all the items are installed, a final installation completion page will
    be displayed.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 随着每个组件的安装，将在组件旁边放置一个勾选标记，一旦所有项目都安装完毕，将显示一个最终的安装完成页面。
- en: Now click on **Launch Xamarin Studio**:![](img/bz1WuN11.jpg)
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击 **启动 Xamarin Studio**:![](img/bz1WuN11.jpg)
- en: Installing platforms and tools
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装平台和工具
- en: The Android platform installation comes with the Android SDK manager toolkit
    that allows you to select and download the tools and platforms that are required
    to build the Android apps. For example, when a new version of Android is released,
    you can test your application against the new platform by downloading the new
    bundles using the SDK manager.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Android 平台安装附带 Android SDK 管理器工具包，允许你选择和下载构建 Android 应用程序所需的工具和平台。例如，当 Android
    新版本发布时，你可以通过使用 SDK 管理器下载新捆绑包来测试你的应用程序与新的平台兼容性。
- en: 'The **Android SDK Manager** can be launched from Xamarin Studio by navigating
    to the **Tools** | **Open Android SDK Manager...** option:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**Android SDK 管理器**可以通过在 Xamarin Studio 中导航到 **工具** | **打开 Android SDK 管理器...**
    选项来启动：'
- en: '![](img/RsEs57fP.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/RsEs57fP.jpg)'
- en: Notice that the Android SDK Manager has now opened and it lists the following
    options for you to install or delete.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到 Android SDK 管理器现在已经打开，并列出了以下选项供你安装或删除。
- en: Tools
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工具
- en: 'The **Tools** section is one of the core parts of the Android installation.
    This is required to build, install, and debug the Android application on the device:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**工具**部分是 Android 安装的核心部分之一。这是在设备上构建、安装和调试 Android 应用程序所必需的：'
- en: '![](img/sMawMDQJ.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/sMawMDQJ.jpg)'
- en: 'A brief description of the tools is as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 工具的简要描述如下：
- en: '**Android SDK Tools**: These are the development tools that must be installed
    to compile Xamarin.Android applications. When you install the Xamarin platform,
    it automatically gets installed; however, you may need to keep this updated.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Android SDK 工具**: 这些是必须安装以编译 Xamarin.Android 应用程序的开发工具。当你安装 Xamarin 平台时，它将自动安装；然而，你可能需要保持其更新。'
- en: '**Android SDK Platform-tools**: The SDK platform tools are required to connect
    the devices to deploy builds and debug applications. You should always have the
    latest version of the platform tools to ensure compatibility with the latest version
    of the Android APIs; so keep this up to date as well.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Android SDK 平台工具**: SDK 平台工具是连接设备以部署构建和调试应用程序所必需的。你应该始终拥有最新版本的平台工具以确保与最新版本的
    Android API 兼容；因此，也要保持其更新。'
- en: '**Android SDK Build-tools**: Build tools are required to compile the source
    code to the application that can be run on the Android devices or emulators. By
    default, Xamarin Studio installs the most recent version of the build tools. It
    is always recommended that you install the latest version of the SDK build tools
    as well.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Android SDK 构建工具**：构建工具用于将源代码编译成可在 Android 设备或模拟器上运行的应用程序。默认情况下，Xamarin Studio
    安装了最新版本的构建工具。始终建议您安装最新的 SDK 构建工具版本。'
- en: 'For more information, you may visit the following official Android documentation:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，您可以访问以下官方 Android 文档：
- en: '[https://developer.android.com/tools/revisions/build-tools.html](https://developer.android.com/tools/revisions/build-tools.html)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://developer.android.com/tools/revisions/build-tools.html](https://developer.android.com/tools/revisions/build-tools.html)'
- en: '[http://developer.android.com/tools/sdk/tools-notes.html](http://developer.android.com/tools/sdk/tools-notes.html)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://developer.android.com/tools/sdk/tools-notes.html](http://developer.android.com/tools/sdk/tools-notes.html)'
- en: The Android platform APIs
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Android 平台 API
- en: 'Each successive release of Android operating system also includes the Android
    framework API for developers to take advantage of the set of new packages, classes
    to build apps. The platform API section lists all the Android API versions along
    with the API levels:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Android 操作系统每个后续版本也包括 Android 框架 API，供开发者利用新包、类构建应用程序。平台 API 部分列出了所有 Android
    API 版本以及 API 级别：
- en: '![](img/GgmQ2Kwt.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/GgmQ2Kwt.jpg)'
- en: 'A brief description of the various platforms is as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对各种平台的简要描述：
- en: '**SDK Platform**: The SDK Platform for a given API level allows you to compile
    against that version of Android. When a new platform is released, it requires
    the newer version of the SDK Platform tools and SDK tools; and hence, you need
    to keep those up to date.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SDK 平台**：给定 API 级别的 SDK 平台允许您针对该版本的 Android 进行编译。当发布新平台时，它需要更新的 SDK 平台工具和
    SDK 工具；因此，您需要保持这些工具的最新状态。'
- en: '**Samples for SDK**: These are Android sample applications for each API level
    developed using Java. They are not required by Xamarin developers. You don''t
    need to install these samples unless you have a specific need or if you want to
    analyze and port the Java samples to C#.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SDK 示例**：这些是使用 Java 开发的每个 API 级别的 Android 示例应用程序。Xamarin 开发者不需要这些示例。除非您有特定的需求或想要分析并将
    Java 示例迁移到 C#，否则不需要安装这些示例。'
- en: '**System Images**: System images are used with **Android****Virtual Device**
    (**AVD**). All the recent Android versions include both the ARM and x86 system
    images. The x86 images run significantly faster and are preferred over the ARM.
    Notice that some of the system images are prefixed with **Google APIs**. They
    include the Google Play services runtime and are useful for testing the apps that
    use Google Play services features such as map, in-app purchases, and so on.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统镜像**：系统镜像与 **Android 虚拟设备**（**AVD**）一起使用。所有最新的 Android 版本都包括 ARM 和 x86
    系统镜像。x86 镜像运行速度明显更快，因此比 ARM 镜像更受欢迎。请注意，一些系统镜像以 **Google APIs** 为前缀。它们包括 Google
    Play 服务运行时，并且对于测试使用 Google Play 服务功能（如地图、应用内购买等）的应用程序非常有用。'
- en: The Android platform Extras
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Android 平台额外工具
- en: 'The **Extras** section includes some of the additional optional tools you may
    require during development, which are shown in the following screenshot:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**额外工具**部分包括一些在开发过程中可能需要的附加可选工具，如下面的截图所示：'
- en: '![](img/bVX5qBKg.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bVX5qBKg.jpg)'
- en: 'The following section will brief you on some of the important sections of the
    Android platform extra tools:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分将简要介绍 Android 平台的一些额外工具的重要部分：
- en: '**Android Support Library**: The **Android Support Library** is a set of code
    libraries that are used to provide backward compatibility for new API features
    on older devices. It is considered as a best practice to use the support libraries
    while developing some of the features, as it makes the app compatible with the
    older versions of devices.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Android 支持库**：**Android 支持库**是一组代码库，用于为旧设备提供对新 API 功能的向后兼容性。在开发某些功能时使用支持库被视为最佳实践，因为它使得应用与旧版本设备兼容。'
- en: '**Google Play services**: The Google Play services runtime provides the set
    of APIs to develop certain Android features such as Google Maps, integrating with
    Google+, Google Play subscription, and so on. All the Android devices include
    the Google Play service runtime. However, the Android emulators don''t include
    the Google Play services runtime by default but it can be installed separately.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google Play服务**：Google Play服务运行时提供了一组API，用于开发某些Android功能，如Google Maps、与Google+集成、Google
    Play订阅等。所有Android设备都包含Google Play服务运行时。然而，Android模拟器默认不包含Google Play服务运行时，但可以单独安装。'
- en: '**Google USB Driver**: If you are running Windows OS, you will need to install
    these drivers to enable USB debugging for Android devices. For some devices, you
    may also need to install the specific device driver''s software provided by the
    device manufacturers. You don''t need to install this driver if you are using
    Mac OS X for development.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google USB驱动程序**：如果您正在运行Windows操作系统，您将需要安装这些驱动程序以启用Android设备的USB调试。对于某些设备，您可能还需要安装设备制造商提供的特定设备驱动程序的软件。如果您使用Mac
    OS X进行开发，则不需要安装此驱动程序。'
- en: Creating Android Virtual Devices
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Android虚拟设备
- en: The Android emulator, also known as **Android Virtual Device** (**AVD**), is
    used to test the Android application in the absence of a device. Emulators get
    installed as part of the Xamarin installation. You can create your own emulator
    or customize an existing one with the required device configurations for the device
    being emulated.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Android模拟器，也称为**Android虚拟设备**（**AVD**），用于在没有设备的情况下测试Android应用程序。模拟器作为Xamarin安装的一部分进行安装。您可以为模拟的设备创建自己的模拟器或根据所需的设备配置自定义现有的模拟器。
- en: 'In order to create or modify an existing emulator, perform the following steps:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建或修改现有的模拟器，请执行以下步骤：
- en: From the main menu bar, navigate to **Tools** and open **Google Emulator Manager**.
    It will open the **Android Virtual Device Manager** window:![](img/IbzvPhuY.jpg)
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从主菜单栏导航到**工具**并打开**Google模拟器管理器**。它将打开**Android虚拟设备管理器**窗口：![图片](img/IbzvPhuY.jpg)
- en: To create a new emulator, click on the **Create** button, on the right-hand
    side panel. Provide the configurations, such as **AVD Name**, **Device**, **Target**,
    **Memory Options**, and so on.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建新的模拟器，请单击右侧面板上的**创建**按钮。提供配置，例如**AVD名称**、**设备**、**目标**、**内存选项**等。
- en: To edit an existing emulator, select the emulator you wish to edit and click
    on the **Edit** button:![](img/hK3dxKpi.jpg)
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要编辑现有的模拟器，选择您要编辑的模拟器并单击**编辑**按钮：![图片](img/hK3dxKpi.jpg)
- en: Note the **Target** setting; this specifies the version of the Android platform
    and the API level that will be used for the emulator.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意**目标**设置；这指定了模拟器将使用的Android平台版本和API级别。
- en: Select the device skin from the **Device** field drop-down menu. In my case,
    I have selected **Nexus 5**.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**设备**字段下拉菜单中选择设备皮肤。在我的情况下，我选择了**Nexus 5**。
- en: Set the **Target** field to **Android 4.4.2**. If needed, uncheck the **Hardware
    keyboard present** option, and click on **OK**.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**目标**字段设置为**Android 4.4.2**。如果需要，取消选中**硬件键盘存在**选项，然后单击**确定**。
- en: Check the **Use Host GPU** option. This option makes the emulator use the host
    computer's OpenGL implementation, which makes the rendering significantly faster.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**使用主机GPU**选项。此选项使模拟器使用主机计算机的OpenGL实现，这使得渲染速度显著提高。
- en: You may select the **Snapshot** option to speed up the emulator's boot time.
    When this option is enabled, it saves a snapshot of its RAM on the first boot
    and restores from that snapshot on future use. You cannot have both the **Snapshot**
    and **Use Host GPU** options enabled at the same time.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以选择**快照**选项来加速模拟器的启动时间。当此选项启用时，它将在第一次启动时保存其RAM的快照，并在未来的使用中从该快照恢复。您不能同时启用**快照**和**使用主机GPU**选项。
- en: Cloning a virtual device
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 克隆虚拟设备
- en: 'There are many options that can be modified in order to emulate any device
    and configuration needed. The Android Virtual Device Manager dialog box also has
    a tab named **Device Definitions** that can be used to set up the devices that
    are available when configuring an AVD. The following screenshot shows you what
    can be configured as part of the device definition:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多选项可以修改，以便模拟任何所需的设备和配置。Android虚拟设备管理器对话框还有一个名为**设备定义**的选项卡，可以用来设置配置AVD时可用设备。以下截图显示了可以作为设备定义一部分进行配置的内容：
- en: '![](img/K5JFlUIs.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/K5JFlUIs.jpg)'
- en: Speeding up the Android emulator
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加速Android模拟器
- en: The default Android emulator that comes with the Android development toolkit
    is quite sluggish. It is often disappointing and painful to test an application
    in the Android device emulators. The wiser choice for developers is to have a
    real Android device to test on. However, because the Android ecosystem has various
    form factors and device manufactures, it is practically impossible to buy each
    targeted device to test the app. You have to go for some cost effective solution
    to test your app on all targeted devices.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 随 Android 开发工具包一起提供的默认 Android 模拟器相当缓慢。在 Android 设备模拟器中测试应用程序常常令人失望且痛苦。对于开发者来说，更明智的选择是拥有真实的
    Android 设备进行测试。然而，由于 Android 生态系统具有各种形态和设备制造商，实际上不可能购买每个目标设备来测试应用程序。您必须寻找一些成本效益高的解决方案来测试您的应用程序。
- en: The following section will guide you through some of the tips to make your Android
    emulator faster and other alternative options available to test Android apps.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分将指导您了解一些使您的 Android 模拟器更快以及可用于测试 Android 应用程序的替代选项的技巧。
- en: Using the x86 emulator
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 x86 模拟器
- en: Android provides an x86 emulator that can speed up the development considerably
    due to faster start and execution times for the AVD. The x86 emulator is not a
    part of the base Xamarin installation, but the directions for the installation
    can be found on the Xamarin website as well as the Android developer website.
    A very specific version may be required, particularly if you are using OS X Mavericks,
    so we will not replicate the directions here.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Android 提供了一个 x86 模拟器，可以显著加快开发速度，因为 AVD 的启动和执行时间更快。x86 模拟器不是基础 Xamarin 安装的一部分，但安装说明可以在
    Xamarin 网站以及 Android 开发者网站上找到。可能需要非常具体的版本，尤其是如果您正在使用 OS X Mavericks，因此我们在此不重复说明。
- en: Once installed, you can take advantage of the x86 emulator by the selected Intel
    Atom (x86) for the CPU/ABI when editing an AVD configuration.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您可以在编辑 AVD 配置时通过选择的 Intel Atom (x86) CPU/ABI 利用 x86 模拟器。
- en: Third-party emulator solutions
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第三方模拟器解决方案
- en: The x86 solution should work just fine on the computer with a decent memory.
    Apart from the native Android emulators, you can use some of the third-party tools
    such as the Xamarin Android Player or Genymotion.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: x86 解决方案应在具有良好内存的计算机上运行良好。除了原生 Android 模拟器之外，您还可以使用一些第三方工具，如 Xamarin Android
    Player 或 Genymotion。
- en: The Xamarin Android Player
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Xamarin Android Player
- en: Xamarin recently announced its own Android emulator called the Xamarin Android
    Player. The Xamarin Player runs on Android x86 hardware accelerated virtualization
    and OpenGL 2.0 for fast booting and a smooth user interface. This works on both
    the Windows and Mac platforms. Your system requires to have an OpenGL 2.0 compatible
    graphics card with at least 2 GB hard disk space and at least 2 GB or RAM to install
    and run the Xamarin player.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin 最近宣布了自己的 Android 模拟器，名为 Xamarin Android Player。Xamarin Player 在 Android
    x86 硬件加速虚拟化和 OpenGL 2.0 上运行，以实现快速启动和流畅的用户界面。这适用于 Windows 和 Mac 平台。您的系统需要具有与 OpenGL
    2.0 兼容的图形卡，至少 2 GB 的硬盘空间和至少 2 GB 的 RAM 来安装和运行 Xamarin Player。
- en: 'The following screenshot shows the Xamarin Android Player with the player settings
    pane:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了带有播放器设置面板的 Xamarin Android Player：
- en: '![](img/doyFofN7.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/doyFofN7.jpg)'
- en: The Xamarin player settings pane allows you to simulate some of the emulator
    controls, such as battery life, geo locations, volume, and power control.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin Player 设置面板允许您模拟一些模拟器控件，例如电池寿命、地理位置、音量和电源控制。
- en: Genymotion
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Genymotion
- en: Genymotion is yet another alternative in the race of faster Android emulators.
    Genymotion is based on the open source project Android VM, developed by a French
    company Genymobile. It also works on all major platforms, including Mac, Windows,
    and Linux. The basic version of Genymotion is free to download; however, the commercial
    version does much more than the free version. The paid version of Genymotion can
    simulate multitouch, camera, GPS, network quality simulation, accelerometer, and
    much more. This can be the best alternative replacement for Android AVD.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Genymotion 是在更快的 Android 模拟器竞赛中又一个替代选择。Genymotion 基于开源项目 Android VM，由法国公司 Genymobile
    开发。它也适用于所有主要平台，包括 Mac、Windows 和 Linux。Genymotion 的基本版本可以免费下载；然而，商业版本的功能远超免费版本。Genymotion
    的付费版本可以模拟多点触控、摄像头、GPS、网络质量模拟、加速度计等等。这可以成为 Android AVD 的最佳替代选择。
- en: 'The following screenshot shows the Xamarin Android Player on Mac OS:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了 Mac OS 上的 Xamarin Android Player：
- en: '![](img/xTCcuSm3.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/xTCcuSm3.jpg)'
- en: Creating the POI app
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 POI 应用程序
- en: Now that we already have our development environment ready, let's begin by building
    the `POIApp`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了开发环境，让我们开始构建`POIApp`。
- en: 'The following section will walk you through the several steps involved to create,
    build, and deploy the POI application into the Android device:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分将指导您完成创建、构建并将POI应用程序部署到Android设备所需的几个步骤：
- en: Launch Xamarin Studio.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Xamarin Studio。
- en: From the **File** menu, navigate to **New** | **Solution**. The **New Solution**
    view will be presented, as shown in the following screenshot:![](img/ok5VFH5B.jpg)
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**文件**菜单中，导航到**新建** | **解决方案**。将显示**新建解决方案**视图，如下截图所示：![图片](img/ok5VFH5B.jpg)
- en: Select the **Android** section on the left-hand side of the screen, navigate
    to **App** | **Android App**, and then click on **Next**.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在屏幕左侧选择**Android**部分，导航到**应用** | **Android应用**，然后点击**下一步**。
- en: Enter the app name as `POIApp` and the application identifier as `com.packt.poiapp`.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用名称输入为`POIApp`，并将应用程序标识符设置为`com.packt.poiapp`。
- en: From the **Compatibility** selection, select **Maximum Compatibility** to make
    your application compatible on a full range of devices.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**兼容性**选择中，选择**最大兼容性**以使您的应用程序在广泛的设备上兼容。
- en: From the **Themes** drop-down menu, you may select from the range of available
    themes and click on **Next**:![](img/xCa6W6im.jpg)
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**主题**下拉菜单中，您可以从提供的主题范围中选择，然后点击**下一步**：![图片](img/xCa6W6im.jpg)
- en: Review the project location and adjust it if desired. Click on **Create**:![](img/T8KJ7IqJ.jpg)
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查项目位置，并根据需要调整。点击**创建**：![图片](img/T8KJ7IqJ.jpg)
- en: Xamarin Studio will create a solution and the required project folders. The
    project folder will contain a default `MainActivity.cs` class and a `Main.axml`
    layout file.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Xamarin Studio将创建一个解决方案和所需的项目文件夹。项目文件夹将包含一个默认的`MainActivity.cs`类和一个`Main.axml`布局文件。
- en: The Xamarin Studio IDE
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Xamarin Studio IDE
- en: After creating `POIApp`, the project will be opened within the environment.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`POIApp`后，项目将在环境中打开。
- en: 'The following screenshot depicts Xamarin Studio after the project has been
    created:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了创建项目后Xamarin Studio的状态：
- en: '![](img/PHw0i0FT.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/PHw0i0FT.jpg)'
- en: 'Like any other modern IDE, Xamarin Studio is organized with a set of menus
    at the top of the screen, a context-sensitive toolbar below it, and a series of
    dockable pads for viewing and manipulating various types of content. By default,
    Xamarin Studio is configured with the following options:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何其他现代IDE一样，Xamarin Studio通过屏幕顶部的菜单、下面的上下文相关工具栏和一系列可停靠的垫片来组织，用于查看和操作各种类型的内容。默认情况下，Xamarin
    Studio配置了以下选项：
- en: The **Solution** pad is docked on the left-hand side and allows you to explore
    the structure and content contained in the project
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解决方案**垫片停靠在左侧，允许您探索项目中的结构和内容。'
- en: Editor windows are in the middle and present the content of files for viewing
    and manipulation
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑窗口位于中间，用于查看和操作文件内容。
- en: Task-specific pads are collapsed on the right-hand side and bottom and can be
    expanded by hovering over the icon and caption
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务特定垫片在右侧和底部折叠，可以通过悬停在图标和标题上展开。
- en: Additional pads can be accessed by navigating to **View** | **Pads**.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过导航到**视图** | **垫片**来访问额外的垫片。
- en: The Project Options view
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目选项视图
- en: There are numerous options that can be set, which would affect the way the application
    is built and executed. These options can be adjusted from within the **Project
    Options** view. The following section will show you how to use the different options
    available in the Xamarin Studio project explorer to set various project configurations.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多可设置的选项，这些选项会影响应用程序的构建和执行方式。这些选项可以从**项目选项**视图中进行调整。以下部分将向您展示如何使用Xamarin Studio项目资源管理器中可用的不同选项来设置各种项目配置。
- en: Understanding the project structure
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解项目结构
- en: 'A project is an organizational unit that represents the complete Xamarin Android
    application in the **Solution** pad. It contains not just the source code, but
    also contains the dependent libraries, resources, and other project configurations.
    Before we begin with writing any code, we must understand the Xamarin.Android
    project structure and significance of each folder. The following screenshot depicts
    the different components a Xamarin Android application is composed of:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 项目是一个组织单元，它代表**解决方案**垫片中的完整Xamarin Android应用程序。它不仅包含源代码，还包含依赖库、资源和其他项目配置。在我们开始编写任何代码之前，我们必须了解Xamarin.Android项目结构和每个文件夹的重要性。以下截图展示了Xamarin
    Android应用程序由哪些不同组件组成：
- en: '![](img/q89OffyQ.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/q89OffyQ.jpg)'
- en: 'Xamarin Studio project wizard creates the default project structure and adds
    the required files and directory to **Solution** pad. The most important building
    blocks of a Xamarin.Android project includes:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin Studio 项目向导创建默认的项目结构，并将所需的文件和目录添加到 **解决方案** 面板中。Xamarin.Android 项目的最重要的构建块包括：
- en: The main project (`POIApp`) is the root directory that contains the entire project
    context. Right-click on the project name to get various options, such as clean,
    build, run, options for project configurations, and so on.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主要项目（`POIApp`）是包含整个项目上下文的根目录。右键单击项目名称以获取各种选项，例如清理、构建、运行、项目配置选项等。
- en: The `References` directory contains the references to the lists of the base
    class libraries and assemblies used in the application. Right-click on **Edit
    References** to add a base class library or third-party assembly.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`References` 目录包含应用程序中使用的基类库和程序集的引用。右键单击 **编辑引用** 以添加基类库或第三方程序集。'
- en: The `Components` folder contains reusable pieces of code that are built by community
    developers and shared on the Xamarin component store. A component gives you the
    ability to quickly add new controls and functionality to Xamarin applications.
    For example, if your application uses the database operation, you can quickly
    integrate the SQLite.Net component to perform SQL operations by writing a few
    lines of code. We will discuss how to add a component to your application from
    the Xamarin component store in Chapter 4, *Adding a List View*.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Components` 文件夹包含由社区开发者构建并共享在 Xamarin 组件商店中的可重用代码片段。组件使您能够快速将新的控件和功能添加到 Xamarin
    应用程序中。例如，如果您的应用程序使用数据库操作，您可以通过编写几行代码快速集成 SQLite.Net 组件以执行 SQL 操作。我们将在第 4 章 *添加列表视图*
    中讨论如何从 Xamarin 组件商店将组件添加到您的应用程序中。'
- en: The `Assets` folder contains the raw assets that can be bundled with the application.
    It can contain files such as third-party `.ttf` fonts, game textures, and so on.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Assets` 文件夹包含可以与应用程序捆绑的原始资产。它可以包含第三方 `.ttf` 字体、游戏纹理等文件。'
- en: 'The `Properties` folder generally contains two files: the `AndroidManifest.xml`
    and `AssemblyInfo.cs` files. The `AndroidManifest.xml` file contains the metadata
    of the Android application and `AssemblyInfo.cs` contains information about the
    assembly, such as the name, description, version, and so on.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Properties` 文件夹通常包含两个文件：`AndroidManifest.xml` 和 `AssemblyInfo.cs` 文件。`AndroidManifest.xml`
    文件包含 Android 应用的元数据，而 `AssemblyInfo.cs` 文件则包含有关程序集的信息，例如名称、描述、版本等。'
- en: The `Resources` folder is the main building block composed of images (named
    as drawables in Android), layout descriptors, strings, colors, themes, and so
    on. All the resources added are grouped into different folders and are referenced
    with a unique resource ID.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Resources` 文件夹是主要构建块，由图像（在 Android 中称为可绘制资源）、布局描述符、字符串、颜色、主题等组成。所有添加的资源都被分组到不同的文件夹中，并使用唯一的资源
    ID 进行引用。'
- en: Xamarin Studio automatically creates a new `Resource.designer.cs` file under
    the `Resources` directory. This file holds the unique IDs for each resource. This
    is similar to the `R.java` file that is created automatically in the native Android
    application. This file is maintained by Xamarin.Android and is periodically regenerated
    whenever there is a change made to the application's resources.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Xamarin Studio 自动在 `Resources` 目录下创建一个新的 `Resource.designer.cs` 文件。此文件包含每个资源的唯一
    ID。这与在本地 Android 应用程序中自动创建的 `R.java` 文件类似。此文件由 Xamarin.Android 维护，并且每当应用程序的资源发生变化时，都会定期重新生成。
- en: 'The following are some of the subdirectories you can create inside the `Resources`
    directory:'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是在 `Resources` 目录内可以创建的一些子目录：
- en: '**Resources/drawable-xxx**: The drawable folders are used to hold the images
    such as `.png`, `.jpeg`, and so on. Notice that the default project structure
    contains multiple drawable folder suffixes with qualifiers, such as hdpi, mdpi,
    xhdpi, and so on. The qualifier indicates that the resources inside that directory
    will be used in certain circumstances only. You can create another directory `Resources/drawable`
    to place the images that are not required for different device configurations.'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Resources/drawable-xxx**：可绘制文件夹用于存储图像，如 `.png`、`.jpeg` 等。请注意，默认项目结构包含多个具有限定符的可绘制文件夹后缀，例如
    hdpi、mdpi、xhdpi 等。限定符表示该目录中的资源仅在特定情况下使用。您可以创建另一个目录 `Resources/drawable` 来放置不需要针对不同设备配置的图像。'
- en: A more detailed discussion on resource qualifiers are explained in Chapter 7,
    *Designing for Multiple Screen Sizes*.
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在第7章“为多种屏幕尺寸设计”中，对资源限定符的更详细讨论被解释了。
- en: '**Resources/layout**: This folder contains the XML layout descriptor files.
    In our example, the `Main.axml` file is created.'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源/布局**：这个文件夹包含XML布局描述符文件。在我们的例子中，创建了`Main.axml`文件。'
- en: '**Resources/values**: This folder contains files, such as `string.xml`, to
    declare all the strings used in an app. This is helpful for app localization.'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源/值**：这个文件夹包含用于声明应用中所有字符串的文件，例如`string.xml`。这对于应用本地化很有帮助。'
- en: '**Resources/menu**: The menu folder holds the XML-based menu specification
    for each activity.'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源/菜单**：菜单文件夹包含每个活动的基于XML的菜单规范。'
- en: The application source code can be managed inside multiple different folders.
    By default, the Xamarin Studio project template is created in the `MainActivity.cs`
    file.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序源代码可以管理在多个不同的文件夹中。默认情况下，Xamarin Studio项目模板是在`MainActivity.cs`文件中创建的。
- en: The newer version of Xamarin Studio creates the `Xamarin.UITest` project, which
    is used for automated UI acceptance testing. The `Xamarin.UITest` framework is
    based on Calabash, using which you can write a test case in C# and NUnit and execute
    for both the Android and iOS platforms. This book covers Android unit testing
    using NUnitLite in Chapter 8, *Creating Data Storage Mechanisms*. For now, if
    you wish, you can safely delete the test project.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新版本的Xamarin Studio创建了`Xamarin.UITest`项目，该项目用于自动化的UI验收测试。`Xamarin.UITest`框架基于Calabash，使用它可以编写C#和NUnit的测试用例，并在Android和iOS平台上执行。本书在第8章“创建数据存储机制”中介绍了使用NUnitLite进行Android单元测试。现在，如果你愿意，你可以安全地删除测试项目。
- en: The Xamarin Studio layout designer
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Xamarin Studio布局设计器
- en: Open the `Main.axml` file located at `Resources/layout/Main.axml` from the solution
    explorer. Notice that the graphical layout editor will be the default layout editor.
    Currently, the `Main.axml` layout contains a button inside `LinearLayout`. Let's
    now proceed to understand the different Xamarin Studio layout designer options.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 从解决方案资源管理器中打开位于`Resources/layout/Main.axml`的`Main.axml`文件。注意图形布局编辑器将是默认布局编辑器。目前，`Main.axml`布局包含一个位于`LinearLayout`内的按钮。现在让我们继续了解Xamarin
    Studio布局设计器的不同选项。
- en: The designer content layout
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计内容布局
- en: 'The Android Studio layout designer contains two buttons: **Content** and **Source**,
    which are at the bottom of the designer view. These buttons allow you to switch
    between a visual representation of the layout (**Content**) and an XML source
    code view of the layout. This is very useful as some tasks are just quicker to
    edit directly in the XML source view; however, the content view is useful to view
    and arrange widgets.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio布局设计器包含两个按钮：**内容**和**源**，这两个按钮位于设计视图的底部。这些按钮允许你在布局的可视表示（**内容**）和布局的XML源代码视图之间切换。这对于直接在XML源视图中进行编辑的任务来说非常有用；然而，内容视图对于查看和排列小部件来说也很实用。
- en: 'The content view''s usefulness is somewhat limited only because most of the
    time portions of a view must be constructed with the code at runtime; however,
    when the view can be specified completely in XML, the content view is very useful.
    In the content view, you will notice a set of a few useful tools arranged at the
    top of the window, as shown in the following screenshot:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 内容视图的实用性在一定程度上有限，仅因为大多数时候视图的一部分必须在运行时使用代码构建；然而，当视图可以完全在XML中指定时，内容视图就非常有用。在内容视图中，你会在窗口顶部注意到一组有用的工具，如下面的截图所示：
- en: '![](img/Z4ACJxVR.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Z4ACJxVR.jpg)'
- en: In the upper-right corner, you will find a set of zoom controls. These allow
    you to zoom the layout in or out, depending on your monitor's size and the level
    of details you would like to view. At the top of the page, you will find drop-down
    menus that also let you select things, such as the screen size of the device to
    simulate, orientation of the device, and the version of the Android platform to
    simulate.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在右上角，你可以找到一组缩放控件。这些控件允许你根据你的显示器大小和想要查看的细节级别来放大或缩小布局。在页面顶部，你可以找到下拉菜单，这些菜单也允许你选择一些选项，例如要模拟的设备屏幕大小、设备的方向以及要模拟的Android平台版本。
- en: The Document Outline and Properties pads
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档大纲和属性面板
- en: On the bottom right-hand side of the IDE, you will notice the **Document Outline**
    and **Properties** pads.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在IDE的右下角，你会注意到**文档大纲**和**属性**面板。
- en: The **Document Outline** pad provides a convenient means of navigating and selecting
    widgets, particularly as layouts get more complex. Select **listView1** and then
    click on the **Properties** tab. Activate the **Document Outline** pad to see
    your layout outline, listing all the widgets, Views, or view groups contained
    in it.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '**文档大纲**面板提供了方便的导航和选择小部件的方法，尤其是在布局变得更加复杂时。选择**listView1**然后点击**属性**选项卡。激活**文档大纲**面板以查看您的布局大纲，列出其中包含的所有小部件、视图或视图组。'
- en: Select any view on the designer window and click on the **Properties** tab to
    activate the **Properties** window. The **Properties** window allows you to edit/select
    the attributes for the selected view. Xamarin Studio takes care of generating
    the source code to reflect the changes made in the designer view.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计窗口中选择任何视图并点击**属性**选项卡以激活**属性**窗口。**属性**窗口允许您编辑/选择所选视图的属性。Xamarin Studio负责生成源代码以反映在设计视图中所做的更改。
- en: Toolbox
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工具箱
- en: The **Toolbox** pad is organized with the basic widgets at the top of the list
    and container widgets such as ListViews further down the list.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**工具箱**面板按照基本小部件在列表顶部，容器小部件如ListView等在列表下方。'
- en: By default, the **Toolbox** pad is displayed on the top right-hand side of the
    Xamarin Studio IDE. There is a search box at the top that allows you to filter
    the widgets in the list, and there are two buttons on the right-hand side of the
    search box that allow you to adjust the way widgets are listed.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，**工具箱**面板显示在Xamarin Studio IDE的右上角。顶部有一个搜索框，允许您过滤列表中的小部件，并且搜索框右侧有两个按钮，允许您调整小部件的显示方式。
- en: Setting the target framework
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置目标框架
- en: The target framework setting determines which API level will be available to
    you during development and testing. Let's select the automatic setting; use the
    target framework version. In this case, it automatically selected `API level 19
    Android 4.4`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 目标框架设置确定在开发和测试期间可用的API级别。让我们选择自动设置；使用目标框架版本。在这种情况下，它自动选择了`API级别19 Android 4.4`。
- en: The minimum SDK version tells you which minimum API level is required for the
    application to run. Based on the value specified in the minimum SDK, the Google
    Play Store prevents the user from installing the application if the system's API
    level is lower than the value specified.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 最小SDK版本告诉您应用程序运行所需的最低API级别。根据最小SDK中指定的值，Google Play商店会阻止用户安装API级别低于指定值的系统应用程序。
- en: 'In order to set the target framework, perform the following steps:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置目标框架，请执行以下步骤：
- en: Select the `POIApp` project under the `POIApp` solution in the **Solution**
    pad.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**解决方案**面板中，选择`POIApp`解决方案下的`POIApp`项目。
- en: Right-click on it and click on **Options**.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击它并点击**选项**。
- en: Navigate to **Build** | **General** on the left-hand side of the page:![](img/Z6GYOSY8.jpg)
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到页面左侧的**构建** | **常规**：![图片](img/Z6GYOSY8.jpg)
- en: In the **Target framework** field, select **Use latest installed platform**
    and click on **OK**.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**目标框架**字段中，选择**使用最新安装的平台**并点击**确定**。
- en: Setting the app icon and package name
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置应用图标和包名
- en: Xamarin.Android provides a default icon and package name for apps. The icon
    will be displayed on the Android device's home drawer alongside other application
    lists, as well as on the action bar at the top of each view.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.Android为应用提供了默认的图标和包名。图标将在Android设备的首页抽屉中显示，与其他应用程序列表并列，以及在每个视图顶部的操作栏上。
- en: 'In order to adjust the defaults for these settings, perform the following steps:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 为了调整这些设置的默认值，请执行以下步骤：
- en: The application icon images are provided in the `Assets` folder of the code
    bundle.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序图标图像在代码包的`Assets`文件夹中提供。
- en: Using **Finder/Windows Explorer**, copy `ic_launcher.png` from your computer's
    hard disk to the respective `Resources\drawable` folders.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**Finder/Windows资源管理器**，将`ic_launcher.png`从您的计算机硬盘复制到相应的`Resources\drawable`文件夹。
- en: From Xamarin Studio, navigate to `Resources\drawable`, right-click on it, and
    click on **Add Files** or alternatively, you can drag and drop the launcher images
    to the Xamarin Studio `Resource/drawable` folders.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Xamarin Studio导航到`Resources\drawable`，右键单击它，并点击**添加文件**或您也可以将启动器图像拖放到Xamarin
    Studio的`Resource/drawable`文件夹中。
- en: You should now see `ic_launcher.png` listed under `drawable` in the **Solution**
    pad.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在应该在**解决方案**面板的`drawable`下看到`ic_launcher.png`。
- en: Select the `POIApp` project, right-click on it, and click on **Options**.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`POIApp`项目，右键单击它，并点击**选项**。
- en: Navigate to **Build** | **Android Application**.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**构建** | **Android应用程序**。
- en: Change the application name to `POIApp`. This will cause the resulting APK file
    to be named `POIApp.apk`.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序名称更改为`POIApp`。这将导致生成的APK文件被命名为`POIApp.apk`。
- en: Change the application icon selection to `@drawable/ic_launcher`.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序图标选择更改为`@drawable/ic_launcher`。
- en: Click on **OK**.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**。
- en: We will cover additional options in Chapter 11, *Publishing an App to the App
    Store*, as we prepare the app for deployment.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们准备应用程序部署的过程中，我们将在第11章“将应用程序发布到应用商店”中介绍更多选项。
- en: The launcher activity
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动活动
- en: 'When an app is launched from the home screen on an Android device, the Android
    OS creates an instance of the activity in the application you have declared to
    be the launcher activity. When developing with the Android SDK, this is specified
    in the `AndroidManifest.xml` file. The following code excerpt from `AndroidManifest.xml`shows
    how to specify an activity as a launcher activity:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 当从Android设备的首页启动应用程序时，Android操作系统会创建一个活动实例，该活动实例是你声明的启动活动。在用Android SDK进行开发时，这会在`AndroidManifest.xml`文件中指定。以下是从`AndroidManifest.xml`文件中摘录的代码，展示了如何指定一个活动为启动活动：
- en: '[PRE0]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Xamarin.Android provides a more convenient method of specifying this by the
    use of .NET attributes. These .NET attributes are used at build time to construct
    the `ApplicationManifest.xml` file so that you rarely ever need to worry about
    working with the file directly. In the case of specifying the initial activity
    to launch, setting `MainLauncher` to `true` does the job, as seen in the following
    code example:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.Android通过使用.NET属性提供了一种更方便的方法来指定这一点。这些.NET属性在构建时用于构建`ApplicationManifest.xml`文件，因此你很少需要直接处理该文件。在指定要启动的初始活动的情况下，将`MainLauncher`设置为`true`即可完成工作，如下面的代码示例所示：
- en: '[PRE1]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Running and debugging the app
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行和调试应用程序
- en: 'The way in which you run and debug apps is very important to developers as
    it has a big impact on productivity and timelines. Xamarin Studio and the Android
    emulator team up to make the testing and debugging cycle as painless as possible.
    Let''s go through the following steps:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 你运行和调试应用程序的方式对开发者来说非常重要，因为它对生产力和时间表有重大影响。Xamarin Studio和Android模拟器团队协作，使测试和调试周期尽可能无痛苦。让我们按照以下步骤进行：
- en: Start a debugging session by clicking on the **Play** button on the left-hand
    side of the taskbar, by pressing *F5*, or by navigating to **Run** | **Start Debugging**:![](img/YGX0g1hq.jpg)
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击任务栏左侧的**播放**按钮、按*F5*键或导航到**运行** | **开始调试**来启动调试会话：![img/YGX0g1hq.jpg](img/YGX0g1hq.jpg)
- en: Select **Nexus 6** (emulator) from the list and click on the **Start emulator**
    button. It might take a little longer for the emulator to start up. Let's wait
    until it is fully loaded.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从列表中选择**Nexus 6**（模拟器）并点击**启动模拟器**按钮。模拟器启动可能需要一些时间。让我们等待它完全加载。
- en: Select **Nexus 6** at the top of the devices list and click on **OK**. Xamarin
    Studio will deploy the compiled app to the emulator. The progress of the deployment
    can be monitored from the status view in the middle of the toolbar and from the
    **Application Output** pad at the bottom of the IDE.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备列表的顶部选择**Nexus 6**，然后点击**确定**。Xamarin Studio会将编译后的应用程序部署到模拟器。部署进度可以通过工具栏中间的状态视图和IDE底部的**应用程序输出**面板进行监控。
- en: Toggle to the Android emulator and unlock the screen. The POI app will be present:![](img/uoPqTLdR.jpg)
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Android模拟器并解锁屏幕。POI应用程序将显示在屏幕上：![img/uoPqTLdR.jpg](img/uoPqTLdR.jpg)
- en: Note
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Android emulator is used for testing Android apps during the development
    process. The left-hand side of the screen depicts what would be seen on a device
    and the right-hand side provides keys that replicate the device hardware.
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Android模拟器在开发过程中用于测试Android应用程序。屏幕的左侧显示了设备上会看到的内容，右侧提供了复制设备硬件的按键。
- en: Click on the **Hello World** button and the app will increment a counter and
    update the button's caption.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Hello World**按钮，应用程序将增加计数器并更新按钮的标题。
- en: Toggle back to Xamarin Studio and stop the app by clicking on the **Stop** button
    at the extreme left of the toolbar.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回Xamarin Studio，通过点击工具栏最左侧的**停止**按钮来停止应用程序。
- en: Open `MainActivity.cs` and set a breakpoint on line 21 by clicking on the left
    margin of the editor, just to the left of the line number.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainActivity.cs`文件，通过点击编辑器左侧的空白边缘（位于行号左侧）在第21行设置断点。
- en: Restart the app by clicking on the **Start** button. Since the Android emulator
    is still running, you will not need to make a device selection. The app will stop
    at the breakpoint previously set:![](img/XlKlnUGv.jpg)
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击**开始**按钮重启应用。由于Android模拟器仍在运行，您不需要进行设备选择。应用将在之前设置的断点处停止！![img/XlKlnUGv.jpg](img/XlKlnUGv.jpg)
- en: You will notice a set of debug controls present in the toolbar. There are controls
    to continue the execution, namely, step over the current line, step into the current
    function, and step out of the current function:![](img/oJ0HE6fc.jpg)
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您会注意到工具栏中有一组调试控件。有继续执行的控件，即跳过当前行、进入当前函数和退出当前函数：![img/oJ0HE6fc.jpg](img/oJ0HE6fc.jpg)
- en: You will also notice a new set of pads related to the debugging apps present
    at the bottom of the IDE. These pads allow you to view objects, breakpoints, threads,
    and the call stack:![](img/v1pXKN3w.jpg)
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还会注意到在IDE底部出现了一组与调试应用相关的新垫片。这些垫片允许您查看对象、断点、线程和调用堆栈！![img/v1pXKN3w.jpg](img/v1pXKN3w.jpg)
- en: Click on **Step Over** twice to watch the progress of the execution, and then
    click on **Continue** to let the app start.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**单步执行**两次以观察执行进度，然后点击**继续**以让应用开始。
- en: As you can see from this section, Xamarin Studio and the Android emulator facilitate
    a robust and intuitive way of executing and debugging applications.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从本节中看到的那样，Xamarin Studio和Android模拟器提供了一种强大且直观的方式来执行和调试应用。
- en: Debugging with an Android device
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Android设备进行调试
- en: 'Apps can be executed and debugged on actual devices with the same simplicity
    of working with an emulator. To prepare for using a physical device, you need
    to perform a few steps as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 应用可以在实际设备上以与使用模拟器相同的方式简单执行和调试。为了使用物理设备做准备，您需要执行以下步骤：
- en: Enable USB debugging on the device.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备上启用USB调试。
- en: Install an appropriate USB driver for the device (Windows only).
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为设备安装适当的USB驱动程序（仅限Windows）。
- en: Enabling USB debugging
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用USB调试
- en: 'In order to enable USB debugging on a device with Android 4.0 and newer, perform
    the following steps:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在运行Android 4.0及更高版本的设备上启用USB调试，请执行以下步骤：
- en: For devices running Android 4.2 or newer, there is an extra step; `Developer
    options` are initially hidden. Navigate to **Settings** | **About phone** and
    tap **Build number** seven times. On some configurations, the exact menu structure
    may differ. On my HTC One with Android 4.3, the menu is **Settings** | **About**
    | **Software information** | **More**.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于运行Android 4.2或更高版本的设备，有一个额外的步骤；“开发者选项”最初是隐藏的。导航到**设置** | **关于手机**并连续点击**构建号**七次。在某些配置中，确切的菜单结构可能不同。在我的运行Android
    4.3的HTC One上，菜单是**设置** | **关于** | **软件信息** | **更多**。
- en: Navigate to **Settings** | **Developer** options.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**设置** | **开发者选项**。
- en: Click on **USB debugging**.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**USB调试**。
- en: Installing a USB driver
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装USB驱动程序
- en: Windows users are required to install a USB driver provided by the device's
    manufacturer. You can refer to the Android developer website under a section titled
    **Using Hardware Devices** for more details or consult your device's manufacturer
    at [http://developer.android.com/tools/device.html](http://developer.android.com/tools/device.html).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: Windows用户需要安装设备制造商提供的USB驱动程序。您可以在“使用硬件设备”标题下的Android开发者网站上找到更多详细信息，或者咨询您的设备制造商。[http://developer.android.com/tools/device.html](http://developer.android.com/tools/device.html)。
- en: OS X users should be good to go.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: OS X用户应该可以顺利使用。
- en: Running apps on a device
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在设备上运行应用
- en: After completing the previous steps, simply connect the device to your development
    computer with a USB cable, start the app from Xamarin Studio, and choose the actual
    hardware device from the device selection view rather than starting an emulator.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 完成前面的步骤后，只需使用USB线将设备连接到您的开发计算机，从Xamarin Studio启动应用，并在设备选择视图中选择实际硬件设备，而不是启动模拟器。
- en: Behind the scenes
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 背后的事情
- en: It is interesting at this point to take a quick look at a few of the things
    that go on behind the scenes, which we previously discussed in Chapter 2, *The
    Xamarin.Android Architecture*.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，快速查看一些我们在第二章“Xamarin.Android架构”中讨论过的幕后事情，是非常有趣的。
- en: The peer object
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 同伴对象
- en: Let's start with the peer object (the proxy object) discussed in Chapter 2,
    *The Xamarin.Android Architecture*. Navigate to the `POIApp\POIApp\obj\Debug\android\src\poiapp`
    directory code bundle in your `Finder/Windows Explorer` window, open `MainActivity.java`
    using Notepad.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从第二章“Xamarin.Android架构”中讨论的同伴对象（代理对象）开始。在您的`Finder/Windows Explorer`窗口中导航到`POIApp\POIApp\obj\Debug\android\src\poiapp`目录代码包，使用记事本打开`MainActivity.java`。
- en: 'The following code snippet depicts some of the key pieces of the source file:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了源文件的一些关键部分：
- en: '[PRE2]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Note the following points:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 注意以下要点：
- en: The `MainActivity` class extends `android.app.Activity`, which is what you would
    expect
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MainActivity` 类继承自 `android.app.Activity`，正如你所期望的那样'
- en: An `onCreate()` proxy method is created that calls the native `n_onCreate()`
    method, which points to the overridden `OnCreate()` method in our managed C# class
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建了一个 `onCreate()` 代理方法，该方法调用本地的 `n_onCreate()` 方法，该方法指向我们托管 C# 类中重写的 `OnCreate()`
    方法
- en: The `MainActivity` class has a static initialization block and a constructor
    that establishes the link between the Java class and its managed C# peer, including
    initializing `n_onCreate()`
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MainActivity` 类包含一个静态初始化块和一个构造函数，该构造函数建立了 Java 类与其管理的 C# 对等类之间的联系，包括初始化 `n_onCreate()`'
- en: The AndroidManifest.xml file
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AndroidManifest.xml 文件
- en: 'Navigate to `POIApp\POIApp\obj\Debug\android` in the code bundle and open the
    `AndroidManifest.xml` file. The following code snippet depicts a portion of the
    manifest file:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码包中导航到 `POIApp\POIApp\obj\Debug\android`，并打开 `AndroidManifest.xml` 文件。以下代码片段展示了清单文件的一部分：
- en: '[PRE3]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Note the following points:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 注意以下要点：
- en: The minimum SDK is set to `15` in the `&lt;uses-sdk\&gt;` element
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `<uses-sdk>` 元素中将最小 SDK 设置为 `15`
- en: The initial activity is set using the `&lt;category\&gt;` element within the
    activity definition
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始活动是通过活动定义中的 `<category>` 元素设置的
- en: We covered a lot about the structure of the Xamarin.Android project created
    using Xamarin Studio. We used Xamarin Studio on the Mac platform to complete all
    the examples in this book. We can confirm that all the previously mentioned project
    configuration options are also available in the Visual Studio IDE.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们介绍了使用 Xamarin Studio 创建的 Xamarin.Android 项目的结构。我们使用 Mac 平台上的 Xamarin Studio
    完成了本书中的所有示例。我们可以确认，之前提到的所有项目配置选项也都在 Visual Studio IDE 中可用。
- en: Summary
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we started with a sample app that we will complete through
    the remaining chapters of the book, and we demonstrated the facilities we have
    for executing and debugging apps.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们从一本书的剩余章节中完成的一个示例应用程序开始，并展示了我们执行和调试应用程序的设施。
- en: In the next chapter, we will start with creating the basic layout and building
    `ListView` to display the `POIApp` fetched from the server.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将从创建基本布局和构建 `ListView` 以显示从服务器获取的 `POIApp` 开始。
