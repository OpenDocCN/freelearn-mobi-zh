- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Navigation in Modern Android Development
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现代安卓开发中的导航
- en: In Android development, navigation is the interaction that allows your Android
    application users to navigate to, from, and back out from the different screens
    within your app, an action that is very vital in the mobile ecosystem.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在安卓开发中，导航是允许安卓应用程序用户在应用程序的不同屏幕之间导航、返回的操作，这在移动生态系统中是非常关键的。
- en: Jetpack navigation has simplified navigation between screens, and in this chapter,
    we will learn how to implement navigation with a simple view click, from the bottom
    navigation bar, which is most commonly used, by navigating with arguments, and
    more.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Jetpack 导航简化了屏幕之间的导航，在本章中，我们将学习如何通过简单的视图点击、通过导航参数以及更多方式实现导航。
- en: 'In this chapter, we’ll cover the following recipes:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下菜谱：
- en: Implementing a bottom navigation bar using navigation destinations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用导航目的地实现底部导航栏
- en: Navigating to a new screen in Compose
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Compose 中导航到新屏幕
- en: Navigating with arguments
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带参数进行导航
- en: Creating deep links for destinations
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为目的地创建深链接
- en: Writing tests for navigation
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写导航测试
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The complete source code for this chapter can be found at [https://github.com/PacktPublishing/Modern-Android-13-Development-Cookbook/tree/main/chapter_four](https://github.com/PacktPublishing/Modern-Android-13-Development-Cookbook/tree/main/chapter_four).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的完整源代码可以在 [https://github.com/PacktPublishing/Modern-Android-13-Development-Cookbook/tree/main/chapter_four](https://github.com/PacktPublishing/Modern-Android-13-Development-Cookbook/tree/main/chapter_four)
    找到。
- en: Implementing a bottom navigation bar using navigation destinations
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用导航目的地实现底部导航栏
- en: In Android development, having a bottom navigation bar is very common; it helps
    inform your users that there are different sections in your application. In addition,
    other apps opt to include a navigation drawer activity, which holds a profile
    and additional information about the application.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在安卓开发中，拥有底部导航栏是非常常见的；它有助于告知用户应用程序中有不同的部分。此外，其他应用程序选择包含一个包含个人资料和应用程序其他信息的导航抽屉活动。
- en: An excellent example of an app that utilizes both – a navigation drawer and
    bottom navigation – is Twitter. It is also important to mention that some companies
    prefer to have a top navigation bar as a preference. In addition, others such
    as Google Play Store have both bottom and drawer navigation.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的同时利用导航抽屉和底部导航的应用程序示例是 Twitter。此外，值得注意的是，一些公司更喜欢将顶部导航栏作为首选。此外，像 Google Play
    商店这样的其他公司则同时使用底部和抽屉导航。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new Android project with your preferred editor or Android Studio, or
    you can use any project from previous recipes.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你喜欢的编辑器或 Android Studio 创建一个新的安卓项目，或者你可以使用之前菜谱中的任何项目。
- en: How to do it…
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'In this recipe, we are going to create a new project and call it `BottomNavigationBarSample`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个新的项目并命名为 `BottomNavigationBarSample`：
- en: 'After creating our new empty `Activity BottomNavigationBarSample` project,
    we will start by adding the required navigation dependency in `build.gradle`,
    and then sync the project:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建我们的新空 `Activity BottomNavigationBarSample` 项目后，我们首先将在 `build.gradle` 中添加所需的导航依赖项，然后同步项目：
- en: '[PRE0]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As noticed in a previous new project, when you create a new project, there is
    code that comes with it, the `Greeting()` function; you can go ahead and delete
    that code.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前一个新项目所示，当你创建一个新项目时，它会附带一些代码，例如 `Greeting()` 函数；你可以继续删除这些代码。
- en: 'After deleting that code, let us go ahead and create a `sealed` class in the
    main package directory and call it `Destination.kt`, where we will define our
    `route` string, `icon:` `Int`, and `title: String` for our bottom navigation items:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '删除这些代码后，让我们继续在主包目录中创建一个 `sealed` 类，命名为 `Destination.kt`，我们将在这里定义我们的 `route`
    字符串、`icon:` `Int` 和 `title: String` 用于底部导航项：'
- en: '[PRE1]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Strictly speaking, we might not need the `sealed` class, but it is a nicer way
    to implement navigation. A `sealed` class in Kotlin represents a restricted class
    hierarchy that provides more control over inheritance. Alternatively, you can
    think of it as a class that, in its value, can have one of the types from a limited
    set, but it cannot have any other types.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 严格来说，我们可能不需要 `sealed` 类，但它是一种更优雅的导航实现方式。在 Kotlin 中，`sealed` 类代表一个受限的类层次结构，它提供了对继承的更多控制。或者，你可以将其视为一个类，其值可以从有限集合中选择一种类型，但不能有其他类型。
- en: 'Inside the `sealed` class, now let’s go ahead and create our destinations.
    For our sample, we will assume we are creating a budgeting app. Hence, the destinations
    we can have are `Transactions`, `Budgets`, `Tasks`, and `Settings`. See the next
    step on how to get the icons; in addition, you will need to import them. For good
    practice, you can extract the `String` resource and save it in the `String` XML
    file. You can try this as a small exercise:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`sealed`类内部，现在让我们继续创建我们的目的地。对于我们的示例，我们将假设我们正在创建一个预算应用。因此，我们可以有的目的地是`Transactions`、`Budgets`、`Tasks`和`Settings`。关于如何获取图标，请参阅下一步；此外，你还需要导入它们。为了良好的实践，你可以提取`String`资源并将其保存到`String`
    XML文件中。你可以尝试这个小练习：
- en: '[PRE2]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'For the icons, you can access them easily but clicking on the resource folder
    (`res`), then navigating to **Vector Assets** | **Clip Art**, which will launch
    and bring up free icons that you can use, as shown in *Figure 4**.1*:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于图标，你可以通过点击资源文件夹（`res`），然后导航到**矢量资产** | **剪贴画**来轻松访问它们，这将启动并显示你可以使用的免费图标，如*图4.1*所示。1*：
- en: '![Figure 4.1 – How to access Vector Asset](img/Figure_4.1.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图4.1 – 如何访问矢量资产](img/Figure_4.1.jpg)'
- en: Figure 4.1 – How to access Vector Asset
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.1 – 如何访问矢量资产
- en: 'You can also upload an SVG file and access it through **Asset Studio**. For
    more icons, you can check out this link: [https://fonts.google.com/icons](https://fonts.google.com/icons).'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还可以上传SVG文件并通过**资产工作室**访问它。对于更多图标，你可以查看这个链接：[https://fonts.google.com/icons](https://fonts.google.com/icons)。
- en: '![Figure 4.2 – Asset Studio](img/Figure_4.2.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图4.2 – 资产工作室](img/Figure_4.2.jpg)'
- en: Figure 4.2 – Asset Studio
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.2 – 资产工作室
- en: 'Now, for the destinations we just added, let’s go ahead and add dummy text
    to verify that, indeed, when we navigate, we are on the right screen. Create a
    new file and name it `AppContent.kt`. Inside `AppContent`, we will add our `Transaction`
    function, which will be our home screen, where new users enter the app the first
    time; then later, they can navigate to other screens:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，对于我们刚刚添加的目的地，让我们继续添加一些占位文本来验证，当我们导航时，我们确实在正确的屏幕上。创建一个新文件，并将其命名为`AppContent.kt`。在`AppContent`中，我们将添加我们的`Transaction`函数，这将是我们的主页，新用户第一次进入应用时将在这里；然后他们可以导航到其他屏幕：
- en: '[PRE25]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Go ahead and add the remaining three screens, `Task`, `Budget`, and `Settings`,
    using the same composable pattern.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续添加剩余的三个屏幕，`Task`、`Budget`和`Settings`，使用相同的可组合模式。
- en: 'We now need to create a bottom navigation bar composable and tell the `Composable`
    function how to react when clicked, and also restore the state when re-selecting
    a previously selected item:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在需要创建一个可组合的底部导航栏，并告诉`Composable`函数如何响应用户点击，以及在选择之前选中的项目时如何恢复状态：
- en: '[PRE35]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now, let’s go to `MainActivity` and create `NavHost` and a few composable functions,
    `AppScreen()`, `AppNavigation()`, and `BottomNavigationBar()`. Each nav controller
    must be associated with a single nav host composable because it connects the controller
    with a nav graph that helps specify the composable directions:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们转到`MainActivity`并创建`NavHost`以及几个可组合函数，`AppScreen()`、`AppNavigation()`和`BottomNavigationBar()`。每个导航控制器必须与一个单独的导航宿主可组合函数相关联，因为它将控制器与一个帮助指定可组合方向的导航图连接起来：
- en: '[PRE45]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Finally, let’s go ahead and glue everything together by creating another composable
    function and calling it `AppScreen()`. We will call this function inside `setContent`
    in the `onCreate()` function:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们通过创建另一个可组合函数并命名为`AppScreen()`来将所有内容粘合在一起。我们将在`onCreate()`函数中的`setContent`中调用此函数：
- en: '[PRE63]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Then, call this created function inside `setContent{}`; the import should be
    `import androidx.activity.compose.setContent`, based on the fact that sometimes
    it might happen that you import the wrong one. Run the application. You will notice
    a screen with four tabs, and when you select a tab, the selected one gets highlighted,
    as shown in *Figure 4**.3*:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`setContent{}`中调用此创建的函数；导入应该是`import androidx.activity.compose.setContent`，根据事实，有时可能会导入错误的一个。运行应用程序。你会注意到一个带有四个标签的屏幕，当你选择一个标签时，选中的标签会被突出显示，如*图4.3*所示：
- en: "![Figure 4.3 – The bottom na\uFEFFvigation bar](img/Figure_4.3.jpg)"
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图4.3 – 底部导航栏](img/Figure_4.3.jpg)'
- en: Figure 4.3 – The bottom navigation bar
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.3 – 底部导航栏
- en: How it works…
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In Compose, navigation has a crucial term called **route**. The key is the string
    that defines the pathway to your composable. The key basically is the source of
    truth – or think of it as a deep link that takes you to a specific destination,
    and each destination should have a unique route.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Compose 中，导航有一个关键术语称为 **route**。键是一个定义通往你的 composable 路径的字符串。键基本上是真相的来源——或者你可以将其视为一个深链接，它带你到特定的目的地，每个目的地都应该有一个唯一的路由。
- en: Furthermore, each destination should consist of a unique key route. In our example,
    we added icons and a title. The icons, as seen in *Figure 4**.3*, show what the
    bottom navigation entails, and the title describes the specific screen we are
    browsing at that exact time. In addition, these are optional and only needed for
    some routes.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，每个目的地都应该由一个唯一的键路由组成。在我们的例子中，我们添加了图标和标题。如图 *图 4**.3* 所示，图标显示了底部导航包含的内容，标题描述了我们在那个确切时刻正在浏览的特定屏幕。此外，这些是可选的，并且仅在某些路由中需要。
- en: '`NavController()` is the main API for our navigation component, and it keeps
    track of every back stack entry for the composables that make up the screens in
    our application and the state of each screen. We created this using `rememberNavController`:
    as we mentioned in the previous chapter, `remember`, as the name suggests, remembers
    the value; in this instance, we are remembering `NavController`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`NavController()` 是我们导航组件的主要 API，它跟踪组成我们应用程序屏幕的 composables 的每个返回栈条目以及每个屏幕的状态。我们使用
    `rememberNavController()` 创建了这个功能：正如我们在上一章中提到的，“remember”这个名字意味着记住值；在这个例子中，我们正在记住
    `NavController`：'
- en: '[PRE80]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '`NavHost()`, on the other hand, requires the `NavController()` previously created
    through `rememberNavController()` and the destination route of the entry point
    of our graph. In addition, `rememberNavController()` returns `NavHostController`,
    which is a subclass of `NavController()` that offers some additional APIs that
    `NavHost` requires.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，`NavHost()` 需要之前通过 `rememberNavController()` 创建的 `NavController()` 以及我们图入口的目的地路由。此外，`rememberNavController()`
    返回 `NavHostController`，它是 `NavController()` 的一个子类，它提供了一些 `NavHost` 所需的额外 API。
- en: 'This is very similar to how Android developers build navigation before composing
    fragments. The steps include creating a bottom navigation menu with the `menu`
    items, as shown in the following code block:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这与 Android 开发者在组合片段之前构建导航的方式非常相似。步骤包括创建一个带有 `menu` 项的底部导航菜单，如下面的代码块所示：
- en: '[PRE81]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Then, we create another resource in the `navigation` package that points to
    the screens (fragments):'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们在 `navigation` 包中创建另一个资源，该资源指向屏幕（片段）：
- en: '[PRE82]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Navigating to a new screen in Compose
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Compose 中导航到新屏幕
- en: We will build a register screen prompt on our login page for registering first-time
    users of our application. This is a standard pattern because we need to save the
    user’s credentials so that the next time they log in to our application, we just
    log them in without registering again.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在登录页面上构建一个注册屏幕提示，用于注册我们应用程序的新用户。这是一个标准模式，因为我们需要保存用户的凭据，这样下次他们登录到我们的应用程序时，我们只需登录而无需再次注册。
- en: Getting ready
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have completed the previous recipe, *Implementing a bottom navigation
    bar using navigation destinations*, before getting started with this one.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始这个之前，你应该已经完成了之前的食谱，*使用导航目的地实现底部导航栏*。
- en: How to do it…
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'In this recipe, we will need to use our `SampleLogin` project and add a new
    screen that users can navigate to if it is their first time using the application.
    This is a typical use case in many applications:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们需要使用我们的 `SampleLogin` 项目并添加一个新屏幕，用户在首次使用应用程序时可以导航到该屏幕。这在许多应用程序中是一个典型的用例：
- en: 'Open your `SampleLogin` project, create a new `sealed` class, and call it `Destination`.
    To also ensure we maintain great packaging, add this class to `util`. Also, just
    like the bottom bar, we will have a route, but this time, we do not need any icons
    or titles:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的 `SampleLogin` 项目，创建一个新的 `sealed` 类，并将其命名为 `Destination`。为了确保我们保持良好的封装，将此类添加到
    `util` 中。同样，就像底部栏一样，我们将有一个路由，但这次我们不需要任何图标或标题：
- en: '[PRE83]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'After creating the destinations, we now need to go ahead and add clickable
    text in `LoginContent` to ask users whether it is their first time using the application.
    They should click `RegisterContent`. You can open the project by checking out
    the *Technical requirements* section if you need to refer to any step:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建目的地之后，我们现在需要在 `LoginContent` 中添加可点击文本，询问用户是否是首次使用应用程序。他们应该点击 `RegisterContent`。如果你需要参考任何步骤，可以通过查看
    *技术要求* 部分来打开项目：
- en: '[PRE89]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'Now, when you click on `ClickableText`, our clickable text is text that you
    can click, and it will help users navigate to the registration screen via **First-time
    user? Sign UP**. Once you click on this, it should navigate to a different screen
    where users can now sign up, as shown in *Figure 4**.4*:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，当您点击 `ClickableText` 时，我们的可点击文本是指您可以点击的文本，它将帮助用户通过 **首次用户？注册** 导航到注册屏幕。一旦点击此按钮，它应该导航到不同的屏幕，用户现在可以注册，如图
    *图 4.4* 所示：
- en: '![Figure 4.4 – A new Register screen](img/Figure_4.4.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.4 – 新的注册屏幕](img/Figure_4.4.jpg)'
- en: Figure 4.4 – A new Register screen
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4 – 新的注册屏幕
- en: 'For the **Register** screen, you can get the entire code in the *Technical
    requirements* section. We will reuse the user input fields that we created and
    just change the text:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 **注册** 屏幕，您可以在 *技术要求* 部分找到整个代码。我们将重用我们创建的用户输入字段，只需更改文本：
- en: '[PRE104]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'In `MainActivity`, we will have a `Navigation()` function, as follows:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MainActivity` 中，我们将有一个 `Navigation()` 函数，如下所示：
- en: '[PRE112]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'In `PasswordInputField`, we will name each input appropriately for reusability:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `PasswordInputField` 中，我们将为每个输入项适当地命名以提高其可重用性：
- en: '[PRE130]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: Moreover, you can also navigate to the previous **Sign in** screen by clicking
    on the hardware **Back** button.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，您还可以通过点击硬件 **返回** 按钮导航到上一个 **登录** 屏幕。
- en: 'Finally, in `setContent`, we will need to update the code to accommodate the
    new navigation:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在 `setContent` 中，我们需要更新代码以适应新的导航：
- en: '[PRE136]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: Run the code and click on the **Sign up** text, and you should now be taken
    to a new screen.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代码并点击 **注册** 文本，您现在应该被带到新屏幕。
- en: How it works…
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: You will notice that we have just created a different destination entry point,
    where `ClickableText` is used to navigate to the newly created screen. Furthermore,
    in order to navigate to a composable destination in the nav graph, you must use
    `navController.navigate(Destination.RegisterScreen.route)`, and as mentioned earlier,
    the string represents the destination route.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到我们刚刚创建了一个不同的目的地入口点，其中 `ClickableText` 用于导航到新创建的屏幕。此外，为了在导航图中导航到组合目的地，您必须使用
    `navController.navigate(Destination.RegisterScreen.route)`，如前所述，字符串表示目的地路由。
- en: In addition, `navigate()` adds our destination to the back stack by default,
    but if we need to modify the behavior, we can easily do that by adding additional
    nav options to our `navigate()` call.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`navigate()` 默认将我们的目的地添加到返回栈中，但如果我们需要修改行为，我们可以在 `navigate()` 调用中添加额外的导航选项来轻松做到这一点。
- en: Suppose you want to work with animations when navigating. In that case, you
    can easily do that by using the Accompanist library – [https://github.com/google/accompanist](https://github.com/google/accompanist)
    –which offers a group of libraries that aim to supplement Jetpack Compose with
    features that are required mainly by developers and are not available yet.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想在导航时使用动画。在这种情况下，您可以通过使用 Accompanist 库轻松做到这一点 – [https://github.com/google/accompanist](https://github.com/google/accompanist)
    –该库提供了一组旨在补充 Jetpack Compose 的功能，这些功能主要是由开发人员所需的，并且目前尚未提供。
- en: 'You can utilize `enterTransition`, which explicitly specifies the animation
    that runs when you navigate to a particular destination, whereas `exitTransition`
    does the opposite:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `enterTransition`，它明确指定了您导航到特定目的地时运行的动画，而 `exitTransition` 执行相反的操作：
- en: '[PRE159]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: You can also use `popEnterTransition`, which specifies the animation that runs
    when the destination re-enters the screen after going through `popBackStack()`,
    or `popExitTranstion`, which does the opposite.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用 `popEnterTransition`，它指定了在通过 `popBackStack()` 后目的地重新进入屏幕时运行的动画，或者 `popExitTransition`，它执行相反的操作。
- en: Important note
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: It is crucial to note a good practice that becomes relevant for hoisting the
    state is when you expose events from your composable functions to callers in your
    application that know how to handle that logic properly. In addition, under-the-hood
    navigation is all state-managed.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，当您从您的组合函数中暴露事件给知道如何正确处理该逻辑的应用程序调用者时，这是一种良好的实践，这对于提升状态变得相关。此外，底层的导航完全是状态管理的。
- en: See also
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'For more about `AnimatedNavHost`, you can find details here: [https://google.github.io/accompanist/navigation-animation/](https://google.github.io/accompanist/navigation-animation/).'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于 `AnimatedNavHost` 的信息，您可以在此处找到：[https://google.github.io/accompanist/navigation-animation/](https://google.github.io/accompanist/navigation-animation/)。
- en: Navigating with arguments
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带参数的导航
- en: Passing data between destinations is very vital in Android development. The
    new Jetpack navigation allows developers to attach data to a navigation operation
    by defining an argument for a destination. Readers will learn how to pass data
    between destinations using arguments.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android开发中，在目的地之间传递数据非常重要。新的Jetpack导航允许开发者通过为目的地定义一个参数来将数据附加到导航操作。读者将学习如何使用参数在目的地之间传递数据。
- en: A good use case is, say, you load an API with data and want to show more description
    on the data you just displayed; you can navigate with unique arguments to the
    next screen.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的用例是，比如说，你加载了一个API的数据，并希望显示更多关于你刚刚显示的数据的描述；你可以通过唯一的参数导航到下一个屏幕。
- en: Getting ready
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will explore the most common interview project requirement, which is to fetch
    data from an API and display one screen and add an additional screen for extra
    points.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨最常见的面试项目要求，即从API获取数据，显示一个屏幕，并为额外分数添加一个额外的屏幕。
- en: Let’s assume the API is the GitHub API, and you want to display all organizations.
    Then, you want to navigate to another screen and see the number of repositories
    each company has.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 假设API是GitHub API，你想显示所有组织。然后，你想要导航到另一个屏幕，查看每个公司拥有的仓库数量。
- en: How to do it…
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'For this recipe, we will look at an example of navigating with arguments as
    a concept since there is little more to do other than create the basic arguments
    to pass to utilize an already-built project – `SampleLogin`:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们将查看一个使用参数进行导航的例子，作为一个概念，因为除了创建传递给已构建项目的基参数之外，没有更多的事情要做——`SampleLogin`：
- en: 'Let’s go ahead and create `SearchScreen`, and this screen will have just a
    search function, `EditText`, and a column to display the data returned from an
    API:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们继续创建`SearchScreen`，这个屏幕将只包含一个搜索功能，`EditText`以及一个用于显示从API返回的数据的列：
- en: '[PRE160]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: 'And now, when setting up navigation to `BrowseRepository`, you will need to
    add the following code. This piece of code is for passing a mandatory data parameter
    from one screen to another, but adding the example of passing an optional argument;
    a default value will help the user:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，当设置导航到`BrowseRepository`时，你需要添加以下代码。这段代码是为了从一个屏幕传递一个必需的数据参数到另一个屏幕，但同时也添加了传递可选参数的示例；默认值将帮助用户：
- en: '[PRE169]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE180]'
- en: We also use the `enter` and `exit` transition for animations. In this recipe,
    we have just touched on the concept of navigating with arguments, which can be
    applied to many projects.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用了`enter`和`exit`过渡动画。在这个菜谱中，我们刚刚触及了使用参数进行导航的概念，这个概念可以应用于许多项目。
- en: How it works…
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'When you want to pass an argument to the destination, which is something that
    might be required, you need to explicitly attach it to the route when initiating
    the `navigate` function call, as you can see in the following code snippet:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想向目的地传递一个可能需要的参数时，你需要明确将其附加到在初始化`navigate`函数调用时的路由上，就像你在下面的代码片段中看到的那样：
- en: '[PRE181]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: We added an argument placeholder to our route, similar to how we added arguments
    to a deep link when using the base navigation library.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在我们的路由中添加了一个参数占位符，类似于我们在使用基础导航库时添加到深链接中的参数。
- en: 'There is also a list of what the navigation library supports; if you have a
    different use case, you can look into this document: [https://developer.android.com/guide/navigation/navigation-pass-data#supported_argument_types](https://developer.android.com/guide/navigation/navigation-pass-data#supported_argument_types).'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一个导航库支持的列表；如果你有不同的用例，你可以查看此文档：[https://developer.android.com/guide/navigation/navigation-pass-data#supported_argument_types](https://developer.android.com/guide/navigation/navigation-pass-data#supported_argument_types)。
- en: "![Figure 4.5 – Navigation support argument t\uFEFFype (credit: developers.android.com)](img/Figure_4.5.jpg)"
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![图4.5 – 导航支持参数类型（来源：developers.android.com）](img/Figure_4.5.jpg)'
- en: 'Figure 4.5 – Navigation support argument type (credit: developers.android.com)'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.5 – 导航支持参数类型（来源：developers.android.com）
- en: There’s more…
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'There is more to learn about navigation and, for a more thorough way to look
    into how you can navigate with arguments, retrieve complex data when navigating,
    and add additional arguments in depth, you can read more here: [https://developer.android.com/jetpack/compose/navigation](https://developer.android.com/jetpack/compose/navigation).'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 关于导航还有更多要学习的内容，如果你想更深入地了解如何使用参数进行导航、在导航时检索复杂数据以及添加额外的参数，你可以在这里了解更多：[https://developer.android.com/jetpack/compose/navigation](https://developer.android.com/jetpack/compose/navigation)。
- en: Creating deep links for destinations
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为目的地创建深链接
- en: 'In Modern Android Development, deep links are very vital. A link that helps
    you navigate directly to a specific destination within an app is called a `Navigation`
    component lets you create two types of deep links: **explicit** and **implicit**.'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代Android开发中，深链接非常重要。一个帮助你直接导航到应用中特定目的地的链接被称为`Navigation`组件，它让你可以创建两种类型的深链接：**显式**和**隐式**。
- en: Compose navigation supports implicit deep links, which can be part of your Composable
    functions. It is also fair to mention there is no huge difference between how
    you would handle these using XML layouts.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: Compose导航支持隐式深链接，这可以是你的Composable函数的一部分。也公平地说，使用XML布局处理这些并没有太大的区别。
- en: Getting ready
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Since we don’t have a deep link use case in our application, in this recipe,
    we will look into how we can utilize the knowledge by learning how to implement
    implicit deep links.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的应用中没有深链接用例，在这个菜谱中，我们将探讨如何通过学习如何实现隐式深链接来利用这些知识。
- en: How to do it…
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: You can match deep links using a **Uniform Resource Locator** (**URI**), intent
    actions, or **Multipurpose Internet Mail Extensions** (**MIME**) types. Furthermore,
    you can easily specify multiple types that match for a deep link single but remember
    that the URI argument comparison is always prioritized, followed by the intent
    action, then the MIME type.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用统一资源定位符（**URI**）、intent动作或多用途互联网邮件扩展（**MIME**）类型来匹配深链接。此外，你可以轻松指定多个匹配单个深链接的类型，但请记住，URI参数比较始终优先，其次是intent动作，然后是MIME类型。
- en: 'Compose has made it easier for developers to work with deep links. The `composable`
    function accepts a parameter list of `NavDeepLinks`, which can be easily created
    using the `navDeepLink` method:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: Compose让开发者处理深链接变得更加容易。`composable`函数接受一个`NavDeepLinks`参数列表，这个列表可以通过`navDeepLink`方法轻松创建：
- en: 'We will start by making the deep link externally available by adding the appropriate
    intent filter to our `AndroidManifest.xml` file:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先通过向我们的`AndroidManifest.xml`文件添加适当的intent过滤器来使深链接外部可用：
- en: '[PRE182]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE188]'
- en: 'Now in our `composable` function, we can use the `deepLinks` parameter, specify
    the list of `navDeepLink`, and then pass the URI pattern:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在我们的`composable`函数中，我们可以使用`deepLinks`参数，指定`navDeepLink`列表，然后传递URI模式：
- en: '[PRE189]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE191]'
- en: Please note that navigation will automatically deep-link into that composable
    when another application triggers the deep link.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，当另一个应用触发深链接时，导航会自动将深链接链接到那个composable。
- en: 'Many applications still use `launchMode` when navigating. This is when using
    the Navigation Jetpack component, as seen in the following code snippet:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 许多应用在导航时仍然使用`launchMode`。这就是在以下代码片段中使用Navigation Jetpack组件时的情况：
- en: '[PRE192]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: Finally, you can also utilize `deepLinkPendingIntent` like any other `PendingIntent`
    to start your Android application at the deep link destination.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，你还可以像使用任何其他`PendingIntent`一样使用`deepLinkPendingIntent`来在深链接目的地启动你的Android应用。
- en: Important note
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: When triggering an implicit deep link, the back stack state depends on when
    the implicit intent was launched with `Intent.FLAG_ACTIVITY_NEW_TASK`. Furthermore,
    if the flag is set, the back stack task is cleared and then replaced with the
    intended deep link destination.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 当触发隐式深链接时，返回栈状态取决于隐式intent何时以`Intent.FLAG_ACTIVITY_NEW_TASK`启动。此外，如果设置了标志，则清除返回栈任务，然后用预期的深链接目的地替换。
- en: How it works…
  id: totrans-299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In Android development, a deep link refers to a specific destination for the
    application. For instance, when you invoke the deep link, the link opens up your
    application’s corresponding destination when a user clicks on the specified link.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android开发中，深链接指的是应用的一个特定目的地。例如，当你调用深链接时，当用户点击指定的链接，链接会打开应用对应的指定目的地。
- en: This refers to where the link is meant to lead once clicked. The explicit deep
    link is a single instance that uses `PendingIntent` to take users to a specific
    location within your application. A good use case is when using notifications
    or app widgets.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 这指的是链接点击后打算引导到的位置。显式深链接是一个使用`PendingIntent`将用户带到应用中特定位置的单一实例。一个很好的用例是在使用通知或应用小部件时。
- en: There’s more…
  id: totrans-302
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'There is more to learn about deep links; for instance, how to create an explicit
    deep link. You can learn more about deep links here: [https://developer.android.com/training/app-links/deep-linking](https://developer.android.com/training/app-links/deep-linking).'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 关于深链接还有很多东西可以学习；例如，如何创建显式深链接。你可以在[https://developer.android.com/training/app-links/deep-linking](https://developer.android.com/training/app-links/deep-linking)了解更多关于深链接的信息。
- en: Writing tests for navigation
  id: totrans-304
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写导航测试
- en: Now that we have created a new screen for our `SampleLogin` project, we need
    to fix the broken test and add new tests for the UI package. If you can recall,
    in [*Chapter 3*](B18827_03.xhtml#_idTextAnchor137), *Handling the UI State in
    Jetpack Compose and Using Hilt*, we did unit tests and not UI tests. This means
    after adding all the `ViewModel` instances, our UI tests are now broken. In this
    recipe, we will fix the failing tests and add a navigation test.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们为我们的 `SampleLogin` 项目创建了一个新的屏幕，我们需要修复损坏的测试并添加新的 UI 包测试。如果你还记得，在 [*第 3 章*](B18827_03.xhtml#_idTextAnchor137)，*在
    Jetpack Compose 中处理 UI 状态和使用 Hilt*，我们进行了单元测试而不是 UI 测试。这意味着在添加所有 `ViewModel` 实例后，我们的
    UI 测试现在已损坏。在这个菜谱中，我们将修复失败的测试并添加一个导航测试。
- en: Getting ready
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, you do not need to create any new project; use the already-created
    project, `SampleLogin`.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你不需要创建任何新的项目；使用已经创建的项目，`SampleLogin`。
- en: How to do it…
  id: totrans-308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'You can apply these concepts to test the bottom navigation bar we created.
    Hence, we will not be writing tests for the `BottomNavigationBarSample` project.
    Open `SampleLogin` and navigate to the `androidTest` package. We will add tests
    here for the new `RegisterScreen()` a Composable function, and also fix the broken
    tests:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将这些概念应用到测试我们创建的底部导航栏。因此，我们不会为 `BottomNavigationBarSample` 项目编写测试。打开 `SampleLogin`
    并导航到 `androidTest` 包。我们将在这里添加对新的 `RegisterScreen()` 可组合函数的测试，并修复损坏的测试：
- en: 'Let’s open the `LoginContentTest` class. Now, let’s move the `LoginContent`
    class to a helper class that we will create to help us with testing the UI logic:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们打开 `LoginContentTest` 类。现在，让我们将 `LoginContent` 类移动到一个我们将创建的辅助类中，以帮助我们测试 UI
    逻辑：
- en: '[PRE193]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE212]'
- en: 'Inside the `LoginContentTest` class, now, we will replace `LoginContent` with
    the newly created `contentLoginForTest()` function inside the `initCompose` function:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `LoginContentTest` 类内部，现在我们将 `LoginContent` 替换为在 `initCompose` 函数内部新创建的 `contentLoginForTest()`
    函数：
- en: '[PRE213]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE220]'
- en: 'Now that we have fixed the tests, we can now add a `test` tag for our newly
    created clickable, `TextView`:'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经修复了测试，我们现在可以为我们的新创建的可点击的 `TextView` 添加一个 `test` 标签：
- en: '[PRE221]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE221]'
- en: 'Once that is done, we now need to create `lateint var NavHostController`, and
    a `launchRegisterScreenWithNavGraph` function to help us set up the navigation:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦完成，我们现在需要创建 `lateint var NavHostController`，以及一个 `launchRegisterScreenWithNavGraph`
    函数来帮助我们设置导航：
- en: '[PRE222]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '[PRE238]'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '[PRE239]'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '[PRE241]'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE241]'
- en: '[PRE242]'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '[PRE243]'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '[PRE244]'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE249]'
- en: You can call the created function inside the `initCompose` function or in the
    new test function that we will create.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 `initCompose` 函数内部或我们即将创建的新测试函数中调用创建的函数。
- en: 'Now, let’s create a test function and name it `assertRegisterClickableButtonNavigatesToRegisterScreen()`.
    In this test case, we will set our route and then use `assert` when the correct
    `TextView` is clicked; we will navigate to the correct destination:'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个测试函数，并将其命名为 `assertRegisterClickableButtonNavigatesToRegisterScreen()`。在这个测试用例中，我们将设置我们的路由，然后在正确的
    `TextView` 被点击时使用 `assert`；我们将导航到正确的目的地：
- en: '[PRE250]'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '[PRE251]'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE253]'
- en: '[PRE254]'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE254]'
- en: '[PRE255]'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '[PRE256]'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '[PRE257]'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE261]'
- en: 'Finally, run the test, and the UI test should pass, as seen in *Figure 4**.6*:'
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，运行测试，UI 测试应该通过，如图 *图 4**.6* 所示：
- en: '![Figure 4.6 – Tests passing](img/Figure_4.6.jpg)'
  id: totrans-386
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.6 – 测试通过](img/Figure_4.6.jpg)'
- en: Figure 4.6 – Tests passing
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.6 – 测试通过
- en: How it works…
  id: totrans-388
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: We created the `contentLoginForTest` that can help us verify our navigation.
    That is, when a user enters a valid username and password, they can navigate to
    a home screen. Furthermore, we created `launchRegisterScreenWithNavGraph()`, a
    helper function that creates the testing graph for our navigation test case.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了 `contentLoginForTest`，可以帮助我们验证导航。也就是说，当用户输入有效的用户名和密码时，他们可以导航到主屏幕。此外，我们还创建了
    `launchRegisterScreenWithNavGraph()`，这是一个辅助函数，用于为我们的导航测试用例创建测试图。
- en: 'If you are using `FragmentScenario`, there are great tips for testing your
    navigation that you can see here: [https://developer.android.com/guide/navigation/navigation-testing](https://developer.android.com/guide/navigation/navigation-testing).'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 `FragmentScenario`，这里有关于测试导航的极好提示，你可以在这里看到：[https://developer.android.com/guide/navigation/navigation-testing](https://developer.android.com/guide/navigation/navigation-testing)。
