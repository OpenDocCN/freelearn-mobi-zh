- en: Chapter 9. Adding Social Media and Other Online Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。添加社交媒体和其他在线服务
- en: Modern mobile devices are now amazingly powerful when it comes to graphics and
    sound, but perhaps the biggest differentiator between them and other dedicated
    hand-held videogame systems is that most of them are able to connect to the Internet.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现代移动设备在图形和声音方面非常强大，但它们与其他专用手持式电子游戏系统之间最大的区别可能是，大多数设备都能连接到互联网。
- en: While other gaming systems may be able to go online via WiFi, many modern devices
    can also use a 3G or other such data connections to connect to the Internet wherever
    the user happens to be. For this reason many games now feature the ability to
    connect to social media sites such as Facebook, or to share scores using services
    such as Apple's Game Center.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然其他游戏系统可能可以通过WiFi上网，但许多现代设备也可以使用3G或其他此类数据连接，无论用户身处何地都能连接到互联网。因此，许多游戏现在都具备连接社交媒体网站（如Facebook）或使用苹果的Game
    Center等服务分享分数的功能。
- en: 'In this chapter, we will be looking at how it is possible to use Marmalade
    to add the following online capabilities to our games:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何使用Marmalade将以下在线功能添加到我们的游戏中：
- en: Launching a web browser to display a web page
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动网页浏览器以显示网页
- en: Integrating with Facebook on iOS and Android
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在iOS和Android上与Facebook集成
- en: Familiarizing ourselves with the possibilities for other online functionality,
    including advertising and in-app purchasing
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟悉其他在线功能的可能性，包括广告和在应用内购买
- en: Launching a web page in the device browser
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在设备浏览器中启动网页
- en: Let's start our foray into the realm of the connected world by looking at the
    simplest way of adding an online feature to our games—launching a web page in
    the device browser.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过查看向我们的游戏中添加在线功能的最简单方法——在设备浏览器中启动网页——来开始我们对连接世界的探索。
- en: Being able to direct the user to a website can be extremely useful for things
    such as instruction manuals, hints and tips, or technical support access. It is
    also great for cross promotion of titles by making it really simple to deliver
    a **Get More Games** button that highlights other games you have created.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 能够将用户引导到网站对于诸如说明书、提示和技巧或技术支持访问等事项非常有用。它对于通过提供一个简单的“获取更多游戏”按钮来促进跨推广也非常好，这个按钮突出显示了你创建的其他游戏。
- en: How do we accomplish this magic? It's really simple! Just include the header
    file `s3eOSExec.h` and then make a call to `s3eOSExecAvailable` to see if the
    functionality is supported by the platform we are running on. Most of the platforms
    supported by Marmalade allow this functionality, but it is always best to check!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们是如何实现这个魔法的？这真的很简单！只需包含头文件`s3eOSExec.h`，然后调用`s3eOSExecAvailable`来查看我们正在运行的平台上是否支持此功能。Marmalade支持的大多数平台都允许此功能，但最好总是检查一下！
- en: If support is available, all we have to do is call the function `s3eOSExecExecute`
    with the URL of the web page and a Boolean value indicating whether or not our
    application will quit. On platforms that don't support multi-tasking this parameter
    will make no difference, so it is usually OK to set this flag to `false` to ensure
    that our application is not closed down.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果支持可用，我们只需调用函数`s3eOSExecExecute`，并传入网页的URL和一个布尔值，表示我们的应用程序是否将退出。在不支持多任务处理的平台上，此参数将不起作用，因此通常可以将此标志设置为`false`以确保我们的应用程序不会被关闭。
- en: 'Here''s a code snippet to illustrate:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个代码片段来演示：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The main disadvantage of this approach is that by launching the application
    in the device's internal web browser, it takes the user away from our game; but
    in the cases mentioned previously, this may be an acceptable trade-off given how
    easy it is to implement.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的主要缺点是，通过在设备的内部网页浏览器中启动应用程序，它会将用户从我们的游戏中带走；但在前面提到的案例中，鉴于实现起来非常简单，这可能是一个可以接受的权衡。
- en: Integrating with social media
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与社交媒体集成
- en: Social media sites such as Facebook provide a great way of advertising our games
    by getting our players to spread the word for us. There are countless examples
    of games which allow players to post a message to their Facebook wall or Twitter
    feed to show off their latest high score or boast about achieving a certain target
    in the game.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 社交媒体网站如Facebook通过让玩家为我们传播信息，为我们的游戏提供了一种很好的广告方式。有无数的游戏例子允许玩家在他们的Facebook墙或Twitter上发布消息，以展示他们最新的高分或吹嘘在游戏中达到的某个目标。
- en: In this section we will take a detailed look at how we can implement integration
    with Facebook and we will also talk briefly about Twitter.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将详细探讨如何实现与Facebook的集成，同时也会简要地讨论Twitter。
- en: Using Facebook
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Facebook
- en: Marmalade comes with an API called s3eFacebook that wraps up most of the tricky
    stuff involved in communicating with the Facebook servers. Unfortunately this
    ease of use does come at a price, which is that it is only supported on iOS and
    Android.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Marmalade附带一个名为s3eFacebook的API，它封装了与Facebook服务器通信的大部分复杂操作。不幸的是，这种易用性是有代价的，那就是它只支持iOS和Android。
- en: If Facebook support is required across all platforms, we would need to implement
    everything from scratch using HTTP requests via the IwHTTP API provided with Marmalade.
    This is a challenging task, so we'll be using the s3eFacebook API in this part
    of the book.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要在所有平台上支持Facebook，我们需要从头开始使用Marmalade提供的IwHTTP API通过HTTP请求来实现一切。这是一个具有挑战性的任务，所以在这部分书中我们将使用s3eFacebook
    API。
- en: Creating a Facebook app
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建Facebook应用
- en: The first step in Facebook integration to a Marmalade project is to create a
    Facebook App on the Facebook website, which is really little more than a way of
    authenticating the source of any Facebook API requests.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 将Marmalade项目与Facebook集成的第一步是在Facebook网站上创建一个Facebook应用，这实际上只是验证任何Facebook API请求来源的一种方式。
- en: When we create a Facebook App we are provided with two hexadecimal values. One
    is called the **App Id** (also known sometimes as the **API Key**) and the other
    is the **App Secret**. These values will be needed when we send requests to Facebook
    in order to identify our application on the Facebook servers.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建一个Facebook应用时，我们会得到两个十六进制值。其中一个被称为**App Id**（有时也称为**API Key**），另一个是**App
    Secret**。当我们向Facebook发送请求以在Facebook服务器上识别我们的应用时，这些值将是必需的。
- en: 'To create a Facebook App follow these steps:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建Facebook应用，请按照以下步骤操作：
- en: Log in to Facebook by visiting [www.facebook.com](http://www.facebook.com) and
    entering your username and password. If you do not already have a Facebook account,
    you can also sign up for one at this address.![Creating a Facebook app](img/3363_09_01.jpg)
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问[www.facebook.com](http://www.facebook.com)并输入用户名和密码来登录Facebook。如果您还没有Facebook账户，您也可以在此地址注册一个。![创建Facebook应用](img/3363_09_01.jpg)
- en: Once you are logged in to Facebook, visit the URL [www.facebook.com/developers](http://www.facebook.com/developers).
    If you have never created a Facebook App before, you will see a dialog like the
    one in the preceding screenshot. This screen has a single drop-down box that allows
    you to specify whether everyone or just your friends will be able to see posts
    created by the application. For now leave this set to the default value of **Everyone**
    and click on the **Go to App** button.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到Facebook后，访问URL [www.facebook.com/developers](http://www.facebook.com/developers)。如果您之前从未创建过Facebook应用，您将看到一个类似于前面截图的对话框。这个屏幕有一个下拉框，允许您指定是否让所有人或只是您的朋友能看到应用创建的帖子。现在，请将此设置为默认值**所有人**，然后点击**转到应用**按钮。
- en: You will now see a screen detailing all the Facebook Apps you have created,
    which will be empty assuming this is the first App you have ever created! Click
    on the **+ Create New App** button to start creating a Facebook App.![Creating
    a Facebook app](img/3363_09_02.jpg)
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您将看到一个屏幕，详细列出您创建的所有Facebook应用，如果这是您第一次创建应用，这个屏幕将是空的！点击**+ 创建新应用**按钮开始创建Facebook应用。![创建Facebook应用](img/3363_09_02.jpg)
- en: The previous dialog box shown should now appear, minus the pink box containing
    the text about verifying your account (more on this in a moment). For the purpose
    of this chapter all we need to supply is the **App Name** value, which is a string
    that will be shown to the user when our Marmalade project first attempts to access
    Facebook. It therefore makes sense to use the name of the game or perhaps your
    company name for this field.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应该现在出现的上一个对话框应该没有包含关于验证账户文本的粉红色框（更多关于这一点稍后讨论）。为了本章的目的，我们只需要提供**应用名称**值，这是一个字符串，当我们的Marmalade项目首次尝试访问Facebook时将显示给用户。因此，使用游戏名称或公司名称作为此字段是有意义的。
- en: Click the **Continue** button to create the Facebook App. Note that the remaining
    fields can be ignored for now. The **App Namespace** value is used to reference
    the application on Facebook as a URL or as part of an HTTP request and is for
    more advanced Facebook integration. The **Locale** and **Web Hosting** controls
    can also be ignored for the purposes of this chapter.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Continue** 按钮创建 Facebook 应用程序。请注意，现在可以忽略剩余的字段。**App Namespace** 的值用于在 Facebook
    上作为 URL 或 HTTP 请求的一部分引用应用程序，并且是为了更高级的 Facebook 集成。**Locale** 和 **Web Hosting**
    控制也可以在本章中忽略。
- en: You will now be shown one of those annoying Captcha dialogs to prove you are
    a human and not some kind of spamming web bot. Enter the words shown in the image
    to proceed.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您将看到那些令人烦恼的 Captcha 对话框之一，以证明您是人类，而不是某种垃圾邮件发送的网虫。输入图片中显示的单词以继续。
- en: At this point it is likely that you will be shown the **Create New App** dialog
    from step 4 again, this time with the text in the little pink box. This is another
    security check put in place by Facebook to stop hundreds of rogue Facebook applications
    from being created. You need to authorize your Facebook account before you can
    create a Facebook App. I would suggest you click the link labeled **mobile phone**
    to verify your account as it is by far the easiest way. You will be asked to enter
    your mobile phone number so a text message can be sent to you containing an authorization
    code that you then enter into a dialog to verify yourself.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这一点上，您可能会再次看到步骤 4 中的 **Create New App** 对话框，这次带有小粉色框中的文本。这是 Facebook 为了阻止数百个恶意
    Facebook 应用程序被创建而设置的另一个安全检查。在您创建 Facebook 应用程序之前，您需要授权您的 Facebook 账户。我建议您点击标有
    **mobile phone** 的链接来验证您的账户，因为这无疑是迄今为止最简单的方法。您将被要求输入您的手机号码，以便发送包含授权代码的短信给您，然后您将输入该代码以验证自己。
- en: Once you have verified your account you will return to the **Create New App**
    dialog once again. Ensure the **App Name** value is correct and click on the **Continue**
    button again. The Captcha screen will likely rear its ugly head once more, so
    fill it in.![Creating a Facebook app](img/3363_09_03.jpg)
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您验证了您的账户，您将再次返回到 **Create New App** 对话框。请确保 **App Name** 的值是正确的，并再次点击 **Continue**
    按钮。Captcha 屏幕可能会再次出现，所以请填写它。![创建 Facebook 应用程序](img/3363_09_03.jpg)
- en: At this point the Facebook App has been created and you should now be looking
    at a screen similar to that shown before, which shows various pieces of information
    about the Facebook App. The most important are the **App Id/App Key** and **App
    Secret** values, which you'll need later; so make a note of them.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这一点上，Facebook 应用程序已经创建，您现在应该看到与之前显示的屏幕相似的屏幕，该屏幕显示了有关 Facebook 应用程序的各种信息。最重要的是
    **App Id/App Key** 和 **App Secret** 值，您稍后需要它们；所以请记下它们。
- en: Creating a Facebook test user
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 Facebook 测试用户
- en: We will obviously want to test the Facebook integration of our application out
    once it has been implemented, but it would be good if we didn't have to spam all
    our friends with test wall posts and the like. It's therefore a good idea to create
    a test user.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们希望在应用程序实施后测试其 Facebook 集成，但如果我们不需要向所有朋友发送测试墙贴等内容，那就更好了。因此，创建一个测试用户是个好主意。
- en: 'For understandable reasons Facebook doesn''t really want us to create full
    Facebook accounts for our test users, so instead they allow us to create test
    users using our Facebook App. Follow these steps to create a test user:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 由于可理解的原因，Facebook 并不想让我们为测试用户创建完整的 Facebook 账户，因此他们允许我们使用我们的 Facebook 应用程序创建测试用户。按照以下步骤创建测试用户：
- en: Log in to Facebook and then visit the [www.facebook.com/developers](http://www.facebook.com/developers)
    page.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录 Facebook 并访问 [www.facebook.com/developers](http://www.facebook.com/developers)
    页面。
- en: Click on the relevant Facebook App in the left-hand pane and then click on the
    link labeled **Edit Roles** on the right-hand side of the **Roles** section of
    the page.![Creating a Facebook test user](img/3363_09_04.jpg)
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧面板中点击相关的 Facebook 应用程序，然后点击页面右侧 **Roles** 部分的 **Edit Roles** 标签链接。![创建 Facebook
    测试用户](img/3363_09_04.jpg)
- en: The **Roles** page for the Facebook App will be displayed (see previous screenshot).
    At the bottom there is a section labeled **Test Users**, which has a link labeled
    **Add** that you should click on to create new test users.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Facebook 应用的 **Roles** 页面将显示（见前面的截图）。底部有一个标有 **Test Users** 的部分，其中有一个标有 **Add**
    的链接，您应该点击以创建新的测试用户。
- en: A small dialog box will appear with three options. The first is labeled **Number
    to Add** and is a drop-down box allowing between one and ten test users to be
    generated.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将会弹出一个包含三个选项的小对话框。第一个选项标有**添加数量**，是一个下拉框，允许生成一到十个测试用户。
- en: The **Authorize this App** checkbox allows us to determine whether the created
    users have already authorized the Facebook App to use their account. It's worth
    creating users of both types to fully test our application, but ultimately it's
    up to you whether you authorize now or when we first try to log in using this
    user account.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**授权此应用**复选框使我们能够确定创建的用户是否已经授权Facebook应用使用他们的账户。值得创建两种类型的用户来全面测试我们的应用程序，但最终是否现在授权还是在我们首次尝试使用此用户账户登录时授权，取决于您。'
- en: Finally, the **Enable Ticker** checkbox lets you decide whether the user will
    be using the Facebook Ticker interface (which is a real-time timeline of wall
    posts and other events) or the older standard interface. Not all users have access
    to the newer Ticker interface, so it is again worth testing your project using
    both methods.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，**启用Ticker**复选框让您决定用户是否将使用Facebook Ticker界面（这是一个实时墙帖子和其他事件的时间线）或较老的标准界面。并非所有用户都有权访问较新的Ticker界面，因此值得使用这两种方法测试您的项目。
- en: Click the **Add** button to create the new users. You will return to the screen
    first shown in step 3, but the new users will be shown at the bottom of the page
    now.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**按钮以创建新用户。您将返回到第3步中首次显示的屏幕，但现在新用户将显示在页面底部。
- en: Each test user will have a couple of links next to them. You should first click
    on the **Set Password** link to allow a password to be set for this user. A textbox
    will appear, to allow you to enter a password.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个测试用户旁边都会有一些链接。您应该首先点击**设置密码**链接，以便为该用户设置密码。将出现一个文本框，允许您输入密码。
- en: Next, click on the **Switch To** link next to one of the users to log in as
    that user and display their Facebook wall.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击其中一个用户旁边的**切换到**链接，以登录为该用户并显示他们的Facebook墙。
- en: At the top right of the test user's wall, there should be a button labeled **Edit
    Profile**. Click on it.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在测试用户墙的右上角，应该有一个标有**编辑个人资料**的按钮。点击它。
- en: On the **Edit Profile** screen, click on the **Contact Information** link in
    the left-hand side panel.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**编辑个人资料**屏幕上，点击左侧面板中的**联系信息**链接。
- en: At the top of the screen there should be two e-mail addresses associated with
    the profile. One of these should be of the form `<[username@tfbnw.net](mailto:username@tfbnw.net)>`,
    which is the e-mail address we will need to use later to log in as the test user.
    Make a note of this e-mail address and the password you set in step 8.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 屏幕顶部应该有两个与个人资料关联的电子邮件地址。其中之一应该是`<[username@tfbnw.net](mailto:username@tfbnw.net)>`的形式，这是我们稍后作为测试用户登录时需要使用的电子邮件地址。记下这个电子邮件地址以及您在第8步中设置的密码。
- en: Adding the s3eFacebook API to a Marmalade project
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将s3eFacebook API添加到Marmalade项目中
- en: With the Facebook App and test users configured, let's get down to adding Facebook
    support to a Marmalade project. The first thing to do is open the project MKB
    file and add `s3eFacebook` to the list of `subprojects`. We can then include the
    `s3eFacebook.h` file whenever we need to make use of the s3eFacebook API functions.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置了Facebook应用和测试用户后，让我们开始将Facebook支持添加到Marmalade项目中。首先要做的是打开项目MKB文件，并将`s3eFacebook`添加到`subprojects`列表中。然后，我们可以在需要使用s3eFacebook
    API函数时包含`s3eFacebook.h`文件。
- en: 'We also need to add another configuration setting to the MKB file in the `deployments`
    section. The line in question looks like this and is only needed for iOS builds.
    On iOS our application temporarily loses focus when we log in to Facebook and
    this value ensures that we regain control when the login process is completed:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要在`deployments`部分的MKB文件中添加另一个配置设置。问题所在行看起来像这样，并且仅适用于iOS构建。在iOS上，当我们登录到Facebook时，我们的应用程序会暂时失去焦点，这个值确保我们在登录过程完成后恢复控制：
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The hexadecimal value following the initial `fb` should be replaced with the
    16-digit App Id generated by the Facebook App.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始`fb`之后的十六进制值应替换为Facebook应用生成的16位App Id。
- en: Checking for s3eFacebook support
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查s3eFacebook支持
- en: As previously mentioned, the s3eFacebook API is only supported on iOS and Android,
    so it's good to be able to check at runtime whether we can support Facebook or
    not. This is easily done using the `s3eFacebookAvailable` function, which will
    return `S3E_TRUE` if the API is available or `S3E_FALSE` if it isn't.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，s3eFacebook API仅支持iOS和Android，因此能够在运行时检查我们是否能够支持Facebook是很好的。这可以通过使用`s3eFacebookAvailable`函数轻松完成，如果API可用，则返回`S3E_TRUE`，如果不可用，则返回`S3E_FALSE`。
- en: Initialization and termination
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 初始化和终止
- en: Before we can call any of the s3eFacebook APIs, we must first initialize a Facebook
    session. We do this with a call to the function `s3eFBInit` that takes a single
    parameter, a null-terminated string containing the App Id of the Facebook App
    we want to use.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够调用任何s3eFacebook API之前，我们必须首先初始化一个Facebook会话。我们通过调用`s3eFBInit`函数来完成此操作，该函数接受一个参数，即包含我们想要使用的Facebook应用程序App
    Id的以null结尾的字符串。
- en: The function will return a pointer to an `s3eFBSession` instance, which we will
    need to use to access the Facebook API and make requests to it.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数将返回一个指向`s3eFBSession`实例的指针，我们将需要使用它来访问Facebook API并向其发出请求。
- en: We can release the Facebook session with a call to `s3eFBTerminate`, which takes
    the session pointer returned from `s3eFBInit` as its only argument.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过调用`s3eFBTerminate`函数来释放Facebook会话，该函数接受从`s3eFBInit`返回的会话指针作为其唯一参数。
- en: It is sufficient to call the `s3eFBInit` function the first time we want to
    make any Facebook request and then to use this same session information for the
    execution life of our application. The `s3eFBTerminate` function only needs to
    be called at shutdown time.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们想要发出任何Facebook请求的第一次调用`s3eFBInit`函数后，我们可以使用相同的会话信息来执行应用程序的生命周期。`s3eFBTerminate`函数只需要在关闭时调用。
- en: Logging in and out of Facebook
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 登录和退出Facebook
- en: Before we can make any Facebook request, we must first log in to Facebook. This
    is done with the `s3eFBSession_LogIn` function, which takes five parameters. The
    first is the `s3eFBSession` pointer returned from `s3eFBInit`. We can then specify
    a callback function, which will be triggered once successfully logged in. A pointer
    to a block of user data can also be specified, which will be passed into the callback
    function when it is triggered.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够发出任何Facebook请求之前，我们必须首先登录到Facebook。这是通过`s3eFBSession_LogIn`函数完成的，该函数接受五个参数。第一个是`from
    s3eFBInit`返回的`s3eFBSession`指针。然后我们可以指定一个回调函数，该函数将在成功登录后触发。还可以指定一个指向用户数据块的指针，当它被触发时，该指针将被传递到回调函数中。
- en: The callback function can be specified as `NULL`, in which case we need to check
    for login to be completed by calling the `s3eFBSession_LoggedIn` function. This
    takes the session pointer as an argument and will return `S3E_TRUE` when the session
    is logged in.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 回调函数可以指定为`NULL`，在这种情况下，我们需要通过调用`s3eFBSession_LoggedIn`函数来检查登录是否完成。该函数接受会话指针作为参数，当会话登录时将返回`S3E_TRUE`。
- en: The final two parameters of `s3eFBSession_LogIn` are an array of null-terminated
    strings listing the Facebook API permissions we want to make use of and the number
    of permissions in this array. Permissions allow our application to notify the
    user that our application wants to perform certain operations on their account,
    such as posting to their wall or accessing their photo collection. A full list
    of permissions can be found at the web page [http://developers.facebook.com/docs/authentication/permissions/](http://developers.facebook.com/docs/authentication/permissions/).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`s3eFBSession_LogIn`函数的最后两个参数是一个以null结尾的字符串数组，列出了我们想要使用的Facebook API权限以及该数组中的权限数量。权限允许我们的应用程序通知用户，我们的应用程序想要在他们的账户上执行某些操作，例如在他们的墙上发布或访问他们的照片收藏。完整的权限列表可以在网页[http://developers.facebook.com/docs/authentication/permissions/](http://developers.facebook.com/docs/authentication/permissions/)中找到。'
- en: 'The following example code shows a sample callback function and how to use
    it with the `s3eFBSession_Login` function:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例代码展示了示例回调函数以及如何使用`s3eFBSession_Login`函数：
- en: '[PRE2]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This code attempts to log in to Facebook requesting the `publish_stream` permission
    that allows an application to post to a user's wall.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码尝试登录Facebook，请求`publish_stream`权限，该权限允许应用程序在用户的墙上发布内容。
- en: When a Facebook login attempt is made, our application will lose focus and the
    device's Facebook application will be started. If the user doesn't have a Facebook
    application installed, the device's web browser will be launched instead.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当尝试进行Facebook登录时，我们的应用程序将失去焦点，并启动设备的Facebook应用程序。如果用户没有安装Facebook应用程序，设备上的网络浏览器将被启动。
- en: You will be asked to provide your Facebook account's login details, so for testing
    purposes enter the details for one of the test user accounts we generated earlier.
    Once logged in, another screen will appear detailing what our application wants
    to do with the user's Facebook account. In the previous example this would just
    be posting to the user's wall. If the Facebook App has not yet been authorized
    for the Facebook account, the screen will also have two buttons labeled **Allow**
    and **Don't Allow**, which the user can use to grant or disallow access respectively.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您将被要求提供您的Facebook账户的登录详情，因此为了测试目的，请输入我们之前生成的测试用户账户的详情。登录后，另一个屏幕将出现，详细说明我们的应用程序想要如何使用用户的Facebook账户。在上一个示例中，这将是向用户的墙发布消息。如果Facebook应用程序尚未为Facebook账户授权，屏幕上还将有两个按钮，分别标有**允许**和**不允许**，用户可以使用这些按钮分别授予或拒绝访问权限。
- en: Note
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Facebook login process will first look to see if a user is already logged
    in to Facebook by looking for a browser cookie, and will not ask for username
    and password details if this is the case. If the test device is also your own
    personal device, you will probably want to log out of Facebook before testing
    your application to avoid annoying those on your friends list!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Facebook 登录过程首先会检查用户是否已经通过浏览器cookie登录到Facebook，如果是这种情况，则不会要求用户提供用户名和密码详情。如果测试设备也是您自己的个人设备，您在测试应用程序之前可能希望从Facebook登出，以避免打扰您的朋友列表中的其他人！
- en: After authorizing (or indeed disallowing) the Facebook App, our application
    will regain focus and the login callback function will be triggered to say whether
    the process was successful or not. If the Facebook app was not authorized or there
    is no Internet connection available, login will fail.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在授权（或实际上拒绝授权）Facebook应用程序后，我们的应用程序将重新获得焦点，并将触发登录回调函数以说明过程是否成功。如果未授权Facebook应用程序或没有可用的互联网连接，登录将失败。
- en: Logging back out of Facebook again is also simple. All we have to do is make
    a call to `s3eFBSession_Logout`, passing the `s3eFBSession` pointer as its only
    argument. In practice we only ever need to log out of Facebook on closing our
    application or if you specifically want to log off to allow different user credentials
    to be used instead. The session will not expire or become invalid as long as our
    application is executing.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 再次从Facebook登出也很简单。我们只需调用`s3eFBSession_Logout`函数，并将`s3eFBSession`指针作为其唯一参数传递。实际上，我们只有在关闭应用程序或您明确希望登出以允许使用不同的用户凭据时才需要从Facebook登出。只要我们的应用程序正在执行，会话就不会过期或失效。
- en: Posting a message to a user's wall
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向用户的墙发布消息
- en: 'We''ll now take a look at one of the most common things that games use Facebook
    for: posting a message to the user''s wall to alert their friends to a new high
    score or some in-game achievement.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将查看游戏最常使用Facebook做的一件事之一：向用户的墙发布消息，以提醒他们的朋友新的高分或游戏中的成就。
- en: In order to do this we'll be making use of the Facebook Graph API. There are
    other ways, but the Graph API is the most up-to-date way of doing so and doesn't
    look likely to be replaced any time soon.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们将使用Facebook Graph API。还有其他方法，但Graph API是目前最最新潮的方法，并且看起来在不久的将来不太可能被取代。
- en: Note
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on the Facebook Graph API take a look at the web page [http://developers.facebook.com/docs/reference/api/](http://developers.facebook.com/docs/reference/api/),
    and for details about wall posts take a look at [http://developers.facebook.com/docs/reference/api/post/](http://developers.facebook.com/docs/reference/api/post/).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Facebook Graph API的更多信息，请查看网页[http://developers.facebook.com/docs/reference/api/](http://developers.facebook.com/docs/reference/api/)，有关墙帖子详情，请查看[http://developers.facebook.com/docs/reference/api/post/](http://developers.facebook.com/docs/reference/api/post/)。
- en: To begin making a Facebook Graph API request, we use the function `s3eFBRequest_WithGraphPath`.
    This function takes as arguments the session pointer, the desired Facebook Graph
    path, and the HTTP method to use (GET or POST). The Graph path and HTTP method
    are both specified as null-terminated strings.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始发送Facebook Graph API请求，我们使用函数`s3eFBRequest_WithGraphPath`。此函数将会话指针、所需的Facebook
    Graph路径和要使用的HTTP方法（GET或POST）作为参数。Graph路径和HTTP方法都指定为以null终止的字符串。
- en: The function will return a pointer to an `s3eFBRequest` structure representing
    the new request if it is successful, or `NULL` if it fails.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功，该函数将返回一个指向`s3eFBRequest`结构的指针，表示新的请求；如果失败，则返回`NULL`。
- en: With the request structure created, we can now add the various parameters we
    need to it using the functions `s3eFBRequest_AddParamNumber` and `s3eFBRequest_AddParamString`.
    Both functions take the `s3eFBRequest` structure pointer and a null-terminated
    string for the parameter name as their first two parameters. The third parameter
    is a 64-bit integer value (Marmalade defines a type called `int64` for this) for
    the former function call, or a `const char` pointer to a null terminated string
    for the latter function.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建请求结构后，我们可以使用` s3eFBRequest_AddParamNumber`和` s3eFBRequest_AddParamString`函数向其中添加所需的各个参数。这两个函数都接受`
    s3eFBRequest`结构指针和一个以null终止的字符串作为参数名称的前两个参数。对于前一个函数调用，第三个参数是一个64位整数值（Marmalade定义了一个名为`int64`的类型），对于后一个函数，是一个指向以null终止的字符串的`const
    char`指针。
- en: Most Graph API values will require you to specify an access token to show that
    your application is authorized to make requests. The access token is provided
    to our application as part of the login process and we can retrieve it using the
    `s3eFBSession_AccessToken` function, which again takes the session pointer as
    its sole input. The access token is returned as a `const char` pointer.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Graph API值都需要你指定一个访问令牌来证明你的应用程序有权发出请求。访问令牌作为登录过程的一部分提供给我们的应用程序，我们可以使用` s3eFBSession_AccessToken`函数检索它，该函数再次以会话指针作为其唯一输入。访问令牌作为`const
    char`指针返回。
- en: The access token can then be added to a Graph request using the `s3eFBRequest_AddParamString`
    function by specifying `access_token` for the parameter name and using the return
    value from the `s3eFBSession_AccessToken` function as the value for the parameter.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用` s3eFBRequest_AddParamString`函数通过指定` access_token`作为参数名称，并使用` s3eFBSession_AccessToken`函数的返回值作为参数值，将访问令牌添加到Graph请求中。
- en: Once all parameters have been added to the request, we can send it to the Facebook
    servers using the `s3eFBRequest_Send` function. This function takes the request
    pointer as its first input, followed by a callback function and a pointer to an
    optional block of data that will be passed to the callback function when it is
    triggered.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦将所有参数添加到请求中，我们就可以使用` s3eFBRequest_Send`函数将其发送到Facebook服务器。该函数接受请求指针作为其第一个输入，然后是一个回调函数，以及一个指向可选数据块的指针，当触发回调函数时，该数据块将被传递给回调函数。
- en: The function will return immediately with `S3E_RESULT_SUCCESS` if the request
    was sent, or `S3E_RESULT_ERROR` if there was a problem transmitting it. The s3eFacebook
    API will wait for the request from Facebook to arrive and will call the specified
    callback function with the result when it does.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果请求已发送，该函数将立即返回` S3E_RESULT_SUCCESS`，如果传输过程中出现问题，则返回` S3E_RESULT_ERROR`。s3eFacebook
    API将等待Facebook的请求到达，并在请求到达时调用指定的回调函数。
- en: When a request is completed we should make a call to `s3eFBRequest_Delete` to
    free any resources associated with it.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当请求完成时，我们应该调用` s3eFBRequest_Delete`来释放与其相关的任何资源。
- en: 'Let''s look at an example illustrating all of the previous points for posting
    a simple message to the user''s wall:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个示例来了解如何将所有这些点应用于向用户的墙发布一条简单消息：
- en: '[PRE3]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Further s3eFacebook features
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 进一步的s3eFacebook功能
- en: The previous sections really just scratch the surface of the kind of Facebook
    integration that is possible using s3eFacebook. For example, we have made no mention
    of processing any results sent back to our application by the Facebook API. There
    is a whole family of functions with the prefix `s3eFBRequest_Response` that allow
    the return values from a Facebook request to be analyzed.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 前几节实际上只是触及了使用s3eFacebook可能实现的Facebook集成的表面。例如，我们没有提到处理由Facebook API发送回我们应用程序的任何结果。有一系列以`s3eFBRequest_Response`为前缀的函数，允许分析Facebook请求的返回值。
- en: For more information on the entire s3eFacebook API, go to **Marmalade API Reference**
    | **Extensions API Documentation** | **Facebook Extension** | **Facebook API Reference**
    in the Marmalade documentation.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 关于整个s3eFacebook API的更多信息，请访问Marmalade文档中的**Marmalade API参考** | **扩展API文档** |
    **Facebook扩展** | **Facebook API参考**。
- en: Using Twitter
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Twitter
- en: Sadly Marmalade provides no dedicated built-in support for Twitter; so if Twitter
    is important to you, you'll need to provide your own implementation.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 很遗憾，Marmalade没有提供针对Twitter的专用内置支持；所以如果你认为Twitter很重要，你需要提供自己的实现。
- en: One way of doing this would be to use the Twitter API directly by sending HTTP
    requests to Twitter's servers using the IwHTTP API. This would allow a solution
    to be created that should work fine on all operating systems; but this might require
    a lot of code to be implemented to deal with all the possible problems that can
    occur when working online (for example, lack of internet connection, server timeouts,
    and so on).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这一功能的一种方法是通过直接使用Twitter API，通过IwHTTP API向Twitter的服务器发送HTTP请求。这将允许创建一个应该能在所有操作系统上正常工作的解决方案；但可能需要编写大量代码来处理在线工作时可能出现的所有可能问题（例如，网络连接中断、服务器超时等）。
- en: Another possibility, although it would be limited to iOS and Android, would
    be to use the Marmalade **Extensions Development Kit** (**EDK**) to access existing
    Twitter solutions on these two platforms. This may be simpler to implement since
    the low level Twitter API HTTP requests will have been taken care of; but the
    EDK is currently only supported by iOS and Android. [Chapter 10](ch10.html "Chapter 10. Extending
    Marmalade with the Extensions Development Kit (EDK)"), *Extending Marmalade with
    the Extensions Development Kit (EDK)*, of this book will be looking at the EDK
    in more detail.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种可能性，尽管它将仅限于iOS和Android，将是使用Marmalade **扩展开发工具包**（**EDK**）来访问这两个平台上现有的Twitter解决方案。这可能更容易实现，因为低级别的Twitter
    API HTTP请求已经被处理；但EDK目前仅支持iOS和Android。[第10章](ch10.html "第10章。使用扩展开发工具包（EDK）扩展Marmalade")，*使用扩展开发工具包（EDK）扩展Marmalade*，本书将更详细地探讨EDK。
- en: 'If you are interested in supporting Twitter in Marmalade, the following web
    page may be of use to you:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你感兴趣在Marmalade中支持Twitter，以下网页可能对你有所帮助：
- en: '[https://dev.twitter.com/docs/twitter-libraries#cplusplus](https://dev.twitter.com/docs/twitter-libraries#cplusplus)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://dev.twitter.com/docs/twitter-libraries#cplusplus](https://dev.twitter.com/docs/twitter-libraries#cplusplus)'
- en: It mentions a number of existing C++-based libraries for accessing Twitter that
    may form a good starting point for a Marmalade solution.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 它提到了一些现有的基于C++的库，用于访问Twitter，这些库可能为Marmalade解决方案提供一个良好的起点。
- en: Connecting to other types of online services
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到其他类型的在线服务
- en: We'll now take a quick look at some of the other types of online services that
    games on mobile devices typically connect to. While we won't be covering these
    in depth, it's still worth giving them a mention in order to form a better picture
    of what is possible.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们快速浏览一下移动设备上游戏通常连接到的其他类型在线服务。虽然我们不会对这些服务进行深入探讨，但提及它们仍然有助于形成一个更全面的了解，了解可能实现的功能。
- en: Supporting social gaming networks
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 支持社交游戏网络
- en: Social gaming networks such as Apple's Game Center or cross-platform solutions
    such as Scoreloop or OpenFeint have become commonplace in many mobile games. In
    the following sections we will look at some of the possibilities we have available
    in Marmalade projects for these types of services.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 社交游戏网络，如苹果的Game Center或跨平台解决方案，如Scoreloop或OpenFeint，在许多移动游戏中已成为常见。在接下来的章节中，我们将探讨Marmalade项目中可用于这些类型服务的可能性。
- en: Using Apple's Game Center
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用苹果的Game Center
- en: One of the most well-known social gaming systems in the mobile games world has
    to be Apple's Game Center ([http://www.apple.com/game-center/](http://www.apple.com/game-center/)).
    Unsurprisingly, this system is solely devoted to iOS-based devices, so if you
    are developing a game for iOS this is probably going to be your first choice for
    support.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动游戏世界中，最知名的社会游戏系统之一无疑是苹果的Game Center([http://www.apple.com/game-center/](http://www.apple.com/game-center/))。不出所料，这个系统完全致力于基于iOS的设备，所以如果你正在为iOS开发游戏，这可能是你支持的首选。
- en: We cannot access Apple's API directly given that it is an Objective-C library,
    so Marmalade instead comes with a wrapper API for the service, called s3eIOSGameCenter.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它是一个Objective-C库，我们无法直接访问苹果的API，因此Marmalade提供了一个名为s3eIOSGameCenter的服务包装API。
- en: 'The s3eIOSGameCenter API is far too big for us to delve into here, but it is
    quite a close wrapping of the standard Apple-supplied API and thus fairly simple
    to understand how to convert any sample code you may come across on the Internet
    to use the Marmalade wrappers. An example project to demonstrate its use is supplied
    in the Marmalade installation folder `examples\s3eIOSGameCenter` and there is
    plenty of information in the Marmalade documentation too, at **Marmalade API Reference**
    | **S3E API Documentation** | **S3E: iOS Only** | **S3E iOS Game Center**.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 's3eIOSGameCenter API对于我们来说太大，无法在这里深入探讨，但它是对标准苹果提供的API的相当紧密封装，因此理解如何将你在互联网上遇到的任何示例代码转换为使用Marmalade封装相当简单。一个演示其使用的示例项目包含在Marmalade安装文件夹`examples\s3eIOSGameCenter`中，Marmalade文档中也有大量信息，包括**Marmalade
    API参考** | **S3E API文档** | **S3E: 仅限iOS** | **S3E iOS游戏中心**。'
- en: Support is provided for all the major features of Game Center, including leaderboards
    and achievements, multiplayer matchmaking, and even voice chat!
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 支持Game Center的所有主要功能，包括排行榜和成就、多人匹配和甚至语音聊天！
- en: Using Scoreloop
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Scoreloop
- en: The Scoreloop system is an extremely popular cross-platform solution that, at
    the time of writing, supports iOS, Android, BlackBerry PlayBook, and Windows Phone
    7\. Given that Marmalade supports the first three of these platforms, combined
    with the fact that the nice people at Scoreloop also supply a version of their
    API that can be used directly in a Marmalade project, this system is a very good
    choice if you want to support social gaming in a cross-platform project.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Scoreloop系统是一个极受欢迎的跨平台解决方案，截至写作时，它支持iOS、Android、BlackBerry PlayBook和Windows
    Phone 7。鉴于Marmalade支持这三种平台中的前三种，再加上Scoreloop的友好人士还提供了一个可以直接在Marmalade项目中使用的API版本，如果您想在跨平台项目中支持社交游戏，这是一个非常好的选择。
- en: The Marmalade version of Scoreloop provides support for leaderboards, achievements,
    and Scoreloop's challenge system for offline multiplayer gaming.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Marmalade版本的Scoreloop提供了对排行榜、成就和Scoreloop的离线多人游戏挑战系统的支持。
- en: More information on Scoreloop can be found at [www.scoreloop.com](http://www.scoreloop.com),
    where you can sign up for a free developer account and download the latest version
    of the SDK.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于Scoreloop的信息可以在[www.scoreloop.com](http://www.scoreloop.com)找到，在那里您可以注册一个免费的开发者账户并下载SDK的最新版本。
- en: Supporting in-app purchases
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 支持内购
- en: The current popularity of so-called Freemium games has come about because there
    are now other ways of charging for games besides a single up-front purchase cost.
    The advent of **in-app purchases** (**IAP**) has allowed us to literally give
    away our games for free and yet still make a profit by selling additional game
    modes or level packs to users after they have already played and enjoyed our games.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 所谓的免费增值游戏（Freemium games）的当前流行是因为现在除了单次购买成本外，还有其他方式为游戏收费。**内购**（**IAP**）的出现使我们能够免费赠送我们的游戏，同时通过向已经玩过并享受过我们游戏的用户销售额外的游戏模式或关卡包来获利。
- en: In the following sections we will be looking at how Marmalade allows in-app
    purchases to be supported on iOS and Android.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将探讨Marmalade如何支持iOS和Android上的内购。
- en: Adding in-app purchasing for iOS devices
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为iOS设备添加内购功能
- en: As with Game Center, the in-app purchase SDK supplied by Apple is written in
    Objective-C, so we can't use it directly in a Marmalade project.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 与Game Center一样，苹果提供的内购SDK是用Objective-C编写的，因此我们无法直接在Marmalade项目中使用它。
- en: Again Marmalade solves this problem by wrapping up the Apple libraries into
    an API called s3eIOSAppStoreBilling.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，Marmalade通过将苹果库封装成一个名为s3eIOSAppStoreBilling的API来解决此问题。
- en: This API allows us to obtain a list of in-app products that are available for
    purchase and their costs. We can then make a request to purchase a particular
    product and will be notified of success or failure when Apple's servers have taken
    care of all the behind-the-scenes stuff that needs to be done in order to process
    the payment.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 此API允许我们获取可购买的产品列表及其成本。然后我们可以请求购买特定产品，当苹果的服务器处理完所有幕后工作以处理付款时，我们将收到成功或失败的通知。
- en: Just like the original Apple implementation, there is no support for allowing
    a user to automatically download extra data when a purchase has been made. Instead
    we have to implement this ourselves on receipt of the purchase confirmation, which
    would involve either shipping all the "unlockable" data with the original application
    download or downloading it from our own server.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 就像原始的Apple实现一样，我们不支持在购买完成后自动下载额外数据。相反，我们必须在收到购买确认后自行实现这一功能，这可能涉及将所有“可解锁”数据与原始应用程序下载一起发送，或者从我们自己的服务器下载。
- en: 'For more information on this API, take a look in the Marmalade documentation
    by going to **Marmalade API Reference** | **S3E API Documentation** | **S3E: iOS
    Only** | **S3E iOS App Store Billing**, and the example code that can be found
    in the Marmalade installation at `examples\s3e\s3eIOSAppStoreBilling`.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '如需了解有关此API的更多信息，请访问Marmalade文档，通过访问**Marmalade API参考** | **S3E API文档** | **S3E:
    仅限iOS** | **S3E iOS应用商店计费**，并在Marmalade安装目录中的`examples\s3e\s3eIOSAppStoreBilling`可以找到示例代码。'
- en: Adding in-app purchasing for Android devices
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为Android设备添加内购功能
- en: Marmalade also provides a wrapper API for implementing in-app purchases on Android
    called s3eAndroidMarketBilling. The naming of this API is still based on the original
    name of the Android store (Android Marketplace), but it works fine with the renamed
    Google Play system.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Marmalade还为在Android上实现内购提供了一个名为s3eAndroidMarketBilling的包装API。这个API的命名仍然基于原始的Android商店名称（Android
    Marketplace），但它与重命名的Google Play系统兼容。
- en: Sadly Marmalade hasn't been able to provide a single API that can target multiple
    platforms, simply because the iOS and Android systems work so differently. A good
    example of this is that the Google Play system does not allow us to query the
    list of available products for an application. This is a really strange omission
    on Google's part (especially given that you do have to set up a product list on
    the Google Play servers anyway) and it means we either have to hardcode our product
    identifiers into our application or provide our own server to mirror this information.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 很遗憾，Marmalade无法提供一个可以针对多个平台的单一API，这仅仅是因为iOS和Android系统的工作方式如此不同。一个很好的例子是，Google
    Play系统不允许我们查询应用程序可用的产品列表。这是Google方面的一个真正奇怪的遗漏（尤其是考虑到您仍然需要在Google Play服务器上设置产品列表），这意味着我们要么必须在应用程序中硬编码产品标识符，要么提供自己的服务器来镜像这些信息。
- en: 'Information on this API can be found in the documentation by going to **Marmalade
    API Reference** | **S3E API Documentation** | **S3E: Android Only** | **S3E Android
    Market Billing**, and there is some sample code at `examples\s3e\s3eAndroidMarketBilling`.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '在文档中，您可以通过访问**Marmalade API参考** | **S3E API文档** | **S3E: 仅限Android** | **S3E
    Android市场计费**来找到有关此API的信息，并且`examples\s3e\s3eAndroidMarketBilling`目录中包含一些示例代码。'
- en: Using advertising
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用广告
- en: We've just looked at in-app purchases as being one way of generating an income
    from your games, but another way is to make use of one of the many advertising
    solutions available. Just like those clickable adverts that are a common part
    of most websites, we can give over a little part of our game's screen display
    to adverts that will then provide another potential income stream.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚探讨了从您的游戏中生成收入的一种方式，即内购，但另一种方式是利用许多可用的广告解决方案之一。就像大多数网站常见的可点击广告一样，我们可以将游戏屏幕显示的一小部分空间留给广告，从而提供另一个潜在的收益来源。
- en: The following sections explore some of the options available to us.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分将探讨我们可用的选项。
- en: Implementing iAd support for iOS devices
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现iOS设备的iAd支持
- en: As you are probably aware, Apple has its own advertising solution purely for
    iOS, called **iAd**. Again this requires use of an Objective-C API, so the Marmalade
    SDK provides a C wrapper for it called **s3eIOSIAD**.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所知，Apple为其iOS设备提供自己的广告解决方案，称为**iAd**。同样，这需要使用Objective-C API，因此Marmalade SDK提供了一个名为**s3eIOSIAD**的C包装器。
- en: This is a very simple API that allows you to request an advertisement from the
    iAd servers. If an advert is available you have control over when to show it,
    so the advert only needs to be visible at certain points in your game if you so
    wish.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单的API，允许您从iAd服务器请求广告。如果广告可用，您可以选择何时显示它，因此如果需要，广告只需在游戏中的特定点可见。
- en: 'Documentation on this API can be found at **Marmalade API Reference |S3E API
    Documentation** | **S3E: iOS Only** | **S3E iOS iAd**, and example code exists
    in the Marmalade installation directory at `examples\s3e\s3eIOSIAd`.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在**Marmalade API参考 | S3E API文档** | **S3E：仅限iOS** | **S3E iOS iAd**中可以找到此API的文档，示例代码位于Marmalade安装目录中的`examples\s3e\s3eIOSIAd`。
- en: Using other advertising solutions
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用其他广告解决方案
- en: Since iAd can only be used on iOS platforms, we are forced to consider other
    possible solutions when targeting other platforms (although most of these other
    solutions can still be used on iOS as it happens!).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 由于iAd只能在iOS平台上使用，因此当我们针对其他平台时，我们被迫考虑其他可能的解决方案（尽管大多数这些其他解决方案仍然可以在iOS上使用！）。
- en: Marmalade does not provide support for any other advertising systems directly,
    but other developers have taken up the challenge here and have made their own
    solutions available for use on the Marmalade Code Community pages.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Marmalade不直接提供对任何其他广告系统的支持，但其他开发人员在这里接受了挑战，并在Marmalade Code Community页面上提供了自己的解决方案供使用。
- en: At the time of writing there are a couple of useful projects called *s3eAdWhirl*
    and *s3eAdNinja* that at least provide support for Android. These solutions are
    quite clever in that they actually target multiple sources of mobile advertising
    in order to ensure that an advert is shown in your application as often as possible
    to maximize your revenue.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，有两个有用的项目称为*s3eAdWhirl*和*s3eAdNinja*，至少为Android提供了支持。这些解决方案非常巧妙，因为它们实际上针对多个移动广告源，以确保广告尽可能频繁地在您的应用程序中显示，以最大化您的收入。
- en: 'The *IwGameAds* module is another open-source community project that shows
    how to integrate with multiple ad services and works across more platforms than
    you can shake a very large stick at. The full source code and documentation for
    it can be found at the following web address:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '*IwGameAds*模块是另一个开源社区项目，展示了如何与多个广告服务集成，并且可以在比您能挥动一根非常长的棍子还要多的平台上工作。其完整源代码和文档可以在以下网址找到：'
- en: '[http://www.drmop.com/index.php/iwgameads-sdk/](http://www.drmop.com/index.php/iwgameads-sdk/)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.drmop.com/index.php/iwgameads-sdk/](http://www.drmop.com/index.php/iwgameads-sdk/)'
- en: In the unlikely event that these don't suit your needs and there is a particular
    mobile advertising system you would like to use, another possibility is to implement
    your own support for that system using the Extensions Development Kit that is
    described in more detail in the next chapter.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在不太可能的情况下，如果这些不符合您的需求，并且您想使用特定的移动广告系统，另一种可能性是使用下一章中更详细描述的扩展开发工具包来实现对该系统的支持。
- en: Example code
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例代码
- en: Now let's take a look at the example code associated with this chapter.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看本章相关联的示例代码。
- en: The Facebook project
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Facebook项目
- en: The Facebook project brings together into one place all the information contained
    in this chapter about posting to a user's Facebook wall so you can easily see
    how to implement the code in a more real-world application.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Facebook项目将本章关于发布到用户Facebook墙上的所有信息汇集在一个地方，这样您可以轻松地看到如何在更真实的应用程序中实现代码。
- en: On running the sample, we are presented with two menu buttons. The first allows
    us to log in and out of Facebook while the second allows us to post a message
    to our wall when we have successfully logged in. A status message will be displayed
    at the bottom of the screen.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 运行示例后，我们看到了两个菜单按钮。第一个按钮允许我们登录和退出Facebook，而第二个按钮在我们成功登录后允许我们向我们的墙发布消息。状态消息将在屏幕底部显示。
- en: The s3eFacebook API has been further wrapped into a small class called `Facebook`,
    which deals with logging in and out of Facebook and building up Graph API requests.
    This is a good approach as it provides a further layer of abstraction and keeps
    all the s3eFacebook API usage in one place. If the core Facebook API were to change
    for any reason (possible, given that Facebook could potentially change the way
    in which things have to be done at any time), all the code that needs to be updated
    is easy to find.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: s3eFacebook API已被进一步封装到一个名为`Facebook`的小类中，该类处理Facebook的登录和注销以及构建Graph API请求。这是一个很好的方法，因为它提供了进一步的抽象层，并将所有s3eFacebook
    API的使用集中在一个地方。如果Facebook的核心API因任何原因（考虑到Facebook可能随时更改做事的方式，这是可能的）发生变化，所有需要更新的代码都很容易找到。
- en: The message to post to the wall is requested using the `s3eOSReadStringUTF8WithDefault`
    function; so this example also serves as a guide to using this API.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`s3eOSReadStringUTF8WithDefault`函数请求要发布到墙上的消息；因此，这个示例也充当了使用此API的指南。
- en: If you want to build and run this sample code, you will need to create your
    own Facebook App and supply the App Id and App Secret values generated for it.
    The `app.icf` file contains two settings allowing these values to be specified
    (though currently only the App Id is actually used in the code!).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想构建和运行此示例代码，你需要创建自己的Facebook应用，并为其提供由它生成的App Id和App Secret值。`app.icf`文件包含两个设置，允许指定这些值（尽管目前代码中实际只使用了App
    Id！）。
- en: It is also necessary to modify the `iphone-bundle-url-schemes` line in the `deployments`
    section of the project's MKB file. If this setting is not changed, the application
    will not regain focus after the Facebook login process on iOS devices.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要修改项目MKB文件中的`iphone-bundle-url-schemes`行。如果此设置未更改，则应用程序在iOS设备上完成Facebook登录过程后不会重新获得焦点。
- en: As mentioned when discussing the s3eFacebook API earlier in this chapter, this
    sample code will only work on iOS and Android devices.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章前面讨论s3eFacebook API时提到的，此示例代码只能在iOS和Android设备上运行。
- en: The Skiing project
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 滑雪项目
- en: This chapter sees Facebook support being added to the Skiing project. The `Facebook.cpp`
    and `Facebook.h` files created for the Facebook project have been added to the
    Skiing project unchanged in order to support posting a message to the user's wall.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了Facebook支持被添加到滑雪项目中。为Facebook项目创建的`Facebook.cpp`和`Facebook.h`文件未经修改地添加到滑雪项目中，以支持向用户的墙发布消息。
- en: When the player reaches the "game over" screen, a check is made to see if Facebook
    support is available. If it isn't, the normal "game over" message is displayed
    and after a short delay the user will return to the title screen.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 当玩家达到“游戏结束”屏幕时，会检查是否提供了Facebook支持。如果没有，将显示正常的“游戏结束”消息，并在短暂的延迟后，用户将返回到标题屏幕。
- en: If Facebook functionality is available, a slightly different "game over" screen
    is displayed. This version informs the player of their score and then asks if
    they wish to post a message on their wall to boast about it to their friends.
    Buttons marked **Yes** and **No** are provided to allow the player to choose what
    to do.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Facebook功能可用，将显示一个略有不同的“游戏结束”屏幕。这个版本会告知玩家他们的得分，并询问他们是否想在墙上发布一条消息来向朋友炫耀。提供了标记为**是**和**否**的按钮，让玩家选择要做什么。
- en: If they click on the **Yes** button, the game will attempt to log in to Facebook
    and then post a message detailing the player's score. The request also references
    an image file and a web page link that will also be displayed alongside the wall
    message.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果他们点击**是**按钮，游戏将尝试登录Facebook，然后发布一条详细说明玩家得分的消息。请求还引用了一个图像文件和一个网页链接，这些链接也将与墙上的消息一起显示。
- en: As with the previous Facebook project, it is necessary to create your own Facebook
    App and supply the correct values for the App Id, App Secret, and the `iphone-bundle-url-schemes`
    setting.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的Facebook项目一样，需要创建自己的Facebook应用，并为其提供正确的App Id、App Secret以及`iphone-bundle-url-schemes`设置值。
- en: Summary
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we've taken a quick look at how to add various kinds of online
    services to our games. Specifically, we've seen how to add Facebook support to
    our titles and now know where to start looking should we want to include social
    gaming, advertising, or in-app purchases.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们简要地探讨了如何将各种在线服务添加到我们的游戏中。具体来说，我们看到了如何将Facebook支持添加到我们的游戏中，并且现在知道了如果想要包含社交游戏、广告或应用内购买，我们应该从哪里开始着手。
- en: Each of these topics could easily fill an entire chapter, but unfortunately
    there just isn't room in this book to go any deeper. Hopefully you now have a
    good idea of the options available though.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这些主题中的每一个都足以填满整整一章，但遗憾的是，这本书中并没有足够的空间进行更深入的探讨。不过，希望你现在已经对可用的选项有了很好的了解。
- en: At several points in this chapter the Extensions Development Kit (EDK) was mentioned
    as a possible way of implementing online features that are currently not supported
    as part of the base Marmalade SDK. In the next chapter, we will be taking a look
    at the EDK to see how we can access APIs that form part of the iOS and Android
    operating systems.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的几个地方提到了扩展开发工具包（EDK）作为实现当前Marmalade SDK基础部分不支持在线功能的一种可能方式。在下一章中，我们将探讨EDK，看看我们如何访问构成iOS和Android操作系统的API。
