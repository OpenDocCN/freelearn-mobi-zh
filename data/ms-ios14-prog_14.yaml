- en: '*Chapter 14*: Creating an App Clip for Your App'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第14章*：为您的应用创建App Clip'
- en: One of the main features that iOS 14 brings to the table is App Clips. App Clips
    provide users with a fast new way to discover and make use of what your app has
    to offer. By triggering an App Clip from a QR code, a link, an NFC tag, or other
    mechanism, it can pop into the user's device (even without your app installed)
    and bring some of your app's functionality to life in a matter of seconds.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: iOS 14带来的主要功能之一是App Clips。App Clips为用户提供了一种快速的新方式来发现和使用您应用提供的内容。通过从二维码、链接、NFC标签或其他机制触发App
    Clip，它可以在几秒钟内出现在用户的设备上（即使没有安装您的应用），并使您应用的一些功能立即变得可用。
- en: In this chapter, we are going to learn what an App Clip is, what they are used
    for, and what the user's journey will be like while using them. We will review
    the different options that users have to trigger them. We will then develop an
    App Clip and learn how to configure it with App Store Connect's new features.
    Finally, we will learn how to test them using Local Experiences. By the end of
    this chapter, you will be able to develop your own App Clips and bring your apps
    to the next level.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习什么是App Clip，它们用于什么，以及用户在使用它们时的体验将如何。我们将回顾用户可以用来触发它们的各种选项。然后，我们将开发一个App
    Clip，并学习如何使用App Store Connect的新功能对其进行配置。最后，我们将学习如何使用本地体验来测试它们。到本章结束时，您将能够开发自己的App
    Clips并将您的应用提升到新的水平。
- en: 'Let''s summarize the topics of this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们总结本章的主题：
- en: Introducing App Clips
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍App Clips
- en: Developing your first App Clip
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发您的第一个App Clip
- en: Testing your App Clip experiences
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试您的App Clip体验
- en: Let's get started!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The code bundle for this chapter includes three starter projects called `AppClipExample_start`,
    `AppClipExample_configure_start`, and `AppClipExample_test`. You can find them
    in the code bundle repository for this book:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码包包括三个起始项目，分别称为`AppClipExample_start`、`AppClipExample_configure_start`和`AppClipExample_test`。您可以在本书的代码包仓库中找到它们：
- en: '[https://github.com/PacktPublishing/Mastering-iOS-14-Programming-4th-Edition](https://github.com/PacktPublishing/Mastering-iOS-14-Programming-4th-Edition)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Mastering-iOS-14-Programming-4th-Edition](https://github.com/PacktPublishing/Mastering-iOS-14-Programming-4th-Edition)'
- en: Introducing App Clips
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍App Clips
- en: '**App Clips** allow users to discover an app in a fast and lightweight manner.
    With App Clips, a user can quickly use a feature of your app without having the
    app installed on their phone. An App Clip is a small set of features from your
    app that can be discovered and used without the user having your app installed.
    Users can open your App Clip by using different triggers, such as QR codes, NFC
    tags, links in Messages, places in Maps, and Smart Banners in websites. The App
    Clip will pop up on the user''s home screen as an overlay called an App Clip Card.
    The App Clip Card describes what your App Clip does so that the user can choose
    to either open and use the App Clip or dismiss it. Let''s look at an example of
    what an App Clip Card looks like:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**App Clips** 允许用户以快速和轻量级的方式发现应用。使用App Clips，用户可以快速使用您应用的功能，而无需在他们的手机上安装应用。App
    Clip是从您的应用中提取的一小部分功能，用户可以在不安装您的应用的情况下发现和使用。用户可以通过不同的触发器打开您的App Clip，例如二维码、NFC标签、消息中的链接、地图中的位置和网站中的智能横幅。App
    Clip将以App Clip Card的形式出现在用户的首页上。App Clip Card描述了您的App Clip的功能，以便用户可以选择打开和使用App
    Clip或将其关闭。让我们看看App Clip Card的样子：'
- en: '![Figure 14.1 – App Clip Card'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.1 – App Clip Card'
- en: '](img/Figure_14.01_B14717.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.1 – App Clip Card'
- en: Figure 14.1 – App Clip Card
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.1 – App Clip Card
- en: 'As shown in the preceding screenshot, an App Clip Card is an overlay on the
    user''s home screen that displays the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，App Clip Card是用户首页上的一个叠加层，显示以下内容：
- en: '**A header image, describing your app or the App Clip''s main feature**: In
    this example, the header image is of someone preparing a coffee.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一个标题图片，描述您的应用或App Clip的主要功能**：在这个例子中，标题图片是有人在准备咖啡。'
- en: '**A title, describing what the App Clip does**: "Mamine Café".'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一个标题，描述App Clip的功能**："Mamine Café"。'
- en: '**A subtitle, describing what feature the App Clip offers**: "Order coffee
    in 3 taps".'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一个副标题，描述App Clip提供的功能**："三指点单咖啡"。'
- en: '**A button, describing the action to be performed (such as open/view the App
    Clip)**: "View".'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一个按钮，描述要执行的操作（例如打开/查看App Clip）**："查看"。'
- en: '**Extra info footer**: The App Clip''s main app. A link is provided to the
    App Store so that the user can download it.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**额外信息页脚**：App Clip的主应用。提供了一个链接到App Store，以便用户可以下载它。'
- en: 'App Clips should be lightweight, brief, and complete a user''s task in seconds.
    Let''s take a look at some use cases of App Clips:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: App Clips应该是轻量级的、简短的，并在几秒钟内完成用户的任务。让我们看看一些App Clip的使用案例：
- en: An App Clip for ordering coffee when you pass by a coffee shop's door and tap
    on an NFC tag, such as the one shown in the preceding screenshot.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您经过咖啡店门口并轻触NFC标签时，例如前面截图所示，一个用于订购咖啡的App Clip。
- en: An App Clip for renting an electric bike parked in the street, just by scanning
    its QR code. You can also use **Sign in with Apple and Apple Pay** to avoid forms
    and interface complexities, allowing you to rent the bike in seconds.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个App Clip，只需扫描停在街上的电动自行车的二维码即可租赁。您还可以使用**使用Apple ID登录和Apple Pay**来避免填写表格和界面复杂性，让您在几秒钟内就能租赁自行车。
- en: An App Clip for pre-ordering from the menu of a restaurant, saving you time
    while you're waiting to be seated.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个App Clip，您可以在等待入座时从餐厅菜单中预订单餐，节省您的时间。
- en: An App Clip that triggers when you tap around NFC spots in an art gallery or
    a museum so that Augmented Reality scenes are displayed on your iPhone.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你在艺术画廊或博物馆的NFC热点周围轻触时，会触发App Clip，以便在您的iPhone上显示增强现实场景。
- en: As you can see, the possibilities for App Clips are endless. Now that we have
    covered what an App Clip is, we are going to explain the user's journey of using
    an App Clip (from its invocation to when it's finally used). We will cover various
    invocation methods (how to make an App Clip appear) before describing the recommended
    guidelines for building an App Clip.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，App Clips的可能性是无限的。现在我们已经介绍了什么是App Clip，我们将解释用户使用App Clip的旅程（从其调用到最终使用）。在描述构建App
    Clip的推荐指南之前，我们将涵盖各种调用方法（如何使App Clip出现）。
- en: App Clip User Journey
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: App Clip用户旅程
- en: Now, let's explore the whole App Clip process and steps in more detail, starting
    from when the user discovers your App Clip to when the user finishes their App
    Clip journey.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更详细地探索整个App Clip流程和步骤，从用户发现您的App Clip开始，到用户完成他们的App Clip之旅。
- en: 'Let''s imagine that we have an app for renting electric bikes. There are several
    stages involved in the App Clip process:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们假设我们有一个租赁电动自行车的应用程序。App Clip流程涉及几个阶段：
- en: '![Figure 14.2 – App Clip process and steps'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.2 – App Clip流程和步骤](img/Figure_14.02_B14717.jpg)'
- en: '](img/Figure_14.02_B14717.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_14.02_B14717.jpg](img/Figure_14.02_B14717.jpg)'
- en: Figure 14.2 – App Clip process and steps
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.2 – App Clip流程和步骤
- en: 'The preceding image explains the different stages of an App Clip:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张图片解释了App Clip的不同阶段：
- en: '**Invocation method**: The App Clip invocation method is how the user can trigger
    and open an App Clip. For our example, a user scans a QR code that''s been placed
    on the bike with their device''s camera, and the App Clip opens on their home
    screen. In this case, the invocation method is the QR code. We will explore these
    in more detail later in this chapter.'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**调用方法**：App Clip调用方法是用户如何触发和打开App Clip的方式。在我们的例子中，用户使用他们的设备摄像头扫描放置在自行车上的二维码，App
    Clip就会在他们的主屏幕上打开。在这种情况下，调用方法是二维码。我们将在本章后面更详细地探讨这些内容。'
- en: '**User journey**: After invocation, the App Clip presents some options for
    the user to choose from (for example, 1-hour rental for $2 and 24-hour rental
    for $5). The user makes their desired selection inside the App Clip.'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**用户旅程**：在调用之后，App Clip会向用户提供一些选项供他们选择（例如，1小时租赁2美元，24小时租赁5美元）。用户在App Clip内进行他们想要的选项。'
- en: '**Accounts and payment**: In our bike rental example, our App Clip needs to
    identify which user is renting the bike, and the user needs to pay for the service.
    Some App Clips will not require a registered user account nor payment to work;
    this step is optional.'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**账户和支付**：在我们的自行车租赁示例中，我们的App Clip需要识别哪个用户在租赁自行车，并且用户需要为这项服务付费。一些App Clip可能不需要注册用户账户或支付即可工作；这一步是可选的。'
- en: '**Full app recommendation**: When the rental decision for the bike has been
    made and the user is ready to proceed, your App Clip can recommend that the user
    downloads your complete app so that they can use it instead of the App Clip the
    next time they wish to use your service. Suggesting the entire app is an optional
    step, but it is recommended.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**完整应用推荐**：当做出自行车租赁的决定并且用户准备继续时，您的App Clip可以建议用户下载您的完整应用，这样他们下次使用您的服务时就可以使用它而不是App
    Clip。建议整个应用是一个可选步骤，但建议这样做。'
- en: Now that we have provided an overview of the high-level steps an App Clip follows,
    we will take a closer look at what invocation methods are available.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经概述了App Clip遵循的高级步骤，我们将更仔细地查看可用的调用方法。
- en: App Clips Invocation Methods
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: App Clips调用方法
- en: 'We have seen that in order to display an App Clip, the user needs to invoke
    or discover it. Previously, we discussed that this can be done via a QR code,
    an NFC tag, a link in Messages, and so on. Here is a summary of the options available:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到，为了显示 App Clip，用户需要调用或发现它。之前，我们讨论了这可以通过二维码、NFC 标签、消息中的链接等方式完成。以下是可用选项的总结：
- en: '**App Clip codes**: Each App Clip code includes a QR code and an NFC tag so
    that a user can scan it with their camera or tap on it.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**App Clip 代码**：每个 App Clip 代码都包含一个二维码和一个 NFC 标签，以便用户可以使用他们的相机扫描它或点击它。'
- en: '**NFC tags**.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NFC 标签**。'
- en: '**QR codes**.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**二维码**。'
- en: '**Safari App Banner**.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Safari App 标签**。'
- en: '**Links in Messages**.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消息中的链接**。'
- en: '**Place cards in Maps**.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在地图中放置卡片**。'
- en: '**The Recently Used App Clips category on the new App Library on iOS 14**.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**iOS 14 新的 App Library 中的“最近使用过的 App Clips”类别**。'
- en: In this section, we learned what an App Clip is, what the user's journey is
    when they're using it, and the different invocation methods that can be used to
    trigger it. In the next section, we are going to build and configure an App Clip
    for a coffee shop.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了什么是 App Clip，当用户使用它时他们的旅程是什么，以及可以用来触发它的不同调用方法。在下一节中，我们将为咖啡店构建和配置一个
    App Clip。
- en: Developing your first App Clip
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发您的第一个 App Clip
- en: 'In this section, we are going to start with an existing app, and we will add
    an App Clip to it step by step. Open the `AppClipExample_start` project in this
    book''s code bundle. If you launch the app, you will see that we have a coffee
    shop app in which we can order three different types of drinks, review the order,
    and pay by Apple Pay or by entering our credit card details:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将从一个现有的应用开始，并逐步向其中添加 App Clip。打开本书代码包中的 `AppClipExample_start` 项目。如果您启动该应用，您将看到我们有一个咖啡店应用，我们可以订购三种不同类型的饮料，查看订单，并通过
    Apple Pay 或输入我们的信用卡详细信息进行支付：
- en: '![Figure 14.3 – Our app''s main screens – Menu, Payment, and Credit Card controllers'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 14.3 – 我们应用的主要屏幕 – 菜单、支付和信用卡控制器'
- en: '](img/Figure_14.03_B14717.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_14.03_B14717.jpg](img/Figure_14.03_B14717.jpg)'
- en: Figure 14.3 – Our app's main screens – Menu, Payment, and Credit Card controllers
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 14.3 – 我们应用的主要屏幕 – 菜单、支付和信用卡控制器
- en: 'Note that the purpose of this example app is to help us build the interesting
    part: the App Clip. Some functionalities, such as the credit card and Apple Pay
    payments, are not fully implemented; they just simulate this feature.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这个示例应用的目的是帮助我们构建有趣的部分：App Clip。一些功能，如信用卡和 Apple Pay 支付，并未完全实现；它们只是模拟了这个功能。
- en: 'Before we jump into the App Clip process, let''s take a moment to review the
    project''s structure and its contents:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们跳入 App Clip 流程之前，让我们花一点时间来回顾一下项目的结构和内容：
- en: '![Figure 14.4 – Initial project structure'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 14.4 – 初始项目结构'
- en: '](img/Figure_14.04_B14717.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_14.04_B14717.jpg](img/Figure_14.04_B14717.jpg)'
- en: Figure 14.4 – Initial project structure
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 14.4 – 初始项目结构
- en: The app contains a single target named `AppClipExample`. Inside that target,
    we have three `ViewControllers` (`MenuViewController`, `PaymentViewController`,
    and `CreditCardViewController`) and some extra views (`MenuView` and `MenuItemButton`).
    It only contains a single model file named `Item`, which helps us with the menu
    products. We also have other common files, such as `AppDelegate` and `Assets`
    – short and simple. However, it is important to have a snapshot of this in mind
    because when we start adding our App Clip, this architecture will evolve.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用包含一个名为 `AppClipExample` 的单一目标。在该目标内部，我们拥有三个 `ViewControllers`（`MenuViewController`、`PaymentViewController`
    和 `CreditCardViewController`）以及一些额外的视图（`MenuView` 和 `MenuItemButton`）。它仅包含一个名为
    `Item` 的单一模型文件，该文件帮助我们处理菜单产品。我们还有其他一些常见文件，例如 `AppDelegate` 和 `Assets` – 简短且简单。然而，重要的是要记住这一点，因为当我们开始添加我们的
    App Clip 时，这种架构将会演变。
- en: 'Before we continue, ensure that you''re using your own Apple Developer account
    settings in the project. In the `AppClipExample` target, do the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，请确保您在项目中使用的是您自己的 Apple 开发者账户设置。在 `AppClipExample` 目标中，执行以下操作：
- en: Select your own Development Team.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您自己的开发团队。
- en: Change the App ID to `{yourDomain}.AppClipExample`.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 App ID 更改为 `{yourDomain}.AppClipExample`。
- en: In the next section, we'll create the App Clip for our coffee shop app. We will
    start by creating a new Target for the App Clip. Then, we will learn how to share
    code and images between our app and its App Clip (as well as how to create exceptions
    for when we don't want to share the exact same code). Finally, we will learn how
    to configure the App Clip's experiences in App Store Connect before testing it
    out.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将为我们的咖啡店应用创建 App Clip。我们将首先为 App Clip 创建一个新的目标。然后，我们将学习如何在我们的应用和其 App
    Clip 之间共享代码和图像（以及如何在不想共享完全相同的代码时创建异常）。最后，在测试之前，我们将学习如何在 App Store Connect 中配置
    App Clip 的体验。
- en: Creating the App Clip's Target
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 App Clip 的目标
- en: 'In order to create an App Clip, an Xcode project needs to have a target for
    it. Currently, our project has a single target: `AppClipExample`. Let''s proceed
    and create a new target for the App Clip. Follow these steps:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建 App Clip，Xcode 项目需要为其创建一个目标。目前，我们的项目只有一个目标：`AppClipExample`。让我们继续创建一个用于
    App Clip 的新目标。按照以下步骤操作：
- en: In Xcode, click on **File | New | Target**.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Xcode 中，点击**文件 | 新建 | 目标**。
- en: In the modal that appears, select **iOS | Application | App Clip**, as shown
    in the following screenshot:![Figure 14.5 – Adding an App Clip target
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的模态窗口中，选择**iOS | 应用 | App Clip**，如图所示：![图 14.5 – 添加 App Clip 目标
- en: '](img/Figure_14.05_B14717.jpg)'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_14.05_B14717.jpg)'
- en: Figure 14.5 – Adding an App Clip target
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.5 – 添加 App Clip 目标
- en: Press **Next**. Now, you can configure some of the initial values of the App
    Clip target.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按**下一步**。现在，你可以配置 App Clip 目标的一些初始值。
- en: Enter the name `MyAppClip`, as follows:![Figure 14.6 – App Clip target options
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式输入名称 `MyAppClip`：![图 14.6 – App Clip 目标选项
- en: '](img/Figure_14.06_B14717.jpg)'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_14.06_B14717.jpg)'
- en: Figure 14.6 – App Clip target options
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.6 – App Clip 目标选项
- en: When you click **Finish**, you will see a new popup:![Figure 14.7 – Activating
    the new scheme
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你点击**完成**时，你会看到一个新弹窗：![图 14.7 – 激活新方案
- en: '](img/Figure_14.07_B14717.jpg)'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_14.07_B14717.jpg)'
- en: Figure 14.7 – Activating the new scheme
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.7 – 激活新方案
- en: 'Press **Activate** so that the scheme can used for building and debugging.
    Now, take a look at the project structure; you''ll see that a new target has been
    added for the App Clip:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按**激活**，以便该方案可用于构建和调试。现在，看看项目结构；你会看到为 App Clip 添加了一个新的目标：
- en: '![Figure 14.8 – New target for the App Clip'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.8 – App Clip 的新目标'
- en: '](img/Figure_14.08_B14717.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_14.08_B14717.jpg)'
- en: Figure 14.8 – New target for the App Clip
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.8 – App Clip 的新目标
- en: 'But this is not the only change that''s been made to the project. Xcode did
    several things under the hood when it added the new App Clip target:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 但这并不是对项目所做的唯一更改。当 Xcode 添加新的 App Clip 目标时，在幕后做了几件事情：
- en: It created a new scheme for building and running the App Clip and its tests.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它为构建和运行 App Clip 及其测试创建了一个新的方案。
- en: It added a new capability called **On Demand Install Capable** in the **App
    Clip Target settings | Signing & Capabilities** tab. This capability identifies
    the bundle as an App Clip.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在**App Clip 目标设置 | 签名与能力**选项卡中添加了一个名为**按需安装能力**的新功能。此功能将捆绑标识为 App Clip。
- en: In the same tab, you can also check how the Bundle identifier for the App Clip
    contains the same root as the full app's bundle identifier. So, if your app bundle
    identifier is `{yourDomain}.AppClipExample`, the App Clip will have `{yourDomain}.AppClipExample.Clip`.
    This is because an App Clip only corresponds to one parent app, so they share
    part of the bundle identifier.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在同一选项卡中，你还可以检查 App Clip 的 Bundle 标识符是否包含与完整应用的 Bundle 标识符相同的根。因此，如果你的应用 Bundle
    标识符是 `{yourDomain}.AppClipExample`，则 App Clip 将具有 `{yourDomain}.AppClipExample.Clip`。这是因为
    App Clip 只对应一个父应用，因此它们共享部分 Bundle 标识符。
- en: 'It also added `_XCAppClipURL`. If you edit the scheme of the App Clip, you
    will see an environment variable with that name. The default value is `https://example.com`.
    But in order to activate it, you need to activate the checkbox near the name of
    the variable. When activated, the App Clip will receive this URL as part of `scene(_
    scene: UIScene, continue userActivity: NSUserActivity)` on launch so that you
    can test the flows that you want to trigger, depending on the URLs that are received.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '它还添加了 `_XCAppClipURL`。如果你编辑 App Clip 的方案，你会看到一个名为该名称的环境变量。默认值是 `https://example.com`。但是，为了激活它，你需要激活变量名称附近的选择框。激活后，App
    Clip 将在启动时作为 `scene(_ scene: UIScene, continue userActivity: NSUserActivity)`
    的一部分接收此 URL，以便你可以测试你想要触发的流程，具体取决于接收到的 URL。'
- en: 'Apart from this, Xcode also created a new build phase for your main app target
    that embeds the App Clip inside it:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Xcode 还为你的主应用目标创建了一个新的构建阶段，该阶段将 App Clip 内嵌其中：
- en: '![Figure 14.9 – Embed App Clip build phase'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.9 – 内嵌 App Clip 构建阶段'
- en: '](img/Figure_14.09_B14717.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_14.09_B14717.jpg)'
- en: Figure 14.9 – Embed App Clip build phase
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.9 – 内嵌 App Clip 构建阶段
- en: So, as you can see, even though creating the App Clip's target is relatively
    straightforward, there is a lot going on under the hood. Now you know all the
    bits. Let's launch the App Clip on the iOS simulator (remember to select the `MyAppClip`
    App Clip target when launching it). You will see a blank screen. This is fine
    – we still need to add some code and prepare our App Clip! We'll do this in the
    next section.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，正如你所见，尽管创建 App Clip 的目标是相对直接的，但在其内部还有很多事情在进行。现在你已经知道了所有细节。让我们在 iOS 模拟器上启动
    App Clip（记得在启动时选择 `MyAppClip` App Clip 目标）。你将看到一个空白屏幕。这是正常的——我们仍然需要添加一些代码并准备我们的
    App Clip！我们将在下一节中这样做。
- en: Sharing resources and code with the App Clip
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与 App Clip 共享资源和代码
- en: App Clips usually need to reuse code and resources from your main app. They
    typically consist of some of the features that conform to the entire app. In our
    case, we are going to create an App Clip that shows everything in our main app,
    but not the credit card screen. In order to provide a fast and easy App Clip experience,
    we will only allow our users to view the menu, review their order, and pay with
    Apple Pay; we don't want them to input any credit card details inside the App
    Clip.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: App Clips 通常需要从主应用中重用代码和资源。它们通常包含符合整个应用的一些功能。在我们的案例中，我们将创建一个显示主应用中所有内容的 App
    Clip，但不包括信用卡屏幕。为了提供一个快速且易于使用的 App Clip 体验，我们只允许用户查看菜单、查看他们的订单并使用 Apple Pay 支付；我们不希望他们在
    App Clip 中输入任何信用卡详情。
- en: 'Let''s consider every file and resource that we need from the main app and
    add them to the target of the App Clip. Let''s start with the assets. Follow these
    steps:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑从主应用中需要的所有文件和资源，并将它们添加到 App Clip 的目标中。让我们从资产开始。按照以下步骤操作：
- en: From the project navigator, click on the `Assets.xcassets` file, and in the
    `Assets` file for both the app and the App Clip, you can delete the `Assets` file
    inside the `MyAppClip` folder. Otherwise, you will have two `AppIcon` references
    (one inside each asset file), and you will get a compile error:![Figure 14.11
    – Deleting the second Assets file inside MyAppClip
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中，点击 `Assets.xcassets` 文件，并在应用和 App Clip 的 `Assets` 文件中，你可以删除 `MyAppClip`
    文件夹内的 `Assets` 文件。否则，你将有两个 `AppIcon` 引用（每个资产文件中各一个），你将得到一个编译错误：![图 14.11 – 删除
    MyAppClip 内部的第二个 Assets 文件
- en: '](img/Figure_14.11_B14717.jpg)'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_14.11_B14717.jpg)'
- en: Figure 14.11 – Deleting the second Assets file inside MyAppClip
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.11 – 删除 MyAppClip 内部的第二个 Assets 文件
- en: 'It is also a good practice to move the main app''s `Assets` file to the top
    of the project and rename it `SharedAssets`. This lets other developers know that
    the file applies to both targets:'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将主应用的 `Assets` 文件移动到项目顶部并重命名为 `SharedAssets` 也是一个好的实践。这样做可以让其他开发者知道该文件适用于所有目标：
- en: '![Figure 14.12 – SharedAssets on top of the project'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 14.12 – 项目顶部的 SharedAssets'
- en: '](img/Figure_14.12_B14717.jpg)'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_14.12_B14717.jpg)'
- en: Figure 14.12 – SharedAssets on top of the project
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.12 – 项目顶部的 SharedAssets
- en: Once you've made these changes, make sure you can build and compile both targets;
    that is, the app and the App Clip.
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦你做了这些更改，确保你可以构建和编译这两个目标；也就是说，应用和 App Clip。
- en: Now, let's include the App Clip target, as well as the code that we need. Previously,
    we mentioned that we want to have the same functionalities that can be found in
    the main app, except for the credit card screen.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，让我们包括 App Clip 目标以及我们需要的所有代码。之前我们提到，我们想要在主应用中找到的相同功能，除了信用卡屏幕。
- en: In the project navigator, select the following files and add them to the App
    Clip target:![Figure 14.13 – Sharing code files with the App Clip target
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中，选择以下文件并将它们添加到 App Clip 目标中：![图 14.13 – 与 App Clip 目标共享代码文件
- en: '](img/Figure_14.13_B14717.jpg)'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_14.13_B14717.jpg)'
- en: Figure 14.13 – Sharing code files with the App Clip target
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.13 – 与 App Clip 目标共享代码文件
- en: Notice how we shared all the files inside the `ViewController`, `Views`, and
    `Model` folders, except for `CreditCardViewController`.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意我们如何在 `ViewController`、`Views` 和 `Model` 文件夹中共享所有文件，除了 `CreditCardViewController`。
- en: 'You have now shared all the images and code that your App Clip will need. However,
    you still need to reuse some content: the storyboard flow.'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你现在已经共享了 App Clip 所需的所有图像和代码。然而，你仍然需要重用一些内容：故事板流程。
- en: Go ahead and open the `Main.storyboard` file in your `AppClipExample` target.
    Zoom out a bit and select everything except for `CreditCardViewController` (we
    don't want that one in our App Clip):![Figure 14.14 – Copying the contents of
    the Main.storyboard file of your App
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的 `AppClipExample` 目标中的 `Main.storyboard` 文件。稍微缩小一下，选择除了 `CreditCardViewController`
    之外的所有内容（我们不希望在 App Clip 中包含这个）：![图 14.14 – 复制你的 App 的 Main.storyboard 文件内容
- en: '](img/Figure_14.14_B14717.jpg)'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_14.14_B14717.jpg)'
- en: Figure 14.14 – Copying the contents of the Main.storyboard file of your App
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.14 – 复制你的 App 的 Main.storyboard 文件内容
- en: Once you've copied the elements highlighted in the previous screenshot, go ahead
    and paste them into the `Main.storyboard` file of your **MyAppClip** target.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在复制了上一张截图中的高亮元素之后，将它们粘贴到你的 **MyAppClip** 目标的 `Main.storyboard` 文件中。
- en: Now, select the **Navigation Controller** option and in the **Options** panel
    on the right, check the **Is Initial View Controller** option:![Figure 14.15 –
    Assigning the entry point for your App Clip
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，选择 **Navigation Controller** 选项，并在右侧的 **Options**（选项）面板中勾选 **Is Initial View
    Controller**（是否为初始视图控制器）选项：![图 14.15 – 为你的 App Clip 指定入口点
- en: '](img/Figure_14.15_B14717.jpg)'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_14.15_B14717.jpg)'
- en: Figure 14.15 – Assigning the entry point for your App Clip
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.15 – 为你的 App Clip 指定入口点
- en: Now, you have enough code, resources, and flow in your App Clip to try it out.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，你的 App Clip 已经有了足够的代码、资源和流程，可以尝试运行它。
- en: Select the **MyAppClip** target and launch it. It should compile and run without
    any issues at this point.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **MyAppClip** 目标并启动它。此时应该没有问题地编译和运行。
- en: However, there is a problem. If you launch the App Clip and order an item, you
    will notice that we are still showing the **Pay with Credit Card** button. Previously,
    we mentioned that we want our App Clip to just use Apple Pay in order to streamline
    the service, as per Apple's recommendations. In the next section, we will achieve
    this by learning how to conditionally use parts of our code, depending on which
    target is executing it, using Active Compilation Conditions.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，存在问题。如果你启动 App Clip 并下单，你会注意到我们仍然显示了 **使用信用卡支付** 按钮。之前我们提到，我们希望我们的 App Clip
    只使用 Apple Pay 来简化服务，正如苹果公司的建议。在下一节中，我们将通过学习如何使用 Active Compilation Conditions
    有条件地使用代码的一部分，根据执行它的目标来达到这一点。
- en: Using Active Compilation Conditions
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用活动编译条件
- en: In the previous section, we learned how to share code and assets between our
    app and App Clip. This time, we need to "remove" some pieces of code when the
    App Clip is executing specific files. Specifically, we want to hide the `PaymentViewController`
    when the App Clip executes it.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们学习了如何在应用和 App Clip 之间共享代码和资源。这次，当 App Clip 执行特定文件时，我们需要“删除”一些代码。具体来说，我们希望在
    App Clip 执行时隐藏 `PaymentViewController`。
- en: 'To do this, we need to work with Active Compilation Conditions. Follow these
    steps:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，我们需要与 Active Compilation Conditions（活动编译条件）一起工作。按照以下步骤操作：
- en: In the `APPCLIP` to the list, as shown in the following screenshot:![Figure
    14.16 – Adding Active Compilation Conditions
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `APPCLIP` 列表中，如图下所示截图所示：![图 14.16 – 添加活动编译条件
- en: '](img/Figure_14.16_B14717.jpg)'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_14.16_B14717.jpg)'
- en: Figure 14.16 – Adding Active Compilation Conditions
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.16 – 添加活动编译条件
- en: 'With the `APPCLIP` flag set, go ahead and open the `PaymentViewController`
    file. Add the following code at the end of the `viewDidLoad()` method:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置了 `APPCLIP` 标志后，继续打开 `PaymentViewController` 文件。在 `viewDidLoad()` 方法的末尾添加以下代码：
- en: '[PRE0]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: With this piece of code, we are telling the compiler to only add this line when
    we are executing the App Clip target.
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过这段代码，我们告诉编译器，只有在我们执行 App Clip 目标时，才添加这一行。
- en: 'Let''s try this out. Execute the app and the App Clip and compare both screens.
    When the App Clip launches, you should not see the **Pay with Credit Card** button:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们试一试。执行应用和 App Clip，比较两个屏幕。当 App Clip 启动时，你不应该看到 **使用信用卡支付** 按钮：
- en: '![Figure 14.17 – App Clip (left) versus app (right)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.17 – App Clip（左侧）与 app（右侧）对比'
- en: '](img/Figure_14.17_B14717.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_14.17_B14717.jpg)'
- en: Figure 14.17 – App Clip (left) versus app (right)
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.17 – App Clip（左侧）与 app（右侧）对比
- en: As you can see, we have achieved our goal of showing different parts of the
    UI by using Active Compilation Conditions.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们通过使用 Active Compilation Conditions 实现了显示 UI 不同部分的目标。
- en: 'This is great! We have a perfectly configured App Clip that runs and shows
    the user what we wanted them to see. In the next section, we are going to jump
    into a critical part of this process: invoking the App Clip.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这太好了！我们已经配置了一个完美的 App Clip，它可以运行并显示我们希望用户看到的内容。在下一节中，我们将深入到这个过程的关键部分：调用 App
    Clip。
- en: Configuring, linking, and triggering your App Clip
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置、链接和触发您的 App Clip
- en: In this section, and with the App Clip ready to roll, we are going to learn
    how to configure, link, and trigger the App Clip.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，随着 App Clip 准备就绪，我们将学习如何配置、链接和触发 App Clip。
- en: 'Users can trigger an App Clip by using various invocations, some of which are
    as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以通过使用各种调用来触发 App Clip，以下是一些示例：
- en: Scanning an NFC tag or visual code at a physical location
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扫描物理位置处的 NFC 标签或视觉代码
- en: Tapping a location-based suggestion from Siri Suggestions
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Siri 建议（基于位置的建议）中轻触
- en: Tapping a link in the Maps app
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Maps 应用中轻触链接
- en: Tapping a Smart App Banner on a website
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在网站上轻触智能应用横幅
- en: Tapping a link that someone shared in the Messages app (as a text message only)
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Messages 应用中轻触某人分享的链接（仅作为文本消息）
- en: To ensure these invocations work, you must configure your App Clip for link
    handling and also configure the App Store's Connect App Clip Experiences. We will
    go through this now.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保这些调用能够正常工作，您必须配置 App Clip 以处理链接，并且还需要配置 App Store 的 Connect App Clip Experiences。我们现在就来完成这项工作。
- en: Important Note
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: When users install an App Clip's corresponding app, the full app replaces the
    App Clip. Every invocation from that moment on launches the full app instead of
    the App Clip. As a result, your full app must handle all possible invocations
    and offer the App Clip's functionality.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户安装 App Clip 对应的应用时，完整的应用将替换 App Clip。从那时起，所有的调用都将启动完整的应用而不是 App Clip。因此，您的完整应用必须处理所有可能的调用并提供
    App Clip 的功能。
- en: 'An App Clip needs an entry point for users to be able to discover and launch
    it. We are going to review three topics in this section:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: App Clip 需要一个入口点，以便用户能够发现和启动它。在本节中，我们将回顾三个主题：
- en: Configuring link handling
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置链接处理
- en: Configuring App Clip experiences
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 App Clip 体验
- en: Configuring a Smart App Banner
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置智能应用横幅
- en: By the end of this section, our project will have a fully configured App Clip
    ready to go. Let's get started!
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 到本节结束时，我们的项目将有一个完全配置好的 App Clip 准备就绪。让我们开始吧！
- en: Configuring link handling
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置链接处理
- en: Our first step is to configure our web server and App Clip for link handling.
    You can use the project in the code bundle for this chapter named `AppClipExample_configure_start`
    to help with this.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一步是配置我们的 Web 服务器和 App Clip 以处理链接。您可以使用本章代码包中的项目 `AppClipExample_configure_start`
    来帮助完成这项工作。
- en: 'If you want to be able to display your App Clip on your website, you need to
    perform the following steps:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在您的网站上显示您的 App Clip，您需要执行以下步骤：
- en: Configure the `apple-app-site-association` file on your web server.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的 Web 服务器上配置 `apple-app-site-association` 文件。
- en: Add associated domains entitlement to your App Clip.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向您的 App Clip 添加关联域名权限。
- en: Handle `NSUserActivity` in your App Clip.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的 App Clip 中处理 `NSUserActivity`。
- en: 'First, let''s configure the `apple-app-site-association` file, as follows:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们按照以下方式配置 `apple-app-site-association` 文件：
- en: '[PRE1]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This file should be located in the root folder of your server. If you have set
    up universal links, you should have this file already. You need to add the highlighted
    code to it so that you can reference your App Clip. Remember to use your own Application
    Identifier Prefix and bundle identifier.
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此文件应位于服务器的根目录中。如果您已经设置了通用链接，那么您应该已经有这个文件了。您需要向其中添加高亮显示的代码，以便您能够引用您的 App Clip。请记住使用您自己的应用程序标识前缀和包标识符。
- en: Next, let's add the associated domains entitlement. In the **Project Navigator**
    window, select the project and the App Clip target and go to **Signing & Capabilities**:![Figure
    14.18 – Signing & Capabilities
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们添加关联域名权限。在 **项目导航器** 窗口中，选择项目和 App Clip 目标，然后转到 **签名与能力**：![Figure_14.18
    – 签名与能力
- en: '](img/Figure_14.18_B14717.jpg)'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![Figure_14.18_B14717.jpg]'
- en: Figure 14.18 – Signing & Capabilities
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.18 – 签名与能力
- en: Next, add a new associated domain, as shown in the following screenshot:![Figure
    14.19 – Adding an associated domain
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加一个新的关联域名，如图中所示：![Figure_14.19 – 添加关联域名
- en: '](img/Figure_14.19_B14717.jpg)'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![Figure_14.19_B14717.jpg]'
- en: Figure 14.19 – Adding an associated domain
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.19 – 添加关联域名
- en: Now that your server and App Clip have been configured, let's handle `NSUserActivity`.
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在您的服务器和 App Clip 已经配置好了，让我们来处理 `NSUserActivity`。
- en: 'Go ahead and edit the App Clip scheme. Under `_XCAppClipURL` variable and assign
    it the following value: `https://myappclip.com/test?param=value`.'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续编辑 App Clip 方案。在 `_XCAppClipURL` 变量下，将其分配以下值：`https://myappclip.com/test?param=value`。
- en: With this value set, let's learn how to process it.
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用这个值设置，让我们学习如何处理它。
- en: 'Inside the `SceneDelegate.swift` file. Add the following implementations:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `SceneDelegate.swift` 文件中。添加以下实现：
- en: '[PRE2]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'These two methods are handling the `NSUserActivity` information that your App
    Clip will receive when it is triggered by an URL-type element. See how, in the
    `scene(…)` method, we are checking that the activity is of the `NSUserActivityTypeBrowsingWeb`
    type and that we then examine the `URL`, `path`, and `components` elements. Here,
    you can navigate your App Clip to the correct element. If you launch the App Clip
    and check the console''s output, you will see this:'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这两种方法正在处理当 App Clip 被URL类型的元素触发时将接收到的 `NSUserActivity` 信息。看看在 `scene(…)` 方法中，我们是如何检查活动是否为
    `NSUserActivityTypeBrowsingWeb` 类型，然后检查 `URL`、`path` 和 `components` 元素。在这里，你可以将你的
    App Clip 导航到正确的元素。如果你启动 App Clip 并检查控制台的输出，你会看到这个：
- en: '[PRE3]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, we are handling the test URL that has been defined in the `_XCAppClipURL`
    target environment variable and extracting the required path and components from
    it. When you want to handle different flows in your App Clip based on the incoming
    URL, you can test it like this.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们正在处理在 `_XCAppClipURL` 目标环境变量中定义的测试 URL，并从中提取所需的路径和组件。当你想根据传入的 URL 在你的
    App Clip 中处理不同的流程时，你可以这样测试。
- en: 'If your app has been built with SwiftUI, then you can handle it like this:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用是用 SwiftUI 构建的，那么你可以这样处理：
- en: '[PRE4]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: By defining `onContinueUserActivity(NSUserActivityTypeBrowsingWeb)` via `ContentView`,
    you can use the `activity` object that is passed and extract the incoming URL
    from there. By analyzing the URL, you can link to the proper part of your App
    Clip.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在 `ContentView` 中定义 `onContinueUserActivity(NSUserActivityTypeBrowsingWeb)`，你可以使用传递的
    `activity` 对象并从中提取传入的 URL。通过分析 URL，你可以链接到 App Clip 的正确部分。
- en: Now that we have configured our server and App Clip so that they handle links,
    let's continue by configuring our App Clip experiences.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置了我们的服务器和 App Clip 以处理链接，让我们继续配置我们的 App Clip 体验。
- en: Configuring our App Clip experiences
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置我们的 App Clip 体验
- en: 'With the App Clip and your server ready to handle links, we can start configuring
    our App Clip experiences. App Clip experiences are defined in App Store Connect
    and define the App Clip Card and the links for different scenarios that you want
    to handle. An App Clip Card looks like this:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 App Clip 和你的服务器准备好处理链接，我们可以开始配置我们的 App Clip 体验。App Clip 体验在 App Store Connect
    中定义，并定义了 App Clip 卡片和不同场景下你想要处理的链接。App Clip 卡片看起来像这样：
- en: '![Figure 14.20 – App Clip Card'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.20 – App Clip 卡片'
- en: '](img/Figure_14.20_B14717.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_14.20_B14717.jpg)'
- en: Figure 14.20 – App Clip Card
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.20 – App Clip 卡片
- en: 'As shown in the preceding screenshot, the App Clip Card contains the following:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个截图所示，App Clip 卡片包含以下内容：
- en: 'A header image, describing your app or the App Clip''s main feature: In this
    example we display someone preparing a coffee.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个头部图像，描述你的应用或 App Clip 的主要功能：在这个例子中，我们展示了有人在准备咖啡。
- en: 'A title, describing the App Clip name: **Mamine Cafe.**'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个标题，描述 App Clip 的名称：**Mamine Cafe**。
- en: 'A subtitle, describing what feature does the App Clip offer: **Order coffee
    in 3 taps.**'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个副标题，描述 App Clip 提供的功能：**三指点单咖啡**。
- en: 'A button, describing the action to perform (like open-view the App Clip): **View.**'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个按钮，描述要执行的操作（例如打开视图的 App Clip）：**查看**。
- en: 'Extra info footer: The App Clip''s main app and a link to the App Store to
    download it.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 额外信息页脚：App Clip 的主要应用以及一个链接到 App Store 以下载它的链接。
- en: This App Clip Card is what the device will display to the user so that they
    can launch your App Clip. We will configure it in App Store Connect.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 App Clip 卡片是设备将显示给用户以便他们可以启动你的 App Clip 的内容。我们将在 App Store Connect 中进行配置。
- en: 'Once you have created the corresponding app via the App Store Connect website
    and uploaded a build with the App Clip included, you will be able to configure
    your App Clip Experience:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你通过 App Store Connect 网站创建了相应的应用并上传了包含 App Clip 的构建版本，你将能够配置你的 App Clip 体验：
- en: '![Figure 14.21 – App Clip Experience configuration'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.21 – App Clip 体验配置'
- en: '](img/Figure_14.21_B14717.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_14.21_B14717.jpg)'
- en: Figure 14.21 – App Clip Experience configuration
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.21 – App Clip 体验配置
- en: 'As you can see, there are three main things to configure in the default App
    Clip Experience:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在默认的 App Clip 体验中，有三个主要配置项：
- en: '`.png`/`.jpg`. No transparency.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.png`/`.jpg`。无透明度。'
- en: '**A copy of the subtitle**: 43 characters maximum.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**副标题的副本**：最大字符数为 43。'
- en: '**The call to action**: Here, you can choose from Open, View, and Play.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行动号召**：在这里，你可以选择打开、查看和播放。'
- en: 'You can also click on **Edit Advanced Experiences** to configure different
    triggers and flows. If you want to launch your App Clip from NFC tags or visual
    codes, associate your App Clip with a physical location, or create an App Clip
    for multiple businesses to use, then you need Advanced Experiences. First, you
    will need to specify the URL that will trigger the App Clip Experience:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以点击 **编辑高级体验** 来配置不同的触发器和流程。如果您想从 NFC 标签或视觉码启动 App Clip，将您的 App Clip 与物理位置关联，或为多个业务创建
    App Clip，那么您需要高级体验。首先，您需要指定将触发 App Clip 体验的 URL：
- en: '![Figure 14.22 – URL configuration to invoke an App Clip Experience'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.22 – 调用 App Clip 体验的 URL 配置'
- en: '](img/Figure_14.22_B14717.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_14.22_B14717.jpg)'
- en: Figure 14.22 – URL configuration to invoke an App Clip Experience
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.22 – 调用 App Clip 体验的 URL 配置
- en: 'After pressing **Next**, you can configure the App Clip Card:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在按下 **下一步** 后，您可以配置 App Clip 卡：
- en: '![Figure 14.23 – Configuring the advanced App Clip card'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.23 – 配置高级 App Clip 卡'
- en: '](img/Figure_14.23_B14717.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_14.23_B14717.jpg)'
- en: Figure 14.23 – Configuring the advanced App Clip card
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.23 – 配置高级 App Clip 卡
- en: At this point, you can configure the language of the card, and even specify
    whether the experience is triggered at a specific location.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，您可以配置卡的语言，甚至指定体验是否在特定位置触发。
- en: Adding advanced App Clip Experiences allows your App to show different App Clips
    for different URLs. For example, is you have a coffee shop app, you can have an
    App Clip for showing the menu, an App Clip for ordering a coffee straight away,
    an App Clip for displaying your clients' points cards, and so on.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 添加高级 App Clip 体验可以让您的应用针对不同的 URL 显示不同的 App Clip。例如，如果您有一个咖啡店应用，您可以有一个用于显示菜单的
    App Clip，一个用于立即订购咖啡的 App Clip，一个用于显示客户积分卡的 App Clip，等等。
- en: In this section, we learned how to configure an App Clip and its experiences
    in App Store Connect. Now, let's learn how to configure the Smart App Banner so
    that you can trigger a banner on your website so that users can display your app
    and App Clip.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何在 App Store Connect 中配置 App Clip 及其体验。现在，让我们学习如何配置智能应用横幅，以便您可以在网站上触发横幅，让用户显示您的应用和
    App Clip。
- en: Configuring a Smart App Banner
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置智能应用横幅
- en: 'By adding a Smart App Banner to your website, you''re offering your users a
    fast and native way to discover and launch your app. You need to add the following
    meta tag to your website HTML files (where you want the banner to be displayed):'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在您的网站上添加智能应用横幅，您为用户提供了一种快速且原生的方式来发现和启动您的应用。您需要在您的网站 HTML 文件中添加以下元标签（您希望横幅显示的位置）：
- en: '[PRE5]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You need to replace the highlighted values with your own. Also, note that `app-argument`
    is not available when you're launching an App Clip. Remember that you should add
    the domain of any page that displays this banner to the app and your App Clip's
    Associated Domains Entitlements.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要将突出显示的值替换为您自己的。另外，请注意，当您启动 App Clip 时，`app-argument` 不可用。请记住，您应该将显示此横幅的任何页面的域名添加到您的应用和您的
    App Clip 的关联域名权限中。
- en: In this section, we learned how to configure link handling, App Clip Experiences,
    and Smart App Banners. In the next section, we'll how to test our App Clip while
    in development.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何配置链接处理、App Clip 体验和智能应用横幅。在下一节中，我们将学习如何在开发过程中测试我们的 App Clip。
- en: Testing your App Clip Experiences
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试您的 App Clip 体验
- en: 'Once you have finished developing and configuring your App Clip, it is time
    to test everything to double-check that your App Clip Experiences work as expected.
    There are three ways to test your App Clip Experiences:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您完成开发并配置了您的 App Clip，就是时候测试一切，以确保您的 App Clip 体验按预期工作。有三种方法可以测试您的 App Clip
    体验：
- en: By debugging the invocation URL in Xcode (we have seen this throughout this
    chapter, when using `_XCAppClipURL`).
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在 Xcode 中调试调用 URL（我们在这章中已经多次看到，当使用 `_XCAppClipURL` 时）。
- en: By creating an App Clip Experience for testers in TestFlight (so that your App
    is ready for launch and is complete).
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在 TestFlight 中为测试者创建 App Clip 体验（这样您的应用就准备好发布，并且是完整的）。
- en: By creating a local experience on a device and testing invocations from NFC
    or visual codes during development.
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在设备上创建本地体验并在开发过程中测试来自 NFC 或视觉码的调用。
- en: Let's dig deeper into this last point. Let's use the `AppClipExample_test` project
    in this book's code bundle so that we can test our App Clip Experiences on it.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地探讨最后一点。让我们使用本书代码包中的 `AppClipExample_test` 项目，以便我们可以在其上测试我们的 App Clip
    体验。
- en: 'One advantage of testing your App Clip Experiences while in development with
    Local Experiences is that you don''t need to configure your associated domains,
    make changes to your server, or deal with TestFlight. We can do everything locally.
    Let''s get started:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中使用本地体验测试你的应用小部件体验的一个优点是，你不需要配置相关的域名，修改服务器，或处理 TestFlight。我们可以在本地完成所有这些操作。让我们开始吧：
- en: First, build and run your app and App Clip on any device. Then, on the device,
    open **Settings | Developer | Local Experiences** and select **Register Local
    Experience...**:![Figure 14.24 – Local Experiences setup
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在任何设备上构建和运行你的应用和小部件。然后，在设备上，打开 **设置 | 开发者 | 本地体验** 并选择 **注册本地体验...**：![图
    14.24 – 本地体验设置
- en: '](img/Figure_14.24_B14717.jpg)'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_14.24_B14717.jpg)'
- en: Figure 14.24 – Local Experiences setup
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.24 – 本地体验设置
- en: 'Now, you can configure the Local Experience, as shown in the following screenshot.
    Remember to use your own values for the app:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以配置本地体验，如图下所示。请记住，为应用使用自己的值：
- en: '![Figure 14.25 – Local Experience data'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.25 – 本地体验数据'
- en: '](img/Figure_14.25_B14717.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_14.25_B14717.jpg)'
- en: Figure 14.25 – Local Experience data
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.25 – 本地体验数据
- en: To launch the App Clip Card, you can use any tool that allows you to generate
    a QR code or NFC tag with the same URL you specified in the preceding screen (under
    **URL PREFIX**). Upon doing this, your App Clip Card should appear when you scan
    it with your device.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动应用小部件卡片，你可以使用任何允许你生成与上一屏幕（在 **URL 前缀** 下）中指定的相同 URL 的 QR 码或 NFC 标签的工具。完成此操作后，当你用设备扫描时，你的应用小部件卡片应该会出现。
- en: Important Note
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The bundle ID that's defined in Local Experience must match the bundle ID of
    your App Clip.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地体验中定义的捆绑 ID 必须与你的应用小部件的捆绑 ID 匹配。
- en: The App Clip must be installed on the device.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 应用小部件必须在设备上安装。
- en: If the camera app doesn't open the App Clip, try using the QR Code Scanner from
    the Control Center of iOS (if you don't have it, you can add it by going to **Settings
    | Control Center**).
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 如果相机应用没有打开应用小部件，请尝试使用 iOS 控制中心的 QR 码扫描仪（如果你没有，可以通过前往 **设置 | 控制中心** 来添加它）。
- en: In this section, we learned how to configure Local Experiences in order to test
    our App Clip Cards while they're in development. Now, let's wrap up this chapter.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何配置本地体验，以便在开发过程中测试我们的应用小部件卡片。现在，让我们总结本章内容。
- en: Summary
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we reviewed one of the best new features of iOS 14: App Clips.
    We explained what an App Clip is, what the user journey is, which features we
    should focus on when developing an App Clip, and which options are available for
    invoking them.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了 iOS 14 最好的新功能之一：应用小部件。我们解释了什么是应用小部件，用户的旅程是什么，开发应用小部件时应关注哪些功能，以及有哪些选项可以调用它们。
- en: After learning the basics, we developed and configured our first App Clip for
    a coffee shop app. We refactored the project so that we could share code and resources
    between the app and the App Clip. We then learned how to use **Active Compilation
    Conditions** to trigger pieces of our code base, but only for the App Clip or
    the app itself, as well as how to configure our app and server for link handling.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习基础知识后，我们为一家咖啡店应用开发并配置了我们的第一个应用小部件。我们对项目进行了重构，以便在应用和小部件之间共享代码和资源。然后，我们学习了如何使用
    **活动编译条件** 来触发代码库的一部分，但仅限于应用小部件或应用本身，以及如何配置我们的应用和服务器以处理链接。
- en: Finally, we learned how to configure the App Clip Experiences in App Store Connect
    and how to test them while in development.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们学习了如何在 App Store Connect 中配置应用小部件体验，以及如何在开发过程中测试它们。
- en: In the next chapter, you will learn about the Vision Framework.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将了解视觉框架。
