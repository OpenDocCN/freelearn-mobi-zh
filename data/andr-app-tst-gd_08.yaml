- en: Chapter 8. Continuous Integration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章 持续集成
- en: '**Continuous Integration** is one agile technique for software engineering
    that aims to improve the software quality and to reduce the time taken to integrate
    changes by continuously applying integration and testing frequently, opposed to
    the more traditional approach of integrating and testing by the end of the development
    cycle. The original article was written by Martin Fowler back in 2000 ([http://www.martinfowler.com/articles/continuousIntegration.html](http://www.martinfowler.com/articles/continuousIntegration.html)),
    and describes the experience of putting together Continuous Integration on a large
    software project.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续集成**是软件工程中的一种敏捷技术，旨在通过持续应用集成和测试来提高软件质量并减少集成更改所需的时间，这与开发周期结束时进行集成和测试的传统方法形成对比。这篇文章最初由马丁·福勒在2000年撰写([http://www.martinfowler.com/articles/continuousIntegration.html](http://www.martinfowler.com/articles/continuousIntegration.html))，描述了在一个大型软件项目中实施持续集成的经验。'
- en: Continuous Integration has received a broad adoption in recent years, and a
    proliferation of commercial tools and Open Source projects is a clear demonstration
    of its success. That is not very difficult to understand, as anybody who during
    their professional career has participated in a software development project using
    a traditional approach, is very likely to have experienced the so called *integration
    hell*, where the time it takes to integrate the changes exceeds the time it took
    to make the changes. Does this remind you of anything?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，持续集成得到了广泛的应用，商业工具和开源项目的激增清楚地证明了其成功。这一点并不难理解，因为任何在其职业生涯中参与过使用传统方法进行软件开发项目的人，很可能都经历过所谓的“集成地狱”，在那里集成更改所需的时间超过了制作更改所需的时间。这让你想起了什么吗？
- en: On the contrary, Continous Integration is the practice to integrate changes
    frequently and in small steps. These steps are negligible and usually no errors
    as a product of the integration can arise without beign noticed immediately. The
    most common practice is to trigger the build process after every commit to the
    source code repository.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，持续集成是一种频繁且分步骤地集成更改的实践。这些步骤微不足道，通常不会出现错误，因为集成过程中产生的错误通常不会立即被发现。最常见的方法是在每次提交源代码仓库后触发构建过程。
- en: 'This practice also implies other requirements, beside the source code being
    maintained by a Version Control System (VCS):'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这种实践还意味着除了源代码由版本控制系统（VCS）维护之外的其他要求：
- en: Builds should be automated by running a single command. This feature has been
    supported for a very long time by tools like `make` and more recently by `ant`
    and `maven`.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应通过运行单个命令来自动化构建过程。这个特性已经被像`make`这样的工具支持了很长时间，最近也被`ant`和`maven`所支持。
- en: The build should be self tested to confirm that the newly built software meets
    the expectations of the developers, and this has been the subject of this book
    so far.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建过程应该进行自我测试，以确认新构建的软件符合开发者的期望，这一点到目前为止一直是本书的主题。
- en: The artifacts and results of the tests should be easy to find and view.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试的工件和结果应该易于查找和查看。
- en: In previous chapters, we have written some tests for our Android projects and
    now we would like to take Continuous Integration into account. To achieve this
    we want to create a model that coexists with the traditional Eclipse and Android
    ADT environments, so both alternatives are supported from the source tree.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们已经为我们的Android项目编写了一些测试，现在我们希望将持续集成考虑在内。为了实现这一点，我们想要创建一个与传统的Eclipse和Android
    ADT环境共存的模式，因此从源代码树中支持这两种选择。
- en: 'In this chapter we are going to discuss:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论：
- en: Automating the build process
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化构建过程
- en: Introducing Version Control Systems to the process
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将版本控制系统引入流程
- en: Continuous Integration with Hudson
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Hudson进行持续集成
- en: Automating tests
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化测试
- en: After this chapter you will be able to apply Continuous Integration to your
    own project no matter its size, whether it is a medium or large software project
    employing dozens of developers or it is just you programming solo.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章之后，你将能够将持续集成应用于自己的项目，无论其规模大小，无论是拥有数十名开发者的中型或大型软件项目，还是你独自编程的项目。
- en: Building Android applications manually using Ant
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ant手动构建Android应用程序
- en: If we aim to incorporate **Continuous Integration** in our development process,
    the first step will be building Android applications manually, as we can combine
    it with this technique to automate the procedure.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们旨在将**持续集成**纳入我们的开发流程，第一步将是手动构建Android应用程序，因为我们可以将此技术与自动化流程相结合。
- en: In doing this we intend to keep our project compatible with the Eclipse and
    ADT plugin building process, and this is what we are going to do. As I understand,
    this is a great advantage and speeds up the development process by automatically
    building and eventually showing the errors that may exist in your project immediately.
    This is an invaluable tool too when editing resources or other files that generate
    intermediate classes, otherwise some simple errors would be discovered too late
    in the building process.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这样做的时候，我们旨在保持我们的项目与Eclipse和ADT插件构建过程兼容，这正是我们打算做的。据我了解，这是一个巨大的优势，并且通过自动构建并最终显示项目中可能存在的错误来加快开发过程。当编辑资源或其他生成中间类的文件时，这也是一个无价的工具，否则一些简单的错误会在构建过程中太晚被发现。
- en: Fortunately, Android supports this alternative with the existing tooling and
    not much effort is needed to merge both approaches in the same project. In such
    cases, building manually with **ant** is supported. However, other options exist
    too, though not supported *out-of-the-box*, like using **maven** or even **make**.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Android支持这种替代方案，并且不需要太多努力就可以在同一项目中合并这两种方法。在这种情况下，手动使用**ant**进行构建是支持的。然而，也存在其他选项，尽管不是**开箱即用**支持的，例如使用**maven**或甚至**make**。
- en: Note
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Ant is a software command-line tool and a Java library to automate software
    build process by describing it in XML files containing targets and dependencies.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Ant是一个软件命令行工具和Java库，通过在包含目标和依赖关系的XML文件中描述它来自动化软件构建过程。
- en: More information can be found at its home page, [http://ant.apache.org/](http://ant.apache.org/).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息可以在其主页找到，[http://ant.apache.org/](http://ant.apache.org/)。
- en: The Android Ant based build system requires at least Ant 1.8 or newer versions.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Android基于Ant的构建系统需要至少Ant 1.8或更高版本。
- en: Here it is worth noting that the entire Android platform is built by an incredibly
    complex structure of makefiles and this method is used even for building the applications
    that are included by the platform like Calculator, Contacts, Browser, and so on.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这里值得注意，整个Android平台都是由一个极其复杂的makefile结构构建的，这种方法甚至用于构建平台中包含的应用程序，如计算器、联系人、浏览器等。
- en: If you are already building a project with Eclipse, you can convert it using
    the `android` tool. `android` is available in the tools directory of the Android
    SDK. If you are using Microsoft Windows you should adapt the following examples
    to use valid Windows paths and replace the variables that are not available, like
    PWD in the following example, by their values.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经使用Eclipse构建项目，你可以使用`android`工具将其转换。`android`位于Android SDK的工具目录中。如果你使用Microsoft
    Windows，你应该将以下示例调整为使用有效的Windows路径，并用它们的值替换以下示例中不可用的变量。
- en: Firstly, we change our current directory to the project; though not strictly
    necessary, this simplifies things a bit.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将当前目录更改为项目目录；虽然不是强制性的，但这简化了一些事情。
- en: 'Then using the `android` command we convert the project to be built with `ant`
    and the `build.xml` buildfile is created:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用`android`命令，我们将项目转换为使用`ant`构建，并创建`build.xml`构建文件：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is the output obtained:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这是获得的输出：
- en: '**Updated local.properties**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**更新 local.properties**'
- en: '**Added file <path/to>/TemperatureConverter/build.xml**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**添加文件 <path/to>/TemperatureConverter/build.xml**'
- en: '**Updated file <path/to>/TemperatureConverter/proguard.cfg**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**更新文件 <path/to>/TemperatureConverter/proguard.cfg**'
- en: 'Immediately after finishing this step we are ready to build the project manually
    from the command line. This buildfile features the following targets:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此步骤后，我们就可以从命令行手动构建项目了。此构建文件具有以下目标：
- en: '| Target | Description |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| Target | Description |'
- en: '| --- | --- |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| help | Displays a short help. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| help | 显示简短的帮助信息。 |'
- en: '| clean | Removes output files created by other targets. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| clean | 删除由其他目标创建的输出文件。 |'
- en: '| compile | Compiles project''s `.java` files into `.class` files. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| compile | 将项目的`.java`文件编译成`.class`文件。 |'
- en: '| debug | Builds the application and signs it with a debug key. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| debug | 构建应用程序，并使用调试密钥对其进行签名。 |'
- en: '| release | Builds the application. The generated `.apk` file must be signed
    before it is published. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| release | 构建应用程序。在发布之前，必须对生成的`.apk`文件进行签名。 |'
- en: '| install | Installs/reinstalls the debug package onto a running emulator or
    device.If the application was previously installed, the signatures must match.
    |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| install | 将调试包安装/重新安装到运行中的模拟器或设备上。如果应用程序之前已安装，签名必须匹配。|'
- en: '| uninstall | Uninstalls the application from a running emulator or device.
    |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| uninstall | 从运行中的模拟器或设备卸载应用程序。|'
- en: 'Some of these targets operate on a device or emulator. If there are several
    devices or emulators connected to the build machine we need to specify the specific
    target on the command line. For this reason the targets uses a variable named
    `adb.device.arg` for us to specify the target:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些目标在设备或模拟器上操作。如果有多个设备或模拟器连接到构建机器，我们需要在命令行上指定特定的目标。因此，目标使用名为 `adb.device.arg`
    的变量，以便我们指定目标：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is the output generated:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是生成的输出：
- en: '**Buildfile: build.xml**'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**Buildfile: build.xml**'
- en: '**[setup] Android SDK Tools Revision 9**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**[setup] Android SDK 工具版本 9**'
- en: '**[setup] Project Target: Android 2.3.1**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**[setup] 项目目标：Android 2.3.1**'
- en: '**[setup] API level: 9**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**[setup] API 级别：9**'
- en: '**[setup] Importing rules file: platforms/android-8/ant/ant_rules_r2.xml**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**[setup] 导入规则文件：platforms/android-8/ant/ant_rules_r2.xml**'
- en: '**-compile-tested-if-test:**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**-compile-tested-if-test:** '
- en: '**-dirs:**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**-dirs:**'
- en: '**[echo] Creating output directories if needed..**.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**[echo] 如有必要，创建输出目录..**.'
- en: '**[mkdir] Created dir: TemperatureConverter/bin/classes**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**[mkdir] 创建目录：TemperatureConverter/bin/classes**'
- en: '**-resource-src:**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**-resource-src:** '
- en: '**[echo] Generating R.java / Manifest.java from the resources..**.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**[echo] 从资源生成 R.java / Manifest.java..**.'
- en: '**-aidl:**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**-aidl:** '
- en: '**[echo] Compiling aidl files into Java classes..**.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**[echo] 将 aidl 文件编译成 Java 类..**.'
- en: '**compile:**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**compile:**'
- en: '**[javac] Compiling 6 source files to TemperatureConverter/bin/classes**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**[javac] 编译 6 个源文件到 TemperatureConverter/bin/classes**'
- en: '**-dex:**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**-dex:**'
- en: '**[echo] Converting compiled files and external libraries into TemperatureConverter/bin/classes.dex..**.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**[echo] 将编译的文件和外部库转换为 TemperatureConverter/bin/classes.dex..**.'
- en: '**-package-resources:**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**-package-resources:**'
- en: '**[echo] Packaging resources**'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**[echo] 打包资源**'
- en: '**[aaptexec] Creating full resource package..**.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**[aaptexec] 创建完整的资源包...**.'
- en: '**-package-debug-sign:**'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**-package-debug-sign:**'
- en: '**[apkbuilder] Creating TemperatureConverter-debug-unaligned.apk and signing
    it with a debug key..**.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**[apkbuilder] 创建 TemperatureConverter-debug-unaligned.apk 并使用调试密钥进行签名..**.'
- en: '**[apkbuilder] Using keystore: .android/debug.keystore**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**[apkbuilder] 使用密钥库：.android/debug.keystore**'
- en: '**debug:**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**debug:**'
- en: '**[echo] Running zip align on final apk..**.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**[echo] 对最终 APK 进行 zip 对齐..**.'
- en: '**[echo] Debug Package: TemperatureConverter/bin/TemperatureConverter-debug.apk**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**[echo] 调试包：TemperatureConverter/bin/TemperatureConverter-debug.apk**'
- en: '**install:**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**install:**'
- en: '**[echo] Installing TemperatureConverter/bin/TemperatureConverter-debug.apk
    onto default emulator or device..**.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**[echo] 将 TemperatureConverter/bin/TemperatureConverter-debug.apk 安装到默认模拟器或设备上..**.'
- en: '**[exec] 371 KB/s (18635 bytes in 0.049s)**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**[exec] 371 KB/s (18635 字节在 0.049 秒内)**'
- en: '**[exec] pkg: /data/local/tmp/TemperatureConverter-debug.apk**'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**[exec] pkg: /data/local/tmp/TemperatureConverter-debug.apk**'
- en: '**[exec] Success**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**[exec] 成功**'
- en: '**BUILD SUCCESSFUL**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**构建成功**'
- en: '**Total time: 6 seconds**'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**总耗时：6秒**'
- en: 'That is, running the command line mentioned, the following steps are executed:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 即，运行提到的命令行，以下步骤将被执行：
- en: Environment setup, including the specific rules for the version used
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境设置，包括使用的特定规则
- en: Create the output directories if needed
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如有必要，创建输出目录
- en: Compile the sources, including resources, aidl, and Java files
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译源文件，包括资源、aidl 和 Java 文件
- en: Convert the compiled files into `dex`
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将编译的文件转换为 `dex`
- en: Package creation and signing
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打包创建和签名
- en: Installation onto the given device or emulator
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将安装到指定的设备或模拟器
- en: 'Once we have the APK installed, and because we are now doing everything from
    the command line, we can even start the `TemperatureConverterActivity`. Using
    the `am start` command and an `Intent` using the action `MAIN` and the `Activity`
    we are interested to launch as the component, we can create a command line as
    follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们安装了 APK，并且因为我们现在是从命令行进行所有操作，我们甚至可以启动 `TemperatureConverterActivity`。使用 `am
    start` 命令和一个使用 `MAIN` 动作以及我们想要启动的活动作为组件的 `Intent`，我们可以创建以下命令行：
- en: '[PRE2]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The Activity is started as you can verify in the emulator. Then, we can proceed
    in a similar way for the test project:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 活动已启动，您可以在模拟器中验证。然后，我们可以以类似的方式对测试项目进行操作：
- en: '[PRE3]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Running this command, we will obtain output similar to the following if everything
    goes well:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，运行此命令将获得以下类似的输出：
- en: '**Updated default.properties**'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**Updated default.properties**'
- en: '**Updated local.properties**'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**更新local.properties**'
- en: '**Added file <path/to>/TemperatureConverterTest/build.xml**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**添加文件 <path/to>/TemperatureConverterTest/build.xml**'
- en: '**Updated file <path/to>/TemperatureConverterTest/proguard.cfg**'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**更新文件 <path/to>/TemperatureConverterTest/proguard.cfg**'
- en: '**Updated build.properties**'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**更新 build.properties**'
- en: 'Also as we did before with the main project, we can build and install the tests.
    To do it, once we have our test project converted we can build it using `ant`
    as we did for the main project. To build and install it on a running emulator,
    use:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，正如我们在主项目中做的那样，我们可以构建和安装测试。要做到这一点，一旦我们将测试项目转换好，我们就可以使用`ant`来构建它，就像我们为主项目做的那样。要在运行的模拟器上构建和安装它，使用以下命令：
- en: '[PRE4]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It is worth noting that to be able to build the project successfully we need
    the libraries used to reside in the `libs` directory inside the project. You can
    create symbolic links to their original location to avoid copying them if you
    prefer.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，为了能够成功构建项目，我们需要使用的库必须位于项目内部的`libs`目录中。如果你更喜欢不复制它们，你可以创建到它们原始位置的符号链接。
- en: Also, it is a good practice to keep the Eclipse and Ant build processes synchronized,
    so if you add the required libraries to the `libs` directory you can also replace
    the locations of the libraries in the Eclipse project using **Properties | Java
    Build Path | Libraries**.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，保持Eclipse和Ant构建过程同步是一个好习惯，所以如果你将所需的库添加到`libs`目录中，你也可以使用**属性 | Java构建路径 |
    库**来替换Eclipse项目中库的位置。
- en: 'Now we can run the tests from the command line as we already discussed in previous
    chapters:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以像在前面章节中讨论的那样，从命令行运行测试：
- en: '[PRE5]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Running the command we will obtain the tests results:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 运行命令后，我们将获得测试结果：
- en: '**com.example.aatg.tc.test.EditNumberTests:.......**.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**com.example.aatg.tc.test.EditNumberTests:.......**.'
- en: '**com.example.aatg.tc.test.TemperatureConverterActivityTests:.........**.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**com.example.aatg.tc.test.TemperatureConverterActivityTests:.........**.'
- en: '**com.example.aatg.tc.test.TemperatureConverterApplicationTests:....**.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**com.example.aatg.tc.test.TemperatureConverterApplicationTests:....**.'
- en: '**com.example.aatg.tc.test.TemperatureConverterTests:...**.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**com.example.aatg.tc.test.TemperatureConverterTests:...**.'
- en: '**Test results for InstrumentationTestRunner=..........................**.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**InstrumentationTestRunner的测试结果=..........................**.'
- en: '**Time: 12.125**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**时间：12.125**'
- en: '**OK (28 tests)**'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**OK (28 tests)**'
- en: We have done everything from the command line by just invoking some simple commands,
    which is what we were looking for in order to feed this into a **Continuous Integration**
    process.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经通过仅调用一些简单的命令从命令行完成了所有操作，这正是我们为了将其输入到**持续集成**过程中所寻找的。
- en: Git—the fast version control system
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git——快速版本控制系统
- en: '**Git** is a free and Open Source, distributed version control system designed
    to handle everything from small to very large projects with speed and efficiency.
    It is very simple to setup so I strongly recommend its use even for personal projects.
    There is no project simpler enough that could not benefit from the application
    of this tool. You can find information and downloads at [http://git-scm.com/.](http://git-scm.com/.)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**Git**是一个免费且开源的分布式版本控制系统，旨在以速度和效率处理从小型到非常大的项目。它非常简单易设，我强烈建议即使是个人项目也使用它。没有哪个项目简单到不能从应用这个工具中受益。你可以在[http://git-scm.com/](http://git-scm.com/)找到信息和下载。'
- en: On the other hand, a version control system or VCS (also known as **Source Code
    Management** or **SCM)** is an unavoidable element for development projects where
    more than one developer is involved. Furthermore, even if it is possible to apply
    continuous integration with no VCS in place, as it is not a requisite clearly,
    is not a reasonable practice.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，版本控制系统或VCS（也称为**源代码管理**或**SCM**）是涉及多个开发者的开发项目中不可避免的一个元素。此外，即使在没有VCS的情况下应用持续集成也是可能的，尽管它不是必需的，但这并不是一个合理的做法。
- en: Other, and probably more traditional, options exist in the VCS arena such as
    Subversion or CVS that you are free to use if you feel more comfortable. Anyway,
    Git is used extensively by the Android project so it is worth investing some time
    to at least understand the basics.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 其他，可能还有更多传统的选项存在于版本控制系统（VCS）领域，例如Subversion或CVS，如果你觉得更舒服，可以自由使用。无论如何，Git在Android项目中得到了广泛的应用，因此花些时间至少了解其基础是值得的。
- en: Having said that and remembering that this is a very broad subject to justify
    a book in itself (and certainly there are some good books about it) we are discussing
    here the most basic topics and supplying examples to get you started if you haven't
    embraced this practice yet.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，且记住这是一个非常广泛的主题，足以写成一本书（而且确实有一些关于它的好书），我们在这里讨论的是最基本的话题，并提供示例以帮助那些尚未采用这种实践的人入门。
- en: Creating a local git repository
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建本地git仓库
- en: 'These are the simplest possible commands to create a local repository and populate
    it with the initial source code for our projects. In this case again we are using
    `TemperatureConverter` and `TemperatureConverterTest` projects created and used
    in previous chapters. We are selecting a directory named `git-repos` as the parent
    for both projects and copying the code we used in the previous section, where
    we built manually:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是创建本地仓库并将我们的项目初始源代码填充到其中的最简单命令。在这种情况下，我们再次使用在前面章节中创建并使用的`TemperatureConverter`和`TemperatureConverterTest`项目。我们选择一个名为`git-repos`的目录作为两个项目的父目录，并将我们在上一节中手动构建时使用的代码复制过来：
- en: '[PRE6]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: That is, we create the parent for the repositories, create the project directory,
    initialize the git repository, copy the initial content, clean our previous built,
    remove the `local.properties` file, add everything to the repository, and commit.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 即，我们为仓库创建父目录，创建项目目录，初始化git仓库，复制初始内容，清理之前的构建，删除`local.properties`文件，将所有内容添加到仓库中，并提交。
- en: Tip
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `local.properties` file must never be checked in a Version Control System
    as it contains information specific to your local configuration.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`local.properties`文件永远不应该被提交到版本控制系统，因为它包含特定于你本地配置的信息。'
- en: 'Then, the same should be done for the `TemperatureConverterTest` project:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，对于`TemperatureConverterTest`项目也应做同样的处理：
- en: '[PRE7]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: At this point we have two project repositories containing the initial source
    code for the `TemperatureConverter` and `TemperatureConverterTest` projects. We
    haven't altered their structure so they are also compatible with **Eclipse** and
    the **Android ADT** plugin to build while we develop in an IDE.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们有两个项目仓库，包含了`TemperatureConverter`和`TemperatureConverterTest`项目的初始源代码。我们没有改变它们的结构，因此它们也与**Eclipse**和**Android
    ADT**插件兼容，以便我们在IDE中开发时可以构建。
- en: The next step is to have both projects built and tested automatically every
    time we commit a change to the source code.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是确保每次我们对源代码进行更改时，两个项目都会自动构建和测试。
- en: Continuous Integration with Hudson
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Hudson进行持续集成
- en: '**Hudson** is an Open Source, extensible **Continuous Integration** server
    which has the ability to build and test software projects or to monitor the execution
    of external jobs. Hudson has an easy installation and configuration and does a
    very decent job and this is the reason why we are basing our example on it.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**Hudson**是一个开源、可扩展的**持续集成**服务器，它具有构建和测试软件项目或监控外部作业执行的能力。Hudson的安装和配置都很简单，并且做得非常出色，这也是我们以它为基础的原因。'
- en: Note
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Recently (January 2011) a proposal was made to change the name from Hudson to
    Jenkins to avoid future legal problems as Oracle has submitted a trademark registration.
    Consequently now two different forked projects exist. Though these examples are
    based on Hudson you should monitor the evolution of the individual projects to
    find the one that better suites your needs.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 最近（2011年1月），有人提出将名称从Hudson更改为Jenkins，以避免未来可能出现的法律问题，因为Oracle已经提交了商标注册。因此，现在存在两个不同的分支项目。尽管这些示例基于Hudson，但你应该监控各个项目的演变，以找到更适合你需求的项目。
- en: Installing and configuring Hudson
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装和配置Hudson
- en: We mentioned easy installation as one of Hudson's advantages and installation
    could not be any easier.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将简单安装作为Hudson的优点之一，安装过程无法再简单。
- en: Download the native package for the operating system of your choice from [http://hudson-ci.org/](http://hudson-ci.org/).
    There are native packages for Debian/Ubuntu, RedHat/Fedora/Centos, openSUSE, OpenSolaris/Nevada,
    and FreeBSD or download the latest generic `hudson.war` (which will work on Mac
    and Windows as well). In the following examples we will be using version 2.0\.
    We will show the latter as it is the one that does not require administrative
    privileges to install, configure, and run.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 从[http://hudson-ci.org/](http://hudson-ci.org/)下载你选择的操作系统的原生包。有适用于Debian/Ubuntu、RedHat/Fedora/Centos、openSUSE、OpenSolaris/Nevada和FreeBSD的原生包，或者下载最新的通用`hudson.war`（它也适用于Mac和Windows）。在以下示例中，我们将使用2.0版本。我们将展示后者，因为它不需要管理员权限即可安装、配置和运行。
- en: 'Once finished, copy it into a selected directory, let''s say `~/hudson`, and
    then run the following:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，将其复制到选定的目录中，比如`~/hudson`，然后运行以下命令：
- en: '[PRE8]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This expands and starts Hudson.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这将扩展并启动Hudson。
- en: The default configuration uses port 8080 as the HTTP listener port, so pointing
    your browser of choice to `http://localhost:8080` should present you with the
    Hudson home page.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 默认配置使用8080端口作为HTTP监听端口，因此将您选择的浏览器指向`http://localhost:8080`应该会显示Hudson主页。
- en: You can verify and change Hudson's operating parameter if required, by accessing
    the **Manage Hudson** screen. We should add to this configuration the plugins
    needed for Git integration and support for Android emulator during builds. These
    plugins are named **Hudson GIT plugin** and **Android Emulator Plugin** respectively.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，您可以通过访问**管理Hudson**屏幕来验证和更改Hudson的操作参数。我们应该添加到这个配置中用于Git集成和构建期间支持Android模拟器的插件。这些插件分别命名为**Hudson
    GIT插件**和**Android模拟器插件**。
- en: 'This screenshot displays the information you can obtain about the plugins following
    the hyperlinks available on the Hudson administration page:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 此截图显示了您可以通过Hudson管理页面上的超链接获取有关插件的信息：
- en: '![Installing and configuring Hudson](img/3500_08_01.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![安装和配置Hudson](img/3500_08_01.jpg)'
- en: After installing and restarting Hudson these plugins will be available for use.
    Our next step is to create the jobs necessary to build the projects.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 安装并重新启动Hudson后，这些插件将可用于使用。我们的下一步是创建构建项目所需的工作。
- en: Creating the jobs
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建工作
- en: Let's start by creating the `TemperatureConverter` job using **New Job in the
    Hudson home page**. Different kind of jobs can be created; in this case we are
    selecting **Build a free-style software project**, allowing you to connect any
    SCM with any build system.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从使用Hudson主页上的**新建工作**开始创建`TemperatureConverter`工作。可以创建不同类型的作业；在这种情况下，我们选择**构建自由风格软件项目**，允许您连接任何SCM与任何构建系统。
- en: 'After clicking on the OK button you will be presented with the specific job
    options, which that are described in the following table. This is the job properties
    page:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“确定”按钮后，您将看到以下表格中描述的具体工作选项。这是工作属性页面：
- en: '![Creating the jobs](img/3500_08_02.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![创建工作](img/3500_08_02.jpg)'
- en: 'All of the options in the **New Job** screen have a help text associated, so
    here we are only explaining the ones we are entering:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**新工作**屏幕中的所有选项都关联有帮助文本，因此这里我们只解释我们将要输入的选项：'
- en: '| Option | Description |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 描述 |'
- en: '| --- | --- |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Project name | The name given to the project. |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| 项目名称 | 分配给项目的名称。 |'
- en: '| Description | Optional description. |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| 描述 | 可选描述。 |'
- en: '| Discard Old Builds | This helps you save on disk consumption by managing
    how long to keep records of the builds (such as console output, build artifacts,
    and so on.) |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| 丢弃旧构建 | 这有助于您通过管理构建记录（如控制台输出、构建工件等）的保留时间来节省磁盘消耗。 |'
- en: '| This build is parameterized | This allows you to configure parameters that
    are passed to the build process to create parameterized builds. |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| 此构建是参数化的 | 这允许您配置传递给构建过程的参数以创建参数化构建。 |'
- en: '| Disable Build (No new builds will be executed until the project is re-enabled.)
    | Temporarily disable the project. |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| 禁用构建（直到项目重新启用，将不会执行新的构建。） | 暂时禁用项目。 |'
- en: '| Execute concurrent builds if necessary (beta) | This permits the execution
    of several builds concurrently. |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| 如有必要执行并发构建（beta） | 这允许同时执行多个构建。 |'
- en: '| Source Code Management | Also know as VCS.Where is the source code for the
    project? In this case we are using git and a repository where the URL is the absolute
    path of the repository we created earlier. For example, `/home/diego/aatg/git-repos/TemperatureConverter`.
    |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| 源代码管理 | 也称为VCS。项目的源代码在哪里？在这种情况下，我们使用git和一个URL为之前创建的仓库的绝对路径的仓库。例如，`/home/diego/aatg/git-repos/TemperatureConverter`。
    |'
- en: '| Build Triggers | How this project is automatically built. In this case we
    want that every change in the source code triggers the automatic build so we are
    selecting **Poll SCM**. The other option is to use **Build periodically**. This
    feature is primarily for using Hudson as a `cron` replacement, and it is not ideal
    for continuously building software projects. When people first start continuous
    integration, they are often so used to the idea of regularly scheduled builds
    like nightly/weekly that they use this feature. However, the point of continuous
    integration is to start a build as soon as a change is made, to provide a quick
    feedback to the change. |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| 构建触发器 | 这描述了项目是如何自动构建的。在这种情况下，我们希望每次源代码的更改都触发自动构建，所以我们选择**轮询SCM**。另一种选择是使用**定期构建**。这个功能主要用于将Hudson用作`cron`的替代品，并且对于持续构建软件项目来说并不理想。当人们刚开始持续集成时，他们通常非常习惯于定期构建的想法，如夜间/每周构建，因此他们会使用这个功能。然而，持续集成的目的是在更改发生后立即开始构建，以便为更改提供快速反馈。'
- en: '| Schedule | This field follows the syntax of `cron` (with minor differences).
    Specifically, each line consists of five fields separated by TAB or whitespace:
    `MINUTE HOUR DOM MONTH DOW`.For example if we want to poll continuously at thirty
    minutes past the hour specify: `30 * * * *`Check the documentation for a complete
    explanation of all the options. |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| 调度 | 此字段遵循`cron`语法（有一些细微差别）。具体来说，每一行由五个字段组成，字段之间由制表符或空格分隔：`分钟 小时 星期几 月份 星期`。例如，如果我们想在每小时三十分钟后持续轮询，指定：`30
    * * * *`。请查看文档以获取所有选项的完整解释。'
- en: '| Build environment | Lets you specify different options for the build environment
    and for the Android emulator that may run during the build. |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| 构建环境 | 允许你为构建环境和可能运行在构建期间的Android模拟器指定不同的选项。 |'
- en: '| Build | This describes the build steps. We are selecting **Invoke Ant** as
    we are reproducing the steps we did before to manually build the project.The target
    we use here is `debug` as we only want to compile the project and generate the
    APK, and not install or run it. Additionally, using the **Advanced..**. options
    we need to specify the Android SDK directory and the Android target version **Properties**.`sdk.dir=/opt/android-sdk
    target=android-9` |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| 构建 | 这描述了构建步骤。我们选择**调用Ant**，因为我们正在重现我们之前手动构建项目的步骤。我们在这里使用的目标是`debug`，因为我们只想编译项目并生成APK，而不安装或运行它。此外，使用**高级...**选项，我们需要指定Android
    SDK目录和Android目标版本**属性**。`sdk.dir=/opt/android-sdk target=android-9` |'
- en: '| Post build actions | These are a series of actions we can do after the build
    is done. We are interested in saving the APKs so we are enabling **Archive the
    artifacts** and then defining the path for them as **Files to archive**; in this
    precise case it is `**/*-debug.apk`. |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| 构建后操作 | 这些是在构建完成后我们可以执行的一系列操作。我们感兴趣的是保存APK，所以我们启用了**存档工件**，然后定义它们的路径为**存档文件**；在这个特定情况下是`**/*-debug.apk`。
    |'
- en: 'Now there are two options: you can force a build using **Build now**, or introduce
    some changes to the source code through Git and wait for them to be detected by
    our polling strategy. Either way, we would get our project built and our artifacts
    ready to be used for other purposes, such as dependency projects or QA.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有两种选择：你可以通过**立即构建**来强制构建，或者通过Git对源代码进行一些更改，然后等待我们的轮询策略检测到这些更改。无论哪种方式，我们都会构建我们的项目，并准备好我们的工件，以便用于其他目的，例如依赖项目或质量保证。
- en: So far we haven't run any tests and this is just what we are presenting now.
    Hudson has the ability to handle dependencies between projects, so we are now
    creating a Hudson job, `TemperatureConverterTest` depending on `TemperatureConverter`.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们还没有运行任何测试，我们现在展示的就是这个。Hudson有处理项目之间依赖关系的能力，因此我们现在创建一个Hudson作业，`TemperatureConverterTest`依赖于`TemperatureConverter`。
- en: Proceed in the same way as before. We are only pinpointing the differences in
    setting up this project against the previous setup.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 按照之前的方式进行。我们只是在设置此项目与之前设置的不同之处进行精确定位。
- en: '| Option | Description |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 描述 |'
- en: '| --- | --- |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Build Triggers | This is how we trigger the build of this project. **Built
    after other projects are built** is selected so that when some other projects
    finish building, a new build is scheduled for this project. We need this to be
    built after `TemperatureConverter`.This is convenient for running an extensive
    test after a build is complete as in this example. |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| 构建触发器 | 这是我们触发此项目构建的方式。选择**在其他项目构建后构建**，这样当其他项目完成构建时，就会为该项目安排一个新的构建。我们需要它在`TemperatureConverter`之后构建。这在构建完成后运行广泛的测试时很方便，就像这个例子一样。
    |'
- en: '| Build environment | Our intention is to install and run the tests on an emulator
    so for our build environment we use the facilities provided by the **Android Emulator
    Plugin**. This comes in handy if you wish to automatically start an Android emulator
    of your choice before the build steps execute, with the emulator being stopped
    after building is complete.You can choose to start a pre-defined, existing Android
    emulator instance (AVD).Alternatively, the plugin can automatically create a new
    emulator on the build slave with properties you specify here.In any case, the
    `logcat` output will automatically be captured and archived.Then select `2.3`
    for the **Android OS version**, `240` DPI for the **Screen density** and `WVGA`
    for **Screen resolution**.Feel free to experiment and select the options that
    better suit your needs. |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| 构建环境 | 我们的意图是在模拟器上安装和运行测试，因此我们的构建环境使用 **Android 模拟器插件** 提供的设施。如果你希望在构建步骤执行之前自动启动你选择的
    Android 模拟器，并在构建完成后停止模拟器，这将非常有用。你可以选择启动一个预定义的、现有的 Android 模拟器实例（AVD）。或者，插件可以自动在构建从机上创建一个新的模拟器，其属性由你在此处指定。无论如何，`logcat`
    输出将自动捕获并归档。然后选择 `2.3` 作为 **Android 操作系统版本**，`240` DPI 作为 **屏幕密度**，以及 `WVGA` 作为
    **屏幕分辨率**。请随意实验并选择更适合你需求的选项。 |'
- en: '| Common emulator options | We would like to **Reset emulator state at start-up**
    to wipe user data and disable **Show emulator window**, so the emulator window
    is not displayed. |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| 常用模拟器选项 | 我们希望 **在启动时重置模拟器状态** 以清除用户数据并禁用 **显示模拟器窗口**，这样模拟器窗口就不会显示。 |'
- en: '| Build | Select **Invoke ant** as the build step and `install` as the **Target**.
    Here again, as we did in `TemperatureConverter`, we have to set some variables
    to build and install the current job. Using the **Advanced..**. options set:`sdk.dir=/opt/android-sdk``target=android-9``tested.project.dir=../../TemperatureConverter/workspace/``adb.device.arg=-s
    $ANDROID_AVD_DEVICE`As before, we specified the Android SDK directory and the
    target version. Additionally, here we should specify the target project directory,
    that is the SUT, and the device where we want to install the APK. We are using
    a special variable set by the **Android Emulator Plugin** to identify the ADV
    that was chosen as the target. |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| 构建 | 选择 **调用 ant** 作为构建步骤，并将 `install` 作为 **目标**。在这里，就像我们在 `TemperatureConverter`
    中做的那样，我们必须设置一些变量来构建和安装当前作业。使用 **高级...** 选项设置：`sdk.dir=/opt/android-sdk` `target=android-9`
    `tested.project.dir=../../TemperatureConverter/workspace/` `adb.device.arg=-s
    $ANDROID_AVD_DEVICE`。和之前一样，我们指定了 Android SDK 目录和目标版本。此外，在这里我们应该指定目标项目目录，即 SUT，以及我们想要安装
    APK 的设备。我们使用 **Android 模拟器插件** 设置的特殊变量来识别选择为目标的目标设备。 |'
- en: After configuring and building this project, we have the APK installed on the
    target emulator. Some steps are still needed as we still miss running the tests
    and obtaining the results to be displayed in Hudson.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置和构建此项目后，我们在目标模拟器上安装了 APK。还有一些步骤需要完成，因为我们仍然缺少运行测试和获取要在 Hudson 中显示的结果。
- en: Obtaining Android test results
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取 Android 测试结果
- en: To be able to display test results we should store raw XML results in the test
    runner. The default `android.test.InstrumentationTestRunner` does not support
    storing raw XML so the solution here is to extend it to provide the missing functionality.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够显示测试结果，我们应该在测试运行器中存储原始 XML 结果。默认的 `android.test.InstrumentationTestRunner`
    不支持存储原始 XML，因此这里的解决方案是扩展它以提供缺失的功能。
- en: I found the `nbandroid-utils` ([http://code.google.com/p/nbandroid-utils/](http://code.google.com/p/nbandroid-utils/))
    project hosted in Google code that provides almost the same functionality that
    we need.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我在 Google code 上找到了名为 `nbandroid-utils` ([http://code.google.com/p/nbandroid-utils/](http://code.google.com/p/nbandroid-utils/))
    的项目，该项目提供了我们需要的几乎相同的功能。
- en: The `com.neenbedankt.android.test.InstrumentationTestRunner` class extends the
    Android one so that an XML of the test results is written to the device when running
    the tests.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`com.neenbedankt.android.test.InstrumentationTestRunner` 类扩展了 Android 类，以便在运行测试时将测试结果的
    XML 写入设备。'
- en: We also want the ability to specify the filename from the test arguments and
    be able to store files in external storage just in case test results become very
    large, so we are slightly modifying the class to support these features. Also,
    to make these changes evident we are naming the new class `XMLInstrumentationTestRunner:`
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还希望能够从测试参数中指定文件名，并且能够将文件存储在外部存储中，以防测试结果变得非常大，因此我们稍微修改了该类以支持这些功能。为了使这些更改明显，我们将新类命名为
    `XMLInstrumentationTestRunner:`。
- en: '[PRE9]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here we are providing the field to keep the name of the output file as well
    as its default value.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们提供了字段以保存输出文件的名称及其默认值。
- en: 'We are also defining the name of the argument our test runner will use to receive
    this value:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在定义测试运行器将使用以接收此值的参数名称：
- en: '[PRE10]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In our `onCreate()` method we verify if the argument has been provided and
    if so we store it in the previously defined field:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`onCreate()`方法中，我们验证是否提供了参数，如果是，则将其存储在之前定义的字段中：
- en: '[PRE11]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the `onStart()` method we create the file and we use it as the JUnit output:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onStart()`方法中，我们创建文件并使用它作为JUnit输出：
- en: '[PRE12]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following code is the original code for this test runner:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是这个测试运行器的原始代码：
- en: '[PRE13]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: There are still a few steps required to achieve our objective. The first is
    to add this test runner to our project using the combination `git add/git commit`.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 实现我们的目标还需要几个步骤。首先是将这个测试运行器通过组合`git add/git commit`添加到我们的项目中：
- en: 'You can simply use these commands:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以简单地使用以下命令：
- en: '[PRE14]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then we need to declare the instrumentation using the test runner in `AndroidManifest.xml`.
    That is use the recently created test runner `com.neenbedankt.android.test.XMLInstrumentationTestRunner`
    as the instrumentation for the `com.example.aatg.tc` package:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们需要在`AndroidManifest.xml`中使用测试运行器声明测试。也就是说，使用最近创建的测试运行器`com.neenbedankt.android.test.XMLInstrumentationTestRunner`作为`com.example.aatg.tc`包的测试：
- en: '[PRE15]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Also, add it to the repository as we did before with other files.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，将其添加到仓库中，就像我们之前对其他文件所做的那样。
- en: 'And finally, as we have the ability to add a step in the build process by using
    **Add build step** that executes arbitrary commands in a shell script, we add
    this as an **Execute shell** step in the job configuration page. We are using
    some shell variables to be able to re-utilize this step for other projects:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，由于我们能够通过使用**添加构建步骤**来在构建过程中添加一个执行shell脚本的步骤，我们将此步骤添加到作业配置页面中的**执行shell**步骤。我们使用一些shell变量以便能够将此步骤重新用于其他项目：
- en: '[PRE16]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let us explain these steps in greater detail:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地解释这些步骤：
- en: We assign a specific project package name to PKG variable.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将特定的项目包名称分配给PKG变量。
- en: '`OUTDIR` is the name of the directory where the test runner will leave the
    file `OUTFILE`. Note that this is a directory on the emulator or device, not a
    local directory.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OUTDIR`是测试运行器将文件`OUTFILE`留下的目录名称。请注意，这是一个在模拟器或设备上的目录，而不是本地目录。'
- en: Install the package under test onto the emulator or device.
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将测试包安装到模拟器或设备上。
- en: Run the instrumentation from the command line, as we have seen previously, but
    in this case adding an extra argument `-e outfile` with the name of the file we
    are expecting to receive.
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从命令行运行测试，就像我们之前看到的那样，但在这个情况下，添加一个额外的参数`-e outfile`，其中包含我们期望接收的文件名。
- en: Get the test results from that file, pulling from the device to the local workspace.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从该文件获取测试结果，从设备拉取到本地工作区。
- en: Almost everything is in place. The only thing left is to tell Hudson where to
    expect these test results. In this scenario we use the **Post Build Actions also
    in the job configuration page**.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎一切都已经就绪。唯一剩下的是告诉Hudson在哪里期望这些测试结果。在这种情况下，我们在作业配置页面中使用**构建后操作**。
- en: '| Option | Description |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 描述 |'
- en: '| --- | --- |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Publish Junit test results report | When this option is configured, Hudson
    can provide useful information about test results, such as historical test result
    trends, a web UI for viewing test reports, tracking failures, and so on.To use
    this feature, first set up your build to run tests, then use `com.neenbedankt.android.test.XMLInstrumentationTestRunner`
    as the test runner, specify the output using `-e outfile` in the instrumentation,
    and use this same name to tell Hudson where to find the results. Ant glob syntax,
    such as `**/build/test-reports/*.xml`, can also be used.Be sure not to include
    any non-report files into this pattern.In simple terms, this is simply `test-results.xml`
    as we specified in the `OUTFILE` variable before.Once there are a few builds running
    with test results, you should start seeing some trend charts displaying the evolution
    of tests. |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| 发布JUnit测试结果报告 | 当此选项配置时，Hudson可以提供有关测试结果的有用信息，例如历史测试结果趋势、查看测试报告的Web UI、跟踪失败等。要使用此功能，首先设置构建以运行测试，然后使用`com.neenbedankt.android.test.XMLInstrumentationTestRunner`作为测试运行器，在仪器测试中使用`-e
    outfile`指定输出，并使用此相同的名称告诉Hudson在哪里找到结果。Ant glob语法，如`**/build/test-reports/*.xml`，也可以使用。确保不要将任何非报告文件包含在此模式中。简单来说，这仅仅是我们在之前的`OUTFILE`变量中指定的`test-results.xml`。一旦运行了几个带有测试结果的构建，您应该开始看到一些趋势图表，显示测试的演变。|'
- en: 'Having done all of the steps described before, only forcing a build is left
    to see the results. Press **Build now** as usual and after a few moments you will
    see your test results and statistics displayed in a similar way as the following
    screenshot depicts:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 完成之前描述的所有步骤后，只剩下强制构建以查看结果。像往常一样按**现在构建**，几分钟后您将看到测试结果和统计信息以类似以下屏幕截图所示的方式显示：
- en: '![Obtaining Android test results](img/3500_08_03.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![获取Android测试结果](img/3500_08_03.jpg)'
- en: From here we can easily understand our project status, knowing how many tests
    failed and why. Digging through the failed tests we can also find the extensive
    **Error message** and **Stack trace**.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里我们可以轻松理解我们的项目状态，了解有多少测试失败以及原因。通过检查失败的测试，我们还可以找到广泛的**错误消息**和**堆栈跟踪**。
- en: 'It is also really helpful to understand the evolution of a project through
    the evaluation of different trends and Hudson is able to provide such information.
    Every project presents the current trends using weather-like icons from sunny,
    when the health of the project increases 80%, and to thunderstorm when the health
    lies bellow 20%. In addition, for every project the evolution of the trend of
    the tests success versus failure ratio is displayed in a chart that is reproduced
    here:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 通过评估不同的趋势来了解项目的演变也非常有帮助。每个项目都使用类似天气的图标来展示当前趋势，当项目健康度提高80%时为晴朗，当健康度低于20%时为雷暴。此外，对于每个项目，测试成功与失败比率的演变在以下图表中显示：
- en: '![Obtaining Android test results](img/3500_08_04.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![获取Android测试结果](img/3500_08_04.jpg)'
- en: In this case we can see how since the last build, one test started to fail.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们可以看到自上次构建以来，一个测试开始失败。
- en: 'To see how a project status changes by forcing a failure let''s add a failing
    test like the following:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看通过强制失败来查看项目状态变化的情况，让我们添加一个如下所示的失败测试：
- en: '[PRE17]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Yet another very interesting feature that is worth mentioning is the ability
    of Hudson to keep and display the Timeline and Build Time Trend, as shown in the
    following screenshot:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个值得提及的非常有趣的功能是Hudson能够保持并显示时间线和构建时间趋势，如下面的屏幕截图所示：
- en: '![Obtaining Android test results](img/3500_08_05.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![获取Android测试结果](img/3500_08_05.jpg)'
- en: This page presents the build history with hyperlinks to every particular build
    that you can follow to see the details.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 此页面展示了构建历史记录，并提供到每个特定构建的超链接，您可以跟踪以查看详细信息。
- en: Now we have less concern to be worried about and every time somebody in the
    developer team commits changes to the repository we know that these changes will
    be immediately integrated and the whole project will be built and tested and if
    we further configure Hudson we can even receive the status by e-mail. To achieve
    this, in the job configuration page enable **E-mail Notification** and enter the
    desired **Recipients**.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对担忧的事情减少了很多，每次开发团队中的某人在仓库中提交更改时，我们知道这些更改将立即集成，整个项目将构建和测试。如果我们进一步配置Hudson，我们甚至可以通过电子邮件接收状态。为此，在作业配置页面启用**电子邮件通知**并输入所需的**收件人**。
- en: Summary
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter has introduced **Continuous Integration** in practice providing
    valuable information to start applying it soon to your projects no matter what
    their size is, whether you are developing solo or on a big company team.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 本章在实践上介绍了**持续集成**，提供了宝贵的信息，以便您尽快将其应用于项目，无论项目规模大小，无论您是独立开发还是在大公司团队中工作。
- en: The techniques presented focus on the particularities of Android projects maintaining
    and supporting widely used development tools like Eclipse and Android ADT.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 所展示的技术专注于Android项目的特定之处，维护和支持广泛使用的开发工具，如Eclipse和Android ADT。
- en: We introduced real-world examples with real-world tools available from the vast
    Open Source arsenal. We employed Ant to automate the building process, git to
    create a simple version control system repository to store our source code and
    manage the changes, and finally installed and configured Hudson as the Continuous
    Integration of choice.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们引入了真实世界的例子，使用了从庞大的开源工具库中可用的真实世界工具。我们使用了Ant来自动化构建过程，git来创建一个简单的版本控制系统存储库以存储我们的源代码并管理变更，最后安装并配置了Hudson作为首选的持续集成工具。
- en: In this course we detailed the creation of jobs for automating the creation
    of `TemperatureConverter` and its tests and we emphasized on the relationship
    between the projects.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在本课程中，我们详细介绍了为自动化创建`TemperatureConverter`及其测试而创建作业的过程，并强调了项目之间的关系。
- en: Finally, we analyzed a way of getting XML results from Android tests and implemented
    this to obtain an attractive interface to monitor the running of tests, their
    results, and the existing trends.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们分析了一种从Android测试中获取XML结果的方法，并将其实现，以获得一个吸引人的界面来监控测试的运行、结果和现有趋势。
- en: The next chapter deals with a different aspect of testing concentrating on performance
    and profiling which is probably the natural step to follow after we have our application
    behaving correctly and according to our specifications.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章处理测试的不同方面，专注于性能和剖析，这可能是我们在应用程序正确运行并符合我们的规范之后的自然步骤。
