- en: Chapter 3. Migrating to Swift 3 to Be More Swifty
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章。迁移到 Swift 3 以更 Swifty
- en: If you're a Swift developer like me, you probably have existing code in Swift
    2.2 that you aren't ready to let go of just yet. Thankfully, Xcode 8 and the built
    in *Swift Migrator* will help you convert your Swift 2.2 projects to Swift 3\.
    We will use a sample project to walk through using the Migrator. We will also
    go over some useful strategies you can employ when the Migrator fails to convert
    all of your code properly.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你像我一样是一位 Swift 开发者，你可能有现有的 Swift 2.2 代码，你还不准备放弃。幸运的是，Xcode 8 和内置的 *Swift 迁移器*
    将帮助你将 Swift 2.2 项目转换为 Swift 3。我们将使用一个示例项目来演示如何使用迁移器。我们还将讨论一些有用的策略，当迁移器未能正确转换所有代码时，你可以采用这些策略。
- en: How can you migrate your project…
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你如何迁移你的项目…
- en: When you open a Swift 2.2 project in Xcode 8 for the first time, you are given
    the option to migrate your project to either Swift 2.3 or Swift 3 in order to
    take advantage of the new SDKs. However, if for some you decide that now is not
    the right time to convert, you can always do so later. The Swift Migrator tool
    is accessible in Xcode 8 under the **Edit **|** Convert **|** To Current Swift
    Syntax…** menu.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当你第一次在 Xcode 8 中打开 Swift 2.2 项目时，你会得到选择将项目迁移到 Swift 2.3 或 Swift 3 的选项，以便利用新的
    SDK。然而，如果你决定现在还不是转换的最佳时机，你总是可以在以后进行。Swift 迁移器工具在 Xcode 8 的 **编辑** | **转换** | **转换为当前
    Swift 语法…** 菜单下可用。
- en: 'You will need to convert your code if you want to use the new SDK''s available
    for iOS 10, macOS 10.12, watchOS 3, or tvOS 10\. You have two options for migrating
    your project listed below:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要使用适用于 iOS 10、macOS 10.12、watchOS 3 或 tvOS 10 的新 SDK，你需要转换你的代码。以下列出了迁移项目的两种选项：
- en: Option1 - Migrating to Swift 3
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选项 1 - 迁移到 Swift 3
- en: If you want to build against the latest Swift and use all of the new features
    of Xcode 8, then choose the migrate to Swift 3 option. The Migrator will modify
    your source files to adhere to the new Swift 3 syntax.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要针对最新的 Swift 构建并使用 Xcode 8 的所有新功能，请选择迁移到 Swift 3 的选项。迁移器将修改你的源文件以符合新的 Swift
    3 语法。
- en: Option 2 - Migrating to Swift 2.3
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选项 2 - 迁移到 Swift 2.3
- en: If you just want to use the new SDKs and aren't ready or able to migrate to
    the latest version of Swift, then choose the Swift 2.3 option. Swift 2.3 is Swift
    2.2 plus new SDKs. In this migration scenario, the Migrator will modify build
    settings to use Legacy Swift (Swift 2.2) while making selective source changes
    to allow your project to build against the new SDKs.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想使用新的 SDK，但还没有准备好或能够迁移到 Swift 的最新版本，那么请选择 Swift 2.3 选项。Swift 2.3 是 Swift
    2.2 加上新的 SDK。在这种迁移场景中，迁移器将修改构建设置以使用遗留 Swift（Swift 2.2），同时进行选择性的源代码更改，以便你的项目可以针对新的
    SDK 进行构建。
- en: Planning ahead
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提前规划
- en: 'Let''s face it, Xcode is asking you to bravely use its black box tool to make
    irreversible changes to your project. While I''m a huge Apple fan, I doubt I would
    ever just press the shiny new migrate button without thinking about what could
    go wrong in the process. I''m not in the business of scrapping projects and starting
    from scratch. Honestly, who really is? To avoid a potentially terrible time with
    the Migrator, you really should consider doing everything listed below as pre-work
    before migrating your project:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们面对现实，Xcode 正在要求你勇敢地使用它的黑盒工具对你的项目进行不可逆的更改。虽然我是一个狂热的苹果粉丝，但我怀疑我是否会不假思索地按下那个闪亮的迁移按钮，而不考虑过程中可能出错的地方。我不从事废弃项目从头开始的工作。说实话，谁真的会呢？为了避免迁移器可能带来的糟糕体验，你真的应该在迁移项目之前考虑以下所有作为预工作：
- en: Ensure that your existing codebase is making use of a version control system
    such as Git ([https://git-scm.com](https://git-scm.com)) or Subversion ([https://subversion.apache.org](https://subversion.apache.org)).
    If you run the Migrator and the output doesn't convert things as expected (or
    other unexpected things happen), you will have peace of mind that you can always
    get back to your original version.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你的现有代码库正在使用版本控制系统，例如 Git ([https://git-scm.com](https://git-scm.com)) 或 Subversion
    ([https://subversion.apache.org](https://subversion.apache.org))。如果你运行迁移器，并且输出结果不符合预期（或者发生其他意外情况），你将可以安心地知道你总是可以回到原始版本。
- en: Make sure your project compiles on the latest version of Xcode (7.3 or 7.3.1).
    You want to make sure everything, including your tests, runs as expected under
    Xcode 7\. If your project does not build and run as a Swift 2.2 project, you are
    just asking for trouble by using the Migrator at this point. Make sure things
    work now before migrating to Swift 2.3 or Swift 3\. Your goal is to have your
    tests pass now and after the migration.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您的项目在最新版本的 Xcode（7.3 或 7.3.1）上可以编译。您想要确保包括测试在内的一切都在 Xcode 7 下按预期运行。如果您的项目不能作为
    Swift 2.2 项目编译和运行，那么在此时使用迁移器只会给您带来麻烦。在迁移到 Swift 2.3 或 Swift 3 之前，请确保一切正常工作。您的目标是现在和迁移后测试都能通过。
- en: Make sure that every target you want converted builds with the active scheme.
    The Swift Migrator uses the active scheme in Xcode to determine which source files
    it should examine for migration. You can verify the targets that the Migrator
    will consider by looking at the settings of your scheme using the **Edit Scheme**
    menu. Once there, switch to the build tab of the scheme and make sure that all
    targets you want migrated are checked off.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您想要转换的每个目标都使用活动方案进行构建。Swift 迁移器使用 Xcode 中的活动方案来确定它应该检查哪些源文件进行迁移。您可以通过使用“编辑方案”菜单查看方案设置来验证迁移器将考虑的目标。一旦进入，切换到方案的构建选项卡，并确保所有您想要迁移的目标都已勾选。
- en: Tip
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can add a new scheme to your project and include all of the targets. Using
    a separate scheme for migration will ensure that you don't modify settings on
    your main schemes. You can remove the scheme after the migration.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为项目添加一个新的方案，并包括所有目标。使用单独的方案进行迁移将确保您不会修改主方案中的设置。迁移完成后，您可以删除该方案。
- en: 'If your project uses Carthage or CocoaPods, or another projects that is not
    built along with your main project, then you have two options:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的项目使用 Carthage 或 CocoaPods，或者另一个不是与主项目一起构建的项目，那么您有两个选择：
- en: '**Integrate the outside projects into your main project: **Using this option
    means that you intend to copy the source files of the other projects into your
    existing project. I would be hesitant in doing this unless you really have a good
    handle on how the project is structured and intend to maintain it going forward.
    Once you copy the files in, you will be disconnected from updates and continued
    work happening in the project. Updating in the future would require you to perform
    the same copy, paste, and configure drill each time.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将外部项目整合到主项目中：**选择此选项意味着您打算将其他项目的源文件复制到现有的项目中。除非您真的非常了解项目的结构并打算继续维护它，否则我可能会犹豫这样做。一旦您复制了文件，您将无法连接到项目中正在进行的更新和持续工作。未来的更新将需要您每次都执行相同的复制、粘贴和配置操作。'
- en: '**Do nothing, meaning you won''t convert at this time: **With this option,
    you migrate just your code and continue to link to any 3^(rd) party project without
    migrating. This could be a pretty good option to consider as the owner of the
    outside project might have better insights on how to migrate the project but just
    has not done so yet. If it''s not your project, you might be better off waiting
    for an update from the owner and maintainers of the project. Chances are good
    that you can continue to use the 3^(rd) party project as is. A last trend that
    developers are implementing is to create Swift 2.3 and Swift 3 branches to ease
    later transitions while developing with Xcode 8 betas.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不采取任何行动，即您现在不进行转换：**选择此选项，您只需迁移您的代码，并继续链接到任何第三方项目而不进行迁移。这对于外部项目的所有者来说可能是一个值得考虑的好选项，因为所有者可能对如何迁移项目有更好的见解，但尚未这样做。如果不是您的项目，您可能最好等待项目所有者和维护者提供更新。有很大可能性，您可以继续使用第三方项目。开发者正在实施的一个最后趋势是创建
    Swift 2.3 和 Swift 3 分支，以简化在 Xcode 8 测试版中开发时的后续转换。 '
- en: Migrating with Xcode's Swift migration tool
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Xcode 的 Swift 迁移工具进行迁移
- en: 'Once you''ve done your pre-work, it''s time to migrate your code. For our purposes,
    we are going to use a simple Tic Tac Toe project that you can download from the
    Packt website:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成预工作后，是时候迁移您的代码了。为了我们的目的，我们将使用一个简单的井字棋项目，您可以从 Packt 网站下载：
- en: '**Launch Xcode 8 and open the Tic Tac Toe project**:On first launch, Xcode
    will ask you if you want to migrate your Swift 2.2 project to use the latest SDKs.
    Choose Convert to start the migration.![Migrating with Xcode''s Swift migration
    tool](img/image_03_001.jpg)'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**启动 Xcode 8 并打开井字棋项目**：在首次启动时，Xcode 将询问您是否想要将您的 Swift 2.2 项目迁移到使用最新 SDK。选择“转换”以开始迁移。![使用
    Xcode 的 Swift 迁移工具进行迁移](img/image_03_001.jpg)'
- en: '**Choose either Swift 2.3 or Swift 3**:After choosing to convert, you will
    be prompted with another screen that basically lets you know that Xcode is going
    to modify your files. You are also told that, once the migration is over, you
    will be given the option to accept the changes or dismiss them without permanently
    changing your project''s files. The modal dialog also gives you a disclaimer that
    the Swift Migrator isn''t perfect and you might have to make additional changes
    once the migration has completed. Press **Next** and then choose Swift 3.![Migrating
    with Xcode''s Swift migration tool](img/image_03_002.jpg)'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**选择Swift 2.3或Swift 3**：在选择转换后，您将看到一个另一个屏幕，基本上告诉您Xcode将修改您的文件。您还被告知，一旦迁移完成，您将有一个选择接受更改或取消更改而不永久更改项目文件的选项。模态对话框还提供了一份免责声明，说明Swift迁移工具并不完美，迁移完成后您可能需要做出额外的更改。按**下一步**，然后选择Swift
    3。![使用Xcode的Swift迁移工具进行迁移](img/image_03_002.jpg)'
- en: '**Choose the targets to convert**:If you have a project with multiple targets,
    you need to make sure that you have selected a scheme that will build all the
    targets you want migrated to the newest Swift (or Swift 2.3). In our case, there
    is only one target to convert and it should already be checked off. Should you
    want to skip a target, you just need to uncheck its corresponding checkbox.![Migrating
    with Xcode''s Swift migration tool](img/image_03_004.jpg)'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**选择要转换的目标**：如果您有一个具有多个目标的项目，您需要确保您已选择一个方案，该方案将构建您想要迁移到最新Swift（或Swift 2.3）的所有目标。在我们的例子中，只有一个目标需要转换，并且它应该已经勾选。如果您想跳过一个目标，只需取消选中其对应的复选框即可。![使用Xcode的Swift迁移工具进行迁移](img/image_03_004.jpg)'
- en: Tip
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can run the migration multiple times on a project. If you prefer not to
    modify your schemes, you could just run the migration for each scheme that you
    want converted. Just make the selected scheme the active one and start the migration.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以在项目上多次运行迁移。如果您不想修改您的方案，您只需为要转换的每个方案运行迁移。只需将选定的方案设置为活动方案，然后开始迁移。
- en: '**Review changes on the preview screen: **After selecting the targets and pressing
    **Next**, the Migrator tool will begin its work. Once the process is finished,
    you are prompted with a preview screen containing before and after changes for
    you to review. Every source file that Xcode modified will be available in the
    preview window. It is highly recommended that you examine each of the files to
    make sure you understand the code changes and agree with the recommended changes
    before accepting them.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在预览屏幕上审查更改**：在选择目标并按**下一步**后，迁移工具将开始工作。一旦过程完成，您将看到一个预览屏幕，其中包含您要审查的更改前后的内容。Xcode修改的每个源文件都将可在预览窗口中查看。强烈建议您检查每个文件，以确保您理解代码更改并同意推荐的更改，然后再接受它们。'
- en: When reviewing changes, you have options on what you want permanently modified.
    Each modified file has a numbered listing of changes that you can discard or further
    modify. You discard a particular change in a file by expanding the button on an
    individual highlighted change and selecting the dismiss action. At the file level,
    you can discard changes to a file by unchecking the file on the left sidebar view.![Migrating
    with Xcode's Swift migration tool](img/image_03_005.jpg)
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在审查更改时，您可以选择永久修改的内容。每个修改过的文件都有一个编号的更改列表，您可以选择丢弃或进一步修改。您可以通过展开单个突出显示的更改按钮并选择忽略操作来丢弃文件中的特定更改。在文件级别，您可以通过在左侧侧边栏视图中取消选中文件来丢弃对文件的更改。![使用Xcode的Swift迁移工具进行迁移](img/image_03_005.jpg)
- en: '**Save your changes: **Once you are finished reviewing changes, press the **S**ave****
    button. You will be prompted with a confirmation dialog warning you that the changes
    will be final. You won''t be able to revert using the migration tool once you
    give the Swift Migrator approval to apply all of the changes. Click the ****Continue****
    button to confirm that you do want to accept the changes.'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**保存您的更改**：在审查完更改后，按**S**ave**按钮。您将看到一个确认对话框，警告您更改将是最终的。一旦您允许Swift迁移工具应用所有更改，您将无法使用迁移工具撤回更改。点击**Continue**按钮以确认您确实想要接受更改。'
- en: '![Migrating with Xcode''s Swift migration tool](img/image_03_006.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![使用Xcode的Swift迁移工具进行迁移](img/image_03_006.jpg)'
- en: Once you save the changes, the migration is complete. Xcode will try to compile
    your project and will let you know if there are any build issues. In our case,
    we have a warning and two build errors. The warning is telling us that we are
    not using all of the recommended project settings. Go ahead and double-click the
    warning to have Xcode change our project settings to the recommended ones. In
    this case, Xcode is recommending that we use Whole Module Optimization.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 保存更改后，迁移完成。Xcode 将尝试编译您的项目，并在存在任何构建问题时通知您。在我们的例子中，我们有一个警告和两个构建错误。警告告诉我们我们没有使用所有推荐的项目设置。继续双击警告，让
    Xcode 将我们的项目设置更改为推荐设置。在这种情况下，Xcode 建议我们使用整个模块优化。
- en: Note
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Whole Module Optimization is a build setting that lets the compiler consider
    the entire module when making advanced optimizations of your code. When the compiler
    has module-wide visibility of your code, optimization decisions are made with
    more information about how an affected routine is used throughout the module and
    not just within a single file. Better optimizations result in faster code. You
    can learn more about Whole Module Optimization and options for optimizing Swift
    performance by viewing the Optimizing Swift Performance lecture given at WWDC
    2015 [https://developer.apple.com/videos/play/wwdc2015/409/](https://developer.apple.com/videos/play/wwdc2015/409/).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 整个模块优化是一个构建设置，允许编译器在执行代码的高级优化时考虑整个模块。当编译器对您的代码具有模块级别的可见性时，优化决策将基于更多关于受影响例程在整个模块中如何使用的信息，而不仅仅是单个文件内。更好的优化会导致代码运行更快。您可以通过观看
    WWDC 2015 上的“优化 Swift 性能”讲座了解更多关于整个模块优化和优化 Swift 性能选项的信息 [https://developer.apple.com/videos/play/wwdc2015/409/](https://developer.apple.com/videos/play/wwdc2015/409/)。
- en: '![Migrating with Xcode''s Swift migration tool](img/image_03_007.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Xcode 的 Swift 迁移工具迁移](img/image_03_007.jpg)'
- en: The remaining build errors may or may not show up on your machine. In my case
    the errors are due to the fact that I had previously built the project using Xcode
    7.3.1\. Each time you build a project, Xcode caches the intermediate products
    from a compilation to improve future builds. If part of your code hasn't changed,
    Xcode uses the cached byproducts to streamline recompilation. This cached data
    is stored in a folder that Xcode uses for future builds. In my case the derived
    data folder contained code that was no longer relevant for the project given the
    project's migration to Swift 3 and Xcode 8.0\. Clean your project with the Product
    > Clean command. Your project should now compile successfully.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 剩余的构建错误可能或可能不会出现在您的机器上。在我的情况下，错误是由于我之前使用 Xcode 7.3.1 构建了项目。每次您构建项目时，Xcode 都会缓存编译的中间产品以提高未来的构建效率。如果您的代码的一部分没有更改，Xcode
    将使用缓存的副产品来简化重新编译。这些缓存数据存储在 Xcode 用于未来构建的文件夹中。在我的情况下，衍生数据文件夹包含了一些对于项目迁移到 Swift
    3 和 Xcode 8.0 后不再相关的代码。使用 Product > Clean 命令清理您的项目。现在，您的项目应该可以成功编译。
- en: Troubleshooting when things go wrong with the migration
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移过程中出现问题时进行故障排除
- en: Unfortunately, not all projects will convert perfectly. The [https://swift.org](https://swift.org)
    website maintains a list of known Migrator issues that you can reference ([https://swift.org/migration-guide/](https://swift.org/migration-guide/)).
    For example, the Migrator might suggest how to fix an issue via a fixit in the
    editor margin without automatically doing it for you. The reason you might see
    a fixit in this example is because your project might have multiple targets that
    share some form of dependence, which can confuse the Migrator. It's a known issue,
    but an easy one to deal with after the migration. You just need to click the fixit
    selecting the recommended action, and Xcode will do the rest. We don't have enough
    time to cover all of the known issues with migrations, but we will cover some
    of more important ones.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，并非所有项目都能完美转换。[https://swift.org](https://swift.org) 网站维护了一个已知迁移器问题的列表，您可以参考（[https://swift.org/migration-guide/](https://swift.org/migration-guide/)）。例如，迁移器可能会在编辑器边缘建议如何通过
    fixit 修复问题，而无需自动为您执行。您在这个例子中看到 fixit 的原因可能是您的项目可能具有多个共享某些形式依赖的目标，这可能会使迁移器困惑。这是一个已知问题，但在迁移后很容易处理。您只需点击
    fixit 选择推荐的操作，Xcode 将完成剩余的工作。我们没有足够的时间涵盖所有已知的迁移问题，但我们将介绍一些更重要的问题。
- en: 'We can categorize known Migrator issues into one of three general areas:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将已知的迁移器问题分为三个一般领域：
- en: '**Standard library issues**:Generally, these issues involve Collection routines
    and types'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**标准库问题**：通常，这些问题涉及集合例程和类型'
- en: '**New SDK issues**:These issues deal with the Migrator failing to correlate
    old types and protocols to new ones created in the new SDK. You might also run
    into issues related to the Foundation framework overhaul. We cover the major changes
    to the Foundation framework in [Chapter 8](ch08.html "Chapter 8. Oh Goodness!
    Look Whats New in the Foundation Framework"), *Oh Goodness! Look What''s New in
    the Foundation Framework*.'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**新的SDK问题**：这些问题涉及迁移器未能将旧类型和协议关联到新SDK中创建的新类型。你也可能会遇到与Foundation框架重整相关的问题。我们在[第8章](ch08.html
    "第8章. 哇！看看Foundation框架的新功能")，*哇！看看Foundation框架的新功能*中涵盖了Foundation框架的主要变更。'
- en: '**Swift 3 language changes**:These Migrator issues relate to changes to the
    language for Swift 3\. In cases where a function or construct is no longer available
    in Swift 3, the Migrator will not take any action and you will need to manually
    change the code.'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Swift 3语言变更**：这些迁移器问题与Swift 3语言变更有关。在函数或构造在Swift 3中不再可用的情况下，迁移器不会采取任何行动，你需要手动更改代码。'
- en: You will need to use a combination of the warning/error messages generated along
    with the known issues page listed on the [https://swift.org](https://swift.org)
    website to determine how to fix build errors that surface after a migration. If
    a fixit hint is not provided in the editor margin, you will have to manually correct
    the issue.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要结合使用在[https://swift.org](https://swift.org)网站上列出的已知问题页面以及生成的警告/错误消息来确定如何在迁移后修复出现的构建错误。如果编辑器边缘没有提供修复提示，你将需要手动纠正问题。
- en: Quick strategies for addressing issues
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速解决问题的策略
- en: '**Fixit suggestions**:After the migration finishes, examine the warnings/errors
    section for fixit actions. Each of these will give you a recommendation on how
    to fix the code in question. Simply choose the actions and Xcode will apply the
    code change.'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**修复建议**：迁移完成后，检查警告/错误部分以查找修复操作。这些操作中的每一个都会为你提供有关如何修复相关代码的建议。只需选择操作，Xcode就会应用代码更改。'
- en: '**Migrator comments**:Even when your project compiles, there is still a possibility
    that the Migrator missed something during the conversion that could not be handled.
    In these cases, the Migrator leaves `/*Migrator FIXME: ...*/` comments in your
    code. You''ll want to search for these and decide if you need to manually make
    a change once you have evaluated the code block.'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**迁移注释**：即使你的项目编译成功，仍然有可能在转换过程中，迁移器遗漏了一些无法处理的点。在这种情况下，迁移器会在你的代码中留下`/*Migrator
    FIXME: ...*/`注释。你将需要搜索这些注释，并在评估了代码块后决定是否需要手动进行更改。'
- en: '**Use the new Foundation framework value types**:When inspecting your project
    code, you might see that Swift is casting types to "NS" prefixed types. You probably
    don''t want legacy Foundation types when using Swift 3\. Again, the Migrator does
    a pretty good job of finding and correcting these; however, you are still  advised
    to do a manual search for the "NS" prefix. If you find any ''NS'' prefix occurrences,
    you will have the opportunity to determine if each is correct or if you should
    use a new Foundation type without the "NS" prefix. In [Chapter 8](ch08.html "Chapter 8. Oh
    Goodness! Look Whats New in the Foundation Framework"), *Oh Goodness! Look What''s
    New in the Foundation Framework*, we will cover Foundation changes, including
    the new value types.'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用新的Foundation框架值类型**：在检查你的项目代码时，你可能会看到Swift正在将类型转换为以"NS"为前缀的类型。在使用Swift
    3时，你可能不希望使用遗留的Foundation类型。同样，迁移器在查找和纠正这些问题方面做得相当不错；然而，你仍然建议手动搜索"NS"前缀。如果你发现任何''NS''前缀的出现，你将有机会确定每个是否正确，或者是否应该使用不带"NS"前缀的新Foundation类型。在[第8章](ch08.html
    "第8章. 哇！看看Foundation框架的新功能")，*哇！看看Foundation框架的新功能*中，我们将介绍Foundation框架的变更，包括新的值类型。'
- en: '**User-defined collection types might generate migration issues: **In Swift
    3, collections need to handle moving forward and backward through their collection
    of items. You will need to adopt the new Collection protocol ([https://developer.apple.com/reference/swift/collection](https://developer.apple.com/reference/swift/collection))
    functions that define how you increment the index. If your collection supports
    decrementing, there is a new protocol function for that as well. Last, there is
    a protocol function that allows your collection to support randomly accessing
    an item. If you see errors associated with your custom collections not adhering
    to the Collection protocol, it''s likely that you have not added one or more of
    the new protocol functions below:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**用户定义的集合类型可能会产生迁移问题：**在 Swift 3 中，集合需要处理在其项目集合中向前和向后移动。你需要采用新的 Collection
    协议（[https://developer.apple.com/reference/swift/collection](https://developer.apple.com/reference/swift/collection)）函数来定义如何递增索引。如果你的集合支持递减，也有一个针对该功能的新的协议函数。最后，有一个协议函数允许你的集合支持随机访问一个项目。如果你看到与你的自定义集合不遵守
    Collection 协议相关的错误，那么很可能你没有添加一个或多个以下的新协议函数：'
- en: '`func index(after: Index) -> Index`'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`func index(after: Index) -> Index`'
- en: '`func index(before: Index) -> Index`'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`func index(before: Index) -> Index`'
- en: '`func index(_: Index, offsetBy: Int) -> Index`'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`func index(_: Index, offsetBy: Int) -> Index`'
- en: '`func distance(from: Index, to: Index) -> IndexDistance`'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`func distance(from: Index, to: Index) -> IndexDistance`'
- en: '**Removed features in Swift 3**: An example of this would be the C-style for-loop,
    which has been removed from Swift 3\. You will have to manually re-write it as a
    `for…in` statement.'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Swift 3 中移除的功能**：例如，C 风格的 for 循环已被从 Swift 3 中移除。你必须手动将其重写为 `for…in` 语句。'
- en: Hopefully, at this point, you are getting the idea that the Migrator is going
    to handle most of your everyday use cases. For those issues, you will need to
    use the warning and error messages to decipher what's going on. The first place
    to check should be the known issues section on Swift.org.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 希望到这一点，你已经明白了迁移工具将处理你大多数日常使用场景。对于这些问题，你需要使用警告和错误消息来解析正在发生的事情。你应该首先检查 Swift.org
    上的已知问题部分。
- en: Summary
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The Swift Migrator is a great tool that saves you time when you need to migrate
    Swift 2.2 projects to Swift 3 (or Swift 2.3). We learned that we have to migrate
    our existing Swift 2.2 projects to Swift 3 to take advantage of everything Xcode
    8 has to offer. We also learned that we can use the new SDKs without migrating
    to Swift 3 by choosing to migrate to Swift 2.3 (Swift 2.2 plus new SDKs). At any
    point in the future, we can use the ****Edit** |**Conver**t** *| **To Current
    Swift Syntax...*** menu to launch the migration tool. Finally, we learned that
    the Migrator isn't perfect and that it might not convert everything. We might
    have to make some manual changes to get things to work after the migration has
    finished. In the next chapter, we will begin covering Swift 3's core language
    changes.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 迁移工具是一个节省时间的优秀工具，当你需要将 Swift 2.2 项目迁移到 Swift 3（或 Swift 2.3）时，它会非常有用。我们了解到，为了充分利用
    Xcode 8 提供的所有功能，我们必须将现有的 Swift 2.2 项目迁移到 Swift 3。我们还了解到，通过选择迁移到 Swift 2.3（Swift
    2.2 加上新 SDKs），我们可以在不迁移到 Swift 3 的情况下使用新的 SDKs。在未来任何时候，我们都可以使用 **编辑** | **转换**
    | **转换为当前 Swift 语法...** 菜单来启动迁移工具。最后，我们了解到迁移工具并不完美，它可能无法转换所有内容。迁移完成后，我们可能需要手动做一些更改才能使一切正常工作。在下一章中，我们将开始介绍
    Swift 3 的核心语言变化。
