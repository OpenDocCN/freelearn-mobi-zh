- en: Chapter 2. Basic Build Customization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章. 基本构建自定义
- en: We started out by looking at the uses of Gradle, and creating and converting
    Android projects. Now it is time to get a better understanding of the build files,
    to look at some useful tasks, and to explore the possibilities of both Gradle
    and the Android plugin.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一开始是查看Gradle的用途，创建和转换Android项目。现在，是时候更好地理解构建文件，查看一些有用的任务，并探索Gradle和Android插件的潜力。
- en: 'In this chapter, we will look at the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下主题：
- en: Understanding the Gradle files
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Gradle文件
- en: Getting started with build tasks
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用构建任务
- en: Customizing the build
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义构建
- en: Understanding the Gradle files
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Gradle文件
- en: 'When creating a new project with Android Studio, three Gradle files are generated
    by default. Two of those files, `settings.gradle` and `build.gradle`, end up on
    the top level of the project. Another `build.gradle` file is created in the Android
    app module. This is how the Gradle files are placed in the project:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用Android Studio创建新项目时，默认会生成三个Gradle文件。其中两个文件，`settings.gradle`和`build.gradle`，最终位于项目的顶层。另一个`build.gradle`文件在Android应用程序模块中创建。这就是Gradle文件在项目中的放置方式：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: These three files each serve their own purpose, which we will further look into
    in the upcoming sections.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个文件各自有其用途，我们将在接下来的章节中进一步探讨。
- en: The settings file
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置文件
- en: 'For a new project containing only an Android app, `settings.gradle` looks like
    this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于仅包含Android应用程序的新项目，`settings.gradle`看起来像这样：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The settings file is executed during the initialization phase, and defines which
    modules should be included in the build. In this example, the `app` module is
    included. Single module projects do not necessarily require a settings file, but
    multimodule projects do; otherwise, Gradle does not know which modules to include.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 设置文件在初始化阶段执行，并定义了哪些模块应包含在构建中。在这个例子中，`app`模块被包含在内。单模块项目不一定需要设置文件，但多模块项目则需要；否则，Gradle不知道要包含哪些模块。
- en: Behind the scenes, Gradle creates a `Settings` object for every settings file,
    and invokes the necessary methods from that object. You do not need to know the
    details of the `Settings` class, but it is good to be aware of this.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，Gradle为每个设置文件创建一个`Settings`对象，并从该对象调用必要的方法。您不需要了解`Settings`类的详细信息，但了解这一点是好的。
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A full explanation of the `Settings` class is out of the scope of this book.
    If you would like to know more, you can find a lot of information in the Gradle
    documentation ([https://gradle.org/docs/current/dsl/org.gradle.api.initialization.Settings.html](https://gradle.org/docs/current/dsl/org.gradle.api.initialization.Settings.html)).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对`Settings`类的完整解释超出了本书的范围。如果您想了解更多信息，可以在Gradle文档中找到大量信息（[https://gradle.org/docs/current/dsl/org.gradle.api.initialization.Settings.html](https://gradle.org/docs/current/dsl/org.gradle.api.initialization.Settings.html)）。
- en: The top-level build file
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 顶层构建文件
- en: 'The top-level `build.gradle` file is where you can configure options that need
    to be applied to all the modules in the project. It contains two blocks by default:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 顶层`build.gradle`文件是您可以配置需要应用于项目中所有模块的选项的地方。它默认包含两个块：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `buildscript` block is where the actual build is configured. We looked at
    this briefly in [Chapter 1](ch01.html "Chapter 1. Getting Started with Gradle
    and Android Studio"), *Getting Started with Gradle and Android Studio*. The `repositories`
    block configures JCenter as a repository. In this case, a repository means a source
    of dependencies or, in other words, a list of downloadable libraries that we can
    use in our apps and libraries. JCenter is a well-known Maven repository.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`buildscript` 块是实际构建配置的地方。我们曾在[第1章](ch01.html "第1章. 使用Gradle和Android Studio入门")中简要介绍了这一点，即*使用Gradle和Android
    Studio入门*。`repositories` 块配置了JCenter作为仓库。在这种情况下，仓库意味着依赖项的来源，换句话说，是一个我们可以用于我们的应用程序和库的可下载库的列表。JCenter是一个知名的Maven仓库。'
- en: The `dependencies` block is used to configure dependencies for the build process
    itself. This means that you should not include dependencies that you need for
    your applications or libraries in the top-level build file. The only dependency
    that is defined by default is the Android plugin for Gradle. This is required
    for every Android module, because it is this plugin that makes it possible to
    execute Android-related tasks.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`dependencies` 块用于配置构建过程的依赖项。这意味着您不应该在顶层构建文件中包含您需要用于您的应用程序或库的依赖项。默认定义的唯一依赖项是Gradle的Android插件。这对于每个Android模块都是必需的，因为正是这个插件使得执行Android相关任务成为可能。'
- en: The `allprojects` block can be used to define properties that need to be applied
    to all modules. You can take it even further and create tasks in the `allprojects`
    block. Those tasks will then be available in all modules.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`allprojects`块可以用来定义需要应用于所有模块的属性。您甚至可以在`allprojects`块中创建任务。这些任务随后将在所有模块中可用。'
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As soon as you use `allprojects`, the modules are coupled to the project. This
    means that it will likely be impossible to build the modules separately, without
    the main project's build file. It might not seem like an issue at first, but later
    you might decide to separate an internal library into its own project, and then
    you will need to refactor your build files.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦使用`allprojects`，模块就会与项目耦合。这意味着可能无法在没有主项目构建文件的情况下单独构建模块。一开始可能看起来不是问题，但后来您可能决定将内部库分离成自己的项目，那时您将需要重构您的构建文件。
- en: The module build file
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块构建文件
- en: 'The module-level `build.gradle` file contains options that only apply to the
    Android app module. It can also override any options from the top-level `build.gradle`
    file. The module build file looks like this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 模块级别的`build.gradle`文件包含仅适用于Android应用程序模块的选项。它还可以覆盖顶级`build.gradle`文件中的任何选项。模块构建文件看起来是这样的：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We will take a detailed look at the three main blocks.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将详细探讨三个主要部分。
- en: Plugin
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 插件
- en: The first line applies the Android application plugin, which is configured as
    a dependency in the top-level build file, which we discussed earlier. The Android
    plugin is written and maintained by the Android Tools team at Google, and provides
    all tasks needed to build, test, and package Android applications and libraries.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行应用Android应用程序插件，该插件在顶级构建文件中配置为依赖项，我们之前已经讨论过。Android插件由谷歌的Android Tools团队编写和维护，提供构建、测试和打包Android应用程序和库所需的所有任务。
- en: Android
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Android
- en: The biggest part of the build file is the `android` block. This block contains
    the entire Android-specific configuration, which is available through the Android
    plugin we applied earlier.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 构建文件的最大部分是`android`块。此块包含整个Android特定配置，通过我们之前应用的Android插件提供。
- en: 'The only properties that are required are `compileSdkVersion` and `buildToolsVersion`:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 只需的属性是`compileSdkVersion`和`buildToolsVersion`：
- en: The first one, `compileSdkVersion`, is the API version of Android that you want
    to use to compile your app
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个，`compileSdkVersion`，是您想要用于编译应用程序的Android API版本
- en: The second one, `buildToolsVersion`, is the version of build tools and compilers
    to use
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个，`buildToolsVersion`，是构建工具和编译器的版本
- en: The build tools contain command-line utilities, such as aapt, zipalign, dx,
    and renderscript; which are used to produce the various intermediate artifacts
    that make up your application. You can download the build tools through the SDK
    Manager.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 构建工具包含命令行实用工具，例如aapt、zipalign、dx和renderscript；这些工具用于生成构成您应用程序的各种中间文件。您可以通过SDK管理器下载构建工具。
- en: 'The `defaultConfig` block configures core properties for the app. The properties
    in this block override the corresponding entries in the `AndroidManifest.xml`
    manifest file:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`defaultConfig`块配置应用程序的核心属性。此块中的属性将覆盖`AndroidManifest.xml`清单文件中的相应条目：'
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The first property in this block is `applicationId`. This overrides the package
    name from the manifest file, but there are some differences between `applicationId`
    and the package name. Before Gradle was used as the default Android build system,
    the package name in `AndroidManifest.xml` had two purposes: it served as the unique
    identifier of an app, and it was used as the name for the package in the R resource
    class. Gradle makes it easier to create different versions of your app, using
    build variants. For example, it is very easy to make a free version and a paid
    version. These two versions need to have separate identifiers, so they appear
    as different apps on the Google Play Store, and can both be installed at the same
    time. The source code and generated R class, however, must retain the same package
    name at all times. Otherwise, all your source files would need to change, depending
    on the version you are building. That is why the Android Tools team has decoupled
    these two different usages of package name. The package, as defined in the manifest
    file, continues to be used in your source code and your R class, while the package
    name that is used by the device and Google Play as the unique identifier is now
    referred to as *application id*. This application ID will become a lot more interesting
    as we start experimenting with build types.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此块中的第一个属性是`applicationId`。它覆盖了清单文件中的包名，但`applicationId`和包名之间有一些区别。在Gradle被用作默认Android构建系统之前，`AndroidManifest.xml`中的包名有两个用途：它作为应用的唯一标识符，并且用作R资源类中的包名。Gradle使得创建不同版本的应用变得更容易，使用构建变体。例如，制作免费版和付费版非常容易。这两个版本需要具有不同的标识符，以便在Google
    Play Store上作为不同的应用出现，并且可以同时安装。然而，源代码和生成的R类必须始终保留相同的包名。否则，所有源文件都需要根据你构建的版本进行更改。这就是为什么Android工具团队已经解耦了这两个不同的包名用法。在清单文件中定义的包名继续在你的源代码和R类中使用，而设备和Google
    Play用作唯一标识符的包名现在被称为*应用程序ID*。随着我们开始尝试不同的构建类型，这个应用程序ID将变得更有趣。
- en: The next two properties in `defaultConfig` are `minSdkVersion` and `targetSdkVersion`.
    Both of these should look familiar because they have always been defined in the
    manifest as part of the `<uses-sdk>` element. The `minSdkVersion` setting is used
    to configure the minimum API level required to run the app. The `targetSdkVersion`
    setting informs the system that the app is tested on a specific version of Android,
    and that the operating system does not need to enable any forward-compatibility
    behavior. This has nothing to do with `compileSdkVersion` that we saw earlier.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`defaultConfig`中的下一个两个属性是`minSdkVersion`和`targetSdkVersion`。这两个属性看起来应该很熟悉，因为它们始终在`<uses-sdk>`元素中作为清单的一部分被定义。`minSdkVersion`设置用于配置运行应用所需的最小API级别。`targetSdkVersion`设置通知系统该应用已在特定的Android版本上进行了测试，并且操作系统不需要启用任何向前兼容的行为。这与我们之前看到的`compileSdkVersion`没有关系。'
- en: The `versionCode` and `versionName` also have the same function as in the manifest
    file, and define a version number and a user-friendly version name for your app.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`versionCode`和`versionName`在清单文件中也具有相同的功能，并为你的应用定义了一个版本号和一个用户友好的版本名称。'
- en: All values in the build file will override the values in the manifest file.
    It is therefore not required to define them in the manifest file if you define
    them in `build.gradle`. In case the build file does not contain a value, the manifest
    values will be used as a fallback.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 构建文件中的所有值都将覆盖清单文件中的值。因此，如果你在`build.gradle`中定义了它们，就不需要在清单文件中定义它们。如果构建文件不包含值，则将使用清单值作为后备。
- en: The `buildTypes` block is where you define how to build and package the different
    build types of your app. We will take a detailed look at build types in [Chapter
    4](ch04.html "Chapter 4. Creating Build Variants"), *Creating Build Variants*.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`buildTypes`块是定义如何构建和打包你的应用不同构建类型的部分。我们将在[第4章](ch04.html "第4章。创建构建变体")*创建构建变体*中详细探讨构建类型。'
- en: Dependencies
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 依赖项
- en: The `dependencies` block is a part of the standard Gradle configuration (that
    is why it is placed outside of the `android` block) and defines all dependencies
    for an app or library. By default, a new Android app has a dependency on all the
    JAR files in the `libs` directory. Depending on the options you select in the
    new project wizard, it might also depend on the `AppCompat` library. We will discuss
    dependencies in [Chapter 3](ch03.html "Chapter 3. Managing Dependencies"), *Managing
    Dependencies*.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`dependencies` 块是标准 Gradle 配置的一部分（这就是为什么它放在 `android` 块之外），并定义了一个应用程序或库的所有依赖项。默认情况下，一个新的
    Android 应用程序依赖于 `libs` 目录中的所有 JAR 文件。根据你在新项目向导中选择的选项，它可能还依赖于 `AppCompat` 库。我们将在第
    3 章[管理依赖项](ch03.html "第 3 章。管理依赖项")中讨论依赖项。'
- en: Getting started with tasks
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用任务
- en: To know which tasks are available on a project, you can run `gradlew tasks`,
    which prints out a list of all the available tasks. In a newly created Android
    project, this includes Android tasks, build tasks, build setup tasks, help tasks,
    install tasks, verification tasks and other tasks. If you want to see not only
    the tasks, but also their dependencies, you can run `gradlew tasks --all`. It
    is possible to do a dry run of tasks, which prints out all the steps that are
    executed when running a specific task. This dry run will not actually perform
    any of these steps, so it is a safe way to see what you can expect to happen when
    running a certain task. You can do a dry run by adding the parameters `-m` or
    `--dry-run`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解项目上可用的任务，你可以运行 `gradlew tasks`，这将打印出所有可用任务的列表。在一个新创建的 Android 项目中，这包括 Android
    任务、构建任务、构建设置任务、帮助任务、安装任务、验证任务和其他任务。如果你想看到任务及其依赖项，你可以运行 `gradlew tasks --all`。可以进行任务的干运行，这将打印出运行特定任务时执行的所有步骤。这种干运行实际上不会执行这些步骤，因此这是一种安全的方式来查看运行特定任务时可以期待发生什么。你可以通过添加参数
    `-m` 或 `--dry-run` 来进行干运行。
- en: Base tasks
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基础任务
- en: The Android plugin for Gradle makes use of the Java base plugin, which in turn
    makes use of the base plugin. These add the standard lifecycle tasks and some
    common convention properties. The base plugin defines the tasks `assemble` and
    `clean`, and the Java base plugin defines the tasks `check` and `build`. These
    tasks are not implemented in the base plugin and do not perform any actions; they
    are used to define a convention for plugins that add the actual tasks that do
    the work.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle 的 Android 插件使用了 Java 基础插件，该插件又使用了基础插件。这些添加了标准生命周期任务和一些常见的约定属性。基础插件定义了
    `assemble` 和 `clean` 任务，Java 基础插件定义了 `check` 和 `build` 任务。这些任务在基础插件中没有实现，也不执行任何操作；它们用于定义插件约定，这些插件添加了实际执行工作的任务。
- en: 'The conventions for these tasks are:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这些任务的约定是：
- en: '`assemble` assembles the output(s) of the project'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assemble` 组装项目的输出（s）'
- en: '`clean` cleans the output of the project'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clean` 清理项目的输出'
- en: '`check` runs all the checks, usually unit tests and instrumentation tests'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`check` 运行所有检查，通常是单元测试和仪器测试'
- en: '`build` runs both `assemble` and `check`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build` 运行 `assemble` 和 `check`'
- en: The Java base plugin also adds the concept of source sets. The Android plugin
    builds on these conventions, and thus exposes tasks that experienced Gradle users
    are used to seeing. On top of those base tasks, the Android plugin also adds a
    lot of Android-specific tasks.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Java 基础插件还添加了源集的概念。Android 插件基于这些约定构建，因此暴露了经验丰富的 Gradle 用户习惯看到的任务。在这些基础任务之上，Android
    插件还添加了许多特定于 Android 的任务。
- en: Android tasks
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Android 任务
- en: 'The Android plugin extends the base tasks and implements their behavior. This
    is what the tasks do in an Android environment:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Android 插件扩展了基础任务并实现了它们的行为。这就是在 Android 环境中任务所做的事情：
- en: '`assemble` creates an APK for every build type'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assemble` 为每个构建类型创建一个 APK'
- en: '`clean` removes all the build artifacts, such as the APK files'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clean` 删除所有构建工件，例如 APK 文件'
- en: '`check` performs Lint checks and can abort the build if Lint detects an issue'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`check` 执行 Lint 检查，如果 Lint 检测到问题则可以终止构建'
- en: '`build` runs both `assemble` and `check`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build` 运行 `assemble` 和 `check`'
- en: The `assemble` task depends on `assembleDebug` and `assembleRelease` by default,
    and more tasks if you add more build types. This means running `assemble` will
    trigger a build for every build type you have.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`assemble` 任务依赖于 `assembleDebug` 和 `assembleRelease`，如果你添加了更多构建类型，则还有更多任务。这意味着运行
    `assemble` 将触发每个构建类型的构建。
- en: 'Besides extending these tasks, the Android plugin also adds a few new ones.
    These are the most significant new tasks:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 除了扩展这些任务外，Android 插件还添加了一些新的任务。这些是最重要的新任务：
- en: '`connectedCheck` runs tests on a connected device or emulator'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connectedCheck` 在连接的设备或模拟器上运行测试'
- en: '`deviceCheck` is a placeholder task for other plugins to run tests on remote
    devices'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deviceCheck` 是其他插件在远程设备上运行测试的占位符任务'
- en: '`installDebug` and `installRelease` install a specific version to a connected
    device or emulator'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`installDebug` 和 `installRelease` 将特定版本安装到连接的设备或模拟器'
- en: All `install` tasks also have `uninstall` counterparts
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有 `install` 任务都有对应的 `uninstall` 任务
- en: 'The `build` task depends on `check`, but not on `connectedCheck` or `deviceCheck`.
    This is to make sure that regular checks do not require a connected device or
    running emulator. Running the check tasks generates a Lint report with a list
    of all warnings and errors, with a detailed explanation and a link to the related
    documentation. This report can be found in `app/build/outputs` and is called `lint-results.html`.
    It looks like this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`build` 任务依赖于 `check`，但不依赖于 `connectedCheck` 或 `deviceCheck`。这是为了确保常规检查不需要连接的设备或正在运行的模拟器。运行检查任务会生成一个包含所有警告和错误的
    Lint 报告，其中包含详细说明和相关文档的链接。此报告可以在 `app/build/outputs` 中找到，并称为 `lint-results.html`。它看起来像这样：'
- en: '![Android tasks](img/B01061_02_01.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![Android 任务](img/B01061_02_01.jpg)'
- en: When you assemble a release, Lint will check for fatal issues that could cause
    the app to crash. If it finds any issues, it will abort the build and print the
    errors to the command-line interface. Lint will also generate a report in `app/build/outputs`
    in a file called `lint-results-release-fatal.html`. If you have multiple issues,
    going through the HTML report is more pleasant than scrolling back and forth in
    the command-line interface. The provided links are also extremely useful, because
    they take you to detailed explanations of the issues.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当您构建发布版本时，Lint 会检查可能导致应用程序崩溃的致命问题。如果找到任何问题，它将中止构建并将错误打印到命令行界面。Lint 还会在 `app/build/outputs`
    目录中生成一个名为 `lint-results-release-fatal.html` 的报告。如果您有多个问题，查看 HTML 报告比在命令行界面中来回滚动更愉快。提供的链接也非常有用，因为它们会带您到问题的详细解释。
- en: Inside Android Studio
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Android Studio 内部
- en: 'You do not always have to run Gradle tasks from the command-line interface.
    Android Studio has a tool window that contains a list of all the available tasks.
    This tool window is called **Gradle** and looks like this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您不一定要从命令行界面运行 Gradle 任务。Android Studio 有一个包含所有可用任务的工具窗口。此工具窗口称为 **Gradle**，看起来像这样：
- en: '![Inside Android Studio](img/B01061_02_02.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![Android Studio 内部](img/B01061_02_02.jpg)'
- en: 'From this tool window, you can run a task simply by double-clicking on its
    name. You can follow the progress of any running task in the **Gradle Console**
    tool window. If you cannot find these tool windows, you can open them in the **View**
    menu, under **Tool Window**. This is what the Gradle Console tool window looks
    like:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 从此工具窗口，您可以通过双击其名称来运行任务。您可以在 **Gradle 控制台** 工具窗口中跟踪任何正在运行的任务的进度。如果您找不到这些工具窗口，您可以在
    **视图** 菜单下的 **工具窗口** 中打开它们。这是 Gradle 控制台工具窗口的外观：
- en: '![Inside Android Studio](img/B01061_02_03.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![Android Studio 内部](img/B01061_02_03.jpg)'
- en: You can also run tasks from a command-line interface inside Android Studio,
    so you can do all app-related work inside the IDE if you like. To run the command,
    you need to open the **Terminal** tool window. This is a full-blown terminal,
    so it is possible to run any command from it. You might need to navigate to the
    top level of the project first, in order to work with the Gradle wrapper.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在 Android Studio 内部的命令行界面中运行任务，因此如果您喜欢，可以在 IDE 内完成所有与应用程序相关的操作。要运行命令，您需要打开
    **终端** 工具窗口。这是一个完整的终端，因此您可以从它运行任何命令。您可能需要首先导航到项目的顶层，以便使用 Gradle 包装器。
- en: Tip
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Changing the Android Studio terminal**'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**更改 Android Studio 终端**'
- en: 'It is possible to configure the terminal inside Android Studio to use a different
    shell. On Microsoft Windows, for example, the terminal defaults to Command Prompt.
    If you prefer to use the Git Bash (or any other shell) instead, open the Android
    Studio settings (under `File` and `Settings`) and look for **Terminal**. There
    you can change the shell path. For Git Bash on Microsoft Windows, it looks like
    this: `C:\Program Files (x86)\Git\bin\sh.exe --login -i`.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 Android Studio 内部配置终端以使用不同的 shell。例如，在 Microsoft Windows 上，默认情况下终端是命令提示符。如果您更喜欢使用
    Git Bash（或任何其他 shell），请打开 Android Studio 设置（在 `文件` 和 `设置` 之下）并查找 **终端**。在那里您可以更改
    shell 路径。对于 Microsoft Windows 上的 Git Bash，它看起来像这样：`C:\Program Files (x86)\Git\bin\sh.exe
    --login -i`。
- en: Customizing the build
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义构建
- en: There are a lot of ways to customize the build process, and when you are editing
    the build files in Android Studio, it is recommended to always sync the project
    with the Gradle files, no matter what you are customizing. This becomes especially
    important when you start adding dependencies or `BuildConfig` fields, which we
    will talk about soon.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多种方法可以自定义构建过程，当你正在 Android Studio 中编辑构建文件时，建议始终与 Gradle 文件同步项目，无论你正在自定义什么。当你开始添加依赖项或
    `BuildConfig` 字段时，这尤其重要，我们很快就会讨论这个问题。
- en: Android Studio will show a message in the editor as soon as you edit `settings.gradle`
    or `build.gradle`, and it is possible to trigger the sync at all times by navigating
    to **Tools** | **Android** | **Sync Project with Gradle Files** or the corresponding
    button in the toolbar.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编辑 `settings.gradle` 或 `build.gradle` 时，Android Studio 将在编辑器中显示一条消息，并且可以通过导航到
    **工具** | **Android** | **与 Gradle 文件同步项目** 或工具栏中的相应按钮来在任何时候触发同步。
- en: '![Customizing the build](img/B01061_02_04.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![自定义构建](img/B01061_02_04.jpg)'
- en: Under the hood, the Android Studio Sync actually runs the `generateDebugSources`
    task to generate all the necessary classes, based on the configuration in the
    build files.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在底层，Android Studio 同步实际上运行 `generateDebugSources` 任务来生成所有必要的类，基于构建文件中的配置。
- en: Manipulating manifest entries
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作清单条目
- en: 'We already saw that it is possible to configure `applicationId`, `minSdkVersion`,
    `targetSdkVersion`, `versionCode`, and `versionName` directly from the build files,
    instead of in the manifest file. There are a few more properties that you can
    manipulate:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到，可以直接从构建文件而不是在清单文件中配置 `applicationId`、`minSdkVersion`、`targetSdkVersion`、`versionCode`
    和 `versionName`。还有一些其他属性可以操作：
- en: '`testApplicationId` is the application ID for the instrument test APK'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`testApplicationId` 是仪器测试 APK 的应用程序 ID'
- en: '`testInstrumentationRunner` is the name of the JUnit test runner to be used
    for running your test (see [Chapter 6](ch06.html "Chapter 6. Running Tests"),
    *Running Tests*)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`testInstrumentationRunner` 是用于运行测试的 JUnit 测试运行器的名称（参见[第 6 章](ch06.html "第
    6 章。运行测试")，*运行测试*）'
- en: '`signingConfig` (see [Chapter 4](ch04.html "Chapter 4. Creating Build Variants"),
    *Creating Build Variants*)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`signingConfig`（参见[第 4 章](ch04.html "第 4 章。创建构建变体")，*创建构建变体*）'
- en: '`proguardFile` and `proguardFiles` (see [Chapter 9](ch09.html "Chapter 9. Advanced
    Build Customization"), *Advanced Build Customization*)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`proguardFile` 和 `proguardFiles`（参见[第 9 章](ch09.html "第 9 章。高级构建自定义")，*高级构建自定义*）'
- en: Inside Android Studio
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Android Studio 内部
- en: 'Instead of manually making changes in the build files, you can also change
    the basic settings in the **Project Structure** dialog in Android Studio. You
    can open the dialog from the **File** menu, and it enables you to edit project-wide
    settings and settings per module. For every Android module, you can change the
    standard Android plugin properties and all the manifest properties. In the following
    screenshot, you can see the properties for the release version of the app module
    in the **Project Structure** dialog:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在构建文件中手动进行更改外，你还可以在 Android Studio 的 **项目结构** 对话框中更改基本设置。你可以从 **文件** 菜单打开对话框，它允许你编辑项目范围的设置和每个模块的设置。对于每个
    Android 模块，你可以更改标准的 Android 插件属性和所有清单属性。在下面的屏幕截图中，你可以看到在 **项目结构** 对话框中应用程序模块发布版本的属性：
- en: '![Inside Android Studio](img/B01061_02_05.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![Android Studio 内部](img/B01061_02_05.jpg)'
- en: Be aware that if you make any changes in the **Project Structure** dialog, Android
    Studio will write the changes to the Gradle build configuration file.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果你在 **项目结构** 对话框中进行了任何更改，Android Studio 将将更改写入 Gradle 构建配置文件。
- en: BuildConfig and resources
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BuildConfig 和资源
- en: Ever since SDK tools revision 17, the build tools generate a class called `BuildConfig`,
    which contains a `DEBUG` constant that is set according to the build type. This
    is useful if you have code that you only want to run when debugging, such as logging.
    It is possible through Gradle to extend that file so that you can have constants
    that contain different values in debug and release.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 自 SDK 工具版本 17 以来，构建工具生成一个名为 `BuildConfig` 的类，其中包含一个根据构建类型设置的 `DEBUG` 常量。如果你只想在调试时运行某些代码，例如日志记录，这很有用。通过
    Gradle 可以扩展该文件，以便你可以拥有在调试和发布中包含不同值的常量。
- en: 'These constants are useful for toggling features or setting server URLs, for
    example:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这些常量对于切换功能或设置服务器 URL 等很有用：
- en: '[PRE5]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The escaped double quotes around the string value are necessary for it to be
    generated as an actual string. After adding the `buildConfigField` lines, it is
    possible to use `BuildConfig.API_URL` and `BuildConfig.LOG_HTTP` in your actual
    Java code.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串值周围需要转义的双引号，以便将其生成为一个实际的字符串。在添加 `buildConfigField` 行之后，就可以在真实的 Java 代码中使用
    `BuildConfig.API_URL` 和 `BuildConfig.LOG_HTTP`。
- en: 'More recently, the Android Tools team has also added the possibility to configure
    resources in a similar manner:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，Android 工具团队也添加了以类似方式配置资源的功能：
- en: '[PRE6]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The escaped double quotes are not necessary here, because resource values are
    always wrapped with `value=""` by default.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里不需要转义的双引号，因为资源值默认总是用 `value=""` 包裹。
- en: Project-wide settings
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目级设置
- en: 'If you have multiple Android modules in one project, it can be useful to apply
    settings to all of them without manually changing the build file for every module.
    We already saw how the `allprojects` block is used in the generated top-level
    build file to define repositories, and you can use the same strategy to apply
    Android-specific settings as well:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在一个项目中有一个以上的 Android 模块，将设置应用到所有模块而不必手动更改每个模块的构建文件可能很有用。我们已经在生成的顶层构建文件中看到了如何使用
    `allprojects` 块来定义仓库，你也可以使用相同的策略来应用 Android 特定的设置：
- en: '[PRE7]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This will only work if all your modules are Android app projects though, because
    you need to apply the Android plugin to get access to the Android-specific settings.
    A better way to achieve this behavior is to define the values in the top-level
    build file, and then apply them in the modules. It is possible in Gradle to add
    extra ad hoc properties on the `Project` object. This means that any `build.gradle`
    file can define extra properties, and this happens in an `ext` block.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，这仅在你所有的模块都是 Android 应用项目时才有效，因为你需要应用 Android 插件来访问 Android 特定的设置。实现此行为更好的方法是，在顶层构建文件中定义值，然后在模块中应用它们。在
    Gradle 中，可以在 `Project` 对象上添加额外的临时属性。这意味着任何 `build.gradle` 文件都可以定义额外的属性，这通常发生在
    `ext` 块中。
- en: 'You can add an `ext` block with custom properties to the top-level build file:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在顶层构建文件中添加一个带有自定义属性的 `ext` 块：
- en: '[PRE8]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This makes it possible to use the properties in module-level build files using
    `rootProject`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得在模块级构建文件中使用 `rootProject` 来使用属性成为可能：
- en: '[PRE9]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Project properties
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目属性
- en: 'The `ext` block in the previous example is a way of defining extra properties.
    You can use properties to customize a build process on the fly, and we will make
    use of them when we start writing custom tasks in [Chapter 7](ch07.html "Chapter 7. Creating
    Tasks and Plugins"), *Creating Tasks and Plugins*. There are several ways to define
    properties, but we will only look at the three most used ones:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 之前示例中的 `ext` 块是定义额外属性的一种方式。你可以使用属性来动态地自定义构建过程，我们将在第 7 章[创建任务和插件](ch07.html "第
    7 章。创建任务和插件")中开始编写自定义任务时使用它们。定义属性有几种方法，但我们只会查看最常用的三种：
- en: The `ext` block
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ext` 块'
- en: The `gradle.properties` file
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gradle.properties` 文件'
- en: The `-P` command-line parameter
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-P` 命令行参数'
- en: 'Here is an example `build.gradle` file that incorporates those three ways of
    adding extra properties:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个包含这三种添加额外属性方式的 `build.gradle` 文件示例：
- en: '[PRE10]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This is the accompanying `gradle.properties` file (in the same folder):'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这是伴随的 `gradle.properties` 文件（在同一文件夹中）：
- en: '[PRE11]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In the example, we create a new task. We will look at tasks and explain the
    syntax in [Chapter 7](ch07.html "Chapter 7. Creating Tasks and Plugins"), *Creating
    Tasks and Plugins*.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例中，我们创建了一个新的任务。我们将在第 7 章[创建任务和插件](ch07.html "第 7 章。创建任务和插件")中查看任务并解释语法，*创建任务和插件*。
- en: 'If you run the `printProperties` task with a command-line parameter, the output
    will look like this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用命令行参数运行 `printProperties` 任务，输出将看起来像这样：
- en: '[PRE12]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Thanks to custom properties, changing the configuration of a build is as easy
    as changing a single property, or even just adding a command-line parameter.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了自定义属性，改变构建配置就像更改单个属性一样简单，甚至只需添加一个命令行参数即可。
- en: Note
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is possible to define properties, both in the top-level build file and in
    the module build files. If a module defines a property that already exists in
    the top-level file, it will simply override it.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在顶层构建文件和模块构建文件中定义属性。如果模块定义了一个在顶层文件中已经存在的属性，它将简单地覆盖它。
- en: Default tasks
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认任务
- en: If you run Gradle without specifying a task, it runs the `help` task, which
    prints some information on how to work with Gradle. This happens because the help
    task is set as the default task. It is possible to override the default task and
    have a very common task, or even multiple tasks, run every time you execute Gradle
    without explicitly specifying the task.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行Gradle而没有指定任务，它将运行`help`任务，该任务会打印有关如何使用Gradle的一些信息。这是因为帮助任务被设置为默认任务。可以覆盖默认任务，并在每次执行Gradle而不明确指定任务时运行一个非常常见的任务，甚至多个任务。
- en: 'To specify default tasks, add this line to the top-level `build.gradle` file:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要指定默认任务，请将此行添加到顶级`build.gradle`文件中：
- en: '[PRE13]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, when you run the Gradle wrapper without any parameters, it will run `clean`
    and `assembleDebug`. It is easy to see which tasks are set as default by running
    the `tasks` task and filtering the output.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你不带任何参数运行Gradle包装器时，它将运行`clean`和`assembleDebug`。通过运行`tasks`任务并过滤输出，很容易看到哪些任务被设置为默认任务。
- en: '[PRE14]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Summary
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we took a detailed look at the different Gradle files that
    are automatically generated by Android Studio. You are now able to create build
    files yourself, and add all the required fields and configure the key properties.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们详细研究了Android Studio自动生成的不同Gradle文件。你现在可以自己创建构建文件，并添加所有必需的字段以及配置关键属性。
- en: We got started with the basic build tasks, and learned how the Android plugin
    builds on the base plugin, and extends it with new Android-specific tasks. We
    also saw how to run build tasks both from the command-line interface, and from
    inside Android Studio.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从基本的构建任务开始，学习了Android插件如何在基础插件的基础上构建，并扩展了新的Android特定任务。我们还看到了如何从命令行界面和Android
    Studio内部运行构建任务。
- en: In the final part of the chapter, we looked at several ways to influence the
    output of the build, and ways to configure parts of the build process itself.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后部分，我们探讨了影响构建输出的一些方法，以及配置构建过程本身部分的方法。
- en: In the last few years, the Android developer ecosystem has grown immensely,
    and a lot of interesting libraries have become available for everyone to use.
    In the next chapter, we will look at several ways to add dependencies to a project,
    so we can take advantage of this abundance of resources.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几年里，Android开发者生态系统得到了巨大的发展，许多有趣的库都变得可供每个人使用。在下一章中，我们将探讨几种向项目添加依赖项的方法，以便我们可以利用这些丰富的资源。
