- en: Chapter 1. Getting Ready for RubyMotion
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。为RubyMotion做准备
- en: '*"You will never win if you never begin."*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*"如果你从未开始，你就永远不会赢。"*'
- en: '*–*Helen Rowland**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*–*海伦·罗兰**'
- en: Welcome to **RubyMotion** **iOS** development essentials. The goal of this book
    is to quickly acquaint you with RubyMotion and start building applications for
    your favorite iOS device. Ever since the introduction of the first iPhone, followed
    by the iPad, iOS devices have become very popular because of the way they have
    revolutionized how people work, and thereby have begun an era of increased productivity.
    The success behind the phenomenal growth of these devices lies in the applications
    bundled with them, which increases their functionality exponentially.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到**RubyMotion** **iOS**开发基础。本书的目标是让您快速熟悉RubyMotion，并开始为您的最爱iOS设备构建应用。自从第一代iPhone推出以来，紧接着是iPad，iOS设备因其革命性地改变了人们的工作方式而变得非常受欢迎，从而开启了一个提高生产力的时代。这些设备背后惊人的增长成功在于它们所捆绑的应用程序，这些应用程序极大地增加了它们的功能。
- en: We will learn how to develop iOS applications with RubyMotion by building sample
    applications from scratch. We will try to have something tangible with a running
    code by the end of every chapter so that you can see a clear progression from
    chapter to chapter. Though RubyMotion and iOS Cocoa APIs are vast, and part of
    a fast-moving framework, we'll focus on the smaller, more stable set of core RubyMotion
    techniques that have crystallized after its release. This means that the knowledge
    you gain here will not become obsolete quickly. This book is written keeping the
    Zero-to-Deployment approach in mind.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过从头开始构建示例应用来学习如何使用RubyMotion开发iOS应用。我们将在每个章节结束时尝试通过运行代码来获得一些有形的东西，以便您可以看到章节之间的清晰进展。尽管RubyMotion和iOS
    Cocoa API非常庞大，并且是快速移动框架的一部分，但我们将关注在发布后已经固化的较小、更稳定的RubyMotion核心技术集。这意味着您在这里获得的知识不会很快过时。本书是以零到部署的方法编写的。
- en: 'In this chapter we will learn:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习：
- en: Various ways to create iOS applications
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建iOS应用的多种方式
- en: How RubyMotion is different from other frameworks
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RubyMotion与其他框架的不同之处
- en: RubyMotion installation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RubyMotion安装
- en: How can I develop an iOS application?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我该如何开发iOS应用？
- en: To develop iOS applications, there are various third-party frameworks available,
    apart from Apple libraries. If we broadly categorize the ways in which we can
    create iOS applications, we can divide them into three ways.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要开发iOS应用，除了Apple库之外，还有各种第三方框架可用。如果我们从广义上分类我们可以创建iOS应用的方式，我们可以将它们分为三种。
- en: Native apps using Objective-C
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Objective-C编写的原生应用
- en: This is the most standard way to build your application, by interacting with
    Apple APIs and writing apps in **Objective-C**. Applications made using native
    Apple APIs can use all possible device capabilities, and are relatively more reliable
    and high performing (however, the topic of performance is debatable based on the
    quality of the developer's code).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这是构建您应用的最标准方式，通过与Apple API交互，并用**Objective-C**编写应用。使用原生Apple API制作的应用可以使用所有可能的设备功能，并且相对更可靠、性能更高（然而，根据开发者的代码质量，性能的话题是有争议的）。
- en: Mobile web applications
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移动网页应用
- en: Mobile web applications are simple web applications extended for mobile web
    browsers, which can be created using standard web technologies such as HTML5\.
    For example, if we browse through [http://www.twitter.com](http://www.twitter.com)
    in a mobile browser, it will be redirected to [http://mobile.twitter.com](http://mobile.twitter.com),
    which renders its corresponding views for mobile devices. These applications are
    easy to create but the downside is that they have limited access to user data
    (for example, phonebook) and hardware (for example, camera).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 移动网页应用是针对移动网页浏览器扩展的简单网页应用，可以使用标准网页技术（如HTML5）创建。例如，如果我们在一个移动浏览器中浏览[http://www.twitter.com](http://www.twitter.com)，它将被重定向到[http://mobile.twitter.com](http://mobile.twitter.com)，为移动设备渲染相应的视图。这些应用易于创建，但缺点是它们对用户数据（例如，电话簿）和硬件（例如，摄像头）的访问有限。
- en: Hybrid applications
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混合应用
- en: These applications are somewhere in between mobile web apps and native applications.
    They are created using common web technologies such as HTML5 and JavaScript and
    have the ability to use device capabilities via their homegrown APIs. Some of
    the popular hybrid frameworks include Rhomobile and Phonegap.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这些应用介于移动网页应用和原生应用之间。它们使用常见的网页技术（如HTML5和JavaScript）创建，并且能够通过自家的API使用设备功能。一些流行的混合框架包括Rhomobile和Phonegap。
- en: 'If we compare the speed of development and user experience, it can be summed
    up with the following diagrams:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将开发速度和用户体验进行比较，可以用以下图表来总结：
- en: '![Hybrid applications](img/5220_01_01.jpg)![Hybrid applications](img/5220_01_02.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![混合应用](img/5220_01_01.jpg)![混合应用](img/5220_01_02.jpg)'
- en: From the preceding diagrams we see that mobile web apps can be created very
    quickly but we have to compromise on user experience. While native apps using
    Objective-C have good user experience, they have a very steep initial learning
    curve for web developers.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的图中我们可以看出，移动网页应用可以非常快速地创建，但我们必须在用户体验上做出妥协。虽然使用Objective-C开发的本地应用具有良好的用户体验，但对于Web开发者来说，它们的学习曲线非常陡峭。
- en: RubyMotion is good news for both users and developers. Users get an amazing
    experience of a native application and developers are able to develop applications
    rapidly in comparison to applications developed using Objective-C. Let's now learn
    about RubyMotion.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: RubyMotion对用户和开发者来说都是好消息。用户可以体验到原生应用程序的惊人体验，而开发者能够比使用Objective-C开发的应用程序更快地开发应用程序。现在让我们来了解RubyMotion。
- en: What is RubyMotion?
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是RubyMotion？
- en: RubyMotion is a toolchain that allows developers to develop native iOS applications
    using the Ruby programming language. RubyMotion acts as a compiler that interacts
    with the iOS **SDK** (**Software Development Kit**). This gives us enormous power
    to make use of Apple libraries; therefore, once the application has compiled and
    loaded, the device has no idea whether it's an application made using Objective-C
    or RubyMotion.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: RubyMotion是一个工具链，允许开发者使用Ruby编程语言开发本地iOS应用程序。RubyMotion作为一个编译器与iOS **SDK**（**软件开发工具包**）交互。这使我们能够充分利用苹果的库；因此，一旦应用程序编译并加载，设备就不知道它是使用Objective-C还是RubyMotion制作的。
- en: RubyMotion is a product of HipByte, founded by Laurent Sansonetti.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: RubyMotion是HipByte的产品，由Laurent Sansonetti创立。
- en: Note
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Laurent Sansonetti is a former Apple employee and the brain behind MacRuby.
    MacRuby is the implementation of Ruby on top of Mac OS X core technologies, which
    was maintained by Apple for over 4 years. And the best part is that RubyMotion
    is based on MacRuby.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Laurent Sansonetti是一位前苹果员工，也是MacRuby的幕后推手。MacRuby是在Mac OS X核心技术之上实现的Ruby，苹果公司维护了超过4年。最好的部分是RubyMotion是基于MacRuby的。
- en: While developing applications with RubyMotion using Ruby, you always have access
    to the iOS SDK classes. This gives you the benefit of even mixing Objective-C
    and Ruby code, as RubyMotion implements Ruby on top of the Objective-C runtime
    and iOS Foundation classes.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用Ruby开发RubyMotion应用程序时，你始终可以访问iOS SDK类。这使你能够混合使用Objective-C和Ruby代码，因为RubyMotion在Objective-C运行时和iOS
    Foundation类之上实现了Ruby。
- en: '![What is RubyMotion?](img/5220_01_03.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![什么是RubyMotion?](img/5220_01_03.jpg)'
- en: This is how a typical RubyMotion application works. The code written in RubyMotion
    is fully compiled into machine code, so the application created by RubyMotion
    is as fast as the one created using Objective-C.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是典型的RubyMotion应用程序的工作方式。RubyMotion编写的代码完全编译成机器码，因此RubyMotion创建的应用程序与使用Objective-C创建的应用程序一样快。
- en: '![What is RubyMotion?](img/5220_01_04.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![什么是RubyMotion?](img/5220_01_04.jpg)'
- en: Why RubyMotion?
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择RubyMotion？
- en: So far we have learned what RubyMotion is, but the question that comes to mind
    is, why should we use RubyMotion? There are many reasons why RubyMotion is a good
    choice for building robust iOS apps. The following sections detail a few that
    we think matter the most.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经了解了RubyMotion是什么，但脑海中浮现的问题是我们为什么要使用RubyMotion？RubyMotion是构建健壮iOS应用程序的良好选择，有许多原因。以下几节详细介绍了我们认为最重要的几个原因。
- en: If you are not an Objective-C fan
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果你不是Objective-C的粉丝
- en: For a newbie developer, Objective-C is an arduous affair. It's complicated to
    code; even for doing a simple thing, we have to write many lines of code. Though
    it is a powerful language and one of the best object-oriented ones available,
    it is time consuming and the learning curve is very steep. On the other hand,
    Ruby is more expressive, simple, and productive in comparison to Objective-C.
    Because of its simplicity, developers can shift their focus onto problem solving
    rather than spending time on trivial stuff, which is taken care by Ruby itself.
    In short, we can say RubyMotion allows us to use the power of Objective-C with
    the simplicity of Ruby.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于新手开发者来说，Objective-C是一项艰巨的任务。编写代码很复杂；即使是做一件简单的事情，我们也必须编写很多行代码。尽管它是一种功能强大的语言，也是最好的面向对象语言之一，但它耗时且学习曲线非常陡峭。另一方面，与Objective-C相比，Ruby更具有表现力、简单且高效。由于其简单性，开发者可以将注意力转移到解决问题上，而不是花费时间在Ruby本身就能处理的琐事上。简而言之，我们可以这样说，RubyMotion允许我们使用Objective-C的力量，同时拥有Ruby的简单性。
- en: Ruby classes used in RubyMotion are inherited from Objective-C classes. If you
    are familiar with the concept of object-oriented programming, you can understand
    its power. This means we can directly use Apple iOS SDK classes from your RubyMotion
    code. We will be discussing more on this in the next chapter.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在RubyMotion中使用的Ruby类是从Objective-C类继承的。如果你熟悉面向对象编程的概念，你可以理解它的强大之处。这意味着我们可以直接在RubyMotion代码中使用Apple
    iOS SDK类。我们将在下一章中进一步讨论这一点。
- en: Tip
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Ruby classes in RubyMotion have the same ancestor as Objective-C.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: RubyMotion中的Ruby类与Objective-C有相同的祖先。
- en: It is not a bridge
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它不是一个桥接器
- en: RubyMotion apps get direct access to iOS SDK APIs, which means the size of application
    and performance created using RubyMotion is comparable to the one created using
    Objective-C. It implements Ruby on top of the Objective-C runtime and iOS Foundation
    classes. RubyMotion uses a state-of-the-art static compiler based on **Low Level
    Virtual Machine** (**LLVM**), which converts the Ruby source code into a blazing
    fast machine code. The original source code is never present in the application
    bundle. A typical application weighs less than 1 MB, but the size can increase
    depending on the use case.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: RubyMotion应用可以直接访问iOS SDK API，这意味着使用RubyMotion创建的应用程序大小和性能与使用Objective-C创建的应用程序相当。它是在Objective-C运行时和iOS
    Foundation类之上实现Ruby的。RubyMotion使用基于**低级虚拟机**（**LLVM**）的先进静态编译器，将Ruby源代码转换为极快的机器代码。原始源代码永远不会出现在应用程序包中。一个典型的应用程序大小小于1
    MB，但根据使用情况，大小可能会增加。
- en: Managed memory
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理内存
- en: One of the key features of RubyMotion is that it takes care of memory management.
    Just like **ARC** (**Automatic Reference Counting**) with Xcode 4.4 and above,
    we don't have to take the pain of releasing the memory once an object is no longer
    used. RubyMotion does the magic and we don't need to think about it. It handles
    it on its own.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: RubyMotion的一个关键特性是它负责内存管理。就像Xcode 4.4及更高版本中的**ARC**（**自动引用计数**）一样，一旦对象不再使用，我们就不必痛苦地释放内存。RubyMotion会自动处理，我们不需要考虑它。它自己处理这一切。
- en: Terminal-based workflow
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于终端的工作流程
- en: RubyMotion has a terminal-based workflow; from creation of the application to
    deployment, everything can be done through terminals. If you are used to working
    on terminals, you know it adds to speedier development.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: RubyMotion有一个基于终端的工作流程；从创建应用程序到部署，所有操作都可以通过终端完成。如果你习惯于在终端上工作，你知道这有助于加快开发速度。
- en: Easy debugging with REPL
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用REPL轻松调试
- en: The terminal window where you run Rake also gives you the option to debug with
    **REPL** (**Read Evaluate Print Loop**), which lets you use Ruby expressions that
    are evaluated on the spot, and the results are reflected on the simulator while
    the application is still running. The ability to make live changes to the user
    interface and internal application data structures at runtime is extremely useful
    for testing and troubleshooting issues with the application, as this saves a lot
    of time and is much faster than a traditional **edit-compile-run** loop. If this
    confuses you right now, don't worry, as we will discuss more on this powerful
    feature in later chapters.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 运行Rake的终端窗口还提供了使用**REPL**（**读取-评估-打印循环**）进行调试的选项，这允许你使用即时评估的Ruby表达式，并且当应用程序仍在运行时，结果会反映在模拟器上。在运行时对用户界面和内部应用程序数据结构进行实时更改的能力对于测试和解决应用程序问题非常有用，因为这可以节省大量时间，并且比传统的**编辑-编译-运行**循环要快得多。如果你现在感到困惑，不要担心，我们将在后面的章节中进一步讨论这个强大的功能。
- en: Tip
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: REPL is similar to IRB in Ruby.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: REPL与Ruby中的IRB类似。
- en: It is extendable
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是可扩展的
- en: We can use RubyMotion salted gems easily by just adding them in the `Rakefile`.
    What are RubyMotion salted gems? We can't use all the gems that are available
    for Ruby right now, but there are a lot of gems specifically developed for RubyMotion.
    As the RubyMotion developer community expands, so will its gem bouquet, and this
    will make our application development rapid.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需在 `Rakefile` 中添加它们，就可以轻松使用 RubyMotion 盐化宝石。什么是 RubyMotion 盐化宝石？我们无法使用目前所有可用的
    Ruby 宝石，但有很多是为 RubyMotion 专门开发的宝石。随着 RubyMotion 开发者社区的扩大，其宝石集合也将扩大，这将使我们的应用程序开发更加快速。
- en: Third-party Objective-C libraries can be easily used in a RubyMotion project.
    It supports CocoaPods, which is a dependency manager for Objective-C libraries,
    making this process a bit easier.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 第三方 Objective-C 库可以很容易地在 RubyMotion 项目中使用。它支持 CocoaPods，这是一个 Objective-C 库的依赖管理器，这使得这个过程变得更容易一些。
- en: Debugging and testing
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试和测试
- en: RubyMotion has a console-based inbuilt interactive debugger for troubleshooting
    the issues both on a simulator and on a device using **GDB** (**GNU Debugger**).
    GDB is extremely powerful on its own, and RubyMotion uses it for debugging the
    compiled Ruby code. Also, RubyMotion projects are fit for Test Driven Development
    (TDD). We can write a unit test for our code from the beginning. We can use Behavior
    Driven Development (BDD) with RubyMotion, which is integrated into every project.
    We will discuss more about testing in later chapters.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: RubyMotion 拥有一个基于控制台的内置交互式调试器，用于在模拟器和设备上使用 **GDB**（**GNU 调试器**）来调试问题。GDB 本身就非常强大，RubyMotion
    使用它来调试编译后的 Ruby 代码。此外，RubyMotion 项目非常适合测试驱动开发（TDD）。我们可以从代码一开始就编写单元测试。我们可以使用行为驱动开发（BDD）与
    RubyMotion，这是每个项目都集成的。我们将在后面的章节中更详细地讨论测试。
- en: Tip
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: RubyMine editor also supports RubyMotion and it has a very powerful debugging
    mechanism through breakpoints.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: RubyMine 编辑器也支持 RubyMotion，并且它通过断点拥有一个非常强大的调试机制。
- en: Pop quiz
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速问答
- en: Q.1\. How can we distinguish between the iOS application created by RubyMotion
    and the iOS application created by Objective-C?
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Q.1. 我们如何区分由 RubyMotion 创建的 iOS 应用程序和由 Objective-C 创建的 iOS 应用程序？
- en: You can distinguish based on the user experience of the application.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以根据应用程序的用户体验来区分。
- en: You can distinguish based on the performance of the application.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以根据应用程序的性能来区分。
- en: You can't distinguish based on the user experience and performance of the application.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您不能根据应用程序的用户体验和性能来区分。
- en: 'Solution: If your answer was option 3, you were right. We can''t distinguish
    between applications created by RubyMotion or Objective-C as the user experience
    and performance are similar.'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 解决方案：如果你的答案是选项 3，你是正确的。我们不能区分由 RubyMotion 或 Objective-C 创建的应用程序，因为用户体验和性能相似。
- en: Q.2\. How can we extend RubyMotion?
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Q.2. 我们如何扩展 RubyMotion？
- en: We can use Objective-C libraries.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用 Objective-C 库。
- en: We can use all Ruby gems.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用所有 Ruby 宝石。
- en: We can use RubyMotion-flavored gems.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用 RubyMotion 风格的宝石。
- en: We can't use any other libraries.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们不能使用任何其他库。
- en: 'Solution: If your answer was option 1 and 3, you were right. Yes, we can use
    Objective-C libraries and also RubyMotion-flavored gems.'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 解决方案：如果你的答案是选项 1 和 3，你是正确的。是的，我们可以使用 Objective-C 库以及 RubyMotion 风格的宝石。
- en: RubyMotion installation – furnish your environment
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RubyMotion 安装 – 准备您的环境
- en: Now that we have got a good introduction to RubyMotion, let's set up our development
    environment; but before that let's run through some of the prerequisites.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对 RubyMotion 有了一个很好的介绍，让我们设置我们的开发环境；但在那之前，让我们先了解一下一些先决条件。
- en: Prerequisites for RubyMotion
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RubyMotion 的先决条件
- en: 'You need a Mac OS: we can''t develop iOS applications with RubyMotion on any
    other operating system; so we definitely need a Mac OS.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您需要一个 Mac OS：我们无法在其他操作系统上使用 RubyMotion 开发 iOS 应用程序；所以我们肯定需要一个 Mac OS。
- en: 'OSX 10.6 or higher: RubyMotion requires a Mac running OSX 10.6 or higher. OSX
    10.7 Lion is highly recommended.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OSX 10.6 或更高版本：RubyMotion 需要运行 OSX 10.6 或更高版本的 Mac。强烈推荐使用 OSX 10.7 狮子版。
- en: 'Ruby: the Ruby framework comes preinstalled with Mac OS X. If you have multiple
    versions of Ruby, we recommend that you use **Ruby Version Manager** (**RVM**).
    For more details, visit [https://rvm.io/](https://rvm.io/).'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ruby：Ruby 框架在 Mac OS X 中预先安装。如果你有多个 Ruby 版本，我们建议你使用 **Ruby 版本管理器**（**RVM**）。更多详情，请访问
    [https://rvm.io/](https://rvm.io/)。
- en: 'Xcode: next we need to install Xcode, which includes the iOS SDK, developed
    by Apple and essential for developing iOS applications. It can be downloaded from
    the App Store for free. It also includes the iPhone/iPad simulator, which will
    be used for testing our application.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xcode：接下来我们需要安装 Xcode，它包括由 Apple 开发的 iOS SDK，对于开发 iOS 应用程序是必不可少的。它可以从 App Store
    免费下载。它还包括 iPhone/iPad 模拟器，我们将用它来测试我们的应用程序。
- en: '**Command Line Tools**: after installing the Xcode toolchain, we need to install
    the command-line tools package, which is necessary for RubyMotion. To confirm
    that command-line tools is installed with your Xcode, open `Xcode` in your `Applications`
    folder, go to the **Preferences** window, and click on the **Downloads** tab.
    You should see the **Command Line Tools** package in this list. If it is not yet
    installed, make sure to click on the **Install** button.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令行工具**：在安装 Xcode 工具链后，我们需要安装命令行工具包，这对于 RubyMotion 是必要的。要确认命令行工具已与你的 Xcode
    一起安装，请打开“应用程序”文件夹中的“Xcode”，转到“首选项”窗口，并点击“下载”标签。你应该在这个列表中看到“命令行工具”包。如果尚未安装，请确保点击“安装”按钮。'
- en: Tip
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'If you have an old version of Xcode, run the following command on the terminal:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个旧的 Xcode 版本，请在终端上运行以下命令：
- en: '[PRE0]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This command will set up the default Xcode path.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将设置默认的 Xcode 路径。
- en: Installing RubyMotion
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 RubyMotion
- en: RubyMotion installation is really simple and takes no time at all. RubyMotion
    is a commercial product that you need to purchase from [www.rubymotion.com](http://www.rubymotion.com).
    Once purchased, you will receive your unique license key and installer.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: RubyMotion 的安装非常简单，几乎不需要时间。RubyMotion 是一个需要从 [www.rubymotion.com](http://www.rubymotion.com)
    购买的商业产品。一旦购买，你将收到你独特的许可证密钥和安装程序。
- en: 'RubyMotion installation is a five-step procedure and is given here:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: RubyMotion 安装是一个五步程序，如下所示：
- en: Once you have received the package, run the RubyMotion installer as follows:![Installing
    RubyMotion](img/5220_01_05.jpg)
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你收到软件包，按照以下方式运行 RubyMotion 安装程序：![安装 RubyMotion](img/5220_01_05.jpg)
- en: Read and accept the **EULA** (**End User License Agreement**).![Installing RubyMotion](img/5220_01_06.jpg)
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 阅读并接受 **EULA**（**最终用户许可协议**）。![安装 RubyMotion](img/5220_01_06.jpg)
- en: Enter the license number you have received as shown in the following screenshot:![Installing
    RubyMotion](img/5220_01_07.jpg)
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入你收到的许可证编号，如以下截图所示：![安装 RubyMotion](img/5220_01_07.jpg)
- en: Time for a short break—it will take a few minutes for RubyMotion to get downloaded
    and installed on your system. You can relax for some time.![Installing RubyMotion](img/5220_01_08.jpg)
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 短暂休息时间——RubyMotion 下载和安装到你的系统上需要几分钟。你可以放松一下。![安装 RubyMotion](img/5220_01_08.jpg)
- en: Yippee!! There is no step 5\. And that's how quick it is to start working with
    RubyMotion.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哈哈！没有第五步。这就是开始使用 RubyMotion 的工作如此之快的原因。
- en: Update RubyMotion
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新 RubyMotion
- en: RubyMotion is a fast-moving framework and we need to upgrade it once there is
    a new release available. Upgrading RubyMotion is again really simple—with one
    command, you can easily upgrade it to the latest version.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: RubyMotion 是一个快速发展的框架，一旦有新版本发布，我们就需要升级它。升级 RubyMotion 真的是非常简单——只需一条命令，你就可以轻松升级到最新版本。
- en: '[PRE1]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You need to be connected to the Internet for an upgrade to happen.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 升级需要连接到互联网。
- en: Note
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you want to work on an old version, you can downgrade using the following
    command:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要使用旧版本，可以使用以下命令降级：
- en: '[PRE2]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: But we recommend using the latest version.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们建议使用最新版本。
- en: How do we check we've done everything correctly?
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们如何检查我们已经做了一切正确？
- en: 'Now that we have installed our RubyMotion copy, it''s good practice to confirm
    which version we have installed; to do this, go to the terminal and run the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了 RubyMotion 的副本，确认我们安装了哪个版本是一个好习惯；为此，请转到终端并运行以下命令：
- en: '[PRE3]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This command outputs the RubyMotion version installed on your machine. If you
    get an error, you need to reinstall.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令输出你机器上安装的 RubyMotion 版本。如果你收到错误，你需要重新安装。
- en: Pick your own editor – you are not forced to use Xcode
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择你自己的编辑器——你不必强制使用 Xcode
- en: 'With RubyMotion, you are not forced to use Xcode. As every developer is more
    comfortable with a specific editor, you are open to choose what you like. However,
    we recommend the following editors for Ruby development:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 RubyMotion，你不必强制使用 Xcode。由于每个开发者都更习惯于特定的编辑器，你可以自由选择你喜欢的。然而，我们推荐以下编辑器用于 Ruby
    开发：
- en: RubyMine
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RubyMine
- en: Vim
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vim
- en: TextMate
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TextMate
- en: Sublime
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sublime
- en: Emacs
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Emacs
- en: Tip
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: RubyMine now provides full support to a RubyMotion project.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: RubyMine 现在为 RubyMotion 项目提供全面支持。
- en: How to get help
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何获取帮助
- en: If you are facing some issues, the preferred way to get a solution is to discuss
    it at the RubyMotion Google group, ([https://groups.google.com/forum/?fromgroups#!forum/rubymotion](https://groups.google.com/forum/?fromgroups#!forum/rubymotion)),
    where you can interact with fellow developers from the community and get a speedy
    resolution.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遇到一些问题，获取解决方案的首选方式是在RubyMotion Google群组中讨论，([https://groups.google.com/forum/?fromgroups#!forum/rubymotion](https://groups.google.com/forum/?fromgroups#!forum/rubymotion))，在那里您可以与社区中的其他开发者互动并获得快速解决。
- en: 'Sometimes you might not get a precise response from the RubyMotion group. Not
    to worry, RubyMotion support is there to rescue you. If you have a feature request,
    an issue, or simply want to ask a question, you can log a support ticket—that
    too from the command line using the following command:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您可能无法从RubyMotion群组获得精确的回复。不用担心，RubyMotion支持团队在那里帮助您。如果您有功能请求、问题或只是想提问，您可以提交支持工单——也可以使用以下命令从命令行提交：
- en: '[PRE4]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This will open up a new window in your browser. You can fill and submit the
    form with your query. Your RubyMotion license key, email address, and environment
    details will be added automatically.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在您的浏览器中打开一个新窗口。您可以在其中填写并提交您的查询表单。您的RubyMotion许可证密钥、电子邮件地址和环境详情将自动添加。
- en: Tip
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The RubyMotion community is growing at a very fast pace. In a short span of
    time, a lot of popular RubyMotion gems have been created by developers.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: RubyMotion社区正在以非常快的速度增长。在很短的时间内，许多流行的RubyMotion gems都是由开发者创建的。
- en: FAQs
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见问题解答
- en: 'We believe no question is silly. By now you will have many questions in your
    mind regarding RubyMotion. We have tried to answer a few of the most frequently
    asked questions (FAQs) related to topics covered so far in this section. Here
    are a few of them:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们相信没有问题是无厘头的。到目前为止，您可能对RubyMotion有很多疑问。我们试图回答了一些与该节中涵盖的主题相关的最常见问题（FAQ）。以下是一些：
- en: Q1\. Are the applications created by RubyMotion in keeping with Apple guidelines?
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Q1. 使用RubyMotion创建的应用程序是否符合苹果的指导方针？
- en: Answer. Yes, RubyMotion strongly follows the review guidelines provided by Apple.
    Many applications created using RubyMotion are already available at the App Store.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 答案。是的，RubyMotion严格遵循苹果提供的审查指南。许多使用RubyMotion创建的应用程序已经在App Store上可用。
- en: Q2\. Will my RubyMotion application work on a Blackberry, Android, or Windows
    phone?
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Q2. 我的RubyMotion应用程序能在Blackberry、Android或Windows手机上运行吗？
- en: Answer. No, applications created using RubyMotion are only for iOS devices;
    it is an alternative to programming in Objective-C. For a single-source multi-device
    application, we would recommend hybrid frameworks such as Rhomobile, Phonegap,
    and Titanium. For android development using Ruby, you can try Rubuto.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 答案。不，使用RubyMotion创建的应用程序仅适用于iOS设备；它是Objective-C编程的替代方案。对于单源多设备应用程序，我们建议使用混合框架，如Rhomobile、Phonegap和Titanium。如果您想使用Ruby进行Android开发，可以尝试Rubuto。
- en: Q3\. Can I share an application with someone?
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Q3. 我可以与他人分享应用程序吗？
- en: Answer. Yes and no. With the Apple Developer Program membership, you can share
    your application only for testing purposes with a maximum of 100 devices, where
    each device has to be registered individually with Apple. Also, you cannot distribute
    your application on the App Store for testing. Once you have finished developing
    your application and are ready to ship, you can submit it to Apple for an App
    Store review.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 答案。是的和不是。作为苹果开发者计划会员，您只能将应用程序用于测试目的，最多分享给100台设备，每台设备都必须单独向苹果注册。此外，您不能在App Store上分发您的应用程序进行测试。一旦您完成应用程序的开发并准备发布，您可以将其提交给苹果进行App
    Store审查。
- en: Q4\. Can I use Ruby gems?
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Q4. 我可以使用Ruby gems吗？
- en: Answer. Yes and no. No because we can't use normal Ruby gems, which you generally
    use in your Ruby on Rails projects; and yes because you can use gems that are
    specifically developed for RubyMotion, and there are already many such gems.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 答案。是的和不是。不是因为我们不能使用您通常在Ruby on Rails项目中使用的普通Ruby gems；但是可以，因为您可以使用专门为RubyMotion开发的gem，而且已经有许多这样的gem。
- en: Q5\. Will my application work on iPad and iPod Touch?
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Q5. 我的应用程序能在iPad和iPod Touch上运行吗？
- en: Answer. Absolutely, your application will work on any iOS devices, namely iPhone,
    iPad, and iPod Touch.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 答案。绝对可以，您的应用程序将在任何iOS设备上运行，即iPhone、iPad和iPod Touch。
- en: Q6 Is Ruby allowed on the App Store?
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Q6 Ruby是否允许在App Store上使用？
- en: Answer. The App Store can't distinguish between applications made using Objective-C
    and those made using RubyMotion. So, no worries, our RubyMotion applications are
    fit for the App Store.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 答案。App Store无法区分使用Objective-C和RubyMotion制作的应用程序。所以，不用担心，我们的RubyMotion应用程序适合App
    Store。
- en: Q7\. Can I use third-party Objective-C libraries?
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Q7\. 我可以使用第三方Objective-C库吗？
- en: Answer. Certainly. Third-party Objective-C libraries can be used in your project.
    RubyMotion provides integration with the CocoaPods dependency manager, which helps
    in reducing the hassle. You also can use C/C++ code provided that you wrap it
    into the Objective-C classes and methods.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 答案。当然可以。你可以在项目中使用第三方Objective-C库。RubyMotion提供了与CocoaPods依赖管理器的集成，这有助于减少麻烦。你也可以使用C/C++代码，只要你将其封装到Objective-C类和方法中。
- en: Q8\. Is RubyMotion open source?
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Q8\. RubyMotion是否开源？
- en: Answer. RubyMotion as a toolchain is open source (available at GitHub). The
    closed source part is the Ruby runtime, which is, however, very similar to MacRuby
    runtime (which is open source).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 答案。RubyMotion作为一个工具链是开源的（可在GitHub上找到）。封闭源代码的部分是Ruby运行时，然而，它与MacRuby运行时（也是开源的）非常相似。
- en: Summary
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Before we move to the next chapter, let's review all that we have learned so
    far. We first discussed the different ways to create iOS applications. Then we
    started with RubyMotion and discussed why to use it. And in the last section,
    we learned how to get started with RubyMotion and which editor fits with it.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进入下一章之前，让我们回顾一下到目前为止所学的所有内容。我们首先讨论了创建iOS应用程序的不同方法。然后我们从RubyMotion开始，讨论了为什么要使用它。在最后一节中，我们学习了如何开始使用RubyMotion以及哪种编辑器适合它。
- en: Now that we have our RubyMotion framework up and running, the next obvious task
    is to create our very first application, the most rudimentary `Hello World` application.
    In the next chapter, we will also learn the structure of the RubyMotion application
    in general.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将RubyMotion框架搭建并运行起来，接下来的明显任务就是创建我们的第一个应用程序，也就是最基础的`Hello World`应用程序。在下一章中，我们还将学习RubyMotion应用程序的一般结构。
