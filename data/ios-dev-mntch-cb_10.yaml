- en: Chapter 10. Location Services and Maps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。位置服务和地图
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将涵盖：
- en: Determining location
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定位置
- en: Determining heading
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定航向
- en: Using region monitoring
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用区域监控
- en: Using significant-change location service
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用显著变化位置服务
- en: Location services in the background
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 背景中的位置服务
- en: Displaying maps
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示地图
- en: Geocoding
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地理编码
- en: Adding map annotations
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加地图标注
- en: Adding map overlays
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加地图叠加
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Today's smartphones and handheld devices are equipped with high-accuracy Global
    Positioning System (GPS) hardware. GPS hardware receives location information
    from a constellation of satellites. Apart from the satellites, iOS devices take
    advantage of the cellular and Wi-fi networks to provide location information to
    the user.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 今天的手持设备和智能手机都配备了高精度的全球定位系统（GPS）硬件。GPS硬件从一组卫星接收位置信息。除了卫星之外，iOS设备还利用蜂窝和Wi-fi网络向用户提供位置信息。
- en: 'In this chapter, we will discuss how to use the appropriate frameworks to take
    advantage of the location services of the device. Furthermore, we will learn how
    to display maps and annotate them. Specifically, we will focus on the following
    subjects:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将讨论如何使用适当的框架来利用设备的位置服务。此外，我们还将学习如何显示地图并对其进行标注。具体来说，我们将关注以下主题：
- en: '**Location services:** They provide the available services on a device for
    providing location information. These services are:'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**位置服务**：它们提供设备上提供位置信息的可用服务。这些服务包括：'
- en: '**Standard location service:** This is the location service that depends fully
    on the device''s GPS module and provides the highest accuracy location data'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标准位置服务**：这是完全依赖于设备GPS模块的位置服务，提供最高精度的位置数据'
- en: '**Region monitoring service:** This is the location service that monitors boundary
    crossings'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**区域监控服务**：这是监控边界穿越的位置服务'
- en: '**Significant-change location service:** This is the service that monitors
    for significant changes in location'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显著变化位置服务**：这是监控位置显著变化的服务'
- en: '`CLLocationManager:` This is the class that allows us to use the location services'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CLLocationManager:` 这是一个允许我们使用位置服务的类'
- en: '`Compass:` This is the class that shows us how to use the built-in compass'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Compass:` 这是一个显示我们如何使用内置指南针的类'
- en: '`MKMapView:` This is the view that is used to display maps'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MKMapView:` 这是一个用于显示地图的视图'
- en: '`MKAnnotation:` This is the class that allows us to add annotations on maps'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MKAnnotation:` 这是一个允许我们在地图上添加标注的类'
- en: '`MKOverlay:` This is the class that allows us to add overlays on maps'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MKOverlay:` 这是一个允许我们在地图上添加叠加的类'
- en: Determining location
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定位置
- en: In this recipe, we will discuss how to receive the location information from
    the built-in GPS hardware.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将讨论如何从内置的GPS硬件接收位置信息。
- en: Getting ready
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in MonoDevelop, and name it `LocationApp`. Add two buttons
    and a label on the view of `MainController`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在MonoDevelop中创建一个新的项目，并将其命名为`LocationApp`。在`MainController`的视图中添加两个按钮和一个标签。
- en: How to do it...
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'To retrieve location data from the built-in GPS hardware, we need to use the
    `CoreLocaction` framework. It is exposed through the `MonoTouch.CoreLocation`
    namespace:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要从内置的GPS硬件中检索位置数据，我们需要使用`CoreLocaction`框架。它通过`MonoTouch.CoreLocation`命名空间暴露：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the following code in the `MainController` class:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainController`类中添加以下代码：
- en: '[PRE1]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Compile and run the application on the device.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备上编译并运行应用程序。
- en: Tap the start button to view your location coordinates on the screen.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击开始按钮，在屏幕上查看您的位置坐标。
- en: Note
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Projects using the `CoreLocation` framework to determine current position can
    work on the simulator. However, the coordinates will be fixed, with values of
    either Apple's headquarters in California, or the central coordinates for the
    country of the Mac computer of which the simulator is running on.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`CoreLocation`框架确定当前位置的项目可以在模拟器上运行。然而，坐标将是固定的，值为加利福尼亚州苹果公司的总部或运行模拟器的Mac电脑所在国家的中心坐标。
- en: How it works...
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The location data the GPS module provides can be accessed through the `CLLocationManager`
    class. After initializing an instance of the class, we need to subscribe to its
    `UpdatedLocation` event:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: GPS模块提供的位置数据可以通过`CLLocationManager`类访问。初始化类的实例后，我们需要订阅其`UpdatedLocation`事件：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Location data will become available as they are issued through this event.
    It is good practice to also subscribe to the `Failed` event:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当这些事件发布时，位置数据将变得可用。订阅`Failed`事件也是一个好的实践：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When the location manager first requests for location updates, the user is
    informed through a system-specific alert, similar to the following screenshot:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当位置管理器首次请求位置更新时，用户会通过系统特定的警报得到通知，类似于以下截图：
- en: '![How it works...](img/1468EXP_10_01.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/1468EXP_10_01.jpg)'
- en: This alert basically asks for user permission to allow the application to retrieve
    location data. If the user denies this request, the `Failed` event will be triggered
    with the appropriate message. Future location requests will not trigger the permission
    alert, and the user will have to enable location services for the application
    through the device settings, so we need to handle this scenario accordingly.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此警报基本上是请求用户允许应用程序检索位置数据。如果用户拒绝此请求，将触发带有适当信息的`Failed`事件。未来的位置请求将不会触发权限警报，用户必须通过设备设置启用应用程序的位置服务，因此我们需要相应地处理这种情况。
- en: 'After subscribing to the appropriate events, we request the delivery of location
    updates through the `StartUpdatingLocation` method:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在订阅了适当的事件之后，我们通过`StartUpdatingLocation`方法请求发送位置更新：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To stop receiving location updates, we call the `StopUpdatingLocation` method:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要停止接收位置更新，我们调用`StopUpdatingLocation`方法：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There's more...
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `UpdatedLocation` event accepts delegates of the type `EventHandler<CLLocationUpdatedEventArgs>`.
    The `CLLocationUpdatedEventArgs` parameter contains two properties of the type
    `CLLocationCoordinate2D`. The `NewLocation` property contains the most recent
    location information, while the `OldLocation` property contains the previous location
    information. On the first location update, the `OldLocation` property will return
    `null`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`UpdatedLocation`事件接受类型为`EventHandler<CLLocationUpdatedEventArgs>`的委托。`CLLocationUpdatedEventArgs`参数包含两个类型为`CLLocationCoordinate2D`的属性。`NewLocation`属性包含最新的位置信息，而`OldLocation`属性包含之前的位置信息。在第一次位置更新时，`OldLocation`属性将返回`null`。'
- en: 'The coordinates are returned as values of the type `double` and represent the
    coordinates of the position in degrees:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 坐标以`double`类型的值返回，并代表位置的坐标（以度为单位）：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Negative `latitude` values indicate south coordinates, and positive values indicate
    north coordinates. Negative `longitude` values indicate west coordinates, while
    positive `longitude` values indicate east coordinates.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 负的`latitude`值表示南坐标，而正的值表示北坐标。负的`longitude`值表示西坐标，而正的`longitude`值表示东坐标。
- en: The `HorizontalAccuracy` property returns the accuracy in meters of the GPS
    fix. For example, a value of `17m` indicates that the location is determined within
    a circle of a diameter of 17m. Lower values indicate better accuracy.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`HorizontalAccuracy`属性返回GPS定位的精度（以米为单位）。例如，`17m`的值表示位置是在直径为17米的圆内确定的。较低的值表示更好的精度。'
- en: GPS accuracy
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GPS精度
- en: The `UpdateLocation` event might be triggered without a new reading from the
    GPS. This is why we are provided with the previous location, so that we can compare
    the two values for determining whether we have a location change. Also, there
    is always a margin of error in the location data, which is independent of GPS
    hardware, and there are variable factors that define it, such as surrounding buildings,
    various obstacles, and so on. You will notice that the `HorizontalAccuracy` will
    return lower values when the device is outdoors, while higher values will be returned
    when we use the GPS indoors or on a city street with tall buildings.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`UpdateLocation`事件可能会在没有新的GPS读取的情况下被触发。这就是为什么我们提供了之前的位置，以便我们可以比较两个值以确定是否发生了位置变化。此外，位置数据总是存在一定的误差范围，这与GPS硬件无关，并且存在一些变量因素来定义它，例如周围的建筑物、各种障碍物等等。您会注意到，当设备在户外时，`HorizontalAccuracy`将返回较低的值，而当我们在室内使用GPS或在高楼林立的街道上时，将返回较高的值。'
- en: Location services availability
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 位置服务可用性
- en: Not all devices are equipped with location services hardware. Furthermore, even
    if a device is equipped with the appropriate hardware, location services could
    be disabled by the user.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有设备都配备了位置服务硬件。此外，即使设备配备了适当的硬件，用户也可能已禁用位置服务。
- en: 'To determine if the location services are available or enabled on the device,
    we read the return value of the `CLLocationManager.LocationServicesEnabled` static
    property before initializing the location manager object:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定设备上是否启用了位置服务，我们在初始化位置管理器对象之前读取`CLLocationManager.LocationServicesEnabled`静态属性的返回值：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Location services usage indicator
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 位置服务使用指示器
- en: 'When any type of location service is used, the location services icon appears
    on the right side of the status bar, next to the battery indicator:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用任何类型的定位服务时，定位服务图标将出现在状态栏的右侧，紧邻电池指示器：
- en: '![Location services usage indicator](img/1468EXP_10_02.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![位置服务使用指示器](img/1468EXP_10_02.jpg)'
- en: This indicator only appears on the device and not on the simulator.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此指示器仅在设备上显示，而不在模拟器上显示。
- en: See also
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'In this chapter:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中：
- en: '*Determining heading*'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*确定航向*'
- en: '*Location services in the background*'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*后台位置服务*'
- en: Determining heading
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定航向
- en: In this recipe, we will learn how to use the built-in compass to determine heading.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将学习如何使用内置指南针来确定航向。
- en: Getting ready
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in MonoDevelop, and name it `HeadingApp`. Just like in
    the previous task, add two buttons and a label on the view of `MainController`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在MonoDevelop中创建一个新的项目，并将其命名为`HeadingApp`。就像在之前的任务中一样，在`MainController`的视图中添加两个按钮和一个标签。
- en: Note
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The project in this task cannot be tested on the simulator. A device with compass
    hardware (magnetometer) is required.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 本任务中的项目无法在模拟器上测试。需要一个带有指南针硬件（磁力计）的设备。
- en: How to do it...
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Heading information is once more retrieved through the `CLLocationManager` class.
    Create and initialize an instance in the `MainController` class.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 航向信息再次通过`CLLocationManager`类检索。在`MainController`类中创建并初始化一个实例。
- en: 'Add the following code in the `ViewDidLoad` method:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ViewDidLoad`方法中添加以下代码：
- en: '[PRE8]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add the following method:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法：
- en: '[PRE9]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Compile and run the application on the device.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备上编译并运行应用程序。
- en: Tap the start button and rotate the device to view the different heading values.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击开始按钮并旋转设备以查看不同的航向值。
- en: How it works...
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'To retrieve the heading information, we first need to subscribe to the location
    manager''s `UpdatedHeading` event:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要检索航向信息，我们首先需要订阅定位管理器的`UpdatedHeading`事件：
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To initiate the delivery of heading information, we call the `StartUpdatingHeading`
    method:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动航向信息的传输，我们调用`StartUpdatingHeading`方法：
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Inside the `UpdatedHeading` event handler, we retrieve the heading information
    through the `MagneticHeading` property of the `CLHeading` object, exposed through
    the event arguments'' `NewHeading` property:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在`UpdatedHeading`事件处理程序内部，我们通过事件参数的`NewHeading`属性，通过`CLHeading`对象的`MagneticHeading`属性检索航向信息：
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To stop retrieving heading updates, we call the `StopUpdatingHeading` method:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要停止检索航向更新，我们调用`StopUpdatingHeading`方法：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: There's more...
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'The heading is measured in degrees. The values for the four points of the horizon,
    as can be viewed on a simple compass, are the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 航向以度为单位测量。地平线四个方向的值，如简单指南针上所示，如下：
- en: '`0` **or** `360` **degrees:** North; the magnetometer will return values of
    up to `359.99` degrees, and then go to `0` when the device is heading north'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0` **或** `360` **度：** 北；磁力计将返回最多`359.99`度的值，当设备朝北时，将回到`0`。'
- en: '`90` **degrees:** East'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`90` **度：** 东'
- en: '`180` **degrees:** South'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`180` **度：** 南'
- en: '`270` **degrees:** West'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`270` **度：** 西'
- en: Magnetic versus true heading
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 磁航向与真航向
- en: '**Magnetic heading** is the heading that is based on what a normal compass
    will show as north. **True heading** is the true direction of north, based on
    the actual position of the Earth''s north pole. There is a slight difference between
    the two, which varies with time, and it is usually about `2` degrees.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**磁航向**是基于普通指南针显示的北方。**真航向**是基于地球北极实际位置的北方方向。两者之间略有差异，随时间变化，通常约为`2`度。'
- en: The `CLHeading` class provides both readings through the `MagneticHeading` and
    `TrueHeading` properties. This provides a significant help to developers, since
    calculating the difference between the two requires either expensive equipment,
    or very difficult calculations based on the time of year and other factors.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`CLHeading`类通过`MagneticHeading`和`TrueHeading`属性提供两种读数。这对开发者来说非常有帮助，因为计算两者之间的差异可能需要昂贵的设备，或者基于年份和其他因素进行非常复杂的计算。'
- en: Compass availability
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 罗盘可用性
- en: 'The magnetometer, a module that can determine the heading in degrees and provides
    compass functionality to devices, is not available on all devices. To check if
    a device can provide heading information, retrieve the value from the `CLLocationManager.HeadingAvailable`
    static property:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 磁力计，一个可以确定航向（以度为单位）并为设备提供指南针功能的模块，并非所有设备都可用。要检查设备是否可以提供航向信息，请从`CLLocationManager.HeadingAvailable`静态属性中检索值：
- en: '[PRE14]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: See also
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'In this chapter:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中：
- en: '*Determining location*'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*确定位置*'
- en: '*Location services in the background*'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*后台位置服务*'
- en: Using region monitoring
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用区域监控
- en: In this recipe, we will discuss how to use the GPS to respond to region-specific
    position changes.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将讨论如何使用 GPS 来响应特定区域的位置变化。
- en: Getting ready
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in MonoDevelop, and name it `RegionApp`. Add two buttons
    and a label on the view of `MainController`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MonoDevelop 中创建一个新的项目，并将其命名为 `RegionApp`。在 `MainController` 的视图中添加两个按钮和一个标签。
- en: How to do it...
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create two fields in the `MainController` class:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MainController` 类中创建两个字段：
- en: '[PRE15]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the `ViewDidLoad` method, initialize it, and subscribe to the `UpdatedLocation,
    RegionEntered`, and `RegionLeft` events:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ViewDidLoad` 方法中，对其进行初始化，并订阅 `UpdatedLocation`、`RegionEntered` 和 `RegionLeft`
    事件：
- en: '[PRE16]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Enter the following event handlers in the class:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类中输入以下事件处理程序：
- en: '[PRE17]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the start button''s `TouchUpInside` handler, call the `StartUpdatingLocation`
    method:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开始按钮的 `TouchUpInside` 处理程序中，调用 `StartUpdatingLocation` 方法：
- en: '[PRE18]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In the stop button''s `TouchUpInside` handler, call the `StopMonitoring` method:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在停止按钮的 `TouchUpInside` 处理程序中，调用 `StopMonitoring` 方法：
- en: '[PRE19]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This application needs to be tested on a device that supports region monitoring.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序需要在支持区域监控的设备上进行测试。
- en: How it works...
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Region monitoring is a feature that monitors for boundary crossings. When a
    boundary of a specific region is crossed, the `CLLocationManager` object issues
    the appropriate events:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 区域监控是一个监控边界穿越的功能。当特定区域的边界被穿越时，`CLLocationManager` 对象会触发适当的事件：
- en: '[PRE20]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In this example, we define the region based on the current location; hence,
    we also subscribe to the `UpdatedLocation` event.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们根据当前位置定义区域；因此，我们也订阅了 `UpdatedLocation` 事件。
- en: 'When the application starts receiving location updates, it first checks for
    location accuracy:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序开始接收位置更新时，它首先检查位置精度：
- en: '[PRE21]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If the desired accuracy is achieved (<100m, modify at your discretion), we
    initialize the `CLRegion` object:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果达到了所需的精度（<100m，可自行修改），我们初始化 `CLRegion` 对象：
- en: '[PRE22]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `CLRegion` class is used to define regions. Here, we create the region to
    be monitored based on our current location in the first parameter. The second
    parameter declares the radius around the coordinate, in meters, defining the region
    boundary. The third parameter is a string identifier for the region.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`CLRegion` 类用于定义区域。在这里，我们根据我们的当前位置在第一个参数中创建要监控的区域。第二个参数声明了坐标周围的半径（以米为单位），定义了区域边界。第三个参数是区域的字符串标识符。'
- en: 'To start monitoring the region, we call the `StartMonitoring` method:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始监控区域，我们调用 `StartMonitoring` 方法：
- en: '[PRE23]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The first parameter is the region to be monitored, while the second parameter
    defines the desired accuracy in meters for the boundary crossings. This value
    acts as an accuracy offset that prevents the system from triggering successive
    `enter` and `left` events when the user is traveling close to the region's boundary.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是要监控的区域，第二个参数定义了边界穿越所需的精度（以米为单位）。此值作为精度偏移量，防止系统在用户接近区域边界时触发连续的 `进入` 和 `离开`
    事件。
- en: When region monitoring has started, the appropriate events will be triggered
    when the device enters or leaves the region based on the desired accuracy value.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当区域监控开始时，当设备进入或离开区域时，将根据所需的精度值触发适当的事件。
- en: There's more...
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Region monitoring is a very useful feature. For example, an application could
    provide specific information to users based on their proximity to various areas.
    Furthermore, it can notify of boundary crossings while the application is in the
    background.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 区域监控是一个非常实用的功能。例如，一个应用程序可以根据用户接近的不同区域提供特定的信息。此外，它可以在应用程序在后台时通知边界穿越。
- en: Region monitoring availability
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 区域监控可用性
- en: 'To check if a device supports region monitoring, retrieve the value of the
    `RegionMonitoringAvailable` static property:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查设备是否支持区域监控，检索 `RegionMonitoringAvailable` 静态属性的值：
- en: '[PRE24]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: See also
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'In this chapter:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中：
- en: '*Using significant-change location service*'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用显著变化的位置服务*'
- en: '*Location services in the background*'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*后台位置服务*'
- en: Using significant-change location service
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用显著变化的位置服务
- en: In this recipe, we will learn how to use the significant-change location monitoring
    feature.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何使用显著变化的位置监控功能。
- en: Getting ready
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in MonoDevelop, and name it `SLCApp`. Add a label and two
    buttons on the view of `MainController`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MonoDevelop 中创建一个新的项目，并将其命名为 `SLCApp`。在 `MainController` 的视图中添加一个标签和两个按钮。
- en: How to do it...
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Add the following code in the `ViewDidLoad` method:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ViewDidLoad`方法中添加以下代码：
- en: '[PRE25]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Add the following method:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法：
- en: '[PRE26]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Compile and run the application on the device.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备上编译并运行应用程序。
- en: Tap the **start** button to start monitoring for significant location changes.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**开始**按钮以开始监控显著位置变化。
- en: How it works...
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The significant-change location service monitors for significant location changes
    and provides location information when these changes occur. In terms of power
    consumption, it is the less demanding location service. It uses the device's cellular
    radio transceiver to determine the user's location. Only devices equipped with
    a cellular radio transceiver can use this service.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 显著变化位置服务监控显著的位置变化，并在这些变化发生时提供位置信息。在功耗方面，它是要求较低的位置服务。它使用设备的蜂窝无线电收发器来确定用户的位置。只有配备了蜂窝无线电收发器的设备才能使用此服务。
- en: 'The code for using the significant-change location service is similar to the
    code of the standard location services. The only differences are the methods of
    starting and stopping the service. To start the service, we call the `StartMonitoringSignificantLocationChanges`
    method:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 使用显著变化位置服务的代码与标准位置服务的代码类似。唯一的不同之处在于启动和停止服务的方法。要启动服务，我们调用`StartMonitoringSignificantLocationChanges`方法：
- en: '[PRE27]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Location updates are issued through the `UpdatedLocation` event handler, which
    is the same event that we use for the standard location service:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 位置更新通过`UpdatedLocation`事件处理程序发布，这与我们用于标准位置服务的事件相同：
- en: '[PRE28]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: There's more...
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: The significant-change location service can report location changes while in
    the background, waking up the application.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 显著变化位置服务可以在后台报告位置变化，唤醒应用程序。
- en: Significant-change location service availability
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显著变化位置服务可用性
- en: 'To determine if a device is capable of using the significant-change location
    service, retrieve the value of the `SignificantLocationChangeMonitoringAvailable`
    static property:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定设备是否能够使用显著变化位置服务，检索`SignificantLocationChangeMonitoringAvailable`静态属性的值：
- en: '[PRE29]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: See also
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'In this chapter:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中：
- en: '*Using region monitoring*'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用区域监控*'
- en: '*Location services in the background*'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*后台位置服务*'
- en: Location services in the background
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 后台位置服务
- en: In this recipe, we will discuss how to use location services while the application
    is in the background.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将讨论如何在应用处于后台时使用位置服务。
- en: Getting ready
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in MonoDevelop, and name it `BackgroundLocationApp`. Just
    like in the previous tasks, add a label and two buttons on the view of `MainController`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在MonoDevelop中创建一个新的项目，并将其命名为`BackgroundLocationApp`。就像在之前的任务中一样，在`MainController`的视图中添加一个标签和两个按钮。
- en: How to do it...
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: In the **Solution** pane, double-click on the **Info.plist** file to open it.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**解决方案**面板中，双击**Info.plist**文件以打开它。
- en: Under the **Advanced** tab, add a new key by clicking on the plus (+) sign or
    by right-clicking and selecting **New Key** from the context menu.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**高级**选项卡下，通过单击加号（+）或通过右键单击并从上下文菜单中选择**新建键**来添加一个新键。
- en: Select **Required background modes** from the drop-down list, or just type `UIBackgroundModes`
    in the field.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉列表中选择**必需的后台模式**，或者在字段中直接输入`UIBackgroundModes`。
- en: Expand the key and right-click on the empty item below it. Click **New Key**
    on the context menu. In its **Value** field, enter the word `location`.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开键，在其下方的空白项上右键单击。在上下文菜单中单击**新建键**。在其**值**字段中输入单词`location`。
- en: Save the document. When done, you should have something like in the following
    screenshot:![How to do it...](img/1468EXP_10_03.jpg)
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文档。完成后，你应该会有以下截图所示的内容：![如何做...](img/1468EXP_10_03.jpg)
- en: In the `MainController` class, enter the same code as the one used in the *Determining
    location* recipe in this chapter.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainController`类中，输入与本章中*确定位置*菜谱中使用的相同代码。
- en: 'At the bottom of the `LocationManager_UpdatedLocation` method, add the following
    line:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`LocationManager_UpdatedLocation`方法的底部添加以下行：
- en: '[PRE30]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Compile and run the application on the device.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备上编译并运行应用程序。
- en: Tap the **Start** button to start receiving location updates. Press the **Home**
    button on the device to make the application move to the background. Watch MonoDevelop's
    **Application Output** pad displaying location updates.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**开始**按钮以开始接收位置更新。按设备上的**主页**按钮使应用程序进入后台。观察MonoDevelop的**应用程序输出**面板显示位置更新。
- en: How it works...
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To receive location updates while the application is in the background, we need
    to set the location value to the `UIBackgroundModes` key in the **Info.plist**
    file. This basically makes sure that the application has the appropriate permission
    to receive location updates while it is in the background and that it will not
    get suspended.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 要在应用程序处于后台时接收位置更新，我们需要在 **Info.plist** 文件中将位置值设置为 `UIBackgroundModes` 键。这基本上确保了应用程序在后台时具有接收位置更新的适当权限，并且它不会挂起。
- en: 'To make sure that the application is receiving location updates, check the
    status bar. The location services icon should be displayed:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保应用程序正在接收位置更新，请检查状态栏。位置服务图标应该显示：
- en: '![How it works...](img/1468EXP_10_04.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/1468EXP_10_04.jpg)'
- en: There's more...
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: Setting the `UIBackgroundModes` key for location services is only needed for
    the standard location service. By default both the region monitoring and significant-change
    location services support delivery of location updates while the application is
    in the background. While one of these location services has started updating for
    location data, the application can even be terminated. When a location update
    is received, the application is started or woken up from the suspended state and
    is given a limited amount of time to execute code.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 为位置服务设置 `UIBackgroundModes` 键仅适用于标准位置服务。默认情况下，区域监控和重大变化位置服务都支持在应用程序处于后台时传输位置更新。当其中一个位置服务开始更新位置数据时，应用程序甚至可以被终止。当接收到位置更新时，应用程序将被启动或从挂起状态唤醒，并给予有限的时间来执行代码。
- en: 'To determine if an application has been started by one of these two location
    services, check the options parameter of the `FinishedLaunching` method in the
    `AppDelegate` class:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定应用程序是否由这两个位置服务之一启动，请检查 `AppDelegate` 类中 `FinishedLaunching` 方法的选项参数：
- en: '[PRE31]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The options parameter is of the type `NSDictionary`. If this dictionary contains
    the `LaunchOptionsLocationKey`, then the application has been started or woken
    up from suspended state due to a location service. When that is the case, we need
    to call the `StartMonitoringSignificantLocationChanges` method on a `CLLocationManager`
    instance again to retrieve the location data.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 选项参数的类型为 `NSDictionary`。如果这个字典包含 `LaunchOptionsLocationKey`，则应用程序是由于位置服务而被启动或从挂起状态唤醒的。在这种情况下，我们需要在
    `CLLocationManager` 实例上再次调用 `StartMonitoringSignificantLocationChanges` 方法来检索位置数据。
- en: The same applies to region monitoring location service. Note that if we use
    either of these two location services, but our application does not support the
    background delivery of location events, then we have to make sure to stop monitoring
    for location updates when they are no longer needed. If we do not, then the location
    services will continue to run, causing significant battery drain.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 同样适用于区域监控位置服务。请注意，如果我们使用这两个位置服务之一，但我们的应用程序不支持位置事件的后台传输，那么我们必须确保在不再需要时停止监控位置更新。如果我们不这样做，那么位置服务将继续运行，导致电池消耗显著增加。
- en: Restricting to supported hardware
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 限制到支持的硬件
- en: If our application's features are fully dependent on location services and cannot
    operate correctly on devices that do not support them, we have to add the key
    `UIRequiredDeviceCapabilities` in the **Info.plist** file, with the value `location-services`.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的应用程序的功能完全依赖于位置服务，并且不能在不支持它们的设备上正确运行，我们必须在 **Info.plist** 文件中添加键 `UIRequiredDeviceCapabilities`，其值为
    `location-services`。
- en: Furthermore, when the application requires the use of the standard location
    service, which uses the GPS hardware, we need to add the value `gps` to this key.
    This way, we make sure the application will not be available through the application
    store to devices that are not equipped with the appropriate hardware.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当应用程序需要使用使用 GPS 硬件的标准位置服务时，我们需要将值 `gps` 添加到这个键中。这样，我们确保应用程序不会通过应用商店提供给未配备适当硬件的设备。
- en: See also
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'In this chapter:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中：
- en: '*Determining location*'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*确定位置*'
- en: 'In this book:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中：
- en: '[Chapter 1](ch01.html "Chapter 1. Development Tools"), Development Tools:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 1 章](ch01.html "第 1 章。开发工具")，开发工具：'
- en: '*Creating an iPhone project in MonoDevelop*'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在 MonoDevelop 中创建 iPhone 项目*'
- en: Displaying maps
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示地图
- en: In this recipe, we will learn how to display maps on the screen.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将学习如何在屏幕上显示地图。
- en: Getting ready
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in MonoDevelop, and name it `MapDisplayApp`.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MonoDevelop 中创建一个新的项目，并将其命名为 `MapDisplayApp`。
- en: How to do it...
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Add an `MKMapView` on the view of `MainController`. Enter the following `using`
    directives:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MainController` 的视图中添加一个 `MKMapView`。输入以下 `using` 指令：
- en: '[PRE32]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Add the following code in the `MainController` class:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MainController` 类中添加以下代码：
- en: '[PRE33]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Compile and run the application either on the simulator or on the device. If
    the application is run on the simulator, the default location will be Apple's
    headquarters in **Cupertino:**![How to do it...](img/1468EXP_10_05.jpg)
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模拟器或设备上编译并运行应用程序。如果应用程序在模拟器上运行，默认位置将是苹果公司的总部位于 **库比蒂诺**：![如何操作...](img/1468EXP_10_05.jpg)
- en: Zoom or pan the map to output the current location in the **Application Output**.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 放大或平移地图以在 **应用程序输出** 中输出当前位置。
- en: How it works...
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `MonoTouch.MapKit` namespace wraps all the objects contained in the `MapKit`
    framework. The `MapKit` framework uses Google maps to display maps.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`MonoTouch.MapKit` 命名空间封装了 `MapKit` 框架中包含的所有对象。`MapKit` 框架使用谷歌地图来显示地图。'
- en: The `MKMapView` is the default iOS view that displays maps. It is especially
    designed for this purpose, and it should not be sub-classed.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`MKMapView` 是默认的 iOS 视图，用于显示地图。它专门为此目的而设计，不应被子类化。'
- en: To display the user's location on the map, we set its `ShowsUserLocation` property
    to `true:`
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 要在地图上显示用户的位置，我们将它的 `ShowsUserLocation` 属性设置为 `true`：
- en: '[PRE34]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This activates the standard location service to start receiving location updates
    and handing them over to the `MKMapView` object internally.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这将激活标准位置服务以开始接收位置更新并将它们内部传递给 `MKMapView` 对象。
- en: 'To determine when the user zooms or pans the map, we subscribe to the `RegionChanged`
    event:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定用户何时放大或平移地图，我们订阅 `RegionChanged` 事件：
- en: '[PRE35]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Inside the event handler, we retrieve the current location through the `UserLocation`
    property:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在事件处理程序内部，我们通过 `UserLocation` 属性检索当前位置：
- en: '[PRE36]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: If the `ShowsUserLocation` property is set to `false`, the location services
    will not be activated, and the `UserLocation.Location` property will return `null`.
    It will also return `null` when the application runs for the first time, since
    it will ask the user for permission of using location services. However, a map
    will be displayed, as long as the device or simulator have an active Internet
    connection.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将 `ShowsUserLocation` 属性设置为 `false`，则位置服务将不会激活，并且 `UserLocation.Location`
    属性将返回 `null`。当应用程序首次运行时，它也会返回 `null`，因为它会请求用户使用位置服务的权限。然而，只要设备或模拟器有活跃的互联网连接，就会显示地图。
- en: There's more...
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'We can set the center coordinate of the map to be displayed with the `SetCenterCoordinate`
    method:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `SetCenterCoordinate` 方法设置要显示的地图的中心坐标：
- en: '[PRE37]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The first parameter is the map coordinates that we want the map to be centered
    at, represented by an object of the type `CLLocationCoordinate2D`. The second
    parameter declares if we want the centering of the map to be animated or not.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是我们希望地图中心对齐的地图坐标，表示为 `CLLocationCoordinate2D` 类型的对象。第二个参数声明我们是否希望地图中心对齐是动画的。
- en: 'Apart from centering the map, we can also set its zoom level. We do this through
    the `SetRegion` method:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 除了对齐地图外，我们还可以设置其缩放级别。我们通过 `SetRegion` 方法来完成：
- en: '[PRE38]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The first parameter is of type `MKCoordinateRegion`. Here, its `FromDistance`
    static method is used to create an instance. Its first parameter is the coordinate
    of the region's center, while the next two parameters represent the horizontal
    and vertical span of the map to display, in meters. What this basically means
    is that the region represented by this `MKCoordinateRegion` instance will have
    `mapCoordinates` at the center, and the horizontal and vertical part of the map
    will each represent `1000` meters on the map.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是 `MKCoordinateRegion` 类型。在这里，使用其 `FromDistance` 静态方法创建一个实例。其第一个参数是区域中心的坐标，接下来的两个参数代表要显示的地图的水平范围和垂直范围，单位为米。这基本上意味着由这个
    `MKCoordinateRegion` 实例表示的区域将以 `mapCoordinates` 为中心，地图的水平部分和垂直部分将分别代表地图上的 `1000`
    米。
- en: Note that the `MKMapView` will set the actual region to an approximation to
    the values of `MKCoordinateRegion`. This is because the dimensions of `MKMapView`
    cannot always match the horizontal and vertical span values provided. For example,
    here we set a square region of `1000x1000` meters, but our `MKMapView` layout
    is not an absolute square, since it basically takes over all of the screen. We
    can retrieve the actual region of map the `MKMapView` is displaying through its
    `Region` property.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`MKMapView`会将实际区域设置为`MKCoordinateRegion`值的近似。这是因为`MKMapView`的尺寸不能总是与提供的水平和垂直跨度值匹配。例如，这里我们设置了一个`1000x1000`米的正方形区域，但我们的`MKMapView`布局并不是一个绝对的正方形，因为它基本上占据了整个屏幕。我们可以通过其`Region`属性检索`MKMapView`显示的实际地图区域。
- en: Things to have in mind when using MapKit
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用MapKit时需要注意的事项
- en: The `MapKit` framework uses the Google Maps and Google Earth APIs to display
    maps. Usage of this framework binds the developer with Google's terms of service,
    which can be viewed at [http://code.google.com/apis/maps/iphone/terms.html](http://code.google.com/apis/maps/iphone/terms.html).
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`MapKit`框架使用Google Maps和Google Earth API来显示地图。使用此框架将开发者绑定到Google的服务条款，可在[http://code.google.com/apis/maps/iphone/terms.html](http://code.google.com/apis/maps/iphone/terms.html)查看。'
- en: One important term that can directly affect whether your application will be
    rejected or not on the Application Store is the usage of the Google logo over
    the maps. Care should be taken that the logo is always visible when displaying
    maps.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可能直接影响你的应用程序是否会在应用商店被拒绝的重要术语是在地图上使用Google标志。应确保在显示地图时标志始终可见。
- en: See also
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'In this chapter:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中：
- en: '*Geocoding*'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*地理编码*'
- en: '*Adding map annotations*'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加地图标注*'
- en: '*Adding map overlays*'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加地图覆盖*'
- en: Geocoding
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 地理编码
- en: In this recipe, we will learn how to provide address, city, or country information
    based on location coordinates.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将学习如何根据位置坐标提供地址、城市或国家信息。
- en: Getting ready
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in MonoDevelop, and name it `GeocodingApp`.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在MonoDevelop中创建一个新的项目，并将其命名为`GeocodingApp`。
- en: How to do it...
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Add an `MKMapView` on the top half of the view of `MainController` and a label
    and a button on the bottom half. Add the `MonoTouch.MapKit` and `MonoTouch.CoreLocation`
    namespaces.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainController`视图的上半部分添加一个`MKMapView`，在下半部分添加一个标签和一个按钮。添加`MonoTouch.MapKit`和`MonoTouch.CoreLocation`命名空间。
- en: 'Enter the following `ViewDidLoad` override in the `MainController` class:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainController`类中输入以下`ViewDidLoad`重写方法：
- en: '[PRE39]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Create the following nested class:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建以下嵌套类：
- en: '[PRE40]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Compile and run the application either on the simulator or on the device. If
    run on the device, when you tap on the button, location information about the
    country and area you are in at the present time will be displayed on the label.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模拟器或设备上编译并运行应用程序。如果在设备上运行，当你点击按钮时，将在标签上显示你当前所在的国家和地区的位置信息。
- en: How it works...
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '**Geocoding** is the process of matching address information to geographic
    coordinates. **Reverse geocoding** is the process of matching geographic coordinates
    to address information. Only the latter is available on iOS. There are forward
    geocoding services available online that can be used, however.'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '**地理编码**是将地址信息与地理坐标匹配的过程。**反向地理编码**是将地理坐标与地址信息匹配的过程。iOS上仅提供后者。然而，在线上还有可用的正向地理编码服务。'
- en: 'To reverse geocode geographic coordinates, we use the `MKReverseGeocoder` class:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行反向地理编码，我们使用`MKReverseGeocoder`类：
- en: '[PRE41]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'This class needs a delegate object that will provide the information. The class
    we will create for the delegate object of `MKReverseGeocoder` must inherit the
    `MKReverseGeocoderDelegate` class:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 此类需要一个提供信息的代理对象。我们将为`MKReverseGeocoder`的代理对象创建的类必须继承自`MKReverseGeocoderDelegate`类：
- en: '[PRE42]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Inside the delegate object, we need to override two methods. The first one is
    `FoundWithPlacemark:`
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在代理对象内部，我们需要重写两个方法。第一个是`FoundWithPlacemark:`
- en: '[PRE43]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: This is the method that will be triggered when the reverse geocoder retrieves
    the geocoding information. The information is contained in the `placemark` parameter,
    which is of the type `MKPlacemark`. As shown in the previous highlighted code,
    the information is available through various properties of the `MKPlacemark` class.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 这是当反向地理编码器检索地理编码信息时将被触发的方法。信息包含在`placemark`参数中，该参数是`MKPlacemark`类型。如前所述的高亮代码所示，信息可以通过`MKPlacemark`类的各种属性获取。
- en: The second method we need to override is `FailedWithError:`
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要重写的第二个方法是`FailedWithError:`
- en: '[PRE44]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: This method is triggered when reverse geocoding fails for some reason. The information
    is contained in the `error` parameter.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 当由于某种原因反向地理编码失败时，此方法会被触发。信息包含在 `error` 参数中。
- en: 'To initialize the instance of the `MKReverseGeocoder` class, we pass the coordinates
    with an object of the type `CLLocationCoordinate2D` that we want geocoding information
    for, to its constructor:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 要初始化 `MKReverseGeocoder` 类的实例，我们将我们想要地理编码信息的坐标与类型为 `CLLocationCoordinate2D`
    的对象传递给其构造函数：
- en: '[PRE45]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'After assigning its delegate object, we call the `Start` method to reverse
    geocode the coordinates:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在分配其代理对象后，我们调用 `Start` 方法来反向地理编码坐标：
- en: '[PRE46]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: There's more...
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: Detailed information on the location address can be retrieved through the `AddressDisctionary`
    property of the `MKPlacemark` class, which is of the type `NSDictionary`.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过 `MKPlacemark` 类的 `AddressDictionary` 属性检索位置地址的详细信息，该属性是 `NSDictionary`
    类型。
- en: Things to have in mind when using the MKReverseGeocoder class
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 `MKReverseGeocoder` 类时需要注意的事项
- en: 'The `MKReverseGeocoder` class is part of the `MapKit` framework. Usage of this
    class binds the developer to Google''s terms of service: [http://code.google.com/apis/maps/iphone/terms.html](http://code.google.com/apis/maps/iphone/terms.html).'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`MKReverseGeocoder` 类是 `MapKit` 框架的一部分。使用此类将开发者绑定到 Google 的服务条款：[http://code.google.com/apis/maps/iphone/terms.html](http://code.google.com/apis/maps/iphone/terms.html)。'
- en: One important term of using the reverse geocoding service is that it should
    always be used in combination with a Google map. Furthermore, to avoid abuse of
    the service, Apple recommends not to make more than one reverse geocoding call
    per minute.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 使用反向地理编码服务的一个重要条款是，它应该始终与 Google 地图结合使用。此外，为了避免滥用服务，Apple 建议每分钟不要进行超过一次反向地理编码调用。
- en: See also
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'In this chapter:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中：
- en: '*Displaying maps*'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*显示地图*'
- en: '*Adding map annotations*'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加地图注释*'
- en: '*Adding map overlays*'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加地图覆盖*'
- en: Adding map annotations
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加地图注释
- en: In this recipe, we will discuss annotating a map to display various information.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将讨论如何注释地图以显示各种信息。
- en: Getting ready
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in MonoDevelop, and name it `MapAnnotateApp`.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MonoDevelop 中创建一个新的项目，并将其命名为 `MapAnnotateApp`。
- en: How to do it...
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Add an `MKMapView` on the view of `MainController`. Leave some room at the bottom,
    and add a button.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MainController` 的视图中添加一个 `MKMapView`。在底部留出一些空间，并添加一个按钮。
- en: 'Add the namespaces `MonoTouch.MapKit` and `Monotouch.CoreLocation`, and enter
    the following code in the `ViewDidLoad` override:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加命名空间 `MonoTouch.MapKit` 和 `Monotouch.CoreLocation`，并在 `ViewDidLoad` 覆盖方法中输入以下代码：
- en: '[PRE47]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Create the following nested class:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建以下嵌套类：
- en: '[PRE48]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Compile and run the application either on the simulator or on the device. If
    run on the simulator, when you tap on the button, the result should be similar
    to the following screenshot:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模拟器或设备上编译并运行应用程序。如果在模拟器上运行，当你点击按钮时，结果应该类似于以下截图：
- en: '![How to do it...](img/1468EXP_10_06.jpg)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/1468EXP_10_06.jpg)'
- en: Tapping on Add pin displays the callout bubble, with the annotation title and
    subtitle.
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击“添加引脚”会显示带有注释标题和副标题的呼叫气泡。
- en: How it works...
  id: totrans-293
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Annotating maps is very useful for providing various information along with
    map data. We can use the `MKPointAnnotation` class to create a simple annotation:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 注释地图对于提供与地图数据相关的各种信息非常有用。我们可以使用 `MKPointAnnotation` 类来创建一个简单的注释：
- en: '[PRE49]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: We assign the map coordinates the annotation will appear on and, optionally,
    a title and a subtitle. We then add the annotation to the map view with the `AddAnnotation`
    method.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为注释将出现的地图坐标分配，以及可选的标题和副标题。然后我们使用 `AddAnnotation` 方法将注释添加到地图视图中。
- en: 'Just adding an annotation object to a map view is not enough. The annotation
    needs a view that will display its information. This is accomplished by creating
    a delegate object for the map view and overriding its `GetViewForAnnotation` method:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 仅向地图视图添加注释对象是不够的。注释需要一个显示其信息的视图。这是通过为地图视图创建一个代理对象并覆盖其 `GetViewForAnnotation`
    方法来实现的：
- en: '[PRE50]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Since the map already displays the user location, an annotation already exists,
    and it is of the type `MKUserLocation`. Inside the `GetViewForAnnotation`, we
    have to make sure to provide a view for our own annotation by checking the type
    of annotation parameter:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 由于地图已经显示了用户位置，已经存在一个注释，并且它是 `MKUserLocation` 类型。在 `GetViewForAnnotation` 中，我们必须确保通过检查注释参数的类型来为我们自己的注释提供一个视图：
- en: '[PRE51]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'In this case, we just return `null`. If the annotation parameter is of the
    type `MKPointAnnotation`, then we first try to retrieve the view for it, in a
    similar fashion to the `UITableView` that creates the cells it contains:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们只返回 `null`。如果注释参数是 `MKPointAnnotation` 类型，那么我们首先尝试检索它的视图，类似于 `UITableView`
    创建它包含的单元格：
- en: '[PRE52]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'If the result of the `DequeueReusableAnnotation` method is `null`, then we
    initialize a new instance for our annotation view:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `DequeueReusableAnnotation` 方法的返回结果是 `null`，那么我们为我们的注释视图初始化一个新的实例：
- en: '[PRE53]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The view we create for the annotation here is of the type `MKPinAnnotationView`.
    This is the standard view that is represented by a pin on the map. The properties
    that we set are pretty straightforward and define its appearance and behavior.
    The `PinColor` property defines the color of the pin, the `AnimatesDrop` property
    defines if the pin will be displayed on the map with an animation, and the `CanShowCallout`
    property defines if the annotation view will display the information of its underlying
    annotation in a callout "bubble".
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为注释创建的视图是 `MKPinAnnotationView` 类型。这是由地图上的针表示的标准视图。我们设置的属性相当直接，定义了其外观和行为。`PinColor`
    属性定义了针的颜色，`AnimatesDrop` 属性定义了针是否以动画形式显示在地图上，而 `CanShowCallout` 属性定义了注释视图是否在呼出气泡中显示其底层注释的信息。
- en: 'After we have created the view for the annotation, we just return it from the
    method:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建了注释视图之后，我们只需从方法中返回它：
- en: '[PRE54]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: There's more...
  id: totrans-308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: We can also create custom annotations and annotation views. For annotations,
    we have to override the `MKAnnotation` class, while for annotation views we can
    override the `MKAnnotationView` class.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以创建自定义注释和注释视图。对于注释，我们必须重写 `MKAnnotation` 类，而对于注释视图，我们可以重写 `MKAnnotationView`
    类。
- en: Annotation performance
  id: totrans-310
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释性能
- en: Theoretically, we can add as many annotations as we want to a map view. Although
    the `MKMapView` can manage a large amount of annotations efficiently, it is strongly
    advised to take into account a performance degradation. A way to overcome this
    is to display annotations depending on the current map region, which basically
    manages the zoom level of the map. Another way is to make sure we use the same
    instances of annotation views for the annotations that do not need different annotation
    views.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，我们可以向地图视图添加任意数量的注释。虽然 `MKMapView` 可以高效地管理大量注释，但强烈建议考虑性能下降。一种克服这个问题的方法是根据当前地图区域显示注释，这基本上管理了地图的缩放级别。另一种方法是确保我们为不需要不同注释视图的注释使用相同的注释视图实例。
- en: See also
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: 'In this chapter:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中：
- en: '*Displaying maps*'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*显示地图*'
- en: '*Adding map overlays*'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加地图覆盖*'
- en: 'In this book:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中：
- en: '[Chapter 5](ch05.html "Chapter 5. Displaying Data"), Displaying Data:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '[第5章](ch05.html "第5章。显示数据"), 显示数据：'
- en: '*Displaying data in a table*'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在表中显示数据*'
- en: Adding map overlays
  id: totrans-319
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加地图覆盖
- en: In this recipe, we will discuss using overlays to draw on a map.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将讨论使用覆盖层在地图上绘制。
- en: Getting ready
  id: totrans-321
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in MonoDevelop, and name it `MapOverlayApp`.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MonoDevelop 中创建一个新的项目，并将其命名为 `MapOverlayApp`。
- en: How to do it...
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Add an `MKMapView` on the view of `MainController`. Leave some room at the bottom,
    and add a button.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MainController` 的视图中添加一个 `MKMapView`。在底部留出一些空间，并添加一个按钮。
- en: 'Add the namespaces `MonoTouch.MapKit` and `Monotouch.CoreLocation`, and enter
    the following code in the `ViewDidLoad` override:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加命名空间 `MonoTouch.MapKit` 和 `Monotouch.CoreLocation`，并在 `ViewDidLoad` 重写中输入以下代码：
- en: '[PRE55]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Add the following nested class:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下嵌套类：
- en: '[PRE56]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Compile and run the application either on the simulator or on the device. If
    run on the simulator, after tapping the button, the result should be similar to
    the following:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模拟器或设备上编译并运行应用程序。如果在模拟器上运行，在点击按钮后，结果应该类似于以下内容：
- en: '![How to do it...](img/1468EXP_10_07.jpg)'
  id: totrans-330
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/1468EXP_10_07.jpg)'
- en: How it works...
  id: totrans-331
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: While an `MKAnnotation` represents a point on a map, an `MKOverlay` object can
    represent an area on a map. In this example, we use the `MKCircle` class, which
    inherits from `MKOverlay`, to display a circle over an area on the map.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `MKAnnotation` 代表地图上的一个点，但 `MKOverlay` 对象可以代表地图上的一个区域。在这个例子中，我们使用继承自 `MKOverlay`
    的 `MKCircle` 类来在地图上的区域上显示一个圆。
- en: 'We initialize an `MKCircle` instance with its `Circle` static method:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化 `MKCircle` 实例使用其 `Circle` 静态方法：
- en: '[PRE57]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The first parameter represents the coordinates of the center of the circle,
    while the second parameter represents the radius of the circle, in meters. After
    initialization, we add the overlay to the map view with the `AddOverlay` method:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数表示圆心的坐标，而第二个参数表示圆的半径，单位为米。初始化后，我们使用`AddOverlay`方法将叠加添加到地图视图中：
- en: '[PRE58]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Just like annotations, overlays require a view to display their information.
    To provide a view for our overlay, we override the `GetViewForOverlay` method
    in the map view''s delegate object implementation:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 就像注释一样，叠加需要视图来显示其信息。为了为我们的叠加提供视图，我们在地图视图的代理对象实现中重写了`GetViewForOverlay`方法：
- en: '[PRE59]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Inside this method, we first check if the overlay parameter is the type we want;
    in this case, an `MKCircle:`
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '在此方法内部，我们首先检查叠加参数是否是我们想要的类型；在这种情况下，是一个`MKCircle`: '
- en: '[PRE60]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Then, we create an instance of the `MKCircleView` class and return it:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建`MKCircleView`类的实例并返回它：
- en: '[PRE61]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: We set the appropriate properties that will define the appearance of our overlay.
    In this case, we set the `FillColor, StrokeColor`, and `LineWidth` properties.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设置适当的属性来定义叠加的外观。在这种情况下，我们设置了`FillColor`、`StrokeColor`和`LineWidth`属性。
- en: There's more...
  id: totrans-344
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: Overlays are handled efficiently by the map view. One important thing that the
    map view takes care for us is that when we scale the map, the overlay is automatically
    scaled to match each zoom level. This way, we do not need to scale the overlay
    manually in code.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 地图视图有效地处理叠加。地图视图为我们处理的一个重要事项是，当我们缩放地图时，叠加会自动缩放到匹配每个缩放级别。这样，我们就不需要在代码中手动缩放叠加。
- en: Creating custom overlays
  id: totrans-346
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建自定义叠加
- en: We can create our own custom overlays. To do this, we need to override the `MKOverlay`
    class for the overlay and the `MKOverlayView` class for the overlay view.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建自己的自定义叠加。为此，我们需要为叠加重写`MKOverlay`类，为叠加视图重写`MKOverlayView`类。
- en: Standard overlay objects
  id: totrans-348
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标准叠加对象
- en: Apart from the `MKCircle`, the other standard overlay objects are `MKPolygon`
    for creating polygon shapes and `MKPolyline` for creating polylines, like in a
    track-recording application.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`MKCircle`之外，其他标准叠加对象还包括`MKPolygon`用于创建多边形形状和`MKPolyline`用于创建折线，如在轨迹记录应用程序中。
- en: See also
  id: totrans-350
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考内容
- en: 'In this chapter:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中：
- en: '*Displaying maps*'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*显示地图*'
- en: '*Adding map annotations*'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加地图注释*'
