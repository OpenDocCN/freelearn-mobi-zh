- en: Chapter 6. Facebook Graph API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。Facebook Graph API
- en: In this chapter we are going to dig into the Facebook Graph API.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入研究Facebook Graph API。
- en: Note
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In order to access the Facebook iOS SDK API reference, visit [https://developers.facebook.com/docs/reference/api/](https://developers.facebook.com/docs/reference/api/).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了访问Facebook iOS SDK API参考，请访问 [https://developers.facebook.com/docs/reference/api/](https://developers.facebook.com/docs/reference/api/)。
- en: The new **API**s (**Application Programming Interface**) were developed by Facebook
    engineers to replace the old **REST** (**Representational State Transfer**) web
    services. Graph API is the main tool to fetch and store data within the Social
    Graph. It is based on low-level HTTP verbs (GET, POST, PUT, and so on). Facebook
    SDKs are also based on Graph API.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 新的**API**（**应用程序编程接口**）是由Facebook工程师开发的，以取代旧的**REST**（**表示状态传输**）网络服务。Graph
    API是获取和存储Social Graph内数据的主要工具。它基于低级HTTP动词（GET、POST、PUT等）。Facebook SDKs也是基于Graph
    API的。
- en: Available features through Graph API
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过Graph API可用的功能
- en: Using Graph API, we have access to all the information on the Social Graph having
    the necessary permissions. It is important to understand that some of Facebook's
    APIs have usage limits to prevent abuse, for example, downloading a picture.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Graph API，我们有权访问所有必要的权限下的Social Graph信息。重要的是要理解，Facebook的一些API有使用限制，以防止滥用，例如，下载图片。
- en: 'When we read data from the core graph structure, we have the following features
    available:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们从核心图结构读取数据时，我们有以下功能可用：
- en: '**Pictures**: These are profile pictures.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图片**: 这些是个人资料图片。'
- en: '**Selecting Results**: Using filters, it is possible to control which fields
    are included in the response.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择结果**: 使用过滤器，可以控制哪些字段包含在响应中。'
- en: '**Pagination**: It is the ability to define a limit for the response data.
    This is really useful, for instance, when we try to download user timeline information.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分页**: 这是定义响应数据限制的能力。这实际上非常有用，例如，当我们尝试下载用户时间线信息时。'
- en: '**Search**: It gives the ability to search; however, the request needs to define
    a search query and an object type.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**搜索**: 它提供了搜索的能力；然而，请求需要定义一个搜索查询和对象类型。'
- en: '**Permissions and Login protocols**: These are necessary to use the Graph API
    in order to access sensitive data.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**权限和登录协议**: 这些是使用Graph API访问敏感数据所必需的。'
- en: Graph APIs provide the ability to publish and delete information from a user's
    timeline. We can also interact with events by providing **RSVP**s, creating albums,
    writing notes, and referencing links.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Graph APIs提供了从用户的个人时间线发布和删除信息的能力。我们还可以通过提供**RSVP**、创建相册、写笔记和引用链接与事件进行交互。
- en: An important feature of the Graph API is the ability to receive real-time updates.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Graph API的一个重要特性是接收实时更新的能力。
- en: '[https://developers.facebook.com/docs/reference/api/realtime/](https://developers.facebook.com/docs/reference/api/realtime/)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developers.facebook.com/docs/reference/api/realtime/](https://developers.facebook.com/docs/reference/api/realtime/)'
- en: When the application subscribes for updates for a specific object, we will need
    to define a callback URL. The Facebook Platform will call that URL whenever there
    is a change in the subscripted object.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序订阅特定对象的更新时，我们需要定义一个回调URL。Facebook平台将在订阅对象发生变化时调用该URL。
- en: Graph API Explorer
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Graph API探索器
- en: The best way to learn how to use the Graph API is through the Graph Explorer
    Graph API Explorer is a debug tool that helps developers understand how to use
    the Graph API by simulating Graph API calls.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 学习如何使用Graph API的最佳方式是通过Graph Explorer。Graph API Explorer是一个调试工具，它通过模拟Graph API调用帮助开发者理解如何使用Graph
    API。
- en: In order to access the Explorer tool, visit [https://developers.facebook.com/tools/explorer](https://developers.facebook.com/tools/explorer).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了访问探索工具，请访问 [https://developers.facebook.com/tools/explorer](https://developers.facebook.com/tools/explorer)。
- en: 'The first time we access Graph Explorer, the debugging tool will show our Facebook
    account **id** and **name**. The following screenshot shows the Graph API Explorer
    interface:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次访问Graph Explorer时，调试工具将显示我们的Facebook账户**id**和**name**。以下截图显示了Graph API Explorer界面：
- en: '![](img/WUktk3F6.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/WUktk3F6.jpg)'
- en: Facebook dynamically provides the access token, and it will let us access private
    data. We can input our own query and see the results in the panel underneath the
    query input field. The bar to the left provides data filtering of responses; we
    can decide which fields need to be displayed in our query response.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Facebook 动态提供访问令牌，并允许我们访问私有数据。我们可以在查询输入字段下方的面板中输入自己的查询并查看结果。左侧的栏提供响应的数据过滤；我们可以决定在查询响应中显示哪些字段。
- en: '![](img/Zn2sTSjv.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Zn2sTSjv.jpg)'
- en: There is a long list of functionalities provided by the Explorer tool, and I
    strongly recommend taking a look at them since they will not be covered in this
    book.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 探索工具提供了许多功能，我强烈建议您查看它们，因为它们不会在本书中介绍。
- en: Using the Graph API with Facebook iOS SDK
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Facebook iOS SDK 中的 Graph API
- en: In order to use Graph APIs in our social application, we are going to use a
    component called `FBRequestConnection`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在我们的社交应用中使用 Graph API，我们将使用一个名为 `FBRequestConnection` 的组件。
- en: The previous class has convenient methods to perform Graph API calls and handles
    responses flawlessly, as it will create a single HTTP connection with the social
    platform. `FBRequestConnection` works only if the current `FBSession` is open
    and has a valid token.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 之前提到的类提供了方便的方法来执行 Graph API 调用，并完美处理响应，因为它将与社交平台创建单个 HTTP 连接。`FBRequestConnection`
    仅在当前 `FBSession` 打开且具有有效令牌时工作。
- en: 'The duties of `FBRequestConnection` are as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`FBRequestConnection` 的职责如下：'
- en: Creating the correct URI for your Graph API request and appending the correct
    URN to the base Graph Facebook URL ([http://graph.facebook.com/](http://graph.facebook.com/))
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为您的 Graph API 请求创建正确的 URI 并将正确的 URN 附加到基础 Graph Facebook URL ([http://graph.facebook.com/](http://graph.facebook.com/))
- en: Fetching the current active `FBSession`, extracting the security token associated,
    and attaching the security token to the Graph API request
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取当前活动的 `FBSession`，提取相关的安全令牌，并将安全令牌附加到 Graph API 请求
- en: Handling connection start/end/canceling and batch requests
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理连接开始/结束/取消和批量请求
- en: Using `FBRequestConnection`, we have several methods to perform the Graph API
    Request. All methods to perform such requests need `FBRequestHandler` as the input
    parameter.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `FBRequestConnection`，我们有几种方法来执行 Graph API 请求。执行此类请求的所有方法都需要 `FBRequestHandler`
    作为输入参数。
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following Graph API methods are available for our convenience:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 Graph API 方法可供我们方便使用：
- en: '`+ (FBRequestConnection *)startForMeWithComplentionHandler` (`FBRequestHandler`)handler:
    It performs a request for user information (`/me`). It uses an active session
    fetched through `FBSession activeSession`.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`+ (FBRequestConnection *)startForMeWithComplentionHandler` (`FBRequestHandler`)handler:
    它执行一个请求以获取用户信息 (`/me`)。它使用通过 `FBSession activeSession` 获取的活动会话。'
- en: '`+ (FBRequestConnection *)startForMyFriendWithComplentionHandler` (`FBRequestHandler`)handler:
    It performs a request for a user''s friends (`/me/friends`). An active session
    is needed for this.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`+ (FBRequestConnection *)startForMyFriendWithComplentionHandler` (`FBRequestHandler`)handler:
    它执行一个请求以获取用户的朋友 (`/me/friends`)。此操作需要一个活动会话。'
- en: '`+ (FBRequestConnection *) startForPlacesSearchAtCoordinate:(CLLocationCoordinate2D)coordinate
    radiusInMeters:(NSInteger)radius resultsLimit:(NSInteger)limit searchText:(NSString*)searchText
    completionHandler` (`FBRequestHandler`)handler: It returns places that match the
    `searchText` string in a certain area defined by coordinates and a radius. We
    need to define a limit for the number of results we are getting back from this
    request.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`+ (FBRequestConnection *) startForPlacesSearchAtCoordinate:(CLLocationCoordinate2D)coordinate
    radiusInMeters:(NSInteger)radius resultsLimit:(NSInteger)limit searchText:(NSString*)searchText
    completionHandler (`FBRequestHandler`)handler: 它返回与 `searchText` 字符串匹配的、由坐标和半径定义的特定区域的地点。我们需要为从该请求返回的结果数量定义一个限制。'
- en: '`+ (FBRequestConnection*)startForPostStatusUpdate:(NSString *)message completionHandler`
    (`FBRequestHandler`)handler: It performs a request to post a status update on
    the user''s timeline.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`+ (FBRequestConnection*)startForPostStatusUpdate:(NSString *)message completionHandler`
    (`FBRequestHandler`)handler: 它执行一个请求，在用户的个人时间轴上发布状态更新。'
- en: '`+ (FBRequestConnection*)startForUploadPhoto:(UIImage *)photo completionHandler`
    (`FBRequestHandler`)handler: It performs a post request to upload a photo.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`+ (FBRequestConnection*)startForUploadPhoto:(UIImage *)photo completionHandler`
    (`FBRequestHandler`)handler: 它执行一个 POST 请求来上传照片。'
- en: Every time we try to perform a Graph API request, we use the Graph API Explorer
    tool to check the response.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我们尝试执行 Graph API 请求时，我们都使用 Graph API 探索工具来检查响应。
- en: In the next sections, we are going to use some of the `FBRequestConnection`
    methods to build and execute Graph API requests.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将使用一些 `FBRequestConnection` 方法来构建和执行 Graph API 请求。
- en: The next samples are not directly connected with the application we built so
    far; therefore, they can easily be re-used on a different project.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例与迄今为止我们构建的应用程序没有直接关联；因此，它们可以很容易地用于不同的项目。
- en: Fetching user information
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取用户信息
- en: In Chapter 4, *Displaying User Profile*, we used the `FBLoginView` delegate
    method to fetch and display user information. `FBLoginView` took care of fetching
    that information for us using the Graph API.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在第4章*显示用户资料*中，我们使用了`FBLoginView`的代理方法来获取和显示用户信息。`FBLoginView`使用Graph API为我们获取了这些信息。
- en: '`FBRequestConnection` allows us to fetch user profile information independently
    from `FBLoginView`, for example, a custom user interface and login flow.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`FBRequestConnection`允许我们独立于`FBLoginView`获取用户资料信息，例如，自定义用户界面和登录流程。'
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The previous code shows the implementation of `startForMeWithComplentionHandler`.
    The request handler will check whether there were any errors. If no errors exist,
    the handler will display the user profile information using the result variable
    on the log interface. The object in the result variable is an `id&lt;FBGraphUser&gt;`
    object.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码展示了`startForMeWithComplentionHandler`的实现。请求处理程序将检查是否存在任何错误。如果没有错误，处理程序将使用日志界面上的结果变量显示用户资料信息。结果变量中的对象是一个`id<FBGraphUser>`对象。
- en: Note
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on `FBGraphUser`, visit
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于`FBGraphUser`的信息，请访问
- en: '[https://developers.facebook.com/docs/reference/ios/3.6/protocol/FBGraphUser/](https://developers.facebook.com/docs/reference/ios/3.6/protocol/FBGraphUser/).'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developers.facebook.com/docs/reference/ios/3.6/protocol/FBGraphUser/](https://developers.facebook.com/docs/reference/ios/3.6/protocol/FBGraphUser/).'
- en: Fetching a user's friends
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取用户的好友
- en: In Chapter 4, *Displaying User Profile*, we created a view controller to display
    a user's friends list. Now, let's consider the case where a table view is not
    the type of interaction we are looking for. We may need to customize our interface,
    and fetch the user's friend list information straight from the Facebook Platform.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在第4章*显示用户资料*中，我们创建了一个视图控制器来显示用户的好友列表。现在，让我们考虑一个情况，即表格视图不是我们想要的交互类型。我们可能需要自定义我们的界面，并直接从Facebook平台获取用户的好友列表信息。
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The previous code shows one example of `startForMyFriendWithComplentionHandler`
    in action. The preceding code makes a request to the platform. In this case, the
    result we expect is `id&lt;FBGraphUser&gt;` containing the user's friends list.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码展示了`startForMyFriendWithComplentionHandler`的一个示例。前面的代码向平台发出请求。在这种情况下，我们期望的结果是包含用户好友列表的`id<FBGraphUser>`。
- en: Fetching a user's photos
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取用户的照片
- en: 'Fetching a user''s photos requires permission to access this data. We first
    need to implement a user request for permission; if this goes through, we can
    fetch the user''s photos:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 获取用户的照片需要访问这些数据的权限。我们首先需要实现用户请求权限；如果成功，我们可以获取用户的照片：
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The previous snippet shows how to perform a request for the user to access photo
    information. If the permission is already present in `FBSession`, we can perform
    the Graph API request; otherwise, we have to wait until the user gives us the
    permission.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段展示了如何对用户进行请求以访问照片信息。如果`FBSession`中已经存在权限，我们可以执行Graph API请求；否则，我们必须等待用户给予我们权限。
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To fetch a user's photos, we can use the `startWithGraphPath` method. This method
    allows us to customize our Graph API request passing the URN as an input parameter,
    for example, `/me/photos`. The resulted URI will be [graph.facebook.com/me/photos](http://graph.facebook.com/me/photos).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取用户的照片，我们可以使用`startWithGraphPath`方法。此方法允许我们通过将URN作为输入参数传递来自定义我们的Graph API请求，例如，`/me/photos`。结果URI将是[graph.facebook.com/me/photos](http://graph.facebook.com/me/photos)。
- en: The result variable is a `FBGraphObject` type containing the list of pictures
    for the current user.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 结果变量是一个包含当前用户图片列表的`FBGraphObject`类型。
- en: Posting status updates
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布状态更新
- en: To perform any post operations, we explicitly need the user's permission. Posting
    a status update through Graph API firstly requires us to ask for the correct permission
    and, once this is granted, to execute the request on the Facebook Platform.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行任何发布操作，我们明确需要用户的权限。通过Graph API发布状态更新首先需要我们请求正确的权限，一旦获得批准，就在Facebook平台上执行请求。
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once the post update permission is granted, we can run the `postStatusUpdate`
    code. The following snippet shows the code to post a new status update on the
    user''s timeline:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦发布更新权限被授予，我们就可以运行`postStatusUpdate`代码。以下代码片段展示了如何在用户的动态时间轴上发布新的状态更新：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The result of posting a new timeline update is the new post ID.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 发布新时间线更新的结果是新的帖子ID。
- en: '![](img/KHFfOs8h.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/KHFfOs8h.jpg)'
- en: Posting a new photo
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布新照片
- en: Posting a new photo requires the `photo_upload` permission. The following code
    shows how to ask for the upload photo permission and perform the request on the
    Platform.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 发布新照片需要`photo_upload`权限。以下代码展示了如何请求上传照片权限并在平台上执行请求。
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When the photo upload permission is granted, we can perform the Graph API request
    using the `postPhoto` method. The following code is to upload a photo using the
    Graph API:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当照片上传权限被授予时，我们可以使用`postPhoto`方法执行Graph API请求。以下代码展示了如何使用Graph API上传照片：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding code uses an image from an iOS project; however, we can fetch
    an image from any source, for example, a camera or a library. The result of the
    request is the picture ID on the Facebook Platform.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码使用了一个iOS项目的图片；然而，我们可以从任何来源获取图片，例如相机或库。请求的结果是Facebook平台上的图片ID。
- en: '![](img/ciawwZd5.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ciawwZd5.jpg)'
- en: Summary
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we focus on the most important part of the Facebook iOS SDK,
    the Graph APIs. We learned how to use those APIs to communicate with the platform.
    The Graph API methods give us the flexibility to build our own GUI if we don't
    like the one provided by native or web components.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们重点关注Facebook iOS SDK最重要的部分——Graph APIs。我们学习了如何使用这些API与平台进行通信。Graph API方法为我们提供了灵活性，如果我们不喜欢原生或Web组件提供的GUI，我们可以构建自己的GUI。
- en: The Graph API Explorer is the tool that we should always use before implementing
    any communication with the platform. It will help us understand the request and
    response format of our communication with the social network.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Graph API探索器是我们实现任何与平台通信之前都应该使用的工具。它将帮助我们理解与社会网络通信的请求和响应格式。
- en: Using the native components, we are limited to a subset of features provided
    by the Graph API. Graph API is the most powerful and flexible tool we can use
    to interact with the Platform and for fetching users and their friends' information.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用原生组件，我们只能使用Graph API提供的功能子集。Graph API是我们用来与平台交互以及获取用户及其朋友信息的强大且灵活的工具。
