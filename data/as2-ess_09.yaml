- en: Chapter 9. Preparing for Release
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 9 章。准备发布
- en: In the previous chapter, you learned enough to test and debug your application.
    What do you need to do to prepare your application for its release? How can you
    do this using Android Studio?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你已经学到了足够多的知识来测试和调试你的应用程序。为了准备你的应用程序发布，你需要做什么？你如何使用 Android Studio 来做到这一点？
- en: This chapter describes the necessary steps to prepare your application for release
    using Android Studio. First of all, you will learn about **application packages**
    (**APK**) files—a variation of the JAR files in which Android applications are
    packed. You will then learn how you need to change your application after fully
    testing it. Finally, we will sign our APK file, leaving it ready to upload to
    Google Play.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章描述了使用 Android Studio 准备应用程序发布所需的必要步骤。首先，你将了解**应用程序包**（**APK**）文件——这是安卓应用程序打包的
    JAR 文件的一种变体。然后，你将学习在完全测试应用程序后需要如何更改你的应用程序。最后，我们将对 APK 文件进行签名，使其准备好上传到 Google Play。
- en: 'These are the topics we''ll be covering in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将讨论以下主题：
- en: APK files
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: APK 文件
- en: Build types
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建类型
- en: Preparing for release
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备发布
- en: Generating a signed APK
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成已签名的 APK
- en: Signing in release mode
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在发布模式下签名
- en: Understanding an APK file
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 APK 文件
- en: 'Android applications are packed in a file with the `.apk` extension. These
    files are just compressed ZIP files, so their content can easily be explored.
    An APK file usually contains the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓应用程序打包在一个以 `.apk` 扩展名的文件中。这些文件仅仅是压缩的 ZIP 文件，因此其内容可以轻松地被探索。APK 文件通常包含以下内容：
- en: '`assets/`: This is a folder that contains the asset files of the application.
    This is the same `assets` folder that exists in our project.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assets/`：这是一个包含应用程序资产文件的文件夹。这是与我们的项目相同的 `assets` 文件夹。'
- en: '`META-INF/`: This is a folder that contains our certificates.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`META-INF/`：这是一个包含我们的证书的文件夹。'
- en: '`lib/`: This is a folder that contains compiled code, in case it is needed
    for a processor.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lib/`：这是一个包含编译代码的文件夹，以防需要为处理器使用。'
- en: '`res/`: This is a folder that contains the application resources such as images,
    strings, and so on.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`res/`：这是一个包含应用程序资源，如图片、字符串等的文件夹。'
- en: '`AndroidManifest.xml`: This is the application manifest file.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AndroidManifest.xml`：这是应用程序的清单文件。'
- en: '`classes.dex`: This is a file that contains the application''s compiled code.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`classes.dex`：这是一个包含应用程序编译代码的文件。'
- en: '`resources.arsc`: This is a file that contains some precompiled resources,
    such as binary XML files.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resources.arsc`：这是一个包含一些预编译资源的文件，例如二进制 XML 文件。'
- en: 'Having the APK file allows the application to be distributed and installed
    on the Android operating system. Android applications can be distributed as you
    prefer: through app markets such as Google Play, Amazon App store, or Opera Mobile
    Store; through your own website; or even via an e-mail to your users. If you choose
    one of the two last options, take into account that Android, by default, blocks
    installations from locations other than Google Play. You should inform your users
    that they need to disable this restriction in their devices to be able to install
    your application. They have to check the **Unknown sources** option by navigating
    to **Settings** | **Security** in their Android devices.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有 APK 文件可以让应用程序在安卓操作系统中进行分发和安装。安卓应用程序可以按照你的喜好进行分发：通过应用市场，如 Google Play、Amazon
    App store 或 Opera Mobile Store；通过你的个人网站；甚至通过电子邮件发送给你的用户。如果你选择后两种选项之一，请考虑安卓默认情况下会阻止从
    Google Play 以外的位置安装应用程序。你应该通知你的用户，他们需要在他们的设备中禁用此限制才能安装你的应用程序。他们必须通过在安卓设备中导航到**设置**
    | **安全**来检查**未知来源**选项。
- en: Build types
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建类型
- en: 'Applications have to be signed with a private key when they are built. An application
    can''t be installed in a device or even in the emulator if it is not signed. To
    build our application, there are two types: **debug** and **release**. Both APK
    versions contain the same folders and compiled files; the difference is in the
    key used to sign them. Both modes are explained as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序在构建时必须使用私钥进行签名。如果一个应用程序没有签名，它就不能在设备上安装，甚至不能在模拟器中安装。为了构建我们的应用程序，有两种类型：**调试**和**发布**。两个
    APK 版本包含相同的文件夹和编译文件；区别在于用于签名的密钥。两种模式如下解释：
- en: '**Debug**: When we ran and tested our application in the previous chapters,
    we were in debug mode, but we didn''t have a key nor did we do anything to sign
    our application. The Android SDK tools automatically create a debug key, an alias,
    and their passwords to sign the APK. This process occurs when we are running or
    debugging our application with Android Studio without us realizing. We can''t
    publish an APK signed with the debug key created by the SDK tools.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调试**：在我们之前章节中运行和测试我们的应用程序时，我们处于调试模式，但我们没有密钥，也没有对应用程序进行签名。Android SDK工具会自动创建一个调试密钥、别名及其密码来签名APK。这个过程在我们使用Android
    Studio运行或调试应用程序时发生，而我们并没有意识到。我们不能发布由SDK工具创建的调试密钥签名的APK。'
- en: '**Release**: When we distribute our application, we have to build a release
    version. Google Play requires the APK file to be signed with a certificate, for
    which the developer keeps the private key. In this case, we need our own private
    key, alias, and password and need to provide them to the build tools. The certificate
    identifies the developer of the application and can be a self-signed certificate.
    It is not necessary for a certificate authority to sign the certificate.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布**：当我们分发我们的应用程序时，我们必须构建一个发布版本。Google Play要求APK文件必须使用证书签名，开发者保留私钥。在这种情况下，我们需要我们自己的私钥、别名和密码，并将它们提供给构建工具。证书标识应用程序的开发者，可以是自签名证书。不需要证书颁发机构签名证书。'
- en: Keep the key store with your certificate in a secure place. To upgrade your
    application, you have to use the same key in order to upload the new version.
    If you lose the key store, you won't be able to update your application. You will
    have to create a new application with a different package name.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 将包含你的证书的密钥库保存在安全的地方。为了升级你的应用程序，你必须使用相同的密钥来上传新版本。如果你丢失了密钥库，你将无法更新你的应用程序。你将不得不创建一个新的应用程序，并使用不同的包名。
- en: Steps prior to releasing your app
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布应用程序之前的步骤
- en: 'Before you generate the APK file, it is necessary to prepare your application
    to build it in release mode. Perform the following steps:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成APK文件之前，你需要准备你的应用程序以在发布模式下构建。执行以下步骤：
- en: 'Firstly, make sure you have completely tested your application. We recommend
    testing your application in the following ways:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，确保你已经完全测试了你的应用程序。我们建议以下几种方式来测试你的应用程序：
- en: On a device using the minimum required platform
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用最低要求平台的设备上
- en: On a device using the target platform
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用目标平台的设备上
- en: On a device using the latest available platform
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用最新可用平台的设备上
- en: On a real device and not just the emulator
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在真实设备上，而不仅仅是模拟器上
- en: On a variety of screen resolutions and sizes
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在各种屏幕分辨率和尺寸的设备上
- en: On a tablet if your application supports it
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的应用程序支持，在平板电脑上
- en: By switching to landscape mode if you allow it, both in a mobile device and
    in a tablet
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你允许，在移动设备和平板电脑上切换到横幅模式
- en: On different network conditions, such as with no Internet connectivity or low
    coverage
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不同的网络条件下，例如没有互联网连接或覆盖范围低的情况下
- en: When the GPS or other location service is not activated on your device (if your
    application uses GPS or any location service)
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你的设备上的GPS或其他位置服务未激活时（如果你的应用程序使用GPS或任何位置服务）
- en: When the back button is pressed
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当按下返回按钮时
- en: Secondly, we have to check the log messages that are printed from our application.
    Printing some log messages can be considered a security vulnerability. Logs generated
    by the Android system can be captured and analyzed, so we should avoid showing
    critical information about the application's internal working. You should also
    remove the `android:debuggable` property from the application manifest file. You
    can also set this property to `false`.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其次，我们必须检查从我们的应用程序打印出的日志消息。打印某些日志消息可能被视为安全漏洞。Android系统生成的日志可以被捕获和分析，因此我们应该避免显示关于应用程序内部工作的重要信息。你还应该从应用程序清单文件中移除`android:debuggable`属性。你也可以将此属性设置为`false`。
- en: Thirdly, if your application communicates with a server, check that the configured
    URL is the production URL. It is possible that, during the debug phase, you referenced
    an URL of a server in a prerelease environment.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三，如果你的应用程序与服务器通信，请检查配置的URL是否为生产URL。在调试阶段，你可能会引用一个预发布环境中的服务器URL。
- en: Finally, set the correct value for the `android:versionCode` and `android:versionName`
    properties from the application manifest file. The version code is a number (integer)
    that represents the application version. New versions should have greater version
    codes. This code is used to determine whether an application installed on a device
    is the latest version or whether there is a newer version.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，从应用程序清单文件中设置`android:versionCode`和`android:versionName`属性的正确值。版本代码是一个表示应用程序版本的数字（整数）。新版本应该有更大的版本代码。此代码用于确定设备上安装的应用程序是否为最新版本，或者是否有更新的版本。
- en: The version name is a string that represents the application version. Unlike
    the version code, the version name is visible to the user and appears in the public
    information about the application. It is just an informative version name to the
    user and is not used for any internal purpose.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 版本名称是一个表示应用程序版本的字符串。与版本代码不同，版本名称对用户可见，并出现在应用程序的公共信息中。它只是对用户的信息性版本名称，不用于任何内部目的。
- en: 'Specify a value of `1` for the version code and `1.0` for the version name.
    The `manifest` tag should look like the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为版本代码指定`1`的值，为版本名称指定`1.0`的值。`manifest`标签应如下所示：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'A new version of our application will have a value of `2` for the version code
    and could have `1.1` for the version name:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的新版本将版本代码的值为`2`，版本名称可能为`1.1`：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Generating a signed APK
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成签名APK
- en: To generate the signed APK, navigate to **Build** | **Generate Signed APK**.
    Select the **app** module and click on the **Next** button. In the dialog to generate
    the signed APK, we are asked for a certificate. The APK is signed by this certificate,
    which indicates that it belongs to us.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成签名APK，导航到**构建** | **生成签名APK**。选择**app**模块并点击**下一步**按钮。在生成签名APK的对话框中，我们被要求提供证书。APK由此证书签名，表示它属于我们。
- en: 'If this is our first application, we might not have any certificates. Click
    on the **Create new...** button to open the **New Key Store** dialog. Now, fill
    in the following information:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是我们第一个应用程序，我们可能没有任何证书。点击**创建新...**按钮打开**新密钥库**对话框。现在，填写以下信息：
- en: '**Key store path**: This is the path in your system to create the key store.
    The key store is a file with the `.jks` extension, for example, `release_keystore.jks`.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密钥库路径**：这是您系统中创建密钥库的路径。密钥库是一个具有`.jks`扩展名的文件，例如，`release_keystore.jks`。'
- en: '**Password**: This is the key store password. You have to confirm it.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密码**：这是密钥库密码。您必须确认它。'
- en: '**Alias**: This is the alias for your certificate and is a pair of public and
    private keys. Let''s name it `releasekey`.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**别名**：这是您的证书别名，是一对公钥和私钥。让我们命名为`releasekey`。'
- en: '**Password**: This is the certificate password. You have to confirm it.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密码**：这是证书密码。您必须确认它。'
- en: '**Validity (years)**: This is the certificate that will be valid until the
    validity date. A value of 25 years or more is recommended.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有效期（年）**：这是将在有效期到期时有效的证书。建议使用25年或更长的值。'
- en: '**Certificate**: This is the personal information contained in the certificate.
    Type your first and last name, organizational unit, organization, city or locality,
    state or province, and country code; for example, `AS` as **Organizational Unit**,
    `packtpub` as **Organization**, and `ES` as **Country Code**.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**证书**：这是证书中包含的个人信息的。输入您的名字和姓氏、组织单位、组织、城市或地区、州或省和国家代码；例如，将**组织单位**设置为`AS`，将**组织**设置为`packtpub`，将**国家代码**设置为`ES`。'
- en: 'You can see the **New Key Store** dialog in the next screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在下一张截图中看到**新密钥库**对话框：
- en: '![Generating a signed APK](img/B05459_09_01.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![生成签名APK](img/B05459_09_01.jpg)'
- en: 'Click on **OK**. The dialog to create the signed APK is now loaded with the
    key store data. The next time we create a signed APK, we will already have a certificate,
    so we will select the **Choose existing** button. Click on the **Next** button.
    In the next step, select the path to save the APK file, select the release build
    type, and click on **Finish**. When the APK is completely generated, you will
    be informed by a message on the bottom bar of Android Studio and by the following
    notification on the top part of Android Studio:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**确定**。创建签名APK的对话框现在已加载密钥库数据。下次我们创建签名APK时，我们已经有证书，所以我们将选择**选择现有**按钮。点击**下一步**按钮。在下一步中，选择APK文件的保存路径，选择发布构建类型，然后点击**完成**。当APK完全生成时，您将通过Android
    Studio底部栏的消息和Android Studio顶部部分的以下通知得到通知：
- en: '![Generating a signed APK](img/B05459_09_02.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![生成签名APK](img/B05459_09_02.jpg)'
- en: We should have the APK file created in the selected path. Now that you have
    the APK file ready for release, it is recommended that you test it again in a
    device before distributing it.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该在所选路径中创建APK文件。现在您有了准备发布的APK文件，建议在分发之前在设备上再次测试它。
- en: Sign automatically in release mode
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在发布模式下自动签名
- en: 'Apps are signed automatically when running in debug mode, since the debug key
    is automatically generated. If we try to run our app in release mode, the following
    error will be displayed because Android Studio does not know how to sign our app:
    *Error: The apk for your currently selected variant (app-release-unsigned.apk)
    is not signed. Please specify a signing configuration for this variant (release)*.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试模式下运行时，应用会自动签名，因为调试密钥是自动生成的。如果我们尝试在发布模式下运行我们的应用，将显示以下错误，因为Android Studio不知道如何为我们签名：*错误：您当前选择的变体（app-release-unsigned.apk）未签名。请为此变体指定签名配置（发布）*。
- en: We need to configure our build settings if we want to run our app in release
    mode.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想在发布模式下运行我们的应用，我们需要配置我们的构建设置。
- en: 'Open the **Project Structure** settings by navigating to **File** | **Project
    Structure...**. Select your app in the **Modules** section and open the **Signing**
    tab. Click on the plus button to create a new signing configuration. Rename the
    configuration and type the data of your key store, as shown in the following screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 通过导航到**文件** | **项目结构...**打开**项目结构**设置。在**模块**部分选择您的应用，并打开**签名**选项卡。点击加号创建一个新的签名配置。重命名配置并输入您的密钥库数据，如图所示：
- en: '![Sign automatically in release mode](img/B05459_09_03.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![在发布模式下自动签名](img/B05459_09_03.jpg)'
- en: 'Switch to the **Build Types** tab, in which the default two build types are
    listed: debug and release. Select **release** and choose the recently created
    configuration (**releaseConfig**) in the **Signing Config** selector:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到**构建类型**选项卡，其中列出了默认的两个构建类型：调试和发布。选择**发布**，并在**签名配置**选择器中选择最近创建的配置（**releaseConfig**）：
- en: '![Sign automatically in release mode](img/B05459_09_04.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![在发布模式下自动签名](img/B05459_09_04.jpg)'
- en: Press **Ok** to finish the configuration. Now, your app will automatically be
    signed in release mode using your release key.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**确定**完成配置。现在，您的应用将自动使用您的发布密钥在发布模式下进行签名。
- en: 'This signing configuration has actually modified the `build.gradle` file of
    your app module. Open this file to observe the changes:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这个签名配置已经修改了您的应用模块的`build.gradle`文件。打开此文件以观察更改：
- en: 'The new signing configuration has been added using the following code:'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下代码添加了新的签名配置：
- en: '[PRE2]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The release build type now points to the previous signing configuration:'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布构建类型现在指向之前的签名配置：
- en: '[PRE3]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: There are some alternatives if you do not want to expose your password in the
    `build.gradle` file, for example, saving your password in a `properties` file
    that you can read from the `build.gradle` file.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想在`build.gradle`文件中暴露您的密码，有一些替代方案，例如，将您的密码保存在一个`properties`文件中，您可以从`build.gradle`文件中读取它。
- en: Running your app in release mode
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在发布模式下运行您的应用
- en: 'Now that our app will be signed automatically for release, we can run and test
    our application using the release mode. To run an app in release mode, open the
    **Build Variants** panel, which is located in the left-side bar of Android Studio,
    as you can see in the following screenshot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在由于我们的应用将自动进行发布签名，我们可以使用发布模式运行和测试我们的应用程序。要在发布模式下运行应用程序，打开位于Android Studio左侧栏中的**构建变体**面板，如图所示：
- en: '![Running your app in release mode](img/B05459_09_05.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![在发布模式下运行您的应用](img/B05459_09_05.jpg)'
- en: Your app module is displayed in the **Build Variants** panel, along with the
    current build variant, which by default is **debug**. Change the build variant
    value to **release** and then your app is ready to run in release mode.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用模块显示在**构建变体**面板中，包括当前构建变体，默认为**调试**。将构建变体值更改为**发布**后，您的应用即可在发布模式下运行。
- en: APK Analyzer
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: APK分析器
- en: Android Studio 2.2 introduced a new feature—the **APK Analyzer**. This tool
    analyzes the content of a selected APK file. You can review the sizes of the components,
    the final `AndroidManifest.xml` file, and the compiled resources.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio 2.2引入了一个新功能——**APK分析器**。此工具分析所选APK文件的内容。您可以查看组件的大小、最终的`AndroidManifest.xml`文件和编译的资源。
- en: 'Navigate to **Build** | **APK Analyzer** and select your APK file. A new tab
    will open with the APK file details, as shown in the next screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到**构建** | **APK分析器**并选择您的APK文件。将打开一个新标签页，显示APK文件详情，如图所示：
- en: '![APK Analyzer](img/B05459_09_06.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![APK Analyzer](img/B05459_09_06.jpg)'
- en: 'All the files in the APK are listed along with their file sizes: **Raw File
    Size** and **Download Size**. The download size is the estimation of the file
    size when the user downloads the APK.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: APK中的所有文件及其文件大小都会列出：**原始文件大小**和**下载大小**。下载大小是用户下载APK时文件大小的估计。
- en: 'When you select a file, you can see its details in the bottom part. Select
    the `classes.dex` file to see the list of all the classes in the APK file, like
    in the following screenshot:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当您选择一个文件时，您可以在底部部分看到其详细信息。选择`classes.dex`文件以查看APK文件中所有类的列表，如下面的截图所示：
- en: '![APK Analyzer](img/B05459_09_07.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![APK Analyzer](img/B05459_09_07.jpg)'
- en: 'For each class, the number of methods is displayed and a summary is also provided.
    This information is useful to avoid the 64k referenced method limit issue. There
    is a limit in the total number of methods that can be referenced within a **Dalvix
    Executable** (**dex**) bytecode file: 65536\. Using the APK analyzer, you can
    keep track of the number of methods in your APK.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个类，都会显示其方法数量并提供一个摘要。这些信息有助于避免64k引用方法限制问题。在**Dalvik可执行文件**（**dex**）字节码文件中可以引用的方法总数有限制：65536。使用APK分析器，您可以跟踪您的APK中方法的数量。
- en: 'If your app is over the limit and refactoring or code cleaning are not enough,
    you can enable a multidex configuration for your app. A multidex configuration
    will create different `dex` files. Add the following line in the `defaultConfig`
    of your `build.gradle` file to enable multidex:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序超过了限制，重构或代码清理不够，您可以为您的应用程序启用多dex配置。多dex配置将创建不同的`dex`文件。在您的`build.gradle`文件的`defaultConfig`中添加以下行以启用多dex：
- en: '[PRE4]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You also need to add the `MultiDexApplication` class to your application in
    the manifest file:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要在清单文件中添加`MultiDexApplication`类：
- en: '[PRE5]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Summary
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You learned how to make an APK file and how to modify your application to make
    it ready for release. You also learned how to sign our application using the developer
    certificate. By the end of this chapter, you should have generated a signed APK
    prepared for its release.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您学习了如何制作APK文件以及如何修改您的应用程序以便发布。您还学习了如何使用开发者证书对应用程序进行签名。到本章结束时，您应该已经生成了一个准备发布的已签名APK。
- en: In [Appendix](apa.html "Appendix A. Getting Help"), *Getting Help*, you will
    learn how to get help using Android Studio. We will access the Android Studio
    online documentation and go through the help topics. Finally, you will learn about
    keeping your Android Studio instance updated using the inbuilt feature for updates.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在[附录](apa.html "附录 A. 获取帮助")中，您将学习如何使用Android Studio获取帮助。我们将访问Android Studio的在线文档并浏览帮助主题。最后，您将了解如何使用内置的更新功能保持您的Android
    Studio实例更新。
