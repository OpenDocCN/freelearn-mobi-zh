- en: Chapter 2. Controlling an Arduino Board via Bluetooth
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章.通过蓝牙控制Arduino板
- en: This second chapter of the book will be about putting things together and writing
    our first app to control an Arduino board via **Bluetooth Low Energy** (**BLE**).
    We chose to use BLE for all the Bluetooth projects of this book as it is the latest
    standard for Bluetooth communication at the time of publication. Compared to previous
    Bluetooth modules, BLE modules have low energy consumption as the standard works
    in bursts rather than maintaining a persistent connection. In addition, BLE offers
    low latency and has a comparable range to the older Bluetooth standards.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本书第二章将介绍如何组装东西，并编写我们的第一个应用程序来通过**低功耗蓝牙**（**BLE**）控制Arduino板。我们选择使用BLE作为本书所有蓝牙项目的标准，因为它是出版时的最新蓝牙通信标准。与之前的蓝牙模块相比，BLE模块具有低能耗，因为该标准在短时间脉冲中工作，而不是保持持续连接。此外，BLE提供低延迟，并且与较老的蓝牙标准具有可比的范围。
- en: We will connect a BLE module to Arduino as well as an LED that we will control
    via an Android app. Then, we will write an Arduino sketch that uses the aREST
    library so that we can receive commands via Bluetooth coming from a smartphone
    or tablet.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将连接一个BLE模块到Arduino以及一个我们将通过Android应用程序控制的LED。然后，我们将编写一个Arduino草图，使用aREST库，以便我们可以通过蓝牙接收来自智能手机或平板电脑的命令。
- en: The Android app will also be able to control the board remotely and we will
    have the opportunity to enhance the user experience by learning how to include
    buttons to switch the LED on and off.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Android应用程序也将能够远程控制该板，我们将有机会通过学习如何包含按钮来切换LED的开和关来增强用户体验。
- en: 'The following will be the main takeaways from this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下将是本章的主要收获：
- en: Connecting a BLE module to an Arduino board
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将BLE模块连接到Arduino板
- en: Writing an Arduino sketch to enable Bluetooth communications on the Arduino
    board
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写Arduino草图以在Arduino板上启用蓝牙通信
- en: Writing an Android application to send commands to the Arduino board via Bluetooth
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写Android应用程序以通过蓝牙向Arduino板发送命令
- en: Hardware and software requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件和软件要求
- en: The first thing you will need for this project is an Arduino Uno board.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，你首先需要一块Arduino Uno板。
- en: Then, you will need a BLE module. We chose the Adafruit nRF8001 chip because
    it comes with a nice Arduino library, and it already has existing examples of
    Android apps to control the module.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你需要一个BLE模块。我们选择了Adafruit nRF8001芯片，因为它附带了一个不错的Arduino库，并且已经存在用于控制该模块的Android应用程序示例。
- en: 'The following is a close-up picture of the module we used for this project:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本项目使用的模块的特写照片：
- en: '![Hardware and software requirements](img/0389OS_02_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![硬件和软件要求](img/0389OS_02_01.jpg)'
- en: You will also need one LED of the color of your choice, and a 330 Ohm resistor.
    Finally, to make the different electrical connections, you will also need a breadboard
    and some jumper wires.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要一个你喜欢的颜色的LED灯和一个330欧姆电阻。最后，为了进行不同的电气连接，你还需要一个面包板和一些跳线。
- en: 'The following is the list of all hardware parts you will need for this project,
    along with links to find these parts on the Web:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是你将需要用于此项目的所有硬件部件列表，以及如何在网络上找到这些部件的链接：
- en: The Arduino Uno board ([http://www.adafruit.com/product/50](http://www.adafruit.com/product/50))
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino Uno板([http://www.adafruit.com/product/50](http://www.adafruit.com/product/50))
- en: LEDs ([https://www.sparkfun.com/products/9590](https://www.sparkfun.com/products/9590))
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LED灯([https://www.sparkfun.com/products/9590](https://www.sparkfun.com/products/9590))
- en: The 330 Ohm resistor ([https://www.sparkfun.com/products/8377](https://www.sparkfun.com/products/8377))
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 330欧姆电阻([https://www.sparkfun.com/products/8377](https://www.sparkfun.com/products/8377))
- en: The Adafruit nRF8001 breakout board ([https://www.adafruit.com/products/1697](https://www.adafruit.com/products/1697))
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Adafruit nRF8001扩展板([https://www.adafruit.com/products/1697](https://www.adafruit.com/products/1697))
- en: The breadboard ([https://www.adafruit.com/product/64](https://www.adafruit.com/product/64))
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面包板([https://www.adafruit.com/product/64](https://www.adafruit.com/product/64))
- en: Jumper wires ([https://www.adafruit.com/product/758](https://www.adafruit.com/product/758))
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳线([https://www.adafruit.com/product/758](https://www.adafruit.com/product/758))
- en: 'On the software side, you will need the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件方面，你需要以下内容：
- en: The Arduino IDE ([http://arduino.cc/en/Main/Software](http://arduino.cc/en/Main/Software))
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino IDE([http://arduino.cc/en/Main/Software](http://arduino.cc/en/Main/Software))
- en: The Arduino aREST library ([https://github.com/marcoschwartz/aREST/](https://github.com/marcoschwartz/aREST/))
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino aREST库([https://github.com/marcoschwartz/aREST/](https://github.com/marcoschwartz/aREST/))
- en: The nRF8001 Arduino library for the BLE chip ([https://github.com/adafruit/Adafruit_nRF8001](https://github.com/adafruit/Adafruit_nRF8001))
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: nRF8001 Arduino库用于BLE芯片（[https://github.com/adafruit/Adafruit_nRF8001](https://github.com/adafruit/Adafruit_nRF8001)）
- en: To install a given library, simply extract the folder in your `Arduino /libraries`
    folder (or create this folder if it doesn't exist yet). To find your `Arduino`
    folder or define a new one, you can go to the **Preferences** option of the Arduino
    IDE.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装某个库，只需将文件夹提取到您的`Arduino /libraries`文件夹中（如果尚不存在，则创建此文件夹）。要找到您的`Arduino`文件夹或定义一个新的，您可以在Arduino
    IDE的**首选项**选项中操作。
- en: Configuring the hardware
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置硬件
- en: 'We will now build the hardware part of the project. To help you out, the following
    is a schematic of the project:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将构建项目的硬件部分。为了帮助您，以下是这个项目的原理图：
- en: '![Configuring the hardware](img/0389OS_02_02.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![配置硬件](img/0389OS_02_02.jpg)'
- en: 'Now, we will perform the following steps:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将执行以下步骤：
- en: The first step is to place the Bluetooth module and the LED on the breadboard.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是将蓝牙模块和LED放置在面包板上。
- en: 'Then, connect the power supply from the Arduino board to the breadboard: 5V
    of the Arduino board goes to the red power rail, and **GND** goes to the blue
    power rail.'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将Arduino板上的电源连接到面包板：Arduino板的5V连接到红色电源轨，**GND**连接到蓝色电源轨。
- en: 'We will now connect the BLE module. First, connect the power supply of the
    module: **GND** goes to the blue power rail, and **VIN** goes to the red power
    rail.'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将连接BLE模块。首先，连接模块的电源：**GND**连接到蓝色电源轨，**VIN**连接到红色电源轨。
- en: 'After this, you need to connect the different wires responsible for the **Serial
    Peripheral Interface** (**SPI**) communications: **SCK** to Arduino pin **13**,
    **MISO** to Arduino pin **12**, and **MOSI** to Arduino pin **11**.'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此之后，您需要连接负责**串行外设接口**（**SPI**）通信的不同电线：**SCK**连接到Arduino引脚**13**，**MISO**连接到Arduino引脚**12**，**MOSI**连接到Arduino引脚**11**。
- en: Then, connect the **REQ** pin to Arduino pin **10**. Finally, connect the **RDY**
    pin to Arduino pin **2**, and the **RST** pin to Arduino pin **9**.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将**REQ**引脚连接到Arduino引脚**10**。最后，将**RDY**引脚连接到Arduino引脚**2**，将**RST**引脚连接到Arduino引脚**9**。
- en: For the LED, simply place the resistor on the breadboard so it is in series
    with the LED, connected to the anode of the LED, which is the longest pin of the
    LED.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于LED，只需将电阻放置在面包板上，使其与LED串联，连接到LED的阳极，即LED的最长引脚。
- en: Then, connect the other side of the resistor to Arduino pin **7**.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将电阻的另一端连接到Arduino引脚**7**。
- en: Finally, connect the other pin of the LED (the cathode) to the blue power rail,
    that is to the ground.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将LED的另一端（阴极）连接到蓝色电源轨，即地线。
- en: 'This is an image of the completely assembled project:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是完全组装好的项目的图片：
- en: '![Configuring the hardware](img/0389OS_02_03.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![配置硬件](img/0389OS_02_03.jpg)'
- en: Writing the Arduino sketch
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写Arduino草图
- en: 'We will now write the Arduino sketch so that the Arduino board can talk with
    the BLE module and receive commands from Android via Bluetooth. Here is the complete
    sketch for this part:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将编写Arduino草图，以便Arduino板能够与BLE模块通信并通过蓝牙接收来自Android的命令。以下是这部分完整的草图：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, let''s see the details of this sketch. It starts by importing the required
    libraries for the nRF8001 BLE module and the aREST library:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看这个草图的细节。它首先导入nRF8001 BLE模块和aREST库所需的库：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We will also specify an option for the aREST library, called `LIGHTWEIGHT`.
    This means that the Arduino board will only return a limited amount of data back
    to the Android phone. It will return the value of a variable when we read from
    the board, and no data at all when we send a command to the board. This is required
    when using BLE communications. This is done with the following piece of code:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将为aREST库指定一个名为`LIGHTWEIGHT`的选项。这意味着Arduino板将只返回有限的数据回Android手机。当我们从板上读取时，它将返回变量的值，当我们向板上发送命令时，则不返回任何数据。这在使用BLE通信时是必需的。这是通过以下代码片段完成的：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, we will define which pin the BLE module is connected to:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将定义BLE模块连接到的引脚：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note that we don't define the pins for the SPI pins of the BLE module, as they
    are already defined in the module's library.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们没有为BLE模块的SPI引脚定义引脚，因为它们已经在模块的库中定义了。
- en: 'After this, we can create an instance of the aREST API that will be used to
    handle the requests coming via Bluetooth:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，我们可以创建一个aREST API的实例，该实例将用于处理通过蓝牙传入的请求：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We also need to create an instance for the BLE module, with the pins we defined
    earlier:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要为之前定义的引脚创建BLE模块的实例：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, in the `setup()` function of the sketch, we will start the serial communications,
    and print a welcome message:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在草图的`setup()`函数中，我们将启动串行通信，并打印一条欢迎信息：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that the welcome message is printed using the `F()` function around the
    message, which puts the string variable directly into the Arduino program memory.
    This is done to save some dynamic memory (RAM) for this sketch.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，欢迎信息是通过在消息周围使用`F()`函数打印的，这直接将字符串变量放入Arduino程序内存中。这样做是为了为这个草图节省一些动态内存（RAM）。
- en: 'We will also initialize the BLE module:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将初始化BLE模块：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, we will give an ID and a name to our board:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将为我们的板子分配一个ID和名称：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the `loop()` function of the sketch, we will check the status of the BLE
    module:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在草图的`loop()`函数中，我们将检查BLE模块的状态：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After this, we will get this status and store it in a variable:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将获取此状态并将其存储在一个变量中：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If there is some device connected to our BLE module, we will then handle the
    incoming request using the aREST library:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有设备连接到我们的BLE模块，我们将使用aREST库处理传入的请求：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that all the code for this chapter can be found inside the GitHub repository
    of the book at [https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，本章的所有代码都可以在本书的GitHub仓库中找到，网址为[https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints)。
- en: It's now time to upload the sketch to your Arduino board. When this is done,
    you can move on to the development of the Android app to control the Arduino board
    via the BLE sketch.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候将草图上传到您的Arduino板上了。完成此操作后，您可以继续开发Android应用程序，通过BLE草图控制Arduino板。
- en: How to create a simple Android app to connect to the BLE module
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何创建一个简单的Android应用程序以连接到BLE模块
- en: 'Connecting the Adafruit BLE module will give us the opportunity to:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 连接Adafruit BLE模块将给我们机会：
- en: Learn how to work with existing open source projects
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何与现有的开源项目合作
- en: Analyze Java and understand how the `Main` activity connects to the layout files
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析Java并了解`Main`活动如何连接到布局文件
- en: Modify the code to light up an LED via Bluetooth and get it to work
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改代码以通过蓝牙点亮LED并使其工作
- en: For this project, we will be using an open source project that works perfectly
    with our Adafruit Bluetooth module and is optimized for the Android Studio IDE.
    Throughout this chapter, we will also have the opportunity to explain what the
    different parts of the code are for.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，我们将使用一个开源项目，它与我们的Adafruit蓝牙模块配合得非常好，并且针对Android Studio IDE进行了优化。在本章中，我们还将有机会解释代码的不同部分是做什么用的。
- en: To make the project work successfully, you need to make sure that you have installed
    the necessary SDKs outlined in [Chapter 1](ch01.html "Chapter 1. Setting Up Your
    Workspace"), *Setting Up Your Workspace*. The SDK is available via SDK Manager,
    which is accessible by going to **Tools** > **Android** > **SDK Manager**.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要使项目成功运行，您需要确保您已经安装了[第1章](ch01.html "第1章。设置您的开发环境")中概述的必要SDK。SDK可以通过SDK Manager获取，通过**工具**
    > **Android** > **SDK Manager**访问。
- en: 'The first step is to go to Tony Dicola''s GitHub public repository, at [https://github.com/tdicola/BTLETest](https://github.com/tdicola/BTLETest),
    as shown in the following screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是访问Tony Dicola的GitHub公共仓库，网址为[https://github.com/tdicola/BTLETest](https://github.com/tdicola/BTLETest)，如图下所示：
- en: '![How to create a simple Android app to connect to the BLE module](img/0389OS_02_04.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![如何创建一个简单的Android应用程序以连接到BLE模块](img/0389OS_02_04.jpg)'
- en: 'At this point, you can either opt to **Clone in Desktop** using the GitHub
    desktop application or download the ZIP file and extract the file to your desktop,
    as shown in the following screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，您可以选择使用GitHub桌面应用程序**在桌面克隆**，或者下载ZIP文件并将其提取到您的桌面上，如图下所示：
- en: '![How to create a simple Android app to connect to the BLE module](img/0389OS_02_05.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![如何创建一个简单的Android应用程序以连接到BLE模块](img/0389OS_02_05.jpg)'
- en: Double-click on the extracted file (Windows and Mac).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 双击提取的文件（Windows和Mac）。
- en: 'Open Android Studio, then click on **Import Project** and **Choose Extracted
    Folder**, as shown here:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 打开Android Studio，然后单击**导入项目**和**选择提取的文件夹**，如图所示：
- en: '![How to create a simple Android app to connect to the BLE module](img/0389OS_02_06.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![如何创建一个简单的Android应用程序以连接到BLE模块](img/0389OS_02_06.jpg)'
- en: 'To aid you in the selection process, you will be able to see a small Android
    logo next to the folder you need to choose, as shown in the following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助您在选择过程中，您将能够在您需要选择的文件夹旁边看到一个小的Android标志，如图下所示：
- en: '![How to create a simple Android app to connect to the BLE module](img/0389OS_02_07.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![如何创建一个简单的Android应用程序连接到BLE模块](img/0389OS_02_07.jpg)'
- en: After successfully importing the project, you might need to modify the Gradle
    settings file so that it compiles correctly and is successfully built. The Gradle
    settings file acts as a preferences manager for our Android project and allows
    us to manage what libraries we would like to include for our project.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功导入项目后，你可能需要修改Gradle设置文件，以确保它正确编译并成功构建。Gradle设置文件充当我们Android项目的首选项管理器，并允许我们管理我们希望为项目包含哪些库。
- en: 'You can modify the Gradle settings file by accessing the project tree and clicking
    on **app > src** followed by **build.gradle**, as shown in the following screenshot
    :'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过访问项目树并点击**app > src**然后点击**build.gradle**来修改Gradle设置文件，如下面的截图所示：
- en: '![How to create a simple Android app to connect to the BLE module](img/0389OS_02_08.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![如何创建一个简单的Android应用程序连接到BLE模块](img/0389OS_02_08.jpg)'
- en: 'Our recommendation is to alter `buildToolsVersion` to `19.1.0`. Do not be confused
    by **app** showing up in the tabs. The correct settings can be seen as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的建议是将`buildToolsVersion`修改为`19.1.0`。不要被标签页中出现的**app**所迷惑。正确的设置如下所示：
- en: '![How to create a simple Android app to connect to the BLE module](img/0389OS_02_09.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![如何创建一个简单的Android应用程序连接到BLE模块](img/0389OS_02_09.jpg)'
- en: 'Once you modify the settings in the Gradle **Settings** option, you will be
    asked to sync your project settings, and you will be able to do that by clicking
    on **Sync Now**. Once the Gradle settings file is set up, you can go ahead and
    test the app on your physical Android device that supports BLE (the device should
    be running Android 4.3 or higher). Run the app by going to the toolbar, clicking
    on **Run**, and selecting **Run app**, followed by choosing the right physical
    device, as shown in the following screenshot:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在Gradle的**设置**选项中修改了设置，你将被要求同步你的项目设置，你可以通过点击**立即同步**来完成。一旦Gradle设置文件设置好，你就可以继续在支持BLE的物理Android设备上测试应用程序（设备应运行Android
    4.3或更高版本）。通过工具栏，点击**运行**，然后选择**运行应用程序**，接着选择正确的物理设备，如下面的截图所示：
- en: '![How to create a simple Android app to connect to the BLE module](img/0389OS_02_10.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![如何创建一个简单的Android应用程序连接到BLE模块](img/0389OS_02_10.jpg)'
- en: 'You can send out the following messages to the Bluetooth module by tapping
    on the **Text Field** and then tapping on **Send**:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过点击**文本字段**然后点击**发送**来向蓝牙模块发送以下消息：
- en: /mode/7/o /
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: /mode/7/o /
- en: /digital/7/1 /
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: /digital/7/1 /
- en: /digital/7/0 /
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: /digital/7/0 /
- en: When you see that the preceding messages respond with the right responses via
    the LED, which will switch on and switch off if you follow the previous order,
    we will then proceed to modifying the layout file.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当你看到前一条消息通过LED以正确的响应时，它会根据之前的顺序打开和关闭，我们接着将修改布局文件。
- en: Modifying the Android layout file
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改Android布局文件
- en: 'Modification of the Android layout file will simplify the user experience and
    allow us to switch the LED on and off with the tap of a button. In the Android
    layout file, we will add buttons for the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 修改Android布局文件将简化用户体验，并允许我们通过点击按钮来开关LED。在Android布局文件中，我们将添加以下按钮：
- en: Activating the pin to accept inputs
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 激活引脚以接受输入
- en: Switch on LED
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开LED
- en: Switch off LED
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关闭LED
- en: 'Go to the project tree, as shown in the following screenshot and follow this
    path: `app` > `src` > `res` > `layout` > `activity_main.xml`. Double-click on
    the `activity_main.xml` file.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 前往项目树，如下面的截图所示，并按照以下路径操作：`app` > `src` > `res` > `layout` > `activity_main.xml`。双击`activity_main.xml`文件。
- en: '![Modifying the Android layout file](img/0389OS_02_11.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![修改Android布局文件](img/0389OS_02_11.jpg)'
- en: 'The Android layout files are managed either via the design view or via the
    text view, where the dimensions and properties are set using the XML format. In
    this particular case, we will stick to modifying the layout using the design view,
    as shown in the following screenshot:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Android布局文件可以通过设计视图或文本视图进行管理，其中尺寸和属性使用XML格式设置。在这种情况下，我们将坚持使用设计视图来修改布局，如下面的截图所示：
- en: '![Modifying the Android layout file](img/0389OS_02_12.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![修改Android布局文件](img/0389OS_02_12.jpg)'
- en: Within the design view, there is a palette with defined user-interface elements
    that the developer can use to drag-and-drop into the design view and create customized
    layouts. To follow proper design-develop-distribute methodology, we will start
    off by creating a paper prototype of how we would like the app to look and work
    out, as shown in the following screenshot. At this point of time, our paper prototypes
    will be neither sophisticated nor adherent to design principles, but we would
    like to help you get used to the process to enable you to design high-quality
    apps.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计视图中，有一个调色板，其中包含定义好的用户界面元素，开发者可以将它们拖放到设计视图中以创建自定义布局。为了遵循正确的设计-开发-分发方法，我们将首先创建一个如何使应用看起来和工作方式的纸版原型，如下面的截图所示。在这个时候，我们的纸版原型既不复杂也不遵循设计原则，但我们希望帮助你熟悉这个过程，以便你能够设计高质量的应用。
- en: '![Modifying the Android layout file](img/0389OS_02_13.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![修改Android布局文件](img/0389OS_02_13.jpg)'
- en: Having this paper prototype as our guide, we can then start modifying the design.
    We will start off by resizing the **Scroll View** area, which shows the response
    that the Android physical device receives when connecting with the BLE module.
    This will allow us to visualize how we would like to design the layout.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以这个纸版原型为我们的指南，我们然后可以开始修改设计。我们将从调整**滚动视图**区域的大小开始，这显示了Android物理设备连接到BLE模块时接收到的响应。这将使我们能够可视化我们想要设计的布局。
- en: 'Adding buttons to the interface is as easy as dragging and dropping buttons
    from the **Palette** option to the user interface. The **Palette** option is available
    on the left-hand side of the design view. In this case, we will add the following
    three buttons:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 将按钮添加到界面就像从**调色板**选项拖放按钮到用户界面一样简单。**调色板**选项位于设计视图的左侧。在这种情况下，我们将添加以下三个按钮：
- en: Set output
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置输出
- en: Switch on
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开启
- en: Switch off
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关闭
- en: 'If you double-click on the button that you''ve included in the interface, you
    will be able to change the text and ID. Standard Java naming conventions recommend
    the use of the camel-case naming convention; thus, you should identify them as
    follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你双击界面中包含的按钮，你将能够更改文本和ID。标准的Java命名约定推荐使用驼峰命名法；因此，你应该如下标识它们：
- en: The **Set Output** button
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设置输出**按钮'
- en: '**Text**: `Set Output`'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文本**：`设置输出`'
- en: '**ID**: `setOutputBtn`'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ID**：`setOutputBtn`'
- en: The **Switch On** button
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开启**按钮'
- en: '**Text**: `Switch On LED`'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文本**：`开启LED`'
- en: '**ID**: `switchOnBtn`'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ID**：`switchOnBtn`'
- en: The **Set Output** button
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设置输出**按钮'
- en: '**Text**: `Switch Off LED`'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文本**：`关闭LED`'
- en: '**ID**: `switchOffBtn`'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ID**：`switchOffBtn`'
- en: With the layout setup, we can proceed to connecting the layout to our main activity
    code.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在布局设置完成后，我们可以继续将布局连接到我们的主活动代码。
- en: Connecting the modified layout to the corresponding activity
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将修改后的布局连接到相应的活动
- en: 'From the project tree, follow the path: `app` > `src` > `main` > `java` > `com.tonydicola.bletest.app`
    > `MainActivity`, as shown in the following screenshot:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 从项目树中，按照以下路径：`app` > `src` > `main` > `java` > `com.tonydicola.bletest.app`
    > `MainActivity`，如下面的截图所示：
- en: '![Connecting the modified layout to the corresponding activity](img/0389OS_02_14.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![将修改后的布局连接到相应的活动](img/0389OS_02_14.jpg)'
- en: Double-click on `MainActivity.java`. The screen for `MainActivity.java` will
    look as follows. In the following paragraphs, we will have an opportunity to go
    through the code and understand what role it plays within the app. There are a
    number of comments within the code (statements starting with `//////`) that will
    further explain the role of those lines of code.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 双击`MainActivity.java`。`MainActivity.java`的屏幕将如下所示。在接下来的段落中，我们将有机会查看代码并了解它在应用中的作用。代码中包含许多注释（以`//////`开始的语句），将进一步解释这些代码行的角色。
- en: '![Connecting the modified layout to the corresponding activity](img/0389OS_02_15.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![将修改后的布局连接到相应的活动](img/0389OS_02_15.jpg)'
- en: 'If we quickly analyze the code, we can see the following structure:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们快速分析代码，我们可以看到以下结构：
- en: The package name.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包名。
- en: An import statement.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个导入语句。
- en: Declaration of private and public variables (which can be used throughout the
    whole activity).
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 私有和公共变量的声明（可以在整个活动中使用）。
- en: '`BluetoothGattCallback`: This is the method that deals with the callback and
    where much of the logic takes place.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BluetoothGattCallback`：这是处理回调并执行大部分逻辑的方法。'
- en: '`onServicesDiscovered`: This is the method that deals with Bluetooth service
    discovery.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onServicesDiscovered`：这是处理蓝牙服务发现的方法。'
- en: '`onCharacteristicChanged`: This is the method that takes care of any change
    in characteristics.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onCharacteristicChanged`：这是一个处理任何特性变化的方法。'
- en: '`onCreate`: This is the method that deals with the main layout and how it functions.
    The `onCreate` method is called when the activity is first shown, and plays a
    very important role in the Android app life cycle. Most of the code in this section
    will relate to the Android layout.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onCreate`：这是一个处理主布局及其功能的方法。当活动首次显示时调用 `onCreate` 方法，在 Android 应用生命周期中扮演着非常重要的角色。本节的大部分代码将与
    Android 布局相关。'
- en: '`onResume` and `onStop`: These are the methods that form a part of the Android
    app life cycle and determine how the app will react at different points.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onResume` 和 `onStop`：这些是构成 Android 应用生命周期一部分的方法，决定了应用在不同点如何反应。'
- en: '`sendClick`: This is the method that deals with what processes will be run
    when the **Send** button is clicked.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sendClick`：这是一个处理当点击**发送**按钮时将运行哪些过程的方法。'
- en: '`parseIDs`: This is the method that will return the Bluetooth module''s ID
    in string format.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parseIDs`：这是一个将蓝牙模块的 ID 以字符串格式返回的方法。'
- en: '`Boilerplate`: This is the code that is available within the primary template
    when creating this project, but it is not necessarily relevant for it.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Boilerplate`：这是在创建此项目时主要模板内可用的代码，但它不一定与此项目相关。'
- en: 'Understanding the code will help us to make the right modifications; we will
    start by declaring the UI elements as private variables by adding the following
    code:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 理解代码将帮助我们做出正确的修改；我们将从添加以下代码开始，将 UI 元素声明为私有变量：
- en: '[PRE12]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We then proceed to the `onCreate` method, where we will add the code that will
    recognize the actual buttons within the layout and where we will also add the
    `onClickListener` method to each button, which allows the Android app to listen
    to any of the users' interactions with the button and act accordingly.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们进入 `onCreate` 方法，在那里我们将添加识别布局中实际按钮的代码，并且我们还将为每个按钮添加 `onClickListener` 方法，这允许
    Android 应用监听用户与按钮的任何交互并相应地行动。
- en: 'First, we will start off by grabbing references to the UI elements by adding
    the following code:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将通过添加以下代码来获取 UI 元素的引用：
- en: '[PRE13]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Just after these references to the UI elements, we will add some more code,
    which will allow us to send the right messages to the BLE module and to switch
    on and switch off the light:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些对 UI 元素的引用之后，我们将添加一些额外的代码，这将使我们能够向 BLE 模块发送正确的消息，并切换开和关闭灯光：
- en: '[PRE14]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'With the preceding methods implemented, we should now be able to build the
    app and test it on our physical device. The final result should look as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现了前面的方法之后，我们现在应该能够构建应用并在我们的物理设备上测试它。最终结果应该如下所示：
- en: '![Connecting the modified layout to the corresponding activity](img/0389OS_02_16.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![将修改后的布局连接到相应的活动](img/0389OS_02_16.jpg)'
- en: You should now successfully be able to switch on and switch off the light from
    the Android app.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该能够从 Android 应用中成功切换开和关闭灯光。
- en: How to go further
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何更进一步
- en: There are several things you can do to go further with what you learned in this
    chapter. You can use what you learned to control more than just a simple LED.
    For example, you can connect the relay module we used in the first chapter and
    control it via Bluetooth. This already allows you to control much bigger devices,
    such as lamps, all via your Android phone. Of course, such projects require that
    you take safety precautions, which will be detailed in the chapter where we will
    build such an application.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以采取一些措施来进一步学习本章所学的内容。您可以使用所学知识控制不仅仅是简单的 LED。例如，您可以连接我们在第一章中使用过的继电器模块，并通过蓝牙控制它。这已经允许您通过您的
    Android 手机控制更大的设备，例如灯具。当然，这样的项目需要您采取安全预防措施，这些将在我们将构建此类应用的章节中详细说明。
- en: You can also work on improving the Android application by improving the user
    interface and learning how to further modify the Android layout files with better-looking
    buttons, customized app icons, and general improvements to the user experience.
    As we go on in this book, we will have further opportunities to build on this
    code and enable more functions and capabilities.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过改进用户界面和学习如何使用更美观的按钮、定制的应用图标以及提升用户体验的通用改进来提升 Android 应用。随着本书的深入，我们将有更多机会在此基础上构建代码，并启用更多功能和能力。
- en: Summary
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Let's summarize what we learned in this chapter. We connected a BLE module to
    Arduino as well as a simple red LED that we controlled remotely. After this, we
    wrote a sketch that enabled the Arduino board to receive commands via the Bluetooth
    module.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们总结一下本章所学的内容。我们连接了一个BLE模块到Arduino，以及一个简单的红色LED，我们可以远程控制它。之后，我们编写了一个草图，使得Arduino板能够通过蓝牙模块接收命令。
- en: On the Android side, we took the opportunity to take an existing project, analyze
    it, modify it, and run the final application on our physical Android device.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android端，我们抓住机会对一个现有项目进行了分析、修改，并在我们的物理Android设备上运行了最终应用程序。
- en: In the next chapter, we will build a wireless weather station using what we
    just learnt in this chapter. We will connect several sensors to an Arduino board,
    and read data coming from these sensors using an Android app communicating with
    the Arduino board via Bluetooth.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用本章所学的内容构建一个无线气象站。我们将把几个传感器连接到Arduino板上，并通过与Arduino板通过蓝牙通信的Android应用程序读取这些传感器的数据。
